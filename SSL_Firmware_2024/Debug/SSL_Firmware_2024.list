
SSL_Firmware_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a96c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800ac38  0800ac38  0001ac38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac70  0800ac70  0001ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac78  0800ac78  0001ac78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ac7c  0800ac7c  0001ac7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800ac80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a40  24000010  0800ac90  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a50  0800ac90  00020a50  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001e959  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002f22  00000000  00000000  0003e9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001990  00000000  00000000  00041900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000142e  00000000  00000000  00043290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035cfd  00000000  00000000  000446be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021f3d  00000000  00000000  0007a3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00167256  00000000  00000000  0009c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000705c  00000000  00000000  00203550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  0020a5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800ac20 	.word	0x0800ac20

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800ac20 	.word	0x0800ac20

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f002 fbac 	bl	8002d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f838 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f001 f8c0 	bl	8001798 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000618:	f000 ffd2 	bl	80015c0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800061c:	f001 f8b4 	bl	8001788 <MX_USB_OTG_HS_USB_Init>
  MX_SPI1_Init();
 8000620:	f000 fa18 	bl	8000a54 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000624:	f000 fa6c 	bl	8000b00 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000628:	f000 f914 	bl	8000854 <MX_I2C1_Init>
  MX_I2C2_Init();
 800062c:	f000 f952 	bl	80008d4 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000630:	f000 f9d0 	bl	80009d4 <MX_I2C4_Init>
  MX_UART4_Init();
 8000634:	f000 fe94 	bl	8001360 <MX_UART4_Init>
  MX_I2C3_Init();
 8000638:	f000 f98c 	bl	8000954 <MX_I2C3_Init>
  MX_UART7_Init();
 800063c:	f000 fedc 	bl	80013f8 <MX_UART7_Init>
  MX_UART9_Init();
 8000640:	f000 ff26 	bl	8001490 <MX_UART9_Init>
  MX_USART2_UART_Init();
 8000644:	f000 ff70 	bl	8001528 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000648:	f001 f806 	bl	8001658 <MX_USART6_UART_Init>
  MX_USART10_UART_Init();
 800064c:	f001 f850 	bl	80016f0 <MX_USART10_UART_Init>
  MX_TIM1_Init();
 8000650:	f000 faac 	bl	8000bac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000654:	f000 fb7a 	bl	8000d4c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000658:	f000 fc1c 	bl	8000e94 <MX_TIM4_Init>
  MX_TIM15_Init();
 800065c:	f000 fd38 	bl	80010d0 <MX_TIM15_Init>
  MX_TIM23_Init();
 8000660:	f000 fe28 	bl	80012b4 <MX_TIM23_Init>
  MX_TIM3_Init();
 8000664:	f000 fbc0 	bl	8000de8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000668:	f000 fc6a 	bl	8000f40 <MX_TIM5_Init>
  MX_TIM13_Init();
 800066c:	f000 fcbe 	bl	8000fec <MX_TIM13_Init>
  MX_TIM16_Init();
 8000670:	f000 fd80 	bl	8001174 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000674:	f000 fdf8 	bl	8001268 <MX_TIM17_Init>
  MX_TIM14_Init();
 8000678:	f000 fcdc 	bl	8001034 <MX_TIM14_Init>
  MX_ADC1_Init();
 800067c:	f000 f872 	bl	8000764 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x78>
	...

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09c      	sub	sp, #112	; 0x70
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068e:	224c      	movs	r2, #76	; 0x4c
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00a fa98 	bl	800abc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2220      	movs	r2, #32
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00a fa92 	bl	800abc8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f004 fb2f 	bl	8004d08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <SystemClock_Config+0xdc>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <SystemClock_Config+0xdc>)
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xdc>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c6:	bf00      	nop
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xdc>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d4:	d1f8      	bne.n	80006c8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006d6:	2321      	movs	r3, #33	; 0x21
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006f0:	f240 1313 	movw	r3, #275	; 0x113
 80006f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000702:	2304      	movs	r3, #4
 8000704:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000706:	2300      	movs	r3, #0
 8000708:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fb32 	bl	8004d7c <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800071e:	f001 f9d5 	bl	8001acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	233f      	movs	r3, #63	; 0x3f
 8000724:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2303      	movs	r3, #3
 8000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800072e:	2308      	movs	r3, #8
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000732:	2340      	movs	r3, #64	; 0x40
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000736:	2340      	movs	r3, #64	; 0x40
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800073a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000740:	2340      	movs	r3, #64	; 0x40
 8000742:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2103      	movs	r1, #3
 8000748:	4618      	mov	r0, r3
 800074a:	f004 fef1 	bl	8005530 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000754:	f001 f9ba 	bl	8001acc <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3770      	adds	r7, #112	; 0x70
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	58024800 	.word	0x58024800

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800076a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2224      	movs	r2, #36	; 0x24
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f00a fa23 	bl	800abc8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000782:	4b31      	ldr	r3, [pc, #196]	; (8000848 <MX_ADC1_Init+0xe4>)
 8000784:	4a31      	ldr	r2, [pc, #196]	; (800084c <MX_ADC1_Init+0xe8>)
 8000786:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000788:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <MX_ADC1_Init+0xe4>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800078e:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <MX_ADC1_Init+0xe4>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <MX_ADC1_Init+0xe4>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_ADC1_Init+0xe4>)
 800079c:	2204      	movs	r2, #4
 800079e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e0:	4819      	ldr	r0, [pc, #100]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007e2:	f002 fd99 	bl	8003318 <HAL_ADC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80007ec:	f001 f96e 	bl	8001acc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4813      	ldr	r0, [pc, #76]	; (8000848 <MX_ADC1_Init+0xe4>)
 80007fc:	f003 fdd4 	bl	80043a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000806:	f001 f961 	bl	8001acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_ADC1_Init+0xec>)
 800080c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080e:	2306      	movs	r3, #6
 8000810:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000816:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800081a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800081c:	2304      	movs	r3, #4
 800081e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_ADC1_Init+0xe4>)
 8000830:	f002 ff7a 	bl	8003728 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800083a:	f001 f947 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3730      	adds	r7, #48	; 0x30
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2400002c 	.word	0x2400002c
 800084c:	40022000 	.word	0x40022000
 8000850:	10c00010 	.word	0x10c00010

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_I2C1_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_I2C1_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <MX_I2C1_Init+0x7c>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_I2C1_Init+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000890:	f004 f912 	bl	8004ab8 <HAL_I2C_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800089a:	f001 f917 	bl	8001acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089e:	2100      	movs	r1, #0
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008a2:	f004 f999 	bl	8004bd8 <HAL_I2CEx_ConfigAnalogFilter>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f001 f90e 	bl	8001acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008b4:	f004 f9db 	bl	8004c6e <HAL_I2CEx_ConfigDigitalFilter>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008be:	f001 f905 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2400009c 	.word	0x2400009c
 80008cc:	40005400 	.word	0x40005400
 80008d0:	60404e72 	.word	0x60404e72

080008d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_I2C2_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <MX_I2C2_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_I2C2_Init+0x74>)
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <MX_I2C2_Init+0x7c>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_I2C2_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_I2C2_Init+0x74>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_I2C2_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_I2C2_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2C2_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <MX_I2C2_Init+0x74>)
 8000910:	f004 f8d2 	bl	8004ab8 <HAL_I2C_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800091a:	f001 f8d7 	bl	8001acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <MX_I2C2_Init+0x74>)
 8000922:	f004 f959 	bl	8004bd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800092c:	f001 f8ce 	bl	8001acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000930:	2100      	movs	r1, #0
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_I2C2_Init+0x74>)
 8000934:	f004 f99b 	bl	8004c6e <HAL_I2CEx_ConfigDigitalFilter>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800093e:	f001 f8c5 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	240000f0 	.word	0x240000f0
 800094c:	40005800 	.word	0x40005800
 8000950:	60404e72 	.word	0x60404e72

08000954 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_I2C3_Init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <MX_I2C3_Init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x60404E72;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_I2C3_Init+0x74>)
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <MX_I2C3_Init+0x7c>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_I2C3_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_I2C3_Init+0x74>)
 800096c:	2201      	movs	r2, #1
 800096e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_I2C3_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_I2C3_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_I2C3_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_I2C3_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_I2C3_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800098e:	480e      	ldr	r0, [pc, #56]	; (80009c8 <MX_I2C3_Init+0x74>)
 8000990:	f004 f892 	bl	8004ab8 <HAL_I2C_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800099a:	f001 f897 	bl	8001acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099e:	2100      	movs	r1, #0
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_I2C3_Init+0x74>)
 80009a2:	f004 f919 	bl	8004bd8 <HAL_I2CEx_ConfigAnalogFilter>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009ac:	f001 f88e 	bl	8001acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009b0:	2100      	movs	r1, #0
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_I2C3_Init+0x74>)
 80009b4:	f004 f95b 	bl	8004c6e <HAL_I2CEx_ConfigDigitalFilter>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009be:	f001 f885 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000144 	.word	0x24000144
 80009cc:	40005c00 	.word	0x40005c00
 80009d0:	60404e72 	.word	0x60404e72

080009d4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_I2C4_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <MX_I2C4_Init+0x7c>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a10:	f004 f852 	bl	8004ab8 <HAL_I2C_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a1a:	f001 f857 	bl	8001acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a22:	f004 f8d9 	bl	8004bd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f001 f84e 	bl	8001acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a34:	f004 f91b 	bl	8004c6e <HAL_I2CEx_ConfigDigitalFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f001 f845 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	24000198 	.word	0x24000198
 8000a4c:	58001c00 	.word	0x58001c00
 8000a50:	60404e72 	.word	0x60404e72

08000a54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a5a:	4a28      	ldr	r2, [pc, #160]	; (8000afc <MX_SPI1_Init+0xa8>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a60:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a6e:	2203      	movs	r2, #3
 8000a70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000a84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_SPI1_Init+0xa4>)
 8000ae4:	f007 fc96 	bl	8008414 <HAL_SPI_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000aee:	f000 ffed 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	240001ec 	.word	0x240001ec
 8000afc:	40013000 	.word	0x40013000

08000b00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b06:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <MX_SPI2_Init+0xa8>)
 8000b08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b56:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_SPI2_Init+0xa4>)
 8000b90:	f007 fc40 	bl	8008414 <HAL_SPI_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b9a:	f000 ff97 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	24000274 	.word	0x24000274
 8000ba8:	40003800 	.word	0x40003800

08000bac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09c      	sub	sp, #112	; 0x70
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]
 8000bde:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2234      	movs	r2, #52	; 0x34
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f009 ffee 	bl	800abc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bec:	4b55      	ldr	r3, [pc, #340]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000bee:	4a56      	ldr	r2, [pc, #344]	; (8000d48 <MX_TIM1_Init+0x19c>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bf2:	4b54      	ldr	r3, [pc, #336]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b52      	ldr	r3, [pc, #328]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bfe:	4b51      	ldr	r3, [pc, #324]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	4b4f      	ldr	r3, [pc, #316]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c0c:	4b4d      	ldr	r3, [pc, #308]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b4c      	ldr	r3, [pc, #304]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c18:	484a      	ldr	r0, [pc, #296]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000c1a:	f007 fd3a 	bl	8008692 <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f000 ff52 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c32:	4619      	mov	r1, r3
 8000c34:	4843      	ldr	r0, [pc, #268]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000c36:	f007 ff9f 	bl	8008b78 <HAL_TIM_ConfigClockSource>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c40:	f000 ff44 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c44:	483f      	ldr	r0, [pc, #252]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000c46:	f007 fd7b 	bl	8008740 <HAL_TIM_PWM_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c50:	f000 ff3c 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c64:	4619      	mov	r1, r3
 8000c66:	4837      	ldr	r0, [pc, #220]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000c68:	f008 fc98 	bl	800959c <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c72:	f000 ff2b 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c76:	2360      	movs	r3, #96	; 0x60
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c82:	2300      	movs	r3, #0
 8000c84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c96:	2200      	movs	r2, #0
 8000c98:	4619      	mov	r1, r3
 8000c9a:	482a      	ldr	r0, [pc, #168]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000c9c:	f007 fe58 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000ca6:	f000 ff11 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000caa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4824      	ldr	r0, [pc, #144]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000cb4:	f007 fe4c 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000cbe:	f000 ff05 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481e      	ldr	r0, [pc, #120]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000ccc:	f007 fe40 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000cd6:	f000 fef9 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cde:	220c      	movs	r2, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4818      	ldr	r0, [pc, #96]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000ce4:	f007 fe34 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000cee:	f000 feed 	bl	8001acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	4619      	mov	r1, r3
 8000d26:	4807      	ldr	r0, [pc, #28]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000d28:	f008 fcd4 	bl	80096d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000d32:	f000 fecb 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d36:	4803      	ldr	r0, [pc, #12]	; (8000d44 <MX_TIM1_Init+0x198>)
 8000d38:	f001 fbc8 	bl	80024cc <HAL_TIM_MspPostInit>

}
 8000d3c:	bf00      	nop
 8000d3e:	3770      	adds	r7, #112	; 0x70
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	240002fc 	.word	0x240002fc
 8000d48:	40010000 	.word	0x40010000

08000d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d92:	4814      	ldr	r0, [pc, #80]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000d94:	f007 fc7d 	bl	8008692 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d9e:	f000 fe95 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4619      	mov	r1, r3
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000db0:	f007 fee2 	bl	8008b78 <HAL_TIM_ConfigClockSource>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dba:	f000 fe87 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4806      	ldr	r0, [pc, #24]	; (8000de4 <MX_TIM2_Init+0x98>)
 8000dcc:	f008 fbe6 	bl	800959c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dd6:	f000 fe79 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000348 	.word	0x24000348

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	2224      	movs	r2, #36	; 0x24
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f009 fee6 	bl	800abc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e08:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <MX_TIM3_Init+0xa8>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e34:	2301      	movs	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e44:	2301      	movs	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e58:	f007 fcd4 	bl	8008804 <HAL_TIM_Encoder_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e62:	f000 fe33 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e74:	f008 fb92 	bl	800959c <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e7e:	f000 fe25 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3730      	adds	r7, #48	; 0x30
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	24000394 	.word	0x24000394
 8000e90:	40000400 	.word	0x40000400

08000e94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2224      	movs	r2, #36	; 0x24
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f009 fe90 	bl	800abc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <MX_TIM4_Init+0xa8>)
 8000eb6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000f04:	f007 fc7e 	bl	8008804 <HAL_TIM_Encoder_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f0e:	f000 fddd 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000f20:	f008 fb3c 	bl	800959c <HAL_TIMEx_MasterConfigSynchronization>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f2a:	f000 fdcf 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	; 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	240003e0 	.word	0x240003e0
 8000f3c:	40000800 	.word	0x40000800

08000f40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2224      	movs	r2, #36	; 0x24
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f009 fe3a 	bl	800abc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <MX_TIM5_Init+0xa8>)
 8000f62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295
 8000f76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4619      	mov	r1, r3
 8000fae:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000fb0:	f007 fc28 	bl	8008804 <HAL_TIM_Encoder_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000fba:	f000 fd87 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000fcc:	f008 fae6 	bl	800959c <HAL_TIMEx_MasterConfigSynchronization>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000fd6:	f000 fd79 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2400042c 	.word	0x2400042c
 8000fe8:	40000c00 	.word	0x40000c00

08000fec <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_TIM13_Init+0x40>)
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <MX_TIM13_Init+0x44>)
 8000ff4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <MX_TIM13_Init+0x40>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_TIM13_Init+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <MX_TIM13_Init+0x40>)
 8001004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001008:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_TIM13_Init+0x40>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_TIM13_Init+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_TIM13_Init+0x40>)
 8001018:	f007 fb3b 	bl	8008692 <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001022:	f000 fd53 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	24000478 	.word	0x24000478
 8001030:	40001c00 	.word	0x40001c00

08001034 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_TIM14_Init+0x94>)
 800104e:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <MX_TIM14_Init+0x98>)
 8001050:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_TIM14_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_TIM14_Init+0x94>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_TIM14_Init+0x94>)
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_TIM14_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_TIM14_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001072:	4815      	ldr	r0, [pc, #84]	; (80010c8 <MX_TIM14_Init+0x94>)
 8001074:	f007 fb0d 	bl	8008692 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800107e:	f000 fd25 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001082:	4811      	ldr	r0, [pc, #68]	; (80010c8 <MX_TIM14_Init+0x94>)
 8001084:	f007 fb5c 	bl	8008740 <HAL_TIM_PWM_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800108e:	f000 fd1d 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2360      	movs	r3, #96	; 0x60
 8001094:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	4619      	mov	r1, r3
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <MX_TIM14_Init+0x94>)
 80010aa:	f007 fc51 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80010b4:	f000 fd0a 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <MX_TIM14_Init+0x94>)
 80010ba:	f001 fa07 	bl	80024cc <HAL_TIM_MspPostInit>

}
 80010be:	bf00      	nop
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	240004c4 	.word	0x240004c4
 80010cc:	40002000 	.word	0x40002000

080010d0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_TIM15_Init+0x9c>)
 80010f0:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <MX_TIM15_Init+0xa0>)
 80010f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_TIM15_Init+0x9c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_TIM15_Init+0x9c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_TIM15_Init+0x9c>)
 8001102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001106:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_TIM15_Init+0x9c>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_TIM15_Init+0x9c>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_TIM15_Init+0x9c>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800111a:	4814      	ldr	r0, [pc, #80]	; (800116c <MX_TIM15_Init+0x9c>)
 800111c:	f007 fab9 	bl	8008692 <HAL_TIM_Base_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001126:	f000 fcd1 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4619      	mov	r1, r3
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_TIM15_Init+0x9c>)
 8001138:	f007 fd1e 	bl	8008b78 <HAL_TIM_ConfigClockSource>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001142:	f000 fcc3 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_TIM15_Init+0x9c>)
 8001154:	f008 fa22 	bl	800959c <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800115e:	f000 fcb5 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3720      	adds	r7, #32
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	24000510 	.word	0x24000510
 8001170:	40014000 	.word	0x40014000

08001174 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800117a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2234      	movs	r2, #52	; 0x34
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f009 fd17 	bl	800abc8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <MX_TIM16_Init+0xec>)
 800119c:	4a31      	ldr	r2, [pc, #196]	; (8001264 <MX_TIM16_Init+0xf0>)
 800119e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_TIM16_Init+0xec>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <MX_TIM16_Init+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_TIM16_Init+0xec>)
 80011ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_TIM16_Init+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_TIM16_Init+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <MX_TIM16_Init+0xec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011c6:	4826      	ldr	r0, [pc, #152]	; (8001260 <MX_TIM16_Init+0xec>)
 80011c8:	f007 fa63 	bl	8008692 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80011d2:	f000 fc7b 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <MX_TIM16_Init+0xec>)
 80011d8:	f007 fab2 	bl	8008740 <HAL_TIM_PWM_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80011e2:	f000 fc73 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	; 0x60
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f2:	2300      	movs	r3, #0
 80011f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001202:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	4815      	ldr	r0, [pc, #84]	; (8001260 <MX_TIM16_Init+0xec>)
 800120c:	f007 fba0 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001216:	f000 fc59 	bl	8001acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800122e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001232:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	4619      	mov	r1, r3
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <MX_TIM16_Init+0xec>)
 8001242:	f008 fa47 	bl	80096d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800124c:	f000 fc3e 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <MX_TIM16_Init+0xec>)
 8001252:	f001 f93b 	bl	80024cc <HAL_TIM_MspPostInit>

}
 8001256:	bf00      	nop
 8001258:	3750      	adds	r7, #80	; 0x50
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2400055c 	.word	0x2400055c
 8001264:	40014400 	.word	0x40014400

08001268 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_TIM17_Init+0x44>)
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <MX_TIM17_Init+0x48>)
 8001270:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_TIM17_Init+0x44>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_TIM17_Init+0x44>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_TIM17_Init+0x44>)
 8001280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001284:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_TIM17_Init+0x44>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_TIM17_Init+0x44>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_TIM17_Init+0x44>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_TIM17_Init+0x44>)
 800129a:	f007 f9fa 	bl	8008692 <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80012a4:	f000 fc12 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	240005a8 	.word	0x240005a8
 80012b0:	40014800 	.word	0x40014800

080012b4 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2224      	movs	r2, #36	; 0x24
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f009 fc80 	bl	800abc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_TIM23_Init+0xa4>)
 80012d4:	4a21      	ldr	r2, [pc, #132]	; (800135c <MX_TIM23_Init+0xa8>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_TIM23_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_TIM23_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_TIM23_Init+0xa4>)
 80012e6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ea:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_TIM23_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM23_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001300:	2301      	movs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001310:	2301      	movs	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM23_Init+0xa4>)
 8001324:	f007 fa6e 	bl	8008804 <HAL_TIM_Encoder_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800132e:	f000 fbcd 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM23_Init+0xa4>)
 8001340:	f008 f92c 	bl	800959c <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800134a:	f000 fbbf 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	; 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	240005f4 	.word	0x240005f4
 800135c:	4000e000 	.word	0x4000e000

08001360 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_UART4_Init+0x90>)
 8001366:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <MX_UART4_Init+0x94>)
 8001368:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_UART4_Init+0x90>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_UART4_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_UART4_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_UART4_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_UART4_Init+0x90>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_UART4_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_UART4_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_UART4_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_UART4_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_UART4_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_UART4_Init+0x90>)
 80013aa:	f008 fa33 	bl	8009814 <HAL_UART_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80013b4:	f000 fb8a 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b8:	2100      	movs	r1, #0
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_UART4_Init+0x90>)
 80013bc:	f009 fb39 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80013c6:	f000 fb81 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ca:	2100      	movs	r1, #0
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <MX_UART4_Init+0x90>)
 80013ce:	f009 fb6e 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80013d8:	f000 fb78 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_UART4_Init+0x90>)
 80013de:	f009 faef 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80013e8:	f000 fb70 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	24000640 	.word	0x24000640
 80013f4:	40004c00 	.word	0x40004c00

080013f8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_UART7_Init+0x90>)
 80013fe:	4a23      	ldr	r2, [pc, #140]	; (800148c <MX_UART7_Init+0x94>)
 8001400:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_UART7_Init+0x90>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_UART7_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_UART7_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_UART7_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_UART7_Init+0x90>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_UART7_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_UART7_Init+0x90>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_UART7_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_UART7_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_UART7_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001440:	4811      	ldr	r0, [pc, #68]	; (8001488 <MX_UART7_Init+0x90>)
 8001442:	f008 f9e7 	bl	8009814 <HAL_UART_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800144c:	f000 fb3e 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001450:	2100      	movs	r1, #0
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_UART7_Init+0x90>)
 8001454:	f009 faed 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800145e:	f000 fb35 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001462:	2100      	movs	r1, #0
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <MX_UART7_Init+0x90>)
 8001466:	f009 fb22 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001470:	f000 fb2c 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_UART7_Init+0x90>)
 8001476:	f009 faa3 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001480:	f000 fb24 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	240006d4 	.word	0x240006d4
 800148c:	40007800 	.word	0x40007800

08001490 <MX_UART9_Init>:
  * @brief UART9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART9_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END UART9_Init 0 */

  /* USER CODE BEGIN UART9_Init 1 */

  /* USER CODE END UART9_Init 1 */
  huart9.Instance = UART9;
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <MX_UART9_Init+0x90>)
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <MX_UART9_Init+0x94>)
 8001498:	601a      	str	r2, [r3, #0]
  huart9.Init.BaudRate = 115200;
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_UART9_Init+0x90>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart9.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <MX_UART9_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart9.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_UART9_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart9.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <MX_UART9_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart9.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_UART9_Init+0x90>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart9.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_UART9_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart9.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_UART9_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  huart9.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_UART9_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  huart9.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_UART9_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart9.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_UART9_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart9) != HAL_OK)
 80014d8:	4811      	ldr	r0, [pc, #68]	; (8001520 <MX_UART9_Init+0x90>)
 80014da:	f008 f99b 	bl	8009814 <HAL_UART_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_UART9_Init+0x58>
  {
    Error_Handler();
 80014e4:	f000 faf2 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart9, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_UART9_Init+0x90>)
 80014ec:	f009 faa1 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_UART9_Init+0x6a>
  {
    Error_Handler();
 80014f6:	f000 fae9 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart9, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <MX_UART9_Init+0x90>)
 80014fe:	f009 fad6 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_UART9_Init+0x7c>
  {
    Error_Handler();
 8001508:	f000 fae0 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart9) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_UART9_Init+0x90>)
 800150e:	f009 fa57 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_UART9_Init+0x8c>
  {
    Error_Handler();
 8001518:	f000 fad8 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN UART9_Init 2 */

  /* USER CODE END UART9_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	24000768 	.word	0x24000768
 8001524:	40011800 	.word	0x40011800

08001528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 800152e:	4a23      	ldr	r2, [pc, #140]	; (80015bc <MX_USART2_UART_Init+0x94>)
 8001530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001570:	4811      	ldr	r0, [pc, #68]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001572:	f008 f94f 	bl	8009814 <HAL_UART_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800157c:	f000 faa6 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	480d      	ldr	r0, [pc, #52]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001584:	f009 fa55 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800158e:	f000 fa9d 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001592:	2100      	movs	r1, #0
 8001594:	4808      	ldr	r0, [pc, #32]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 8001596:	f009 fa8a 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015a0:	f000 fa94 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_USART2_UART_Init+0x90>)
 80015a6:	f009 fa0b 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015b0:	f000 fa8c 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	240007fc 	.word	0x240007fc
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MX_USART3_UART_Init+0x90>)
 80015c6:	4a23      	ldr	r2, [pc, #140]	; (8001654 <MX_USART3_UART_Init+0x94>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_USART3_UART_Init+0x90>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_USART3_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_USART3_UART_Init+0x90>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <MX_USART3_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_USART3_UART_Init+0x90>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_USART3_UART_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_USART3_UART_Init+0x90>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_USART3_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_USART3_UART_Init+0x90>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_USART3_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001608:	4811      	ldr	r0, [pc, #68]	; (8001650 <MX_USART3_UART_Init+0x90>)
 800160a:	f008 f903 	bl	8009814 <HAL_UART_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001614:	f000 fa5a 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001618:	2100      	movs	r1, #0
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <MX_USART3_UART_Init+0x90>)
 800161c:	f009 fa09 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001626:	f000 fa51 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162a:	2100      	movs	r1, #0
 800162c:	4808      	ldr	r0, [pc, #32]	; (8001650 <MX_USART3_UART_Init+0x90>)
 800162e:	f009 fa3e 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001638:	f000 fa48 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_USART3_UART_Init+0x90>)
 800163e:	f009 f9bf 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001648:	f000 fa40 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	24000890 	.word	0x24000890
 8001654:	40004800 	.word	0x40004800

08001658 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <MX_USART6_UART_Init+0x94>)
 8001660:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 80016a2:	f008 f8b7 	bl	8009814 <HAL_UART_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80016ac:	f000 fa0e 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 80016b4:	f009 f9bd 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80016be:	f000 fa05 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4808      	ldr	r0, [pc, #32]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 80016c6:	f009 f9f2 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f000 f9fc 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_USART6_UART_Init+0x90>)
 80016d6:	f009 f973 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f000 f9f4 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	24000924 	.word	0x24000924
 80016ec:	40011400 	.word	0x40011400

080016f0 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 80016f4:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_USART10_UART_Init+0x90>)
 80016f6:	4a23      	ldr	r2, [pc, #140]	; (8001784 <MX_USART10_UART_Init+0x94>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <MX_USART10_UART_Init+0x90>)
 80016fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001700:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <MX_USART10_UART_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_USART10_UART_Init+0x90>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_USART10_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_USART10_UART_Init+0x90>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_USART10_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_USART10_UART_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <MX_USART10_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_USART10_UART_Init+0x90>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_USART10_UART_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8001738:	4811      	ldr	r0, [pc, #68]	; (8001780 <MX_USART10_UART_Init+0x90>)
 800173a:	f008 f86b 	bl	8009814 <HAL_UART_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8001744:	f000 f9c2 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001748:	2100      	movs	r1, #0
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_USART10_UART_Init+0x90>)
 800174c:	f009 f971 	bl	800aa32 <HAL_UARTEx_SetTxFifoThreshold>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8001756:	f000 f9b9 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175a:	2100      	movs	r1, #0
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <MX_USART10_UART_Init+0x90>)
 800175e:	f009 f9a6 	bl	800aaae <HAL_UARTEx_SetRxFifoThreshold>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8001768:	f000 f9b0 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <MX_USART10_UART_Init+0x90>)
 800176e:	f009 f927 	bl	800a9c0 <HAL_UARTEx_DisableFifoMode>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8001778:	f000 f9a8 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	240009b8 	.word	0x240009b8
 8001784:	40011c00 	.word	0x40011c00

08001788 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	; 0x38
 800179c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ae:	4bbf      	ldr	r3, [pc, #764]	; (8001aac <MX_GPIO_Init+0x314>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b4:	4abd      	ldr	r2, [pc, #756]	; (8001aac <MX_GPIO_Init+0x314>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017be:	4bbb      	ldr	r3, [pc, #748]	; (8001aac <MX_GPIO_Init+0x314>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	623b      	str	r3, [r7, #32]
 80017ca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017cc:	4bb7      	ldr	r3, [pc, #732]	; (8001aac <MX_GPIO_Init+0x314>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d2:	4ab6      	ldr	r2, [pc, #728]	; (8001aac <MX_GPIO_Init+0x314>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017dc:	4bb3      	ldr	r3, [pc, #716]	; (8001aac <MX_GPIO_Init+0x314>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ea:	4bb0      	ldr	r3, [pc, #704]	; (8001aac <MX_GPIO_Init+0x314>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f0:	4aae      	ldr	r2, [pc, #696]	; (8001aac <MX_GPIO_Init+0x314>)
 80017f2:	f043 0320 	orr.w	r3, r3, #32
 80017f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017fa:	4bac      	ldr	r3, [pc, #688]	; (8001aac <MX_GPIO_Init+0x314>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001808:	4ba8      	ldr	r3, [pc, #672]	; (8001aac <MX_GPIO_Init+0x314>)
 800180a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180e:	4aa7      	ldr	r2, [pc, #668]	; (8001aac <MX_GPIO_Init+0x314>)
 8001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001818:	4ba4      	ldr	r3, [pc, #656]	; (8001aac <MX_GPIO_Init+0x314>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4ba1      	ldr	r3, [pc, #644]	; (8001aac <MX_GPIO_Init+0x314>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182c:	4a9f      	ldr	r2, [pc, #636]	; (8001aac <MX_GPIO_Init+0x314>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001836:	4b9d      	ldr	r3, [pc, #628]	; (8001aac <MX_GPIO_Init+0x314>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	4b99      	ldr	r3, [pc, #612]	; (8001aac <MX_GPIO_Init+0x314>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	4a98      	ldr	r2, [pc, #608]	; (8001aac <MX_GPIO_Init+0x314>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001854:	4b95      	ldr	r3, [pc, #596]	; (8001aac <MX_GPIO_Init+0x314>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001862:	4b92      	ldr	r3, [pc, #584]	; (8001aac <MX_GPIO_Init+0x314>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	4a90      	ldr	r2, [pc, #576]	; (8001aac <MX_GPIO_Init+0x314>)
 800186a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800186e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001872:	4b8e      	ldr	r3, [pc, #568]	; (8001aac <MX_GPIO_Init+0x314>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001880:	4b8a      	ldr	r3, [pc, #552]	; (8001aac <MX_GPIO_Init+0x314>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001886:	4a89      	ldr	r2, [pc, #548]	; (8001aac <MX_GPIO_Init+0x314>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001890:	4b86      	ldr	r3, [pc, #536]	; (8001aac <MX_GPIO_Init+0x314>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, KICK_HIGH_Pin|GPIO_PIN_5|KICK_CHARGE_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80018a4:	4882      	ldr	r0, [pc, #520]	; (8001ab0 <MX_GPIO_Init+0x318>)
 80018a6:	f003 f8ed 	bl	8004a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|RST_RADIO_0_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f248 0108 	movw	r1, #32776	; 0x8008
 80018b0:	4880      	ldr	r0, [pc, #512]	; (8001ab4 <MX_GPIO_Init+0x31c>)
 80018b2:	f003 f8e7 	bl	8004a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|RST_RADIO_1_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2105      	movs	r1, #5
 80018ba:	487f      	ldr	r0, [pc, #508]	; (8001ab8 <MX_GPIO_Init+0x320>)
 80018bc:	f003 f8e2 	bl	8004a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2107      	movs	r1, #7
 80018c4:	487d      	ldr	r0, [pc, #500]	; (8001abc <MX_GPIO_Init+0x324>)
 80018c6:	f003 f8dd 	bl	8004a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d0:	487b      	ldr	r0, [pc, #492]	; (8001ac0 <MX_GPIO_Init+0x328>)
 80018d2:	f003 f8d7 	bl	8004a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2102      	movs	r1, #2
 80018da:	487a      	ldr	r0, [pc, #488]	; (8001ac4 <MX_GPIO_Init+0x32c>)
 80018dc:	f003 f8d2 	bl	8004a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	4619      	mov	r1, r3
 80018f4:	4874      	ldr	r0, [pc, #464]	; (8001ac8 <MX_GPIO_Init+0x330>)
 80018f6:	f002 ff1d 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pins : KICK_HIGH_Pin PF5 KICK_CHARGE_Pin */
  GPIO_InitStruct.Pin = KICK_HIGH_Pin|GPIO_PIN_5|KICK_CHARGE_Pin;
 80018fa:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	4619      	mov	r1, r3
 8001912:	4867      	ldr	r0, [pc, #412]	; (8001ab0 <MX_GPIO_Init+0x318>)
 8001914:	f002 ff0e 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = BALL_SENSOR_Pin;
 8001918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	4619      	mov	r1, r3
 800192c:	4860      	ldr	r0, [pc, #384]	; (8001ab0 <MX_GPIO_Init+0x318>)
 800192e:	f002 ff01 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RST_RADIO_0_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RST_RADIO_0_Pin;
 8001932:	f248 0308 	movw	r3, #32776	; 0x8008
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	485a      	ldr	r0, [pc, #360]	; (8001ab4 <MX_GPIO_Init+0x31c>)
 800194c:	f002 fef2 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin RST_RADIO_1_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|RST_RADIO_1_Pin;
 8001950:	2305      	movs	r3, #5
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001964:	4619      	mov	r1, r3
 8001966:	4854      	ldr	r0, [pc, #336]	; (8001ab8 <MX_GPIO_Init+0x320>)
 8001968:	f002 fee4 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_RADIO_1_Pin BUSY_RADIO_1_Pin INT_IMU_Pin */
  GPIO_InitStruct.Pin = INT_RADIO_1_Pin|BUSY_RADIO_1_Pin|INT_IMU_Pin;
 800196c:	f240 2312 	movw	r3, #530	; 0x212
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001980:	4619      	mov	r1, r3
 8001982:	484d      	ldr	r0, [pc, #308]	; (8001ab8 <MX_GPIO_Init+0x320>)
 8001984:	f002 fed6 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_RADIO_0_Pin */
  GPIO_InitStruct.Pin = INT_RADIO_0_Pin;
 8001988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800198e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT_RADIO_0_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	4619      	mov	r1, r3
 800199e:	4844      	ldr	r0, [pc, #272]	; (8001ab0 <MX_GPIO_Init+0x318>)
 80019a0:	f002 fec8 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 80019a4:	2307      	movs	r3, #7
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	4619      	mov	r1, r3
 80019ba:	4840      	ldr	r0, [pc, #256]	; (8001abc <MX_GPIO_Init+0x324>)
 80019bc:	f002 feba 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_KICK_DONE_Pin */
  GPIO_InitStruct.Pin = INT_KICK_DONE_Pin;
 80019c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT_KICK_DONE_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	4619      	mov	r1, r3
 80019d6:	483b      	ldr	r0, [pc, #236]	; (8001ac4 <MX_GPIO_Init+0x32c>)
 80019d8:	f002 feac 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80019dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4832      	ldr	r0, [pc, #200]	; (8001ac0 <MX_GPIO_Init+0x328>)
 80019f6:	f002 fe9d 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	482b      	ldr	r0, [pc, #172]	; (8001abc <MX_GPIO_Init+0x324>)
 8001a10:	f002 fe90 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_BTNS_Pin */
  GPIO_InitStruct.Pin = INT_BTNS_Pin;
 8001a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT_BTNS_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4827      	ldr	r0, [pc, #156]	; (8001ac8 <MX_GPIO_Init+0x330>)
 8001a2c:	f002 fe82 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	481b      	ldr	r0, [pc, #108]	; (8001ab4 <MX_GPIO_Init+0x31c>)
 8001a46:	f002 fe75 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001a5c:	230a      	movs	r3, #10
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	4619      	mov	r1, r3
 8001a66:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <MX_GPIO_Init+0x31c>)
 8001a68:	f002 fe64 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_RADIO_0_Pin */
  GPIO_InitStruct.Pin = BUSY_RADIO_0_Pin;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUSY_RADIO_0_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480f      	ldr	r0, [pc, #60]	; (8001ac0 <MX_GPIO_Init+0x328>)
 8001a82:	f002 fe57 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001a86:	2302      	movs	r3, #2
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <MX_GPIO_Init+0x32c>)
 8001a9e:	f002 fe49 	bl	8004734 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa2:	bf00      	nop
 8001aa4:	3738      	adds	r7, #56	; 0x38
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	58021400 	.word	0x58021400
 8001ab4:	58020000 	.word	0x58020000
 8001ab8:	58020400 	.word	0x58020400
 8001abc:	58021800 	.word	0x58021800
 8001ac0:	58020c00 	.word	0x58020c00
 8001ac4:	58021000 	.word	0x58021000
 8001ac8:	58020800 	.word	0x58020800

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <Error_Handler+0x8>
	...

08001ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_MspInit+0x30>)
 8001ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ae4:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <HAL_MspInit+0x30>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_MspInit+0x30>)
 8001af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	58024400 	.word	0x58024400

08001b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0b8      	sub	sp, #224	; 0xe0
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	22b8      	movs	r2, #184	; 0xb8
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f009 f84b 	bl	800abc8 <memset>
  if(hadc->Instance==ADC1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a2b      	ldr	r2, [pc, #172]	; (8001be4 <HAL_ADC_MspInit+0xd8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d14f      	bne.n	8001bdc <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001b4c:	2313      	movs	r3, #19
 8001b4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 f868 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001b7e:	f7ff ffa5 	bl	8001acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_ADC_MspInit+0xdc>)
 8001b84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_ADC_MspInit+0xdc>)
 8001b8a:	f043 0320 	orr.w	r3, r3, #32
 8001b8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_ADC_MspInit+0xdc>)
 8001b94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_ADC_MspInit+0xdc>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_ADC_MspInit+0xdc>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_ADC_MspInit+0xdc>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = BAT_REF_Pin;
 8001bbe:	2310      	movs	r3, #16
 8001bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(BAT_REF_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <HAL_ADC_MspInit+0xe0>)
 8001bd8:	f002 fdac 	bl	8004734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	37e0      	adds	r7, #224	; 0xe0
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40022000 	.word	0x40022000
 8001be8:	58024400 	.word	0x58024400
 8001bec:	58020800 	.word	0x58020800

08001bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0c0      	sub	sp, #256	; 0x100
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c0c:	22b8      	movs	r2, #184	; 0xb8
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f008 ffd9 	bl	800abc8 <memset>
  if(hi2c->Instance==I2C1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4aac      	ldr	r2, [pc, #688]	; (8001ecc <HAL_I2C_MspInit+0x2dc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d146      	bne.n	8001cae <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c20:	f04f 0208 	mov.w	r2, #8
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 f806 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001c42:	f7ff ff43 	bl	8001acc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	4ba2      	ldr	r3, [pc, #648]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	4aa0      	ldr	r2, [pc, #640]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c56:	4b9e      	ldr	r3, [pc, #632]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_IMU_Pin|SDA_IMU_Pin;
 8001c64:	23c0      	movs	r3, #192	; 0xc0
 8001c66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6a:	2312      	movs	r3, #18
 8001c6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c86:	4619      	mov	r1, r3
 8001c88:	4892      	ldr	r0, [pc, #584]	; (8001ed4 <HAL_I2C_MspInit+0x2e4>)
 8001c8a:	f002 fd53 	bl	8004734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c8e:	4b90      	ldr	r3, [pc, #576]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c94:	4a8e      	ldr	r2, [pc, #568]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001c96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c9e:	4b8c      	ldr	r3, [pc, #560]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001cac:	e109      	b.n	8001ec2 <HAL_I2C_MspInit+0x2d2>
  else if(hi2c->Instance==I2C2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a89      	ldr	r2, [pc, #548]	; (8001ed8 <HAL_I2C_MspInit+0x2e8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d146      	bne.n	8001d46 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cb8:	f04f 0208 	mov.w	r2, #8
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 ffba 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001cda:	f7ff fef7 	bl	8001acc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cde:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce4:	4a7a      	ldr	r2, [pc, #488]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001ce6:	f043 0320 	orr.w	r3, r3, #32
 8001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cee:	4b78      	ldr	r3, [pc, #480]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = SDA_OLED_Pin|SCL_OLED_Pin;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d02:	2312      	movs	r3, #18
 8001d04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d14:	2304      	movs	r3, #4
 8001d16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d1a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d1e:	4619      	mov	r1, r3
 8001d20:	486e      	ldr	r0, [pc, #440]	; (8001edc <HAL_I2C_MspInit+0x2ec>)
 8001d22:	f002 fd07 	bl	8004734 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d26:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d2c:	4a68      	ldr	r2, [pc, #416]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001d2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d36:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	6a3b      	ldr	r3, [r7, #32]
}
 8001d44:	e0bd      	b.n	8001ec2 <HAL_I2C_MspInit+0x2d2>
  else if(hi2c->Instance==I2C3)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a65      	ldr	r2, [pc, #404]	; (8001ee0 <HAL_I2C_MspInit+0x2f0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d16c      	bne.n	8001e2a <HAL_I2C_MspInit+0x23a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d50:	f04f 0208 	mov.w	r2, #8
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 ff6e 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_MspInit+0x186>
      Error_Handler();
 8001d72:	f7ff feab 	bl	8001acc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	4a54      	ldr	r2, [pc, #336]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d86:	4b52      	ldr	r3, [pc, #328]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	4a4d      	ldr	r2, [pc, #308]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da4:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = SDA_BTNS_Pin;
 8001db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dba:	2312      	movs	r3, #18
 8001dbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SDA_BTNS_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4842      	ldr	r0, [pc, #264]	; (8001ee4 <HAL_I2C_MspInit+0x2f4>)
 8001dda:	f002 fcab 	bl	8004734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL_BTNS_Pin;
 8001dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de6:	2312      	movs	r3, #18
 8001de8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SCL_BTNS_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e02:	4619      	mov	r1, r3
 8001e04:	4838      	ldr	r0, [pc, #224]	; (8001ee8 <HAL_I2C_MspInit+0x2f8>)
 8001e06:	f002 fc95 	bl	8004734 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e10:	4a2f      	ldr	r2, [pc, #188]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001e12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697b      	ldr	r3, [r7, #20]
}
 8001e28:	e04b      	b.n	8001ec2 <HAL_I2C_MspInit+0x2d2>
  else if(hi2c->Instance==I2C4)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2f      	ldr	r2, [pc, #188]	; (8001eec <HAL_I2C_MspInit+0x2fc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d146      	bne.n	8001ec2 <HAL_I2C_MspInit+0x2d2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001e34:	f04f 0210 	mov.w	r2, #16
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fefc 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 8001e56:	f7ff fe39 	bl	8001acc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e60:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001e62:	f043 0320 	orr.w	r3, r3, #32
 8001e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_NFC_Pin|SDA_NFC_Pin;
 8001e78:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e80:	2312      	movs	r3, #18
 8001e82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001e92:	2304      	movs	r3, #4
 8001e94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480f      	ldr	r0, [pc, #60]	; (8001edc <HAL_I2C_MspInit+0x2ec>)
 8001ea0:	f002 fc48 	bl	8004734 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_I2C_MspInit+0x2e0>)
 8001eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
}
 8001ec2:	bf00      	nop
 8001ec4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40005400 	.word	0x40005400
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	58020400 	.word	0x58020400
 8001ed8:	40005800 	.word	0x40005800
 8001edc:	58021400 	.word	0x58021400
 8001ee0:	40005c00 	.word	0x40005c00
 8001ee4:	58020800 	.word	0x58020800
 8001ee8:	58020000 	.word	0x58020000
 8001eec:	58001c00 	.word	0x58001c00

08001ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0be      	sub	sp, #248	; 0xf8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0c:	22b8      	movs	r2, #184	; 0xb8
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f008 fe59 	bl	800abc8 <memset>
  if(hspi->Instance==SPI1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a96      	ldr	r2, [pc, #600]	; (8002174 <HAL_SPI_MspInit+0x284>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	f040 8090 	bne.w	8002042 <HAL_SPI_MspInit+0x152>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001f22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 fe85 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001f44:	f7ff fdc2 	bl	8001acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f48:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f4e:	4a8a      	ldr	r2, [pc, #552]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001f50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f58:	4b87      	ldr	r3, [pc, #540]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	4b84      	ldr	r3, [pc, #528]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6c:	4a82      	ldr	r2, [pc, #520]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f76:	4b80      	ldr	r3, [pc, #512]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	623b      	str	r3, [r7, #32]
 8001f82:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f84:	4b7c      	ldr	r3, [pc, #496]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8a:	4a7b      	ldr	r2, [pc, #492]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f94:	4b78      	ldr	r3, [pc, #480]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa8:	4a73      	ldr	r2, [pc, #460]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb2:	4b71      	ldr	r3, [pc, #452]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NSS_RADIO_1_Pin|SCK_RADIO_1_Pin;
 8001fc0:	2330      	movs	r3, #48	; 0x30
 8001fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fd8:	2305      	movs	r3, #5
 8001fda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4865      	ldr	r0, [pc, #404]	; (800217c <HAL_SPI_MspInit+0x28c>)
 8001fe6:	f002 fba5 	bl	8004734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RADIO_1_Pin;
 8001fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002004:	2305      	movs	r3, #5
 8002006:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(MISO_RADIO_1_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800200e:	4619      	mov	r1, r3
 8002010:	485b      	ldr	r0, [pc, #364]	; (8002180 <HAL_SPI_MspInit+0x290>)
 8002012:	f002 fb8f 	bl	8004734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOSI_RADIO_1_Pin;
 8002016:	2320      	movs	r3, #32
 8002018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800202e:	2305      	movs	r3, #5
 8002030:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(MOSI_RADIO_1_GPIO_Port, &GPIO_InitStruct);
 8002034:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002038:	4619      	mov	r1, r3
 800203a:	4852      	ldr	r0, [pc, #328]	; (8002184 <HAL_SPI_MspInit+0x294>)
 800203c:	f002 fb7a 	bl	8004734 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002040:	e094      	b.n	800216c <HAL_SPI_MspInit+0x27c>
  else if(hspi->Instance==SPI2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a50      	ldr	r2, [pc, #320]	; (8002188 <HAL_SPI_MspInit+0x298>)
 8002048:	4293      	cmp	r3, r2
 800204a:	f040 808f 	bne.w	800216c <HAL_SPI_MspInit+0x27c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800204e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fdef 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_SPI_MspInit+0x184>
      Error_Handler();
 8002070:	f7ff fd2c 	bl	8001acc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002074:	4b40      	ldr	r3, [pc, #256]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8002076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800207a:	4a3f      	ldr	r2, [pc, #252]	; (8002178 <HAL_SPI_MspInit+0x288>)
 800207c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002080:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002084:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8002086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_SPI_MspInit+0x288>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002098:	4a37      	ldr	r2, [pc, #220]	; (8002178 <HAL_SPI_MspInit+0x288>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a2:	4b35      	ldr	r3, [pc, #212]	; (8002178 <HAL_SPI_MspInit+0x288>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_SPI_MspInit+0x288>)
 80020b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b6:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_SPI_MspInit+0x288>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_SPI_MspInit+0x288>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_SPI_MspInit+0x288>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_SPI_MspInit+0x288>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_SPI_MspInit+0x288>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOSI_RADIO_0_Pin|MISO_RADIO_0_Pin;
 80020ec:	2306      	movs	r3, #6
 80020ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002104:	2305      	movs	r3, #5
 8002106:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800210e:	4619      	mov	r1, r3
 8002110:	481e      	ldr	r0, [pc, #120]	; (800218c <HAL_SPI_MspInit+0x29c>)
 8002112:	f002 fb0f 	bl	8004734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NSS_RADIO_0_Pin;
 8002116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002130:	2305      	movs	r3, #5
 8002132:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(NSS_RADIO_0_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800213a:	4619      	mov	r1, r3
 800213c:	4811      	ldr	r0, [pc, #68]	; (8002184 <HAL_SPI_MspInit+0x294>)
 800213e:	f002 faf9 	bl	8004734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_RADIO_0_Pin;
 8002142:	2308      	movs	r3, #8
 8002144:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800215a:	2305      	movs	r3, #5
 800215c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SCK_RADIO_0_GPIO_Port, &GPIO_InitStruct);
 8002160:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002164:	4619      	mov	r1, r3
 8002166:	480a      	ldr	r0, [pc, #40]	; (8002190 <HAL_SPI_MspInit+0x2a0>)
 8002168:	f002 fae4 	bl	8004734 <HAL_GPIO_Init>
}
 800216c:	bf00      	nop
 800216e:	37f8      	adds	r7, #248	; 0xf8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40013000 	.word	0x40013000
 8002178:	58024400 	.word	0x58024400
 800217c:	58020000 	.word	0x58020000
 8002180:	58021800 	.word	0x58021800
 8002184:	58020400 	.word	0x58020400
 8002188:	40003800 	.word	0x40003800
 800218c:	58020800 	.word	0x58020800
 8002190:	58020c00 	.word	0x58020c00

08002194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002194:	b480      	push	{r7}
 8002196:	b08b      	sub	sp, #44	; 0x2c
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <HAL_TIM_Base_MspInit+0x138>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10f      	bne.n	80021c6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021a6:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 80021a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ac:	4a48      	ldr	r2, [pc, #288]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021b6:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 80021b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80021c4:	e07c      	b.n	80022c0 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d10f      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 80021d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021d6:	4a3e      	ldr	r2, [pc, #248]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 80021e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	623b      	str	r3, [r7, #32]
 80021ec:	6a3b      	ldr	r3, [r7, #32]
}
 80021ee:	e067      	b.n	80022c0 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM13)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a37      	ldr	r2, [pc, #220]	; (80022d4 <HAL_TIM_Base_MspInit+0x140>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10f      	bne.n	800221a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80021fa:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 80021fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002200:	4a33      	ldr	r2, [pc, #204]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 8002202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002206:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 800220c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	69fb      	ldr	r3, [r7, #28]
}
 8002218:	e052      	b.n	80022c0 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM14)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2e      	ldr	r2, [pc, #184]	; (80022d8 <HAL_TIM_Base_MspInit+0x144>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10f      	bne.n	8002244 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 8002226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800222a:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 8002236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	69bb      	ldr	r3, [r7, #24]
}
 8002242:	e03d      	b.n	80022c0 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM15)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a24      	ldr	r2, [pc, #144]	; (80022dc <HAL_TIM_Base_MspInit+0x148>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10f      	bne.n	800226e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 8002250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 8002256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 8002260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697b      	ldr	r3, [r7, #20]
}
 800226c:	e028      	b.n	80022c0 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM16)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <HAL_TIM_Base_MspInit+0x14c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d10f      	bne.n	8002298 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 800227a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800227e:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 800228a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
}
 8002296:	e013      	b.n	80022c0 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM17)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_TIM_Base_MspInit+0x150>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 80022a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022a8:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 80022aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_TIM_Base_MspInit+0x13c>)
 80022b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	bf00      	nop
 80022c2:	372c      	adds	r7, #44	; 0x2c
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40010000 	.word	0x40010000
 80022d0:	58024400 	.word	0x58024400
 80022d4:	40001c00 	.word	0x40001c00
 80022d8:	40002000 	.word	0x40002000
 80022dc:	40014000 	.word	0x40014000
 80022e0:	40014400 	.word	0x40014400
 80022e4:	40014800 	.word	0x40014800

080022e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b090      	sub	sp, #64	; 0x40
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a69      	ldr	r2, [pc, #420]	; (80024ac <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d12e      	bne.n	8002368 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800230a:	4b69      	ldr	r3, [pc, #420]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800230c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002310:	4a67      	ldr	r2, [pc, #412]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800231a:	4b65      	ldr	r3, [pc, #404]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800231c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b61      	ldr	r3, [pc, #388]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800232a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232e:	4a60      	ldr	r2, [pc, #384]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002338:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800233a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCA_M4_Pin|ENCB_M4_Pin;
 8002346:	23c0      	movs	r3, #192	; 0xc0
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002356:	2302      	movs	r3, #2
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800235e:	4619      	mov	r1, r3
 8002360:	4854      	ldr	r0, [pc, #336]	; (80024b4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002362:	f002 f9e7 	bl	8004734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8002366:	e09c      	b.n	80024a2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a52      	ldr	r2, [pc, #328]	; (80024b8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d12f      	bne.n	80023d2 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002372:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002378:	4a4d      	ldr	r2, [pc, #308]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	623b      	str	r3, [r7, #32]
 800238e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002390:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENCB_M1_Pin|ENCA_M1_Pin;
 80023ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023c0:	2302      	movs	r3, #2
 80023c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c8:	4619      	mov	r1, r3
 80023ca:	483c      	ldr	r0, [pc, #240]	; (80024bc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80023cc:	f002 f9b2 	bl	8004734 <HAL_GPIO_Init>
}
 80023d0:	e067      	b.n	80024a2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d12e      	bne.n	800243a <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023dc:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80023de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e2:	4a33      	ldr	r2, [pc, #204]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023ec:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80023ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002400:	4a2b      	ldr	r2, [pc, #172]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENCA_M2_Pin|ENCB_M2_Pin;
 8002418:	2303      	movs	r3, #3
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002428:	2302      	movs	r3, #2
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002430:	4619      	mov	r1, r3
 8002432:	4820      	ldr	r0, [pc, #128]	; (80024b4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002434:	f002 f97e 	bl	8004734 <HAL_GPIO_Init>
}
 8002438:	e033      	b.n	80024a2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM23)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d12e      	bne.n	80024a2 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002446:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800244c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002450:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002456:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800245a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002468:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800246a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCB_M3_Pin|ENCA_M3_Pin;
 8002480:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002492:	230d      	movs	r3, #13
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249a:	4619      	mov	r1, r3
 800249c:	480a      	ldr	r0, [pc, #40]	; (80024c8 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800249e:	f002 f949 	bl	8004734 <HAL_GPIO_Init>
}
 80024a2:	bf00      	nop
 80024a4:	3740      	adds	r7, #64	; 0x40
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40000400 	.word	0x40000400
 80024b0:	58024400 	.word	0x58024400
 80024b4:	58020000 	.word	0x58020000
 80024b8:	40000800 	.word	0x40000800
 80024bc:	58020c00 	.word	0x58020c00
 80024c0:	40000c00 	.word	0x40000c00
 80024c4:	4000e000 	.word	0x4000e000
 80024c8:	58021800 	.word	0x58021800

080024cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a38      	ldr	r2, [pc, #224]	; (80025cc <HAL_TIM_MspPostInit+0x100>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d120      	bne.n	8002530 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ee:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <HAL_TIM_MspPostInit+0x104>)
 80024f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f4:	4a36      	ldr	r2, [pc, #216]	; (80025d0 <HAL_TIM_MspPostInit+0x104>)
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_TIM_MspPostInit+0x104>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin|PWM_M3_Pin|PWM_M4_Pin;
 800250c:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800251e:	2301      	movs	r3, #1
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	482a      	ldr	r0, [pc, #168]	; (80025d4 <HAL_TIM_MspPostInit+0x108>)
 800252a:	f002 f903 	bl	8004734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800252e:	e049      	b.n	80025c4 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM14)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <HAL_TIM_MspPostInit+0x10c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d120      	bne.n	800257c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800253a:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <HAL_TIM_MspPostInit+0x104>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002540:	4a23      	ldr	r2, [pc, #140]	; (80025d0 <HAL_TIM_MspPostInit+0x104>)
 8002542:	f043 0320 	orr.w	r3, r3, #32
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254a:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <HAL_TIM_MspPostInit+0x104>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_M5_Pin;
 8002558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800256a:	2309      	movs	r3, #9
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_M5_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4819      	ldr	r0, [pc, #100]	; (80025dc <HAL_TIM_MspPostInit+0x110>)
 8002576:	f002 f8dd 	bl	8004734 <HAL_GPIO_Init>
}
 800257a:	e023      	b.n	80025c4 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM16)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_TIM_MspPostInit+0x114>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d11e      	bne.n	80025c4 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_TIM_MspPostInit+0x104>)
 8002588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258c:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <HAL_TIM_MspPostInit+0x104>)
 800258e:	f043 0320 	orr.w	r3, r3, #32
 8002592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <HAL_TIM_MspPostInit+0x104>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025a4:	2340      	movs	r3, #64	; 0x40
 80025a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80025b4:	2301      	movs	r3, #1
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	4807      	ldr	r0, [pc, #28]	; (80025dc <HAL_TIM_MspPostInit+0x110>)
 80025c0:	f002 f8b8 	bl	8004734 <HAL_GPIO_Init>
}
 80025c4:	bf00      	nop
 80025c6:	3728      	adds	r7, #40	; 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40010000 	.word	0x40010000
 80025d0:	58024400 	.word	0x58024400
 80025d4:	58021000 	.word	0x58021000
 80025d8:	40002000 	.word	0x40002000
 80025dc:	58021400 	.word	0x58021400
 80025e0:	40014400 	.word	0x40014400

080025e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b0c6      	sub	sp, #280	; 0x118
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025f2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002604:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002608:	22b8      	movs	r2, #184	; 0xb8
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f008 fadb 	bl	800abc8 <memset>
  if(huart->Instance==UART4)
 8002612:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002616:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4ac2      	ldr	r2, [pc, #776]	; (8002928 <HAL_UART_MspInit+0x344>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d147      	bne.n	80026b4 <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002624:	f04f 0202 	mov.w	r2, #2
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800263a:	4618      	mov	r0, r3
 800263c:	f003 fb04 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002646:	f7ff fa41 	bl	8001acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800264a:	4bb8      	ldr	r3, [pc, #736]	; (800292c <HAL_UART_MspInit+0x348>)
 800264c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002650:	4ab6      	ldr	r2, [pc, #728]	; (800292c <HAL_UART_MspInit+0x348>)
 8002652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002656:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800265a:	4bb4      	ldr	r3, [pc, #720]	; (800292c <HAL_UART_MspInit+0x348>)
 800265c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002664:	647b      	str	r3, [r7, #68]	; 0x44
 8002666:	6c7b      	ldr	r3, [r7, #68]	; 0x44

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002668:	4bb0      	ldr	r3, [pc, #704]	; (800292c <HAL_UART_MspInit+0x348>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266e:	4aaf      	ldr	r2, [pc, #700]	; (800292c <HAL_UART_MspInit+0x348>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002678:	4bac      	ldr	r3, [pc, #688]	; (800292c <HAL_UART_MspInit+0x348>)
 800267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	643b      	str	r3, [r7, #64]	; 0x40
 8002684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = RASP_TX_Pin|RASP_RX_Pin;
 8002686:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800268a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026a0:	2308      	movs	r3, #8
 80026a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80026aa:	4619      	mov	r1, r3
 80026ac:	48a0      	ldr	r0, [pc, #640]	; (8002930 <HAL_UART_MspInit+0x34c>)
 80026ae:	f002 f841 	bl	8004734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 80026b2:	e27a      	b.n	8002baa <HAL_UART_MspInit+0x5c6>
  else if(huart->Instance==UART7)
 80026b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a9c      	ldr	r2, [pc, #624]	; (8002934 <HAL_UART_MspInit+0x350>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d16a      	bne.n	800279c <HAL_UART_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80026c6:	f04f 0202 	mov.w	r2, #2
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 fab3 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_UART_MspInit+0x108>
      Error_Handler();
 80026e8:	f7ff f9f0 	bl	8001acc <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80026ec:	4b8f      	ldr	r3, [pc, #572]	; (800292c <HAL_UART_MspInit+0x348>)
 80026ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026f2:	4a8e      	ldr	r2, [pc, #568]	; (800292c <HAL_UART_MspInit+0x348>)
 80026f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026fc:	4b8b      	ldr	r3, [pc, #556]	; (800292c <HAL_UART_MspInit+0x348>)
 80026fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002702:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800270a:	4b88      	ldr	r3, [pc, #544]	; (800292c <HAL_UART_MspInit+0x348>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002710:	4a86      	ldr	r2, [pc, #536]	; (800292c <HAL_UART_MspInit+0x348>)
 8002712:	f043 0320 	orr.w	r3, r3, #32
 8002716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800271a:	4b84      	ldr	r3, [pc, #528]	; (800292c <HAL_UART_MspInit+0x348>)
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	63bb      	str	r3, [r7, #56]	; 0x38
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002728:	4b80      	ldr	r3, [pc, #512]	; (800292c <HAL_UART_MspInit+0x348>)
 800272a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272e:	4a7f      	ldr	r2, [pc, #508]	; (800292c <HAL_UART_MspInit+0x348>)
 8002730:	f043 0310 	orr.w	r3, r3, #16
 8002734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002738:	4b7c      	ldr	r3, [pc, #496]	; (800292c <HAL_UART_MspInit+0x348>)
 800273a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = ESC_TX_M1_Pin;
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800275e:	2307      	movs	r3, #7
 8002760:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(ESC_TX_M1_GPIO_Port, &GPIO_InitStruct);
 8002764:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002768:	4619      	mov	r1, r3
 800276a:	4873      	ldr	r0, [pc, #460]	; (8002938 <HAL_UART_MspInit+0x354>)
 800276c:	f001 ffe2 	bl	8004734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESC_RX_M1_Pin;
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002788:	2307      	movs	r3, #7
 800278a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(ESC_RX_M1_GPIO_Port, &GPIO_InitStruct);
 800278e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002792:	4619      	mov	r1, r3
 8002794:	4869      	ldr	r0, [pc, #420]	; (800293c <HAL_UART_MspInit+0x358>)
 8002796:	f001 ffcd 	bl	8004734 <HAL_GPIO_Init>
}
 800279a:	e206      	b.n	8002baa <HAL_UART_MspInit+0x5c6>
  else if(huart->Instance==UART9)
 800279c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a65      	ldr	r2, [pc, #404]	; (8002940 <HAL_UART_MspInit+0x35c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d147      	bne.n	800283e <HAL_UART_MspInit+0x25a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
 80027ae:	f04f 0201 	mov.w	r2, #1
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 fa3f 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 80027d0:	f7ff f97c 	bl	8001acc <Error_Handler>
    __HAL_RCC_UART9_CLK_ENABLE();
 80027d4:	4b55      	ldr	r3, [pc, #340]	; (800292c <HAL_UART_MspInit+0x348>)
 80027d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027da:	4a54      	ldr	r2, [pc, #336]	; (800292c <HAL_UART_MspInit+0x348>)
 80027dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027e4:	4b51      	ldr	r3, [pc, #324]	; (800292c <HAL_UART_MspInit+0x348>)
 80027e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f2:	4b4e      	ldr	r3, [pc, #312]	; (800292c <HAL_UART_MspInit+0x348>)
 80027f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f8:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_UART_MspInit+0x348>)
 80027fa:	f043 0308 	orr.w	r3, r3, #8
 80027fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002802:	4b4a      	ldr	r3, [pc, #296]	; (800292c <HAL_UART_MspInit+0x348>)
 8002804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = ESC_RX_M2_Pin|ESC_TX_M2_Pin;
 8002810:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002814:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF11_UART9;
 800282a:	230b      	movs	r3, #11
 800282c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002830:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002834:	4619      	mov	r1, r3
 8002836:	4843      	ldr	r0, [pc, #268]	; (8002944 <HAL_UART_MspInit+0x360>)
 8002838:	f001 ff7c 	bl	8004734 <HAL_GPIO_Init>
}
 800283c:	e1b5      	b.n	8002baa <HAL_UART_MspInit+0x5c6>
  else if(huart->Instance==USART2)
 800283e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002842:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a3f      	ldr	r2, [pc, #252]	; (8002948 <HAL_UART_MspInit+0x364>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d17f      	bne.n	8002950 <HAL_UART_MspInit+0x36c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002850:	f04f 0202 	mov.w	r2, #2
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002862:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002866:	4618      	mov	r0, r3
 8002868:	f003 f9ee 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8002872:	f7ff f92b 	bl	8001acc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_UART_MspInit+0x348>)
 8002878:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800287c:	4a2b      	ldr	r2, [pc, #172]	; (800292c <HAL_UART_MspInit+0x348>)
 800287e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002882:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002886:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_UART_MspInit+0x348>)
 8002888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_UART_MspInit+0x348>)
 8002896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800289a:	4a24      	ldr	r2, [pc, #144]	; (800292c <HAL_UART_MspInit+0x348>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <HAL_UART_MspInit+0x348>)
 80028a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_UART_MspInit+0x348>)
 80028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b8:	4a1c      	ldr	r2, [pc, #112]	; (800292c <HAL_UART_MspInit+0x348>)
 80028ba:	f043 0308 	orr.w	r3, r3, #8
 80028be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c2:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_UART_MspInit+0x348>)
 80028c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	623b      	str	r3, [r7, #32]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ESC_TX_M3_Pin;
 80028d0:	2304      	movs	r3, #4
 80028d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028e8:	2307      	movs	r3, #7
 80028ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(ESC_TX_M3_GPIO_Port, &GPIO_InitStruct);
 80028ee:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80028f2:	4619      	mov	r1, r3
 80028f4:	4815      	ldr	r0, [pc, #84]	; (800294c <HAL_UART_MspInit+0x368>)
 80028f6:	f001 ff1d 	bl	8004734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESC_RX_M3_Pin;
 80028fa:	2340      	movs	r3, #64	; 0x40
 80028fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002912:	2307      	movs	r3, #7
 8002914:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(ESC_RX_M3_GPIO_Port, &GPIO_InitStruct);
 8002918:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800291c:	4619      	mov	r1, r3
 800291e:	4809      	ldr	r0, [pc, #36]	; (8002944 <HAL_UART_MspInit+0x360>)
 8002920:	f001 ff08 	bl	8004734 <HAL_GPIO_Init>
}
 8002924:	e141      	b.n	8002baa <HAL_UART_MspInit+0x5c6>
 8002926:	bf00      	nop
 8002928:	40004c00 	.word	0x40004c00
 800292c:	58024400 	.word	0x58024400
 8002930:	58020800 	.word	0x58020800
 8002934:	40007800 	.word	0x40007800
 8002938:	58021400 	.word	0x58021400
 800293c:	58021000 	.word	0x58021000
 8002940:	40011800 	.word	0x40011800
 8002944:	58020c00 	.word	0x58020c00
 8002948:	40004400 	.word	0x40004400
 800294c:	58020000 	.word	0x58020000
  else if(huart->Instance==USART3)
 8002950:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002954:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a95      	ldr	r2, [pc, #596]	; (8002bb4 <HAL_UART_MspInit+0x5d0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d14f      	bne.n	8002a02 <HAL_UART_MspInit+0x41e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002962:	f04f 0202 	mov.w	r2, #2
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002974:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002978:	4618      	mov	r0, r3
 800297a:	f003 f965 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8002984:	f7ff f8a2 	bl	8001acc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002988:	4b8b      	ldr	r3, [pc, #556]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 800298a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800298e:	4a8a      	ldr	r2, [pc, #552]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002994:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002998:	4b87      	ldr	r3, [pc, #540]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 800299a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800299e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a6:	4b84      	ldr	r3, [pc, #528]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ac:	4a82      	ldr	r2, [pc, #520]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b6:	4b80      	ldr	r3, [pc, #512]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029bc:	f003 0208 	and.w	r2, r3, #8
 80029c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80029c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80029ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029d2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80029d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029ee:	2307      	movs	r3, #7
 80029f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80029f8:	4619      	mov	r1, r3
 80029fa:	4870      	ldr	r0, [pc, #448]	; (8002bbc <HAL_UART_MspInit+0x5d8>)
 80029fc:	f001 fe9a 	bl	8004734 <HAL_GPIO_Init>
}
 8002a00:	e0d3      	b.n	8002baa <HAL_UART_MspInit+0x5c6>
  else if(huart->Instance==USART6)
 8002a02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6c      	ldr	r2, [pc, #432]	; (8002bc0 <HAL_UART_MspInit+0x5dc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d156      	bne.n	8002ac2 <HAL_UART_MspInit+0x4de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002a14:	f04f 0201 	mov.w	r2, #1
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 f90c 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_UART_MspInit+0x456>
      Error_Handler();
 8002a36:	f7ff f849 	bl	8001acc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a3a:	4b5f      	ldr	r3, [pc, #380]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a40:	4a5d      	ldr	r2, [pc, #372]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002a42:	f043 0320 	orr.w	r3, r3, #32
 8002a46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a4a:	4b5b      	ldr	r3, [pc, #364]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a50:	f003 0220 	and.w	r2, r3, #32
 8002a54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a66:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a68:	4b53      	ldr	r3, [pc, #332]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6e:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a78:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7e:	f003 0204 	and.w	r2, r3, #4
 8002a82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a94:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = ESC_TX_M5_Pin|ESC_RX_M5_Pin;
 8002a96:	23c0      	movs	r3, #192	; 0xc0
 8002a98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002aae:	2307      	movs	r3, #7
 8002ab0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4842      	ldr	r0, [pc, #264]	; (8002bc4 <HAL_UART_MspInit+0x5e0>)
 8002abc:	f001 fe3a 	bl	8004734 <HAL_GPIO_Init>
}
 8002ac0:	e073      	b.n	8002baa <HAL_UART_MspInit+0x5c6>
  else if(huart->Instance==USART10)
 8002ac2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ac6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a3e      	ldr	r2, [pc, #248]	; (8002bc8 <HAL_UART_MspInit+0x5e4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d16a      	bne.n	8002baa <HAL_UART_MspInit+0x5c6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8002ad4:	f04f 0201 	mov.w	r2, #1
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 f8ac 	bl	8005c48 <HAL_RCCEx_PeriphCLKConfig>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_UART_MspInit+0x516>
      Error_Handler();
 8002af6:	f7fe ffe9 	bl	8001acc <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8002afa:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b00:	4a2d      	ldr	r2, [pc, #180]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b10:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002b14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b26:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b28:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2e:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002b30:	f043 0310 	orr.w	r3, r3, #16
 8002b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <HAL_UART_MspInit+0x5d4>)
 8002b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3e:	f003 0210 	and.w	r2, r3, #16
 8002b42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b46:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b54:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = ESC_RX_M4_Pin;
 8002b56:	2304      	movs	r3, #4
 8002b58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8002b6e:	2304      	movs	r3, #4
 8002b70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(ESC_RX_M4_GPIO_Port, &GPIO_InitStruct);
 8002b74:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4814      	ldr	r0, [pc, #80]	; (8002bcc <HAL_UART_MspInit+0x5e8>)
 8002b7c:	f001 fdda 	bl	8004734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ESC_TX_M4_Pin;
 8002b80:	2308      	movs	r3, #8
 8002b82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8002b98:	230b      	movs	r3, #11
 8002b9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(ESC_TX_M4_GPIO_Port, &GPIO_InitStruct);
 8002b9e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4809      	ldr	r0, [pc, #36]	; (8002bcc <HAL_UART_MspInit+0x5e8>)
 8002ba6:	f001 fdc5 	bl	8004734 <HAL_GPIO_Init>
}
 8002baa:	bf00      	nop
 8002bac:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40004800 	.word	0x40004800
 8002bb8:	58024400 	.word	0x58024400
 8002bbc:	58020c00 	.word	0x58020c00
 8002bc0:	40011400 	.word	0x40011400
 8002bc4:	58020800 	.word	0x58020800
 8002bc8:	40011c00 	.word	0x40011c00
 8002bcc:	58021000 	.word	0x58021000

08002bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <NMI_Handler+0x4>

08002bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bda:	e7fe      	b.n	8002bda <HardFault_Handler+0x4>

08002bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <MemManage_Handler+0x4>

08002be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be6:	e7fe      	b.n	8002be6 <BusFault_Handler+0x4>

08002be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <UsageFault_Handler+0x4>

08002bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c1c:	f000 f916 	bl	8002e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c28:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <SystemInit+0xd0>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	4a31      	ldr	r2, [pc, #196]	; (8002cf4 <SystemInit+0xd0>)
 8002c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <SystemInit+0xd4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	2b06      	cmp	r3, #6
 8002c42:	d807      	bhi.n	8002c54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c44:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <SystemInit+0xd4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 030f 	bic.w	r3, r3, #15
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <SystemInit+0xd4>)
 8002c4e:	f043 0307 	orr.w	r3, r3, #7
 8002c52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c54:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <SystemInit+0xd8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a28      	ldr	r2, [pc, #160]	; (8002cfc <SystemInit+0xd8>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c60:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <SystemInit+0xd8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c66:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <SystemInit+0xd8>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4924      	ldr	r1, [pc, #144]	; (8002cfc <SystemInit+0xd8>)
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <SystemInit+0xdc>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <SystemInit+0xd4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <SystemInit+0xd4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 030f 	bic.w	r3, r3, #15
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <SystemInit+0xd4>)
 8002c88:	f043 0307 	orr.w	r3, r3, #7
 8002c8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <SystemInit+0xd8>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <SystemInit+0xd8>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <SystemInit+0xd8>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <SystemInit+0xd8>)
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <SystemInit+0xe0>)
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <SystemInit+0xd8>)
 8002ca8:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <SystemInit+0xe4>)
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002cac:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <SystemInit+0xd8>)
 8002cae:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <SystemInit+0xe8>)
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <SystemInit+0xd8>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002cb8:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <SystemInit+0xd8>)
 8002cba:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <SystemInit+0xe8>)
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <SystemInit+0xd8>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <SystemInit+0xd8>)
 8002cc6:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <SystemInit+0xe8>)
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <SystemInit+0xd8>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <SystemInit+0xd8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <SystemInit+0xd8>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002cdc:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <SystemInit+0xd8>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <SystemInit+0xec>)
 8002ce4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002ce8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00
 8002cf8:	52002000 	.word	0x52002000
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d04:	02020200 	.word	0x02020200
 8002d08:	01ff0000 	.word	0x01ff0000
 8002d0c:	01010280 	.word	0x01010280
 8002d10:	52004000 	.word	0x52004000

08002d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d18:	f7ff ff84 	bl	8002c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d1c:	480c      	ldr	r0, [pc, #48]	; (8002d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d1e:	490d      	ldr	r1, [pc, #52]	; (8002d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d20:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d24:	e002      	b.n	8002d2c <LoopCopyDataInit>

08002d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d2a:	3304      	adds	r3, #4

08002d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d30:	d3f9      	bcc.n	8002d26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d34:	4c0a      	ldr	r4, [pc, #40]	; (8002d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d38:	e001      	b.n	8002d3e <LoopFillZerobss>

08002d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d3c:	3204      	adds	r2, #4

08002d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d40:	d3fb      	bcc.n	8002d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d42:	f007 ff49 	bl	800abd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d46:	f7fd fc5f 	bl	8000608 <main>
  bx  lr
 8002d4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d4c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002d50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d54:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002d58:	0800ac80 	.word	0x0800ac80
  ldr r2, =_sbss
 8002d5c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002d60:	24000a50 	.word	0x24000a50

08002d64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d64:	e7fe      	b.n	8002d64 <ADC3_IRQHandler>
	...

08002d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d6e:	2003      	movs	r0, #3
 8002d70:	f001 fcae 	bl	80046d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d74:	f002 fd92 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_Init+0x68>)
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	4913      	ldr	r1, [pc, #76]	; (8002dd4 <HAL_Init+0x6c>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_Init+0x68>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <HAL_Init+0x6c>)
 8002d9c:	5cd3      	ldrb	r3, [r2, r3]
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <HAL_Init+0x70>)
 8002daa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dac:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <HAL_Init+0x74>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002db2:	2000      	movs	r0, #0
 8002db4:	f000 f814 	bl	8002de0 <HAL_InitTick>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e002      	b.n	8002dc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc2:	f7fe fe89 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	58024400 	.word	0x58024400
 8002dd4:	0800ac38 	.word	0x0800ac38
 8002dd8:	24000004 	.word	0x24000004
 8002ddc:	24000000 	.word	0x24000000

08002de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_InitTick+0x60>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e021      	b.n	8002e38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002df4:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_InitTick+0x64>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_InitTick+0x60>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f001 fc85 	bl	800471a <HAL_SYSTICK_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00e      	b.n	8002e38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b0f      	cmp	r3, #15
 8002e1e:	d80a      	bhi.n	8002e36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e20:	2200      	movs	r2, #0
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	f001 fc5d 	bl	80046e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e2c:	4a06      	ldr	r2, [pc, #24]	; (8002e48 <HAL_InitTick+0x68>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	2400000c 	.word	0x2400000c
 8002e44:	24000000 	.word	0x24000000
 8002e48:	24000008 	.word	0x24000008

08002e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_IncTick+0x20>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_IncTick+0x24>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_IncTick+0x24>)
 8002e5e:	6013      	str	r3, [r2, #0]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	2400000c 	.word	0x2400000c
 8002e70:	24000a4c 	.word	0x24000a4c

08002e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return uwTick;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_GetTick+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	24000a4c 	.word	0x24000a4c

08002e8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3360      	adds	r3, #96	; 0x60
 8002f06:	461a      	mov	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a10      	ldr	r2, [pc, #64]	; (8002f54 <LL_ADC_SetOffset+0x60>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d10b      	bne.n	8002f30 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f2e:	e00b      	b.n	8002f48 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	601a      	str	r2, [r3, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	58026000 	.word	0x58026000

08002f58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3360      	adds	r3, #96	; 0x60
 8002f66:	461a      	mov	r2, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	611a      	str	r2, [r3, #16]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00e      	beq.n	8002fea <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3360      	adds	r3, #96	; 0x60
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	601a      	str	r2, [r3, #0]
  }
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	58026000 	.word	0x58026000

08002ffc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a0c      	ldr	r2, [pc, #48]	; (800303c <LL_ADC_SetOffsetSaturation+0x40>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d10e      	bne.n	800302e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3360      	adds	r3, #96	; 0x60
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	431a      	orrs	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	58026000 	.word	0x58026000

08003040 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <LL_ADC_SetOffsetSign+0x40>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10e      	bne.n	8003072 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3360      	adds	r3, #96	; 0x60
 8003058:	461a      	mov	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	431a      	orrs	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	58026000 	.word	0x58026000

08003084 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3360      	adds	r3, #96	; 0x60
 8003094:	461a      	mov	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <LL_ADC_SetOffsetState+0x50>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d108      	bne.n	80030b8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80030b6:	e007      	b.n	80030c8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	601a      	str	r2, [r3, #0]
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	58026000 	.word	0x58026000

080030d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3330      	adds	r3, #48	; 0x30
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	4413      	add	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	211f      	movs	r1, #31
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	401a      	ands	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	0e9b      	lsrs	r3, r3, #26
 8003110:	f003 011f 	and.w	r1, r3, #31
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	431a      	orrs	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3314      	adds	r3, #20
 8003140:	461a      	mov	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	0e5b      	lsrs	r3, r3, #25
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	4413      	add	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	0d1b      	lsrs	r3, r3, #20
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	2107      	movs	r1, #7
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	401a      	ands	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	0d1b      	lsrs	r3, r3, #20
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	431a      	orrs	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d115      	bne.n	80031c8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a8:	43db      	mvns	r3, r3
 80031aa:	401a      	ands	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0318 	and.w	r3, r3, #24
 80031b2:	4914      	ldr	r1, [pc, #80]	; (8003204 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80031b4:	40d9      	lsrs	r1, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	400b      	ands	r3, r1
 80031ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031be:	431a      	orrs	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80031c6:	e014      	b.n	80031f2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031d4:	43db      	mvns	r3, r3
 80031d6:	401a      	ands	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0318 	and.w	r3, r3, #24
 80031de:	4909      	ldr	r1, [pc, #36]	; (8003204 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80031e0:	40d9      	lsrs	r1, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	400b      	ands	r3, r1
 80031e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	58026000 	.word	0x58026000
 8003204:	000fffff 	.word	0x000fffff

08003208 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003216:	4013      	ands	r3, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6093      	str	r3, [r2, #8]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	5fffffc0 	.word	0x5fffffc0

0800322c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800323c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003240:	d101      	bne.n	8003246 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <LL_ADC_EnableInternalRegulator+0x24>)
 8003262:	4013      	ands	r3, r2
 8003264:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	6fffffc0 	.word	0x6fffffc0

0800327c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003290:	d101      	bne.n	8003296 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <LL_ADC_IsEnabled+0x18>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <LL_ADC_IsEnabled+0x1a>
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d101      	bne.n	80032e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b08      	cmp	r3, #8
 8003302:	d101      	bne.n	8003308 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b089      	sub	sp, #36	; 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1ee      	b.n	8003710 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7fe fbe3 	bl	8001b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff67 	bl	800322c <LL_ADC_IsDeepPowerDownEnabled>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff4d 	bl	8003208 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ff82 	bl	800327c <LL_ADC_IsInternalRegulatorEnabled>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d114      	bne.n	80033a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ff66 	bl	8003254 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003388:	4b8e      	ldr	r3, [pc, #568]	; (80035c4 <HAL_ADC_Init+0x2ac>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	4a8e      	ldr	r2, [pc, #568]	; (80035c8 <HAL_ADC_Init+0x2b0>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	3301      	adds	r3, #1
 8003398:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800339a:	e002      	b.n	80033a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	3b01      	subs	r3, #1
 80033a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f9      	bne.n	800339c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff65 	bl	800327c <LL_ADC_IsInternalRegulatorEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10d      	bne.n	80033d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033bc:	f043 0210 	orr.w	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff76 	bl	80032ca <LL_ADC_REG_IsConversionOngoing>
 80033de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 8188 	bne.w	80036fe <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 8184 	bne.w	80036fe <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033fe:	f043 0202 	orr.w	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ff4a 	bl	80032a4 <LL_ADC_IsEnabled>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d136      	bne.n	8003484 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6c      	ldr	r2, [pc, #432]	; (80035cc <HAL_ADC_Init+0x2b4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_ADC_Init+0x112>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6a      	ldr	r2, [pc, #424]	; (80035d0 <HAL_ADC_Init+0x2b8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d10e      	bne.n	8003448 <HAL_ADC_Init+0x130>
 800342a:	4868      	ldr	r0, [pc, #416]	; (80035cc <HAL_ADC_Init+0x2b4>)
 800342c:	f7ff ff3a 	bl	80032a4 <LL_ADC_IsEnabled>
 8003430:	4604      	mov	r4, r0
 8003432:	4867      	ldr	r0, [pc, #412]	; (80035d0 <HAL_ADC_Init+0x2b8>)
 8003434:	f7ff ff36 	bl	80032a4 <LL_ADC_IsEnabled>
 8003438:	4603      	mov	r3, r0
 800343a:	4323      	orrs	r3, r4
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e008      	b.n	800345a <HAL_ADC_Init+0x142>
 8003448:	4862      	ldr	r0, [pc, #392]	; (80035d4 <HAL_ADC_Init+0x2bc>)
 800344a:	f7ff ff2b 	bl	80032a4 <LL_ADC_IsEnabled>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d012      	beq.n	8003484 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a5a      	ldr	r2, [pc, #360]	; (80035cc <HAL_ADC_Init+0x2b4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d004      	beq.n	8003472 <HAL_ADC_Init+0x15a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a58      	ldr	r2, [pc, #352]	; (80035d0 <HAL_ADC_Init+0x2b8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_ADC_Init+0x15e>
 8003472:	4a59      	ldr	r2, [pc, #356]	; (80035d8 <HAL_ADC_Init+0x2c0>)
 8003474:	e000      	b.n	8003478 <HAL_ADC_Init+0x160>
 8003476:	4a59      	ldr	r2, [pc, #356]	; (80035dc <HAL_ADC_Init+0x2c4>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f7ff fd04 	bl	8002e8c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a52      	ldr	r2, [pc, #328]	; (80035d4 <HAL_ADC_Init+0x2bc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d129      	bne.n	80034e2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7e5b      	ldrb	r3, [r3, #25]
 8003492:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003498:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800349e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d013      	beq.n	80034d0 <HAL_ADC_Init+0x1b8>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	d00d      	beq.n	80034cc <HAL_ADC_Init+0x1b4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b1c      	cmp	r3, #28
 80034b6:	d007      	beq.n	80034c8 <HAL_ADC_Init+0x1b0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b18      	cmp	r3, #24
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_Init+0x1ac>
 80034c0:	2318      	movs	r3, #24
 80034c2:	e006      	b.n	80034d2 <HAL_ADC_Init+0x1ba>
 80034c4:	2300      	movs	r3, #0
 80034c6:	e004      	b.n	80034d2 <HAL_ADC_Init+0x1ba>
 80034c8:	2310      	movs	r3, #16
 80034ca:	e002      	b.n	80034d2 <HAL_ADC_Init+0x1ba>
 80034cc:	2308      	movs	r3, #8
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_Init+0x1ba>
 80034d0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80034d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	e00e      	b.n	8003500 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	7e5b      	ldrb	r3, [r3, #25]
 80034e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80034f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d106      	bne.n	8003518 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	3b01      	subs	r3, #1
 8003510:	045b      	lsls	r3, r3, #17
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d009      	beq.n	8003534 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <HAL_ADC_Init+0x2bc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d115      	bne.n	800356a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_ADC_Init+0x2c8>)
 8003546:	4013      	ands	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	69b9      	ldr	r1, [r7, #24]
 800354e:	430b      	orrs	r3, r1
 8003550:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	611a      	str	r2, [r3, #16]
 8003568:	e009      	b.n	800357e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <HAL_ADC_Init+0x2cc>)
 8003572:	4013      	ands	r3, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	69b9      	ldr	r1, [r7, #24]
 800357a:	430b      	orrs	r3, r1
 800357c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fea1 	bl	80032ca <LL_ADC_REG_IsConversionOngoing>
 8003588:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff feae 	bl	80032f0 <LL_ADC_INJ_IsConversionOngoing>
 8003594:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 808e 	bne.w	80036ba <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f040 808a 	bne.w	80036ba <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <HAL_ADC_Init+0x2bc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d11b      	bne.n	80035e8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7e1b      	ldrb	r3, [r3, #24]
 80035b4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035bc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e018      	b.n	80035f6 <HAL_ADC_Init+0x2de>
 80035c4:	24000000 	.word	0x24000000
 80035c8:	053e2d63 	.word	0x053e2d63
 80035cc:	40022000 	.word	0x40022000
 80035d0:	40022100 	.word	0x40022100
 80035d4:	58026000 	.word	0x58026000
 80035d8:	40022300 	.word	0x40022300
 80035dc:	58026300 	.word	0x58026300
 80035e0:	fff04007 	.word	0xfff04007
 80035e4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7e1b      	ldrb	r3, [r3, #24]
 80035ec:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_ADC_Init+0x400>)
 80035fe:	4013      	ands	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	69b9      	ldr	r1, [r7, #24]
 8003606:	430b      	orrs	r3, r1
 8003608:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003610:	2b01      	cmp	r3, #1
 8003612:	d137      	bne.n	8003684 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a3f      	ldr	r2, [pc, #252]	; (800371c <HAL_ADC_Init+0x404>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d116      	bne.n	8003652 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_ADC_Init+0x408>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003642:	430a      	orrs	r2, r1
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	611a      	str	r2, [r3, #16]
 8003650:	e020      	b.n	8003694 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	4b32      	ldr	r3, [pc, #200]	; (8003724 <HAL_ADC_Init+0x40c>)
 800365a:	4013      	ands	r3, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003660:	3a01      	subs	r2, #1
 8003662:	0411      	lsls	r1, r2, #16
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003668:	4311      	orrs	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003674:	430a      	orrs	r2, r1
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	611a      	str	r2, [r3, #16]
 8003682:	e007      	b.n	8003694 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HAL_ADC_Init+0x404>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d002      	beq.n	80036ba <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fd63 	bl	8004180 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10c      	bne.n	80036dc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	f023 010f 	bic.w	r1, r3, #15
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	1e5a      	subs	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
 80036da:	e007      	b.n	80036ec <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 020f 	bic.w	r2, r2, #15
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f0:	f023 0303 	bic.w	r3, r3, #3
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	661a      	str	r2, [r3, #96]	; 0x60
 80036fc:	e007      	b.n	800370e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	f043 0210 	orr.w	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800370e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3724      	adds	r7, #36	; 0x24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}
 8003718:	ffffbffc 	.word	0xffffbffc
 800371c:	58026000 	.word	0x58026000
 8003720:	fc00f81f 	.word	0xfc00f81f
 8003724:	fc00f81e 	.word	0xfc00f81e

08003728 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b0b9      	sub	sp, #228	; 0xe4
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003742:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4aa9      	ldr	r2, [pc, #676]	; (80039f0 <HAL_ADC_ConfigChannel+0x2c8>)
 800374a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d102      	bne.n	800375c <HAL_ADC_ConfigChannel+0x34>
 8003756:	2302      	movs	r3, #2
 8003758:	f000 bcfa 	b.w	8004150 <HAL_ADC_ConfigChannel+0xa28>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fdae 	bl	80032ca <LL_ADC_REG_IsConversionOngoing>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 84de 	bne.w	8004132 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a9e      	ldr	r2, [pc, #632]	; (80039f4 <HAL_ADC_ConfigChannel+0x2cc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d033      	beq.n	80037e8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003788:	2b00      	cmp	r3, #0
 800378a:	d108      	bne.n	800379e <HAL_ADC_ConfigChannel+0x76>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	2201      	movs	r2, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	e01d      	b.n	80037da <HAL_ADC_ConfigChannel+0xb2>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80037ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80037c2:	2320      	movs	r3, #32
 80037c4:	e004      	b.n	80037d0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80037c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	2201      	movs	r2, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	69d1      	ldr	r1, [r2, #28]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	f7ff fc6f 	bl	80030d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fd63 	bl	80032ca <LL_ADC_REG_IsConversionOngoing>
 8003804:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fd6f 	bl	80032f0 <LL_ADC_INJ_IsConversionOngoing>
 8003812:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 8270 	bne.w	8003d00 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003820:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003824:	2b00      	cmp	r3, #0
 8003826:	f040 826b 	bne.w	8003d00 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6819      	ldr	r1, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	461a      	mov	r2, r3
 8003838:	f7ff fc7a 	bl	8003130 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6c      	ldr	r2, [pc, #432]	; (80039f4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d10d      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	08db      	lsrs	r3, r3, #3
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003860:	e032      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003862:	4b65      	ldr	r3, [pc, #404]	; (80039f8 <HAL_ADC_ConfigChannel+0x2d0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800386a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800386e:	d10b      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x160>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	e01d      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x19c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10b      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x186>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	e00a      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x19c>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d048      	beq.n	8003962 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6919      	ldr	r1, [r3, #16]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038e0:	f7ff fb08 	bl	8002ef4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a42      	ldr	r2, [pc, #264]	; (80039f4 <HAL_ADC_ConfigChannel+0x2cc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d119      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6919      	ldr	r1, [r3, #16]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f7ff fba0 	bl	8003040 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6919      	ldr	r1, [r3, #16]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d102      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x1f0>
 8003912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003916:	e000      	b.n	800391a <HAL_ADC_ConfigChannel+0x1f2>
 8003918:	2300      	movs	r3, #0
 800391a:	461a      	mov	r2, r3
 800391c:	f7ff fb6e 	bl	8002ffc <LL_ADC_SetOffsetSaturation>
 8003920:	e1ee      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6919      	ldr	r1, [r3, #16]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_ADC_ConfigChannel+0x212>
 8003934:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003938:	e000      	b.n	800393c <HAL_ADC_ConfigChannel+0x214>
 800393a:	2300      	movs	r3, #0
 800393c:	461a      	mov	r2, r3
 800393e:	f7ff fb3b 	bl	8002fb8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6919      	ldr	r1, [r3, #16]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	7e1b      	ldrb	r3, [r3, #24]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d102      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x230>
 8003952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003956:	e000      	b.n	800395a <HAL_ADC_ConfigChannel+0x232>
 8003958:	2300      	movs	r3, #0
 800395a:	461a      	mov	r2, r3
 800395c:	f7ff fb12 	bl	8002f84 <LL_ADC_SetDataRightShift>
 8003960:	e1ce      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a23      	ldr	r2, [pc, #140]	; (80039f4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	f040 8181 	bne.w	8003c70 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff faef 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 800397a:	4603      	mov	r3, r0
 800397c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <HAL_ADC_ConfigChannel+0x272>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fae4 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003990:	4603      	mov	r3, r0
 8003992:	0e9b      	lsrs	r3, r3, #26
 8003994:	f003 021f 	and.w	r2, r3, #31
 8003998:	e01e      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x2b0>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fad9 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039b0:	fa93 f3a3 	rbit	r3, r3
 80039b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80039b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80039c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80039c8:	2320      	movs	r3, #32
 80039ca:	e004      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80039cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x2d4>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	0e9b      	lsrs	r3, r3, #26
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	e01e      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x306>
 80039f0:	47ff0000 	.word	0x47ff0000
 80039f4:	58026000 	.word	0x58026000
 80039f8:	5c001000 	.word	0x5c001000
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003a18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003a20:	2320      	movs	r3, #32
 8003a22:	e004      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d106      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fb22 	bl	8003084 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fa86 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10a      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x344>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fa7b 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	0e9b      	lsrs	r3, r3, #26
 8003a66:	f003 021f 	and.w	r2, r3, #31
 8003a6a:	e01e      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x382>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2101      	movs	r1, #1
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fa70 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a82:	fa93 f3a3 	rbit	r3, r3
 8003a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	e004      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x39a>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	0e9b      	lsrs	r3, r3, #26
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	e018      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3cc>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ada:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	e004      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d106      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2200      	movs	r2, #0
 8003afe:	2101      	movs	r1, #1
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fabf 	bl	8003084 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fa23 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x40a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fa18 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	0e9b      	lsrs	r3, r3, #26
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	e01e      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x448>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2102      	movs	r1, #2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fa0d 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003b60:	2320      	movs	r3, #32
 8003b62:	e004      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x460>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0e9b      	lsrs	r3, r3, #26
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	e014      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x48a>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	e004      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bac:	fab3 f383 	clz	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d106      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fa60 	bl	8003084 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2103      	movs	r1, #3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff f9c4 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x4c8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2103      	movs	r1, #3
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff f9b9 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003be6:	4603      	mov	r3, r0
 8003be8:	0e9b      	lsrs	r3, r3, #26
 8003bea:	f003 021f 	and.w	r2, r3, #31
 8003bee:	e017      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x4f8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2103      	movs	r1, #3
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff f9ae 	bl	8002f58 <LL_ADC_GetOffsetChannel>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003c12:	2320      	movs	r3, #32
 8003c14:	e003      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c18:	fab3 f383 	clz	r3, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x510>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	0e9b      	lsrs	r3, r3, #26
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	e011      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x534>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c48:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003c50:	2320      	movs	r3, #32
 8003c52:	e003      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c56:	fab3 f383 	clz	r3, r3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d14f      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2103      	movs	r1, #3
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fa0b 	bl	8003084 <LL_ADC_SetOffsetState>
 8003c6e:	e047      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	069b      	lsls	r3, r3, #26
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d107      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c92:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	069b      	lsls	r3, r3, #26
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d107      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	069b      	lsls	r3, r3, #26
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d107      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cda:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	069b      	lsls	r3, r3, #26
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d107      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cfe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff facd 	bl	80032a4 <LL_ADC_IsEnabled>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 8219 	bne.w	8004144 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6819      	ldr	r1, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f7ff fa32 	bl	8003188 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4aa1      	ldr	r2, [pc, #644]	; (8003fb0 <HAL_ADC_ConfigChannel+0x888>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	f040 812e 	bne.w	8003f8c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x630>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	3301      	adds	r3, #1
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	bf94      	ite	ls
 8003d50:	2301      	movls	r3, #1
 8003d52:	2300      	movhi	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e019      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x664>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d60:	fa93 f3a3 	rbit	r3, r3
 8003d64:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003d70:	2320      	movs	r3, #32
 8003d72:	e003      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	2b09      	cmp	r3, #9
 8003d84:	bf94      	ite	ls
 8003d86:	2301      	movls	r3, #1
 8003d88:	2300      	movhi	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d079      	beq.n	8003e84 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d107      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x684>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	0e9b      	lsrs	r3, r3, #26
 8003da2:	3301      	adds	r3, #1
 8003da4:	069b      	lsls	r3, r3, #26
 8003da6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003daa:	e015      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x6b0>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dbc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003dc4:	2320      	movs	r3, #32
 8003dc6:	e003      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	069b      	lsls	r3, r3, #26
 8003dd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x6d0>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	0e9b      	lsrs	r3, r3, #26
 8003dea:	3301      	adds	r3, #1
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	e017      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x700>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e08:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003e10:	2320      	movs	r3, #32
 8003e12:	e003      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	2101      	movs	r1, #1
 8003e24:	fa01 f303 	lsl.w	r3, r1, r3
 8003e28:	ea42 0103 	orr.w	r1, r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x726>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	4613      	mov	r3, r2
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4413      	add	r3, r2
 8003e4a:	051b      	lsls	r3, r3, #20
 8003e4c:	e018      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x758>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003e66:	2320      	movs	r3, #32
 8003e68:	e003      	b.n	8003e72 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	fab3 f383 	clz	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e80:	430b      	orrs	r3, r1
 8003e82:	e07e      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x778>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0e9b      	lsrs	r3, r3, #26
 8003e96:	3301      	adds	r3, #1
 8003e98:	069b      	lsls	r3, r3, #26
 8003e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e9e:	e015      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x7a4>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003eb8:	2320      	movs	r3, #32
 8003eba:	e003      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	069b      	lsls	r3, r3, #26
 8003ec8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x7c4>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	e017      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x7f4>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	61bb      	str	r3, [r7, #24]
  return result;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e003      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3301      	adds	r3, #1
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2101      	movs	r1, #1
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	ea42 0103 	orr.w	r1, r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x820>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	3301      	adds	r3, #1
 8003f34:	f003 021f 	and.w	r2, r3, #31
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3b1e      	subs	r3, #30
 8003f40:	051b      	lsls	r3, r3, #20
 8003f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f46:	e01b      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x858>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	60fb      	str	r3, [r7, #12]
  return result;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003f60:	2320      	movs	r3, #32
 8003f62:	e003      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f003 021f 	and.w	r2, r3, #31
 8003f72:	4613      	mov	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	3b1e      	subs	r3, #30
 8003f7a:	051b      	lsls	r3, r3, #20
 8003f7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f80:	430b      	orrs	r3, r1
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	6892      	ldr	r2, [r2, #8]
 8003f86:	4619      	mov	r1, r3
 8003f88:	f7ff f8d2 	bl	8003130 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f280 80d7 	bge.w	8004144 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a06      	ldr	r2, [pc, #24]	; (8003fb4 <HAL_ADC_ConfigChannel+0x88c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_ADC_ConfigChannel+0x882>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_ADC_ConfigChannel+0x890>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10a      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x898>
 8003faa:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HAL_ADC_ConfigChannel+0x894>)
 8003fac:	e009      	b.n	8003fc2 <HAL_ADC_ConfigChannel+0x89a>
 8003fae:	bf00      	nop
 8003fb0:	47ff0000 	.word	0x47ff0000
 8003fb4:	40022000 	.word	0x40022000
 8003fb8:	40022100 	.word	0x40022100
 8003fbc:	40022300 	.word	0x40022300
 8003fc0:	4b65      	ldr	r3, [pc, #404]	; (8004158 <HAL_ADC_ConfigChannel+0xa30>)
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe ff88 	bl	8002ed8 <LL_ADC_GetCommonPathInternalCh>
 8003fc8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a62      	ldr	r2, [pc, #392]	; (800415c <HAL_ADC_ConfigChannel+0xa34>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x8b8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a61      	ldr	r2, [pc, #388]	; (8004160 <HAL_ADC_ConfigChannel+0xa38>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d10e      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x8d6>
 8003fe0:	485e      	ldr	r0, [pc, #376]	; (800415c <HAL_ADC_ConfigChannel+0xa34>)
 8003fe2:	f7ff f95f 	bl	80032a4 <LL_ADC_IsEnabled>
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	485d      	ldr	r0, [pc, #372]	; (8004160 <HAL_ADC_ConfigChannel+0xa38>)
 8003fea:	f7ff f95b 	bl	80032a4 <LL_ADC_IsEnabled>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4323      	orrs	r3, r4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e008      	b.n	8004010 <HAL_ADC_ConfigChannel+0x8e8>
 8003ffe:	4859      	ldr	r0, [pc, #356]	; (8004164 <HAL_ADC_ConfigChannel+0xa3c>)
 8004000:	f7ff f950 	bl	80032a4 <LL_ADC_IsEnabled>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8084 	beq.w	800411e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a53      	ldr	r2, [pc, #332]	; (8004168 <HAL_ADC_ConfigChannel+0xa40>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d132      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x95e>
 8004020:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d12c      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a4c      	ldr	r2, [pc, #304]	; (8004164 <HAL_ADC_ConfigChannel+0xa3c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	f040 8086 	bne.w	8004144 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a47      	ldr	r2, [pc, #284]	; (800415c <HAL_ADC_ConfigChannel+0xa34>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_ADC_ConfigChannel+0x924>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a46      	ldr	r2, [pc, #280]	; (8004160 <HAL_ADC_ConfigChannel+0xa38>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x928>
 800404c:	4a47      	ldr	r2, [pc, #284]	; (800416c <HAL_ADC_ConfigChannel+0xa44>)
 800404e:	e000      	b.n	8004052 <HAL_ADC_ConfigChannel+0x92a>
 8004050:	4a41      	ldr	r2, [pc, #260]	; (8004158 <HAL_ADC_ConfigChannel+0xa30>)
 8004052:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004056:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7fe ff28 	bl	8002eb2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004062:	4b43      	ldr	r3, [pc, #268]	; (8004170 <HAL_ADC_ConfigChannel+0xa48>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	4a42      	ldr	r2, [pc, #264]	; (8004174 <HAL_ADC_ConfigChannel+0xa4c>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	099b      	lsrs	r3, r3, #6
 8004070:	3301      	adds	r3, #1
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004076:	e002      	b.n	800407e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	3b01      	subs	r3, #1
 800407c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f9      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004084:	e05e      	b.n	8004144 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a3b      	ldr	r2, [pc, #236]	; (8004178 <HAL_ADC_ConfigChannel+0xa50>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d120      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x9aa>
 8004090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d11a      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a30      	ldr	r2, [pc, #192]	; (8004164 <HAL_ADC_ConfigChannel+0xa3c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d14e      	bne.n	8004144 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2c      	ldr	r2, [pc, #176]	; (800415c <HAL_ADC_ConfigChannel+0xa34>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x992>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2a      	ldr	r2, [pc, #168]	; (8004160 <HAL_ADC_ConfigChannel+0xa38>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_ADC_ConfigChannel+0x996>
 80040ba:	4a2c      	ldr	r2, [pc, #176]	; (800416c <HAL_ADC_ConfigChannel+0xa44>)
 80040bc:	e000      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x998>
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <HAL_ADC_ConfigChannel+0xa30>)
 80040c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f7fe fef1 	bl	8002eb2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040d0:	e038      	b.n	8004144 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a29      	ldr	r2, [pc, #164]	; (800417c <HAL_ADC_ConfigChannel+0xa54>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d133      	bne.n	8004144 <HAL_ADC_ConfigChannel+0xa1c>
 80040dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d12d      	bne.n	8004144 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <HAL_ADC_ConfigChannel+0xa3c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d128      	bne.n	8004144 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a19      	ldr	r2, [pc, #100]	; (800415c <HAL_ADC_ConfigChannel+0xa34>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_ADC_ConfigChannel+0x9de>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a17      	ldr	r2, [pc, #92]	; (8004160 <HAL_ADC_ConfigChannel+0xa38>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_ADC_ConfigChannel+0x9e2>
 8004106:	4a19      	ldr	r2, [pc, #100]	; (800416c <HAL_ADC_ConfigChannel+0xa44>)
 8004108:	e000      	b.n	800410c <HAL_ADC_ConfigChannel+0x9e4>
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <HAL_ADC_ConfigChannel+0xa30>)
 800410c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7fe fecb 	bl	8002eb2 <LL_ADC_SetCommonPathInternalCh>
 800411c:	e012      	b.n	8004144 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004130:	e008      	b.n	8004144 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004136:	f043 0220 	orr.w	r2, r3, #32
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800414c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004150:	4618      	mov	r0, r3
 8004152:	37e4      	adds	r7, #228	; 0xe4
 8004154:	46bd      	mov	sp, r7
 8004156:	bd90      	pop	{r4, r7, pc}
 8004158:	58026300 	.word	0x58026300
 800415c:	40022000 	.word	0x40022000
 8004160:	40022100 	.word	0x40022100
 8004164:	58026000 	.word	0x58026000
 8004168:	c7520000 	.word	0xc7520000
 800416c:	40022300 	.word	0x40022300
 8004170:	24000000 	.word	0x24000000
 8004174:	053e2d63 	.word	0x053e2d63
 8004178:	c3210000 	.word	0xc3210000
 800417c:	cb840000 	.word	0xcb840000

08004180 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a6c      	ldr	r2, [pc, #432]	; (8004340 <ADC_ConfigureBoostMode+0x1c0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <ADC_ConfigureBoostMode+0x1c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a6b      	ldr	r2, [pc, #428]	; (8004344 <ADC_ConfigureBoostMode+0x1c4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d109      	bne.n	80041b0 <ADC_ConfigureBoostMode+0x30>
 800419c:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <ADC_ConfigureBoostMode+0x1c8>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf14      	ite	ne
 80041a8:	2301      	movne	r3, #1
 80041aa:	2300      	moveq	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	e008      	b.n	80041c2 <ADC_ConfigureBoostMode+0x42>
 80041b0:	4b66      	ldr	r3, [pc, #408]	; (800434c <ADC_ConfigureBoostMode+0x1cc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf14      	ite	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	2300      	moveq	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01c      	beq.n	8004200 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80041c6:	f001 fce3 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 80041ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041d4:	d010      	beq.n	80041f8 <ADC_ConfigureBoostMode+0x78>
 80041d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041da:	d873      	bhi.n	80042c4 <ADC_ConfigureBoostMode+0x144>
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d002      	beq.n	80041e8 <ADC_ConfigureBoostMode+0x68>
 80041e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e6:	d16d      	bne.n	80042c4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	60fb      	str	r3, [r7, #12]
        break;
 80041f6:	e068      	b.n	80042ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	60fb      	str	r3, [r7, #12]
        break;
 80041fe:	e064      	b.n	80042ca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004200:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	f002 febe 	bl	8006f88 <HAL_RCCEx_GetPeriphCLKFreq>
 800420c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004216:	d051      	beq.n	80042bc <ADC_ConfigureBoostMode+0x13c>
 8004218:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800421c:	d854      	bhi.n	80042c8 <ADC_ConfigureBoostMode+0x148>
 800421e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004222:	d047      	beq.n	80042b4 <ADC_ConfigureBoostMode+0x134>
 8004224:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004228:	d84e      	bhi.n	80042c8 <ADC_ConfigureBoostMode+0x148>
 800422a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800422e:	d03d      	beq.n	80042ac <ADC_ConfigureBoostMode+0x12c>
 8004230:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004234:	d848      	bhi.n	80042c8 <ADC_ConfigureBoostMode+0x148>
 8004236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800423a:	d033      	beq.n	80042a4 <ADC_ConfigureBoostMode+0x124>
 800423c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004240:	d842      	bhi.n	80042c8 <ADC_ConfigureBoostMode+0x148>
 8004242:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004246:	d029      	beq.n	800429c <ADC_ConfigureBoostMode+0x11c>
 8004248:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800424c:	d83c      	bhi.n	80042c8 <ADC_ConfigureBoostMode+0x148>
 800424e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004252:	d01a      	beq.n	800428a <ADC_ConfigureBoostMode+0x10a>
 8004254:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004258:	d836      	bhi.n	80042c8 <ADC_ConfigureBoostMode+0x148>
 800425a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800425e:	d014      	beq.n	800428a <ADC_ConfigureBoostMode+0x10a>
 8004260:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004264:	d830      	bhi.n	80042c8 <ADC_ConfigureBoostMode+0x148>
 8004266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800426a:	d00e      	beq.n	800428a <ADC_ConfigureBoostMode+0x10a>
 800426c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004270:	d82a      	bhi.n	80042c8 <ADC_ConfigureBoostMode+0x148>
 8004272:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004276:	d008      	beq.n	800428a <ADC_ConfigureBoostMode+0x10a>
 8004278:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800427c:	d824      	bhi.n	80042c8 <ADC_ConfigureBoostMode+0x148>
 800427e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004282:	d002      	beq.n	800428a <ADC_ConfigureBoostMode+0x10a>
 8004284:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004288:	d11e      	bne.n	80042c8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	0c9b      	lsrs	r3, r3, #18
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	60fb      	str	r3, [r7, #12]
        break;
 800429a:	e016      	b.n	80042ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	091b      	lsrs	r3, r3, #4
 80042a0:	60fb      	str	r3, [r7, #12]
        break;
 80042a2:	e012      	b.n	80042ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	60fb      	str	r3, [r7, #12]
        break;
 80042aa:	e00e      	b.n	80042ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	60fb      	str	r3, [r7, #12]
        break;
 80042b2:	e00a      	b.n	80042ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	09db      	lsrs	r3, r3, #7
 80042b8:	60fb      	str	r3, [r7, #12]
        break;
 80042ba:	e006      	b.n	80042ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	60fb      	str	r3, [r7, #12]
        break;
 80042c2:	e002      	b.n	80042ca <ADC_ConfigureBoostMode+0x14a>
        break;
 80042c4:	bf00      	nop
 80042c6:	e000      	b.n	80042ca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80042c8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a1f      	ldr	r2, [pc, #124]	; (8004350 <ADC_ConfigureBoostMode+0x1d0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d808      	bhi.n	80042ea <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80042e8:	e025      	b.n	8004336 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a19      	ldr	r2, [pc, #100]	; (8004354 <ADC_ConfigureBoostMode+0x1d4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d80a      	bhi.n	8004308 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004304:	609a      	str	r2, [r3, #8]
}
 8004306:	e016      	b.n	8004336 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a13      	ldr	r2, [pc, #76]	; (8004358 <ADC_ConfigureBoostMode+0x1d8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d80a      	bhi.n	8004326 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	e007      	b.n	8004336 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004334:	609a      	str	r2, [r3, #8]
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40022000 	.word	0x40022000
 8004344:	40022100 	.word	0x40022100
 8004348:	40022300 	.word	0x40022300
 800434c:	58026300 	.word	0x58026300
 8004350:	005f5e10 	.word	0x005f5e10
 8004354:	00bebc20 	.word	0x00bebc20
 8004358:	017d7840 	.word	0x017d7840

0800435c <LL_ADC_IsEnabled>:
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <LL_ADC_IsEnabled+0x18>
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <LL_ADC_IsEnabled+0x1a>
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <LL_ADC_REG_IsConversionOngoing>:
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b04      	cmp	r3, #4
 8004394:	d101      	bne.n	800439a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043a8:	b590      	push	{r4, r7, lr}
 80043aa:	b0a3      	sub	sp, #140	; 0x8c
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e0c1      	b.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80043ce:	2300      	movs	r3, #0
 80043d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a5e      	ldr	r2, [pc, #376]	; (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d102      	bne.n	80043e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043e0:	4b5d      	ldr	r3, [pc, #372]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e001      	b.n	80043ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0a0      	b.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff ffb9 	bl	8004382 <LL_ADC_REG_IsConversionOngoing>
 8004410:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ffb2 	bl	8004382 <LL_ADC_REG_IsConversionOngoing>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 8081 	bne.w	8004528 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004426:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d17c      	bne.n	8004528 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a48      	ldr	r2, [pc, #288]	; (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a46      	ldr	r2, [pc, #280]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004442:	4b46      	ldr	r3, [pc, #280]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004444:	e000      	b.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004446:	4b46      	ldr	r3, [pc, #280]	; (8004560 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004448:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d039      	beq.n	80044c6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004452:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	431a      	orrs	r2, r3
 8004460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004462:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3a      	ldr	r2, [pc, #232]	; (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a39      	ldr	r2, [pc, #228]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10e      	bne.n	8004496 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004478:	4836      	ldr	r0, [pc, #216]	; (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800447a:	f7ff ff6f 	bl	800435c <LL_ADC_IsEnabled>
 800447e:	4604      	mov	r4, r0
 8004480:	4835      	ldr	r0, [pc, #212]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004482:	f7ff ff6b 	bl	800435c <LL_ADC_IsEnabled>
 8004486:	4603      	mov	r3, r0
 8004488:	4323      	orrs	r3, r4
 800448a:	2b00      	cmp	r3, #0
 800448c:	bf0c      	ite	eq
 800448e:	2301      	moveq	r3, #1
 8004490:	2300      	movne	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	e008      	b.n	80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004496:	4833      	ldr	r0, [pc, #204]	; (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004498:	f7ff ff60 	bl	800435c <LL_ADC_IsEnabled>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf0c      	ite	eq
 80044a2:	2301      	moveq	r3, #1
 80044a4:	2300      	movne	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d047      	beq.n	800453c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	6811      	ldr	r1, [r2, #0]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	6892      	ldr	r2, [r2, #8]
 80044bc:	430a      	orrs	r2, r1
 80044be:	431a      	orrs	r2, r3
 80044c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044c4:	e03a      	b.n	800453c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80044c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1f      	ldr	r2, [pc, #124]	; (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10e      	bne.n	8004504 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80044e6:	481b      	ldr	r0, [pc, #108]	; (8004554 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044e8:	f7ff ff38 	bl	800435c <LL_ADC_IsEnabled>
 80044ec:	4604      	mov	r4, r0
 80044ee:	481a      	ldr	r0, [pc, #104]	; (8004558 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044f0:	f7ff ff34 	bl	800435c <LL_ADC_IsEnabled>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4323      	orrs	r3, r4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e008      	b.n	8004516 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004504:	4817      	ldr	r0, [pc, #92]	; (8004564 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004506:	f7ff ff29 	bl	800435c <LL_ADC_IsEnabled>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf0c      	ite	eq
 8004510:	2301      	moveq	r3, #1
 8004512:	2300      	movne	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d010      	beq.n	800453c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800451a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004520:	4013      	ands	r3, r2
 8004522:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004524:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004526:	e009      	b.n	800453c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800453a:	e000      	b.n	800453e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800453c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004546:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800454a:	4618      	mov	r0, r3
 800454c:	378c      	adds	r7, #140	; 0x8c
 800454e:	46bd      	mov	sp, r7
 8004550:	bd90      	pop	{r4, r7, pc}
 8004552:	bf00      	nop
 8004554:	40022000 	.word	0x40022000
 8004558:	40022100 	.word	0x40022100
 800455c:	40022300 	.word	0x40022300
 8004560:	58026300 	.word	0x58026300
 8004564:	58026000 	.word	0x58026000
 8004568:	fffff0e0 	.word	0xfffff0e0

0800456c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <__NVIC_SetPriorityGrouping+0x40>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004588:	4013      	ands	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <__NVIC_SetPriorityGrouping+0x44>)
 8004596:	4313      	orrs	r3, r2
 8004598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800459a:	4a04      	ldr	r2, [pc, #16]	; (80045ac <__NVIC_SetPriorityGrouping+0x40>)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	60d3      	str	r3, [r2, #12]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000ed00 	.word	0xe000ed00
 80045b0:	05fa0000 	.word	0x05fa0000

080045b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <__NVIC_GetPriorityGrouping+0x18>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	f003 0307 	and.w	r3, r3, #7
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	6039      	str	r1, [r7, #0]
 80045da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	db0a      	blt.n	80045fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	490c      	ldr	r1, [pc, #48]	; (800461c <__NVIC_SetPriority+0x4c>)
 80045ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ee:	0112      	lsls	r2, r2, #4
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	440b      	add	r3, r1
 80045f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045f8:	e00a      	b.n	8004610 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4908      	ldr	r1, [pc, #32]	; (8004620 <__NVIC_SetPriority+0x50>)
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	3b04      	subs	r3, #4
 8004608:	0112      	lsls	r2, r2, #4
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	440b      	add	r3, r1
 800460e:	761a      	strb	r2, [r3, #24]
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	e000e100 	.word	0xe000e100
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f1c3 0307 	rsb	r3, r3, #7
 800463e:	2b04      	cmp	r3, #4
 8004640:	bf28      	it	cs
 8004642:	2304      	movcs	r3, #4
 8004644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3304      	adds	r3, #4
 800464a:	2b06      	cmp	r3, #6
 800464c:	d902      	bls.n	8004654 <NVIC_EncodePriority+0x30>
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3b03      	subs	r3, #3
 8004652:	e000      	b.n	8004656 <NVIC_EncodePriority+0x32>
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004658:	f04f 32ff 	mov.w	r2, #4294967295
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43da      	mvns	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	401a      	ands	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800466c:	f04f 31ff 	mov.w	r1, #4294967295
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	fa01 f303 	lsl.w	r3, r1, r3
 8004676:	43d9      	mvns	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800467c:	4313      	orrs	r3, r2
         );
}
 800467e:	4618      	mov	r0, r3
 8004680:	3724      	adds	r7, #36	; 0x24
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3b01      	subs	r3, #1
 8004698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800469c:	d301      	bcc.n	80046a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800469e:	2301      	movs	r3, #1
 80046a0:	e00f      	b.n	80046c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046a2:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <SysTick_Config+0x40>)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046aa:	210f      	movs	r1, #15
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	f7ff ff8e 	bl	80045d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <SysTick_Config+0x40>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ba:	4b04      	ldr	r3, [pc, #16]	; (80046cc <SysTick_Config+0x40>)
 80046bc:	2207      	movs	r2, #7
 80046be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	e000e010 	.word	0xe000e010

080046d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff ff47 	bl	800456c <__NVIC_SetPriorityGrouping>
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b086      	sub	sp, #24
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	4603      	mov	r3, r0
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046f4:	f7ff ff5e 	bl	80045b4 <__NVIC_GetPriorityGrouping>
 80046f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	6978      	ldr	r0, [r7, #20]
 8004700:	f7ff ff90 	bl	8004624 <NVIC_EncodePriority>
 8004704:	4602      	mov	r2, r0
 8004706:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800470a:	4611      	mov	r1, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff ff5f 	bl	80045d0 <__NVIC_SetPriority>
}
 8004712:	bf00      	nop
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff ffb2 	bl	800468c <SysTick_Config>
 8004728:	4603      	mov	r3, r0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004742:	4b86      	ldr	r3, [pc, #536]	; (800495c <HAL_GPIO_Init+0x228>)
 8004744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004746:	e18c      	b.n	8004a62 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	2101      	movs	r1, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa01 f303 	lsl.w	r3, r1, r3
 8004754:	4013      	ands	r3, r2
 8004756:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 817e 	beq.w	8004a5c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d005      	beq.n	8004778 <HAL_GPIO_Init+0x44>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d130      	bne.n	80047da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	2203      	movs	r2, #3
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047ae:	2201      	movs	r2, #1
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	091b      	lsrs	r3, r3, #4
 80047c4:	f003 0201 	and.w	r2, r3, #1
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d017      	beq.n	8004816 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	2203      	movs	r2, #3
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4313      	orrs	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d123      	bne.n	800486a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	08da      	lsrs	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3208      	adds	r2, #8
 800482a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	220f      	movs	r2, #15
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4013      	ands	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	08da      	lsrs	r2, r3, #3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3208      	adds	r2, #8
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	2203      	movs	r2, #3
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 0203 	and.w	r2, r3, #3
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80d8 	beq.w	8004a5c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ac:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <HAL_GPIO_Init+0x22c>)
 80048ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048b2:	4a2b      	ldr	r2, [pc, #172]	; (8004960 <HAL_GPIO_Init+0x22c>)
 80048b4:	f043 0302 	orr.w	r3, r3, #2
 80048b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048bc:	4b28      	ldr	r3, [pc, #160]	; (8004960 <HAL_GPIO_Init+0x22c>)
 80048be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ca:	4a26      	ldr	r2, [pc, #152]	; (8004964 <HAL_GPIO_Init+0x230>)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	3302      	adds	r3, #2
 80048d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	220f      	movs	r2, #15
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_GPIO_Init+0x234>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d04a      	beq.n	800498c <HAL_GPIO_Init+0x258>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1c      	ldr	r2, [pc, #112]	; (800496c <HAL_GPIO_Init+0x238>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d02b      	beq.n	8004956 <HAL_GPIO_Init+0x222>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1b      	ldr	r2, [pc, #108]	; (8004970 <HAL_GPIO_Init+0x23c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d025      	beq.n	8004952 <HAL_GPIO_Init+0x21e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1a      	ldr	r2, [pc, #104]	; (8004974 <HAL_GPIO_Init+0x240>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <HAL_GPIO_Init+0x21a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a19      	ldr	r2, [pc, #100]	; (8004978 <HAL_GPIO_Init+0x244>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d019      	beq.n	800494a <HAL_GPIO_Init+0x216>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a18      	ldr	r2, [pc, #96]	; (800497c <HAL_GPIO_Init+0x248>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_GPIO_Init+0x212>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a17      	ldr	r2, [pc, #92]	; (8004980 <HAL_GPIO_Init+0x24c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00d      	beq.n	8004942 <HAL_GPIO_Init+0x20e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a16      	ldr	r2, [pc, #88]	; (8004984 <HAL_GPIO_Init+0x250>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <HAL_GPIO_Init+0x20a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a15      	ldr	r2, [pc, #84]	; (8004988 <HAL_GPIO_Init+0x254>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_GPIO_Init+0x206>
 8004936:	2309      	movs	r3, #9
 8004938:	e029      	b.n	800498e <HAL_GPIO_Init+0x25a>
 800493a:	230a      	movs	r3, #10
 800493c:	e027      	b.n	800498e <HAL_GPIO_Init+0x25a>
 800493e:	2307      	movs	r3, #7
 8004940:	e025      	b.n	800498e <HAL_GPIO_Init+0x25a>
 8004942:	2306      	movs	r3, #6
 8004944:	e023      	b.n	800498e <HAL_GPIO_Init+0x25a>
 8004946:	2305      	movs	r3, #5
 8004948:	e021      	b.n	800498e <HAL_GPIO_Init+0x25a>
 800494a:	2304      	movs	r3, #4
 800494c:	e01f      	b.n	800498e <HAL_GPIO_Init+0x25a>
 800494e:	2303      	movs	r3, #3
 8004950:	e01d      	b.n	800498e <HAL_GPIO_Init+0x25a>
 8004952:	2302      	movs	r3, #2
 8004954:	e01b      	b.n	800498e <HAL_GPIO_Init+0x25a>
 8004956:	2301      	movs	r3, #1
 8004958:	e019      	b.n	800498e <HAL_GPIO_Init+0x25a>
 800495a:	bf00      	nop
 800495c:	58000080 	.word	0x58000080
 8004960:	58024400 	.word	0x58024400
 8004964:	58000400 	.word	0x58000400
 8004968:	58020000 	.word	0x58020000
 800496c:	58020400 	.word	0x58020400
 8004970:	58020800 	.word	0x58020800
 8004974:	58020c00 	.word	0x58020c00
 8004978:	58021000 	.word	0x58021000
 800497c:	58021400 	.word	0x58021400
 8004980:	58021800 	.word	0x58021800
 8004984:	58021c00 	.word	0x58021c00
 8004988:	58022400 	.word	0x58022400
 800498c:	2300      	movs	r3, #0
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	f002 0203 	and.w	r2, r2, #3
 8004994:	0092      	lsls	r2, r2, #2
 8004996:	4093      	lsls	r3, r2
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800499e:	4938      	ldr	r1, [pc, #224]	; (8004a80 <HAL_GPIO_Init+0x34c>)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3302      	adds	r3, #2
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f47f ae6b 	bne.w	8004748 <HAL_GPIO_Init+0x14>
  }
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	3724      	adds	r7, #36	; 0x24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	58000400 	.word	0x58000400

08004a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	807b      	strh	r3, [r7, #2]
 8004a90:	4613      	mov	r3, r2
 8004a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a94:	787b      	ldrb	r3, [r7, #1]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a9a:	887a      	ldrh	r2, [r7, #2]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004aa0:	e003      	b.n	8004aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aa2:	887b      	ldrh	r3, [r7, #2]
 8004aa4:	041a      	lsls	r2, r3, #16
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	619a      	str	r2, [r3, #24]
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e07f      	b.n	8004bca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fd f886 	bl	8001bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	; 0x24
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d107      	bne.n	8004b32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	e006      	b.n	8004b40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d104      	bne.n	8004b52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <HAL_I2C_Init+0x11c>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69d9      	ldr	r1, [r3, #28]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1a      	ldr	r2, [r3, #32]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	02008000 	.word	0x02008000

08004bd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d138      	bne.n	8004c60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e032      	b.n	8004c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2224      	movs	r2, #36	; 0x24
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d139      	bne.n	8004cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e033      	b.n	8004cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2224      	movs	r2, #36	; 0x24
 8004c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e000      	b.n	8004cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cf8:	2302      	movs	r3, #2
  }
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_PWREx_ConfigSupply+0x70>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d00a      	beq.n	8004d32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d1c:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <HAL_PWREx_ConfigSupply+0x70>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d001      	beq.n	8004d2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e01f      	b.n	8004d6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e01d      	b.n	8004d6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d32:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <HAL_PWREx_ConfigSupply+0x70>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f023 0207 	bic.w	r2, r3, #7
 8004d3a:	490f      	ldr	r1, [pc, #60]	; (8004d78 <HAL_PWREx_ConfigSupply+0x70>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d42:	f7fe f897 	bl	8002e74 <HAL_GetTick>
 8004d46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d48:	e009      	b.n	8004d5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d4a:	f7fe f893 	bl	8002e74 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d58:	d901      	bls.n	8004d5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e007      	b.n	8004d6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <HAL_PWREx_ConfigSupply+0x70>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6a:	d1ee      	bne.n	8004d4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	58024800 	.word	0x58024800

08004d7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	; 0x30
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e3c8      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 8087 	beq.w	8004eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9c:	4b88      	ldr	r3, [pc, #544]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004da6:	4b86      	ldr	r3, [pc, #536]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d007      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x46>
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	2b18      	cmp	r3, #24
 8004db6:	d110      	bne.n	8004dda <HAL_RCC_OscConfig+0x5e>
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d10b      	bne.n	8004dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc2:	4b7f      	ldr	r3, [pc, #508]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d06c      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x12c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d168      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e3a2      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de2:	d106      	bne.n	8004df2 <HAL_RCC_OscConfig+0x76>
 8004de4:	4b76      	ldr	r3, [pc, #472]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a75      	ldr	r2, [pc, #468]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e02e      	b.n	8004e50 <HAL_RCC_OscConfig+0xd4>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x98>
 8004dfa:	4b71      	ldr	r3, [pc, #452]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a70      	ldr	r2, [pc, #448]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	4b6e      	ldr	r3, [pc, #440]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a6d      	ldr	r2, [pc, #436]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e01d      	b.n	8004e50 <HAL_RCC_OscConfig+0xd4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0xbc>
 8004e1e:	4b68      	ldr	r3, [pc, #416]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a67      	ldr	r2, [pc, #412]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b65      	ldr	r3, [pc, #404]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a64      	ldr	r2, [pc, #400]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e00b      	b.n	8004e50 <HAL_RCC_OscConfig+0xd4>
 8004e38:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a60      	ldr	r2, [pc, #384]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b5e      	ldr	r3, [pc, #376]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5d      	ldr	r2, [pc, #372]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fe f80c 	bl	8002e74 <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fe f808 	bl	8002e74 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e356      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e72:	4b53      	ldr	r3, [pc, #332]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0xe4>
 8004e7e:	e014      	b.n	8004eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fd fff8 	bl	8002e74 <HAL_GetTick>
 8004e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fd fff4 	bl	8002e74 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e342      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e9a:	4b49      	ldr	r3, [pc, #292]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x10c>
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 808c 	beq.w	8004fd0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb8:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ec0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ec2:	4b3f      	ldr	r3, [pc, #252]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <HAL_RCC_OscConfig+0x162>
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	2b18      	cmp	r3, #24
 8004ed2:	d137      	bne.n	8004f44 <HAL_RCC_OscConfig+0x1c8>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d132      	bne.n	8004f44 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ede:	4b38      	ldr	r3, [pc, #224]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x17a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e314      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ef6:	4b32      	ldr	r3, [pc, #200]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 0219 	bic.w	r2, r3, #25
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	492f      	ldr	r1, [pc, #188]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fd ffb4 	bl	8002e74 <HAL_GetTick>
 8004f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f10:	f7fd ffb0 	bl	8002e74 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e2fe      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f22:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f2e:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	061b      	lsls	r3, r3, #24
 8004f3c:	4920      	ldr	r1, [pc, #128]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f42:	e045      	b.n	8004fd0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d026      	beq.n	8004f9a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f4c:	4b1c      	ldr	r3, [pc, #112]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f023 0219 	bic.w	r2, r3, #25
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4919      	ldr	r1, [pc, #100]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7fd ff89 	bl	8002e74 <HAL_GetTick>
 8004f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f66:	f7fd ff85 	bl	8002e74 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e2d3      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f78:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	061b      	lsls	r3, r3, #24
 8004f92:	490b      	ldr	r1, [pc, #44]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
 8004f98:	e01a      	b.n	8004fd0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f9a:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa6:	f7fd ff65 	bl	8002e74 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fac:	e00a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fae:	f7fd ff61 	bl	8002e74 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d903      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e2af      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
 8004fc0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fc4:	4b96      	ldr	r3, [pc, #600]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1ee      	bne.n	8004fae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d06a      	beq.n	80050b2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fdc:	4b90      	ldr	r3, [pc, #576]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fe4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fe6:	4b8e      	ldr	r3, [pc, #568]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d007      	beq.n	8005002 <HAL_RCC_OscConfig+0x286>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b18      	cmp	r3, #24
 8004ff6:	d11b      	bne.n	8005030 <HAL_RCC_OscConfig+0x2b4>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d116      	bne.n	8005030 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005002:	4b87      	ldr	r3, [pc, #540]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <HAL_RCC_OscConfig+0x29e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	2b80      	cmp	r3, #128	; 0x80
 8005014:	d001      	beq.n	800501a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e282      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800501a:	4b81      	ldr	r3, [pc, #516]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	061b      	lsls	r3, r3, #24
 8005028:	497d      	ldr	r1, [pc, #500]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 800502a:	4313      	orrs	r3, r2
 800502c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800502e:	e040      	b.n	80050b2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d023      	beq.n	8005080 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005038:	4b79      	ldr	r3, [pc, #484]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a78      	ldr	r2, [pc, #480]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 800503e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd ff16 	bl	8002e74 <HAL_GetTick>
 8005048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800504c:	f7fd ff12 	bl	8002e74 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e260      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800505e:	4b70      	ldr	r3, [pc, #448]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800506a:	4b6d      	ldr	r3, [pc, #436]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	061b      	lsls	r3, r3, #24
 8005078:	4969      	ldr	r1, [pc, #420]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 800507a:	4313      	orrs	r3, r2
 800507c:	60cb      	str	r3, [r1, #12]
 800507e:	e018      	b.n	80050b2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005080:	4b67      	ldr	r3, [pc, #412]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a66      	ldr	r2, [pc, #408]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fd fef2 	bl	8002e74 <HAL_GetTick>
 8005090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005094:	f7fd feee 	bl	8002e74 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e23c      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050a6:	4b5e      	ldr	r3, [pc, #376]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d036      	beq.n	800512c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d019      	beq.n	80050fa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050c6:	4b56      	ldr	r3, [pc, #344]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 80050c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ca:	4a55      	ldr	r2, [pc, #340]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d2:	f7fd fecf 	bl	8002e74 <HAL_GetTick>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050da:	f7fd fecb 	bl	8002e74 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e219      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050ec:	4b4c      	ldr	r3, [pc, #304]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 80050ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <HAL_RCC_OscConfig+0x35e>
 80050f8:	e018      	b.n	800512c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050fa:	4b49      	ldr	r3, [pc, #292]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 80050fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050fe:	4a48      	ldr	r2, [pc, #288]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005106:	f7fd feb5 	bl	8002e74 <HAL_GetTick>
 800510a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510e:	f7fd feb1 	bl	8002e74 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e1ff      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005120:	4b3f      	ldr	r3, [pc, #252]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1f0      	bne.n	800510e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d036      	beq.n	80051a6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d019      	beq.n	8005174 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005140:	4b37      	ldr	r3, [pc, #220]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a36      	ldr	r2, [pc, #216]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005146:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800514a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800514c:	f7fd fe92 	bl	8002e74 <HAL_GetTick>
 8005150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005154:	f7fd fe8e 	bl	8002e74 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e1dc      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005166:	4b2e      	ldr	r3, [pc, #184]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x3d8>
 8005172:	e018      	b.n	80051a6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005174:	4b2a      	ldr	r3, [pc, #168]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a29      	ldr	r2, [pc, #164]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 800517a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800517e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005180:	f7fd fe78 	bl	8002e74 <HAL_GetTick>
 8005184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005188:	f7fd fe74 	bl	8002e74 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e1c2      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800519a:	4b21      	ldr	r3, [pc, #132]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8086 	beq.w	80052c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051b4:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <HAL_RCC_OscConfig+0x4a8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1a      	ldr	r2, [pc, #104]	; (8005224 <HAL_RCC_OscConfig+0x4a8>)
 80051ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051c0:	f7fd fe58 	bl	8002e74 <HAL_GetTick>
 80051c4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c8:	f7fd fe54 	bl	8002e74 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	; 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e1a2      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <HAL_RCC_OscConfig+0x4a8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d106      	bne.n	80051fc <HAL_RCC_OscConfig+0x480>
 80051ee:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f2:	4a0b      	ldr	r2, [pc, #44]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	6713      	str	r3, [r2, #112]	; 0x70
 80051fa:	e032      	b.n	8005262 <HAL_RCC_OscConfig+0x4e6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d111      	bne.n	8005228 <HAL_RCC_OscConfig+0x4ac>
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	4a05      	ldr	r2, [pc, #20]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 800520a:	f023 0301 	bic.w	r3, r3, #1
 800520e:	6713      	str	r3, [r2, #112]	; 0x70
 8005210:	4b03      	ldr	r3, [pc, #12]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	4a02      	ldr	r2, [pc, #8]	; (8005220 <HAL_RCC_OscConfig+0x4a4>)
 8005216:	f023 0304 	bic.w	r3, r3, #4
 800521a:	6713      	str	r3, [r2, #112]	; 0x70
 800521c:	e021      	b.n	8005262 <HAL_RCC_OscConfig+0x4e6>
 800521e:	bf00      	nop
 8005220:	58024400 	.word	0x58024400
 8005224:	58024800 	.word	0x58024800
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2b05      	cmp	r3, #5
 800522e:	d10c      	bne.n	800524a <HAL_RCC_OscConfig+0x4ce>
 8005230:	4b83      	ldr	r3, [pc, #524]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	4a82      	ldr	r2, [pc, #520]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005236:	f043 0304 	orr.w	r3, r3, #4
 800523a:	6713      	str	r3, [r2, #112]	; 0x70
 800523c:	4b80      	ldr	r3, [pc, #512]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	4a7f      	ldr	r2, [pc, #508]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	6713      	str	r3, [r2, #112]	; 0x70
 8005248:	e00b      	b.n	8005262 <HAL_RCC_OscConfig+0x4e6>
 800524a:	4b7d      	ldr	r3, [pc, #500]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	4a7c      	ldr	r2, [pc, #496]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	6713      	str	r3, [r2, #112]	; 0x70
 8005256:	4b7a      	ldr	r3, [pc, #488]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	4a79      	ldr	r2, [pc, #484]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 800525c:	f023 0304 	bic.w	r3, r3, #4
 8005260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d015      	beq.n	8005296 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526a:	f7fd fe03 	bl	8002e74 <HAL_GetTick>
 800526e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005270:	e00a      	b.n	8005288 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005272:	f7fd fdff 	bl	8002e74 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005280:	4293      	cmp	r3, r2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e14b      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005288:	4b6d      	ldr	r3, [pc, #436]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ee      	beq.n	8005272 <HAL_RCC_OscConfig+0x4f6>
 8005294:	e014      	b.n	80052c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005296:	f7fd fded 	bl	8002e74 <HAL_GetTick>
 800529a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800529c:	e00a      	b.n	80052b4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529e:	f7fd fde9 	bl	8002e74 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e135      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052b4:	4b62      	ldr	r3, [pc, #392]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1ee      	bne.n	800529e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 812a 	beq.w	800551e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052ca:	4b5d      	ldr	r3, [pc, #372]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d2:	2b18      	cmp	r3, #24
 80052d4:	f000 80ba 	beq.w	800544c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b02      	cmp	r3, #2
 80052de:	f040 8095 	bne.w	800540c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e2:	4b57      	ldr	r3, [pc, #348]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a56      	ldr	r2, [pc, #344]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80052e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ee:	f7fd fdc1 	bl	8002e74 <HAL_GetTick>
 80052f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fd fdbd 	bl	8002e74 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e10b      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005308:	4b4d      	ldr	r3, [pc, #308]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005314:	4b4a      	ldr	r3, [pc, #296]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005318:	4b4a      	ldr	r3, [pc, #296]	; (8005444 <HAL_RCC_OscConfig+0x6c8>)
 800531a:	4013      	ands	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005324:	0112      	lsls	r2, r2, #4
 8005326:	430a      	orrs	r2, r1
 8005328:	4945      	ldr	r1, [pc, #276]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	628b      	str	r3, [r1, #40]	; 0x28
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	3b01      	subs	r3, #1
 8005334:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	3b01      	subs	r3, #1
 800533e:	025b      	lsls	r3, r3, #9
 8005340:	b29b      	uxth	r3, r3
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	3b01      	subs	r3, #1
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	3b01      	subs	r3, #1
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800535e:	4938      	ldr	r1, [pc, #224]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005360:	4313      	orrs	r3, r2
 8005362:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005364:	4b36      	ldr	r3, [pc, #216]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	4a35      	ldr	r2, [pc, #212]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005370:	4b33      	ldr	r3, [pc, #204]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005374:	4b34      	ldr	r3, [pc, #208]	; (8005448 <HAL_RCC_OscConfig+0x6cc>)
 8005376:	4013      	ands	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800537c:	00d2      	lsls	r2, r2, #3
 800537e:	4930      	ldr	r1, [pc, #192]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005380:	4313      	orrs	r3, r2
 8005382:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005384:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	f023 020c 	bic.w	r2, r3, #12
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	492b      	ldr	r1, [pc, #172]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005396:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	f023 0202 	bic.w	r2, r3, #2
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	4927      	ldr	r1, [pc, #156]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053a8:	4b25      	ldr	r3, [pc, #148]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	4a24      	ldr	r2, [pc, #144]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b4:	4b22      	ldr	r3, [pc, #136]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	4a21      	ldr	r2, [pc, #132]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053c0:	4b1f      	ldr	r3, [pc, #124]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053cc:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a1b      	ldr	r2, [pc, #108]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053d2:	f043 0301 	orr.w	r3, r3, #1
 80053d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d8:	4b19      	ldr	r3, [pc, #100]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a18      	ldr	r2, [pc, #96]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 80053de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fd fd46 	bl	8002e74 <HAL_GetTick>
 80053e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ec:	f7fd fd42 	bl	8002e74 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e090      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053fe:	4b10      	ldr	r3, [pc, #64]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0x670>
 800540a:	e088      	b.n	800551e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fd fd2c 	bl	8002e74 <HAL_GetTick>
 800541c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005420:	f7fd fd28 	bl	8002e74 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e076      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005432:	4b03      	ldr	r3, [pc, #12]	; (8005440 <HAL_RCC_OscConfig+0x6c4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f0      	bne.n	8005420 <HAL_RCC_OscConfig+0x6a4>
 800543e:	e06e      	b.n	800551e <HAL_RCC_OscConfig+0x7a2>
 8005440:	58024400 	.word	0x58024400
 8005444:	fffffc0c 	.word	0xfffffc0c
 8005448:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800544c:	4b36      	ldr	r3, [pc, #216]	; (8005528 <HAL_RCC_OscConfig+0x7ac>)
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005452:	4b35      	ldr	r3, [pc, #212]	; (8005528 <HAL_RCC_OscConfig+0x7ac>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	2b01      	cmp	r3, #1
 800545e:	d031      	beq.n	80054c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f003 0203 	and.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800546a:	429a      	cmp	r2, r3
 800546c:	d12a      	bne.n	80054c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547a:	429a      	cmp	r2, r3
 800547c:	d122      	bne.n	80054c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d11a      	bne.n	80054c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	0a5b      	lsrs	r3, r3, #9
 8005492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d111      	bne.n	80054c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	0c1b      	lsrs	r3, r3, #16
 80054a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d108      	bne.n	80054c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	0e1b      	lsrs	r3, r3, #24
 80054b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e02b      	b.n	8005520 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <HAL_RCC_OscConfig+0x7ac>)
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	08db      	lsrs	r3, r3, #3
 80054ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d01f      	beq.n	800551e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054de:	4b12      	ldr	r3, [pc, #72]	; (8005528 <HAL_RCC_OscConfig+0x7ac>)
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	4a11      	ldr	r2, [pc, #68]	; (8005528 <HAL_RCC_OscConfig+0x7ac>)
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054ea:	f7fd fcc3 	bl	8002e74 <HAL_GetTick>
 80054ee:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054f0:	bf00      	nop
 80054f2:	f7fd fcbf 	bl	8002e74 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d0f9      	beq.n	80054f2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <HAL_RCC_OscConfig+0x7ac>)
 8005500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <HAL_RCC_OscConfig+0x7b0>)
 8005504:	4013      	ands	r3, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800550a:	00d2      	lsls	r2, r2, #3
 800550c:	4906      	ldr	r1, [pc, #24]	; (8005528 <HAL_RCC_OscConfig+0x7ac>)
 800550e:	4313      	orrs	r3, r2
 8005510:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCC_OscConfig+0x7ac>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	4a04      	ldr	r2, [pc, #16]	; (8005528 <HAL_RCC_OscConfig+0x7ac>)
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3730      	adds	r7, #48	; 0x30
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	58024400 	.word	0x58024400
 800552c:	ffff0007 	.word	0xffff0007

08005530 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e19c      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005544:	4b8a      	ldr	r3, [pc, #552]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d910      	bls.n	8005574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b87      	ldr	r3, [pc, #540]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 020f 	bic.w	r2, r3, #15
 800555a:	4985      	ldr	r1, [pc, #532]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005562:	4b83      	ldr	r3, [pc, #524]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e184      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	4b7b      	ldr	r3, [pc, #492]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800558c:	429a      	cmp	r2, r3
 800558e:	d908      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005590:	4b78      	ldr	r3, [pc, #480]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	4975      	ldr	r1, [pc, #468]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d010      	beq.n	80055d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	4b70      	ldr	r3, [pc, #448]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d908      	bls.n	80055d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055be:	4b6d      	ldr	r3, [pc, #436]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	496a      	ldr	r1, [pc, #424]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d010      	beq.n	80055fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699a      	ldr	r2, [r3, #24]
 80055e0:	4b64      	ldr	r3, [pc, #400]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d908      	bls.n	80055fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055ec:	4b61      	ldr	r3, [pc, #388]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	495e      	ldr	r1, [pc, #376]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d010      	beq.n	800562c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	4b59      	ldr	r3, [pc, #356]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005616:	429a      	cmp	r2, r3
 8005618:	d908      	bls.n	800562c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800561a:	4b56      	ldr	r3, [pc, #344]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	4953      	ldr	r1, [pc, #332]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005628:	4313      	orrs	r3, r2
 800562a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d010      	beq.n	800565a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	4b4d      	ldr	r3, [pc, #308]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	429a      	cmp	r2, r3
 8005646:	d908      	bls.n	800565a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005648:	4b4a      	ldr	r3, [pc, #296]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f023 020f 	bic.w	r2, r3, #15
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4947      	ldr	r1, [pc, #284]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005656:	4313      	orrs	r3, r2
 8005658:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d055      	beq.n	8005712 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005666:	4b43      	ldr	r3, [pc, #268]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4940      	ldr	r1, [pc, #256]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005674:	4313      	orrs	r3, r2
 8005676:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d107      	bne.n	8005690 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005680:	4b3c      	ldr	r3, [pc, #240]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d121      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0f6      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d107      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005698:	4b36      	ldr	r3, [pc, #216]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d115      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0ea      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056b0:	4b30      	ldr	r3, [pc, #192]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0de      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c0:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0d6      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d0:	4b28      	ldr	r3, [pc, #160]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f023 0207 	bic.w	r2, r3, #7
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4925      	ldr	r1, [pc, #148]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e2:	f7fd fbc7 	bl	8002e74 <HAL_GetTick>
 80056e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e8:	e00a      	b.n	8005700 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ea:	f7fd fbc3 	bl	8002e74 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e0be      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005700:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	429a      	cmp	r2, r3
 8005710:	d1eb      	bne.n	80056ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	4b14      	ldr	r3, [pc, #80]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	429a      	cmp	r2, r3
 800572c:	d208      	bcs.n	8005740 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f023 020f 	bic.w	r2, r3, #15
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	490e      	ldr	r1, [pc, #56]	; (8005774 <HAL_RCC_ClockConfig+0x244>)
 800573c:	4313      	orrs	r3, r2
 800573e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d214      	bcs.n	8005778 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574e:	4b08      	ldr	r3, [pc, #32]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f023 020f 	bic.w	r2, r3, #15
 8005756:	4906      	ldr	r1, [pc, #24]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	4313      	orrs	r3, r2
 800575c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800575e:	4b04      	ldr	r3, [pc, #16]	; (8005770 <HAL_RCC_ClockConfig+0x240>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d005      	beq.n	8005778 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e086      	b.n	800587e <HAL_RCC_ClockConfig+0x34e>
 8005770:	52002000 	.word	0x52002000
 8005774:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d010      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	4b3f      	ldr	r3, [pc, #252]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005790:	429a      	cmp	r2, r3
 8005792:	d208      	bcs.n	80057a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005794:	4b3c      	ldr	r3, [pc, #240]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	4939      	ldr	r1, [pc, #228]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	4b34      	ldr	r3, [pc, #208]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057be:	429a      	cmp	r2, r3
 80057c0:	d208      	bcs.n	80057d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057c2:	4b31      	ldr	r3, [pc, #196]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	492e      	ldr	r1, [pc, #184]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d010      	beq.n	8005802 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	4b28      	ldr	r3, [pc, #160]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d208      	bcs.n	8005802 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057f0:	4b25      	ldr	r3, [pc, #148]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	4922      	ldr	r1, [pc, #136]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d010      	beq.n	8005830 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800581a:	429a      	cmp	r2, r3
 800581c:	d208      	bcs.n	8005830 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800581e:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4917      	ldr	r1, [pc, #92]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 800582c:	4313      	orrs	r3, r2
 800582e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005830:	f000 f834 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8005834:	4602      	mov	r2, r0
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	0a1b      	lsrs	r3, r3, #8
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	4912      	ldr	r1, [pc, #72]	; (800588c <HAL_RCC_ClockConfig+0x35c>)
 8005842:	5ccb      	ldrb	r3, [r1, r3]
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800584e:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <HAL_RCC_ClockConfig+0x358>)
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	4a0d      	ldr	r2, [pc, #52]	; (800588c <HAL_RCC_ClockConfig+0x35c>)
 8005858:	5cd3      	ldrb	r3, [r2, r3]
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <HAL_RCC_ClockConfig+0x360>)
 8005866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005868:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <HAL_RCC_ClockConfig+0x364>)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800586e:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <HAL_RCC_ClockConfig+0x368>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd fab4 	bl	8002de0 <HAL_InitTick>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	58024400 	.word	0x58024400
 800588c:	0800ac38 	.word	0x0800ac38
 8005890:	24000004 	.word	0x24000004
 8005894:	24000000 	.word	0x24000000
 8005898:	24000008 	.word	0x24000008

0800589c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800589c:	b480      	push	{r7}
 800589e:	b089      	sub	sp, #36	; 0x24
 80058a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058a2:	4bb3      	ldr	r3, [pc, #716]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058aa:	2b18      	cmp	r3, #24
 80058ac:	f200 8155 	bhi.w	8005b5a <HAL_RCC_GetSysClockFreq+0x2be>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	0800591d 	.word	0x0800591d
 80058bc:	08005b5b 	.word	0x08005b5b
 80058c0:	08005b5b 	.word	0x08005b5b
 80058c4:	08005b5b 	.word	0x08005b5b
 80058c8:	08005b5b 	.word	0x08005b5b
 80058cc:	08005b5b 	.word	0x08005b5b
 80058d0:	08005b5b 	.word	0x08005b5b
 80058d4:	08005b5b 	.word	0x08005b5b
 80058d8:	08005943 	.word	0x08005943
 80058dc:	08005b5b 	.word	0x08005b5b
 80058e0:	08005b5b 	.word	0x08005b5b
 80058e4:	08005b5b 	.word	0x08005b5b
 80058e8:	08005b5b 	.word	0x08005b5b
 80058ec:	08005b5b 	.word	0x08005b5b
 80058f0:	08005b5b 	.word	0x08005b5b
 80058f4:	08005b5b 	.word	0x08005b5b
 80058f8:	08005949 	.word	0x08005949
 80058fc:	08005b5b 	.word	0x08005b5b
 8005900:	08005b5b 	.word	0x08005b5b
 8005904:	08005b5b 	.word	0x08005b5b
 8005908:	08005b5b 	.word	0x08005b5b
 800590c:	08005b5b 	.word	0x08005b5b
 8005910:	08005b5b 	.word	0x08005b5b
 8005914:	08005b5b 	.word	0x08005b5b
 8005918:	0800594f 	.word	0x0800594f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800591c:	4b94      	ldr	r3, [pc, #592]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005928:	4b91      	ldr	r3, [pc, #580]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	08db      	lsrs	r3, r3, #3
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	4a90      	ldr	r2, [pc, #576]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800593a:	e111      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800593c:	4b8d      	ldr	r3, [pc, #564]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800593e:	61bb      	str	r3, [r7, #24]
      break;
 8005940:	e10e      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005942:	4b8d      	ldr	r3, [pc, #564]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005944:	61bb      	str	r3, [r7, #24]
      break;
 8005946:	e10b      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005948:	4b8c      	ldr	r3, [pc, #560]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800594a:	61bb      	str	r3, [r7, #24]
      break;
 800594c:	e108      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800594e:	4b88      	ldr	r3, [pc, #544]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005958:	4b85      	ldr	r3, [pc, #532]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005962:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005964:	4b82      	ldr	r3, [pc, #520]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800596e:	4b80      	ldr	r3, [pc, #512]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	08db      	lsrs	r3, r3, #3
 8005974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80e1 	beq.w	8005b54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b02      	cmp	r3, #2
 8005996:	f000 8083 	beq.w	8005aa0 <HAL_RCC_GetSysClockFreq+0x204>
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b02      	cmp	r3, #2
 800599e:	f200 80a1 	bhi.w	8005ae4 <HAL_RCC_GetSysClockFreq+0x248>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_RCC_GetSysClockFreq+0x114>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d056      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x1c0>
 80059ae:	e099      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b0:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02d      	beq.n	8005a18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059bc:	4b6c      	ldr	r3, [pc, #432]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	4a6b      	ldr	r2, [pc, #428]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
 80059cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e6:	4b62      	ldr	r3, [pc, #392]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a16:	e087      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2a:	4b51      	ldr	r3, [pc, #324]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a5a:	e065      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6e:	4b40      	ldr	r3, [pc, #256]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a9e:	e043      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab2:	4b2f      	ldr	r3, [pc, #188]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ac6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ade:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ae2:	e021      	b.n	8005b28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af6:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	0a5b      	lsrs	r3, r3, #9
 8005b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b32:	3301      	adds	r3, #1
 8005b34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	ee07 3a90 	vmov	s15, r3
 8005b3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b4c:	ee17 3a90 	vmov	r3, s15
 8005b50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b52:	e005      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61bb      	str	r3, [r7, #24]
      break;
 8005b58:	e002      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b5c:	61bb      	str	r3, [r7, #24]
      break;
 8005b5e:	bf00      	nop
  }

  return sysclockfreq;
 8005b60:	69bb      	ldr	r3, [r7, #24]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3724      	adds	r7, #36	; 0x24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	58024400 	.word	0x58024400
 8005b74:	03d09000 	.word	0x03d09000
 8005b78:	003d0900 	.word	0x003d0900
 8005b7c:	007a1200 	.word	0x007a1200
 8005b80:	46000000 	.word	0x46000000
 8005b84:	4c742400 	.word	0x4c742400
 8005b88:	4a742400 	.word	0x4a742400
 8005b8c:	4af42400 	.word	0x4af42400

08005b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b96:	f7ff fe81 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	490f      	ldr	r1, [pc, #60]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ba8:	5ccb      	ldrb	r3, [r1, r3]
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bbe:	5cd3      	ldrb	r3, [r2, r3]
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bca:	4a07      	ldr	r2, [pc, #28]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bce:	4a07      	ldr	r2, [pc, #28]	; (8005bec <HAL_RCC_GetHCLKFreq+0x5c>)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	58024400 	.word	0x58024400
 8005be4:	0800ac38 	.word	0x0800ac38
 8005be8:	24000004 	.word	0x24000004
 8005bec:	24000000 	.word	0x24000000

08005bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005bf4:	f7ff ffcc 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	4904      	ldr	r1, [pc, #16]	; (8005c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	58024400 	.word	0x58024400
 8005c18:	0800ac38 	.word	0x0800ac38

08005c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c20:	f7ff ffb6 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	4904      	ldr	r1, [pc, #16]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c32:	5ccb      	ldrb	r3, [r1, r3]
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	58024400 	.word	0x58024400
 8005c44:	0800ac38 	.word	0x0800ac38

08005c48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c4c:	b0c6      	sub	sp, #280	; 0x118
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c54:	2300      	movs	r3, #0
 8005c56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005c6c:	2500      	movs	r5, #0
 8005c6e:	ea54 0305 	orrs.w	r3, r4, r5
 8005c72:	d049      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c7e:	d02f      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c84:	d828      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c8a:	d01a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c90:	d822      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9a:	d007      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c9c:	e01c      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9e:	4bab      	ldr	r3, [pc, #684]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	4aaa      	ldr	r2, [pc, #680]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005caa:	e01a      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f002 fa49 	bl	800814c <RCCEx_PLL2_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cc0:	e00f      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc6:	3328      	adds	r3, #40	; 0x28
 8005cc8:	2102      	movs	r1, #2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f002 faf0 	bl	80082b0 <RCCEx_PLL3_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cd6:	e004      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cde:	e000      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005cea:	4b98      	ldr	r3, [pc, #608]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf8:	4a94      	ldr	r2, [pc, #592]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cfa:	430b      	orrs	r3, r1
 8005cfc:	6513      	str	r3, [r2, #80]	; 0x50
 8005cfe:	e003      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005d14:	f04f 0900 	mov.w	r9, #0
 8005d18:	ea58 0309 	orrs.w	r3, r8, r9
 8005d1c:	d047      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d82a      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d45 	.word	0x08005d45
 8005d34:	08005d53 	.word	0x08005d53
 8005d38:	08005d69 	.word	0x08005d69
 8005d3c:	08005d87 	.word	0x08005d87
 8005d40:	08005d87 	.word	0x08005d87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d44:	4b81      	ldr	r3, [pc, #516]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a80      	ldr	r2, [pc, #512]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d50:	e01a      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d56:	3308      	adds	r3, #8
 8005d58:	2100      	movs	r1, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f002 f9f6 	bl	800814c <RCCEx_PLL2_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d66:	e00f      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6c:	3328      	adds	r3, #40	; 0x28
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f002 fa9d 	bl	80082b0 <RCCEx_PLL3_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d7c:	e004      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d84:	e000      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d90:	4b6e      	ldr	r3, [pc, #440]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	f023 0107 	bic.w	r1, r3, #7
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	4a6b      	ldr	r2, [pc, #428]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6513      	str	r3, [r2, #80]	; 0x50
 8005da4:	e003      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005daa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005dba:	f04f 0b00 	mov.w	fp, #0
 8005dbe:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dc2:	d05b      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dcc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005dd0:	d03b      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005dd2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005dd6:	d834      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005dd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ddc:	d037      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005dde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005de2:	d82e      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005de4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005de8:	d033      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005dea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005dee:	d828      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005df4:	d01a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dfa:	d822      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005e00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e04:	d007      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005e06:	e01c      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e08:	4b50      	ldr	r3, [pc, #320]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	4a4f      	ldr	r2, [pc, #316]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e14:	e01e      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f002 f994 	bl	800814c <RCCEx_PLL2_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e2a:	e013      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e30:	3328      	adds	r3, #40	; 0x28
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f002 fa3b 	bl	80082b0 <RCCEx_PLL3_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e40:	e008      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e48:	e004      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e4a:	bf00      	nop
 8005e4c:	e002      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e5c:	4b3b      	ldr	r3, [pc, #236]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e6c:	4a37      	ldr	r2, [pc, #220]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e6e:	430b      	orrs	r3, r1
 8005e70:	6593      	str	r3, [r2, #88]	; 0x58
 8005e72:	e003      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005e96:	460b      	mov	r3, r1
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	d05d      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ea4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005ea8:	d03b      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005eaa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005eae:	d834      	bhi.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eb4:	d037      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eba:	d82e      	bhi.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ebc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ec0:	d033      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005ec2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ec6:	d828      	bhi.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ecc:	d01a      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ed2:	d822      	bhi.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005edc:	d007      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005ede:	e01c      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eec:	e01e      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f002 f928 	bl	800814c <RCCEx_PLL2_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f02:	e013      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f08:	3328      	adds	r3, #40	; 0x28
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f002 f9cf 	bl	80082b0 <RCCEx_PLL3_Config>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f18:	e008      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f20:	e004      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f22:	bf00      	nop
 8005f24:	e002      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f26:	bf00      	nop
 8005f28:	e000      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10d      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f38:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f44:	4a01      	ldr	r2, [pc, #4]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f46:	430b      	orrs	r3, r1
 8005f48:	6593      	str	r3, [r2, #88]	; 0x58
 8005f4a:	e005      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005f64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f6e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4313      	orrs	r3, r2
 8005f76:	d03a      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f7e:	2b30      	cmp	r3, #48	; 0x30
 8005f80:	d01f      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005f82:	2b30      	cmp	r3, #48	; 0x30
 8005f84:	d819      	bhi.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	d00c      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	d815      	bhi.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d019      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f92:	2b10      	cmp	r3, #16
 8005f94:	d111      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f96:	4baa      	ldr	r3, [pc, #680]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	4aa9      	ldr	r2, [pc, #676]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005fa2:	e011      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa8:	3308      	adds	r3, #8
 8005faa:	2102      	movs	r1, #2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f002 f8cd 	bl	800814c <RCCEx_PLL2_Config>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005fb8:	e006      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005fc0:	e002      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005fd0:	4b9b      	ldr	r3, [pc, #620]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fde:	4a98      	ldr	r2, [pc, #608]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fe4:	e003      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ffe:	2300      	movs	r3, #0
 8006000:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006004:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006008:	460b      	mov	r3, r1
 800600a:	4313      	orrs	r3, r2
 800600c:	d051      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006018:	d035      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800601a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800601e:	d82e      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006020:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006024:	d031      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006026:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800602a:	d828      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800602c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006030:	d01a      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006036:	d822      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800603c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006040:	d007      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006042:	e01c      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006044:	4b7e      	ldr	r3, [pc, #504]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	4a7d      	ldr	r2, [pc, #500]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800604a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800604e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006050:	e01c      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006056:	3308      	adds	r3, #8
 8006058:	2100      	movs	r1, #0
 800605a:	4618      	mov	r0, r3
 800605c:	f002 f876 	bl	800814c <RCCEx_PLL2_Config>
 8006060:	4603      	mov	r3, r0
 8006062:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006066:	e011      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606c:	3328      	adds	r3, #40	; 0x28
 800606e:	2100      	movs	r1, #0
 8006070:	4618      	mov	r0, r3
 8006072:	f002 f91d 	bl	80082b0 <RCCEx_PLL3_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800607c:	e006      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006084:	e002      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006086:	bf00      	nop
 8006088:	e000      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800608a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800608c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006094:	4b6a      	ldr	r3, [pc, #424]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006098:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800609c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a2:	4a67      	ldr	r2, [pc, #412]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060a4:	430b      	orrs	r3, r1
 80060a6:	6513      	str	r3, [r2, #80]	; 0x50
 80060a8:	e003      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80060be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060c2:	2300      	movs	r3, #0
 80060c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4313      	orrs	r3, r2
 80060d0:	d053      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060dc:	d033      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80060de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060e2:	d82c      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060e8:	d02f      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80060ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060ee:	d826      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060f4:	d02b      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80060f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060fa:	d820      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006100:	d012      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006106:	d81a      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d022      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800610c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006110:	d115      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006116:	3308      	adds	r3, #8
 8006118:	2101      	movs	r1, #1
 800611a:	4618      	mov	r0, r3
 800611c:	f002 f816 	bl	800814c <RCCEx_PLL2_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006126:	e015      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612c:	3328      	adds	r3, #40	; 0x28
 800612e:	2101      	movs	r1, #1
 8006130:	4618      	mov	r0, r3
 8006132:	f002 f8bd 	bl	80082b0 <RCCEx_PLL3_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800613c:	e00a      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006144:	e006      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006146:	bf00      	nop
 8006148:	e004      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800614a:	bf00      	nop
 800614c:	e002      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800614e:	bf00      	nop
 8006150:	e000      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006154:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800615c:	4b38      	ldr	r3, [pc, #224]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800615e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006160:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616a:	4a35      	ldr	r2, [pc, #212]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800616c:	430b      	orrs	r3, r1
 800616e:	6513      	str	r3, [r2, #80]	; 0x50
 8006170:	e003      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006176:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800618a:	2300      	movs	r3, #0
 800618c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006190:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006194:	460b      	mov	r3, r1
 8006196:	4313      	orrs	r3, r2
 8006198:	d058      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061a6:	d033      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80061a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061ac:	d82c      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b2:	d02f      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b8:	d826      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061be:	d02b      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80061c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061c4:	d820      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ca:	d012      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80061cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d0:	d81a      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d022      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80061d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061da:	d115      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e0:	3308      	adds	r3, #8
 80061e2:	2101      	movs	r1, #1
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 ffb1 	bl	800814c <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061f0:	e015      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f6:	3328      	adds	r3, #40	; 0x28
 80061f8:	2101      	movs	r1, #1
 80061fa:	4618      	mov	r0, r3
 80061fc:	f002 f858 	bl	80082b0 <RCCEx_PLL3_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006206:	e00a      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800620e:	e006      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006210:	bf00      	nop
 8006212:	e004      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006214:	bf00      	nop
 8006216:	e002      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006218:	bf00      	nop
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800621c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10e      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006226:	4b06      	ldr	r3, [pc, #24]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800622e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006236:	4a02      	ldr	r2, [pc, #8]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006238:	430b      	orrs	r3, r1
 800623a:	6593      	str	r3, [r2, #88]	; 0x58
 800623c:	e006      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800623e:	bf00      	nop
 8006240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006244:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006248:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800625c:	2300      	movs	r3, #0
 800625e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006262:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006266:	460b      	mov	r3, r1
 8006268:	4313      	orrs	r3, r2
 800626a:	d037      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006276:	d00e      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800627c:	d816      	bhi.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d018      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006286:	d111      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006288:	4bc4      	ldr	r3, [pc, #784]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	4ac3      	ldr	r2, [pc, #780]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800628e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006294:	e00f      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629a:	3308      	adds	r3, #8
 800629c:	2101      	movs	r1, #1
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 ff54 	bl	800814c <RCCEx_PLL2_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062aa:	e004      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80062b2:	e000      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80062b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062be:	4bb7      	ldr	r3, [pc, #732]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80062c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062cc:	4ab3      	ldr	r2, [pc, #716]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ce:	430b      	orrs	r3, r1
 80062d0:	6513      	str	r3, [r2, #80]	; 0x50
 80062d2:	e003      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80062e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062ec:	2300      	movs	r3, #0
 80062ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80062f6:	460b      	mov	r3, r1
 80062f8:	4313      	orrs	r3, r2
 80062fa:	d039      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006302:	2b03      	cmp	r3, #3
 8006304:	d81c      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006349 	.word	0x08006349
 8006310:	0800631d 	.word	0x0800631d
 8006314:	0800632b 	.word	0x0800632b
 8006318:	08006349 	.word	0x08006349
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800631c:	4b9f      	ldr	r3, [pc, #636]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	4a9e      	ldr	r2, [pc, #632]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006328:	e00f      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800632a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632e:	3308      	adds	r3, #8
 8006330:	2102      	movs	r1, #2
 8006332:	4618      	mov	r0, r3
 8006334:	f001 ff0a 	bl	800814c <RCCEx_PLL2_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800633e:	e004      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006346:	e000      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006352:	4b92      	ldr	r3, [pc, #584]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006356:	f023 0103 	bic.w	r1, r3, #3
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006360:	4a8e      	ldr	r2, [pc, #568]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006362:	430b      	orrs	r3, r1
 8006364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006366:	e003      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800636c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800637c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006380:	2300      	movs	r3, #0
 8006382:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006386:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800638a:	460b      	mov	r3, r1
 800638c:	4313      	orrs	r3, r2
 800638e:	f000 8099 	beq.w	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006392:	4b83      	ldr	r3, [pc, #524]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a82      	ldr	r2, [pc, #520]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800639c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800639e:	f7fc fd69 	bl	8002e74 <HAL_GetTick>
 80063a2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063a6:	e00b      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a8:	f7fc fd64 	bl	8002e74 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b64      	cmp	r3, #100	; 0x64
 80063b6:	d903      	bls.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80063be:	e005      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063c0:	4b77      	ldr	r3, [pc, #476]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0ed      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80063cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d173      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80063d4:	4b71      	ldr	r3, [pc, #452]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063e0:	4053      	eors	r3, r2
 80063e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d015      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063ea:	4b6c      	ldr	r3, [pc, #432]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063f6:	4b69      	ldr	r3, [pc, #420]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	4a68      	ldr	r2, [pc, #416]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006400:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006402:	4b66      	ldr	r3, [pc, #408]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	4a65      	ldr	r2, [pc, #404]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800640e:	4a63      	ldr	r2, [pc, #396]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006414:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800641e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006422:	d118      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fc fd26 	bl	8002e74 <HAL_GetTick>
 8006428:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800642c:	e00d      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800642e:	f7fc fd21 	bl	8002e74 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006438:	1ad2      	subs	r2, r2, r3
 800643a:	f241 3388 	movw	r3, #5000	; 0x1388
 800643e:	429a      	cmp	r2, r3
 8006440:	d903      	bls.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006448:	e005      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800644a:	4b54      	ldr	r3, [pc, #336]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0eb      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006456:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800645a:	2b00      	cmp	r3, #0
 800645c:	d129      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800645e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006462:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800646e:	d10e      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006470:	4b4a      	ldr	r3, [pc, #296]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006480:	091a      	lsrs	r2, r3, #4
 8006482:	4b48      	ldr	r3, [pc, #288]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006484:	4013      	ands	r3, r2
 8006486:	4a45      	ldr	r2, [pc, #276]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006488:	430b      	orrs	r3, r1
 800648a:	6113      	str	r3, [r2, #16]
 800648c:	e005      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800648e:	4b43      	ldr	r3, [pc, #268]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	4a42      	ldr	r2, [pc, #264]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006494:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006498:	6113      	str	r3, [r2, #16]
 800649a:	4b40      	ldr	r3, [pc, #256]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800649c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064aa:	4a3c      	ldr	r2, [pc, #240]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064ac:	430b      	orrs	r3, r1
 80064ae:	6713      	str	r3, [r2, #112]	; 0x70
 80064b0:	e008      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80064ba:	e003      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f002 0301 	and.w	r3, r2, #1
 80064d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064d4:	2300      	movs	r3, #0
 80064d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80064de:	460b      	mov	r3, r1
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f000 808f 	beq.w	8006604 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ec:	2b28      	cmp	r3, #40	; 0x28
 80064ee:	d871      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80064f0:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	080065dd 	.word	0x080065dd
 80064fc:	080065d5 	.word	0x080065d5
 8006500:	080065d5 	.word	0x080065d5
 8006504:	080065d5 	.word	0x080065d5
 8006508:	080065d5 	.word	0x080065d5
 800650c:	080065d5 	.word	0x080065d5
 8006510:	080065d5 	.word	0x080065d5
 8006514:	080065d5 	.word	0x080065d5
 8006518:	080065a9 	.word	0x080065a9
 800651c:	080065d5 	.word	0x080065d5
 8006520:	080065d5 	.word	0x080065d5
 8006524:	080065d5 	.word	0x080065d5
 8006528:	080065d5 	.word	0x080065d5
 800652c:	080065d5 	.word	0x080065d5
 8006530:	080065d5 	.word	0x080065d5
 8006534:	080065d5 	.word	0x080065d5
 8006538:	080065bf 	.word	0x080065bf
 800653c:	080065d5 	.word	0x080065d5
 8006540:	080065d5 	.word	0x080065d5
 8006544:	080065d5 	.word	0x080065d5
 8006548:	080065d5 	.word	0x080065d5
 800654c:	080065d5 	.word	0x080065d5
 8006550:	080065d5 	.word	0x080065d5
 8006554:	080065d5 	.word	0x080065d5
 8006558:	080065dd 	.word	0x080065dd
 800655c:	080065d5 	.word	0x080065d5
 8006560:	080065d5 	.word	0x080065d5
 8006564:	080065d5 	.word	0x080065d5
 8006568:	080065d5 	.word	0x080065d5
 800656c:	080065d5 	.word	0x080065d5
 8006570:	080065d5 	.word	0x080065d5
 8006574:	080065d5 	.word	0x080065d5
 8006578:	080065dd 	.word	0x080065dd
 800657c:	080065d5 	.word	0x080065d5
 8006580:	080065d5 	.word	0x080065d5
 8006584:	080065d5 	.word	0x080065d5
 8006588:	080065d5 	.word	0x080065d5
 800658c:	080065d5 	.word	0x080065d5
 8006590:	080065d5 	.word	0x080065d5
 8006594:	080065d5 	.word	0x080065d5
 8006598:	080065dd 	.word	0x080065dd
 800659c:	58024400 	.word	0x58024400
 80065a0:	58024800 	.word	0x58024800
 80065a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ac:	3308      	adds	r3, #8
 80065ae:	2101      	movs	r1, #1
 80065b0:	4618      	mov	r0, r3
 80065b2:	f001 fdcb 	bl	800814c <RCCEx_PLL2_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065bc:	e00f      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c2:	3328      	adds	r3, #40	; 0x28
 80065c4:	2101      	movs	r1, #1
 80065c6:	4618      	mov	r0, r3
 80065c8:	f001 fe72 	bl	80082b0 <RCCEx_PLL3_Config>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065d2:	e004      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065da:	e000      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80065dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10a      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80065e6:	4bbf      	ldr	r3, [pc, #764]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065f4:	4abb      	ldr	r2, [pc, #748]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6553      	str	r3, [r2, #84]	; 0x54
 80065fa:	e003      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006600:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f002 0302 	and.w	r3, r2, #2
 8006610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006614:	2300      	movs	r3, #0
 8006616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800661a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800661e:	460b      	mov	r3, r1
 8006620:	4313      	orrs	r3, r2
 8006622:	d041      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800662a:	2b05      	cmp	r3, #5
 800662c:	d824      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800662e:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	08006681 	.word	0x08006681
 8006638:	0800664d 	.word	0x0800664d
 800663c:	08006663 	.word	0x08006663
 8006640:	08006681 	.word	0x08006681
 8006644:	08006681 	.word	0x08006681
 8006648:	08006681 	.word	0x08006681
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800664c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006650:	3308      	adds	r3, #8
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f001 fd79 	bl	800814c <RCCEx_PLL2_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006660:	e00f      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006666:	3328      	adds	r3, #40	; 0x28
 8006668:	2101      	movs	r1, #1
 800666a:	4618      	mov	r0, r3
 800666c:	f001 fe20 	bl	80082b0 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006676:	e004      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006682:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800668a:	4b96      	ldr	r3, [pc, #600]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800668c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668e:	f023 0107 	bic.w	r1, r3, #7
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006698:	4a92      	ldr	r2, [pc, #584]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800669a:	430b      	orrs	r3, r1
 800669c:	6553      	str	r3, [r2, #84]	; 0x54
 800669e:	e003      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f002 0304 	and.w	r3, r2, #4
 80066b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066b8:	2300      	movs	r3, #0
 80066ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066c2:	460b      	mov	r3, r1
 80066c4:	4313      	orrs	r3, r2
 80066c6:	d044      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d0:	2b05      	cmp	r3, #5
 80066d2:	d825      	bhi.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80066d4:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	08006729 	.word	0x08006729
 80066e0:	080066f5 	.word	0x080066f5
 80066e4:	0800670b 	.word	0x0800670b
 80066e8:	08006729 	.word	0x08006729
 80066ec:	08006729 	.word	0x08006729
 80066f0:	08006729 	.word	0x08006729
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f8:	3308      	adds	r3, #8
 80066fa:	2101      	movs	r1, #1
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 fd25 	bl	800814c <RCCEx_PLL2_Config>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006708:	e00f      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670e:	3328      	adds	r3, #40	; 0x28
 8006710:	2101      	movs	r1, #1
 8006712:	4618      	mov	r0, r3
 8006714:	f001 fdcc 	bl	80082b0 <RCCEx_PLL3_Config>
 8006718:	4603      	mov	r3, r0
 800671a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800671e:	e004      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006726:	e000      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800672a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006732:	4b6c      	ldr	r3, [pc, #432]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006736:	f023 0107 	bic.w	r1, r3, #7
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006742:	4a68      	ldr	r2, [pc, #416]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006744:	430b      	orrs	r3, r1
 8006746:	6593      	str	r3, [r2, #88]	; 0x58
 8006748:	e003      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800674e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f002 0320 	and.w	r3, r2, #32
 800675e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006762:	2300      	movs	r3, #0
 8006764:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006768:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800676c:	460b      	mov	r3, r1
 800676e:	4313      	orrs	r3, r2
 8006770:	d055      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800677a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800677e:	d033      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006784:	d82c      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678a:	d02f      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800678c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006790:	d826      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006792:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006796:	d02b      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006798:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800679c:	d820      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800679e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a2:	d012      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80067a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a8:	d81a      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d022      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80067ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067b2:	d115      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b8:	3308      	adds	r3, #8
 80067ba:	2100      	movs	r1, #0
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fcc5 	bl	800814c <RCCEx_PLL2_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067c8:	e015      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ce:	3328      	adds	r3, #40	; 0x28
 80067d0:	2102      	movs	r1, #2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f001 fd6c 	bl	80082b0 <RCCEx_PLL3_Config>
 80067d8:	4603      	mov	r3, r0
 80067da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067de:	e00a      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80067e6:	e006      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067e8:	bf00      	nop
 80067ea:	e004      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067ec:	bf00      	nop
 80067ee:	e002      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067f0:	bf00      	nop
 80067f2:	e000      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10b      	bne.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067fe:	4b39      	ldr	r3, [pc, #228]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800680e:	4a35      	ldr	r2, [pc, #212]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006810:	430b      	orrs	r3, r1
 8006812:	6553      	str	r3, [r2, #84]	; 0x54
 8006814:	e003      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006816:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800681a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800682a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800682e:	2300      	movs	r3, #0
 8006830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006834:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006838:	460b      	mov	r3, r1
 800683a:	4313      	orrs	r3, r2
 800683c:	d058      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800683e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006846:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800684a:	d033      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800684c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006850:	d82c      	bhi.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006856:	d02f      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685c:	d826      	bhi.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800685e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006862:	d02b      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006868:	d820      	bhi.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800686a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686e:	d012      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006874:	d81a      	bhi.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d022      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687e:	d115      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006884:	3308      	adds	r3, #8
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f001 fc5f 	bl	800814c <RCCEx_PLL2_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006894:	e015      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689a:	3328      	adds	r3, #40	; 0x28
 800689c:	2102      	movs	r1, #2
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 fd06 	bl	80082b0 <RCCEx_PLL3_Config>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068aa:	e00a      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80068b2:	e006      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068b4:	bf00      	nop
 80068b6:	e004      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068b8:	bf00      	nop
 80068ba:	e002      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068bc:	bf00      	nop
 80068be:	e000      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10e      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80068d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068da:	4a02      	ldr	r2, [pc, #8]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	6593      	str	r3, [r2, #88]	; 0x58
 80068e0:	e006      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80068e2:	bf00      	nop
 80068e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80068fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006900:	2300      	movs	r3, #0
 8006902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006906:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800690a:	460b      	mov	r3, r1
 800690c:	4313      	orrs	r3, r2
 800690e:	d055      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006918:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800691c:	d033      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800691e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006922:	d82c      	bhi.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006928:	d02f      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800692a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692e:	d826      	bhi.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006930:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006934:	d02b      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006936:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800693a:	d820      	bhi.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800693c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006940:	d012      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006946:	d81a      	bhi.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006948:	2b00      	cmp	r3, #0
 800694a:	d022      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800694c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006950:	d115      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006956:	3308      	adds	r3, #8
 8006958:	2100      	movs	r1, #0
 800695a:	4618      	mov	r0, r3
 800695c:	f001 fbf6 	bl	800814c <RCCEx_PLL2_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006966:	e015      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696c:	3328      	adds	r3, #40	; 0x28
 800696e:	2102      	movs	r1, #2
 8006970:	4618      	mov	r0, r3
 8006972:	f001 fc9d 	bl	80082b0 <RCCEx_PLL3_Config>
 8006976:	4603      	mov	r3, r0
 8006978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800697c:	e00a      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006984:	e006      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006986:	bf00      	nop
 8006988:	e004      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800698a:	bf00      	nop
 800698c:	e002      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800698e:	bf00      	nop
 8006990:	e000      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006994:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10b      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800699c:	4ba0      	ldr	r3, [pc, #640]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800699e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ac:	4a9c      	ldr	r2, [pc, #624]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ae:	430b      	orrs	r3, r1
 80069b0:	6593      	str	r3, [r2, #88]	; 0x58
 80069b2:	e003      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f002 0308 	and.w	r3, r2, #8
 80069c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069cc:	2300      	movs	r3, #0
 80069ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80069d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80069d6:	460b      	mov	r3, r1
 80069d8:	4313      	orrs	r3, r2
 80069da:	d01e      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e8:	d10c      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ee:	3328      	adds	r3, #40	; 0x28
 80069f0:	2102      	movs	r1, #2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 fc5c 	bl	80082b0 <RCCEx_PLL3_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006a04:	4b86      	ldr	r3, [pc, #536]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a14:	4a82      	ldr	r2, [pc, #520]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a16:	430b      	orrs	r3, r1
 8006a18:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f002 0310 	and.w	r3, r2, #16
 8006a26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a30:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006a34:	460b      	mov	r3, r1
 8006a36:	4313      	orrs	r3, r2
 8006a38:	d01e      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a46:	d10c      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	3328      	adds	r3, #40	; 0x28
 8006a4e:	2102      	movs	r1, #2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 fc2d 	bl	80082b0 <RCCEx_PLL3_Config>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a62:	4b6f      	ldr	r3, [pc, #444]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a72:	4a6b      	ldr	r2, [pc, #428]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a74:	430b      	orrs	r3, r1
 8006a76:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006a84:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a86:	2300      	movs	r3, #0
 8006a88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a8a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4313      	orrs	r3, r2
 8006a92:	d03e      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aa0:	d022      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aa6:	d81b      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab0:	d00b      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006ab2:	e015      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab8:	3308      	adds	r3, #8
 8006aba:	2100      	movs	r1, #0
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 fb45 	bl	800814c <RCCEx_PLL2_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ac8:	e00f      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ace:	3328      	adds	r3, #40	; 0x28
 8006ad0:	2102      	movs	r1, #2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f001 fbec 	bl	80082b0 <RCCEx_PLL3_Config>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ade:	e004      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ae6:	e000      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10b      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006af2:	4b4b      	ldr	r3, [pc, #300]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006afe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b02:	4a47      	ldr	r2, [pc, #284]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6593      	str	r3, [r2, #88]	; 0x58
 8006b08:	e003      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006b20:	2300      	movs	r3, #0
 8006b22:	677b      	str	r3, [r7, #116]	; 0x74
 8006b24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	d03b      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b3a:	d01f      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006b3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b40:	d818      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b46:	d003      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b4c:	d007      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006b4e:	e011      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b50:	4b33      	ldr	r3, [pc, #204]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	4a32      	ldr	r2, [pc, #200]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b5c:	e00f      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b62:	3328      	adds	r3, #40	; 0x28
 8006b64:	2101      	movs	r1, #1
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 fba2 	bl	80082b0 <RCCEx_PLL3_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b72:	e004      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b7a:	e000      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10b      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b86:	4b26      	ldr	r3, [pc, #152]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b96:	4a22      	ldr	r2, [pc, #136]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6553      	str	r3, [r2, #84]	; 0x54
 8006b9c:	e003      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ba2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006bb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bb8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	d034      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd0:	d007      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006bd2:	e011      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd4:	4b12      	ldr	r3, [pc, #72]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	4a11      	ldr	r2, [pc, #68]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006be0:	e00e      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be6:	3308      	adds	r3, #8
 8006be8:	2102      	movs	r1, #2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 faae 	bl	800814c <RCCEx_PLL2_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bf6:	e003      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10d      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c16:	4a02      	ldr	r2, [pc, #8]	; (8006c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c1c:	e006      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006c1e:	bf00      	nop
 8006c20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006c38:	663b      	str	r3, [r7, #96]	; 0x60
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006c42:	460b      	mov	r3, r1
 8006c44:	4313      	orrs	r3, r2
 8006c46:	d00c      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4c:	3328      	adds	r3, #40	; 0x28
 8006c4e:	2102      	movs	r1, #2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 fb2d 	bl	80082b0 <RCCEx_PLL3_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006c6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c70:	2300      	movs	r3, #0
 8006c72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	d036      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c88:	d018      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c8e:	d811      	bhi.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c94:	d014      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c9a:	d80b      	bhi.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d011      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca4:	d106      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca6:	4bb7      	ldr	r3, [pc, #732]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	4ab6      	ldr	r2, [pc, #728]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006cba:	e004      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006cbc:	bf00      	nop
 8006cbe:	e002      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006cc0:	bf00      	nop
 8006cc2:	e000      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cce:	4bad      	ldr	r3, [pc, #692]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cdc:	4aa9      	ldr	r2, [pc, #676]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	6553      	str	r3, [r2, #84]	; 0x54
 8006ce2:	e003      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ce8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006cf8:	653b      	str	r3, [r7, #80]	; 0x50
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	657b      	str	r3, [r7, #84]	; 0x54
 8006cfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006d02:	460b      	mov	r3, r1
 8006d04:	4313      	orrs	r3, r2
 8006d06:	d009      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d08:	4b9e      	ldr	r3, [pc, #632]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d16:	4a9b      	ldr	r2, [pc, #620]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	d009      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d38:	4b92      	ldr	r3, [pc, #584]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d46:	4a8f      	ldr	r2, [pc, #572]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006d58:	643b      	str	r3, [r7, #64]	; 0x40
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006d62:	460b      	mov	r3, r1
 8006d64:	4313      	orrs	r3, r2
 8006d66:	d00e      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d68:	4b86      	ldr	r3, [pc, #536]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	4a85      	ldr	r2, [pc, #532]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d72:	6113      	str	r3, [r2, #16]
 8006d74:	4b83      	ldr	r3, [pc, #524]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d76:	6919      	ldr	r1, [r3, #16]
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d80:	4a80      	ldr	r2, [pc, #512]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d82:	430b      	orrs	r3, r1
 8006d84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d94:	2300      	movs	r3, #0
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	d009      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006da2:	4b78      	ldr	r3, [pc, #480]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	4a74      	ldr	r2, [pc, #464]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006db2:	430b      	orrs	r3, r1
 8006db4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	d00a      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006dd2:	4b6c      	ldr	r3, [pc, #432]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de2:	4a68      	ldr	r2, [pc, #416]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	2100      	movs	r1, #0
 8006df2:	62b9      	str	r1, [r7, #40]	; 0x28
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dfa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4313      	orrs	r3, r2
 8006e02:	d011      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e08:	3308      	adds	r3, #8
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f001 f99d 	bl	800814c <RCCEx_PLL2_Config>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006e18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	2100      	movs	r1, #0
 8006e32:	6239      	str	r1, [r7, #32]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4313      	orrs	r3, r2
 8006e42:	d011      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e48:	3308      	adds	r3, #8
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 f97d 	bl	800814c <RCCEx_PLL2_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006e58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	2100      	movs	r1, #0
 8006e72:	61b9      	str	r1, [r7, #24]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	61fb      	str	r3, [r7, #28]
 8006e7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4313      	orrs	r3, r2
 8006e82:	d011      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e88:	3308      	adds	r3, #8
 8006e8a:	2102      	movs	r1, #2
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 f95d 	bl	800814c <RCCEx_PLL2_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006e98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ea4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	6139      	str	r1, [r7, #16]
 8006eb4:	f003 0308 	and.w	r3, r3, #8
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	d011      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec8:	3328      	adds	r3, #40	; 0x28
 8006eca:	2100      	movs	r1, #0
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 f9ef 	bl	80082b0 <RCCEx_PLL3_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ee4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006efe:	460b      	mov	r3, r1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	d011      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f08:	3328      	adds	r3, #40	; 0x28
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 f9cf 	bl	80082b0 <RCCEx_PLL3_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006f18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	2100      	movs	r1, #0
 8006f32:	6039      	str	r1, [r7, #0]
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	607b      	str	r3, [r7, #4]
 8006f3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d011      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f48:	3328      	adds	r3, #40	; 0x28
 8006f4a:	2102      	movs	r1, #2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 f9af 	bl	80082b0 <RCCEx_PLL3_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006f58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006f68:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e000      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f82:	bf00      	nop
 8006f84:	58024400 	.word	0x58024400

08006f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b090      	sub	sp, #64	; 0x40
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f96:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006f9a:	430b      	orrs	r3, r1
 8006f9c:	f040 8094 	bne.w	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006fa0:	4b9b      	ldr	r3, [pc, #620]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa4:	f003 0307 	and.w	r3, r3, #7
 8006fa8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	f200 8087 	bhi.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006fb2:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006fcd 	.word	0x08006fcd
 8006fbc:	08006ff5 	.word	0x08006ff5
 8006fc0:	0800701d 	.word	0x0800701d
 8006fc4:	080070b9 	.word	0x080070b9
 8006fc8:	08007045 	.word	0x08007045
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fcc:	4b90      	ldr	r3, [pc, #576]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fd8:	d108      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 ff62 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fe8:	f000 bc93 	b.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff0:	f000 bc8f 	b.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ff4:	4b86      	ldr	r3, [pc, #536]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007000:	d108      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007002:	f107 0318 	add.w	r3, r7, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fca6 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007010:	f000 bc7f 	b.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007018:	f000 bc7b 	b.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800701c:	4b7c      	ldr	r3, [pc, #496]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007028:	d108      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800702a:	f107 030c 	add.w	r3, r7, #12
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fde6 	bl	8007c00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007038:	f000 bc6b 	b.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007040:	f000 bc67 	b.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007044:	4b72      	ldr	r3, [pc, #456]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800704c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800704e:	4b70      	ldr	r3, [pc, #448]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0304 	and.w	r3, r3, #4
 8007056:	2b04      	cmp	r3, #4
 8007058:	d10c      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007060:	4b6b      	ldr	r3, [pc, #428]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	08db      	lsrs	r3, r3, #3
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	4a6a      	ldr	r2, [pc, #424]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
 8007070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007072:	e01f      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007074:	4b66      	ldr	r3, [pc, #408]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007080:	d106      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007088:	d102      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800708a:	4b63      	ldr	r3, [pc, #396]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800708e:	e011      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007090:	4b5f      	ldr	r3, [pc, #380]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800709c:	d106      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800709e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a4:	d102      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070a6:	4b5d      	ldr	r3, [pc, #372]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070aa:	e003      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070ac:	2300      	movs	r3, #0
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80070b0:	f000 bc2f 	b.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80070b4:	f000 bc2d 	b.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070b8:	4b59      	ldr	r3, [pc, #356]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070bc:	f000 bc29 	b.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c4:	f000 bc25 	b.w	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80070c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070cc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80070d0:	430b      	orrs	r3, r1
 80070d2:	f040 80a7 	bne.w	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80070d6:	4b4e      	ldr	r3, [pc, #312]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80070d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070da:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80070de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070e6:	d054      	beq.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ee:	f200 808b 	bhi.w	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070f8:	f000 8083 	beq.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007102:	f200 8081 	bhi.w	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800710c:	d02f      	beq.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007114:	d878      	bhi.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007122:	d012      	beq.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007124:	e070      	b.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007126:	4b3a      	ldr	r3, [pc, #232]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007132:	d107      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007138:	4618      	mov	r0, r3
 800713a:	f000 feb5 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007142:	e3e6      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007148:	e3e3      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800714a:	4b31      	ldr	r3, [pc, #196]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007156:	d107      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007158:	f107 0318 	add.w	r3, r7, #24
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fbfb 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007166:	e3d4      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800716c:	e3d1      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800716e:	4b28      	ldr	r3, [pc, #160]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717a:	d107      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800717c:	f107 030c 	add.w	r3, r7, #12
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fd3d 	bl	8007c00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800718a:	e3c2      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007190:	e3bf      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007192:	4b1f      	ldr	r3, [pc, #124]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007196:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800719a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800719c:	4b1c      	ldr	r3, [pc, #112]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d10c      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80071a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071ae:	4b18      	ldr	r3, [pc, #96]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	08db      	lsrs	r3, r3, #3
 80071b4:	f003 0303 	and.w	r3, r3, #3
 80071b8:	4a16      	ldr	r2, [pc, #88]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80071ba:	fa22 f303 	lsr.w	r3, r2, r3
 80071be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071c0:	e01e      	b.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071c2:	4b13      	ldr	r3, [pc, #76]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ce:	d106      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80071d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071d6:	d102      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071d8:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071dc:	e010      	b.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071de:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ea:	d106      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80071ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071f2:	d102      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071f4:	4b09      	ldr	r3, [pc, #36]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071f8:	e002      	b.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80071fe:	e388      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007200:	e387      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007202:	4b07      	ldr	r3, [pc, #28]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007206:	e384      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800720c:	e381      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800720e:	bf00      	nop
 8007210:	58024400 	.word	0x58024400
 8007214:	03d09000 	.word	0x03d09000
 8007218:	003d0900 	.word	0x003d0900
 800721c:	007a1200 	.word	0x007a1200
 8007220:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007228:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800722c:	430b      	orrs	r3, r1
 800722e:	f040 809c 	bne.w	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007232:	4b9e      	ldr	r3, [pc, #632]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007236:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800723a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007242:	d054      	beq.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800724a:	f200 808b 	bhi.w	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007254:	f000 8083 	beq.w	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800725e:	f200 8081 	bhi.w	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007268:	d02f      	beq.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007270:	d878      	bhi.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	2b00      	cmp	r3, #0
 8007276:	d004      	beq.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800727e:	d012      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007280:	e070      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007282:	4b8a      	ldr	r3, [pc, #552]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800728e:	d107      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fe07 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800729e:	e338      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a4:	e335      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072a6:	4b81      	ldr	r3, [pc, #516]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072b2:	d107      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072b4:	f107 0318 	add.w	r3, r7, #24
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fb4d 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072c2:	e326      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c8:	e323      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072ca:	4b78      	ldr	r3, [pc, #480]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d6:	d107      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072d8:	f107 030c 	add.w	r3, r7, #12
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 fc8f 	bl	8007c00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072e6:	e314      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ec:	e311      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072ee:	4b6f      	ldr	r3, [pc, #444]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80072f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072f8:	4b6c      	ldr	r3, [pc, #432]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b04      	cmp	r3, #4
 8007302:	d10c      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800730a:	4b68      	ldr	r3, [pc, #416]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	08db      	lsrs	r3, r3, #3
 8007310:	f003 0303 	and.w	r3, r3, #3
 8007314:	4a66      	ldr	r2, [pc, #408]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007316:	fa22 f303 	lsr.w	r3, r2, r3
 800731a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800731c:	e01e      	b.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800731e:	4b63      	ldr	r3, [pc, #396]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800732a:	d106      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800732c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007332:	d102      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007334:	4b5f      	ldr	r3, [pc, #380]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007338:	e010      	b.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800733a:	4b5c      	ldr	r3, [pc, #368]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007346:	d106      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734e:	d102      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007350:	4b59      	ldr	r3, [pc, #356]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007354:	e002      	b.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800735a:	e2da      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800735c:	e2d9      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800735e:	4b57      	ldr	r3, [pc, #348]	; (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007362:	e2d6      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007368:	e2d3      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800736a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800736e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007372:	430b      	orrs	r3, r1
 8007374:	f040 80a7 	bne.w	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007378:	4b4c      	ldr	r3, [pc, #304]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800737a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007380:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007388:	d055      	beq.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007390:	f200 8096 	bhi.w	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007396:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800739a:	f000 8084 	beq.w	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073a4:	f200 808c 	bhi.w	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ae:	d030      	beq.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b6:	f200 8083 	bhi.w	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d004      	beq.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c6:	d012      	beq.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80073c8:	e07a      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073ca:	4b38      	ldr	r3, [pc, #224]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d6:	d107      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fd63 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073e6:	e294      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ec:	e291      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073ee:	4b2f      	ldr	r3, [pc, #188]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073fa:	d107      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073fc:	f107 0318 	add.w	r3, r7, #24
 8007400:	4618      	mov	r0, r3
 8007402:	f000 faa9 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800740a:	e282      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007410:	e27f      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007412:	4b26      	ldr	r3, [pc, #152]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800741a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800741e:	d107      	bne.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007420:	f107 030c 	add.w	r3, r7, #12
 8007424:	4618      	mov	r0, r3
 8007426:	f000 fbeb 	bl	8007c00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800742e:	e270      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007434:	e26d      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007436:	4b1d      	ldr	r3, [pc, #116]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800743e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007440:	4b1a      	ldr	r3, [pc, #104]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b04      	cmp	r3, #4
 800744a:	d10c      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	2b00      	cmp	r3, #0
 8007450:	d109      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007452:	4b16      	ldr	r3, [pc, #88]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	08db      	lsrs	r3, r3, #3
 8007458:	f003 0303 	and.w	r3, r3, #3
 800745c:	4a14      	ldr	r2, [pc, #80]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800745e:	fa22 f303 	lsr.w	r3, r2, r3
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007464:	e01e      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007466:	4b11      	ldr	r3, [pc, #68]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007472:	d106      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800747a:	d102      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800747c:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007480:	e010      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007482:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800748a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800748e:	d106      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007496:	d102      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007498:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800749c:	e002      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80074a2:	e236      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80074a4:	e235      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80074a6:	4b05      	ldr	r3, [pc, #20]	; (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80074a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074aa:	e232      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80074ac:	58024400 	.word	0x58024400
 80074b0:	03d09000 	.word	0x03d09000
 80074b4:	003d0900 	.word	0x003d0900
 80074b8:	007a1200 	.word	0x007a1200
 80074bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074c4:	e225      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80074c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ca:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80074ce:	430b      	orrs	r3, r1
 80074d0:	f040 8085 	bne.w	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80074d4:	4b9c      	ldr	r3, [pc, #624]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80074d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80074dc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074e4:	d06b      	beq.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074ec:	d874      	bhi.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074f4:	d056      	beq.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074fc:	d86c      	bhi.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007504:	d03b      	beq.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800750c:	d864      	bhi.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007514:	d021      	beq.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800751c:	d85c      	bhi.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	2b00      	cmp	r3, #0
 8007522:	d004      	beq.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752a:	d004      	beq.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800752c:	e054      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800752e:	f7fe fb5f 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 8007532:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007534:	e1ed      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007536:	4b84      	ldr	r3, [pc, #528]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800753e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007542:	d107      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007544:	f107 0318 	add.w	r3, r7, #24
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fa05 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007552:	e1de      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007558:	e1db      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800755a:	4b7b      	ldr	r3, [pc, #492]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007566:	d107      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fb47 	bl	8007c00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007576:	e1cc      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800757c:	e1c9      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800757e:	4b72      	ldr	r3, [pc, #456]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0304 	and.w	r3, r3, #4
 8007586:	2b04      	cmp	r3, #4
 8007588:	d109      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800758a:	4b6f      	ldr	r3, [pc, #444]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	08db      	lsrs	r3, r3, #3
 8007590:	f003 0303 	and.w	r3, r3, #3
 8007594:	4a6d      	ldr	r2, [pc, #436]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007596:	fa22 f303 	lsr.w	r3, r2, r3
 800759a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800759c:	e1b9      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a2:	e1b6      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80075a4:	4b68      	ldr	r3, [pc, #416]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b0:	d102      	bne.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80075b2:	4b67      	ldr	r3, [pc, #412]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80075b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075b6:	e1ac      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075bc:	e1a9      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80075be:	4b62      	ldr	r3, [pc, #392]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ca:	d102      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80075cc:	4b61      	ldr	r3, [pc, #388]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80075ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075d0:	e19f      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075d6:	e19c      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075dc:	e199      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80075de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80075e6:	430b      	orrs	r3, r1
 80075e8:	d173      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075ea:	4b57      	ldr	r3, [pc, #348]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80075ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80075f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075fa:	d02f      	beq.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007602:	d863      	bhi.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007610:	d012      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007612:	e05b      	b.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007614:	4b4c      	ldr	r3, [pc, #304]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800761c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007620:	d107      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007622:	f107 0318 	add.w	r3, r7, #24
 8007626:	4618      	mov	r0, r3
 8007628:	f000 f996 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007630:	e16f      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007636:	e16c      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007638:	4b43      	ldr	r3, [pc, #268]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007644:	d107      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007646:	f107 030c 	add.w	r3, r7, #12
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fad8 	bl	8007c00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007654:	e15d      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800765a:	e15a      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800765c:	4b3a      	ldr	r3, [pc, #232]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800765e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007664:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007666:	4b38      	ldr	r3, [pc, #224]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0304 	and.w	r3, r3, #4
 800766e:	2b04      	cmp	r3, #4
 8007670:	d10c      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007674:	2b00      	cmp	r3, #0
 8007676:	d109      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007678:	4b33      	ldr	r3, [pc, #204]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	08db      	lsrs	r3, r3, #3
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	4a32      	ldr	r2, [pc, #200]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007684:	fa22 f303 	lsr.w	r3, r2, r3
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800768a:	e01e      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800768c:	4b2e      	ldr	r3, [pc, #184]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007698:	d106      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076a0:	d102      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076a2:	4b2b      	ldr	r3, [pc, #172]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80076a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076a6:	e010      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076a8:	4b27      	ldr	r3, [pc, #156]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076b4:	d106      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80076b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076bc:	d102      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076be:	4b25      	ldr	r3, [pc, #148]	; (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80076c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076c2:	e002      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80076c8:	e123      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80076ca:	e122      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076d0:	e11f      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80076da:	430b      	orrs	r3, r1
 80076dc:	d13c      	bne.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80076de:	4b1a      	ldr	r3, [pc, #104]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80076e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f4:	d012      	beq.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80076f6:	e023      	b.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076f8:	4b13      	ldr	r3, [pc, #76]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007704:	d107      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fbcc 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007714:	e0fd      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800771a:	e0fa      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007728:	d107      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800772a:	f107 0318 	add.w	r3, r7, #24
 800772e:	4618      	mov	r0, r3
 8007730:	f000 f912 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007738:	e0eb      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800773e:	e0e8      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007744:	e0e5      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007746:	bf00      	nop
 8007748:	58024400 	.word	0x58024400
 800774c:	03d09000 	.word	0x03d09000
 8007750:	003d0900 	.word	0x003d0900
 8007754:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800775c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007760:	430b      	orrs	r3, r1
 8007762:	f040 8085 	bne.w	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007766:	4b6d      	ldr	r3, [pc, #436]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800776e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007776:	d06b      	beq.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800777e:	d874      	bhi.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007786:	d056      	beq.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800778e:	d86c      	bhi.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007796:	d03b      	beq.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800779e:	d864      	bhi.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077a6:	d021      	beq.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ae:	d85c      	bhi.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d004      	beq.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077bc:	d004      	beq.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80077be:	e054      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80077c0:	f000 f8b4 	bl	800792c <HAL_RCCEx_GetD3PCLK1Freq>
 80077c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80077c6:	e0a4      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077c8:	4b54      	ldr	r3, [pc, #336]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077d4:	d107      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077d6:	f107 0318 	add.w	r3, r7, #24
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 f8bc 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077e4:	e095      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ea:	e092      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077ec:	4b4b      	ldr	r3, [pc, #300]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f8:	d107      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077fa:	f107 030c 	add.w	r3, r7, #12
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 f9fe 	bl	8007c00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007808:	e083      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800780e:	e080      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007810:	4b42      	ldr	r3, [pc, #264]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b04      	cmp	r3, #4
 800781a:	d109      	bne.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800781c:	4b3f      	ldr	r3, [pc, #252]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	08db      	lsrs	r3, r3, #3
 8007822:	f003 0303 	and.w	r3, r3, #3
 8007826:	4a3e      	ldr	r2, [pc, #248]	; (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007828:	fa22 f303 	lsr.w	r3, r2, r3
 800782c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800782e:	e070      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007834:	e06d      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007836:	4b39      	ldr	r3, [pc, #228]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007842:	d102      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8007844:	4b37      	ldr	r3, [pc, #220]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007848:	e063      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800784e:	e060      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007850:	4b32      	ldr	r3, [pc, #200]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800785c:	d102      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800785e:	4b32      	ldr	r3, [pc, #200]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007862:	e056      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007868:	e053      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800786e:	e050      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007874:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007878:	430b      	orrs	r3, r1
 800787a:	d148      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800787c:	4b27      	ldr	r3, [pc, #156]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800787e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007884:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800788c:	d02a      	beq.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007894:	d838      	bhi.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078a2:	d00d      	beq.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80078a4:	e030      	b.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078a6:	4b1d      	ldr	r3, [pc, #116]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078b2:	d102      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80078b4:	4b1c      	ldr	r3, [pc, #112]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078b8:	e02b      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078be:	e028      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078c0:	4b16      	ldr	r3, [pc, #88]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078cc:	d107      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fae8 	bl	8007ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078dc:	e019      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078de:	2300      	movs	r3, #0
 80078e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e2:	e016      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078e4:	4b0d      	ldr	r3, [pc, #52]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078f0:	d107      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078f2:	f107 0318 	add.w	r3, r7, #24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 f82e 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007900:	e007      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007906:	e004      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800790c:	e001      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007914:	4618      	mov	r0, r3
 8007916:	3740      	adds	r7, #64	; 0x40
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	58024400 	.word	0x58024400
 8007920:	03d09000 	.word	0x03d09000
 8007924:	003d0900 	.word	0x003d0900
 8007928:	007a1200 	.word	0x007a1200

0800792c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007930:	f7fe f92e 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8007934:	4602      	mov	r2, r0
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	091b      	lsrs	r3, r3, #4
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	4904      	ldr	r1, [pc, #16]	; (8007954 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007942:	5ccb      	ldrb	r3, [r1, r3]
 8007944:	f003 031f 	and.w	r3, r3, #31
 8007948:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800794c:	4618      	mov	r0, r3
 800794e:	bd80      	pop	{r7, pc}
 8007950:	58024400 	.word	0x58024400
 8007954:	0800ac38 	.word	0x0800ac38

08007958 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007958:	b480      	push	{r7}
 800795a:	b089      	sub	sp, #36	; 0x24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007960:	4ba1      	ldr	r3, [pc, #644]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	f003 0303 	and.w	r3, r3, #3
 8007968:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800796a:	4b9f      	ldr	r3, [pc, #636]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800796c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796e:	0b1b      	lsrs	r3, r3, #12
 8007970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007974:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007976:	4b9c      	ldr	r3, [pc, #624]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	091b      	lsrs	r3, r3, #4
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007982:	4b99      	ldr	r3, [pc, #612]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007986:	08db      	lsrs	r3, r3, #3
 8007988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	fb02 f303 	mul.w	r3, r2, r3
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 8111 	beq.w	8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	f000 8083 	beq.w	8007ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	f200 80a1 	bhi.w	8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d056      	beq.n	8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80079c2:	e099      	b.n	8007af8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079c4:	4b88      	ldr	r3, [pc, #544]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0320 	and.w	r3, r3, #32
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d02d      	beq.n	8007a2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079d0:	4b85      	ldr	r3, [pc, #532]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	08db      	lsrs	r3, r3, #3
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	4a84      	ldr	r2, [pc, #528]	; (8007bec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
 80079e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079fa:	4b7b      	ldr	r3, [pc, #492]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a2a:	e087      	b.n	8007b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a3e:	4b6a      	ldr	r3, [pc, #424]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a6e:	e065      	b.n	8007b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a82:	4b59      	ldr	r3, [pc, #356]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ab2:	e043      	b.n	8007b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	ee07 3a90 	vmov	s15, r3
 8007aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	4b48      	ldr	r3, [pc, #288]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ada:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007af6:	e021      	b.n	8007b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0a:	4b37      	ldr	r3, [pc, #220]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b3c:	4b2a      	ldr	r3, [pc, #168]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	0a5b      	lsrs	r3, r3, #9
 8007b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b62:	ee17 2a90 	vmov	r2, s15
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b6a:	4b1f      	ldr	r3, [pc, #124]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	0c1b      	lsrs	r3, r3, #16
 8007b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b74:	ee07 3a90 	vmov	s15, r3
 8007b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b90:	ee17 2a90 	vmov	r2, s15
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b98:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	0e1b      	lsrs	r3, r3, #24
 8007b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bbe:	ee17 2a90 	vmov	r2, s15
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007bc6:	e008      	b.n	8007bda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	609a      	str	r2, [r3, #8]
}
 8007bda:	bf00      	nop
 8007bdc:	3724      	adds	r7, #36	; 0x24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	58024400 	.word	0x58024400
 8007bec:	03d09000 	.word	0x03d09000
 8007bf0:	46000000 	.word	0x46000000
 8007bf4:	4c742400 	.word	0x4c742400
 8007bf8:	4a742400 	.word	0x4a742400
 8007bfc:	4af42400 	.word	0x4af42400

08007c00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b089      	sub	sp, #36	; 0x24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c08:	4ba1      	ldr	r3, [pc, #644]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c12:	4b9f      	ldr	r3, [pc, #636]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	0d1b      	lsrs	r3, r3, #20
 8007c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c1e:	4b9c      	ldr	r3, [pc, #624]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	0a1b      	lsrs	r3, r3, #8
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c2a:	4b99      	ldr	r3, [pc, #612]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2e:	08db      	lsrs	r3, r3, #3
 8007c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8111 	beq.w	8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	f000 8083 	beq.w	8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	f200 80a1 	bhi.w	8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d003      	beq.n	8007c6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d056      	beq.n	8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c6a:	e099      	b.n	8007da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c6c:	4b88      	ldr	r3, [pc, #544]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0320 	and.w	r3, r3, #32
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d02d      	beq.n	8007cd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c78:	4b85      	ldr	r3, [pc, #532]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	08db      	lsrs	r3, r3, #3
 8007c7e:	f003 0303 	and.w	r3, r3, #3
 8007c82:	4a84      	ldr	r2, [pc, #528]	; (8007e94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c84:	fa22 f303 	lsr.w	r3, r2, r3
 8007c88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	ee07 3a90 	vmov	s15, r3
 8007c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca2:	4b7b      	ldr	r3, [pc, #492]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007cd2:	e087      	b.n	8007de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007e9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce6:	4b6a      	ldr	r3, [pc, #424]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d16:	e065      	b.n	8007de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d2a:	4b59      	ldr	r3, [pc, #356]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d5a:	e043      	b.n	8007de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	ee07 3a90 	vmov	s15, r3
 8007d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6e:	4b48      	ldr	r3, [pc, #288]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d9e:	e021      	b.n	8007de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007daa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db2:	4b37      	ldr	r3, [pc, #220]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007de2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007de4:	4b2a      	ldr	r3, [pc, #168]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de8:	0a5b      	lsrs	r3, r3, #9
 8007dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e0a:	ee17 2a90 	vmov	r2, s15
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e12:	4b1f      	ldr	r3, [pc, #124]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	0c1b      	lsrs	r3, r3, #16
 8007e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1c:	ee07 3a90 	vmov	s15, r3
 8007e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e38:	ee17 2a90 	vmov	r2, s15
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e40:	4b13      	ldr	r3, [pc, #76]	; (8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e44:	0e1b      	lsrs	r3, r3, #24
 8007e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e66:	ee17 2a90 	vmov	r2, s15
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e6e:	e008      	b.n	8007e82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	609a      	str	r2, [r3, #8]
}
 8007e82:	bf00      	nop
 8007e84:	3724      	adds	r7, #36	; 0x24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	58024400 	.word	0x58024400
 8007e94:	03d09000 	.word	0x03d09000
 8007e98:	46000000 	.word	0x46000000
 8007e9c:	4c742400 	.word	0x4c742400
 8007ea0:	4a742400 	.word	0x4a742400
 8007ea4:	4af42400 	.word	0x4af42400

08007ea8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b089      	sub	sp, #36	; 0x24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007eb0:	4ba0      	ldr	r3, [pc, #640]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007eba:	4b9e      	ldr	r3, [pc, #632]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	091b      	lsrs	r3, r3, #4
 8007ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ec4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007ec6:	4b9b      	ldr	r3, [pc, #620]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ed0:	4b98      	ldr	r3, [pc, #608]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed4:	08db      	lsrs	r3, r3, #3
 8007ed6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	fb02 f303 	mul.w	r3, r2, r3
 8007ee0:	ee07 3a90 	vmov	s15, r3
 8007ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 8111 	beq.w	8008116 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	f000 8083 	beq.w	8008002 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	f200 80a1 	bhi.w	8008046 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d056      	beq.n	8007fbe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007f10:	e099      	b.n	8008046 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f12:	4b88      	ldr	r3, [pc, #544]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d02d      	beq.n	8007f7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f1e:	4b85      	ldr	r3, [pc, #532]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	08db      	lsrs	r3, r3, #3
 8007f24:	f003 0303 	and.w	r3, r3, #3
 8007f28:	4a83      	ldr	r2, [pc, #524]	; (8008138 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	ee07 3a90 	vmov	s15, r3
 8007f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f48:	4b7a      	ldr	r3, [pc, #488]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f50:	ee07 3a90 	vmov	s15, r3
 8007f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f5c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800813c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f78:	e087      	b.n	800808a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	ee07 3a90 	vmov	s15, r3
 8007f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f84:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008140 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f8c:	4b69      	ldr	r3, [pc, #420]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fa0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800813c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fbc:	e065      	b.n	800808a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	ee07 3a90 	vmov	s15, r3
 8007fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008144 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fd0:	4b58      	ldr	r3, [pc, #352]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd8:	ee07 3a90 	vmov	s15, r3
 8007fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800813c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008000:	e043      	b.n	800808a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	ee07 3a90 	vmov	s15, r3
 8008008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008014:	4b47      	ldr	r3, [pc, #284]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008024:	ed97 6a03 	vldr	s12, [r7, #12]
 8008028:	eddf 5a44 	vldr	s11, [pc, #272]	; 800813c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800802c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008044:	e021      	b.n	800808a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	ee07 3a90 	vmov	s15, r3
 800804c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008050:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008140 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008058:	4b36      	ldr	r3, [pc, #216]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800805a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008060:	ee07 3a90 	vmov	s15, r3
 8008064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008068:	ed97 6a03 	vldr	s12, [r7, #12]
 800806c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800813c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008070:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008074:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800807c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008084:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008088:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800808a:	4b2a      	ldr	r3, [pc, #168]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800808c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808e:	0a5b      	lsrs	r3, r3, #9
 8008090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008094:	ee07 3a90 	vmov	s15, r3
 8008098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80080a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b0:	ee17 2a90 	vmov	r2, s15
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80080b8:	4b1e      	ldr	r3, [pc, #120]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080bc:	0c1b      	lsrs	r3, r3, #16
 80080be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080de:	ee17 2a90 	vmov	r2, s15
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80080e6:	4b13      	ldr	r3, [pc, #76]	; (8008134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ea:	0e1b      	lsrs	r3, r3, #24
 80080ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f0:	ee07 3a90 	vmov	s15, r3
 80080f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008100:	edd7 6a07 	vldr	s13, [r7, #28]
 8008104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800810c:	ee17 2a90 	vmov	r2, s15
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008114:	e008      	b.n	8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	609a      	str	r2, [r3, #8]
}
 8008128:	bf00      	nop
 800812a:	3724      	adds	r7, #36	; 0x24
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	58024400 	.word	0x58024400
 8008138:	03d09000 	.word	0x03d09000
 800813c:	46000000 	.word	0x46000000
 8008140:	4c742400 	.word	0x4c742400
 8008144:	4a742400 	.word	0x4a742400
 8008148:	4af42400 	.word	0x4af42400

0800814c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800815a:	4b53      	ldr	r3, [pc, #332]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 800815c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	2b03      	cmp	r3, #3
 8008164:	d101      	bne.n	800816a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e099      	b.n	800829e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800816a:	4b4f      	ldr	r3, [pc, #316]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a4e      	ldr	r2, [pc, #312]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008170:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008176:	f7fa fe7d 	bl	8002e74 <HAL_GetTick>
 800817a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800817c:	e008      	b.n	8008190 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800817e:	f7fa fe79 	bl	8002e74 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	2b02      	cmp	r3, #2
 800818a:	d901      	bls.n	8008190 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e086      	b.n	800829e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008190:	4b45      	ldr	r3, [pc, #276]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1f0      	bne.n	800817e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800819c:	4b42      	ldr	r3, [pc, #264]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	031b      	lsls	r3, r3, #12
 80081aa:	493f      	ldr	r1, [pc, #252]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	628b      	str	r3, [r1, #40]	; 0x28
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	3b01      	subs	r3, #1
 80081c0:	025b      	lsls	r3, r3, #9
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	431a      	orrs	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	041b      	lsls	r3, r3, #16
 80081ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	3b01      	subs	r3, #1
 80081da:	061b      	lsls	r3, r3, #24
 80081dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081e0:	4931      	ldr	r1, [pc, #196]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081e6:	4b30      	ldr	r3, [pc, #192]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	492d      	ldr	r1, [pc, #180]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081f8:	4b2b      	ldr	r3, [pc, #172]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	f023 0220 	bic.w	r2, r3, #32
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	4928      	ldr	r1, [pc, #160]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008206:	4313      	orrs	r3, r2
 8008208:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800820a:	4b27      	ldr	r3, [pc, #156]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	4a26      	ldr	r2, [pc, #152]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008210:	f023 0310 	bic.w	r3, r3, #16
 8008214:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008216:	4b24      	ldr	r3, [pc, #144]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800821a:	4b24      	ldr	r3, [pc, #144]	; (80082ac <RCCEx_PLL2_Config+0x160>)
 800821c:	4013      	ands	r3, r2
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	69d2      	ldr	r2, [r2, #28]
 8008222:	00d2      	lsls	r2, r2, #3
 8008224:	4920      	ldr	r1, [pc, #128]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008226:	4313      	orrs	r3, r2
 8008228:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800822a:	4b1f      	ldr	r3, [pc, #124]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 800822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822e:	4a1e      	ldr	r2, [pc, #120]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008230:	f043 0310 	orr.w	r3, r3, #16
 8008234:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d106      	bne.n	800824a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800823c:	4b1a      	ldr	r3, [pc, #104]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	4a19      	ldr	r2, [pc, #100]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008246:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008248:	e00f      	b.n	800826a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d106      	bne.n	800825e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008250:	4b15      	ldr	r3, [pc, #84]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008254:	4a14      	ldr	r2, [pc, #80]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800825a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800825c:	e005      	b.n	800826a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800825e:	4b12      	ldr	r3, [pc, #72]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	4a11      	ldr	r2, [pc, #68]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008268:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800826a:	4b0f      	ldr	r3, [pc, #60]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a0e      	ldr	r2, [pc, #56]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008276:	f7fa fdfd 	bl	8002e74 <HAL_GetTick>
 800827a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800827c:	e008      	b.n	8008290 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800827e:	f7fa fdf9 	bl	8002e74 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	2b02      	cmp	r3, #2
 800828a:	d901      	bls.n	8008290 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e006      	b.n	800829e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008290:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <RCCEx_PLL2_Config+0x15c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d0f0      	beq.n	800827e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800829c:	7bfb      	ldrb	r3, [r7, #15]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	58024400 	.word	0x58024400
 80082ac:	ffff0007 	.word	0xffff0007

080082b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082be:	4b53      	ldr	r3, [pc, #332]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80082c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d101      	bne.n	80082ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e099      	b.n	8008402 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082ce:	4b4f      	ldr	r3, [pc, #316]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a4e      	ldr	r2, [pc, #312]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80082d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082da:	f7fa fdcb 	bl	8002e74 <HAL_GetTick>
 80082de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082e0:	e008      	b.n	80082f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082e2:	f7fa fdc7 	bl	8002e74 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d901      	bls.n	80082f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e086      	b.n	8008402 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082f4:	4b45      	ldr	r3, [pc, #276]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1f0      	bne.n	80082e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008300:	4b42      	ldr	r3, [pc, #264]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	051b      	lsls	r3, r3, #20
 800830e:	493f      	ldr	r1, [pc, #252]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 8008310:	4313      	orrs	r3, r2
 8008312:	628b      	str	r3, [r1, #40]	; 0x28
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	3b01      	subs	r3, #1
 800831a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	3b01      	subs	r3, #1
 8008324:	025b      	lsls	r3, r3, #9
 8008326:	b29b      	uxth	r3, r3
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	3b01      	subs	r3, #1
 8008330:	041b      	lsls	r3, r3, #16
 8008332:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008336:	431a      	orrs	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	3b01      	subs	r3, #1
 800833e:	061b      	lsls	r3, r3, #24
 8008340:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008344:	4931      	ldr	r1, [pc, #196]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 8008346:	4313      	orrs	r3, r2
 8008348:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800834a:	4b30      	ldr	r3, [pc, #192]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	492d      	ldr	r1, [pc, #180]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 8008358:	4313      	orrs	r3, r2
 800835a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800835c:	4b2b      	ldr	r3, [pc, #172]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	4928      	ldr	r1, [pc, #160]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 800836a:	4313      	orrs	r3, r2
 800836c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800836e:	4b27      	ldr	r3, [pc, #156]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	4a26      	ldr	r2, [pc, #152]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 8008374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800837a:	4b24      	ldr	r3, [pc, #144]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 800837c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800837e:	4b24      	ldr	r3, [pc, #144]	; (8008410 <RCCEx_PLL3_Config+0x160>)
 8008380:	4013      	ands	r3, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	69d2      	ldr	r2, [r2, #28]
 8008386:	00d2      	lsls	r2, r2, #3
 8008388:	4920      	ldr	r1, [pc, #128]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 800838a:	4313      	orrs	r3, r2
 800838c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800838e:	4b1f      	ldr	r3, [pc, #124]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	4a1e      	ldr	r2, [pc, #120]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 8008394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083a0:	4b1a      	ldr	r3, [pc, #104]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	4a19      	ldr	r2, [pc, #100]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80083a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083ac:	e00f      	b.n	80083ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d106      	bne.n	80083c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083b4:	4b15      	ldr	r3, [pc, #84]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	4a14      	ldr	r2, [pc, #80]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80083ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083c0:	e005      	b.n	80083ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083c2:	4b12      	ldr	r3, [pc, #72]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	4a11      	ldr	r2, [pc, #68]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80083c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083ce:	4b0f      	ldr	r3, [pc, #60]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a0e      	ldr	r2, [pc, #56]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80083d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083da:	f7fa fd4b 	bl	8002e74 <HAL_GetTick>
 80083de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083e0:	e008      	b.n	80083f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083e2:	f7fa fd47 	bl	8002e74 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d901      	bls.n	80083f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e006      	b.n	8008402 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083f4:	4b05      	ldr	r3, [pc, #20]	; (800840c <RCCEx_PLL3_Config+0x15c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0f0      	beq.n	80083e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	58024400 	.word	0x58024400
 8008410:	ffff0007 	.word	0xffff0007

08008414 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e10f      	b.n	8008646 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a87      	ldr	r2, [pc, #540]	; (8008650 <HAL_SPI_Init+0x23c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00f      	beq.n	8008456 <HAL_SPI_Init+0x42>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a86      	ldr	r2, [pc, #536]	; (8008654 <HAL_SPI_Init+0x240>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00a      	beq.n	8008456 <HAL_SPI_Init+0x42>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a84      	ldr	r2, [pc, #528]	; (8008658 <HAL_SPI_Init+0x244>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d005      	beq.n	8008456 <HAL_SPI_Init+0x42>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	2b0f      	cmp	r3, #15
 8008450:	d901      	bls.n	8008456 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e0f7      	b.n	8008646 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f900 	bl	800865c <SPI_GetPacketSize>
 800845c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a7b      	ldr	r2, [pc, #492]	; (8008650 <HAL_SPI_Init+0x23c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d00c      	beq.n	8008482 <HAL_SPI_Init+0x6e>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a79      	ldr	r2, [pc, #484]	; (8008654 <HAL_SPI_Init+0x240>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d007      	beq.n	8008482 <HAL_SPI_Init+0x6e>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a78      	ldr	r2, [pc, #480]	; (8008658 <HAL_SPI_Init+0x244>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d002      	beq.n	8008482 <HAL_SPI_Init+0x6e>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b08      	cmp	r3, #8
 8008480:	d811      	bhi.n	80084a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008486:	4a72      	ldr	r2, [pc, #456]	; (8008650 <HAL_SPI_Init+0x23c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d009      	beq.n	80084a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a70      	ldr	r2, [pc, #448]	; (8008654 <HAL_SPI_Init+0x240>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d004      	beq.n	80084a0 <HAL_SPI_Init+0x8c>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a6f      	ldr	r2, [pc, #444]	; (8008658 <HAL_SPI_Init+0x244>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d104      	bne.n	80084aa <HAL_SPI_Init+0x96>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2b10      	cmp	r3, #16
 80084a4:	d901      	bls.n	80084aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e0cd      	b.n	8008646 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d106      	bne.n	80084c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7f9 fd16 	bl	8001ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2202      	movs	r2, #2
 80084c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0201 	bic.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80084e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084f0:	d119      	bne.n	8008526 <HAL_SPI_Init+0x112>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084fa:	d103      	bne.n	8008504 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008500:	2b00      	cmp	r3, #0
 8008502:	d008      	beq.n	8008516 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10c      	bne.n	8008526 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008514:	d107      	bne.n	8008526 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008524:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00f      	beq.n	8008552 <HAL_SPI_Init+0x13e>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	2b06      	cmp	r3, #6
 8008538:	d90b      	bls.n	8008552 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	e007      	b.n	8008562 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008560:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	69da      	ldr	r2, [r3, #28]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856a:	431a      	orrs	r2, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008574:	ea42 0103 	orr.w	r1, r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	431a      	orrs	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008592:	431a      	orrs	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	431a      	orrs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085c2:	ea42 0103 	orr.w	r1, r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d113      	bne.n	8008602 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008600:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0201 	bic.w	r2, r2, #1
 8008610:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	40013000 	.word	0x40013000
 8008654:	40003800 	.word	0x40003800
 8008658:	40003c00 	.word	0x40003c00

0800865c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008668:	095b      	lsrs	r3, r3, #5
 800866a:	3301      	adds	r3, #1
 800866c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	3301      	adds	r3, #1
 8008674:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	3307      	adds	r3, #7
 800867a:	08db      	lsrs	r3, r3, #3
 800867c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	fb02 f303 	mul.w	r3, r2, r3
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e049      	b.n	8008738 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d106      	bne.n	80086be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7f9 fd6b 	bl	8002194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2202      	movs	r2, #2
 80086c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3304      	adds	r3, #4
 80086ce:	4619      	mov	r1, r3
 80086d0:	4610      	mov	r0, r2
 80086d2:	f000 fb49 	bl	8008d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e049      	b.n	80087e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d106      	bne.n	800876c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f841 	bl	80087ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3304      	adds	r3, #4
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f000 faf2 	bl	8008d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
	...

08008804 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e08f      	b.n	8008938 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d106      	bne.n	8008832 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7f9 fd5b 	bl	80022e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2202      	movs	r2, #2
 8008836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6899      	ldr	r1, [r3, #8]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	4b3e      	ldr	r3, [pc, #248]	; (8008940 <HAL_TIM_Encoder_Init+0x13c>)
 8008846:	400b      	ands	r3, r1
 8008848:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3304      	adds	r3, #4
 8008852:	4619      	mov	r1, r3
 8008854:	4610      	mov	r0, r2
 8008856:	f000 fa87 	bl	8008d68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4b31      	ldr	r3, [pc, #196]	; (8008944 <HAL_TIM_Encoder_Init+0x140>)
 8008880:	4013      	ands	r3, r2
 8008882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	4313      	orrs	r3, r2
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	4313      	orrs	r3, r2
 8008894:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	4b2b      	ldr	r3, [pc, #172]	; (8008948 <HAL_TIM_Encoder_Init+0x144>)
 800889a:	4013      	ands	r3, r2
 800889c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	4b2a      	ldr	r3, [pc, #168]	; (800894c <HAL_TIM_Encoder_Init+0x148>)
 80088a2:	4013      	ands	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	4313      	orrs	r3, r2
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	011a      	lsls	r2, r3, #4
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	031b      	lsls	r3, r3, #12
 80088c4:	4313      	orrs	r3, r2
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80088d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80088da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	4313      	orrs	r3, r2
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	fffebff8 	.word	0xfffebff8
 8008944:	fffffcfc 	.word	0xfffffcfc
 8008948:	fffff3f3 	.word	0xfffff3f3
 800894c:	ffff0f0f 	.word	0xffff0f0f

08008950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800896a:	2302      	movs	r3, #2
 800896c:	e0ff      	b.n	8008b6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b14      	cmp	r3, #20
 800897a:	f200 80f0 	bhi.w	8008b5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800897e:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089d9 	.word	0x080089d9
 8008988:	08008b5f 	.word	0x08008b5f
 800898c:	08008b5f 	.word	0x08008b5f
 8008990:	08008b5f 	.word	0x08008b5f
 8008994:	08008a19 	.word	0x08008a19
 8008998:	08008b5f 	.word	0x08008b5f
 800899c:	08008b5f 	.word	0x08008b5f
 80089a0:	08008b5f 	.word	0x08008b5f
 80089a4:	08008a5b 	.word	0x08008a5b
 80089a8:	08008b5f 	.word	0x08008b5f
 80089ac:	08008b5f 	.word	0x08008b5f
 80089b0:	08008b5f 	.word	0x08008b5f
 80089b4:	08008a9b 	.word	0x08008a9b
 80089b8:	08008b5f 	.word	0x08008b5f
 80089bc:	08008b5f 	.word	0x08008b5f
 80089c0:	08008b5f 	.word	0x08008b5f
 80089c4:	08008add 	.word	0x08008add
 80089c8:	08008b5f 	.word	0x08008b5f
 80089cc:	08008b5f 	.word	0x08008b5f
 80089d0:	08008b5f 	.word	0x08008b5f
 80089d4:	08008b1d 	.word	0x08008b1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68b9      	ldr	r1, [r7, #8]
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 fa68 	bl	8008eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699a      	ldr	r2, [r3, #24]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0208 	orr.w	r2, r2, #8
 80089f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699a      	ldr	r2, [r3, #24]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f022 0204 	bic.w	r2, r2, #4
 8008a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6999      	ldr	r1, [r3, #24]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	619a      	str	r2, [r3, #24]
      break;
 8008a16:	e0a5      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68b9      	ldr	r1, [r7, #8]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 fad8 	bl	8008fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	699a      	ldr	r2, [r3, #24]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	699a      	ldr	r2, [r3, #24]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6999      	ldr	r1, [r3, #24]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	021a      	lsls	r2, r3, #8
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	619a      	str	r2, [r3, #24]
      break;
 8008a58:	e084      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fb41 	bl	80090e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69da      	ldr	r2, [r3, #28]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0208 	orr.w	r2, r2, #8
 8008a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	69da      	ldr	r2, [r3, #28]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0204 	bic.w	r2, r2, #4
 8008a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69d9      	ldr	r1, [r3, #28]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	691a      	ldr	r2, [r3, #16]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	61da      	str	r2, [r3, #28]
      break;
 8008a98:	e064      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fba9 	bl	80091f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69da      	ldr	r2, [r3, #28]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	69da      	ldr	r2, [r3, #28]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	69d9      	ldr	r1, [r3, #28]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	021a      	lsls	r2, r3, #8
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	61da      	str	r2, [r3, #28]
      break;
 8008ada:	e043      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68b9      	ldr	r1, [r7, #8]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 fbf2 	bl	80092cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0208 	orr.w	r2, r2, #8
 8008af6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f022 0204 	bic.w	r2, r2, #4
 8008b06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	691a      	ldr	r2, [r3, #16]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b1a:	e023      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68b9      	ldr	r1, [r7, #8]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 fc36 	bl	8009394 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	021a      	lsls	r2, r3, #8
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b5c:	e002      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	75fb      	strb	r3, [r7, #23]
      break;
 8008b62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop

08008b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_TIM_ConfigClockSource+0x1c>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e0dc      	b.n	8008d4e <HAL_TIM_ConfigClockSource+0x1d6>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	4b6a      	ldr	r3, [pc, #424]	; (8008d58 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a64      	ldr	r2, [pc, #400]	; (8008d5c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	f000 80a9 	beq.w	8008d22 <HAL_TIM_ConfigClockSource+0x1aa>
 8008bd0:	4a62      	ldr	r2, [pc, #392]	; (8008d5c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	f200 80ae 	bhi.w	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008bd8:	4a61      	ldr	r2, [pc, #388]	; (8008d60 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	f000 80a1 	beq.w	8008d22 <HAL_TIM_ConfigClockSource+0x1aa>
 8008be0:	4a5f      	ldr	r2, [pc, #380]	; (8008d60 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	f200 80a6 	bhi.w	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008be8:	4a5e      	ldr	r2, [pc, #376]	; (8008d64 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	f000 8099 	beq.w	8008d22 <HAL_TIM_ConfigClockSource+0x1aa>
 8008bf0:	4a5c      	ldr	r2, [pc, #368]	; (8008d64 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	f200 809e 	bhi.w	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008bf8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008bfc:	f000 8091 	beq.w	8008d22 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c04:	f200 8096 	bhi.w	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c0c:	f000 8089 	beq.w	8008d22 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c14:	f200 808e 	bhi.w	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c1c:	d03e      	beq.n	8008c9c <HAL_TIM_ConfigClockSource+0x124>
 8008c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c22:	f200 8087 	bhi.w	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c2a:	f000 8086 	beq.w	8008d3a <HAL_TIM_ConfigClockSource+0x1c2>
 8008c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c32:	d87f      	bhi.n	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c34:	2b70      	cmp	r3, #112	; 0x70
 8008c36:	d01a      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0xf6>
 8008c38:	2b70      	cmp	r3, #112	; 0x70
 8008c3a:	d87b      	bhi.n	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c3c:	2b60      	cmp	r3, #96	; 0x60
 8008c3e:	d050      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0x16a>
 8008c40:	2b60      	cmp	r3, #96	; 0x60
 8008c42:	d877      	bhi.n	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c44:	2b50      	cmp	r3, #80	; 0x50
 8008c46:	d03c      	beq.n	8008cc2 <HAL_TIM_ConfigClockSource+0x14a>
 8008c48:	2b50      	cmp	r3, #80	; 0x50
 8008c4a:	d873      	bhi.n	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c4c:	2b40      	cmp	r3, #64	; 0x40
 8008c4e:	d058      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x18a>
 8008c50:	2b40      	cmp	r3, #64	; 0x40
 8008c52:	d86f      	bhi.n	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c54:	2b30      	cmp	r3, #48	; 0x30
 8008c56:	d064      	beq.n	8008d22 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c58:	2b30      	cmp	r3, #48	; 0x30
 8008c5a:	d86b      	bhi.n	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c5c:	2b20      	cmp	r3, #32
 8008c5e:	d060      	beq.n	8008d22 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c60:	2b20      	cmp	r3, #32
 8008c62:	d867      	bhi.n	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d05c      	beq.n	8008d22 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c68:	2b10      	cmp	r3, #16
 8008c6a:	d05a      	beq.n	8008d22 <HAL_TIM_ConfigClockSource+0x1aa>
 8008c6c:	e062      	b.n	8008d34 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c7e:	f000 fc6d 	bl	800955c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	609a      	str	r2, [r3, #8]
      break;
 8008c9a:	e04f      	b.n	8008d3c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cac:	f000 fc56 	bl	800955c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cbe:	609a      	str	r2, [r3, #8]
      break;
 8008cc0:	e03c      	b.n	8008d3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f000 fbc6 	bl	8009460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2150      	movs	r1, #80	; 0x50
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fc20 	bl	8009520 <TIM_ITRx_SetConfig>
      break;
 8008ce0:	e02c      	b.n	8008d3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f000 fbe5 	bl	80094be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2160      	movs	r1, #96	; 0x60
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 fc10 	bl	8009520 <TIM_ITRx_SetConfig>
      break;
 8008d00:	e01c      	b.n	8008d3c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f000 fba6 	bl	8009460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2140      	movs	r1, #64	; 0x40
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fc00 	bl	8009520 <TIM_ITRx_SetConfig>
      break;
 8008d20:	e00c      	b.n	8008d3c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	f000 fbf7 	bl	8009520 <TIM_ITRx_SetConfig>
      break;
 8008d32:	e003      	b.n	8008d3c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	73fb      	strb	r3, [r7, #15]
      break;
 8008d38:	e000      	b.n	8008d3c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	ffceff88 	.word	0xffceff88
 8008d5c:	00100040 	.word	0x00100040
 8008d60:	00100030 	.word	0x00100030
 8008d64:	00100020 	.word	0x00100020

08008d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a44      	ldr	r2, [pc, #272]	; (8008e8c <TIM_Base_SetConfig+0x124>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d013      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d86:	d00f      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a41      	ldr	r2, [pc, #260]	; (8008e90 <TIM_Base_SetConfig+0x128>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d00b      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a40      	ldr	r2, [pc, #256]	; (8008e94 <TIM_Base_SetConfig+0x12c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d007      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a3f      	ldr	r2, [pc, #252]	; (8008e98 <TIM_Base_SetConfig+0x130>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <TIM_Base_SetConfig+0x40>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a3e      	ldr	r2, [pc, #248]	; (8008e9c <TIM_Base_SetConfig+0x134>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d108      	bne.n	8008dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a33      	ldr	r2, [pc, #204]	; (8008e8c <TIM_Base_SetConfig+0x124>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d027      	beq.n	8008e12 <TIM_Base_SetConfig+0xaa>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc8:	d023      	beq.n	8008e12 <TIM_Base_SetConfig+0xaa>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a30      	ldr	r2, [pc, #192]	; (8008e90 <TIM_Base_SetConfig+0x128>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d01f      	beq.n	8008e12 <TIM_Base_SetConfig+0xaa>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a2f      	ldr	r2, [pc, #188]	; (8008e94 <TIM_Base_SetConfig+0x12c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d01b      	beq.n	8008e12 <TIM_Base_SetConfig+0xaa>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a2e      	ldr	r2, [pc, #184]	; (8008e98 <TIM_Base_SetConfig+0x130>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d017      	beq.n	8008e12 <TIM_Base_SetConfig+0xaa>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a2d      	ldr	r2, [pc, #180]	; (8008e9c <TIM_Base_SetConfig+0x134>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d013      	beq.n	8008e12 <TIM_Base_SetConfig+0xaa>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a2c      	ldr	r2, [pc, #176]	; (8008ea0 <TIM_Base_SetConfig+0x138>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d00f      	beq.n	8008e12 <TIM_Base_SetConfig+0xaa>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a2b      	ldr	r2, [pc, #172]	; (8008ea4 <TIM_Base_SetConfig+0x13c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00b      	beq.n	8008e12 <TIM_Base_SetConfig+0xaa>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a2a      	ldr	r2, [pc, #168]	; (8008ea8 <TIM_Base_SetConfig+0x140>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d007      	beq.n	8008e12 <TIM_Base_SetConfig+0xaa>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a29      	ldr	r2, [pc, #164]	; (8008eac <TIM_Base_SetConfig+0x144>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_Base_SetConfig+0xaa>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a28      	ldr	r2, [pc, #160]	; (8008eb0 <TIM_Base_SetConfig+0x148>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d108      	bne.n	8008e24 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a10      	ldr	r2, [pc, #64]	; (8008e8c <TIM_Base_SetConfig+0x124>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d00f      	beq.n	8008e70 <TIM_Base_SetConfig+0x108>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a12      	ldr	r2, [pc, #72]	; (8008e9c <TIM_Base_SetConfig+0x134>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00b      	beq.n	8008e70 <TIM_Base_SetConfig+0x108>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a11      	ldr	r2, [pc, #68]	; (8008ea0 <TIM_Base_SetConfig+0x138>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d007      	beq.n	8008e70 <TIM_Base_SetConfig+0x108>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a10      	ldr	r2, [pc, #64]	; (8008ea4 <TIM_Base_SetConfig+0x13c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d003      	beq.n	8008e70 <TIM_Base_SetConfig+0x108>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a0f      	ldr	r2, [pc, #60]	; (8008ea8 <TIM_Base_SetConfig+0x140>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d103      	bne.n	8008e78 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	691a      	ldr	r2, [r3, #16]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	615a      	str	r2, [r3, #20]
}
 8008e7e:	bf00      	nop
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	40010000 	.word	0x40010000
 8008e90:	40000400 	.word	0x40000400
 8008e94:	40000800 	.word	0x40000800
 8008e98:	40000c00 	.word	0x40000c00
 8008e9c:	40010400 	.word	0x40010400
 8008ea0:	40014000 	.word	0x40014000
 8008ea4:	40014400 	.word	0x40014400
 8008ea8:	40014800 	.word	0x40014800
 8008eac:	4000e000 	.word	0x4000e000
 8008eb0:	4000e400 	.word	0x4000e400

08008eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b087      	sub	sp, #28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f023 0201 	bic.w	r2, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4b37      	ldr	r3, [pc, #220]	; (8008fbc <TIM_OC1_SetConfig+0x108>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f023 0302 	bic.w	r3, r3, #2
 8008efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a2d      	ldr	r2, [pc, #180]	; (8008fc0 <TIM_OC1_SetConfig+0x10c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00f      	beq.n	8008f30 <TIM_OC1_SetConfig+0x7c>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a2c      	ldr	r2, [pc, #176]	; (8008fc4 <TIM_OC1_SetConfig+0x110>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d00b      	beq.n	8008f30 <TIM_OC1_SetConfig+0x7c>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a2b      	ldr	r2, [pc, #172]	; (8008fc8 <TIM_OC1_SetConfig+0x114>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d007      	beq.n	8008f30 <TIM_OC1_SetConfig+0x7c>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a2a      	ldr	r2, [pc, #168]	; (8008fcc <TIM_OC1_SetConfig+0x118>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d003      	beq.n	8008f30 <TIM_OC1_SetConfig+0x7c>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a29      	ldr	r2, [pc, #164]	; (8008fd0 <TIM_OC1_SetConfig+0x11c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10c      	bne.n	8008f4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f023 0308 	bic.w	r3, r3, #8
 8008f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f023 0304 	bic.w	r3, r3, #4
 8008f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a1c      	ldr	r2, [pc, #112]	; (8008fc0 <TIM_OC1_SetConfig+0x10c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d00f      	beq.n	8008f72 <TIM_OC1_SetConfig+0xbe>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a1b      	ldr	r2, [pc, #108]	; (8008fc4 <TIM_OC1_SetConfig+0x110>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00b      	beq.n	8008f72 <TIM_OC1_SetConfig+0xbe>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a1a      	ldr	r2, [pc, #104]	; (8008fc8 <TIM_OC1_SetConfig+0x114>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d007      	beq.n	8008f72 <TIM_OC1_SetConfig+0xbe>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a19      	ldr	r2, [pc, #100]	; (8008fcc <TIM_OC1_SetConfig+0x118>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d003      	beq.n	8008f72 <TIM_OC1_SetConfig+0xbe>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a18      	ldr	r2, [pc, #96]	; (8008fd0 <TIM_OC1_SetConfig+0x11c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d111      	bne.n	8008f96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	693a      	ldr	r2, [r7, #16]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	621a      	str	r2, [r3, #32]
}
 8008fb0:	bf00      	nop
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	fffeff8f 	.word	0xfffeff8f
 8008fc0:	40010000 	.word	0x40010000
 8008fc4:	40010400 	.word	0x40010400
 8008fc8:	40014000 	.word	0x40014000
 8008fcc:	40014400 	.word	0x40014400
 8008fd0:	40014800 	.word	0x40014800

08008fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f023 0210 	bic.w	r2, r3, #16
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	4b34      	ldr	r3, [pc, #208]	; (80090d0 <TIM_OC2_SetConfig+0xfc>)
 8009000:	4013      	ands	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800900a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	021b      	lsls	r3, r3, #8
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f023 0320 	bic.w	r3, r3, #32
 800901e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	4313      	orrs	r3, r2
 800902a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a29      	ldr	r2, [pc, #164]	; (80090d4 <TIM_OC2_SetConfig+0x100>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d003      	beq.n	800903c <TIM_OC2_SetConfig+0x68>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a28      	ldr	r2, [pc, #160]	; (80090d8 <TIM_OC2_SetConfig+0x104>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d10d      	bne.n	8009058 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	011b      	lsls	r3, r3, #4
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4313      	orrs	r3, r2
 800904e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009056:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a1e      	ldr	r2, [pc, #120]	; (80090d4 <TIM_OC2_SetConfig+0x100>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d00f      	beq.n	8009080 <TIM_OC2_SetConfig+0xac>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a1d      	ldr	r2, [pc, #116]	; (80090d8 <TIM_OC2_SetConfig+0x104>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00b      	beq.n	8009080 <TIM_OC2_SetConfig+0xac>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a1c      	ldr	r2, [pc, #112]	; (80090dc <TIM_OC2_SetConfig+0x108>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d007      	beq.n	8009080 <TIM_OC2_SetConfig+0xac>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a1b      	ldr	r2, [pc, #108]	; (80090e0 <TIM_OC2_SetConfig+0x10c>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d003      	beq.n	8009080 <TIM_OC2_SetConfig+0xac>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a1a      	ldr	r2, [pc, #104]	; (80090e4 <TIM_OC2_SetConfig+0x110>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d113      	bne.n	80090a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800908e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	4313      	orrs	r3, r2
 800909a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	621a      	str	r2, [r3, #32]
}
 80090c2:	bf00      	nop
 80090c4:	371c      	adds	r7, #28
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	feff8fff 	.word	0xfeff8fff
 80090d4:	40010000 	.word	0x40010000
 80090d8:	40010400 	.word	0x40010400
 80090dc:	40014000 	.word	0x40014000
 80090e0:	40014400 	.word	0x40014400
 80090e4:	40014800 	.word	0x40014800

080090e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4b33      	ldr	r3, [pc, #204]	; (80091e0 <TIM_OC3_SetConfig+0xf8>)
 8009114:	4013      	ands	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f023 0303 	bic.w	r3, r3, #3
 800911e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	021b      	lsls	r3, r3, #8
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	4313      	orrs	r3, r2
 800913c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a28      	ldr	r2, [pc, #160]	; (80091e4 <TIM_OC3_SetConfig+0xfc>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d003      	beq.n	800914e <TIM_OC3_SetConfig+0x66>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a27      	ldr	r2, [pc, #156]	; (80091e8 <TIM_OC3_SetConfig+0x100>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d10d      	bne.n	800916a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	021b      	lsls	r3, r3, #8
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	4313      	orrs	r3, r2
 8009160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a1d      	ldr	r2, [pc, #116]	; (80091e4 <TIM_OC3_SetConfig+0xfc>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00f      	beq.n	8009192 <TIM_OC3_SetConfig+0xaa>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a1c      	ldr	r2, [pc, #112]	; (80091e8 <TIM_OC3_SetConfig+0x100>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00b      	beq.n	8009192 <TIM_OC3_SetConfig+0xaa>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a1b      	ldr	r2, [pc, #108]	; (80091ec <TIM_OC3_SetConfig+0x104>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d007      	beq.n	8009192 <TIM_OC3_SetConfig+0xaa>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a1a      	ldr	r2, [pc, #104]	; (80091f0 <TIM_OC3_SetConfig+0x108>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d003      	beq.n	8009192 <TIM_OC3_SetConfig+0xaa>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a19      	ldr	r2, [pc, #100]	; (80091f4 <TIM_OC3_SetConfig+0x10c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d113      	bne.n	80091ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	011b      	lsls	r3, r3, #4
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	621a      	str	r2, [r3, #32]
}
 80091d4:	bf00      	nop
 80091d6:	371c      	adds	r7, #28
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	fffeff8f 	.word	0xfffeff8f
 80091e4:	40010000 	.word	0x40010000
 80091e8:	40010400 	.word	0x40010400
 80091ec:	40014000 	.word	0x40014000
 80091f0:	40014400 	.word	0x40014400
 80091f4:	40014800 	.word	0x40014800

080091f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4b24      	ldr	r3, [pc, #144]	; (80092b4 <TIM_OC4_SetConfig+0xbc>)
 8009224:	4013      	ands	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800922e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	031b      	lsls	r3, r3, #12
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a19      	ldr	r2, [pc, #100]	; (80092b8 <TIM_OC4_SetConfig+0xc0>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d00f      	beq.n	8009278 <TIM_OC4_SetConfig+0x80>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a18      	ldr	r2, [pc, #96]	; (80092bc <TIM_OC4_SetConfig+0xc4>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d00b      	beq.n	8009278 <TIM_OC4_SetConfig+0x80>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a17      	ldr	r2, [pc, #92]	; (80092c0 <TIM_OC4_SetConfig+0xc8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d007      	beq.n	8009278 <TIM_OC4_SetConfig+0x80>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a16      	ldr	r2, [pc, #88]	; (80092c4 <TIM_OC4_SetConfig+0xcc>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d003      	beq.n	8009278 <TIM_OC4_SetConfig+0x80>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a15      	ldr	r2, [pc, #84]	; (80092c8 <TIM_OC4_SetConfig+0xd0>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d109      	bne.n	800928c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800927e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	019b      	lsls	r3, r3, #6
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	4313      	orrs	r3, r2
 800928a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	621a      	str	r2, [r3, #32]
}
 80092a6:	bf00      	nop
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	feff8fff 	.word	0xfeff8fff
 80092b8:	40010000 	.word	0x40010000
 80092bc:	40010400 	.word	0x40010400
 80092c0:	40014000 	.word	0x40014000
 80092c4:	40014400 	.word	0x40014400
 80092c8:	40014800 	.word	0x40014800

080092cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	4b21      	ldr	r3, [pc, #132]	; (800937c <TIM_OC5_SetConfig+0xb0>)
 80092f8:	4013      	ands	r3, r2
 80092fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800930c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	041b      	lsls	r3, r3, #16
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	4313      	orrs	r3, r2
 8009318:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a18      	ldr	r2, [pc, #96]	; (8009380 <TIM_OC5_SetConfig+0xb4>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00f      	beq.n	8009342 <TIM_OC5_SetConfig+0x76>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a17      	ldr	r2, [pc, #92]	; (8009384 <TIM_OC5_SetConfig+0xb8>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d00b      	beq.n	8009342 <TIM_OC5_SetConfig+0x76>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a16      	ldr	r2, [pc, #88]	; (8009388 <TIM_OC5_SetConfig+0xbc>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d007      	beq.n	8009342 <TIM_OC5_SetConfig+0x76>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a15      	ldr	r2, [pc, #84]	; (800938c <TIM_OC5_SetConfig+0xc0>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d003      	beq.n	8009342 <TIM_OC5_SetConfig+0x76>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a14      	ldr	r2, [pc, #80]	; (8009390 <TIM_OC5_SetConfig+0xc4>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d109      	bne.n	8009356 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009348:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	4313      	orrs	r3, r2
 8009354:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	621a      	str	r2, [r3, #32]
}
 8009370:	bf00      	nop
 8009372:	371c      	adds	r7, #28
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	fffeff8f 	.word	0xfffeff8f
 8009380:	40010000 	.word	0x40010000
 8009384:	40010400 	.word	0x40010400
 8009388:	40014000 	.word	0x40014000
 800938c:	40014400 	.word	0x40014400
 8009390:	40014800 	.word	0x40014800

08009394 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4b22      	ldr	r3, [pc, #136]	; (8009448 <TIM_OC6_SetConfig+0xb4>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	021b      	lsls	r3, r3, #8
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	051b      	lsls	r3, r3, #20
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a19      	ldr	r2, [pc, #100]	; (800944c <TIM_OC6_SetConfig+0xb8>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d00f      	beq.n	800940c <TIM_OC6_SetConfig+0x78>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a18      	ldr	r2, [pc, #96]	; (8009450 <TIM_OC6_SetConfig+0xbc>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d00b      	beq.n	800940c <TIM_OC6_SetConfig+0x78>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a17      	ldr	r2, [pc, #92]	; (8009454 <TIM_OC6_SetConfig+0xc0>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d007      	beq.n	800940c <TIM_OC6_SetConfig+0x78>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a16      	ldr	r2, [pc, #88]	; (8009458 <TIM_OC6_SetConfig+0xc4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d003      	beq.n	800940c <TIM_OC6_SetConfig+0x78>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a15      	ldr	r2, [pc, #84]	; (800945c <TIM_OC6_SetConfig+0xc8>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d109      	bne.n	8009420 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009412:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	029b      	lsls	r3, r3, #10
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	621a      	str	r2, [r3, #32]
}
 800943a:	bf00      	nop
 800943c:	371c      	adds	r7, #28
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	feff8fff 	.word	0xfeff8fff
 800944c:	40010000 	.word	0x40010000
 8009450:	40010400 	.word	0x40010400
 8009454:	40014000 	.word	0x40014000
 8009458:	40014400 	.word	0x40014400
 800945c:	40014800 	.word	0x40014800

08009460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	f023 0201 	bic.w	r2, r3, #1
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800948a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	011b      	lsls	r3, r3, #4
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	4313      	orrs	r3, r2
 8009494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f023 030a 	bic.w	r3, r3, #10
 800949c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	621a      	str	r2, [r3, #32]
}
 80094b2:	bf00      	nop
 80094b4:	371c      	adds	r7, #28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094be:	b480      	push	{r7}
 80094c0:	b087      	sub	sp, #28
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f023 0210 	bic.w	r2, r3, #16
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a1b      	ldr	r3, [r3, #32]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	031b      	lsls	r3, r3, #12
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	011b      	lsls	r3, r3, #4
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	4313      	orrs	r3, r2
 8009504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	621a      	str	r2, [r3, #32]
}
 8009512:	bf00      	nop
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
	...

08009520 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4b09      	ldr	r3, [pc, #36]	; (8009558 <TIM_ITRx_SetConfig+0x38>)
 8009534:	4013      	ands	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4313      	orrs	r3, r2
 800953e:	f043 0307 	orr.w	r3, r3, #7
 8009542:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	609a      	str	r2, [r3, #8]
}
 800954a:	bf00      	nop
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	ffcfff8f 	.word	0xffcfff8f

0800955c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800955c:	b480      	push	{r7}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
 8009568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	021a      	lsls	r2, r3, #8
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	431a      	orrs	r2, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	4313      	orrs	r3, r2
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	4313      	orrs	r3, r2
 8009588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	609a      	str	r2, [r3, #8]
}
 8009590:	bf00      	nop
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d101      	bne.n	80095b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095b0:	2302      	movs	r3, #2
 80095b2:	e077      	b.n	80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2202      	movs	r2, #2
 80095c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a35      	ldr	r2, [pc, #212]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d004      	beq.n	80095e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a34      	ldr	r2, [pc, #208]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d108      	bne.n	80095fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009600:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a25      	ldr	r2, [pc, #148]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d02c      	beq.n	8009678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009626:	d027      	beq.n	8009678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a22      	ldr	r2, [pc, #136]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d022      	beq.n	8009678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a21      	ldr	r2, [pc, #132]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d01d      	beq.n	8009678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a1f      	ldr	r2, [pc, #124]	; (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d018      	beq.n	8009678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a1a      	ldr	r2, [pc, #104]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d013      	beq.n	8009678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a1b      	ldr	r2, [pc, #108]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d00e      	beq.n	8009678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a1a      	ldr	r2, [pc, #104]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d009      	beq.n	8009678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a18      	ldr	r2, [pc, #96]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d004      	beq.n	8009678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a17      	ldr	r2, [pc, #92]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d10c      	bne.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800967e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	4313      	orrs	r3, r2
 8009688:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	40010000 	.word	0x40010000
 80096b4:	40010400 	.word	0x40010400
 80096b8:	40000400 	.word	0x40000400
 80096bc:	40000800 	.word	0x40000800
 80096c0:	40000c00 	.word	0x40000c00
 80096c4:	40001800 	.word	0x40001800
 80096c8:	40014000 	.word	0x40014000
 80096cc:	4000e000 	.word	0x4000e000
 80096d0:	4000e400 	.word	0x4000e400

080096d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d101      	bne.n	80096f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096ec:	2302      	movs	r3, #2
 80096ee:	e087      	b.n	8009800 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	4313      	orrs	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	4313      	orrs	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4313      	orrs	r3, r2
 800972e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	4313      	orrs	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	4313      	orrs	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009756:	4313      	orrs	r3, r2
 8009758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	041b      	lsls	r3, r3, #16
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a27      	ldr	r2, [pc, #156]	; (800980c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d004      	beq.n	800977e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a25      	ldr	r2, [pc, #148]	; (8009810 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d106      	bne.n	800978c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	4313      	orrs	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a1e      	ldr	r2, [pc, #120]	; (800980c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d004      	beq.n	80097a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a1d      	ldr	r2, [pc, #116]	; (8009810 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d126      	bne.n	80097ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097aa:	051b      	lsls	r3, r3, #20
 80097ac:	4313      	orrs	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	4313      	orrs	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a0e      	ldr	r2, [pc, #56]	; (800980c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d004      	beq.n	80097e0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a0d      	ldr	r2, [pc, #52]	; (8009810 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d106      	bne.n	80097ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	4313      	orrs	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	40010000 	.word	0x40010000
 8009810:	40010400 	.word	0x40010400

08009814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e042      	b.n	80098ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800982c:	2b00      	cmp	r3, #0
 800982e:	d106      	bne.n	800983e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7f8 fed3 	bl	80025e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2224      	movs	r2, #36	; 0x24
 8009842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0201 	bic.w	r2, r2, #1
 8009854:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f82c 	bl	80098b4 <UART_SetConfig>
 800985c:	4603      	mov	r3, r0
 800985e:	2b01      	cmp	r3, #1
 8009860:	d101      	bne.n	8009866 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e022      	b.n	80098ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fe8c 	bl	800a58c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689a      	ldr	r2, [r3, #8]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f042 0201 	orr.w	r2, r2, #1
 80098a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 ff13 	bl	800a6d0 <UART_CheckIdleState>
 80098aa:	4603      	mov	r3, r0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098b8:	b092      	sub	sp, #72	; 0x48
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	689a      	ldr	r2, [r3, #8]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	431a      	orrs	r2, r3
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	4313      	orrs	r3, r2
 80098da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	4bbe      	ldr	r3, [pc, #760]	; (8009bdc <UART_SetConfig+0x328>)
 80098e4:	4013      	ands	r3, r2
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	6812      	ldr	r2, [r2, #0]
 80098ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098ec:	430b      	orrs	r3, r1
 80098ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	68da      	ldr	r2, [r3, #12]
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	430a      	orrs	r2, r1
 8009904:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4ab3      	ldr	r2, [pc, #716]	; (8009be0 <UART_SetConfig+0x32c>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d004      	beq.n	8009920 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800991c:	4313      	orrs	r3, r2
 800991e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689a      	ldr	r2, [r3, #8]
 8009926:	4baf      	ldr	r3, [pc, #700]	; (8009be4 <UART_SetConfig+0x330>)
 8009928:	4013      	ands	r3, r2
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	6812      	ldr	r2, [r2, #0]
 800992e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009930:	430b      	orrs	r3, r1
 8009932:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	f023 010f 	bic.w	r1, r3, #15
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4aa6      	ldr	r2, [pc, #664]	; (8009be8 <UART_SetConfig+0x334>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d177      	bne.n	8009a44 <UART_SetConfig+0x190>
 8009954:	4ba5      	ldr	r3, [pc, #660]	; (8009bec <UART_SetConfig+0x338>)
 8009956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009958:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800995c:	2b28      	cmp	r3, #40	; 0x28
 800995e:	d86d      	bhi.n	8009a3c <UART_SetConfig+0x188>
 8009960:	a201      	add	r2, pc, #4	; (adr r2, 8009968 <UART_SetConfig+0xb4>)
 8009962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009966:	bf00      	nop
 8009968:	08009a0d 	.word	0x08009a0d
 800996c:	08009a3d 	.word	0x08009a3d
 8009970:	08009a3d 	.word	0x08009a3d
 8009974:	08009a3d 	.word	0x08009a3d
 8009978:	08009a3d 	.word	0x08009a3d
 800997c:	08009a3d 	.word	0x08009a3d
 8009980:	08009a3d 	.word	0x08009a3d
 8009984:	08009a3d 	.word	0x08009a3d
 8009988:	08009a15 	.word	0x08009a15
 800998c:	08009a3d 	.word	0x08009a3d
 8009990:	08009a3d 	.word	0x08009a3d
 8009994:	08009a3d 	.word	0x08009a3d
 8009998:	08009a3d 	.word	0x08009a3d
 800999c:	08009a3d 	.word	0x08009a3d
 80099a0:	08009a3d 	.word	0x08009a3d
 80099a4:	08009a3d 	.word	0x08009a3d
 80099a8:	08009a1d 	.word	0x08009a1d
 80099ac:	08009a3d 	.word	0x08009a3d
 80099b0:	08009a3d 	.word	0x08009a3d
 80099b4:	08009a3d 	.word	0x08009a3d
 80099b8:	08009a3d 	.word	0x08009a3d
 80099bc:	08009a3d 	.word	0x08009a3d
 80099c0:	08009a3d 	.word	0x08009a3d
 80099c4:	08009a3d 	.word	0x08009a3d
 80099c8:	08009a25 	.word	0x08009a25
 80099cc:	08009a3d 	.word	0x08009a3d
 80099d0:	08009a3d 	.word	0x08009a3d
 80099d4:	08009a3d 	.word	0x08009a3d
 80099d8:	08009a3d 	.word	0x08009a3d
 80099dc:	08009a3d 	.word	0x08009a3d
 80099e0:	08009a3d 	.word	0x08009a3d
 80099e4:	08009a3d 	.word	0x08009a3d
 80099e8:	08009a2d 	.word	0x08009a2d
 80099ec:	08009a3d 	.word	0x08009a3d
 80099f0:	08009a3d 	.word	0x08009a3d
 80099f4:	08009a3d 	.word	0x08009a3d
 80099f8:	08009a3d 	.word	0x08009a3d
 80099fc:	08009a3d 	.word	0x08009a3d
 8009a00:	08009a3d 	.word	0x08009a3d
 8009a04:	08009a3d 	.word	0x08009a3d
 8009a08:	08009a35 	.word	0x08009a35
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a12:	e326      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a14:	2304      	movs	r3, #4
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1a:	e322      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a22:	e31e      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a24:	2310      	movs	r3, #16
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2a:	e31a      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a2c:	2320      	movs	r3, #32
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e316      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a34:	2340      	movs	r3, #64	; 0x40
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3a:	e312      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a3c:	2380      	movs	r3, #128	; 0x80
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a42:	e30e      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a69      	ldr	r2, [pc, #420]	; (8009bf0 <UART_SetConfig+0x33c>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d130      	bne.n	8009ab0 <UART_SetConfig+0x1fc>
 8009a4e:	4b67      	ldr	r3, [pc, #412]	; (8009bec <UART_SetConfig+0x338>)
 8009a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a52:	f003 0307 	and.w	r3, r3, #7
 8009a56:	2b05      	cmp	r3, #5
 8009a58:	d826      	bhi.n	8009aa8 <UART_SetConfig+0x1f4>
 8009a5a:	a201      	add	r2, pc, #4	; (adr r2, 8009a60 <UART_SetConfig+0x1ac>)
 8009a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a60:	08009a79 	.word	0x08009a79
 8009a64:	08009a81 	.word	0x08009a81
 8009a68:	08009a89 	.word	0x08009a89
 8009a6c:	08009a91 	.word	0x08009a91
 8009a70:	08009a99 	.word	0x08009a99
 8009a74:	08009aa1 	.word	0x08009aa1
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7e:	e2f0      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a80:	2304      	movs	r3, #4
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a86:	e2ec      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a88:	2308      	movs	r3, #8
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8e:	e2e8      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a90:	2310      	movs	r3, #16
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a96:	e2e4      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009a98:	2320      	movs	r3, #32
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9e:	e2e0      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009aa0:	2340      	movs	r3, #64	; 0x40
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa6:	e2dc      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009aa8:	2380      	movs	r3, #128	; 0x80
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aae:	e2d8      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a4f      	ldr	r2, [pc, #316]	; (8009bf4 <UART_SetConfig+0x340>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d130      	bne.n	8009b1c <UART_SetConfig+0x268>
 8009aba:	4b4c      	ldr	r3, [pc, #304]	; (8009bec <UART_SetConfig+0x338>)
 8009abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009abe:	f003 0307 	and.w	r3, r3, #7
 8009ac2:	2b05      	cmp	r3, #5
 8009ac4:	d826      	bhi.n	8009b14 <UART_SetConfig+0x260>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <UART_SetConfig+0x218>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009ae5 	.word	0x08009ae5
 8009ad0:	08009aed 	.word	0x08009aed
 8009ad4:	08009af5 	.word	0x08009af5
 8009ad8:	08009afd 	.word	0x08009afd
 8009adc:	08009b05 	.word	0x08009b05
 8009ae0:	08009b0d 	.word	0x08009b0d
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e2ba      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009aec:	2304      	movs	r3, #4
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e2b6      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009af4:	2308      	movs	r3, #8
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e2b2      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009afc:	2310      	movs	r3, #16
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e2ae      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b04:	2320      	movs	r3, #32
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e2aa      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b0c:	2340      	movs	r3, #64	; 0x40
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e2a6      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b14:	2380      	movs	r3, #128	; 0x80
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1a:	e2a2      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a35      	ldr	r2, [pc, #212]	; (8009bf8 <UART_SetConfig+0x344>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d130      	bne.n	8009b88 <UART_SetConfig+0x2d4>
 8009b26:	4b31      	ldr	r3, [pc, #196]	; (8009bec <UART_SetConfig+0x338>)
 8009b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2a:	f003 0307 	and.w	r3, r3, #7
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	d826      	bhi.n	8009b80 <UART_SetConfig+0x2cc>
 8009b32:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <UART_SetConfig+0x284>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009b51 	.word	0x08009b51
 8009b3c:	08009b59 	.word	0x08009b59
 8009b40:	08009b61 	.word	0x08009b61
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b71 	.word	0x08009b71
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b56:	e284      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b58:	2304      	movs	r3, #4
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e280      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b60:	2308      	movs	r3, #8
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b66:	e27c      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b68:	2310      	movs	r3, #16
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e278      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b70:	2320      	movs	r3, #32
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e274      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b78:	2340      	movs	r3, #64	; 0x40
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e270      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b80:	2380      	movs	r3, #128	; 0x80
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b86:	e26c      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a1b      	ldr	r2, [pc, #108]	; (8009bfc <UART_SetConfig+0x348>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d142      	bne.n	8009c18 <UART_SetConfig+0x364>
 8009b92:	4b16      	ldr	r3, [pc, #88]	; (8009bec <UART_SetConfig+0x338>)
 8009b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b05      	cmp	r3, #5
 8009b9c:	d838      	bhi.n	8009c10 <UART_SetConfig+0x35c>
 8009b9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ba4 <UART_SetConfig+0x2f0>)
 8009ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba4:	08009bbd 	.word	0x08009bbd
 8009ba8:	08009bc5 	.word	0x08009bc5
 8009bac:	08009bcd 	.word	0x08009bcd
 8009bb0:	08009bd5 	.word	0x08009bd5
 8009bb4:	08009c01 	.word	0x08009c01
 8009bb8:	08009c09 	.word	0x08009c09
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc2:	e24e      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009bc4:	2304      	movs	r3, #4
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bca:	e24a      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009bcc:	2308      	movs	r3, #8
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd2:	e246      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e242      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009bdc:	cfff69f3 	.word	0xcfff69f3
 8009be0:	58000c00 	.word	0x58000c00
 8009be4:	11fff4ff 	.word	0x11fff4ff
 8009be8:	40011000 	.word	0x40011000
 8009bec:	58024400 	.word	0x58024400
 8009bf0:	40004400 	.word	0x40004400
 8009bf4:	40004800 	.word	0x40004800
 8009bf8:	40004c00 	.word	0x40004c00
 8009bfc:	40005000 	.word	0x40005000
 8009c00:	2320      	movs	r3, #32
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c06:	e22c      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009c08:	2340      	movs	r3, #64	; 0x40
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0e:	e228      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009c10:	2380      	movs	r3, #128	; 0x80
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c16:	e224      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4ab1      	ldr	r2, [pc, #708]	; (8009ee4 <UART_SetConfig+0x630>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d176      	bne.n	8009d10 <UART_SetConfig+0x45c>
 8009c22:	4bb1      	ldr	r3, [pc, #708]	; (8009ee8 <UART_SetConfig+0x634>)
 8009c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c2a:	2b28      	cmp	r3, #40	; 0x28
 8009c2c:	d86c      	bhi.n	8009d08 <UART_SetConfig+0x454>
 8009c2e:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <UART_SetConfig+0x380>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009cd9 	.word	0x08009cd9
 8009c38:	08009d09 	.word	0x08009d09
 8009c3c:	08009d09 	.word	0x08009d09
 8009c40:	08009d09 	.word	0x08009d09
 8009c44:	08009d09 	.word	0x08009d09
 8009c48:	08009d09 	.word	0x08009d09
 8009c4c:	08009d09 	.word	0x08009d09
 8009c50:	08009d09 	.word	0x08009d09
 8009c54:	08009ce1 	.word	0x08009ce1
 8009c58:	08009d09 	.word	0x08009d09
 8009c5c:	08009d09 	.word	0x08009d09
 8009c60:	08009d09 	.word	0x08009d09
 8009c64:	08009d09 	.word	0x08009d09
 8009c68:	08009d09 	.word	0x08009d09
 8009c6c:	08009d09 	.word	0x08009d09
 8009c70:	08009d09 	.word	0x08009d09
 8009c74:	08009ce9 	.word	0x08009ce9
 8009c78:	08009d09 	.word	0x08009d09
 8009c7c:	08009d09 	.word	0x08009d09
 8009c80:	08009d09 	.word	0x08009d09
 8009c84:	08009d09 	.word	0x08009d09
 8009c88:	08009d09 	.word	0x08009d09
 8009c8c:	08009d09 	.word	0x08009d09
 8009c90:	08009d09 	.word	0x08009d09
 8009c94:	08009cf1 	.word	0x08009cf1
 8009c98:	08009d09 	.word	0x08009d09
 8009c9c:	08009d09 	.word	0x08009d09
 8009ca0:	08009d09 	.word	0x08009d09
 8009ca4:	08009d09 	.word	0x08009d09
 8009ca8:	08009d09 	.word	0x08009d09
 8009cac:	08009d09 	.word	0x08009d09
 8009cb0:	08009d09 	.word	0x08009d09
 8009cb4:	08009cf9 	.word	0x08009cf9
 8009cb8:	08009d09 	.word	0x08009d09
 8009cbc:	08009d09 	.word	0x08009d09
 8009cc0:	08009d09 	.word	0x08009d09
 8009cc4:	08009d09 	.word	0x08009d09
 8009cc8:	08009d09 	.word	0x08009d09
 8009ccc:	08009d09 	.word	0x08009d09
 8009cd0:	08009d09 	.word	0x08009d09
 8009cd4:	08009d01 	.word	0x08009d01
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e1c0      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009ce0:	2304      	movs	r3, #4
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e1bc      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009ce8:	2308      	movs	r3, #8
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e1b8      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009cf0:	2310      	movs	r3, #16
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e1b4      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009cf8:	2320      	movs	r3, #32
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfe:	e1b0      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009d00:	2340      	movs	r3, #64	; 0x40
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d06:	e1ac      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009d08:	2380      	movs	r3, #128	; 0x80
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0e:	e1a8      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a75      	ldr	r2, [pc, #468]	; (8009eec <UART_SetConfig+0x638>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d130      	bne.n	8009d7c <UART_SetConfig+0x4c8>
 8009d1a:	4b73      	ldr	r3, [pc, #460]	; (8009ee8 <UART_SetConfig+0x634>)
 8009d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d1e:	f003 0307 	and.w	r3, r3, #7
 8009d22:	2b05      	cmp	r3, #5
 8009d24:	d826      	bhi.n	8009d74 <UART_SetConfig+0x4c0>
 8009d26:	a201      	add	r2, pc, #4	; (adr r2, 8009d2c <UART_SetConfig+0x478>)
 8009d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2c:	08009d45 	.word	0x08009d45
 8009d30:	08009d4d 	.word	0x08009d4d
 8009d34:	08009d55 	.word	0x08009d55
 8009d38:	08009d5d 	.word	0x08009d5d
 8009d3c:	08009d65 	.word	0x08009d65
 8009d40:	08009d6d 	.word	0x08009d6d
 8009d44:	2300      	movs	r3, #0
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e18a      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009d4c:	2304      	movs	r3, #4
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e186      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009d54:	2308      	movs	r3, #8
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e182      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d62:	e17e      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009d64:	2320      	movs	r3, #32
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6a:	e17a      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009d6c:	2340      	movs	r3, #64	; 0x40
 8009d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d72:	e176      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009d74:	2380      	movs	r3, #128	; 0x80
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d7a:	e172      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a5b      	ldr	r2, [pc, #364]	; (8009ef0 <UART_SetConfig+0x63c>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d130      	bne.n	8009de8 <UART_SetConfig+0x534>
 8009d86:	4b58      	ldr	r3, [pc, #352]	; (8009ee8 <UART_SetConfig+0x634>)
 8009d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	2b05      	cmp	r3, #5
 8009d90:	d826      	bhi.n	8009de0 <UART_SetConfig+0x52c>
 8009d92:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <UART_SetConfig+0x4e4>)
 8009d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d98:	08009db1 	.word	0x08009db1
 8009d9c:	08009db9 	.word	0x08009db9
 8009da0:	08009dc1 	.word	0x08009dc1
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009dd1 	.word	0x08009dd1
 8009dac:	08009dd9 	.word	0x08009dd9
 8009db0:	2300      	movs	r3, #0
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db6:	e154      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009db8:	2304      	movs	r3, #4
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e150      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc6:	e14c      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dce:	e148      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd6:	e144      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009dd8:	2340      	movs	r3, #64	; 0x40
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dde:	e140      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009de0:	2380      	movs	r3, #128	; 0x80
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de6:	e13c      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a41      	ldr	r2, [pc, #260]	; (8009ef4 <UART_SetConfig+0x640>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	f040 8082 	bne.w	8009ef8 <UART_SetConfig+0x644>
 8009df4:	4b3c      	ldr	r3, [pc, #240]	; (8009ee8 <UART_SetConfig+0x634>)
 8009df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dfc:	2b28      	cmp	r3, #40	; 0x28
 8009dfe:	d86d      	bhi.n	8009edc <UART_SetConfig+0x628>
 8009e00:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <UART_SetConfig+0x554>)
 8009e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e06:	bf00      	nop
 8009e08:	08009ead 	.word	0x08009ead
 8009e0c:	08009edd 	.word	0x08009edd
 8009e10:	08009edd 	.word	0x08009edd
 8009e14:	08009edd 	.word	0x08009edd
 8009e18:	08009edd 	.word	0x08009edd
 8009e1c:	08009edd 	.word	0x08009edd
 8009e20:	08009edd 	.word	0x08009edd
 8009e24:	08009edd 	.word	0x08009edd
 8009e28:	08009eb5 	.word	0x08009eb5
 8009e2c:	08009edd 	.word	0x08009edd
 8009e30:	08009edd 	.word	0x08009edd
 8009e34:	08009edd 	.word	0x08009edd
 8009e38:	08009edd 	.word	0x08009edd
 8009e3c:	08009edd 	.word	0x08009edd
 8009e40:	08009edd 	.word	0x08009edd
 8009e44:	08009edd 	.word	0x08009edd
 8009e48:	08009ebd 	.word	0x08009ebd
 8009e4c:	08009edd 	.word	0x08009edd
 8009e50:	08009edd 	.word	0x08009edd
 8009e54:	08009edd 	.word	0x08009edd
 8009e58:	08009edd 	.word	0x08009edd
 8009e5c:	08009edd 	.word	0x08009edd
 8009e60:	08009edd 	.word	0x08009edd
 8009e64:	08009edd 	.word	0x08009edd
 8009e68:	08009ec5 	.word	0x08009ec5
 8009e6c:	08009edd 	.word	0x08009edd
 8009e70:	08009edd 	.word	0x08009edd
 8009e74:	08009edd 	.word	0x08009edd
 8009e78:	08009edd 	.word	0x08009edd
 8009e7c:	08009edd 	.word	0x08009edd
 8009e80:	08009edd 	.word	0x08009edd
 8009e84:	08009edd 	.word	0x08009edd
 8009e88:	08009ecd 	.word	0x08009ecd
 8009e8c:	08009edd 	.word	0x08009edd
 8009e90:	08009edd 	.word	0x08009edd
 8009e94:	08009edd 	.word	0x08009edd
 8009e98:	08009edd 	.word	0x08009edd
 8009e9c:	08009edd 	.word	0x08009edd
 8009ea0:	08009edd 	.word	0x08009edd
 8009ea4:	08009edd 	.word	0x08009edd
 8009ea8:	08009ed5 	.word	0x08009ed5
 8009eac:	2301      	movs	r3, #1
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb2:	e0d6      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009eb4:	2304      	movs	r3, #4
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eba:	e0d2      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009ebc:	2308      	movs	r3, #8
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e0ce      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eca:	e0ca      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009ecc:	2320      	movs	r3, #32
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed2:	e0c6      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009ed4:	2340      	movs	r3, #64	; 0x40
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eda:	e0c2      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009edc:	2380      	movs	r3, #128	; 0x80
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e0be      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009ee4:	40011400 	.word	0x40011400
 8009ee8:	58024400 	.word	0x58024400
 8009eec:	40007800 	.word	0x40007800
 8009ef0:	40007c00 	.word	0x40007c00
 8009ef4:	40011800 	.word	0x40011800
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4aad      	ldr	r2, [pc, #692]	; (800a1b4 <UART_SetConfig+0x900>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d176      	bne.n	8009ff0 <UART_SetConfig+0x73c>
 8009f02:	4bad      	ldr	r3, [pc, #692]	; (800a1b8 <UART_SetConfig+0x904>)
 8009f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f0a:	2b28      	cmp	r3, #40	; 0x28
 8009f0c:	d86c      	bhi.n	8009fe8 <UART_SetConfig+0x734>
 8009f0e:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <UART_SetConfig+0x660>)
 8009f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f14:	08009fb9 	.word	0x08009fb9
 8009f18:	08009fe9 	.word	0x08009fe9
 8009f1c:	08009fe9 	.word	0x08009fe9
 8009f20:	08009fe9 	.word	0x08009fe9
 8009f24:	08009fe9 	.word	0x08009fe9
 8009f28:	08009fe9 	.word	0x08009fe9
 8009f2c:	08009fe9 	.word	0x08009fe9
 8009f30:	08009fe9 	.word	0x08009fe9
 8009f34:	08009fc1 	.word	0x08009fc1
 8009f38:	08009fe9 	.word	0x08009fe9
 8009f3c:	08009fe9 	.word	0x08009fe9
 8009f40:	08009fe9 	.word	0x08009fe9
 8009f44:	08009fe9 	.word	0x08009fe9
 8009f48:	08009fe9 	.word	0x08009fe9
 8009f4c:	08009fe9 	.word	0x08009fe9
 8009f50:	08009fe9 	.word	0x08009fe9
 8009f54:	08009fc9 	.word	0x08009fc9
 8009f58:	08009fe9 	.word	0x08009fe9
 8009f5c:	08009fe9 	.word	0x08009fe9
 8009f60:	08009fe9 	.word	0x08009fe9
 8009f64:	08009fe9 	.word	0x08009fe9
 8009f68:	08009fe9 	.word	0x08009fe9
 8009f6c:	08009fe9 	.word	0x08009fe9
 8009f70:	08009fe9 	.word	0x08009fe9
 8009f74:	08009fd1 	.word	0x08009fd1
 8009f78:	08009fe9 	.word	0x08009fe9
 8009f7c:	08009fe9 	.word	0x08009fe9
 8009f80:	08009fe9 	.word	0x08009fe9
 8009f84:	08009fe9 	.word	0x08009fe9
 8009f88:	08009fe9 	.word	0x08009fe9
 8009f8c:	08009fe9 	.word	0x08009fe9
 8009f90:	08009fe9 	.word	0x08009fe9
 8009f94:	08009fd9 	.word	0x08009fd9
 8009f98:	08009fe9 	.word	0x08009fe9
 8009f9c:	08009fe9 	.word	0x08009fe9
 8009fa0:	08009fe9 	.word	0x08009fe9
 8009fa4:	08009fe9 	.word	0x08009fe9
 8009fa8:	08009fe9 	.word	0x08009fe9
 8009fac:	08009fe9 	.word	0x08009fe9
 8009fb0:	08009fe9 	.word	0x08009fe9
 8009fb4:	08009fe1 	.word	0x08009fe1
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fbe:	e050      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009fc0:	2304      	movs	r3, #4
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc6:	e04c      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009fc8:	2308      	movs	r3, #8
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fce:	e048      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009fd0:	2310      	movs	r3, #16
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd6:	e044      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009fd8:	2320      	movs	r3, #32
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fde:	e040      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009fe0:	2340      	movs	r3, #64	; 0x40
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe6:	e03c      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009fe8:	2380      	movs	r3, #128	; 0x80
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fee:	e038      	b.n	800a062 <UART_SetConfig+0x7ae>
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a71      	ldr	r2, [pc, #452]	; (800a1bc <UART_SetConfig+0x908>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d130      	bne.n	800a05c <UART_SetConfig+0x7a8>
 8009ffa:	4b6f      	ldr	r3, [pc, #444]	; (800a1b8 <UART_SetConfig+0x904>)
 8009ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffe:	f003 0307 	and.w	r3, r3, #7
 800a002:	2b05      	cmp	r3, #5
 800a004:	d826      	bhi.n	800a054 <UART_SetConfig+0x7a0>
 800a006:	a201      	add	r2, pc, #4	; (adr r2, 800a00c <UART_SetConfig+0x758>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a025 	.word	0x0800a025
 800a010:	0800a02d 	.word	0x0800a02d
 800a014:	0800a035 	.word	0x0800a035
 800a018:	0800a03d 	.word	0x0800a03d
 800a01c:	0800a045 	.word	0x0800a045
 800a020:	0800a04d 	.word	0x0800a04d
 800a024:	2302      	movs	r3, #2
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02a:	e01a      	b.n	800a062 <UART_SetConfig+0x7ae>
 800a02c:	2304      	movs	r3, #4
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a032:	e016      	b.n	800a062 <UART_SetConfig+0x7ae>
 800a034:	2308      	movs	r3, #8
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a03a:	e012      	b.n	800a062 <UART_SetConfig+0x7ae>
 800a03c:	2310      	movs	r3, #16
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a042:	e00e      	b.n	800a062 <UART_SetConfig+0x7ae>
 800a044:	2320      	movs	r3, #32
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a04a:	e00a      	b.n	800a062 <UART_SetConfig+0x7ae>
 800a04c:	2340      	movs	r3, #64	; 0x40
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a052:	e006      	b.n	800a062 <UART_SetConfig+0x7ae>
 800a054:	2380      	movs	r3, #128	; 0x80
 800a056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a05a:	e002      	b.n	800a062 <UART_SetConfig+0x7ae>
 800a05c:	2380      	movs	r3, #128	; 0x80
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a55      	ldr	r2, [pc, #340]	; (800a1bc <UART_SetConfig+0x908>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	f040 80f8 	bne.w	800a25e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a06e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a072:	2b20      	cmp	r3, #32
 800a074:	dc46      	bgt.n	800a104 <UART_SetConfig+0x850>
 800a076:	2b02      	cmp	r3, #2
 800a078:	db75      	blt.n	800a166 <UART_SetConfig+0x8b2>
 800a07a:	3b02      	subs	r3, #2
 800a07c:	2b1e      	cmp	r3, #30
 800a07e:	d872      	bhi.n	800a166 <UART_SetConfig+0x8b2>
 800a080:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <UART_SetConfig+0x7d4>)
 800a082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a086:	bf00      	nop
 800a088:	0800a10b 	.word	0x0800a10b
 800a08c:	0800a167 	.word	0x0800a167
 800a090:	0800a113 	.word	0x0800a113
 800a094:	0800a167 	.word	0x0800a167
 800a098:	0800a167 	.word	0x0800a167
 800a09c:	0800a167 	.word	0x0800a167
 800a0a0:	0800a123 	.word	0x0800a123
 800a0a4:	0800a167 	.word	0x0800a167
 800a0a8:	0800a167 	.word	0x0800a167
 800a0ac:	0800a167 	.word	0x0800a167
 800a0b0:	0800a167 	.word	0x0800a167
 800a0b4:	0800a167 	.word	0x0800a167
 800a0b8:	0800a167 	.word	0x0800a167
 800a0bc:	0800a167 	.word	0x0800a167
 800a0c0:	0800a133 	.word	0x0800a133
 800a0c4:	0800a167 	.word	0x0800a167
 800a0c8:	0800a167 	.word	0x0800a167
 800a0cc:	0800a167 	.word	0x0800a167
 800a0d0:	0800a167 	.word	0x0800a167
 800a0d4:	0800a167 	.word	0x0800a167
 800a0d8:	0800a167 	.word	0x0800a167
 800a0dc:	0800a167 	.word	0x0800a167
 800a0e0:	0800a167 	.word	0x0800a167
 800a0e4:	0800a167 	.word	0x0800a167
 800a0e8:	0800a167 	.word	0x0800a167
 800a0ec:	0800a167 	.word	0x0800a167
 800a0f0:	0800a167 	.word	0x0800a167
 800a0f4:	0800a167 	.word	0x0800a167
 800a0f8:	0800a167 	.word	0x0800a167
 800a0fc:	0800a167 	.word	0x0800a167
 800a100:	0800a159 	.word	0x0800a159
 800a104:	2b40      	cmp	r3, #64	; 0x40
 800a106:	d02a      	beq.n	800a15e <UART_SetConfig+0x8aa>
 800a108:	e02d      	b.n	800a166 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a10a:	f7fd fc0f 	bl	800792c <HAL_RCCEx_GetD3PCLK1Freq>
 800a10e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a110:	e02f      	b.n	800a172 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a116:	4618      	mov	r0, r3
 800a118:	f7fd fc1e 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a120:	e027      	b.n	800a172 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a122:	f107 0318 	add.w	r3, r7, #24
 800a126:	4618      	mov	r0, r3
 800a128:	f7fd fd6a 	bl	8007c00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a130:	e01f      	b.n	800a172 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a132:	4b21      	ldr	r3, [pc, #132]	; (800a1b8 <UART_SetConfig+0x904>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0320 	and.w	r3, r3, #32
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d009      	beq.n	800a152 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a13e:	4b1e      	ldr	r3, [pc, #120]	; (800a1b8 <UART_SetConfig+0x904>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	08db      	lsrs	r3, r3, #3
 800a144:	f003 0303 	and.w	r3, r3, #3
 800a148:	4a1d      	ldr	r2, [pc, #116]	; (800a1c0 <UART_SetConfig+0x90c>)
 800a14a:	fa22 f303 	lsr.w	r3, r2, r3
 800a14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a150:	e00f      	b.n	800a172 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a152:	4b1b      	ldr	r3, [pc, #108]	; (800a1c0 <UART_SetConfig+0x90c>)
 800a154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a156:	e00c      	b.n	800a172 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a158:	4b1a      	ldr	r3, [pc, #104]	; (800a1c4 <UART_SetConfig+0x910>)
 800a15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a15c:	e009      	b.n	800a172 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a15e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a164:	e005      	b.n	800a172 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a166:	2300      	movs	r3, #0
 800a168:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 81ee 	beq.w	800a556 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	4a12      	ldr	r2, [pc, #72]	; (800a1c8 <UART_SetConfig+0x914>)
 800a180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a184:	461a      	mov	r2, r3
 800a186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a188:	fbb3 f3f2 	udiv	r3, r3, r2
 800a18c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	4613      	mov	r3, r2
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	4413      	add	r3, r2
 800a198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d305      	bcc.n	800a1aa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d910      	bls.n	800a1cc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1b0:	e1d1      	b.n	800a556 <UART_SetConfig+0xca2>
 800a1b2:	bf00      	nop
 800a1b4:	40011c00 	.word	0x40011c00
 800a1b8:	58024400 	.word	0x58024400
 800a1bc:	58000c00 	.word	0x58000c00
 800a1c0:	03d09000 	.word	0x03d09000
 800a1c4:	003d0900 	.word	0x003d0900
 800a1c8:	0800ac48 	.word	0x0800ac48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	60bb      	str	r3, [r7, #8]
 800a1d2:	60fa      	str	r2, [r7, #12]
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	4ac0      	ldr	r2, [pc, #768]	; (800a4dc <UART_SetConfig+0xc28>)
 800a1da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	603b      	str	r3, [r7, #0]
 800a1e4:	607a      	str	r2, [r7, #4]
 800a1e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1ee:	f7f6 f88d 	bl	800030c <__aeabi_uldivmod>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f04f 0200 	mov.w	r2, #0
 800a1fe:	f04f 0300 	mov.w	r3, #0
 800a202:	020b      	lsls	r3, r1, #8
 800a204:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a208:	0202      	lsls	r2, r0, #8
 800a20a:	6979      	ldr	r1, [r7, #20]
 800a20c:	6849      	ldr	r1, [r1, #4]
 800a20e:	0849      	lsrs	r1, r1, #1
 800a210:	2000      	movs	r0, #0
 800a212:	460c      	mov	r4, r1
 800a214:	4605      	mov	r5, r0
 800a216:	eb12 0804 	adds.w	r8, r2, r4
 800a21a:	eb43 0905 	adc.w	r9, r3, r5
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	469a      	mov	sl, r3
 800a226:	4693      	mov	fp, r2
 800a228:	4652      	mov	r2, sl
 800a22a:	465b      	mov	r3, fp
 800a22c:	4640      	mov	r0, r8
 800a22e:	4649      	mov	r1, r9
 800a230:	f7f6 f86c 	bl	800030c <__aeabi_uldivmod>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4613      	mov	r3, r2
 800a23a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a242:	d308      	bcc.n	800a256 <UART_SetConfig+0x9a2>
 800a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a24a:	d204      	bcs.n	800a256 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a252:	60da      	str	r2, [r3, #12]
 800a254:	e17f      	b.n	800a556 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a25c:	e17b      	b.n	800a556 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	69db      	ldr	r3, [r3, #28]
 800a262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a266:	f040 80bd 	bne.w	800a3e4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a26a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a26e:	2b20      	cmp	r3, #32
 800a270:	dc48      	bgt.n	800a304 <UART_SetConfig+0xa50>
 800a272:	2b00      	cmp	r3, #0
 800a274:	db7b      	blt.n	800a36e <UART_SetConfig+0xaba>
 800a276:	2b20      	cmp	r3, #32
 800a278:	d879      	bhi.n	800a36e <UART_SetConfig+0xaba>
 800a27a:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <UART_SetConfig+0x9cc>)
 800a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a280:	0800a30b 	.word	0x0800a30b
 800a284:	0800a313 	.word	0x0800a313
 800a288:	0800a36f 	.word	0x0800a36f
 800a28c:	0800a36f 	.word	0x0800a36f
 800a290:	0800a31b 	.word	0x0800a31b
 800a294:	0800a36f 	.word	0x0800a36f
 800a298:	0800a36f 	.word	0x0800a36f
 800a29c:	0800a36f 	.word	0x0800a36f
 800a2a0:	0800a32b 	.word	0x0800a32b
 800a2a4:	0800a36f 	.word	0x0800a36f
 800a2a8:	0800a36f 	.word	0x0800a36f
 800a2ac:	0800a36f 	.word	0x0800a36f
 800a2b0:	0800a36f 	.word	0x0800a36f
 800a2b4:	0800a36f 	.word	0x0800a36f
 800a2b8:	0800a36f 	.word	0x0800a36f
 800a2bc:	0800a36f 	.word	0x0800a36f
 800a2c0:	0800a33b 	.word	0x0800a33b
 800a2c4:	0800a36f 	.word	0x0800a36f
 800a2c8:	0800a36f 	.word	0x0800a36f
 800a2cc:	0800a36f 	.word	0x0800a36f
 800a2d0:	0800a36f 	.word	0x0800a36f
 800a2d4:	0800a36f 	.word	0x0800a36f
 800a2d8:	0800a36f 	.word	0x0800a36f
 800a2dc:	0800a36f 	.word	0x0800a36f
 800a2e0:	0800a36f 	.word	0x0800a36f
 800a2e4:	0800a36f 	.word	0x0800a36f
 800a2e8:	0800a36f 	.word	0x0800a36f
 800a2ec:	0800a36f 	.word	0x0800a36f
 800a2f0:	0800a36f 	.word	0x0800a36f
 800a2f4:	0800a36f 	.word	0x0800a36f
 800a2f8:	0800a36f 	.word	0x0800a36f
 800a2fc:	0800a36f 	.word	0x0800a36f
 800a300:	0800a361 	.word	0x0800a361
 800a304:	2b40      	cmp	r3, #64	; 0x40
 800a306:	d02e      	beq.n	800a366 <UART_SetConfig+0xab2>
 800a308:	e031      	b.n	800a36e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a30a:	f7fb fc71 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 800a30e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a310:	e033      	b.n	800a37a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a312:	f7fb fc83 	bl	8005c1c <HAL_RCC_GetPCLK2Freq>
 800a316:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a318:	e02f      	b.n	800a37a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a31a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fd fb1a 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a328:	e027      	b.n	800a37a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a32a:	f107 0318 	add.w	r3, r7, #24
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fd fc66 	bl	8007c00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a338:	e01f      	b.n	800a37a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a33a:	4b69      	ldr	r3, [pc, #420]	; (800a4e0 <UART_SetConfig+0xc2c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 0320 	and.w	r3, r3, #32
 800a342:	2b00      	cmp	r3, #0
 800a344:	d009      	beq.n	800a35a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a346:	4b66      	ldr	r3, [pc, #408]	; (800a4e0 <UART_SetConfig+0xc2c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	08db      	lsrs	r3, r3, #3
 800a34c:	f003 0303 	and.w	r3, r3, #3
 800a350:	4a64      	ldr	r2, [pc, #400]	; (800a4e4 <UART_SetConfig+0xc30>)
 800a352:	fa22 f303 	lsr.w	r3, r2, r3
 800a356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a358:	e00f      	b.n	800a37a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a35a:	4b62      	ldr	r3, [pc, #392]	; (800a4e4 <UART_SetConfig+0xc30>)
 800a35c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a35e:	e00c      	b.n	800a37a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a360:	4b61      	ldr	r3, [pc, #388]	; (800a4e8 <UART_SetConfig+0xc34>)
 800a362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a364:	e009      	b.n	800a37a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a36a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a36c:	e005      	b.n	800a37a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a378:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 80ea 	beq.w	800a556 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	4a55      	ldr	r2, [pc, #340]	; (800a4dc <UART_SetConfig+0xc28>)
 800a388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a38c:	461a      	mov	r2, r3
 800a38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a390:	fbb3 f3f2 	udiv	r3, r3, r2
 800a394:	005a      	lsls	r2, r3, #1
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	085b      	lsrs	r3, r3, #1
 800a39c:	441a      	add	r2, r3
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	2b0f      	cmp	r3, #15
 800a3ac:	d916      	bls.n	800a3dc <UART_SetConfig+0xb28>
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b4:	d212      	bcs.n	800a3dc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f023 030f 	bic.w	r3, r3, #15
 800a3be:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	085b      	lsrs	r3, r3, #1
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	f003 0307 	and.w	r3, r3, #7
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a3d8:	60da      	str	r2, [r3, #12]
 800a3da:	e0bc      	b.n	800a556 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a3e2:	e0b8      	b.n	800a556 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a3e8:	2b20      	cmp	r3, #32
 800a3ea:	dc4b      	bgt.n	800a484 <UART_SetConfig+0xbd0>
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f2c0 8087 	blt.w	800a500 <UART_SetConfig+0xc4c>
 800a3f2:	2b20      	cmp	r3, #32
 800a3f4:	f200 8084 	bhi.w	800a500 <UART_SetConfig+0xc4c>
 800a3f8:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <UART_SetConfig+0xb4c>)
 800a3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fe:	bf00      	nop
 800a400:	0800a48b 	.word	0x0800a48b
 800a404:	0800a493 	.word	0x0800a493
 800a408:	0800a501 	.word	0x0800a501
 800a40c:	0800a501 	.word	0x0800a501
 800a410:	0800a49b 	.word	0x0800a49b
 800a414:	0800a501 	.word	0x0800a501
 800a418:	0800a501 	.word	0x0800a501
 800a41c:	0800a501 	.word	0x0800a501
 800a420:	0800a4ab 	.word	0x0800a4ab
 800a424:	0800a501 	.word	0x0800a501
 800a428:	0800a501 	.word	0x0800a501
 800a42c:	0800a501 	.word	0x0800a501
 800a430:	0800a501 	.word	0x0800a501
 800a434:	0800a501 	.word	0x0800a501
 800a438:	0800a501 	.word	0x0800a501
 800a43c:	0800a501 	.word	0x0800a501
 800a440:	0800a4bb 	.word	0x0800a4bb
 800a444:	0800a501 	.word	0x0800a501
 800a448:	0800a501 	.word	0x0800a501
 800a44c:	0800a501 	.word	0x0800a501
 800a450:	0800a501 	.word	0x0800a501
 800a454:	0800a501 	.word	0x0800a501
 800a458:	0800a501 	.word	0x0800a501
 800a45c:	0800a501 	.word	0x0800a501
 800a460:	0800a501 	.word	0x0800a501
 800a464:	0800a501 	.word	0x0800a501
 800a468:	0800a501 	.word	0x0800a501
 800a46c:	0800a501 	.word	0x0800a501
 800a470:	0800a501 	.word	0x0800a501
 800a474:	0800a501 	.word	0x0800a501
 800a478:	0800a501 	.word	0x0800a501
 800a47c:	0800a501 	.word	0x0800a501
 800a480:	0800a4f3 	.word	0x0800a4f3
 800a484:	2b40      	cmp	r3, #64	; 0x40
 800a486:	d037      	beq.n	800a4f8 <UART_SetConfig+0xc44>
 800a488:	e03a      	b.n	800a500 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a48a:	f7fb fbb1 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 800a48e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a490:	e03c      	b.n	800a50c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a492:	f7fb fbc3 	bl	8005c1c <HAL_RCC_GetPCLK2Freq>
 800a496:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a498:	e038      	b.n	800a50c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a49a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fd fa5a 	bl	8007958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4a8:	e030      	b.n	800a50c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4aa:	f107 0318 	add.w	r3, r7, #24
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fd fba6 	bl	8007c00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4b8:	e028      	b.n	800a50c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4ba:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <UART_SetConfig+0xc2c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d012      	beq.n	800a4ec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4c6:	4b06      	ldr	r3, [pc, #24]	; (800a4e0 <UART_SetConfig+0xc2c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	08db      	lsrs	r3, r3, #3
 800a4cc:	f003 0303 	and.w	r3, r3, #3
 800a4d0:	4a04      	ldr	r2, [pc, #16]	; (800a4e4 <UART_SetConfig+0xc30>)
 800a4d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4d8:	e018      	b.n	800a50c <UART_SetConfig+0xc58>
 800a4da:	bf00      	nop
 800a4dc:	0800ac48 	.word	0x0800ac48
 800a4e0:	58024400 	.word	0x58024400
 800a4e4:	03d09000 	.word	0x03d09000
 800a4e8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a4ec:	4b24      	ldr	r3, [pc, #144]	; (800a580 <UART_SetConfig+0xccc>)
 800a4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4f0:	e00c      	b.n	800a50c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4f2:	4b24      	ldr	r3, [pc, #144]	; (800a584 <UART_SetConfig+0xcd0>)
 800a4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4f6:	e009      	b.n	800a50c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4fe:	e005      	b.n	800a50c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a500:	2300      	movs	r3, #0
 800a502:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a50a:	bf00      	nop
    }

    if (pclk != 0U)
 800a50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d021      	beq.n	800a556 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	4a1c      	ldr	r2, [pc, #112]	; (800a588 <UART_SetConfig+0xcd4>)
 800a518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a51c:	461a      	mov	r2, r3
 800a51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a520:	fbb3 f2f2 	udiv	r2, r3, r2
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	085b      	lsrs	r3, r3, #1
 800a52a:	441a      	add	r2, r3
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	fbb2 f3f3 	udiv	r3, r2, r3
 800a534:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a538:	2b0f      	cmp	r3, #15
 800a53a:	d909      	bls.n	800a550 <UART_SetConfig+0xc9c>
 800a53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a542:	d205      	bcs.n	800a550 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	b29a      	uxth	r2, r3
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	60da      	str	r2, [r3, #12]
 800a54e:	e002      	b.n	800a556 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2201      	movs	r2, #1
 800a55a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2201      	movs	r2, #1
 800a562:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2200      	movs	r2, #0
 800a56a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	2200      	movs	r2, #0
 800a570:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a572:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a576:	4618      	mov	r0, r3
 800a578:	3748      	adds	r7, #72	; 0x48
 800a57a:	46bd      	mov	sp, r7
 800a57c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a580:	03d09000 	.word	0x03d09000
 800a584:	003d0900 	.word	0x003d0900
 800a588:	0800ac48 	.word	0x0800ac48

0800a58c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00a      	beq.n	800a5b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ba:	f003 0302 	and.w	r3, r3, #2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00a      	beq.n	800a5d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00a      	beq.n	800a5fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fe:	f003 0308 	and.w	r3, r3, #8
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00a      	beq.n	800a61c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	430a      	orrs	r2, r1
 800a61a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a620:	f003 0310 	and.w	r3, r3, #16
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00a      	beq.n	800a63e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	430a      	orrs	r2, r1
 800a63c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a642:	f003 0320 	and.w	r3, r3, #32
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00a      	beq.n	800a660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	430a      	orrs	r2, r1
 800a65e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01a      	beq.n	800a6a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	430a      	orrs	r2, r1
 800a680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a68a:	d10a      	bne.n	800a6a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	430a      	orrs	r2, r1
 800a6c2:	605a      	str	r2, [r3, #4]
  }
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b098      	sub	sp, #96	; 0x60
 800a6d4:	af02      	add	r7, sp, #8
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6e0:	f7f8 fbc8 	bl	8002e74 <HAL_GetTick>
 800a6e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0308 	and.w	r3, r3, #8
 800a6f0:	2b08      	cmp	r3, #8
 800a6f2:	d12f      	bne.n	800a754 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f88e 	bl	800a824 <UART_WaitOnFlagUntilTimeout>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d022      	beq.n	800a754 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	e853 3f00 	ldrex	r3, [r3]
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a722:	653b      	str	r3, [r7, #80]	; 0x50
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a72c:	647b      	str	r3, [r7, #68]	; 0x44
 800a72e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a730:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a734:	e841 2300 	strex	r3, r2, [r1]
 800a738:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1e6      	bne.n	800a70e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2220      	movs	r2, #32
 800a744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e063      	b.n	800a81c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d149      	bne.n	800a7f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a762:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a76a:	2200      	movs	r2, #0
 800a76c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f857 	bl	800a824 <UART_WaitOnFlagUntilTimeout>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d03c      	beq.n	800a7f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	e853 3f00 	ldrex	r3, [r3]
 800a788:	623b      	str	r3, [r7, #32]
   return(result);
 800a78a:	6a3b      	ldr	r3, [r7, #32]
 800a78c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a790:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	461a      	mov	r2, r3
 800a798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a79a:	633b      	str	r3, [r7, #48]	; 0x30
 800a79c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a2:	e841 2300 	strex	r3, r2, [r1]
 800a7a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1e6      	bne.n	800a77c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3308      	adds	r3, #8
 800a7b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	e853 3f00 	ldrex	r3, [r3]
 800a7bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f023 0301 	bic.w	r3, r3, #1
 800a7c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7ce:	61fa      	str	r2, [r7, #28]
 800a7d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d2:	69b9      	ldr	r1, [r7, #24]
 800a7d4:	69fa      	ldr	r2, [r7, #28]
 800a7d6:	e841 2300 	strex	r3, r2, [r1]
 800a7da:	617b      	str	r3, [r7, #20]
   return(result);
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1e5      	bne.n	800a7ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2220      	movs	r2, #32
 800a7e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e012      	b.n	800a81c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3758      	adds	r7, #88	; 0x58
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	4613      	mov	r3, r2
 800a832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a834:	e049      	b.n	800a8ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83c:	d045      	beq.n	800a8ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a83e:	f7f8 fb19 	bl	8002e74 <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	69ba      	ldr	r2, [r7, #24]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d302      	bcc.n	800a854 <UART_WaitOnFlagUntilTimeout+0x30>
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e048      	b.n	800a8ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 0304 	and.w	r3, r3, #4
 800a862:	2b00      	cmp	r3, #0
 800a864:	d031      	beq.n	800a8ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	f003 0308 	and.w	r3, r3, #8
 800a870:	2b08      	cmp	r3, #8
 800a872:	d110      	bne.n	800a896 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2208      	movs	r2, #8
 800a87a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 f839 	bl	800a8f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2208      	movs	r2, #8
 800a886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e029      	b.n	800a8ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	69db      	ldr	r3, [r3, #28]
 800a89c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8a4:	d111      	bne.n	800a8ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 f81f 	bl	800a8f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e00f      	b.n	800a8ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	69da      	ldr	r2, [r3, #28]
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	bf0c      	ite	eq
 800a8da:	2301      	moveq	r3, #1
 800a8dc:	2300      	movne	r3, #0
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d0a6      	beq.n	800a836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b095      	sub	sp, #84	; 0x54
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a904:	e853 3f00 	ldrex	r3, [r3]
 800a908:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a910:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a91a:	643b      	str	r3, [r7, #64]	; 0x40
 800a91c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a922:	e841 2300 	strex	r3, r2, [r1]
 800a926:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1e6      	bne.n	800a8fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3308      	adds	r3, #8
 800a934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	e853 3f00 	ldrex	r3, [r3]
 800a93c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a93e:	69fa      	ldr	r2, [r7, #28]
 800a940:	4b1e      	ldr	r3, [pc, #120]	; (800a9bc <UART_EndRxTransfer+0xc8>)
 800a942:	4013      	ands	r3, r2
 800a944:	64bb      	str	r3, [r7, #72]	; 0x48
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3308      	adds	r3, #8
 800a94c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a94e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a956:	e841 2300 	strex	r3, r2, [r1]
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1e5      	bne.n	800a92e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a966:	2b01      	cmp	r3, #1
 800a968:	d118      	bne.n	800a99c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	e853 3f00 	ldrex	r3, [r3]
 800a976:	60bb      	str	r3, [r7, #8]
   return(result);
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	f023 0310 	bic.w	r3, r3, #16
 800a97e:	647b      	str	r3, [r7, #68]	; 0x44
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	461a      	mov	r2, r3
 800a986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a988:	61bb      	str	r3, [r7, #24]
 800a98a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98c:	6979      	ldr	r1, [r7, #20]
 800a98e:	69ba      	ldr	r2, [r7, #24]
 800a990:	e841 2300 	strex	r3, r2, [r1]
 800a994:	613b      	str	r3, [r7, #16]
   return(result);
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1e6      	bne.n	800a96a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2220      	movs	r2, #32
 800a9a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a9b0:	bf00      	nop
 800a9b2:	3754      	adds	r7, #84	; 0x54
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	effffffe 	.word	0xeffffffe

0800a9c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e027      	b.n	800aa26 <HAL_UARTEx_DisableFifoMode+0x66>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2224      	movs	r2, #36	; 0x24
 800a9e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0201 	bic.w	r2, r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2220      	movs	r2, #32
 800aa18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d101      	bne.n	800aa4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e02d      	b.n	800aaa6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2224      	movs	r2, #36	; 0x24
 800aa56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 0201 	bic.w	r2, r2, #1
 800aa70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	430a      	orrs	r2, r1
 800aa84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f850 	bl	800ab2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2220      	movs	r2, #32
 800aa98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d101      	bne.n	800aac6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aac2:	2302      	movs	r3, #2
 800aac4:	e02d      	b.n	800ab22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2224      	movs	r2, #36	; 0x24
 800aad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f022 0201 	bic.w	r2, r2, #1
 800aaec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	430a      	orrs	r2, r1
 800ab00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f812 	bl	800ab2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2220      	movs	r2, #32
 800ab14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d108      	bne.n	800ab4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab4c:	e031      	b.n	800abb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab4e:	2310      	movs	r3, #16
 800ab50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab52:	2310      	movs	r3, #16
 800ab54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	0e5b      	lsrs	r3, r3, #25
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	f003 0307 	and.w	r3, r3, #7
 800ab64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	0f5b      	lsrs	r3, r3, #29
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	f003 0307 	and.w	r3, r3, #7
 800ab74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	7b3a      	ldrb	r2, [r7, #12]
 800ab7a:	4911      	ldr	r1, [pc, #68]	; (800abc0 <UARTEx_SetNbDataToProcess+0x94>)
 800ab7c:	5c8a      	ldrb	r2, [r1, r2]
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab82:	7b3a      	ldrb	r2, [r7, #12]
 800ab84:	490f      	ldr	r1, [pc, #60]	; (800abc4 <UARTEx_SetNbDataToProcess+0x98>)
 800ab86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab88:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
 800ab96:	7b7a      	ldrb	r2, [r7, #13]
 800ab98:	4909      	ldr	r1, [pc, #36]	; (800abc0 <UARTEx_SetNbDataToProcess+0x94>)
 800ab9a:	5c8a      	ldrb	r2, [r1, r2]
 800ab9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aba0:	7b7a      	ldrb	r2, [r7, #13]
 800aba2:	4908      	ldr	r1, [pc, #32]	; (800abc4 <UARTEx_SetNbDataToProcess+0x98>)
 800aba4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aba6:	fb93 f3f2 	sdiv	r3, r3, r2
 800abaa:	b29a      	uxth	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800abb2:	bf00      	nop
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	0800ac60 	.word	0x0800ac60
 800abc4:	0800ac68 	.word	0x0800ac68

0800abc8 <memset>:
 800abc8:	4402      	add	r2, r0
 800abca:	4603      	mov	r3, r0
 800abcc:	4293      	cmp	r3, r2
 800abce:	d100      	bne.n	800abd2 <memset+0xa>
 800abd0:	4770      	bx	lr
 800abd2:	f803 1b01 	strb.w	r1, [r3], #1
 800abd6:	e7f9      	b.n	800abcc <memset+0x4>

0800abd8 <__libc_init_array>:
 800abd8:	b570      	push	{r4, r5, r6, lr}
 800abda:	4d0d      	ldr	r5, [pc, #52]	; (800ac10 <__libc_init_array+0x38>)
 800abdc:	4c0d      	ldr	r4, [pc, #52]	; (800ac14 <__libc_init_array+0x3c>)
 800abde:	1b64      	subs	r4, r4, r5
 800abe0:	10a4      	asrs	r4, r4, #2
 800abe2:	2600      	movs	r6, #0
 800abe4:	42a6      	cmp	r6, r4
 800abe6:	d109      	bne.n	800abfc <__libc_init_array+0x24>
 800abe8:	4d0b      	ldr	r5, [pc, #44]	; (800ac18 <__libc_init_array+0x40>)
 800abea:	4c0c      	ldr	r4, [pc, #48]	; (800ac1c <__libc_init_array+0x44>)
 800abec:	f000 f818 	bl	800ac20 <_init>
 800abf0:	1b64      	subs	r4, r4, r5
 800abf2:	10a4      	asrs	r4, r4, #2
 800abf4:	2600      	movs	r6, #0
 800abf6:	42a6      	cmp	r6, r4
 800abf8:	d105      	bne.n	800ac06 <__libc_init_array+0x2e>
 800abfa:	bd70      	pop	{r4, r5, r6, pc}
 800abfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac00:	4798      	blx	r3
 800ac02:	3601      	adds	r6, #1
 800ac04:	e7ee      	b.n	800abe4 <__libc_init_array+0xc>
 800ac06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac0a:	4798      	blx	r3
 800ac0c:	3601      	adds	r6, #1
 800ac0e:	e7f2      	b.n	800abf6 <__libc_init_array+0x1e>
 800ac10:	0800ac78 	.word	0x0800ac78
 800ac14:	0800ac78 	.word	0x0800ac78
 800ac18:	0800ac78 	.word	0x0800ac78
 800ac1c:	0800ac7c 	.word	0x0800ac7c

0800ac20 <_init>:
 800ac20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac22:	bf00      	nop
 800ac24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac26:	bc08      	pop	{r3}
 800ac28:	469e      	mov	lr, r3
 800ac2a:	4770      	bx	lr

0800ac2c <_fini>:
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2e:	bf00      	nop
 800ac30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac32:	bc08      	pop	{r3}
 800ac34:	469e      	mov	lr, r3
 800ac36:	4770      	bx	lr
