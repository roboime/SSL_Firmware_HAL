
SSL_Firmware_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006888  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006a10  08006a10  00016a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a2c  08006a2c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a34  08006a34  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  20000090  08006acc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  08006acc  0002085c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d69  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e52  00000000  00000000  00035e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef0  00000000  00000000  00038c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00039b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ff2  00000000  00000000  0003a938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f558  00000000  00000000  0005d92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9337  00000000  00000000  0006ce82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001361b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f70  00000000  00000000  00136234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069f8 	.word	0x080069f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080069f8 	.word	0x080069f8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fbf4 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80e 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f910 	bl	80006f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f874 	bl	80005c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8a0 	bl	8000620 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f005 feaa 	bl	8006238 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004e4:	f000 f8d2 	bl	800068c <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e8:	f005 fecc 	bl	8006284 <MX_USB_HOST_Process>
 80004ec:	e7fc      	b.n	80004e8 <main+0x20>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f006 f9b8 	bl	8006874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <SystemClock_Config+0xcc>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a27      	ldr	r2, [pc, #156]	; (80005bc <SystemClock_Config+0xcc>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b25      	ldr	r3, [pc, #148]	; (80005bc <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <SystemClock_Config+0xd0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <SystemClock_Config+0xd0>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000560:	2308      	movs	r3, #8
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000564:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000568:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056e:	2307      	movs	r3, #7
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fc96 	bl	8002ea8 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000582:	f000 f9ff 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2302      	movs	r3, #2
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000592:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2105      	movs	r1, #5
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 feef 	bl	8003388 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b0:	f000 f9e8 	bl	8000984 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	; 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40007000 	.word	0x40007000

080005c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_I2C1_Init+0x50>)
 80005ca:	4a13      	ldr	r2, [pc, #76]	; (8000618 <MX_I2C1_Init+0x54>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_I2C1_Init+0x50>)
 80005d0:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_I2C1_Init+0x58>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_I2C1_Init+0x50>)
 80005e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_I2C1_Init+0x50>)
 8000602:	f002 fb19 	bl	8002c38 <HAL_I2C_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800060c:	f000 f9ba 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000118 	.word	0x20000118
 8000618:	40005400 	.word	0x40005400
 800061c:	000186a0 	.word	0x000186a0

08000620 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_SPI1_Init+0x64>)
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <MX_SPI1_Init+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_SPI1_Init+0x64>)
 800062c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000630:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_SPI1_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_SPI1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_SPI1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_SPI1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_SPI1_Init+0x64>)
 800064c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000650:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_SPI1_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_SPI1_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_SPI1_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_SPI1_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_SPI1_Init+0x64>)
 800066c:	220a      	movs	r2, #10
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_SPI1_Init+0x64>)
 8000672:	f003 f867 	bl	8003744 <HAL_SPI_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800067c:	f000 f982 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000016c 	.word	0x2000016c
 8000688:	40013000 	.word	0x40013000

0800068c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_SPI2_Init+0x64>)
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <MX_SPI2_Init+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_SPI2_Init+0x64>)
 8000698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800069c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006d8:	220a      	movs	r2, #10
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_SPI2_Init+0x64>)
 80006de:	f003 f831 	bl	8003744 <HAL_SPI_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006e8:	f000 f94c 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000c0 	.word	0x200000c0
 80006f4:	40003800 	.word	0x40003800

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	4b95      	ldr	r3, [pc, #596]	; (8000968 <MX_GPIO_Init+0x270>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a94      	ldr	r2, [pc, #592]	; (8000968 <MX_GPIO_Init+0x270>)
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b92      	ldr	r3, [pc, #584]	; (8000968 <MX_GPIO_Init+0x270>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	4b8e      	ldr	r3, [pc, #568]	; (8000968 <MX_GPIO_Init+0x270>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a8d      	ldr	r2, [pc, #564]	; (8000968 <MX_GPIO_Init+0x270>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b8b      	ldr	r3, [pc, #556]	; (8000968 <MX_GPIO_Init+0x270>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b87      	ldr	r3, [pc, #540]	; (8000968 <MX_GPIO_Init+0x270>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a86      	ldr	r2, [pc, #536]	; (8000968 <MX_GPIO_Init+0x270>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b84      	ldr	r3, [pc, #528]	; (8000968 <MX_GPIO_Init+0x270>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b80      	ldr	r3, [pc, #512]	; (8000968 <MX_GPIO_Init+0x270>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a7f      	ldr	r2, [pc, #508]	; (8000968 <MX_GPIO_Init+0x270>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b7d      	ldr	r3, [pc, #500]	; (8000968 <MX_GPIO_Init+0x270>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b79      	ldr	r3, [pc, #484]	; (8000968 <MX_GPIO_Init+0x270>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a78      	ldr	r2, [pc, #480]	; (8000968 <MX_GPIO_Init+0x270>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b76      	ldr	r3, [pc, #472]	; (8000968 <MX_GPIO_Init+0x270>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b72      	ldr	r3, [pc, #456]	; (8000968 <MX_GPIO_Init+0x270>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a71      	ldr	r2, [pc, #452]	; (8000968 <MX_GPIO_Init+0x270>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b6f      	ldr	r3, [pc, #444]	; (8000968 <MX_GPIO_Init+0x270>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|M1_MBL_Pin|MD_MAH_Pin|M1_MAL_Pin 
 80007b6:	2200      	movs	r2, #0
 80007b8:	f646 0178 	movw	r1, #26744	; 0x6878
 80007bc:	486b      	ldr	r0, [pc, #428]	; (800096c <MX_GPIO_Init+0x274>)
 80007be:	f000 fdbb 	bl	8001338 <HAL_GPIO_WritePin>
                          |M2_MBH_Pin|M3_MBH_Pin|M3_MAH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M0_MBL_Pin|M2_MAL_Pin|M2_MAH_Pin|M0_MBH_Pin 
 80007c2:	2200      	movs	r2, #0
 80007c4:	f243 71c4 	movw	r1, #14276	; 0x37c4
 80007c8:	4869      	ldr	r0, [pc, #420]	; (8000970 <MX_GPIO_Init+0x278>)
 80007ca:	f000 fdb5 	bl	8001338 <HAL_GPIO_WritePin>
                          |M1_MBH_Pin|M0_MAH_Pin|MPU_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f641 0102 	movw	r1, #6146	; 0x1802
 80007d4:	4867      	ldr	r0, [pc, #412]	; (8000974 <MX_GPIO_Init+0x27c>)
 80007d6:	f000 fdaf 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CA_Pin|CB_Pin|LED_GREEN_Pin|LED_ORANGE_Pin 
 80007da:	2200      	movs	r2, #0
 80007dc:	f24f 5199 	movw	r1, #62873	; 0xf599
 80007e0:	4865      	ldr	r0, [pc, #404]	; (8000978 <MX_GPIO_Init+0x280>)
 80007e2:	f000 fda9 	bl	8001338 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_BLUE_Pin|NRF_CS_Pin|SD_CS_Pin 
                          |Audio_RST_Pin|M0_MAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1_MAH_GPIO_Port, M1_MAH_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	4863      	ldr	r0, [pc, #396]	; (800097c <MX_GPIO_Init+0x284>)
 80007ee:	f000 fda3 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ID_BTN_Pin */
  GPIO_InitStruct.Pin = ID_BTN_Pin;
 80007f2:	2304      	movs	r3, #4
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ID_BTN_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4859      	ldr	r0, [pc, #356]	; (800096c <MX_GPIO_Init+0x274>)
 8000806:	f000 fbfd 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin M1_MBL_Pin MD_MAH_Pin M1_MAL_Pin 
                           M2_MBH_Pin M3_MBH_Pin M3_MAH_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|M1_MBL_Pin|MD_MAH_Pin|M1_MAL_Pin 
 800080a:	f646 0378 	movw	r3, #26744	; 0x6878
 800080e:	61fb      	str	r3, [r7, #28]
                          |M2_MBH_Pin|M3_MBH_Pin|M3_MAH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4852      	ldr	r0, [pc, #328]	; (800096c <MX_GPIO_Init+0x274>)
 8000824:	f000 fbee 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_MBL_Pin M2_MAL_Pin M2_MAH_Pin M0_MBH_Pin 
                           M1_MBH_Pin M0_MAH_Pin MPU_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = M0_MBL_Pin|M2_MAL_Pin|M2_MAH_Pin|M0_MBH_Pin 
 8000828:	f243 73c4 	movw	r3, #14276	; 0x37c4
 800082c:	61fb      	str	r3, [r7, #28]
                          |M1_MBH_Pin|M0_MAH_Pin|MPU_CS_Pin|NRF_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	484b      	ldr	r0, [pc, #300]	; (8000970 <MX_GPIO_Init+0x278>)
 8000842:	f000 fbdf 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBat_Pin M0_INA_Pin M2_INA_Pin NRF_IRQ_Pin 
                           SEN_2_Pin */
  GPIO_InitStruct.Pin = VBat_Pin|M0_INA_Pin|M2_INA_Pin|NRF_IRQ_Pin 
 8000846:	f640 0333 	movw	r3, #2099	; 0x833
 800084a:	61fb      	str	r3, [r7, #28]
                          |SEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4845      	ldr	r0, [pc, #276]	; (8000970 <MX_GPIO_Init+0x278>)
 800085c:	f000 fbd2 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000860:	2308      	movs	r3, #8
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000870:	2305      	movs	r3, #5
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	483d      	ldr	r0, [pc, #244]	; (8000970 <MX_GPIO_Init+0x278>)
 800087c:	f000 fbc2 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_ENCA_Pin M2_ENCB_Pin M1_INA_Pin M3_INA_Pin 
                           MD_INA_Pin M1_ENCA_Pin */
  GPIO_InitStruct.Pin = M2_ENCA_Pin|M2_ENCB_Pin|M1_INA_Pin|M3_INA_Pin 
 8000880:	f248 031f 	movw	r3, #32799	; 0x801f
 8000884:	61fb      	str	r3, [r7, #28]
                          |MD_INA_Pin|M1_ENCA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4839      	ldr	r0, [pc, #228]	; (800097c <MX_GPIO_Init+0x284>)
 8000896:	f000 fbb5 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_KB_Pin IRQ_MPU_Pin M1_ENCB_Pin M0_ENCA_Pin 
                           M0_ENCB_Pin M3_ENCA_Pin M3_ENCB_Pin */
  GPIO_InitStruct.Pin = CE_KB_Pin|IRQ_MPU_Pin|M1_ENCB_Pin|M0_ENCA_Pin 
 800089a:	23fd      	movs	r3, #253	; 0xfd
 800089c:	61fb      	str	r3, [r7, #28]
                          |M0_ENCB_Pin|M3_ENCA_Pin|M3_ENCB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4831      	ldr	r0, [pc, #196]	; (8000974 <MX_GPIO_Init+0x27c>)
 80008ae:	f000 fba9 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_MBL_Pin M3_MBL_Pin M3_MAL_Pin */
  GPIO_InitStruct.Pin = M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin;
 80008b2:	f641 0302 	movw	r3, #6146	; 0x1802
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	482a      	ldr	r0, [pc, #168]	; (8000974 <MX_GPIO_Init+0x27c>)
 80008cc:	f000 fb9a 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e2:	2305      	movs	r3, #5
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4821      	ldr	r0, [pc, #132]	; (8000974 <MX_GPIO_Init+0x27c>)
 80008ee:	f000 fb89 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : CA_Pin CB_Pin LED_GREEN_Pin LED_ORANGE_Pin 
                           LED_RED_Pin LED_BLUE_Pin NRF_CS_Pin SD_CS_Pin 
                           Audio_RST_Pin M0_MAL_Pin */
  GPIO_InitStruct.Pin = CA_Pin|CB_Pin|LED_GREEN_Pin|LED_ORANGE_Pin 
 80008f2:	f24f 5399 	movw	r3, #62873	; 0xf599
 80008f6:	61fb      	str	r3, [r7, #28]
                          |LED_RED_Pin|LED_BLUE_Pin|NRF_CS_Pin|SD_CS_Pin 
                          |Audio_RST_Pin|M0_MAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	481b      	ldr	r0, [pc, #108]	; (8000978 <MX_GPIO_Init+0x280>)
 800090c:	f000 fb7a 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_MAH_Pin */
  GPIO_InitStruct.Pin = M1_MAH_Pin;
 8000910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M1_MAH_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4814      	ldr	r0, [pc, #80]	; (800097c <MX_GPIO_Init+0x284>)
 800092a:	f000 fb6b 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEN_1_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SEN_1_Pin|OTG_FS_OverCurrent_Pin;
 800092e:	2322      	movs	r3, #34	; 0x22
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <MX_GPIO_Init+0x280>)
 8000942:	f000 fb5f 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000946:	2302      	movs	r3, #2
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_GPIO_Init+0x288>)
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_GPIO_Init+0x274>)
 800095a:	f000 fb53 	bl	8001004 <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40021000 	.word	0x40021000
 8000970:	40020800 	.word	0x40020800
 8000974:	40020400 	.word	0x40020400
 8000978:	40020c00 	.word	0x40020c00
 800097c:	40020000 	.word	0x40020000
 8000980:	10120000 	.word	0x10120000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 fad4 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_I2C_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <HAL_I2C_MspInit+0x8c>)
 8000a40:	f000 fae0 	bl	8001004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a32      	ldr	r2, [pc, #200]	; (8000b5c <HAL_SPI_MspInit+0xe8>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12c      	bne.n	8000af0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a30      	ldr	r2, [pc, #192]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a29      	ldr	r2, [pc, #164]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ace:	23e0      	movs	r3, #224	; 0xe0
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	481e      	ldr	r0, [pc, #120]	; (8000b64 <HAL_SPI_MspInit+0xf0>)
 8000aea:	f000 fa8b 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000aee:	e031      	b.n	8000b54 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <HAL_SPI_MspInit+0xf4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12c      	bne.n	8000b54 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_SPI_MspInit+0xec>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b44:	2305      	movs	r3, #5
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <HAL_SPI_MspInit+0xf8>)
 8000b50:	f000 fa58 	bl	8001004 <HAL_GPIO_Init>
}
 8000b54:	bf00      	nop
 8000b56:	3730      	adds	r7, #48	; 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40013000 	.word	0x40013000
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40003800 	.word	0x40003800
 8000b6c:	40020400 	.word	0x40020400

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8ca 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <OTG_FS_IRQHandler+0x10>)
 8000bd2:	f000 fe4f 	bl	8001874 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000594 	.word	0x20000594

08000be0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x50>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x16>
		heap_end = &end;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <_sbrk+0x50>)
 8000bf2:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <_sbrk+0x54>)
 8000bf4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <_sbrk+0x50>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <_sbrk+0x50>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4413      	add	r3, r2
 8000c04:	466a      	mov	r2, sp
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d907      	bls.n	8000c1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c0a:	f005 fdf9 	bl	8006800 <__errno>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	230c      	movs	r3, #12
 8000c12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	e006      	b.n	8000c28 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <_sbrk+0x50>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <_sbrk+0x50>)
 8000c24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000ac 	.word	0x200000ac
 8000c34:	20000860 	.word	0x20000860

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <SystemInit+0x28>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <SystemInit+0x28>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SystemInit+0x28>)
 8000c4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c52:	609a      	str	r2, [r3, #8]
#endif
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c6a:	e003      	b.n	8000c74 <LoopCopyDataInit>

08000c6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c72:	3104      	adds	r1, #4

08000c74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c7c:	d3f6      	bcc.n	8000c6c <CopyDataInit>
  ldr  r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c80:	e002      	b.n	8000c88 <LoopFillZerobss>

08000c82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c84:	f842 3b04 	str.w	r3, [r2], #4

08000c88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c8c:	d3f9      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd3 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f005 fdbb 	bl	800680c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc17 	bl	80004c8 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ca0:	08006a3c 	.word	0x08006a3c
  ldr  r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ca8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000cac:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000cb0:	2000085c 	.word	0x2000085c

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f94d 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe52 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f965 	bl	8000fea <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f92d 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	200001c4 	.word	0x200001c4

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200001c4 	.word	0x200001c4

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff ffee 	bl	8000d84 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_Delay+0x40>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffde 	bl	8000d84 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff29 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff3e 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff8e 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff31 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffa2 	bl	8000f3c <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e16b      	b.n	80012f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 815a 	bne.w	80012f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d00b      	beq.n	800105e <HAL_GPIO_Init+0x5a>
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001052:	2b11      	cmp	r3, #17
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b12      	cmp	r3, #18
 800105c:	d130      	bne.n	80010c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 0201 	and.w	r2, r3, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0xfc>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b12      	cmp	r3, #18
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80b4 	beq.w	80012f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b5f      	ldr	r3, [pc, #380]	; (800130c <HAL_GPIO_Init+0x308>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a5e      	ldr	r2, [pc, #376]	; (800130c <HAL_GPIO_Init+0x308>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b5c      	ldr	r3, [pc, #368]	; (800130c <HAL_GPIO_Init+0x308>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a5a      	ldr	r2, [pc, #360]	; (8001310 <HAL_GPIO_Init+0x30c>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a51      	ldr	r2, [pc, #324]	; (8001314 <HAL_GPIO_Init+0x310>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x226>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a50      	ldr	r2, [pc, #320]	; (8001318 <HAL_GPIO_Init+0x314>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x222>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	; (800131c <HAL_GPIO_Init+0x318>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x21e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <HAL_GPIO_Init+0x31c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	; (8001324 <HAL_GPIO_Init+0x320>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <HAL_GPIO_Init+0x324>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	; (800132c <HAL_GPIO_Init+0x328>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <HAL_GPIO_Init+0x32c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x20a>
 800120a:	2307      	movs	r3, #7
 800120c:	e00e      	b.n	800122c <HAL_GPIO_Init+0x228>
 800120e:	2308      	movs	r3, #8
 8001210:	e00c      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001212:	2306      	movs	r3, #6
 8001214:	e00a      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001216:	2305      	movs	r3, #5
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121a:	2304      	movs	r3, #4
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x228>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4934      	ldr	r1, [pc, #208]	; (8001310 <HAL_GPIO_Init+0x30c>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124a:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <HAL_GPIO_Init+0x330>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800126e:	4a31      	ldr	r2, [pc, #196]	; (8001334 <HAL_GPIO_Init+0x330>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x330>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001298:	4a26      	ldr	r2, [pc, #152]	; (8001334 <HAL_GPIO_Init+0x330>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b25      	ldr	r3, [pc, #148]	; (8001334 <HAL_GPIO_Init+0x330>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <HAL_GPIO_Init+0x330>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <HAL_GPIO_Init+0x330>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a11      	ldr	r2, [pc, #68]	; (8001334 <HAL_GPIO_Init+0x330>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f ae90 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	3724      	adds	r7, #36	; 0x24
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	40023800 	.word	0x40023800
 8001310:	40013800 	.word	0x40013800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40021000 	.word	0x40021000
 8001328:	40021400 	.word	0x40021400
 800132c:	40021800 	.word	0x40021800
 8001330:	40021c00 	.word	0x40021c00
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800136a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136c:	b08f      	sub	sp, #60	; 0x3c
 800136e:	af0a      	add	r7, sp, #40	; 0x28
 8001370:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e054      	b.n	8001426 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f004 ffac 	bl	80062f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fa98 	bl	80038f0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	687e      	ldr	r6, [r7, #4]
 80013c8:	466d      	mov	r5, sp
 80013ca:	f106 0410 	add.w	r4, r6, #16
 80013ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013da:	e885 0003 	stmia.w	r5, {r0, r1}
 80013de:	1d33      	adds	r3, r6, #4
 80013e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f002 fa12 	bl	800380c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fa8f 	bl	8003912 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	687e      	ldr	r6, [r7, #4]
 80013fc:	466d      	mov	r5, sp
 80013fe:	f106 0410 	add.w	r4, r6, #16
 8001402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800140e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001412:	1d33      	adds	r3, r6, #4
 8001414:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f002 fba2 	bl	8003b60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800142e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800142e:	b590      	push	{r4, r7, lr}
 8001430:	b089      	sub	sp, #36	; 0x24
 8001432:	af04      	add	r7, sp, #16
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	4608      	mov	r0, r1
 8001438:	4611      	mov	r1, r2
 800143a:	461a      	mov	r2, r3
 800143c:	4603      	mov	r3, r0
 800143e:	70fb      	strb	r3, [r7, #3]
 8001440:	460b      	mov	r3, r1
 8001442:	70bb      	strb	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_HCD_HC_Init+0x28>
 8001452:	2302      	movs	r3, #2
 8001454:	e07f      	b.n	8001556 <HAL_HCD_HC_Init+0x128>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	333d      	adds	r3, #61	; 0x3d
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001472:	78fa      	ldrb	r2, [r7, #3]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	3338      	adds	r3, #56	; 0x38
 8001482:	787a      	ldrb	r2, [r7, #1]
 8001484:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001486:	78fa      	ldrb	r2, [r7, #3]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	3340      	adds	r3, #64	; 0x40
 8001496:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001498:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800149a:	78fa      	ldrb	r2, [r7, #3]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	3339      	adds	r3, #57	; 0x39
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014ae:	78fa      	ldrb	r2, [r7, #3]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	333f      	adds	r3, #63	; 0x3f
 80014be:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014c4:	78fa      	ldrb	r2, [r7, #3]
 80014c6:	78bb      	ldrb	r3, [r7, #2]
 80014c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014cc:	b2d8      	uxtb	r0, r3
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	333a      	adds	r3, #58	; 0x3a
 80014dc:	4602      	mov	r2, r0
 80014de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80014e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da0a      	bge.n	80014fe <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014e8:	78fa      	ldrb	r2, [r7, #3]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	333b      	adds	r3, #59	; 0x3b
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e009      	b.n	8001512 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	333b      	adds	r3, #59	; 0x3b
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	333c      	adds	r3, #60	; 0x3c
 8001522:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001526:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	787c      	ldrb	r4, [r7, #1]
 800152e:	78ba      	ldrb	r2, [r7, #2]
 8001530:	78f9      	ldrb	r1, [r7, #3]
 8001532:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	4623      	mov	r3, r4
 8001544:	f002 fc8e 	bl	8003e64 <USB_HC_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}

0800155e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_HCD_HC_Halt+0x1e>
 8001578:	2302      	movs	r3, #2
 800157a:	e00f      	b.n	800159c <HAL_HCD_HC_Halt+0x3e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	78fa      	ldrb	r2, [r7, #3]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fec8 	bl	8004322 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	70fb      	strb	r3, [r7, #3]
 80015b6:	460b      	mov	r3, r1
 80015b8:	70bb      	strb	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	333b      	adds	r3, #59	; 0x3b
 80015ce:	78ba      	ldrb	r2, [r7, #2]
 80015d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015d2:	78fa      	ldrb	r2, [r7, #3]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	333f      	adds	r3, #63	; 0x3f
 80015e2:	787a      	ldrb	r2, [r7, #1]
 80015e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015e6:	7c3b      	ldrb	r3, [r7, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10a      	bne.n	8001602 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3342      	adds	r3, #66	; 0x42
 80015fc:	2203      	movs	r2, #3
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e009      	b.n	8001616 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	3342      	adds	r3, #66	; 0x42
 8001612:	2202      	movs	r2, #2
 8001614:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001616:	787b      	ldrb	r3, [r7, #1]
 8001618:	2b03      	cmp	r3, #3
 800161a:	f200 80d6 	bhi.w	80017ca <HAL_HCD_HC_SubmitRequest+0x226>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	08001635 	.word	0x08001635
 8001628:	080017b5 	.word	0x080017b5
 800162c:	080016a1 	.word	0x080016a1
 8001630:	0800172b 	.word	0x0800172b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001634:	7c3b      	ldrb	r3, [r7, #16]
 8001636:	2b01      	cmp	r3, #1
 8001638:	f040 80c9 	bne.w	80017ce <HAL_HCD_HC_SubmitRequest+0x22a>
 800163c:	78bb      	ldrb	r3, [r7, #2]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 80c5 	bne.w	80017ce <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001644:	8b3b      	ldrh	r3, [r7, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	3351      	adds	r3, #81	; 0x51
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	3351      	adds	r3, #81	; 0x51
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10a      	bne.n	800168a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	3342      	adds	r3, #66	; 0x42
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001688:	e0a1      	b.n	80017ce <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	440b      	add	r3, r1
 8001698:	3342      	adds	r3, #66	; 0x42
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
      break;
 800169e:	e096      	b.n	80017ce <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016a0:	78bb      	ldrb	r3, [r7, #2]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d120      	bne.n	80016e8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	3351      	adds	r3, #81	; 0x51
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10a      	bne.n	80016d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	3342      	adds	r3, #66	; 0x42
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016d0:	e07e      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	3342      	adds	r3, #66	; 0x42
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
      break;
 80016e6:	e073      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3350      	adds	r3, #80	; 0x50
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10a      	bne.n	8001714 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	440b      	add	r3, r1
 800170c:	3342      	adds	r3, #66	; 0x42
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
      break;
 8001712:	e05d      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	3342      	adds	r3, #66	; 0x42
 8001724:	2202      	movs	r2, #2
 8001726:	701a      	strb	r2, [r3, #0]
      break;
 8001728:	e052      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800172a:	78bb      	ldrb	r3, [r7, #2]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d120      	bne.n	8001772 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	440b      	add	r3, r1
 800173e:	3351      	adds	r3, #81	; 0x51
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10a      	bne.n	800175c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	440b      	add	r3, r1
 8001754:	3342      	adds	r3, #66	; 0x42
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800175a:	e039      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	3342      	adds	r3, #66	; 0x42
 800176c:	2202      	movs	r2, #2
 800176e:	701a      	strb	r2, [r3, #0]
      break;
 8001770:	e02e      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	3350      	adds	r3, #80	; 0x50
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10a      	bne.n	800179e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	3342      	adds	r3, #66	; 0x42
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
      break;
 800179c:	e018      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	3342      	adds	r3, #66	; 0x42
 80017ae:	2202      	movs	r2, #2
 80017b0:	701a      	strb	r2, [r3, #0]
      break;
 80017b2:	e00d      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3342      	adds	r3, #66	; 0x42
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
      break;
 80017c8:	e002      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80017ca:	bf00      	nop
 80017cc:	e000      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80017ce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	3344      	adds	r3, #68	; 0x44
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	8b39      	ldrh	r1, [r7, #24]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4403      	add	r3, r0
 80017f4:	3348      	adds	r3, #72	; 0x48
 80017f6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	335c      	adds	r3, #92	; 0x5c
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	334c      	adds	r3, #76	; 0x4c
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3339      	adds	r3, #57	; 0x39
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	335d      	adds	r3, #93	; 0x5d
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	3338      	adds	r3, #56	; 0x38
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	18d1      	adds	r1, r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	f002 fc08 	bl	8004078 <USB_HC_StartXfer>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop

08001874 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f002 f925 	bl	8003ada <USB_GetMode>
 8001890:	4603      	mov	r3, r0
 8001892:	2b01      	cmp	r3, #1
 8001894:	f040 80f1 	bne.w	8001a7a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f002 f909 	bl	8003ab4 <USB_ReadInterrupts>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80e7 	beq.w	8001a78 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 f900 	bl	8003ab4 <USB_ReadInterrupts>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018be:	d104      	bne.n	80018ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 f8f0 	bl	8003ab4 <USB_ReadInterrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018de:	d104      	bne.n	80018ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 f8e0 	bl	8003ab4 <USB_ReadInterrupts>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018fe:	d104      	bne.n	800190a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001908:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f002 f8d0 	bl	8003ab4 <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b02      	cmp	r3, #2
 800191c:	d103      	bne.n	8001926 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2202      	movs	r2, #2
 8001924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 f8c2 	bl	8003ab4 <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800193a:	d117      	bne.n	800196c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800194a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800194e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f004 fd4d 	bl	80063f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2101      	movs	r1, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f002 f9bb 	bl	8003cd8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 f89f 	bl	8003ab4 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d102      	bne.n	8001988 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f001 f8c8 	bl	8002b18 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 f891 	bl	8003ab4 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b08      	cmp	r3, #8
 800199a:	d106      	bne.n	80019aa <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f004 fd0b 	bl	80063b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2208      	movs	r2, #8
 80019a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 f880 	bl	8003ab4 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019be:	d138      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fc9b 	bl	8004300 <USB_HC_ReadInterrupt>
 80019ca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	e025      	b.n	8001a1e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d018      	beq.n	8001a18 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019fc:	d106      	bne.n	8001a0c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f8cf 	bl	8001ba8 <HCD_HC_IN_IRQHandler>
 8001a0a:	e005      	b.n	8001a18 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fc5f 	bl	80022d6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d3d4      	bcc.n	80019d2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 f83c 	bl	8003ab4 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d101      	bne.n	8001a4a <HAL_HCD_IRQHandler+0x1d6>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_HCD_IRQHandler+0x1d8>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d014      	beq.n	8001a7a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0210 	bic.w	r2, r2, #16
 8001a5e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 ffad 	bl	80029c0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0210 	orr.w	r2, r2, #16
 8001a74:	619a      	str	r2, [r3, #24]
 8001a76:	e000      	b.n	8001a7a <HAL_HCD_IRQHandler+0x206>
      return;
 8001a78:	bf00      	nop
    }
  }
}
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_HCD_Start+0x16>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e013      	b.n	8001abe <HAL_HCD_Start+0x3e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 ff13 	bl	80038ce <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2101      	movs	r1, #1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 f976 	bl	8003da0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_HCD_Stop+0x16>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e00d      	b.n	8001af8 <HAL_HCD_Stop+0x32>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 fd55 	bl	8004598 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 f91d 	bl	8003d4c <USB_ResetPort>
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	335c      	adds	r3, #92	; 0x5c
 8001b38:	781b      	ldrb	r3, [r3, #0]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	334c      	adds	r3, #76	; 0x4c
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 f95f 	bl	8003e40 <USB_GetCurrentFrame>
 8001b82:	4603      	mov	r3, r0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 f93a 	bl	8003e12 <USB_GetHostSpeed>
 8001b9e:	4603      	mov	r3, r0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d119      	bne.n	8001c0c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be4:	461a      	mov	r2, r3
 8001be6:	2304      	movs	r3, #4
 8001be8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	0151      	lsls	r1, r2, #5
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	440a      	add	r2, r1
 8001c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	60d3      	str	r3, [r2, #12]
 8001c0a:	e095      	b.n	8001d38 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d109      	bne.n	8001c36 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2320      	movs	r3, #32
 8001c32:	6093      	str	r3, [r2, #8]
 8001c34:	e080      	b.n	8001d38 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d134      	bne.n	8001cb6 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	0151      	lsls	r1, r2, #5
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	440a      	add	r2, r1
 8001c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	440b      	add	r3, r1
 8001c7a:	335d      	adds	r3, #93	; 0x5d
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2310      	movs	r3, #16
 8001c90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fb37 	bl	8004322 <USB_HC_Halt>
 8001cb4:	e040      	b.n	8001d38 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	015a      	lsls	r2, r3, #5
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ccc:	d134      	bne.n	8001d38 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	0151      	lsls	r1, r2, #5
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	440a      	add	r2, r1
 8001ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fb12 	bl	8004322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	335d      	adds	r3, #93	; 0x5d
 8001d20:	2208      	movs	r2, #8
 8001d22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d30:	461a      	mov	r2, r3
 8001d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d36:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4e:	d122      	bne.n	8001d96 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	0151      	lsls	r1, r2, #5
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	440a      	add	r2, r1
 8001d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 fad1 	bl	8004322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d92:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001d94:	e29b      	b.n	80022ce <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	f040 80c1 	bne.w	8001f30 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d01b      	beq.n	8001dee <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3348      	adds	r3, #72	; 0x48
 8001dc6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	0159      	lsls	r1, r3, #5
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	440b      	add	r3, r1
 8001dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001dda:	1ad1      	subs	r1, r2, r3
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4403      	add	r3, r0
 8001dea:	334c      	adds	r3, #76	; 0x4c
 8001dec:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	335d      	adds	r3, #93	; 0x5d
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	3358      	adds	r3, #88	; 0x58
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	461a      	mov	r2, r3
 8001e24:	2301      	movs	r3, #1
 8001e26:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	333f      	adds	r3, #63	; 0x3f
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	333f      	adds	r3, #63	; 0x3f
 8001e4e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d121      	bne.n	8001e98 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	0151      	lsls	r1, r2, #5
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	440a      	add	r2, r1
 8001e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 fa4f 	bl	8004322 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e90:	461a      	mov	r2, r3
 8001e92:	2310      	movs	r3, #16
 8001e94:	6093      	str	r3, [r2, #8]
 8001e96:	e034      	b.n	8001f02 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	333f      	adds	r3, #63	; 0x3f
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d129      	bne.n	8001f02 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	0151      	lsls	r1, r2, #5
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	440a      	add	r2, r1
 8001ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ecc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	335c      	adds	r3, #92	; 0x5c
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	b2d8      	uxtb	r0, r3
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	335c      	adds	r3, #92	; 0x5c
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4601      	mov	r1, r0
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f004 fa85 	bl	800640c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	3350      	adds	r3, #80	; 0x50
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	f083 0301 	eor.w	r3, r3, #1
 8001f18:	b2d8      	uxtb	r0, r3
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	3350      	adds	r3, #80	; 0x50
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	701a      	strb	r2, [r3, #0]
}
 8001f2e:	e1ce      	b.n	80022ce <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	f040 80f1 	bne.w	800212a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	0151      	lsls	r1, r2, #5
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	440a      	add	r2, r1
 8001f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f62:	f023 0302 	bic.w	r3, r3, #2
 8001f66:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	335d      	adds	r3, #93	; 0x5d
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d10a      	bne.n	8001f94 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	335c      	adds	r3, #92	; 0x5c
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	e0b0      	b.n	80020f6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	335d      	adds	r3, #93	; 0x5d
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b05      	cmp	r3, #5
 8001fa8:	d10a      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	335c      	adds	r3, #92	; 0x5c
 8001fba:	2205      	movs	r2, #5
 8001fbc:	701a      	strb	r2, [r3, #0]
 8001fbe:	e09a      	b.n	80020f6 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	335d      	adds	r3, #93	; 0x5d
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d00a      	beq.n	8001fec <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	335d      	adds	r3, #93	; 0x5d
 8001fe6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d156      	bne.n	800209a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3358      	adds	r3, #88	; 0x58
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1c59      	adds	r1, r3, #1
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4403      	add	r3, r0
 800200e:	3358      	adds	r3, #88	; 0x58
 8002010:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	3358      	adds	r3, #88	; 0x58
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d914      	bls.n	8002052 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	3358      	adds	r3, #88	; 0x58
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	335c      	adds	r3, #92	; 0x5c
 800204c:	2204      	movs	r2, #4
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e009      	b.n	8002066 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	335c      	adds	r3, #92	; 0x5c
 8002062:	2202      	movs	r2, #2
 8002064:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800207c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002084:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	e02d      	b.n	80020f6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	335d      	adds	r3, #93	; 0x5d
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d122      	bne.n	80020f6 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	335c      	adds	r3, #92	; 0x5c
 80020c0:	2202      	movs	r2, #2
 80020c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002102:	461a      	mov	r2, r3
 8002104:	2302      	movs	r3, #2
 8002106:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	b2d8      	uxtb	r0, r3
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	335c      	adds	r3, #92	; 0x5c
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	4601      	mov	r1, r0
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f004 f972 	bl	800640c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002128:	e0d1      	b.n	80022ce <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d13e      	bne.n	80021be <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	0151      	lsls	r1, r2, #5
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	440a      	add	r2, r1
 8002156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	3358      	adds	r3, #88	; 0x58
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	1c59      	adds	r1, r3, #1
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4403      	add	r3, r0
 8002182:	3358      	adds	r3, #88	; 0x58
 8002184:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	335d      	adds	r3, #93	; 0x5d
 8002196:	2206      	movs	r2, #6
 8002198:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f002 f8bc 	bl	8004322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	461a      	mov	r2, r3
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	6093      	str	r3, [r2, #8]
}
 80021bc:	e087      	b.n	80022ce <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b10      	cmp	r3, #16
 80021d2:	d17c      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	333f      	adds	r3, #63	; 0x3f
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d122      	bne.n	8002230 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	3358      	adds	r3, #88	; 0x58
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	0151      	lsls	r1, r2, #5
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	440a      	add	r2, r1
 8002214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f002 f87a 	bl	8004322 <USB_HC_Halt>
 800222e:	e045      	b.n	80022bc <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	333f      	adds	r3, #63	; 0x3f
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	333f      	adds	r3, #63	; 0x3f
 8002256:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002258:	2b02      	cmp	r3, #2
 800225a:	d12f      	bne.n	80022bc <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	3358      	adds	r3, #88	; 0x58
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d121      	bne.n	80022bc <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	335d      	adds	r3, #93	; 0x5d
 8002288:	2203      	movs	r2, #3
 800228a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	0151      	lsls	r1, r2, #5
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	440a      	add	r2, r1
 80022a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 f833 	bl	8004322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	461a      	mov	r2, r3
 80022ca:	2310      	movs	r3, #16
 80022cc:	6093      	str	r3, [r2, #8]
}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b04      	cmp	r3, #4
 8002304:	d119      	bne.n	800233a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	461a      	mov	r2, r3
 8002314:	2304      	movs	r3, #4
 8002316:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	0151      	lsls	r1, r2, #5
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	440a      	add	r2, r1
 800232e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002338:	e33e      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b20      	cmp	r3, #32
 800234e:	d141      	bne.n	80023d4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	461a      	mov	r2, r3
 800235e:	2320      	movs	r3, #32
 8002360:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	333d      	adds	r3, #61	; 0x3d
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	f040 831f 	bne.w	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	333d      	adds	r3, #61	; 0x3d
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	335c      	adds	r3, #92	; 0x5c
 800239e:	2202      	movs	r2, #2
 80023a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	0151      	lsls	r1, r2, #5
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	440a      	add	r2, r1
 80023b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 ffa8 	bl	8004322 <USB_HC_Halt>
}
 80023d2:	e2f1      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b40      	cmp	r3, #64	; 0x40
 80023e8:	d13f      	bne.n	800246a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	335d      	adds	r3, #93	; 0x5d
 80023fa:	2204      	movs	r2, #4
 80023fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	440b      	add	r3, r1
 800240c:	333d      	adds	r3, #61	; 0x3d
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	440b      	add	r3, r1
 8002420:	3358      	adds	r3, #88	; 0x58
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	0151      	lsls	r1, r2, #5
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	440a      	add	r2, r1
 800243c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f001 ff66 	bl	8004322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	461a      	mov	r2, r3
 8002464:	2340      	movs	r3, #64	; 0x40
 8002466:	6093      	str	r3, [r2, #8]
}
 8002468:	e2a6      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4413      	add	r3, r2
 8002472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002480:	d122      	bne.n	80024c8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	0151      	lsls	r1, r2, #5
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	440a      	add	r2, r1
 8002498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 ff38 	bl	8004322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024be:	461a      	mov	r2, r3
 80024c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024c4:	6093      	str	r3, [r2, #8]
}
 80024c6:	e277      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d135      	bne.n	800254a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	440b      	add	r3, r1
 80024ec:	3358      	adds	r3, #88	; 0x58
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	0151      	lsls	r1, r2, #5
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	440a      	add	r2, r1
 8002508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f001 ff00 	bl	8004322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	461a      	mov	r2, r3
 8002530:	2301      	movs	r3, #1
 8002532:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	335d      	adds	r3, #93	; 0x5d
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
}
 8002548:	e236      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b08      	cmp	r3, #8
 800255e:	d12b      	bne.n	80025b8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	2308      	movs	r3, #8
 8002570:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	0151      	lsls	r1, r2, #5
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	440a      	add	r2, r1
 8002588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f001 fec0 	bl	8004322 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	335d      	adds	r3, #93	; 0x5d
 80025b2:	2205      	movs	r2, #5
 80025b4:	701a      	strb	r2, [r3, #0]
}
 80025b6:	e1ff      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d155      	bne.n	800267a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	3358      	adds	r3, #88	; 0x58
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	440b      	add	r3, r1
 80025f0:	335d      	adds	r3, #93	; 0x5d
 80025f2:	2203      	movs	r2, #3
 80025f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	333d      	adds	r3, #61	; 0x3d
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d114      	bne.n	8002636 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	333c      	adds	r3, #60	; 0x3c
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	333d      	adds	r3, #61	; 0x3d
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	440a      	add	r2, r1
 800264c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f001 fe5e 	bl	8004322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	2310      	movs	r3, #16
 8002676:	6093      	str	r3, [r2, #8]
}
 8002678:	e19e      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d12b      	bne.n	80026e8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	0151      	lsls	r1, r2, #5
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	440a      	add	r2, r1
 80026a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026aa:	f043 0302 	orr.w	r3, r3, #2
 80026ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 fe31 	bl	8004322 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	335d      	adds	r3, #93	; 0x5d
 80026d0:	2206      	movs	r2, #6
 80026d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	461a      	mov	r2, r3
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	6093      	str	r3, [r2, #8]
}
 80026e6:	e167      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fe:	d135      	bne.n	800276c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	0151      	lsls	r1, r2, #5
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	440a      	add	r2, r1
 8002716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f001 fdf9 	bl	8004322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	461a      	mov	r2, r3
 800273e:	2310      	movs	r3, #16
 8002740:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	461a      	mov	r2, r3
 8002750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002754:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	440b      	add	r3, r1
 8002764:	335d      	adds	r3, #93	; 0x5d
 8002766:	2208      	movs	r2, #8
 8002768:	701a      	strb	r2, [r3, #0]
}
 800276a:	e125      	b.n	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	f040 811a 	bne.w	80029b8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	0151      	lsls	r1, r2, #5
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	440a      	add	r2, r1
 800279a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279e:	f023 0302 	bic.w	r3, r3, #2
 80027a2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	335d      	adds	r3, #93	; 0x5d
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d137      	bne.n	800282a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	335c      	adds	r3, #92	; 0x5c
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	333f      	adds	r3, #63	; 0x3f
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d00b      	beq.n	80027fc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	333f      	adds	r3, #63	; 0x3f
 80027f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	f040 80c5 	bne.w	8002986 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	3351      	adds	r3, #81	; 0x51
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2d8      	uxtb	r0, r3
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	3351      	adds	r3, #81	; 0x51
 8002824:	4602      	mov	r2, r0
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	e0ad      	b.n	8002986 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	335d      	adds	r3, #93	; 0x5d
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d10a      	bne.n	8002856 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	335c      	adds	r3, #92	; 0x5c
 8002850:	2202      	movs	r2, #2
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e097      	b.n	8002986 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	335d      	adds	r3, #93	; 0x5d
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d10a      	bne.n	8002882 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	335c      	adds	r3, #92	; 0x5c
 800287c:	2202      	movs	r2, #2
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e081      	b.n	8002986 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	335d      	adds	r3, #93	; 0x5d
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b05      	cmp	r3, #5
 8002896:	d10a      	bne.n	80028ae <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	335c      	adds	r3, #92	; 0x5c
 80028a8:	2205      	movs	r2, #5
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e06b      	b.n	8002986 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	335d      	adds	r3, #93	; 0x5d
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d00a      	beq.n	80028da <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	335d      	adds	r3, #93	; 0x5d
 80028d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d155      	bne.n	8002986 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	3358      	adds	r3, #88	; 0x58
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c59      	adds	r1, r3, #1
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4403      	add	r3, r0
 80028fc:	3358      	adds	r3, #88	; 0x58
 80028fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	3358      	adds	r3, #88	; 0x58
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d914      	bls.n	8002940 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	3358      	adds	r3, #88	; 0x58
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	335c      	adds	r3, #92	; 0x5c
 800293a:	2204      	movs	r2, #4
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e009      	b.n	8002954 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	335c      	adds	r3, #92	; 0x5c
 8002950:	2202      	movs	r2, #2
 8002952:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800296a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002972:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	2302      	movs	r3, #2
 8002996:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	b2d8      	uxtb	r0, r3
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	4601      	mov	r1, r0
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f003 fd2a 	bl	800640c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029b8:	bf00      	nop
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	0c5b      	lsrs	r3, r3, #17
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d003      	beq.n	8002a04 <HCD_RXQLVL_IRQHandler+0x44>
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	f000 8082 	beq.w	8002b06 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a02:	e083      	b.n	8002b0c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d07f      	beq.n	8002b0a <HCD_RXQLVL_IRQHandler+0x14a>
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	440b      	add	r3, r1
 8002a18:	3344      	adds	r3, #68	; 0x44
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d074      	beq.n	8002b0a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	3344      	adds	r3, #68	; 0x44
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	b292      	uxth	r2, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f001 f811 	bl	8003a62 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3344      	adds	r3, #68	; 0x44
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	18d1      	adds	r1, r2, r3
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4403      	add	r3, r0
 8002a64:	3344      	adds	r3, #68	; 0x44
 8002a66:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	334c      	adds	r3, #76	; 0x4c
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	18d1      	adds	r1, r2, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4403      	add	r3, r0
 8002a8c:	334c      	adds	r3, #76	; 0x4c
 8002a8e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HCD_RXQLVL_IRQHandler+0x154>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d031      	beq.n	8002b0a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002abc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3350      	adds	r3, #80	; 0x50
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	f083 0301 	eor.w	r3, r3, #1
 8002aee:	b2d8      	uxtb	r0, r3
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	3350      	adds	r3, #80	; 0x50
 8002b00:	4602      	mov	r2, r0
 8002b02:	701a      	strb	r2, [r3, #0]
      break;
 8002b04:	e001      	b.n	8002b0a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002b06:	bf00      	nop
 8002b08:	e000      	b.n	8002b0c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b0a:	bf00      	nop
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	3728      	adds	r7, #40	; 0x28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	1ff80000 	.word	0x1ff80000

08002b18 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b44:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d113      	bne.n	8002b78 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d10a      	bne.n	8002b70 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b68:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f003 fc32 	bl	80063d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d147      	bne.n	8002c12 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f043 0308 	orr.w	r3, r3, #8
 8002b88:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d129      	bne.n	8002be8 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d113      	bne.n	8002bc4 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba6:	d106      	bne.n	8002bb6 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2102      	movs	r1, #2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 f892 	bl	8003cd8 <USB_InitFSLSPClkSel>
 8002bb4:	e011      	b.n	8002bda <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 f88b 	bl	8003cd8 <USB_InitFSLSPClkSel>
 8002bc2:	e00a      	b.n	8002bda <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d106      	bne.n	8002bda <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bd8:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f003 fc24 	bl	8006428 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f003 fbf7 	bl	80063d4 <HAL_HCD_Connect_Callback>
 8002be6:	e014      	b.n	8002c12 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f003 fc2b 	bl	8006444 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002bfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c00:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c10:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d103      	bne.n	8002c24 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f043 0320 	orr.w	r3, r3, #32
 8002c22:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	6013      	str	r3, [r2, #0]
}
 8002c30:	bf00      	nop
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e11f      	b.n	8002e8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fd fec0 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	; 0x24
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f000 fd3e 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a7b      	ldr	r2, [pc, #492]	; (8002e94 <HAL_I2C_Init+0x25c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d807      	bhi.n	8002cbc <HAL_I2C_Init+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a7a      	ldr	r2, [pc, #488]	; (8002e98 <HAL_I2C_Init+0x260>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e006      	b.n	8002cca <HAL_I2C_Init+0x92>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a77      	ldr	r2, [pc, #476]	; (8002e9c <HAL_I2C_Init+0x264>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0db      	b.n	8002e8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a72      	ldr	r2, [pc, #456]	; (8002ea0 <HAL_I2C_Init+0x268>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a64      	ldr	r2, [pc, #400]	; (8002e94 <HAL_I2C_Init+0x25c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d802      	bhi.n	8002d0c <HAL_I2C_Init+0xd4>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	e009      	b.n	8002d20 <HAL_I2C_Init+0xe8>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	4a63      	ldr	r2, [pc, #396]	; (8002ea4 <HAL_I2C_Init+0x26c>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	3301      	adds	r3, #1
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4956      	ldr	r1, [pc, #344]	; (8002e94 <HAL_I2C_Init+0x25c>)
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	d80d      	bhi.n	8002d5c <HAL_I2C_Init+0x124>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e59      	subs	r1, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	bf38      	it	cc
 8002d58:	2304      	movcc	r3, #4
 8002d5a:	e04f      	b.n	8002dfc <HAL_I2C_Init+0x1c4>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d111      	bne.n	8002d88 <HAL_I2C_Init+0x150>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	440b      	add	r3, r1
 8002d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	e012      	b.n	8002dae <HAL_I2C_Init+0x176>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	0099      	lsls	r1, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Init+0x17e>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e022      	b.n	8002dfc <HAL_I2C_Init+0x1c4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10e      	bne.n	8002ddc <HAL_I2C_Init+0x1a4>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1e58      	subs	r0, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	440b      	add	r3, r1
 8002dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dda:	e00f      	b.n	8002dfc <HAL_I2C_Init+0x1c4>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1e58      	subs	r0, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	0099      	lsls	r1, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	6809      	ldr	r1, [r1, #0]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6911      	ldr	r1, [r2, #16]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68d2      	ldr	r2, [r2, #12]
 8002e36:	4311      	orrs	r1, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	000186a0 	.word	0x000186a0
 8002e98:	001e847f 	.word	0x001e847f
 8002e9c:	003d08ff 	.word	0x003d08ff
 8002ea0:	431bde83 	.word	0x431bde83
 8002ea4:	10624dd3 	.word	0x10624dd3

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e25b      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d075      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ec6:	4ba3      	ldr	r3, [pc, #652]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d00c      	beq.n	8002eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed2:	4ba0      	ldr	r3, [pc, #640]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d112      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4b9d      	ldr	r3, [pc, #628]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4b99      	ldr	r3, [pc, #612]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05b      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x108>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d157      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e236      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x74>
 8002f0e:	4b91      	ldr	r3, [pc, #580]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a90      	ldr	r2, [pc, #576]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e01d      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b8b      	ldr	r3, [pc, #556]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a8a      	ldr	r2, [pc, #552]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a87      	ldr	r2, [pc, #540]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f40:	4b84      	ldr	r3, [pc, #528]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a83      	ldr	r2, [pc, #524]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b81      	ldr	r3, [pc, #516]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a80      	ldr	r2, [pc, #512]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fd ff10 	bl	8000d84 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fd ff0c 	bl	8000d84 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1fb      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0xc0>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fd fefc 	bl	8000d84 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fd fef8 	bl	8000d84 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e1e7      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0xe8>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d063      	beq.n	8003086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fbe:	4b65      	ldr	r3, [pc, #404]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fca:	4b62      	ldr	r3, [pc, #392]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d11c      	bne.n	8003010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b5f      	ldr	r3, [pc, #380]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	4b5c      	ldr	r3, [pc, #368]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_RCC_OscConfig+0x152>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e1bb      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffa:	4b56      	ldr	r3, [pc, #344]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4952      	ldr	r1, [pc, #328]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	e03a      	b.n	8003086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003018:	4b4f      	ldr	r3, [pc, #316]	; (8003158 <HAL_RCC_OscConfig+0x2b0>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7fd feb1 	bl	8000d84 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003026:	f7fd fead 	bl	8000d84 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e19c      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	4b46      	ldr	r3, [pc, #280]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4940      	ldr	r1, [pc, #256]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]
 8003058:	e015      	b.n	8003086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <HAL_RCC_OscConfig+0x2b0>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fd fe90 	bl	8000d84 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003068:	f7fd fe8c 	bl	8000d84 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e17b      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d030      	beq.n	80030f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309a:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_RCC_OscConfig+0x2b4>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fd fe70 	bl	8000d84 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fd fe6c 	bl	8000d84 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e15b      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x200>
 80030c6:	e015      	b.n	80030f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c8:	4b24      	ldr	r3, [pc, #144]	; (800315c <HAL_RCC_OscConfig+0x2b4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ce:	f7fd fe59 	bl	8000d84 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fd fe55 	bl	8000d84 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e144      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a0 	beq.w	8003242 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a0e      	ldr	r2, [pc, #56]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_OscConfig+0x2b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d121      	bne.n	8003182 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <HAL_RCC_OscConfig+0x2b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_RCC_OscConfig+0x2b8>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314a:	f7fd fe1b 	bl	8000d84 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	e011      	b.n	8003176 <HAL_RCC_OscConfig+0x2ce>
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	42470000 	.word	0x42470000
 800315c:	42470e80 	.word	0x42470e80
 8003160:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003164:	f7fd fe0e 	bl	8000d84 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e0fd      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b81      	ldr	r3, [pc, #516]	; (800337c <HAL_RCC_OscConfig+0x4d4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d106      	bne.n	8003198 <HAL_RCC_OscConfig+0x2f0>
 800318a:	4b7d      	ldr	r3, [pc, #500]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a7c      	ldr	r2, [pc, #496]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	e01c      	b.n	80031d2 <HAL_RCC_OscConfig+0x32a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d10c      	bne.n	80031ba <HAL_RCC_OscConfig+0x312>
 80031a0:	4b77      	ldr	r3, [pc, #476]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a76      	ldr	r2, [pc, #472]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	4b74      	ldr	r3, [pc, #464]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a73      	ldr	r2, [pc, #460]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	e00b      	b.n	80031d2 <HAL_RCC_OscConfig+0x32a>
 80031ba:	4b71      	ldr	r3, [pc, #452]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a70      	ldr	r2, [pc, #448]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	4b6e      	ldr	r3, [pc, #440]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	4a6d      	ldr	r2, [pc, #436]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031cc:	f023 0304 	bic.w	r3, r3, #4
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d015      	beq.n	8003206 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fd fdd3 	bl	8000d84 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fd fdcf 	bl	8000d84 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e0bc      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	4b61      	ldr	r3, [pc, #388]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ee      	beq.n	80031e2 <HAL_RCC_OscConfig+0x33a>
 8003204:	e014      	b.n	8003230 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7fd fdbd 	bl	8000d84 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fd fdb9 	bl	8000d84 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0a6      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003224:	4b56      	ldr	r3, [pc, #344]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ee      	bne.n	800320e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b52      	ldr	r3, [pc, #328]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a51      	ldr	r2, [pc, #324]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8092 	beq.w	8003370 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800324c:	4b4c      	ldr	r3, [pc, #304]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d05c      	beq.n	8003312 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d141      	bne.n	80032e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003260:	4b48      	ldr	r3, [pc, #288]	; (8003384 <HAL_RCC_OscConfig+0x4dc>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fd fd8d 	bl	8000d84 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326e:	f7fd fd89 	bl	8000d84 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e078      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003280:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	019b      	lsls	r3, r3, #6
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	3b01      	subs	r3, #1
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	061b      	lsls	r3, r3, #24
 80032b0:	4933      	ldr	r1, [pc, #204]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b6:	4b33      	ldr	r3, [pc, #204]	; (8003384 <HAL_RCC_OscConfig+0x4dc>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fd fd62 	bl	8000d84 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fd fd5e 	bl	8000d84 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e04d      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x41c>
 80032e2:	e045      	b.n	8003370 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x4dc>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fd fd4b 	bl	8000d84 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fd fd47 	bl	8000d84 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e036      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x44a>
 8003310:	e02e      	b.n	8003370 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e029      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_RCC_OscConfig+0x4d8>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	429a      	cmp	r2, r3
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d115      	bne.n	800336c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003346:	4013      	ands	r3, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800334c:	4293      	cmp	r3, r2
 800334e:	d10d      	bne.n	800336c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d106      	bne.n	800336c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40007000 	.word	0x40007000
 8003380:	40023800 	.word	0x40023800
 8003384:	42470060 	.word	0x42470060

08003388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0cc      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b68      	ldr	r3, [pc, #416]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d90c      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b65      	ldr	r3, [pc, #404]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0b8      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a52      	ldr	r2, [pc, #328]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	494d      	ldr	r1, [pc, #308]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d044      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d119      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d003      	beq.n	8003446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003442:	2b03      	cmp	r3, #3
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e06f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e067      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b37      	ldr	r3, [pc, #220]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4934      	ldr	r1, [pc, #208]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fd fc84 	bl	8000d84 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fd fc80 	bl	8000d84 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e04f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d20c      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e032      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4916      	ldr	r1, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	490e      	ldr	r1, [pc, #56]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800350e:	f000 f821 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003512:	4601      	mov	r1, r0
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
 8003522:	fa21 f303 	lsr.w	r3, r1, r3
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fd fbe4 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023c00 	.word	0x40023c00
 8003544:	40023800 	.word	0x40023800
 8003548:	08006a14 	.word	0x08006a14
 800354c:	20000000 	.word	0x20000000
 8003550:	20000004 	.word	0x20000004

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	2300      	movs	r3, #0
 8003564:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b04      	cmp	r3, #4
 8003574:	d007      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x32>
 8003576:	2b08      	cmp	r3, #8
 8003578:	d008      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x38>
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 80b4 	bne.w	80036e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003580:	4b5e      	ldr	r3, [pc, #376]	; (80036fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003582:	60bb      	str	r3, [r7, #8]
       break;
 8003584:	e0b3      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003586:	4b5e      	ldr	r3, [pc, #376]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003588:	60bb      	str	r3, [r7, #8]
      break;
 800358a:	e0b0      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800358c:	4b5a      	ldr	r3, [pc, #360]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003594:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003596:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d04a      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a2:	4b55      	ldr	r3, [pc, #340]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	f04f 0400 	mov.w	r4, #0
 80035ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	ea03 0501 	and.w	r5, r3, r1
 80035b8:	ea04 0602 	and.w	r6, r4, r2
 80035bc:	4629      	mov	r1, r5
 80035be:	4632      	mov	r2, r6
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	0154      	lsls	r4, r2, #5
 80035ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035ce:	014b      	lsls	r3, r1, #5
 80035d0:	4619      	mov	r1, r3
 80035d2:	4622      	mov	r2, r4
 80035d4:	1b49      	subs	r1, r1, r5
 80035d6:	eb62 0206 	sbc.w	r2, r2, r6
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	f04f 0400 	mov.w	r4, #0
 80035e2:	0194      	lsls	r4, r2, #6
 80035e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035e8:	018b      	lsls	r3, r1, #6
 80035ea:	1a5b      	subs	r3, r3, r1
 80035ec:	eb64 0402 	sbc.w	r4, r4, r2
 80035f0:	f04f 0100 	mov.w	r1, #0
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	00e2      	lsls	r2, r4, #3
 80035fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035fe:	00d9      	lsls	r1, r3, #3
 8003600:	460b      	mov	r3, r1
 8003602:	4614      	mov	r4, r2
 8003604:	195b      	adds	r3, r3, r5
 8003606:	eb44 0406 	adc.w	r4, r4, r6
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	0262      	lsls	r2, r4, #9
 8003614:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003618:	0259      	lsls	r1, r3, #9
 800361a:	460b      	mov	r3, r1
 800361c:	4614      	mov	r4, r2
 800361e:	4618      	mov	r0, r3
 8003620:	4621      	mov	r1, r4
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f04f 0400 	mov.w	r4, #0
 8003628:	461a      	mov	r2, r3
 800362a:	4623      	mov	r3, r4
 800362c:	f7fc fdcc 	bl	80001c8 <__aeabi_uldivmod>
 8003630:	4603      	mov	r3, r0
 8003632:	460c      	mov	r4, r1
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e049      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	f04f 0400 	mov.w	r4, #0
 8003642:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	ea03 0501 	and.w	r5, r3, r1
 800364e:	ea04 0602 	and.w	r6, r4, r2
 8003652:	4629      	mov	r1, r5
 8003654:	4632      	mov	r2, r6
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	f04f 0400 	mov.w	r4, #0
 800365e:	0154      	lsls	r4, r2, #5
 8003660:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003664:	014b      	lsls	r3, r1, #5
 8003666:	4619      	mov	r1, r3
 8003668:	4622      	mov	r2, r4
 800366a:	1b49      	subs	r1, r1, r5
 800366c:	eb62 0206 	sbc.w	r2, r2, r6
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	f04f 0400 	mov.w	r4, #0
 8003678:	0194      	lsls	r4, r2, #6
 800367a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800367e:	018b      	lsls	r3, r1, #6
 8003680:	1a5b      	subs	r3, r3, r1
 8003682:	eb64 0402 	sbc.w	r4, r4, r2
 8003686:	f04f 0100 	mov.w	r1, #0
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	00e2      	lsls	r2, r4, #3
 8003690:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003694:	00d9      	lsls	r1, r3, #3
 8003696:	460b      	mov	r3, r1
 8003698:	4614      	mov	r4, r2
 800369a:	195b      	adds	r3, r3, r5
 800369c:	eb44 0406 	adc.w	r4, r4, r6
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	02a2      	lsls	r2, r4, #10
 80036aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036ae:	0299      	lsls	r1, r3, #10
 80036b0:	460b      	mov	r3, r1
 80036b2:	4614      	mov	r4, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	4621      	mov	r1, r4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f04f 0400 	mov.w	r4, #0
 80036be:	461a      	mov	r2, r3
 80036c0:	4623      	mov	r3, r4
 80036c2:	f7fc fd81 	bl	80001c8 <__aeabi_uldivmod>
 80036c6:	4603      	mov	r3, r0
 80036c8:	460c      	mov	r4, r1
 80036ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	3301      	adds	r3, #1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	60bb      	str	r3, [r7, #8]
      break;
 80036e6:	e002      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036ea:	60bb      	str	r3, [r7, #8]
      break;
 80036ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ee:	68bb      	ldr	r3, [r7, #8]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	007a1200 	.word	0x007a1200

08003704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_RCC_GetHCLKFreq+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000000 	.word	0x20000000

0800371c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003720:	f7ff fff0 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003724:	4601      	mov	r1, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0a9b      	lsrs	r3, r3, #10
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4a03      	ldr	r2, [pc, #12]	; (8003740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003732:	5cd3      	ldrb	r3, [r2, r3]
 8003734:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	08006a24 	.word	0x08006a24

08003744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e056      	b.n	8003804 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d106      	bne.n	8003776 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7fd f97f 	bl	8000a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2202      	movs	r2, #2
 800377a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	ea42 0103 	orr.w	r1, r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	0c1b      	lsrs	r3, r3, #16
 80037d4:	f003 0104 	and.w	r1, r3, #4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800380c:	b084      	sub	sp, #16
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	f107 001c 	add.w	r0, r7, #28
 800381a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	2b01      	cmp	r3, #1
 8003822:	d122      	bne.n	800386a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800384c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f94a 	bl	8003af8 <USB_CoreReset>
 8003864:	4603      	mov	r3, r0
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e01a      	b.n	80038a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f93e 	bl	8003af8 <USB_CoreReset>
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
 8003892:	e005      	b.n	80038a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d10b      	bne.n	80038be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f043 0206 	orr.w	r2, r3, #6
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038be:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038ca:	b004      	add	sp, #16
 80038cc:	4770      	bx	lr

080038ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f023 0201 	bic.w	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d106      	bne.n	800393e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	e00b      	b.n	8003956 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	e001      	b.n	8003956 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e003      	b.n	800395e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003956:	2032      	movs	r0, #50	; 0x32
 8003958:	f7fd fa20 	bl	8000d9c <HAL_Delay>

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3301      	adds	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <USB_FlushTxFifo+0x48>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e006      	b.n	80039a2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b20      	cmp	r3, #32
 800399e:	d0f0      	beq.n	8003982 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	00030d40 	.word	0x00030d40

080039b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2210      	movs	r2, #16
 80039c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3301      	adds	r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <USB_FlushRxFifo+0x40>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e006      	b.n	80039e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b10      	cmp	r3, #16
 80039e2:	d0f0      	beq.n	80039c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	00030d40 	.word	0x00030d40

080039f8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	4611      	mov	r1, r2
 8003a04:	461a      	mov	r2, r3
 8003a06:	460b      	mov	r3, r1
 8003a08:	71fb      	strb	r3, [r7, #7]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003a16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11a      	bne.n	8003a54 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a1e:	88bb      	ldrh	r3, [r7, #4]
 8003a20:	3303      	adds	r3, #3
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	e00f      	b.n	8003a4c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	031a      	lsls	r2, r3, #12
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a38:	461a      	mov	r2, r3
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	3304      	adds	r3, #4
 8003a44:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d3eb      	bcc.n	8003a2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b089      	sub	sp, #36	; 0x24
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	3303      	adds	r3, #3
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	e00b      	b.n	8003a9e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	601a      	str	r2, [r3, #0]
    pDest++;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3304      	adds	r3, #4
 8003a96:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d3ef      	bcc.n	8003a86 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003aa6:	69fb      	ldr	r3, [r7, #28]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3724      	adds	r7, #36	; 0x24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003acc:	68fb      	ldr	r3, [r7, #12]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3301      	adds	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <USB_CoreReset+0x64>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e01b      	b.n	8003b4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	daf2      	bge.n	8003b04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3301      	adds	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <USB_CoreReset+0x64>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e006      	b.n	8003b4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d0f0      	beq.n	8003b2e <USB_CoreReset+0x36>

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	00030d40 	.word	0x00030d40

08003b60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b60:	b084      	sub	sp, #16
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	f107 001c 	add.w	r0, r7, #28
 8003b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d018      	beq.n	8003be4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d10a      	bne.n	8003bce <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bc6:	f043 0304 	orr.w	r3, r3, #4
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e014      	b.n	8003bf8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e009      	b.n	8003bf8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bf2:	f023 0304 	bic.w	r3, r3, #4
 8003bf6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003bf8:	2110      	movs	r1, #16
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff feb4 	bl	8003968 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fed7 	bl	80039b4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e015      	b.n	8003c38 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3e5      	bcc.n	8003c0c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8003c40:	2101      	movs	r1, #1
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8ac 	bl	8003da0 <USB_DriveVbus>

  HAL_Delay(200U);
 8003c48:	20c8      	movs	r0, #200	; 0xc8
 8003c4a:	f7fd f8a7 	bl	8000d9c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00b      	beq.n	8003c80 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <USB_HostInit+0x164>)
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <USB_HostInit+0x168>)
 8003c7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003c7e:	e009      	b.n	8003c94 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <USB_HostInit+0x16c>)
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <USB_HostInit+0x170>)
 8003c90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f043 0210 	orr.w	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <USB_HostInit+0x174>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cbe:	b004      	add	sp, #16
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	01000200 	.word	0x01000200
 8003cc8:	00e00300 	.word	0x00e00300
 8003ccc:	00600080 	.word	0x00600080
 8003cd0:	004000e0 	.word	0x004000e0
 8003cd4:	a3200008 	.word	0xa3200008

08003cd8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d10:	4313      	orrs	r3, r2
 8003d12:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d20:	461a      	mov	r2, r3
 8003d22:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003d26:	6053      	str	r3, [r2, #4]
 8003d28:	e009      	b.n	8003d3e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d106      	bne.n	8003d3e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d36:	461a      	mov	r2, r3
 8003d38:	f241 7370 	movw	r3, #6000	; 0x1770
 8003d3c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d6c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003d7c:	2064      	movs	r0, #100	; 0x64
 8003d7e:	f7fd f80d 	bl	8000d9c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003d90:	200a      	movs	r0, #10
 8003d92:	f7fd f803 	bl	8000d9c <HAL_Delay>

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003dc4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d109      	bne.n	8003de4 <USB_DriveVbus+0x44>
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d106      	bne.n	8003de4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003dde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003de2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dee:	d109      	bne.n	8003e04 <USB_DriveVbus+0x64>
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e02:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	0c5b      	lsrs	r3, r3, #17
 8003e30:	f003 0303 	and.w	r3, r3, #3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	b29b      	uxth	r3, r3
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	70fb      	strb	r3, [r7, #3]
 8003e76:	460b      	mov	r3, r1
 8003e78:	70bb      	strb	r3, [r7, #2]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e92:	461a      	mov	r2, r3
 8003e94:	f04f 33ff 	mov.w	r3, #4294967295
 8003e98:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003e9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d87e      	bhi.n	8003fa0 <USB_HC_Init+0x13c>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <USB_HC_Init+0x44>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003eb9 	.word	0x08003eb9
 8003eac:	08003f63 	.word	0x08003f63
 8003eb0:	08003eb9 	.word	0x08003eb9
 8003eb4:	08003f25 	.word	0x08003f25
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f240 439d 	movw	r3, #1181	; 0x49d
 8003eca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003ecc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da10      	bge.n	8003ef6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	0151      	lsls	r1, r2, #5
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	440a      	add	r2, r1
 8003eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8003ef4:	e057      	b.n	8003fa6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d051      	beq.n	8003fa6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	0151      	lsls	r1, r2, #5
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	440a      	add	r2, r1
 8003f18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f20:	60d3      	str	r3, [r2, #12]
      break;
 8003f22:	e040      	b.n	8003fa6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	f240 639d 	movw	r3, #1693	; 0x69d
 8003f36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003f38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	da34      	bge.n	8003faa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003f60:	e023      	b.n	8003faa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f240 2325 	movw	r3, #549	; 0x225
 8003f74:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003f76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da17      	bge.n	8003fae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f98:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003f9c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003f9e:	e006      	b.n	8003fae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa4:	e004      	b.n	8003fb0 <USB_HC_Init+0x14c>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e002      	b.n	8003fb0 <USB_HC_Init+0x14c>
      break;
 8003faa:	bf00      	nop
 8003fac:	e000      	b.n	8003fb0 <USB_HC_Init+0x14c>
      break;
 8003fae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003fda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da03      	bge.n	8003fea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	e001      	b.n	8003fee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8003fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d103      	bne.n	8003ffe <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e001      	b.n	8004002 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004002:	787b      	ldrb	r3, [r7, #1]
 8004004:	059b      	lsls	r3, r3, #22
 8004006:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800400a:	78bb      	ldrb	r3, [r7, #2]
 800400c:	02db      	lsls	r3, r3, #11
 800400e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004012:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004014:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004018:	049b      	lsls	r3, r3, #18
 800401a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800401e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004020:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004022:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004026:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	0159      	lsls	r1, r3, #5
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	440b      	add	r3, r1
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800403e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004040:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004044:	2b03      	cmp	r3, #3
 8004046:	d10f      	bne.n	8004068 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	440a      	add	r2, r1
 800405e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004066:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004068:	7dfb      	ldrb	r3, [r7, #23]
}
 800406a:	4618      	mov	r0, r3
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop

08004078 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08c      	sub	sp, #48	; 0x30
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004094:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d028      	beq.n	80040f4 <USB_HC_StartXfer+0x7c>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	791b      	ldrb	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d124      	bne.n	80040f4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <USB_HC_StartXfer+0x50>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	795b      	ldrb	r3, [r3, #5]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	4619      	mov	r1, r3
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fa2e 	bl	8004520 <USB_DoPing>
      return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e112      	b.n	80042ee <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d112      	bne.n	80040f4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	0151      	lsls	r1, r2, #5
 80040e0:	6a3a      	ldr	r2, [r7, #32]
 80040e2:	440a      	add	r2, r1
 80040e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040e8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80040ec:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d018      	beq.n	800412e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	8912      	ldrh	r2, [r2, #8]
 8004104:	4413      	add	r3, r2
 8004106:	3b01      	subs	r3, #1
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	8912      	ldrh	r2, [r2, #8]
 800410c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004110:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004112:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004114:	8b7b      	ldrh	r3, [r7, #26]
 8004116:	429a      	cmp	r2, r3
 8004118:	d90b      	bls.n	8004132 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800411a:	8b7b      	ldrh	r3, [r7, #26]
 800411c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800411e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	8912      	ldrh	r2, [r2, #8]
 8004124:	fb02 f203 	mul.w	r2, r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	611a      	str	r2, [r3, #16]
 800412c:	e001      	b.n	8004132 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800412e:	2301      	movs	r3, #1
 8004130:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	78db      	ldrb	r3, [r3, #3]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800413a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	8912      	ldrh	r2, [r2, #8]
 8004140:	fb02 f203 	mul.w	r2, r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004152:	04d9      	lsls	r1, r3, #19
 8004154:	4b68      	ldr	r3, [pc, #416]	; (80042f8 <USB_HC_StartXfer+0x280>)
 8004156:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004158:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	7a9b      	ldrb	r3, [r3, #10]
 800415e:	075b      	lsls	r3, r3, #29
 8004160:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004164:	69f9      	ldr	r1, [r7, #28]
 8004166:	0148      	lsls	r0, r1, #5
 8004168:	6a39      	ldr	r1, [r7, #32]
 800416a:	4401      	add	r1, r0
 800416c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004170:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004172:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	68d9      	ldr	r1, [r3, #12]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	4413      	add	r3, r2
 8004186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418a:	460a      	mov	r2, r1
 800418c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf0c      	ite	eq
 800419e:	2301      	moveq	r3, #1
 80041a0:	2300      	movne	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80041c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	7e7b      	ldrb	r3, [r7, #25]
 80041d6:	075b      	lsls	r3, r3, #29
 80041d8:	69f9      	ldr	r1, [r7, #28]
 80041da:	0148      	lsls	r0, r1, #5
 80041dc:	6a39      	ldr	r1, [r7, #32]
 80041de:	4401      	add	r1, r0
 80041e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a41      	ldr	r2, [pc, #260]	; (80042fc <USB_HC_StartXfer+0x284>)
 80041f8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041fa:	4b40      	ldr	r3, [pc, #256]	; (80042fc <USB_HC_StartXfer+0x284>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004202:	4a3e      	ldr	r2, [pc, #248]	; (80042fc <USB_HC_StartXfer+0x284>)
 8004204:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d006      	beq.n	800421c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800420e:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <USB_HC_StartXfer+0x284>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004216:	4a39      	ldr	r2, [pc, #228]	; (80042fc <USB_HC_StartXfer+0x284>)
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e005      	b.n	8004228 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800421c:	4b37      	ldr	r3, [pc, #220]	; (80042fc <USB_HC_StartXfer+0x284>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004224:	4a35      	ldr	r2, [pc, #212]	; (80042fc <USB_HC_StartXfer+0x284>)
 8004226:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004228:	4b34      	ldr	r3, [pc, #208]	; (80042fc <USB_HC_StartXfer+0x284>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004230:	4a32      	ldr	r2, [pc, #200]	; (80042fc <USB_HC_StartXfer+0x284>)
 8004232:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004240:	461a      	mov	r2, r3
 8004242:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <USB_HC_StartXfer+0x284>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d14e      	bne.n	80042ec <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	78db      	ldrb	r3, [r3, #3]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d14a      	bne.n	80042ec <USB_HC_StartXfer+0x274>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d046      	beq.n	80042ec <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	79db      	ldrb	r3, [r3, #7]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d830      	bhi.n	80042c8 <USB_HC_StartXfer+0x250>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <USB_HC_StartXfer+0x1f4>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	0800427d 	.word	0x0800427d
 8004270:	080042a1 	.word	0x080042a1
 8004274:	0800427d 	.word	0x0800427d
 8004278:	080042a1 	.word	0x080042a1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	3303      	adds	r3, #3
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004286:	8afa      	ldrh	r2, [r7, #22]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	b29b      	uxth	r3, r3
 800428e:	429a      	cmp	r2, r3
 8004290:	d91c      	bls.n	80042cc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f043 0220 	orr.w	r2, r3, #32
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	619a      	str	r2, [r3, #24]
          }
          break;
 800429e:	e015      	b.n	80042cc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	3303      	adds	r3, #3
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80042aa:	8afa      	ldrh	r2, [r7, #22]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d90a      	bls.n	80042d0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	619a      	str	r2, [r3, #24]
          }
          break;
 80042c6:	e003      	b.n	80042d0 <USB_HC_StartXfer+0x258>

        default:
          break;
 80042c8:	bf00      	nop
 80042ca:	e002      	b.n	80042d2 <USB_HC_StartXfer+0x25a>
          break;
 80042cc:	bf00      	nop
 80042ce:	e000      	b.n	80042d2 <USB_HC_StartXfer+0x25a>
          break;
 80042d0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	68d9      	ldr	r1, [r3, #12]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	785a      	ldrb	r2, [r3, #1]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	b298      	uxth	r0, r3
 80042e0:	2300      	movs	r3, #0
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	4603      	mov	r3, r0
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fb86 	bl	80039f8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3728      	adds	r7, #40	; 0x28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	1ff80000 	.word	0x1ff80000
 80042fc:	200000b0 	.word	0x200000b0

08004300 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	b29b      	uxth	r3, r3
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004322:	b480      	push	{r7}
 8004324:	b087      	sub	sp, #28
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4413      	add	r3, r2
 8004342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0c9b      	lsrs	r3, r3, #18
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <USB_HC_Halt+0x3a>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d16c      	bne.n	8004436 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	0151      	lsls	r1, r2, #5
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	440a      	add	r2, r1
 8004372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800437a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d143      	bne.n	8004410 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	0151      	lsls	r1, r2, #5
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	440a      	add	r2, r1
 800439e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3301      	adds	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043f4:	d81d      	bhi.n	8004432 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800440c:	d0ec      	beq.n	80043e8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800440e:	e080      	b.n	8004512 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	440a      	add	r2, r1
 8004426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800442a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800442e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004430:	e06f      	b.n	8004512 <USB_HC_Halt+0x1f0>
          break;
 8004432:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004434:	e06d      	b.n	8004512 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	440a      	add	r2, r1
 800444c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004454:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d143      	bne.n	80044ee <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4413      	add	r3, r2
 800446e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	0151      	lsls	r1, r2, #5
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	440a      	add	r2, r1
 800447c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004484:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4413      	add	r3, r2
 800448e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	0151      	lsls	r1, r2, #5
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	440a      	add	r2, r1
 800449c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044c4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	3301      	adds	r3, #1
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044d2:	d81d      	bhi.n	8004510 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ea:	d0ec      	beq.n	80044c6 <USB_HC_Halt+0x1a4>
 80044ec:	e011      	b.n	8004512 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	0151      	lsls	r1, r2, #5
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	440a      	add	r2, r1
 8004504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004508:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e000      	b.n	8004512 <USB_HC_Halt+0x1f0>
          break;
 8004510:	bf00      	nop
    }
  }

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004534:	2301      	movs	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	04da      	lsls	r2, r3, #19
 800453c:	4b15      	ldr	r3, [pc, #84]	; (8004594 <USB_DoPing+0x74>)
 800453e:	4013      	ands	r3, r2
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	440a      	add	r2, r1
 8004548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800454c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004550:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	4413      	add	r3, r2
 800455a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004568:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004570:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	461a      	mov	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	1ff80000 	.word	0x1ff80000

08004598 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff f9a1 	bl	80038f0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80045ae:	2110      	movs	r1, #16
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff f9d9 	bl	8003968 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff f9fc 	bl	80039b4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e01f      	b.n	8004602 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f6:	461a      	mov	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	3301      	adds	r3, #1
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b0f      	cmp	r3, #15
 8004606:	d9dc      	bls.n	80045c2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004608:	2300      	movs	r3, #0
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	e034      	b.n	8004678 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004624:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800462c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004634:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004642:	461a      	mov	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3301      	adds	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004654:	d80c      	bhi.n	8004670 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800466c:	d0ec      	beq.n	8004648 <USB_StopHost+0xb0>
 800466e:	e000      	b.n	8004672 <USB_StopHost+0xda>
        break;
 8004670:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3301      	adds	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b0f      	cmp	r3, #15
 800467c:	d9c7      	bls.n	800460e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004684:	461a      	mov	r2, r3
 8004686:	f04f 33ff 	mov.w	r3, #4294967295
 800468a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f04f 32ff 	mov.w	r2, #4294967295
 8004692:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff f91a 	bl	80038ce <USB_EnableGlobalInt>

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b089      	sub	sp, #36	; 0x24
 80046a8:	af04      	add	r7, sp, #16
 80046aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80046ac:	2302      	movs	r3, #2
 80046ae:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80046b0:	2301      	movs	r3, #1
 80046b2:	2202      	movs	r2, #2
 80046b4:	2102      	movs	r1, #2
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fc3a 	bl	8004f30 <USBH_FindInterface>
 80046bc:	4603      	mov	r3, r0
 80046be:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80046c0:	7bbb      	ldrb	r3, [r7, #14]
 80046c2:	2bff      	cmp	r3, #255	; 0xff
 80046c4:	f000 812a 	beq.w	800491c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80046c8:	7bbb      	ldrb	r3, [r7, #14]
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fc13 	bl	8004ef8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80046d8:	2050      	movs	r0, #80	; 0x50
 80046da:	f002 f8bb 	bl	8006854 <malloc>
 80046de:	4603      	mov	r3, r0
 80046e0:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	211a      	movs	r1, #26
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	b25b      	sxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	da15      	bge.n	8004730 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	211a      	movs	r1, #26
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	4413      	add	r3, r2
 8004710:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800471a:	7bbb      	ldrb	r3, [r7, #14]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	211a      	movs	r1, #26
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	4413      	add	r3, r2
 8004726:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800472a:	881a      	ldrh	r2, [r3, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	785b      	ldrb	r3, [r3, #1]
 8004734:	4619      	mov	r1, r3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f001 fd21 	bl	800617e <USBH_AllocPipe>
 800473c:	4603      	mov	r3, r0
 800473e:	461a      	mov	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	7819      	ldrb	r1, [r3, #0]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	7858      	ldrb	r0, [r3, #1]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	8952      	ldrh	r2, [r2, #10]
 800475c:	9202      	str	r2, [sp, #8]
 800475e:	2203      	movs	r2, #3
 8004760:	9201      	str	r2, [sp, #4]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	4623      	mov	r3, r4
 8004766:	4602      	mov	r2, r0
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f001 fcd9 	bl	8006120 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2200      	movs	r2, #0
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f001 ffd7 	bl	800672a <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800477c:	2300      	movs	r3, #0
 800477e:	2200      	movs	r2, #0
 8004780:	210a      	movs	r1, #10
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fbd4 	bl	8004f30 <USBH_FindInterface>
 8004788:	4603      	mov	r3, r0
 800478a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800478c:	7bbb      	ldrb	r3, [r7, #14]
 800478e:	2bff      	cmp	r3, #255	; 0xff
 8004790:	f000 80c4 	beq.w	800491c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004794:	7bbb      	ldrb	r3, [r7, #14]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	211a      	movs	r1, #26
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	4413      	add	r3, r2
 80047a0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da16      	bge.n	80047da <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80047ac:	7bbb      	ldrb	r3, [r7, #14]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	211a      	movs	r1, #26
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	4413      	add	r3, r2
 80047b8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80047bc:	781a      	ldrb	r2, [r3, #0]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80047c2:	7bbb      	ldrb	r3, [r7, #14]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	211a      	movs	r1, #26
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80047d2:	881a      	ldrh	r2, [r3, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	835a      	strh	r2, [r3, #26]
 80047d8:	e015      	b.n	8004806 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80047da:	7bbb      	ldrb	r3, [r7, #14]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	211a      	movs	r1, #26
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80047f0:	7bbb      	ldrb	r3, [r7, #14]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	211a      	movs	r1, #26
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004800:	881a      	ldrh	r2, [r3, #0]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004806:	7bbb      	ldrb	r3, [r7, #14]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	211a      	movs	r1, #26
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	4413      	add	r3, r2
 8004812:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b25b      	sxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	da16      	bge.n	800484c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800481e:	7bbb      	ldrb	r3, [r7, #14]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	211a      	movs	r1, #26
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004834:	7bbb      	ldrb	r3, [r7, #14]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	211a      	movs	r1, #26
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004844:	881a      	ldrh	r2, [r3, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	835a      	strh	r2, [r3, #26]
 800484a:	e015      	b.n	8004878 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800484c:	7bbb      	ldrb	r3, [r7, #14]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	211a      	movs	r1, #26
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	f203 3352 	addw	r3, r3, #850	; 0x352
 800485c:	781a      	ldrb	r2, [r3, #0]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004862:	7bbb      	ldrb	r3, [r7, #14]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	211a      	movs	r1, #26
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	4413      	add	r3, r2
 800486e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004872:	881a      	ldrh	r2, [r3, #0]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	7b9b      	ldrb	r3, [r3, #14]
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 fc7d 	bl	800617e <USBH_AllocPipe>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	7bdb      	ldrb	r3, [r3, #15]
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f001 fc73 	bl	800617e <USBH_AllocPipe>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	7b59      	ldrb	r1, [r3, #13]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	7b98      	ldrb	r0, [r3, #14]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	8b12      	ldrh	r2, [r2, #24]
 80048b8:	9202      	str	r2, [sp, #8]
 80048ba:	2202      	movs	r2, #2
 80048bc:	9201      	str	r2, [sp, #4]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4623      	mov	r3, r4
 80048c2:	4602      	mov	r2, r0
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 fc2b 	bl	8006120 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	7b19      	ldrb	r1, [r3, #12]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	7bd8      	ldrb	r0, [r3, #15]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	8b52      	ldrh	r2, [r2, #26]
 80048e2:	9202      	str	r2, [sp, #8]
 80048e4:	2202      	movs	r2, #2
 80048e6:	9201      	str	r2, [sp, #4]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	4623      	mov	r3, r4
 80048ec:	4602      	mov	r2, r0
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f001 fc16 	bl	8006120 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	7b5b      	ldrb	r3, [r3, #13]
 8004900:	2200      	movs	r2, #0
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f001 ff10 	bl	800672a <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	7b1b      	ldrb	r3, [r3, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f001 ff09 	bl	800672a <USBH_LL_SetToggle>
      status = USBH_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bd90      	pop	{r4, r7, pc}

08004926 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00e      	beq.n	800495e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	4619      	mov	r1, r3
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f001 fc09 	bl	800615e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f001 fc31 	bl	80061ba <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	7b1b      	ldrb	r3, [r3, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00e      	beq.n	8004984 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	7b1b      	ldrb	r3, [r3, #12]
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 fbf6 	bl	800615e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	7b1b      	ldrb	r3, [r3, #12]
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 fc1e 	bl	80061ba <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	7b5b      	ldrb	r3, [r3, #13]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00e      	beq.n	80049aa <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	7b5b      	ldrb	r3, [r3, #13]
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f001 fbe3 	bl	800615e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	7b5b      	ldrb	r3, [r3, #13]
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f001 fc0b 	bl	80061ba <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 ff50 	bl	8006864 <free>
    phost->pActiveClass->pData = 0U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80049ca:	2200      	movs	r2, #0
 80049cc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80049e0:	2302      	movs	r3, #2
 80049e2:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	3340      	adds	r3, #64	; 0x40
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f8b2 	bl	8004b5e <GetLineCoding>
 80049fa:	4603      	mov	r3, r0
 80049fc:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4798      	blx	r3
  }
  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d877      	bhi.n	8004b30 <USBH_CDC_Process+0x114>
 8004a40:	a201      	add	r2, pc, #4	; (adr r2, 8004a48 <USBH_CDC_Process+0x2c>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004a5d 	.word	0x08004a5d
 8004a4c:	08004a63 	.word	0x08004a63
 8004a50:	08004a93 	.word	0x08004a93
 8004a54:	08004b07 	.word	0x08004b07
 8004a58:	08004b15 	.word	0x08004b15
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8004a60:	e06d      	b.n	8004b3e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a66:	4619      	mov	r1, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f897 	bl	8004b9c <SetLineCoding>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8004a72:	7bbb      	ldrb	r3, [r7, #14]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8004a80:	e058      	b.n	8004b34 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8004a82:	7bbb      	ldrb	r3, [r7, #14]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d055      	beq.n	8004b34 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8004a90:	e050      	b.n	8004b34 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3340      	adds	r3, #64	; 0x40
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f860 	bl	8004b5e <GetLineCoding>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8004aa2:	7bbb      	ldrb	r3, [r7, #14]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d126      	bne.n	8004af6 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aba:	791b      	ldrb	r3, [r3, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d13b      	bne.n	8004b38 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aca:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d133      	bne.n	8004b38 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ada:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d12b      	bne.n	8004b38 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae8:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d124      	bne.n	8004b38 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f95a 	bl	8004da8 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8004af4:	e020      	b.n	8004b38 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8004af6:	7bbb      	ldrb	r3, [r7, #14]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d01d      	beq.n	8004b38 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2204      	movs	r2, #4
 8004b00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8004b04:	e018      	b.n	8004b38 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f867 	bl	8004bda <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8dc 	bl	8004cca <CDC_ProcessReception>
    break;
 8004b12:	e014      	b.n	8004b3e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8004b14:	2100      	movs	r1, #0
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fece 	bl	80058b8 <USBH_ClrFeature>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8004b20:	7bbb      	ldrb	r3, [r7, #14]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8004b2e:	e005      	b.n	8004b3c <USBH_CDC_Process+0x120>

  default:
    break;
 8004b30:	bf00      	nop
 8004b32:	e004      	b.n	8004b3e <USBH_CDC_Process+0x122>
    break;
 8004b34:	bf00      	nop
 8004b36:	e002      	b.n	8004b3e <USBH_CDC_Process+0x122>
    break;
 8004b38:	bf00      	nop
 8004b3a:	e000      	b.n	8004b3e <USBH_CDC_Process+0x122>
    break;
 8004b3c:	bf00      	nop

  }

  return status;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	22a1      	movs	r2, #161	; 0xa1
 8004b6c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2221      	movs	r2, #33	; 0x21
 8004b72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2207      	movs	r2, #7
 8004b84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2207      	movs	r2, #7
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f001 f873 	bl	8005c78 <USBH_CtlReq>
 8004b92:	4603      	mov	r3, r0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2221      	movs	r2, #33	; 0x21
 8004baa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2207      	movs	r2, #7
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f001 f854 	bl	8005c78 <USBH_CtlReq>
 8004bd0:	4603      	mov	r3, r0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af02      	add	r7, sp, #8
 8004be0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d002      	beq.n	8004c00 <CDC_ProcessTransmission+0x26>
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d025      	beq.n	8004c4a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8004bfe:	e060      	b.n	8004cc2 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	8b12      	ldrh	r2, [r2, #24]
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d90c      	bls.n	8004c26 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8b1a      	ldrh	r2, [r3, #24]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	7b58      	ldrb	r0, [r3, #13]
 8004c18:	2301      	movs	r3, #1
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f001 fa3b 	bl	800609a <USBH_BulkSendData>
 8004c24:	e00c      	b.n	8004c40 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	7b58      	ldrb	r0, [r3, #13]
 8004c34:	2301      	movs	r3, #1
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	4603      	mov	r3, r0
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f001 fa2d 	bl	800609a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8004c48:	e03b      	b.n	8004cc2 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	7b5b      	ldrb	r3, [r3, #13]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f001 fd49 	bl	80066e8 <USBH_LL_GetURBState>
 8004c56:	4603      	mov	r3, r0
 8004c58:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8004c5a:	7afb      	ldrb	r3, [r7, #11]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d128      	bne.n	8004cb2 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	8b12      	ldrh	r2, [r2, #24]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d90e      	bls.n	8004c8a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	8b12      	ldrh	r2, [r2, #24]
 8004c74:	1a9a      	subs	r2, r3, r2
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	8b12      	ldrh	r2, [r2, #24]
 8004c82:	441a      	add	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	61da      	str	r2, [r3, #28]
 8004c88:	e002      	b.n	8004c90 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8004ca0:	e00e      	b.n	8004cc0 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f868 	bl	8004d80 <USBH_CDC_TransmitCallback>
    break;
 8004cb0:	e006      	b.n	8004cc0 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8004cb2:	7afb      	ldrb	r3, [r7, #11]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d103      	bne.n	8004cc0 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8004cc0:	bf00      	nop
  }
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d002      	beq.n	8004cf0 <CDC_ProcessReception+0x26>
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d00e      	beq.n	8004d0c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8004cee:	e043      	b.n	8004d78 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	6a19      	ldr	r1, [r3, #32]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	8b5a      	ldrh	r2, [r3, #26]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	7b1b      	ldrb	r3, [r3, #12]
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 f9f1 	bl	80060e4 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2204      	movs	r2, #4
 8004d06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8004d0a:	e035      	b.n	8004d78 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	7b1b      	ldrb	r3, [r3, #12]
 8004d10:	4619      	mov	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f001 fce8 	bl	80066e8 <USBH_LL_GetURBState>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8004d1c:	7cfb      	ldrb	r3, [r7, #19]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d129      	bne.n	8004d76 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	7b1b      	ldrb	r3, [r3, #12]
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f001 fc4b 	bl	80065c4 <USBH_LL_GetLastXferSize>
 8004d2e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d016      	beq.n	8004d68 <CDC_ProcessReception+0x9e>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	8b5b      	ldrh	r3, [r3, #26]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d910      	bls.n	8004d68 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1ad2      	subs	r2, r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	6a1a      	ldr	r2, [r3, #32]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	441a      	add	r2, r3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2203      	movs	r2, #3
 8004d62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8004d66:	e006      	b.n	8004d76 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f80f 	bl	8004d94 <USBH_CDC_ReceiveCallback>
    break;
 8004d76:	bf00      	nop
  }
}
 8004d78:	bf00      	nop
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]

}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e019      	b.n	8004e08 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	79fa      	ldrb	r2, [r7, #7]
 8004dd8:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f80f 	bl	8004e10 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f001 fb2d 	bl	8006460 <USBH_LL_Init>

  return USBH_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8004e1c:	e008      	b.n	8004e30 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	32e0      	adds	r2, #224	; 0xe0
 8004e24:	2100      	movs	r1, #0
 8004e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b0e      	cmp	r3, #14
 8004e34:	d9f3      	bls.n	8004e1e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e009      	b.n	8004e50 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e56:	d3f1      	bcc.n	8004e3c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2240      	movs	r2, #64	; 0x40
 8004e7c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d017      	beq.n	8004ee6 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10f      	bne.n	8004ee0 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ec6:	1c59      	adds	r1, r3, #1
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	33dc      	adds	r3, #220	; 0xdc
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]
 8004ede:	e004      	b.n	8004eea <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	73fb      	strb	r3, [r7, #15]
 8004ee4:	e001      	b.n	8004eea <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d204      	bcs.n	8004f1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8004f1c:	e001      	b.n	8004f22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	4608      	mov	r0, r1
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	70fb      	strb	r3, [r7, #3]
 8004f42:	460b      	mov	r3, r1
 8004f44:	70bb      	strb	r3, [r7, #2]
 8004f46:	4613      	mov	r3, r2
 8004f48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8004f58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004f5a:	e025      	b.n	8004fa8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
 8004f5e:	221a      	movs	r2, #26
 8004f60:	fb02 f303 	mul.w	r3, r2, r3
 8004f64:	3308      	adds	r3, #8
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	3302      	adds	r3, #2
 8004f6c:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	795b      	ldrb	r3, [r3, #5]
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d002      	beq.n	8004f7e <USBH_FindInterface+0x4e>
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	2bff      	cmp	r3, #255	; 0xff
 8004f7c:	d111      	bne.n	8004fa2 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8004f82:	78ba      	ldrb	r2, [r7, #2]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d002      	beq.n	8004f8e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8004f88:	78bb      	ldrb	r3, [r7, #2]
 8004f8a:	2bff      	cmp	r3, #255	; 0xff
 8004f8c:	d109      	bne.n	8004fa2 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8004f92:	787a      	ldrb	r2, [r7, #1]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d002      	beq.n	8004f9e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004f98:	787b      	ldrb	r3, [r7, #1]
 8004f9a:	2bff      	cmp	r3, #255	; 0xff
 8004f9c:	d101      	bne.n	8004fa2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
 8004fa0:	e006      	b.n	8004fb0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004fa8:	7dfb      	ldrb	r3, [r7, #23]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d9d6      	bls.n	8004f5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8004fae:	23ff      	movs	r3, #255	; 0xff
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 fa87 	bl	80064d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8004fca:	2101      	movs	r1, #1
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f001 fb9e 	bl	800670e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af04      	add	r7, sp, #16
 8004fe2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 faec 	bl	80055ca <USBH_IsPortEnabled>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10c      	bne.n	8005012 <USBH_Process+0x36>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d007      	beq.n	8005012 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b03      	cmp	r3, #3
 800500a:	d002      	beq.n	8005012 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2203      	movs	r2, #3
 8005010:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b0b      	cmp	r3, #11
 800501a:	f200 814c 	bhi.w	80052b6 <USBH_Process+0x2da>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <USBH_Process+0x48>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005055 	.word	0x08005055
 8005028:	08005077 	.word	0x08005077
 800502c:	0800508b 	.word	0x0800508b
 8005030:	08005291 	.word	0x08005291
 8005034:	080052b7 	.word	0x080052b7
 8005038:	08005119 	.word	0x08005119
 800503c:	08005247 	.word	0x08005247
 8005040:	08005149 	.word	0x08005149
 8005044:	08005169 	.word	0x08005169
 8005048:	08005189 	.word	0x08005189
 800504c:	080051b7 	.word	0x080051b7
 8005050:	08005279 	.word	0x08005279
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 812c 	beq.w	80052ba <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005068:	20c8      	movs	r0, #200	; 0xc8
 800506a:	f001 fb91 	bl	8006790 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 fa8d 	bl	800658e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005074:	e121      	b.n	80052ba <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800507c:	2b01      	cmp	r3, #1
 800507e:	f040 811e 	bne.w	80052be <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005088:	e119      	b.n	80052be <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800508a:	2064      	movs	r0, #100	; 0x64
 800508c:	f001 fb80 	bl	8006790 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fa57 	bl	8006544 <USBH_LL_GetSpeed>
 8005096:	4603      	mov	r3, r0
 8005098:	461a      	mov	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2205      	movs	r2, #5
 80050a4:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80050a6:	2100      	movs	r1, #0
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f001 f868 	bl	800617e <USBH_AllocPipe>
 80050ae:	4603      	mov	r3, r0
 80050b0:	461a      	mov	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80050b6:	2180      	movs	r1, #128	; 0x80
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 f860 	bl	800617e <USBH_AllocPipe>
 80050be:	4603      	mov	r3, r0
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	7919      	ldrb	r1, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80050da:	b292      	uxth	r2, r2
 80050dc:	9202      	str	r2, [sp, #8]
 80050de:	2200      	movs	r2, #0
 80050e0:	9201      	str	r2, [sp, #4]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	4603      	mov	r3, r0
 80050e6:	2280      	movs	r2, #128	; 0x80
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f001 f819 	bl	8006120 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7959      	ldrb	r1, [r3, #5]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005102:	b292      	uxth	r2, r2
 8005104:	9202      	str	r2, [sp, #8]
 8005106:	2200      	movs	r2, #0
 8005108:	9201      	str	r2, [sp, #4]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	4603      	mov	r3, r0
 800510e:	2200      	movs	r2, #0
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f001 f805 	bl	8006120 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005116:	e0e3      	b.n	80052e0 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f8e7 	bl	80052ec <USBH_HandleEnum>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	f040 80ce 	bne.w	80052c2 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005134:	2b01      	cmp	r3, #1
 8005136:	d103      	bne.n	8005140 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2208      	movs	r2, #8
 800513c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800513e:	e0c0      	b.n	80052c2 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2207      	movs	r2, #7
 8005144:	701a      	strb	r2, [r3, #0]
    break;
 8005146:	e0bc      	b.n	80052c2 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80b9 	beq.w	80052c6 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800515a:	2101      	movs	r1, #1
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2208      	movs	r2, #8
 8005164:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005166:	e0ae      	b.n	80052c6 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800516e:	b29b      	uxth	r3, r3
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fb59 	bl	800582a <USBH_SetCfg>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	f040 80a5 	bne.w	80052ca <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2209      	movs	r2, #9
 8005184:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005186:	e0a0      	b.n	80052ca <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005196:	2101      	movs	r1, #1
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fb69 	bl	8005870 <USBH_SetFeature>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 8094 	bne.w	80052ce <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	220a      	movs	r2, #10
 80051aa:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80051ac:	e08f      	b.n	80052ce <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	220a      	movs	r2, #10
 80051b2:	701a      	strb	r2, [r3, #0]
    break;
 80051b4:	e08b      	b.n	80052ce <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8088 	beq.w	80052d2 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
 80051ce:	e017      	b.n	8005200 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	33dc      	adds	r3, #220	; 0xdc
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	791a      	ldrb	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d108      	bne.n	80051fa <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	33dc      	adds	r3, #220	; 0xdc
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	3301      	adds	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0e4      	beq.n	80051d0 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800520c:	2b00      	cmp	r3, #0
 800520e:	d016      	beq.n	800523e <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	4798      	blx	r3
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d109      	bne.n	8005236 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2206      	movs	r2, #6
 8005226:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800522e:	2103      	movs	r1, #3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005234:	e04d      	b.n	80052d2 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	220d      	movs	r2, #13
 800523a:	701a      	strb	r2, [r3, #0]
    break;
 800523c:	e049      	b.n	80052d2 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	220d      	movs	r2, #13
 8005242:	701a      	strb	r2, [r3, #0]
    break;
 8005244:	e045      	b.n	80052d2 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00f      	beq.n	8005270 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	4798      	blx	r3
 800525c:	4603      	mov	r3, r0
 800525e:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8005260:	7bbb      	ldrb	r3, [r7, #14]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d136      	bne.n	80052d6 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	220b      	movs	r2, #11
 800526c:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800526e:	e032      	b.n	80052d6 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	220d      	movs	r2, #13
 8005274:	701a      	strb	r2, [r3, #0]
    break;
 8005276:	e02e      	b.n	80052d6 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800527e:	2b00      	cmp	r3, #0
 8005280:	d02b      	beq.n	80052da <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
    }
    break;
 800528e:	e024      	b.n	80052da <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff fdbd 	bl	8004e10 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01e      	beq.n	80052de <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80052b4:	e013      	b.n	80052de <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80052b6:	bf00      	nop
 80052b8:	e012      	b.n	80052e0 <USBH_Process+0x304>
    break;
 80052ba:	bf00      	nop
 80052bc:	e010      	b.n	80052e0 <USBH_Process+0x304>
    break;
 80052be:	bf00      	nop
 80052c0:	e00e      	b.n	80052e0 <USBH_Process+0x304>
    break;
 80052c2:	bf00      	nop
 80052c4:	e00c      	b.n	80052e0 <USBH_Process+0x304>
    break;
 80052c6:	bf00      	nop
 80052c8:	e00a      	b.n	80052e0 <USBH_Process+0x304>
    break;
 80052ca:	bf00      	nop
 80052cc:	e008      	b.n	80052e0 <USBH_Process+0x304>
    break;
 80052ce:	bf00      	nop
 80052d0:	e006      	b.n	80052e0 <USBH_Process+0x304>
    break;
 80052d2:	bf00      	nop
 80052d4:	e004      	b.n	80052e0 <USBH_Process+0x304>
    break;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <USBH_Process+0x304>
    break;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <USBH_Process+0x304>
    break;
 80052de:	bf00      	nop
  }
 return USBH_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop

080052ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af04      	add	r7, sp, #16
 80052f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2b07      	cmp	r3, #7
 80052fe:	f200 80f8 	bhi.w	80054f2 <USBH_HandleEnum+0x206>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <USBH_HandleEnum+0x1c>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	08005329 	.word	0x08005329
 800530c:	0800539b 	.word	0x0800539b
 8005310:	080053b3 	.word	0x080053b3
 8005314:	08005429 	.word	0x08005429
 8005318:	0800543f 	.word	0x0800543f
 800531c:	0800545b 	.word	0x0800545b
 8005320:	0800548f 	.word	0x0800548f
 8005324:	080054c3 	.word	0x080054c3
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005328:	2108      	movs	r1, #8
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9ad 	bl	800568a <USBH_Get_DevDesc>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 80df 	bne.w	80054f6 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	7919      	ldrb	r1, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800535c:	b292      	uxth	r2, r2
 800535e:	9202      	str	r2, [sp, #8]
 8005360:	2200      	movs	r2, #0
 8005362:	9201      	str	r2, [sp, #4]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	4603      	mov	r3, r0
 8005368:	2280      	movs	r2, #128	; 0x80
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fed8 	bl	8006120 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7959      	ldrb	r1, [r3, #5]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005384:	b292      	uxth	r2, r2
 8005386:	9202      	str	r2, [sp, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	9201      	str	r2, [sp, #4]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	4603      	mov	r3, r0
 8005390:	2200      	movs	r2, #0
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fec4 	bl	8006120 <USBH_OpenPipe>

    }
    break;
 8005398:	e0ad      	b.n	80054f6 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800539a:	2112      	movs	r1, #18
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f974 	bl	800568a <USBH_Get_DevDesc>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f040 80a8 	bne.w	80054fa <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	705a      	strb	r2, [r3, #1]

    }
    break;
 80053b0:	e0a3      	b.n	80054fa <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80053b2:	2101      	movs	r1, #1
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fa14 	bl	80057e2 <USBH_SetAddress>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f040 809e 	bne.w	80054fe <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80053c2:	2002      	movs	r0, #2
 80053c4:	f001 f9e4 	bl	8006790 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2203      	movs	r2, #3
 80053d4:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	7919      	ldrb	r1, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80053ea:	b292      	uxth	r2, r2
 80053ec:	9202      	str	r2, [sp, #8]
 80053ee:	2200      	movs	r2, #0
 80053f0:	9201      	str	r2, [sp, #4]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	4603      	mov	r3, r0
 80053f6:	2280      	movs	r2, #128	; 0x80
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fe91 	bl	8006120 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	7959      	ldrb	r1, [r3, #5]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8005412:	b292      	uxth	r2, r2
 8005414:	9202      	str	r2, [sp, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	9201      	str	r2, [sp, #4]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	4603      	mov	r3, r0
 800541e:	2200      	movs	r2, #0
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fe7d 	bl	8006120 <USBH_OpenPipe>
    }
    break;
 8005426:	e06a      	b.n	80054fe <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8005428:	2109      	movs	r1, #9
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f955 	bl	80056da <USBH_Get_CfgDesc>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d165      	bne.n	8005502 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2204      	movs	r2, #4
 800543a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800543c:	e061      	b.n	8005502 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f947 	bl	80056da <USBH_Get_CfgDesc>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d159      	bne.n	8005506 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2205      	movs	r2, #5
 8005456:	705a      	strb	r2, [r3, #1]
    }
    break;
 8005458:	e055      	b.n	8005506 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8005470:	23ff      	movs	r3, #255	; 0xff
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f955 	bl	8005722 <USBH_Get_StringDesc>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d145      	bne.n	800550a <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2206      	movs	r2, #6
 8005482:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005484:	e041      	b.n	800550a <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2206      	movs	r2, #6
 800548a:	705a      	strb	r2, [r3, #1]
    break;
 800548c:	e03d      	b.n	800550a <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80054a4:	23ff      	movs	r3, #255	; 0xff
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f93b 	bl	8005722 <USBH_Get_StringDesc>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d12d      	bne.n	800550e <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2207      	movs	r2, #7
 80054b6:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80054b8:	e029      	b.n	800550e <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2207      	movs	r2, #7
 80054be:	705a      	strb	r2, [r3, #1]
    break;
 80054c0:	e025      	b.n	800550e <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00f      	beq.n	80054ec <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80054d8:	23ff      	movs	r3, #255	; 0xff
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f921 	bl	8005722 <USBH_Get_StringDesc>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d115      	bne.n	8005512 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80054ea:	e012      	b.n	8005512 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
    break;
 80054f0:	e00f      	b.n	8005512 <USBH_HandleEnum+0x226>

  default:
    break;
 80054f2:	bf00      	nop
 80054f4:	e00e      	b.n	8005514 <USBH_HandleEnum+0x228>
    break;
 80054f6:	bf00      	nop
 80054f8:	e00c      	b.n	8005514 <USBH_HandleEnum+0x228>
    break;
 80054fa:	bf00      	nop
 80054fc:	e00a      	b.n	8005514 <USBH_HandleEnum+0x228>
    break;
 80054fe:	bf00      	nop
 8005500:	e008      	b.n	8005514 <USBH_HandleEnum+0x228>
    break;
 8005502:	bf00      	nop
 8005504:	e006      	b.n	8005514 <USBH_HandleEnum+0x228>
    break;
 8005506:	bf00      	nop
 8005508:	e004      	b.n	8005514 <USBH_HandleEnum+0x228>
    break;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <USBH_HandleEnum+0x228>
    break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <USBH_HandleEnum+0x228>
    break;
 8005512:	bf00      	nop
  }
  return Status;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop

08005520 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f804 	bl	8005562 <USBH_HandleSof>
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b0b      	cmp	r3, #11
 8005572:	d10a      	bne.n	800558a <USBH_HandleSof+0x28>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	4798      	blx	r3
  }
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80055a2:	bf00      	nop
}
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80055be:	bf00      	nop
}
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00e      	beq.n	8005626 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800560e:	2104      	movs	r1, #4
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
 8005614:	e007      	b.n	8005626 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800561c:	2b01      	cmp	r3, #1
 800561e:	d102      	bne.n	8005626 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 ff68 	bl	800650e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	791b      	ldrb	r3, [r3, #4]
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fdb8 	bl	80061ba <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	795b      	ldrb	r3, [r3, #5]
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fdb2 	bl	80061ba <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800566e:	2105      	movs	r1, #5
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 ff2f 	bl	80064d8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2203      	movs	r2, #3
 800567e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b086      	sub	sp, #24
 800568e:	af02      	add	r7, sp, #8
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	4613      	mov	r3, r2
 80056a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056a8:	2100      	movs	r1, #0
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f864 	bl	8005778 <USBH_GetDescriptor>
 80056b0:	4603      	mov	r3, r0
 80056b2:	73fb      	strb	r3, [r7, #15]
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f203 3022 	addw	r0, r3, #802	; 0x322
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	b292      	uxth	r2, r2
 80056ca:	4619      	mov	r1, r3
 80056cc:	f000 f918 	bl	8005900 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b086      	sub	sp, #24
 80056de:	af02      	add	r7, sp, #8
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	331c      	adds	r3, #28
 80056ea:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f6:	2100      	movs	r1, #0
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f83d 	bl	8005778 <USBH_GetDescriptor>
 80056fe:	4603      	mov	r3, r0
 8005700:	72fb      	strb	r3, [r7, #11]
 8005702:	7afb      	ldrb	r3, [r7, #11]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d107      	bne.n	8005718 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	68f9      	ldr	r1, [r7, #12]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f964 	bl	80059e0 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8005718:	7afb      	ldrb	r3, [r7, #11]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b088      	sub	sp, #32
 8005726:	af02      	add	r7, sp, #8
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	461a      	mov	r2, r3
 800572e:	460b      	mov	r3, r1
 8005730:	72fb      	strb	r3, [r7, #11]
 8005732:	4613      	mov	r3, r2
 8005734:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8005736:	7afb      	ldrb	r3, [r7, #11]
 8005738:	b29b      	uxth	r3, r3
 800573a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800573e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8005746:	893b      	ldrh	r3, [r7, #8]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	460b      	mov	r3, r1
 800574c:	2100      	movs	r1, #0
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f812 	bl	8005778 <USBH_GetDescriptor>
 8005754:	4603      	mov	r3, r0
 8005756:	75fb      	strb	r3, [r7, #23]
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005764:	893a      	ldrh	r2, [r7, #8]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fa37 	bl	8005bdc <USBH_ParseStringDesc>
  }
  return status;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	607b      	str	r3, [r7, #4]
 8005782:	460b      	mov	r3, r1
 8005784:	72fb      	strb	r3, [r7, #11]
 8005786:	4613      	mov	r3, r2
 8005788:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	789b      	ldrb	r3, [r3, #2]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d11c      	bne.n	80057cc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005798:	b2da      	uxtb	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2206      	movs	r2, #6
 80057a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	893a      	ldrh	r2, [r7, #8]
 80057a8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80057aa:	893b      	ldrh	r3, [r7, #8]
 80057ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b4:	d104      	bne.n	80057c0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f240 4209 	movw	r2, #1033	; 0x409
 80057bc:	829a      	strh	r2, [r3, #20]
 80057be:	e002      	b.n	80057c6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8b3a      	ldrh	r2, [r7, #24]
 80057ca:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80057cc:	8b3b      	ldrh	r3, [r7, #24]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 fa50 	bl	8005c78 <USBH_CtlReq>
 80057d8:	4603      	mov	r3, r0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	789b      	ldrb	r3, [r3, #2]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d10f      	bne.n	8005816 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2205      	movs	r2, #5
 8005800:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8005816:	2200      	movs	r2, #0
 8005818:	2100      	movs	r1, #0
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa2c 	bl	8005c78 <USBH_CtlReq>
 8005820:	4603      	mov	r3, r0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	460b      	mov	r3, r1
 8005834:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	789b      	ldrb	r3, [r3, #2]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d10e      	bne.n	800585c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2209      	movs	r2, #9
 8005848:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	887a      	ldrh	r2, [r7, #2]
 800584e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800585c:	2200      	movs	r2, #0
 800585e:	2100      	movs	r1, #0
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fa09 	bl	8005c78 <USBH_CtlReq>
 8005866:	4603      	mov	r3, r0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	789b      	ldrb	r3, [r3, #2]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10f      	bne.n	80058a4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2203      	movs	r2, #3
 800588e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	b29a      	uxth	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80058a4:	2200      	movs	r2, #0
 80058a6:	2100      	movs	r1, #0
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f9e5 	bl	8005c78 <USBH_CtlReq>
 80058ae:	4603      	mov	r3, r0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	789b      	ldrb	r3, [r3, #2]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d10f      	bne.n	80058ec <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80058ec:	2200      	movs	r2, #0
 80058ee:	2100      	movs	r1, #0
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f9c1 	bl	8005c78 <USBH_CtlReq>
 80058f6:	4603      	mov	r3, r0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	781a      	ldrb	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	785a      	ldrb	r2, [r3, #1]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	3302      	adds	r3, #2
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	b29a      	uxth	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	3303      	adds	r3, #3
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	b29b      	uxth	r3, r3
 8005932:	4313      	orrs	r3, r2
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	791a      	ldrb	r2, [r3, #4]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	795a      	ldrb	r2, [r3, #5]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	799a      	ldrb	r2, [r3, #6]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	79da      	ldrb	r2, [r3, #7]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d939      	bls.n	80059d4 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3308      	adds	r3, #8
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b29a      	uxth	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	3309      	adds	r3, #9
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	b29b      	uxth	r3, r3
 8005974:	4313      	orrs	r3, r2
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	330a      	adds	r3, #10
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	b29a      	uxth	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	330b      	adds	r3, #11
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	b29b      	uxth	r3, r3
 8005990:	4313      	orrs	r3, r2
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	330c      	adds	r3, #12
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	330d      	adds	r3, #13
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	4313      	orrs	r3, r2
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	7b9a      	ldrb	r2, [r3, #14]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	7bda      	ldrb	r2, [r3, #15]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	7c1a      	ldrb	r2, [r3, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	7c5a      	ldrb	r2, [r3, #17]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	745a      	strb	r2, [r3, #17]
  }
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	4613      	mov	r3, r2
 80059ec:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	781a      	ldrb	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	785a      	ldrb	r2, [r3, #1]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	3302      	adds	r3, #2
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3303      	adds	r3, #3
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	4313      	orrs	r3, r2
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	791a      	ldrb	r2, [r3, #4]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	795a      	ldrb	r2, [r3, #5]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	799a      	ldrb	r2, [r3, #6]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	79da      	ldrb	r2, [r3, #7]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	7a1a      	ldrb	r2, [r3, #8]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	2b09      	cmp	r3, #9
 8005a5a:	d95f      	bls.n	8005b1c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8005a5c:	2309      	movs	r3, #9
 8005a5e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005a64:	e051      	b.n	8005b0a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005a66:	f107 0316 	add.w	r3, r7, #22
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a6e:	f000 f8e8 	bl	8005c42 <USBH_GetNextDesc>
 8005a72:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	785b      	ldrb	r3, [r3, #1]
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d146      	bne.n	8005b0a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8005a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a80:	221a      	movs	r2, #26
 8005a82:	fb02 f303 	mul.w	r3, r2, r3
 8005a86:	3308      	adds	r3, #8
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8005a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a92:	69f8      	ldr	r0, [r7, #28]
 8005a94:	f000 f846 	bl	8005b24 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005aa2:	e022      	b.n	8005aea <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8005aa4:	f107 0316 	add.w	r3, r7, #22
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aac:	f000 f8c9 	bl	8005c42 <USBH_GetNextDesc>
 8005ab0:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d117      	bne.n	8005aea <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005abe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005ac2:	3201      	adds	r2, #1
 8005ac4:	00d2      	lsls	r2, r2, #3
 8005ac6:	211a      	movs	r1, #26
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	4413      	add	r3, r2
 8005ace:	3308      	adds	r3, #8
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8005ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ada:	69b8      	ldr	r0, [r7, #24]
 8005adc:	f000 f851 	bl	8005b82 <USBH_ParseEPDesc>
            ep_ix++;
 8005ae0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	791b      	ldrb	r3, [r3, #4]
 8005aee:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d204      	bcs.n	8005b00 <USBH_ParseCfgDesc+0x120>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	885a      	ldrh	r2, [r3, #2]
 8005afa:	8afb      	ldrh	r3, [r7, #22]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d8d1      	bhi.n	8005aa4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8005b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b04:	3301      	adds	r3, #1
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d804      	bhi.n	8005b1c <USBH_ParseCfgDesc+0x13c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	885a      	ldrh	r2, [r3, #2]
 8005b16:	8afb      	ldrh	r3, [r7, #22]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d8a4      	bhi.n	8005a66 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	3728      	adds	r7, #40	; 0x28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781a      	ldrb	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	785a      	ldrb	r2, [r3, #1]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	789a      	ldrb	r2, [r3, #2]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	78da      	ldrb	r2, [r3, #3]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	791a      	ldrb	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	795a      	ldrb	r2, [r3, #5]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	799a      	ldrb	r2, [r3, #6]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	79da      	ldrb	r2, [r3, #7]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	7a1a      	ldrb	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	721a      	strb	r2, [r3, #8]
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781a      	ldrb	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	785a      	ldrb	r2, [r3, #1]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	789a      	ldrb	r2, [r3, #2]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	78da      	ldrb	r2, [r3, #3]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	3305      	adds	r3, #5
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	799a      	ldrb	r2, [r3, #6]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	719a      	strb	r2, [r3, #6]
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3301      	adds	r3, #1
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d120      	bne.n	8005c36 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	1e9a      	subs	r2, r3, #2
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	bf28      	it	cs
 8005c00:	4613      	movcs	r3, r2
 8005c02:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3302      	adds	r3, #2
 8005c08:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	82fb      	strh	r3, [r7, #22]
 8005c0e:	e00b      	b.n	8005c28 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8005c10:	8afb      	ldrh	r3, [r7, #22]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8005c22:	8afb      	ldrh	r3, [r7, #22]
 8005c24:	3302      	adds	r3, #2
 8005c26:	82fb      	strh	r3, [r7, #22]
 8005c28:	8afa      	ldrh	r2, [r7, #22]
 8005c2a:	8abb      	ldrh	r3, [r7, #20]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d3ef      	bcc.n	8005c10 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
  }
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	881a      	ldrh	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	4413      	add	r3, r2
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4413      	add	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005c86:	2301      	movs	r3, #1
 8005c88:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	789b      	ldrb	r3, [r3, #2]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d002      	beq.n	8005c98 <USBH_CtlReq+0x20>
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d00f      	beq.n	8005cb6 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8005c96:	e034      	b.n	8005d02 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2202      	movs	r2, #2
 8005cae:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
    break;
 8005cb4:	e025      	b.n	8005d02 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 f828 	bl	8005d0c <USBH_HandleControl>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d108      	bne.n	8005cd8 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	75fb      	strb	r3, [r7, #23]
    break;
 8005cd6:	e013      	b.n	8005d00 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d108      	bne.n	8005cf0 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005cea:	2303      	movs	r3, #3
 8005cec:	75fb      	strb	r3, [r7, #23]
    break;
 8005cee:	e007      	b.n	8005d00 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d104      	bne.n	8005d00 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	75fb      	strb	r3, [r7, #23]
    break;
 8005d00:	bf00      	nop
  }
  return status;
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	7e1b      	ldrb	r3, [r3, #24]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	2b0a      	cmp	r3, #10
 8005d24:	f200 814c 	bhi.w	8005fc0 <USBH_HandleControl+0x2b4>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <USBH_HandleControl+0x24>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d5d 	.word	0x08005d5d
 8005d34:	08005d77 	.word	0x08005d77
 8005d38:	08005de1 	.word	0x08005de1
 8005d3c:	08005e07 	.word	0x08005e07
 8005d40:	08005e3f 	.word	0x08005e3f
 8005d44:	08005e6b 	.word	0x08005e6b
 8005d48:	08005ebd 	.word	0x08005ebd
 8005d4c:	08005edf 	.word	0x08005edf
 8005d50:	08005f1b 	.word	0x08005f1b
 8005d54:	08005f43 	.word	0x08005f43
 8005d58:	08005f81 	.word	0x08005f81
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f103 0110 	add.w	r1, r3, #16
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	795b      	ldrb	r3, [r3, #5]
 8005d66:	461a      	mov	r2, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f939 	bl	8005fe0 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	761a      	strb	r2, [r3, #24]
    break;
 8005d74:	e12f      	b.n	8005fd6 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	795b      	ldrb	r3, [r3, #5]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fcb3 	bl	80066e8 <USBH_LL_GetURBState>
 8005d82:	4603      	mov	r3, r0
 8005d84:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d11e      	bne.n	8005dca <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	7c1b      	ldrb	r3, [r3, #16]
 8005d90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d94:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	8adb      	ldrh	r3, [r3, #22]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8005d9e:	7b7b      	ldrb	r3, [r7, #13]
 8005da0:	2b80      	cmp	r3, #128	; 0x80
 8005da2:	d103      	bne.n	8005dac <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2203      	movs	r2, #3
 8005da8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005daa:	e10b      	b.n	8005fc4 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2205      	movs	r2, #5
 8005db0:	761a      	strb	r2, [r3, #24]
    break;
 8005db2:	e107      	b.n	8005fc4 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8005db4:	7b7b      	ldrb	r3, [r7, #13]
 8005db6:	2b80      	cmp	r3, #128	; 0x80
 8005db8:	d103      	bne.n	8005dc2 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2209      	movs	r2, #9
 8005dbe:	761a      	strb	r2, [r3, #24]
    break;
 8005dc0:	e100      	b.n	8005fc4 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	761a      	strb	r2, [r3, #24]
    break;
 8005dc8:	e0fc      	b.n	8005fc4 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005dca:	7bbb      	ldrb	r3, [r7, #14]
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d003      	beq.n	8005dd8 <USBH_HandleControl+0xcc>
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	f040 80f6 	bne.w	8005fc4 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	220b      	movs	r2, #11
 8005ddc:	761a      	strb	r2, [r3, #24]
    break;
 8005dde:	e0f1      	b.n	8005fc4 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6899      	ldr	r1, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	899a      	ldrh	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	791b      	ldrb	r3, [r3, #4]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f930 	bl	800605e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2204      	movs	r2, #4
 8005e02:	761a      	strb	r2, [r3, #24]
    break;
 8005e04:	e0e7      	b.n	8005fd6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	791b      	ldrb	r3, [r3, #4]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fc6b 	bl	80066e8 <USBH_LL_GetURBState>
 8005e12:	4603      	mov	r3, r0
 8005e14:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8005e16:	7bbb      	ldrb	r3, [r7, #14]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d102      	bne.n	8005e22 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2209      	movs	r2, #9
 8005e20:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8005e22:	7bbb      	ldrb	r3, [r7, #14]
 8005e24:	2b05      	cmp	r3, #5
 8005e26:	d102      	bne.n	8005e2e <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005e2c:	e0cc      	b.n	8005fc8 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	f040 80c9 	bne.w	8005fc8 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	220b      	movs	r2, #11
 8005e3a:	761a      	strb	r2, [r3, #24]
    break;
 8005e3c:	e0c4      	b.n	8005fc8 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6899      	ldr	r1, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	899a      	ldrh	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	7958      	ldrb	r0, [r3, #5]
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	4603      	mov	r3, r0
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8df 	bl	8006014 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2206      	movs	r2, #6
 8005e66:	761a      	strb	r2, [r3, #24]
    break;
 8005e68:	e0b5      	b.n	8005fd6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	795b      	ldrb	r3, [r3, #5]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fc39 	bl	80066e8 <USBH_LL_GetURBState>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d103      	bne.n	8005e88 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2207      	movs	r2, #7
 8005e84:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005e86:	e0a1      	b.n	8005fcc <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	2b05      	cmp	r3, #5
 8005e8c:	d105      	bne.n	8005e9a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	220c      	movs	r2, #12
 8005e92:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005e94:	2303      	movs	r3, #3
 8005e96:	73fb      	strb	r3, [r7, #15]
    break;
 8005e98:	e098      	b.n	8005fcc <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005e9a:	7bbb      	ldrb	r3, [r7, #14]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d103      	bne.n	8005ea8 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2205      	movs	r2, #5
 8005ea4:	761a      	strb	r2, [r3, #24]
    break;
 8005ea6:	e091      	b.n	8005fcc <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	f040 808e 	bne.w	8005fcc <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	220b      	movs	r2, #11
 8005eb4:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8005eba:	e087      	b.n	8005fcc <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	791b      	ldrb	r3, [r3, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f8ca 	bl	800605e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2208      	movs	r2, #8
 8005eda:	761a      	strb	r2, [r3, #24]

    break;
 8005edc:	e07b      	b.n	8005fd6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	791b      	ldrb	r3, [r3, #4]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fbff 	bl	80066e8 <USBH_LL_GetURBState>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d105      	bne.n	8005f00 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	220d      	movs	r2, #13
 8005ef8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005efe:	e067      	b.n	8005fd0 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d103      	bne.n	8005f0e <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	220b      	movs	r2, #11
 8005f0a:	761a      	strb	r2, [r3, #24]
    break;
 8005f0c:	e060      	b.n	8005fd0 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	2b05      	cmp	r3, #5
 8005f12:	d15d      	bne.n	8005fd0 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8005f14:	2303      	movs	r3, #3
 8005f16:	73fb      	strb	r3, [r7, #15]
    break;
 8005f18:	e05a      	b.n	8005fd0 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	795a      	ldrb	r2, [r3, #5]
 8005f1e:	2301      	movs	r3, #1
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	4613      	mov	r3, r2
 8005f24:	2200      	movs	r2, #0
 8005f26:	2100      	movs	r1, #0
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f873 	bl	8006014 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	761a      	strb	r2, [r3, #24]
    break;
 8005f40:	e049      	b.n	8005fd6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	795b      	ldrb	r3, [r3, #5]
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fbcd 	bl	80066e8 <USBH_LL_GetURBState>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8005f52:	7bbb      	ldrb	r3, [r7, #14]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d105      	bne.n	8005f64 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	220d      	movs	r2, #13
 8005f60:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8005f62:	e037      	b.n	8005fd4 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005f64:	7bbb      	ldrb	r3, [r7, #14]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d103      	bne.n	8005f72 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2209      	movs	r2, #9
 8005f6e:	761a      	strb	r2, [r3, #24]
    break;
 8005f70:	e030      	b.n	8005fd4 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8005f72:	7bbb      	ldrb	r3, [r7, #14]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d12d      	bne.n	8005fd4 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	220b      	movs	r2, #11
 8005f7c:	761a      	strb	r2, [r3, #24]
    break;
 8005f7e:	e029      	b.n	8005fd4 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	7e5b      	ldrb	r3, [r3, #25]
 8005f84:	3301      	adds	r3, #1
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	765a      	strb	r2, [r3, #25]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	7e5b      	ldrb	r3, [r3, #25]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d809      	bhi.n	8005fa8 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 faba 	bl	800650e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8005fa6:	e016      	b.n	8005fd6 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fae:	2106      	movs	r1, #6
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8005fbe:	e00a      	b.n	8005fd6 <USBH_HandleControl+0x2ca>

  default:
    break;
 8005fc0:	bf00      	nop
 8005fc2:	e008      	b.n	8005fd6 <USBH_HandleControl+0x2ca>
    break;
 8005fc4:	bf00      	nop
 8005fc6:	e006      	b.n	8005fd6 <USBH_HandleControl+0x2ca>
    break;
 8005fc8:	bf00      	nop
 8005fca:	e004      	b.n	8005fd6 <USBH_HandleControl+0x2ca>
    break;
 8005fcc:	bf00      	nop
 8005fce:	e002      	b.n	8005fd6 <USBH_HandleControl+0x2ca>
    break;
 8005fd0:	bf00      	nop
 8005fd2:	e000      	b.n	8005fd6 <USBH_HandleControl+0x2ca>
    break;
 8005fd4:	bf00      	nop
  }
  return status;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af04      	add	r7, sp, #16
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005fee:	79f9      	ldrb	r1, [r7, #7]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	9303      	str	r3, [sp, #12]
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	9302      	str	r3, [sp, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2300      	movs	r3, #0
 8006002:	2200      	movs	r2, #0
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fb3e 	bl	8006686 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af04      	add	r7, sp, #16
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4611      	mov	r1, r2
 8006020:	461a      	mov	r2, r3
 8006022:	460b      	mov	r3, r1
 8006024:	80fb      	strh	r3, [r7, #6]
 8006026:	4613      	mov	r3, r2
 8006028:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006038:	7979      	ldrb	r1, [r7, #5]
 800603a:	7e3b      	ldrb	r3, [r7, #24]
 800603c:	9303      	str	r3, [sp, #12]
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	9302      	str	r3, [sp, #8]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	2301      	movs	r3, #1
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	2300      	movs	r3, #0
 800604c:	2200      	movs	r2, #0
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fb19 	bl	8006686 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b088      	sub	sp, #32
 8006062:	af04      	add	r7, sp, #16
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	4611      	mov	r1, r2
 800606a:	461a      	mov	r2, r3
 800606c:	460b      	mov	r3, r1
 800606e:	80fb      	strh	r3, [r7, #6]
 8006070:	4613      	mov	r3, r2
 8006072:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006074:	7979      	ldrb	r1, [r7, #5]
 8006076:	2300      	movs	r3, #0
 8006078:	9303      	str	r3, [sp, #12]
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	9302      	str	r3, [sp, #8]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	9301      	str	r3, [sp, #4]
 8006082:	2301      	movs	r3, #1
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	2300      	movs	r3, #0
 8006088:	2201      	movs	r2, #1
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fafb 	bl	8006686 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006090:	2300      	movs	r3, #0

}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b088      	sub	sp, #32
 800609e:	af04      	add	r7, sp, #16
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	4611      	mov	r1, r2
 80060a6:	461a      	mov	r2, r3
 80060a8:	460b      	mov	r3, r1
 80060aa:	80fb      	strh	r3, [r7, #6]
 80060ac:	4613      	mov	r3, r2
 80060ae:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80060be:	7979      	ldrb	r1, [r7, #5]
 80060c0:	7e3b      	ldrb	r3, [r7, #24]
 80060c2:	9303      	str	r3, [sp, #12]
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	9302      	str	r3, [sp, #8]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	9301      	str	r3, [sp, #4]
 80060cc:	2301      	movs	r3, #1
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	2302      	movs	r3, #2
 80060d2:	2200      	movs	r2, #0
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 fad6 	bl	8006686 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af04      	add	r7, sp, #16
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	4611      	mov	r1, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	460b      	mov	r3, r1
 80060f4:	80fb      	strh	r3, [r7, #6]
 80060f6:	4613      	mov	r3, r2
 80060f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80060fa:	7979      	ldrb	r1, [r7, #5]
 80060fc:	2300      	movs	r3, #0
 80060fe:	9303      	str	r3, [sp, #12]
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	9302      	str	r3, [sp, #8]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	2301      	movs	r3, #1
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2302      	movs	r3, #2
 800610e:	2201      	movs	r2, #1
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fab8 	bl	8006686 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af04      	add	r7, sp, #16
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	4608      	mov	r0, r1
 800612a:	4611      	mov	r1, r2
 800612c:	461a      	mov	r2, r3
 800612e:	4603      	mov	r3, r0
 8006130:	70fb      	strb	r3, [r7, #3]
 8006132:	460b      	mov	r3, r1
 8006134:	70bb      	strb	r3, [r7, #2]
 8006136:	4613      	mov	r3, r2
 8006138:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800613a:	7878      	ldrb	r0, [r7, #1]
 800613c:	78ba      	ldrb	r2, [r7, #2]
 800613e:	78f9      	ldrb	r1, [r7, #3]
 8006140:	8b3b      	ldrh	r3, [r7, #24]
 8006142:	9302      	str	r3, [sp, #8]
 8006144:	7d3b      	ldrb	r3, [r7, #20]
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	7c3b      	ldrb	r3, [r7, #16]
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	4603      	mov	r3, r0
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fa4b 	bl	80065ea <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006154:	2300      	movs	r3, #0

}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa6a 	bl	8006648 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006174:	2300      	movs	r3, #0

}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f831 	bl	80061f2 <USBH_GetFreePipe>
 8006190:	4603      	mov	r3, r0
 8006192:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006194:	89fb      	ldrh	r3, [r7, #14]
 8006196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800619a:	4293      	cmp	r3, r2
 800619c:	d007      	beq.n	80061ae <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	89fa      	ldrh	r2, [r7, #14]
 80061a2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	32e0      	adds	r2, #224	; 0xe0
 80061aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	b2db      	uxtb	r3, r3
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	2b0a      	cmp	r3, #10
 80061ca:	d80b      	bhi.n	80061e4 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80061cc:	78fa      	ldrb	r2, [r7, #3]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	32e0      	adds	r2, #224	; 0xe0
 80061d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	32e0      	adds	r2, #224	; 0xe0
 80061e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
 8006202:	e00e      	b.n	8006222 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006204:	7bfa      	ldrb	r2, [r7, #15]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	32e0      	adds	r2, #224	; 0xe0
 800620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	b29b      	uxth	r3, r3
 800621a:	e007      	b.n	800622c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	3301      	adds	r3, #1
 8006220:	73fb      	strb	r3, [r7, #15]
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	2b0a      	cmp	r3, #10
 8006226:	d9ed      	bls.n	8006204 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006228:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800623c:	2201      	movs	r2, #1
 800623e:	490e      	ldr	r1, [pc, #56]	; (8006278 <MX_USB_HOST_Init+0x40>)
 8006240:	480e      	ldr	r0, [pc, #56]	; (800627c <MX_USB_HOST_Init+0x44>)
 8006242:	f7fe fdbb 	bl	8004dbc <USBH_Init>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800624c:	f7fa fb9a 	bl	8000984 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006250:	490b      	ldr	r1, [pc, #44]	; (8006280 <MX_USB_HOST_Init+0x48>)
 8006252:	480a      	ldr	r0, [pc, #40]	; (800627c <MX_USB_HOST_Init+0x44>)
 8006254:	f7fe fe25 	bl	8004ea2 <USBH_RegisterClass>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800625e:	f7fa fb91 	bl	8000984 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006262:	4806      	ldr	r0, [pc, #24]	; (800627c <MX_USB_HOST_Init+0x44>)
 8006264:	f7fe feaa 	bl	8004fbc <USBH_Start>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800626e:	f7fa fb89 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	08006299 	.word	0x08006299
 800627c:	200001c8 	.word	0x200001c8
 8006280:	2000000c 	.word	0x2000000c

08006284 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006288:	4802      	ldr	r0, [pc, #8]	; (8006294 <MX_USB_HOST_Process+0x10>)
 800628a:	f7fe fea7 	bl	8004fdc <USBH_Process>
}
 800628e:	bf00      	nop
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	200001c8 	.word	0x200001c8

08006298 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d819      	bhi.n	80062e0 <USBH_UserProcess+0x48>
 80062ac:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <USBH_UserProcess+0x1c>)
 80062ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b2:	bf00      	nop
 80062b4:	080062e1 	.word	0x080062e1
 80062b8:	080062d1 	.word	0x080062d1
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062d9 	.word	0x080062d9
 80062c4:	080062c9 	.word	0x080062c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80062c8:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <USBH_UserProcess+0x58>)
 80062ca:	2203      	movs	r2, #3
 80062cc:	701a      	strb	r2, [r3, #0]
  break;
 80062ce:	e008      	b.n	80062e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <USBH_UserProcess+0x58>)
 80062d2:	2202      	movs	r2, #2
 80062d4:	701a      	strb	r2, [r3, #0]
  break;
 80062d6:	e004      	b.n	80062e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80062d8:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <USBH_UserProcess+0x58>)
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
  break;
 80062de:	e000      	b.n	80062e2 <USBH_UserProcess+0x4a>

  default:
  break;
 80062e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	200000b4 	.word	0x200000b4

080062f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	; 0x28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062fc:	f107 0314 	add.w	r3, r7, #20
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006314:	d147      	bne.n	80063a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <HAL_HCD_MspInit+0xbc>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	4a24      	ldr	r2, [pc, #144]	; (80063b0 <HAL_HCD_MspInit+0xbc>)
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	6313      	str	r3, [r2, #48]	; 0x30
 8006326:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <HAL_HCD_MspInit+0xbc>)
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006338:	2300      	movs	r3, #0
 800633a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800633c:	2300      	movs	r3, #0
 800633e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	4619      	mov	r1, r3
 8006346:	481b      	ldr	r0, [pc, #108]	; (80063b4 <HAL_HCD_MspInit+0xc0>)
 8006348:	f7fa fe5c 	bl	8001004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800634c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006352:	2302      	movs	r3, #2
 8006354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800635a:	2300      	movs	r3, #0
 800635c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800635e:	230a      	movs	r3, #10
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006362:	f107 0314 	add.w	r3, r7, #20
 8006366:	4619      	mov	r1, r3
 8006368:	4812      	ldr	r0, [pc, #72]	; (80063b4 <HAL_HCD_MspInit+0xc0>)
 800636a:	f7fa fe4b 	bl	8001004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800636e:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <HAL_HCD_MspInit+0xbc>)
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	4a0f      	ldr	r2, [pc, #60]	; (80063b0 <HAL_HCD_MspInit+0xbc>)
 8006374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006378:	6353      	str	r3, [r2, #52]	; 0x34
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <HAL_HCD_MspInit+0xbc>)
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	4a0b      	ldr	r2, [pc, #44]	; (80063b0 <HAL_HCD_MspInit+0xbc>)
 8006384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006388:	6453      	str	r3, [r2, #68]	; 0x44
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <HAL_HCD_MspInit+0xbc>)
 800638c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006396:	2200      	movs	r2, #0
 8006398:	2100      	movs	r1, #0
 800639a:	2043      	movs	r0, #67	; 0x43
 800639c:	f7fa fdfb 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80063a0:	2043      	movs	r0, #67	; 0x43
 80063a2:	f7fa fe14 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80063a6:	bf00      	nop
 80063a8:	3728      	adds	r7, #40	; 0x28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40023800 	.word	0x40023800
 80063b4:	40020000 	.word	0x40020000

080063b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff f8b9 	bl	800553e <USBH_LL_IncTimer>
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff f8fe 	bl	80055e4 <USBH_LL_Connect>
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff f916 	bl	8005630 <USBH_LL_Disconnect>
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
 8006418:	4613      	mov	r3, r2
 800641a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff f8ab 	bl	8005592 <USBH_LL_PortEnabled>
} 
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff f8ab 	bl	80055ae <USBH_LL_PortDisabled>
} 
 8006458:	bf00      	nop
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800646e:	2b01      	cmp	r3, #1
 8006470:	d12a      	bne.n	80064c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006472:	4a18      	ldr	r2, [pc, #96]	; (80064d4 <USBH_LL_Init+0x74>)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <USBH_LL_Init+0x74>)
 800647e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006482:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <USBH_LL_Init+0x74>)
 8006484:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006488:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800648a:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <USBH_LL_Init+0x74>)
 800648c:	2208      	movs	r2, #8
 800648e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006490:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <USBH_LL_Init+0x74>)
 8006492:	2201      	movs	r2, #1
 8006494:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006496:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <USBH_LL_Init+0x74>)
 8006498:	2200      	movs	r2, #0
 800649a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800649c:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <USBH_LL_Init+0x74>)
 800649e:	2202      	movs	r2, #2
 80064a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80064a2:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <USBH_LL_Init+0x74>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80064a8:	480a      	ldr	r0, [pc, #40]	; (80064d4 <USBH_LL_Init+0x74>)
 80064aa:	f7fa ff5e 	bl	800136a <HAL_HCD_Init>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80064b4:	f7fa fa66 	bl	8000984 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80064b8:	4806      	ldr	r0, [pc, #24]	; (80064d4 <USBH_LL_Init+0x74>)
 80064ba:	f7fb fb59 	bl	8001b70 <HAL_HCD_GetCurrentFrame>
 80064be:	4603      	mov	r3, r0
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff f82c 	bl	8005520 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000594 	.word	0x20000594

080064d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fb fac6 	bl	8001a80 <HAL_HCD_Start>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 f954 	bl	80067a8 <USBH_Get_USB_Status>
 8006500:	4603      	mov	r3, r0
 8006502:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006504:	7bbb      	ldrb	r3, [r7, #14]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006524:	4618      	mov	r0, r3
 8006526:	f7fb face 	bl	8001ac6 <HAL_HCD_Stop>
 800652a:	4603      	mov	r3, r0
 800652c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 f939 	bl	80067a8 <USBH_Get_USB_Status>
 8006536:	4603      	mov	r3, r0
 8006538:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800653a:	7bbb      	ldrb	r3, [r7, #14]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800654c:	2301      	movs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006556:	4618      	mov	r0, r3
 8006558:	f7fb fb18 	bl	8001b8c <HAL_HCD_GetCurrentSpeed>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d007      	beq.n	8006572 <USBH_LL_GetSpeed+0x2e>
 8006562:	2b01      	cmp	r3, #1
 8006564:	d302      	bcc.n	800656c <USBH_LL_GetSpeed+0x28>
 8006566:	2b02      	cmp	r3, #2
 8006568:	d006      	beq.n	8006578 <USBH_LL_GetSpeed+0x34>
 800656a:	e008      	b.n	800657e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800656c:	2300      	movs	r3, #0
 800656e:	73fb      	strb	r3, [r7, #15]
    break;
 8006570:	e008      	b.n	8006584 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006572:	2301      	movs	r3, #1
 8006574:	73fb      	strb	r3, [r7, #15]
    break;
 8006576:	e005      	b.n	8006584 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006578:	2302      	movs	r3, #2
 800657a:	73fb      	strb	r3, [r7, #15]
    break;
 800657c:	e002      	b.n	8006584 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800657e:	2301      	movs	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
    break;
 8006582:	bf00      	nop
  }
  return  speed;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fb faab 	bl	8001b00 <HAL_HCD_ResetPort>
 80065aa:	4603      	mov	r3, r0
 80065ac:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 f8f9 	bl	80067a8 <USBH_Get_USB_Status>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065d6:	78fa      	ldrb	r2, [r7, #3]
 80065d8:	4611      	mov	r1, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fb fab3 	bl	8001b46 <HAL_HCD_HC_GetXferCount>
 80065e0:	4603      	mov	r3, r0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80065ea:	b590      	push	{r4, r7, lr}
 80065ec:	b089      	sub	sp, #36	; 0x24
 80065ee:	af04      	add	r7, sp, #16
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	4608      	mov	r0, r1
 80065f4:	4611      	mov	r1, r2
 80065f6:	461a      	mov	r2, r3
 80065f8:	4603      	mov	r3, r0
 80065fa:	70fb      	strb	r3, [r7, #3]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70bb      	strb	r3, [r7, #2]
 8006600:	4613      	mov	r3, r2
 8006602:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8006612:	787c      	ldrb	r4, [r7, #1]
 8006614:	78ba      	ldrb	r2, [r7, #2]
 8006616:	78f9      	ldrb	r1, [r7, #3]
 8006618:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800661a:	9302      	str	r3, [sp, #8]
 800661c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	4623      	mov	r3, r4
 800662a:	f7fa ff00 	bl	800142e <HAL_HCD_HC_Init>
 800662e:	4603      	mov	r3, r0
 8006630:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006632:	7bfb      	ldrb	r3, [r7, #15]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 f8b7 	bl	80067a8 <USBH_Get_USB_Status>
 800663a:	4603      	mov	r3, r0
 800663c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800663e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	bd90      	pop	{r4, r7, pc}

08006648 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	4611      	mov	r1, r2
 8006666:	4618      	mov	r0, r3
 8006668:	f7fa ff79 	bl	800155e <HAL_HCD_HC_Halt>
 800666c:	4603      	mov	r3, r0
 800666e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f898 	bl	80067a8 <USBH_Get_USB_Status>
 8006678:	4603      	mov	r3, r0
 800667a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800667c:	7bbb      	ldrb	r3, [r7, #14]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006686:	b590      	push	{r4, r7, lr}
 8006688:	b089      	sub	sp, #36	; 0x24
 800668a:	af04      	add	r7, sp, #16
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	4608      	mov	r0, r1
 8006690:	4611      	mov	r1, r2
 8006692:	461a      	mov	r2, r3
 8006694:	4603      	mov	r3, r0
 8006696:	70fb      	strb	r3, [r7, #3]
 8006698:	460b      	mov	r3, r1
 800669a:	70bb      	strb	r3, [r7, #2]
 800669c:	4613      	mov	r3, r2
 800669e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80066ae:	787c      	ldrb	r4, [r7, #1]
 80066b0:	78ba      	ldrb	r2, [r7, #2]
 80066b2:	78f9      	ldrb	r1, [r7, #3]
 80066b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066b8:	9303      	str	r3, [sp, #12]
 80066ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066bc:	9302      	str	r3, [sp, #8]
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	4623      	mov	r3, r4
 80066ca:	f7fa ff6b 	bl	80015a4 <HAL_HCD_HC_SubmitRequest>
 80066ce:	4603      	mov	r3, r0
 80066d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 f867 	bl	80067a8 <USBH_Get_USB_Status>
 80066da:	4603      	mov	r3, r0
 80066dc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80066de:	7bbb      	ldrb	r3, [r7, #14]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd90      	pop	{r4, r7, pc}

080066e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	4611      	mov	r1, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fb fa0c 	bl	8001b1c <HAL_HCD_HC_GetURBState>
 8006704:	4603      	mov	r3, r0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800671a:	20c8      	movs	r0, #200	; 0xc8
 800671c:	f7fa fb3e 	bl	8000d9c <HAL_Delay>
  return USBH_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	460b      	mov	r3, r1
 8006734:	70fb      	strb	r3, [r7, #3]
 8006736:	4613      	mov	r3, r2
 8006738:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006740:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	68f9      	ldr	r1, [r7, #12]
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	440b      	add	r3, r1
 8006750:	333b      	adds	r3, #59	; 0x3b
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006758:	78fa      	ldrb	r2, [r7, #3]
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	440b      	add	r3, r1
 8006766:	3350      	adds	r3, #80	; 0x50
 8006768:	78ba      	ldrb	r2, [r7, #2]
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	e009      	b.n	8006782 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800676e:	78fa      	ldrb	r2, [r7, #3]
 8006770:	68f9      	ldr	r1, [r7, #12]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	440b      	add	r3, r1
 800677c:	3351      	adds	r3, #81	; 0x51
 800677e:	78ba      	ldrb	r2, [r7, #2]
 8006780:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7fa faff 	bl	8000d9c <HAL_Delay>
}
 800679e:	bf00      	nop
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d817      	bhi.n	80067ec <USBH_Get_USB_Status+0x44>
 80067bc:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <USBH_Get_USB_Status+0x1c>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	080067d5 	.word	0x080067d5
 80067c8:	080067db 	.word	0x080067db
 80067cc:	080067e1 	.word	0x080067e1
 80067d0:	080067e7 	.word	0x080067e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
    break;
 80067d8:	e00b      	b.n	80067f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80067da:	2302      	movs	r3, #2
 80067dc:	73fb      	strb	r3, [r7, #15]
    break;
 80067de:	e008      	b.n	80067f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80067e0:	2301      	movs	r3, #1
 80067e2:	73fb      	strb	r3, [r7, #15]
    break;
 80067e4:	e005      	b.n	80067f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80067e6:	2302      	movs	r3, #2
 80067e8:	73fb      	strb	r3, [r7, #15]
    break;
 80067ea:	e002      	b.n	80067f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80067ec:	2302      	movs	r3, #2
 80067ee:	73fb      	strb	r3, [r7, #15]
    break;
 80067f0:	bf00      	nop
  }
  return usb_status;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <__errno>:
 8006800:	4b01      	ldr	r3, [pc, #4]	; (8006808 <__errno+0x8>)
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	2000002c 	.word	0x2000002c

0800680c <__libc_init_array>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	4e0d      	ldr	r6, [pc, #52]	; (8006844 <__libc_init_array+0x38>)
 8006810:	4c0d      	ldr	r4, [pc, #52]	; (8006848 <__libc_init_array+0x3c>)
 8006812:	1ba4      	subs	r4, r4, r6
 8006814:	10a4      	asrs	r4, r4, #2
 8006816:	2500      	movs	r5, #0
 8006818:	42a5      	cmp	r5, r4
 800681a:	d109      	bne.n	8006830 <__libc_init_array+0x24>
 800681c:	4e0b      	ldr	r6, [pc, #44]	; (800684c <__libc_init_array+0x40>)
 800681e:	4c0c      	ldr	r4, [pc, #48]	; (8006850 <__libc_init_array+0x44>)
 8006820:	f000 f8ea 	bl	80069f8 <_init>
 8006824:	1ba4      	subs	r4, r4, r6
 8006826:	10a4      	asrs	r4, r4, #2
 8006828:	2500      	movs	r5, #0
 800682a:	42a5      	cmp	r5, r4
 800682c:	d105      	bne.n	800683a <__libc_init_array+0x2e>
 800682e:	bd70      	pop	{r4, r5, r6, pc}
 8006830:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006834:	4798      	blx	r3
 8006836:	3501      	adds	r5, #1
 8006838:	e7ee      	b.n	8006818 <__libc_init_array+0xc>
 800683a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800683e:	4798      	blx	r3
 8006840:	3501      	adds	r5, #1
 8006842:	e7f2      	b.n	800682a <__libc_init_array+0x1e>
 8006844:	08006a34 	.word	0x08006a34
 8006848:	08006a34 	.word	0x08006a34
 800684c:	08006a34 	.word	0x08006a34
 8006850:	08006a38 	.word	0x08006a38

08006854 <malloc>:
 8006854:	4b02      	ldr	r3, [pc, #8]	; (8006860 <malloc+0xc>)
 8006856:	4601      	mov	r1, r0
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	f000 b861 	b.w	8006920 <_malloc_r>
 800685e:	bf00      	nop
 8006860:	2000002c 	.word	0x2000002c

08006864 <free>:
 8006864:	4b02      	ldr	r3, [pc, #8]	; (8006870 <free+0xc>)
 8006866:	4601      	mov	r1, r0
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	f000 b80b 	b.w	8006884 <_free_r>
 800686e:	bf00      	nop
 8006870:	2000002c 	.word	0x2000002c

08006874 <memset>:
 8006874:	4402      	add	r2, r0
 8006876:	4603      	mov	r3, r0
 8006878:	4293      	cmp	r3, r2
 800687a:	d100      	bne.n	800687e <memset+0xa>
 800687c:	4770      	bx	lr
 800687e:	f803 1b01 	strb.w	r1, [r3], #1
 8006882:	e7f9      	b.n	8006878 <memset+0x4>

08006884 <_free_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4605      	mov	r5, r0
 8006888:	2900      	cmp	r1, #0
 800688a:	d045      	beq.n	8006918 <_free_r+0x94>
 800688c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006890:	1f0c      	subs	r4, r1, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	bfb8      	it	lt
 8006896:	18e4      	addlt	r4, r4, r3
 8006898:	f000 f8ac 	bl	80069f4 <__malloc_lock>
 800689c:	4a1f      	ldr	r2, [pc, #124]	; (800691c <_free_r+0x98>)
 800689e:	6813      	ldr	r3, [r2, #0]
 80068a0:	4610      	mov	r0, r2
 80068a2:	b933      	cbnz	r3, 80068b2 <_free_r+0x2e>
 80068a4:	6063      	str	r3, [r4, #4]
 80068a6:	6014      	str	r4, [r2, #0]
 80068a8:	4628      	mov	r0, r5
 80068aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ae:	f000 b8a2 	b.w	80069f6 <__malloc_unlock>
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	d90c      	bls.n	80068d0 <_free_r+0x4c>
 80068b6:	6821      	ldr	r1, [r4, #0]
 80068b8:	1862      	adds	r2, r4, r1
 80068ba:	4293      	cmp	r3, r2
 80068bc:	bf04      	itt	eq
 80068be:	681a      	ldreq	r2, [r3, #0]
 80068c0:	685b      	ldreq	r3, [r3, #4]
 80068c2:	6063      	str	r3, [r4, #4]
 80068c4:	bf04      	itt	eq
 80068c6:	1852      	addeq	r2, r2, r1
 80068c8:	6022      	streq	r2, [r4, #0]
 80068ca:	6004      	str	r4, [r0, #0]
 80068cc:	e7ec      	b.n	80068a8 <_free_r+0x24>
 80068ce:	4613      	mov	r3, r2
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	b10a      	cbz	r2, 80068d8 <_free_r+0x54>
 80068d4:	42a2      	cmp	r2, r4
 80068d6:	d9fa      	bls.n	80068ce <_free_r+0x4a>
 80068d8:	6819      	ldr	r1, [r3, #0]
 80068da:	1858      	adds	r0, r3, r1
 80068dc:	42a0      	cmp	r0, r4
 80068de:	d10b      	bne.n	80068f8 <_free_r+0x74>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	4401      	add	r1, r0
 80068e4:	1858      	adds	r0, r3, r1
 80068e6:	4282      	cmp	r2, r0
 80068e8:	6019      	str	r1, [r3, #0]
 80068ea:	d1dd      	bne.n	80068a8 <_free_r+0x24>
 80068ec:	6810      	ldr	r0, [r2, #0]
 80068ee:	6852      	ldr	r2, [r2, #4]
 80068f0:	605a      	str	r2, [r3, #4]
 80068f2:	4401      	add	r1, r0
 80068f4:	6019      	str	r1, [r3, #0]
 80068f6:	e7d7      	b.n	80068a8 <_free_r+0x24>
 80068f8:	d902      	bls.n	8006900 <_free_r+0x7c>
 80068fa:	230c      	movs	r3, #12
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	e7d3      	b.n	80068a8 <_free_r+0x24>
 8006900:	6820      	ldr	r0, [r4, #0]
 8006902:	1821      	adds	r1, r4, r0
 8006904:	428a      	cmp	r2, r1
 8006906:	bf04      	itt	eq
 8006908:	6811      	ldreq	r1, [r2, #0]
 800690a:	6852      	ldreq	r2, [r2, #4]
 800690c:	6062      	str	r2, [r4, #4]
 800690e:	bf04      	itt	eq
 8006910:	1809      	addeq	r1, r1, r0
 8006912:	6021      	streq	r1, [r4, #0]
 8006914:	605c      	str	r4, [r3, #4]
 8006916:	e7c7      	b.n	80068a8 <_free_r+0x24>
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	bf00      	nop
 800691c:	200000b8 	.word	0x200000b8

08006920 <_malloc_r>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	1ccd      	adds	r5, r1, #3
 8006924:	f025 0503 	bic.w	r5, r5, #3
 8006928:	3508      	adds	r5, #8
 800692a:	2d0c      	cmp	r5, #12
 800692c:	bf38      	it	cc
 800692e:	250c      	movcc	r5, #12
 8006930:	2d00      	cmp	r5, #0
 8006932:	4606      	mov	r6, r0
 8006934:	db01      	blt.n	800693a <_malloc_r+0x1a>
 8006936:	42a9      	cmp	r1, r5
 8006938:	d903      	bls.n	8006942 <_malloc_r+0x22>
 800693a:	230c      	movs	r3, #12
 800693c:	6033      	str	r3, [r6, #0]
 800693e:	2000      	movs	r0, #0
 8006940:	bd70      	pop	{r4, r5, r6, pc}
 8006942:	f000 f857 	bl	80069f4 <__malloc_lock>
 8006946:	4a21      	ldr	r2, [pc, #132]	; (80069cc <_malloc_r+0xac>)
 8006948:	6814      	ldr	r4, [r2, #0]
 800694a:	4621      	mov	r1, r4
 800694c:	b991      	cbnz	r1, 8006974 <_malloc_r+0x54>
 800694e:	4c20      	ldr	r4, [pc, #128]	; (80069d0 <_malloc_r+0xb0>)
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	b91b      	cbnz	r3, 800695c <_malloc_r+0x3c>
 8006954:	4630      	mov	r0, r6
 8006956:	f000 f83d 	bl	80069d4 <_sbrk_r>
 800695a:	6020      	str	r0, [r4, #0]
 800695c:	4629      	mov	r1, r5
 800695e:	4630      	mov	r0, r6
 8006960:	f000 f838 	bl	80069d4 <_sbrk_r>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d124      	bne.n	80069b2 <_malloc_r+0x92>
 8006968:	230c      	movs	r3, #12
 800696a:	6033      	str	r3, [r6, #0]
 800696c:	4630      	mov	r0, r6
 800696e:	f000 f842 	bl	80069f6 <__malloc_unlock>
 8006972:	e7e4      	b.n	800693e <_malloc_r+0x1e>
 8006974:	680b      	ldr	r3, [r1, #0]
 8006976:	1b5b      	subs	r3, r3, r5
 8006978:	d418      	bmi.n	80069ac <_malloc_r+0x8c>
 800697a:	2b0b      	cmp	r3, #11
 800697c:	d90f      	bls.n	800699e <_malloc_r+0x7e>
 800697e:	600b      	str	r3, [r1, #0]
 8006980:	50cd      	str	r5, [r1, r3]
 8006982:	18cc      	adds	r4, r1, r3
 8006984:	4630      	mov	r0, r6
 8006986:	f000 f836 	bl	80069f6 <__malloc_unlock>
 800698a:	f104 000b 	add.w	r0, r4, #11
 800698e:	1d23      	adds	r3, r4, #4
 8006990:	f020 0007 	bic.w	r0, r0, #7
 8006994:	1ac3      	subs	r3, r0, r3
 8006996:	d0d3      	beq.n	8006940 <_malloc_r+0x20>
 8006998:	425a      	negs	r2, r3
 800699a:	50e2      	str	r2, [r4, r3]
 800699c:	e7d0      	b.n	8006940 <_malloc_r+0x20>
 800699e:	428c      	cmp	r4, r1
 80069a0:	684b      	ldr	r3, [r1, #4]
 80069a2:	bf16      	itet	ne
 80069a4:	6063      	strne	r3, [r4, #4]
 80069a6:	6013      	streq	r3, [r2, #0]
 80069a8:	460c      	movne	r4, r1
 80069aa:	e7eb      	b.n	8006984 <_malloc_r+0x64>
 80069ac:	460c      	mov	r4, r1
 80069ae:	6849      	ldr	r1, [r1, #4]
 80069b0:	e7cc      	b.n	800694c <_malloc_r+0x2c>
 80069b2:	1cc4      	adds	r4, r0, #3
 80069b4:	f024 0403 	bic.w	r4, r4, #3
 80069b8:	42a0      	cmp	r0, r4
 80069ba:	d005      	beq.n	80069c8 <_malloc_r+0xa8>
 80069bc:	1a21      	subs	r1, r4, r0
 80069be:	4630      	mov	r0, r6
 80069c0:	f000 f808 	bl	80069d4 <_sbrk_r>
 80069c4:	3001      	adds	r0, #1
 80069c6:	d0cf      	beq.n	8006968 <_malloc_r+0x48>
 80069c8:	6025      	str	r5, [r4, #0]
 80069ca:	e7db      	b.n	8006984 <_malloc_r+0x64>
 80069cc:	200000b8 	.word	0x200000b8
 80069d0:	200000bc 	.word	0x200000bc

080069d4 <_sbrk_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4c06      	ldr	r4, [pc, #24]	; (80069f0 <_sbrk_r+0x1c>)
 80069d8:	2300      	movs	r3, #0
 80069da:	4605      	mov	r5, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	f7fa f8fe 	bl	8000be0 <_sbrk>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_sbrk_r+0x1a>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_sbrk_r+0x1a>
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20000858 	.word	0x20000858

080069f4 <__malloc_lock>:
 80069f4:	4770      	bx	lr

080069f6 <__malloc_unlock>:
 80069f6:	4770      	bx	lr

080069f8 <_init>:
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	bf00      	nop
 80069fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fe:	bc08      	pop	{r3}
 8006a00:	469e      	mov	lr, r3
 8006a02:	4770      	bx	lr

08006a04 <_fini>:
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	bf00      	nop
 8006a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0a:	bc08      	pop	{r3}
 8006a0c:	469e      	mov	lr, r3
 8006a0e:	4770      	bx	lr
