
SSL_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081d0  080081d0  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080081d0  080081d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081d8  080081d8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081d8  080081d8  000181d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081dc  080081dc  000181dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080081e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cac  20000180  08008360  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e2c  08008360  00021e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3bb  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc5  00000000  00000000  0003d56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00041130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  000426f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024eb2  00000000  00000000  00043b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b231  00000000  00000000  000689f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d143f  00000000  00000000  00083c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155062  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c28  00000000  00000000  001550b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008158 	.word	0x08008158

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08008158 	.word	0x08008158

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <setMotorSpd>:

#include "motor.h"

//spd>0 A em VCC e B em GND

void setMotorSpd(int32_t spd, uint8_t motorId){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	70fb      	strb	r3, [r7, #3]
	switch (motorId){
 80004cc:	78fb      	ldrb	r3, [r7, #3]
 80004ce:	2b04      	cmp	r3, #4
 80004d0:	f200 8097 	bhi.w	8000602 <setMotorSpd+0x142>
 80004d4:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <setMotorSpd+0x1c>)
 80004d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004da:	bf00      	nop
 80004dc:	080004f1 	.word	0x080004f1
 80004e0:	0800057d 	.word	0x0800057d
 80004e4:	08000603 	.word	0x08000603
 80004e8:	08000603 	.word	0x08000603
 80004ec:	08000603 	.word	0x08000603
		case 0:
			if(spd>0){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	dd15      	ble.n	8000522 <setMotorSpd+0x62>
				TIM8->CCR4 = TIM8->ARR - spd; //MAH
 80004f6:	4b45      	ldr	r3, [pc, #276]	; (800060c <setMotorSpd+0x14c>)
 80004f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4943      	ldr	r1, [pc, #268]	; (800060c <setMotorSpd+0x14c>)
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	640b      	str	r3, [r1, #64]	; 0x40
				TIM8->CCR2 = TIM8->ARR; //MBH
 8000502:	4b42      	ldr	r3, [pc, #264]	; (800060c <setMotorSpd+0x14c>)
 8000504:	4a41      	ldr	r2, [pc, #260]	; (800060c <setMotorSpd+0x14c>)
 8000506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000508:	6393      	str	r3, [r2, #56]	; 0x38
				HAL_GPIO_WritePin(M0_MAL_GPIO_Port, M0_MAL_Pin, RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	4840      	ldr	r0, [pc, #256]	; (8000610 <setMotorSpd+0x150>)
 8000510:	f001 fa5a 	bl	80019c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_MBL_GPIO_Port, M0_MBL_Pin, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051a:	483e      	ldr	r0, [pc, #248]	; (8000614 <setMotorSpd+0x154>)
 800051c:	f001 fa54 	bl	80019c8 <HAL_GPIO_WritePin>
				TIM8->CCR4 = TIM8->ARR; //MAH
				TIM8->CCR2 = TIM8->ARR; //MBH
				HAL_GPIO_WritePin(M0_MAL_GPIO_Port, M0_MAL_Pin, SET);
				HAL_GPIO_WritePin(M0_MBL_GPIO_Port, M0_MBL_Pin, SET);
			}
			break;
 8000520:	e070      	b.n	8000604 <setMotorSpd+0x144>
			}else if(spd<0){
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	da15      	bge.n	8000554 <setMotorSpd+0x94>
				TIM8->CCR4 = TIM8->ARR; //MAH
 8000528:	4b38      	ldr	r3, [pc, #224]	; (800060c <setMotorSpd+0x14c>)
 800052a:	4a38      	ldr	r2, [pc, #224]	; (800060c <setMotorSpd+0x14c>)
 800052c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
				TIM8->CCR2 =TIM8->ARR + spd; //MBH
 8000530:	4b36      	ldr	r3, [pc, #216]	; (800060c <setMotorSpd+0x14c>)
 8000532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4935      	ldr	r1, [pc, #212]	; (800060c <setMotorSpd+0x14c>)
 8000538:	4413      	add	r3, r2
 800053a:	638b      	str	r3, [r1, #56]	; 0x38
				HAL_GPIO_WritePin(M0_MAL_GPIO_Port, M0_MAL_Pin, SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	4833      	ldr	r0, [pc, #204]	; (8000610 <setMotorSpd+0x150>)
 8000542:	f001 fa41 	bl	80019c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_MBL_GPIO_Port, M0_MBL_Pin, RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	4831      	ldr	r0, [pc, #196]	; (8000614 <setMotorSpd+0x154>)
 800054e:	f001 fa3b 	bl	80019c8 <HAL_GPIO_WritePin>
			break;
 8000552:	e057      	b.n	8000604 <setMotorSpd+0x144>
				TIM8->CCR4 = TIM8->ARR; //MAH
 8000554:	4b2d      	ldr	r3, [pc, #180]	; (800060c <setMotorSpd+0x14c>)
 8000556:	4a2d      	ldr	r2, [pc, #180]	; (800060c <setMotorSpd+0x14c>)
 8000558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
				TIM8->CCR2 = TIM8->ARR; //MBH
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <setMotorSpd+0x14c>)
 800055e:	4a2b      	ldr	r2, [pc, #172]	; (800060c <setMotorSpd+0x14c>)
 8000560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000562:	6393      	str	r3, [r2, #56]	; 0x38
				HAL_GPIO_WritePin(M0_MAL_GPIO_Port, M0_MAL_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	4829      	ldr	r0, [pc, #164]	; (8000610 <setMotorSpd+0x150>)
 800056a:	f001 fa2d 	bl	80019c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M0_MBL_GPIO_Port, M0_MBL_Pin, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000574:	4827      	ldr	r0, [pc, #156]	; (8000614 <setMotorSpd+0x154>)
 8000576:	f001 fa27 	bl	80019c8 <HAL_GPIO_WritePin>
			break;
 800057a:	e043      	b.n	8000604 <setMotorSpd+0x144>
		case 1:
			if(spd>0){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	dd14      	ble.n	80005ac <setMotorSpd+0xec>
				TIM1->CCR1 = TIM1->ARR - spd; //MAH
 8000582:	4b25      	ldr	r3, [pc, #148]	; (8000618 <setMotorSpd+0x158>)
 8000584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4923      	ldr	r1, [pc, #140]	; (8000618 <setMotorSpd+0x158>)
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	634b      	str	r3, [r1, #52]	; 0x34
				TIM8->CCR3 = TIM8->ARR; //MBH
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <setMotorSpd+0x14c>)
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <setMotorSpd+0x14c>)
 8000592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000594:	63d3      	str	r3, [r2, #60]	; 0x3c
				HAL_GPIO_WritePin(M1_MAL_GPIO_Port, M1_MAL_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	4820      	ldr	r0, [pc, #128]	; (800061c <setMotorSpd+0x15c>)
 800059c:	f001 fa14 	bl	80019c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_MBL_GPIO_Port, M1_MBL_Pin, SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	481d      	ldr	r0, [pc, #116]	; (800061c <setMotorSpd+0x15c>)
 80005a6:	f001 fa0f 	bl	80019c8 <HAL_GPIO_WritePin>
				TIM1->CCR1 = TIM1->ARR; //MAH
				TIM8->CCR3 = TIM8->ARR; //MBH
				HAL_GPIO_WritePin(M1_MAL_GPIO_Port, M1_MAL_Pin, SET);
				HAL_GPIO_WritePin(M1_MBL_GPIO_Port, M1_MBL_Pin, SET);
			}
			break;
 80005aa:	e02b      	b.n	8000604 <setMotorSpd+0x144>
			}else if(spd<0){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	da14      	bge.n	80005dc <setMotorSpd+0x11c>
				TIM1->CCR1 = TIM1->ARR; //MAH
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <setMotorSpd+0x158>)
 80005b4:	4a18      	ldr	r2, [pc, #96]	; (8000618 <setMotorSpd+0x158>)
 80005b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b8:	6353      	str	r3, [r2, #52]	; 0x34
				TIM8->CCR3 =TIM8->ARR + spd; //MBH
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <setMotorSpd+0x14c>)
 80005bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4912      	ldr	r1, [pc, #72]	; (800060c <setMotorSpd+0x14c>)
 80005c2:	4413      	add	r3, r2
 80005c4:	63cb      	str	r3, [r1, #60]	; 0x3c
				HAL_GPIO_WritePin(M1_MAL_GPIO_Port, M1_MAL_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2140      	movs	r1, #64	; 0x40
 80005ca:	4814      	ldr	r0, [pc, #80]	; (800061c <setMotorSpd+0x15c>)
 80005cc:	f001 f9fc 	bl	80019c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_MBL_GPIO_Port, M1_MBL_Pin, RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2110      	movs	r1, #16
 80005d4:	4811      	ldr	r0, [pc, #68]	; (800061c <setMotorSpd+0x15c>)
 80005d6:	f001 f9f7 	bl	80019c8 <HAL_GPIO_WritePin>
			break;
 80005da:	e013      	b.n	8000604 <setMotorSpd+0x144>
				TIM1->CCR1 = TIM1->ARR; //MAH
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <setMotorSpd+0x158>)
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <setMotorSpd+0x158>)
 80005e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e2:	6353      	str	r3, [r2, #52]	; 0x34
				TIM8->CCR3 = TIM8->ARR; //MBH
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <setMotorSpd+0x14c>)
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <setMotorSpd+0x14c>)
 80005e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ea:	63d3      	str	r3, [r2, #60]	; 0x3c
				HAL_GPIO_WritePin(M1_MAL_GPIO_Port, M1_MAL_Pin, SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2140      	movs	r1, #64	; 0x40
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <setMotorSpd+0x15c>)
 80005f2:	f001 f9e9 	bl	80019c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(M1_MBL_GPIO_Port, M1_MBL_Pin, SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2110      	movs	r1, #16
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <setMotorSpd+0x15c>)
 80005fc:	f001 f9e4 	bl	80019c8 <HAL_GPIO_WritePin>
			break;
 8000600:	e000      	b.n	8000604 <setMotorSpd+0x144>
		case 3:
			break;
		case 4:
			break;
		default:
			break;
 8000602:	bf00      	nop
	}
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40010400 	.word	0x40010400
 8000610:	40020c00 	.word	0x40020c00
 8000614:	40020800 	.word	0x40020800
 8000618:	40010000 	.word	0x40010000
 800061c:	40021000 	.word	0x40021000

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fe6a 	bl	80012fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f898 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fafa 	bl	8000c24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000630:	f000 f8fe 	bl	8000830 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000634:	f000 f960 	bl	80008f8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000638:	f007 f836 	bl	80076a8 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 800063c:	f000 f926 	bl	800088c <MX_SPI2_Init>
  MX_TIM8_Init();
 8000640:	f000 fa02 	bl	8000a48 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000644:	f000 faa8 	bl	8000b98 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000648:	483f      	ldr	r0, [pc, #252]	; (8000748 <main+0x128>)
 800064a:	f003 faa7 	bl	8003b9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 800064e:	2100      	movs	r1, #0
 8000650:	483d      	ldr	r0, [pc, #244]	; (8000748 <main+0x128>)
 8000652:	f003 fb63 	bl	8003d1c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 8000656:	2104      	movs	r1, #4
 8000658:	483b      	ldr	r0, [pc, #236]	; (8000748 <main+0x128>)
 800065a:	f003 fb5f 	bl	8003d1c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 800065e:	2108      	movs	r1, #8
 8000660:	4839      	ldr	r0, [pc, #228]	; (8000748 <main+0x128>)
 8000662:	f003 fb5b 	bl	8003d1c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 8000666:	210c      	movs	r1, #12
 8000668:	4837      	ldr	r0, [pc, #220]	; (8000748 <main+0x128>)
 800066a:	f003 fb57 	bl	8003d1c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800066e:	4837      	ldr	r0, [pc, #220]	; (800074c <main+0x12c>)
 8000670:	f003 fa94 	bl	8003b9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_1);
 8000674:	2100      	movs	r1, #0
 8000676:	4835      	ldr	r0, [pc, #212]	; (800074c <main+0x12c>)
 8000678:	f003 fb50 	bl	8003d1c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_2);
 800067c:	2104      	movs	r1, #4
 800067e:	4833      	ldr	r0, [pc, #204]	; (800074c <main+0x12c>)
 8000680:	f003 fb4c 	bl	8003d1c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_3);
 8000684:	2108      	movs	r1, #8
 8000686:	4831      	ldr	r0, [pc, #196]	; (800074c <main+0x12c>)
 8000688:	f003 fb48 	bl	8003d1c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_4);
 800068c:	210c      	movs	r1, #12
 800068e:	482f      	ldr	r0, [pc, #188]	; (800074c <main+0x12c>)
 8000690:	f003 fb44 	bl	8003d1c <HAL_TIM_PWM_Start_IT>
  TIM1->CCR4 = 65535;
  TIM8->CCR1 = 65535;
  TIM8->CCR2 = 65535;
  TIM8->CCR3 = 65535;
  TIM8->CCR4 = 65535;*/
  HAL_Delay(1000);
 8000694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000698:	f000 fea2 	bl	80013e0 <HAL_Delay>
  }
  strcpy(usbBuf, "!!!Hello World!!!\n\r");
  while(CDC_Transmit_FS(usbBuf, 19) == USBD_BUSY);
  NRF24_begin(CE_GPIO_Port, CSN_Pin, CE_Pin, hspi2);*/
  //printRadioSettings();
  usbStruct.val1 = 100;
 800069c:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <main+0x130>)
 800069e:	2264      	movs	r2, #100	; 0x64
 80006a0:	601a      	str	r2, [r3, #0]
  usbStruct.val2 = 101;
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <main+0x130>)
 80006a4:	2265      	movs	r2, #101	; 0x65
 80006a6:	605a      	str	r2, [r3, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	while(CDC_Transmit_FS(&usbStruct, 8) == USBD_BUSY);
 80006a8:	bf00      	nop
 80006aa:	2108      	movs	r1, #8
 80006ac:	4828      	ldr	r0, [pc, #160]	; (8000750 <main+0x130>)
 80006ae:	f007 f8bd 	bl	800782c <CDC_Transmit_FS>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d0f8      	beq.n	80006aa <main+0x8a>
  	setMotorSpd(recvUSBStruct->motorSpd[0], 0);
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <main+0x134>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fefd 	bl	80004c0 <setMotorSpd>
  	setMotorSpd(recvUSBStruct->motorSpd[1], 1);
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <main+0x134>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fef6 	bl	80004c0 <setMotorSpd>
  	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, recvUSBStruct->led & 1);
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <main+0x134>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	481b      	ldr	r0, [pc, #108]	; (8000758 <main+0x138>)
 80006ea:	f001 f96d 	bl	80019c8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, recvUSBStruct->led & 2);
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <main+0x134>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000702:	4815      	ldr	r0, [pc, #84]	; (8000758 <main+0x138>)
 8000704:	f001 f960 	bl	80019c8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, recvUSBStruct->led & 4);
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <main+0x134>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071c:	480e      	ldr	r0, [pc, #56]	; (8000758 <main+0x138>)
 800071e:	f001 f953 	bl	80019c8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, recvUSBStruct->led & 8);
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <main+0x134>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <main+0x138>)
 8000738:	f001 f946 	bl	80019c8 <HAL_GPIO_WritePin>

  	HAL_Delay(1000);
 800073c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000740:	f000 fe4e 	bl	80013e0 <HAL_Delay>
  	while(CDC_Transmit_FS(&usbStruct, 8) == USBD_BUSY);
 8000744:	e7b0      	b.n	80006a8 <main+0x88>
 8000746:	bf00      	nop
 8000748:	200004c0 	.word	0x200004c0
 800074c:	20000420 	.word	0x20000420
 8000750:	200003c0 	.word	0x200003c0
 8000754:	200004bc 	.word	0x200004bc
 8000758:	40020c00 	.word	0x40020c00

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	; 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	; 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f007 fcec 	bl	8008148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	4b28      	ldr	r3, [pc, #160]	; (8000828 <SystemClock_Config+0xcc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a27      	ldr	r2, [pc, #156]	; (8000828 <SystemClock_Config+0xcc>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <SystemClock_Config+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <SystemClock_Config+0xd0>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007da:	2307      	movs	r3, #7
 80007dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fbd2 	bl	8002f8c <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ee:	f000 fb43 	bl	8000e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2105      	movs	r1, #5
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fe33 	bl	800347c <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800081c:	f000 fb2c 	bl	8000e78 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	; 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_I2C1_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <MX_I2C1_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_I2C1_Init+0x50>)
 800083c:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_I2C1_Init+0x58>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_I2C1_Init+0x50>)
 800084e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_I2C1_Init+0x50>)
 800086e:	f001 f8c5 	bl	80019fc <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 fafe 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000468 	.word	0x20000468
 8000884:	40005400 	.word	0x40005400
 8000888:	000186a0 	.word	0x000186a0

0800088c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_SPI2_Init+0x64>)
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <MX_SPI2_Init+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI2_Init+0x64>)
 8000898:	f44f 7282 	mov.w	r2, #260	; 0x104
 800089c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008c0:	2220      	movs	r2, #32
 80008c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008d8:	220a      	movs	r2, #10
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_SPI2_Init+0x64>)
 80008de:	f002 ffb5 	bl	800384c <HAL_SPI_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008e8:	f000 fac6 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200003c8 	.word	0x200003c8
 80008f4:	40003800 	.word	0x40003800

080008f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b092      	sub	sp, #72	; 0x48
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2220      	movs	r2, #32
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f007 fc10 	bl	8008148 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000928:	4b45      	ldr	r3, [pc, #276]	; (8000a40 <MX_TIM1_Init+0x148>)
 800092a:	4a46      	ldr	r2, [pc, #280]	; (8000a44 <MX_TIM1_Init+0x14c>)
 800092c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800092e:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <MX_TIM1_Init+0x148>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000934:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <MX_TIM1_Init+0x148>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800093a:	4b41      	ldr	r3, [pc, #260]	; (8000a40 <MX_TIM1_Init+0x148>)
 800093c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000940:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <MX_TIM1_Init+0x148>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000948:	4b3d      	ldr	r3, [pc, #244]	; (8000a40 <MX_TIM1_Init+0x148>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <MX_TIM1_Init+0x148>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000954:	483a      	ldr	r0, [pc, #232]	; (8000a40 <MX_TIM1_Init+0x148>)
 8000956:	f003 f991 	bl	8003c7c <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000960:	f000 fa8a 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000970:	4619      	mov	r1, r3
 8000972:	4833      	ldr	r0, [pc, #204]	; (8000a40 <MX_TIM1_Init+0x148>)
 8000974:	f003 fe14 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800097e:	f000 fa7b 	bl	8000e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000982:	2360      	movs	r3, #96	; 0x60
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	2200      	movs	r2, #0
 80009a4:	4619      	mov	r1, r3
 80009a6:	4826      	ldr	r0, [pc, #152]	; (8000a40 <MX_TIM1_Init+0x148>)
 80009a8:	f003 fac6 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80009b2:	f000 fa61 	bl	8000e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	2204      	movs	r2, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4820      	ldr	r0, [pc, #128]	; (8000a40 <MX_TIM1_Init+0x148>)
 80009c0:	f003 faba 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80009ca:	f000 fa55 	bl	8000e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	2208      	movs	r2, #8
 80009d4:	4619      	mov	r1, r3
 80009d6:	481a      	ldr	r0, [pc, #104]	; (8000a40 <MX_TIM1_Init+0x148>)
 80009d8:	f003 faae 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80009e2:	f000 fa49 	bl	8000e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	220c      	movs	r2, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	4814      	ldr	r0, [pc, #80]	; (8000a40 <MX_TIM1_Init+0x148>)
 80009f0:	f003 faa2 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80009fa:	f000 fa3d 	bl	8000e78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_TIM1_Init+0x148>)
 8000a22:	f003 fe39 	bl	8004698 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000a2c:	f000 fa24 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <MX_TIM1_Init+0x148>)
 8000a32:	f000 fb37 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000a36:	bf00      	nop
 8000a38:	3748      	adds	r7, #72	; 0x48
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200004c0 	.word	0x200004c0
 8000a44:	40010000 	.word	0x40010000

08000a48 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b092      	sub	sp, #72	; 0x48
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2220      	movs	r2, #32
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f007 fb68 	bl	8008148 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a78:	4b45      	ldr	r3, [pc, #276]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000a7a:	4a46      	ldr	r2, [pc, #280]	; (8000b94 <MX_TIM8_Init+0x14c>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a7e:	4b44      	ldr	r3, [pc, #272]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a8a:	4b41      	ldr	r3, [pc, #260]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000aa4:	483a      	ldr	r0, [pc, #232]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000aa6:	f003 f8e9 	bl	8003c7c <HAL_TIM_PWM_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000ab0:	f000 f9e2 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000abc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4833      	ldr	r0, [pc, #204]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000ac4:	f003 fd6c 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000ace:	f000 f9d3 	bl	8000e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad2:	2360      	movs	r3, #96	; 0x60
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	4826      	ldr	r0, [pc, #152]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000af8:	f003 fa1e 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000b02:	f000 f9b9 	bl	8000e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4820      	ldr	r0, [pc, #128]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000b10:	f003 fa12 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8000b1a:	f000 f9ad 	bl	8000e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	2208      	movs	r2, #8
 8000b24:	4619      	mov	r1, r3
 8000b26:	481a      	ldr	r0, [pc, #104]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000b28:	f003 fa06 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8000b32:	f000 f9a1 	bl	8000e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4814      	ldr	r0, [pc, #80]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000b40:	f003 f9fa 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000b4a:	f000 f995 	bl	8000e78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000b72:	f003 fd91 	bl	8004698 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8000b7c:	f000 f97c 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_TIM8_Init+0x148>)
 8000b82:	f000 fa8f 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000b86:	bf00      	nop
 8000b88:	3748      	adds	r7, #72	; 0x48
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000420 	.word	0x20000420
 8000b94:	40010400 	.word	0x40010400

08000b98 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_TIM9_Init+0x84>)
 8000bb2:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <MX_TIM9_Init+0x88>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_TIM9_Init+0x84>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_TIM9_Init+0x84>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_TIM9_Init+0x84>)
 8000bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_TIM9_Init+0x84>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_TIM9_Init+0x84>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <MX_TIM9_Init+0x84>)
 8000bd8:	f003 f850 	bl	8003c7c <HAL_TIM_PWM_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000be2:	f000 f949 	bl	8000e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be6:	2360      	movs	r3, #96	; 0x60
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4807      	ldr	r0, [pc, #28]	; (8000c1c <MX_TIM9_Init+0x84>)
 8000bfe:	f003 f99b 	bl	8003f38 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000c08:	f000 f936 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <MX_TIM9_Init+0x84>)
 8000c0e:	f000 fa49 	bl	80010a4 <HAL_TIM_MspPostInit>

}
 8000c12:	bf00      	nop
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000508 	.word	0x20000508
 8000c20:	40014000 	.word	0x40014000

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	; 0x30
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	4b87      	ldr	r3, [pc, #540]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a86      	ldr	r2, [pc, #536]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c44:	f043 0310 	orr.w	r3, r3, #16
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b84      	ldr	r3, [pc, #528]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0310 	and.w	r3, r3, #16
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	4b80      	ldr	r3, [pc, #512]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a7f      	ldr	r2, [pc, #508]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b7d      	ldr	r3, [pc, #500]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b79      	ldr	r3, [pc, #484]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a78      	ldr	r2, [pc, #480]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b76      	ldr	r3, [pc, #472]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b72      	ldr	r3, [pc, #456]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a71      	ldr	r2, [pc, #452]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b6f      	ldr	r3, [pc, #444]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b6b      	ldr	r3, [pc, #428]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a6a      	ldr	r2, [pc, #424]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b68      	ldr	r3, [pc, #416]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b64      	ldr	r3, [pc, #400]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a63      	ldr	r2, [pc, #396]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b61      	ldr	r3, [pc, #388]	; (8000e5c <MX_GPIO_Init+0x238>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|M1_MBL_Pin|M1_MAL_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2158      	movs	r1, #88	; 0x58
 8000ce6:	485e      	ldr	r0, [pc, #376]	; (8000e60 <MX_GPIO_Init+0x23c>)
 8000ce8:	f000 fe6e 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M0_MBL_Pin|M2_MAL_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f242 0104 	movw	r1, #8196	; 0x2004
 8000cf2:	485c      	ldr	r0, [pc, #368]	; (8000e64 <MX_GPIO_Init+0x240>)
 8000cf4:	f000 fe68 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4859      	ldr	r0, [pc, #356]	; (8000e64 <MX_GPIO_Init+0x240>)
 8000cfe:	f000 fe63 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f641 0102 	movw	r1, #6146	; 0x1802
 8000d08:	4857      	ldr	r0, [pc, #348]	; (8000e68 <MX_GPIO_Init+0x244>)
 8000d0a:	f000 fe5d 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f24f 0190 	movw	r1, #61584	; 0xf090
 8000d14:	4855      	ldr	r0, [pc, #340]	; (8000e6c <MX_GPIO_Init+0x248>)
 8000d16:	f000 fe57 	bl	80019c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|M0_MAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin M1_MBL_Pin M1_MAL_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|M1_MBL_Pin|M1_MAL_Pin;
 8000d1a:	2358      	movs	r3, #88	; 0x58
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	484b      	ldr	r0, [pc, #300]	; (8000e60 <MX_GPIO_Init+0x23c>)
 8000d32:	f000 fcad 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_MBL_Pin OTG_FS_PowerSwitchOn_Pin M2_MAL_Pin */
  GPIO_InitStruct.Pin = M0_MBL_Pin|OTG_FS_PowerSwitchOn_Pin|M2_MAL_Pin;
 8000d36:	f242 0305 	movw	r3, #8197	; 0x2005
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4845      	ldr	r0, [pc, #276]	; (8000e64 <MX_GPIO_Init+0x240>)
 8000d50:	f000 fc9e 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d54:	2308      	movs	r3, #8
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d64:	2305      	movs	r3, #5
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	483d      	ldr	r0, [pc, #244]	; (8000e64 <MX_GPIO_Init+0x240>)
 8000d70:	f000 fc8e 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d74:	2301      	movs	r3, #1
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d78:	4b3d      	ldr	r3, [pc, #244]	; (8000e70 <MX_GPIO_Init+0x24c>)
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	483b      	ldr	r0, [pc, #236]	; (8000e74 <MX_GPIO_Init+0x250>)
 8000d88:	f000 fc82 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d8c:	23e0      	movs	r3, #224	; 0xe0
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4833      	ldr	r0, [pc, #204]	; (8000e74 <MX_GPIO_Init+0x250>)
 8000da8:	f000 fc72 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_MBL_Pin M3_MBL_Pin M3_MAL_Pin */
  GPIO_InitStruct.Pin = M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin;
 8000dac:	f641 0302 	movw	r3, #6146	; 0x1802
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <MX_GPIO_Init+0x244>)
 8000dc6:	f000 fc63 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <MX_GPIO_Init+0x244>)
 8000dde:	f000 fc57 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df4:	2305      	movs	r3, #5
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	481a      	ldr	r0, [pc, #104]	; (8000e68 <MX_GPIO_Init+0x244>)
 8000e00:	f000 fc46 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin M0_MAL_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e04:	f24f 0390 	movw	r3, #61584	; 0xf090
 8000e08:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|M0_MAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4813      	ldr	r0, [pc, #76]	; (8000e6c <MX_GPIO_Init+0x248>)
 8000e1e:	f000 fc37 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e22:	2320      	movs	r3, #32
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_GPIO_Init+0x248>)
 8000e36:	f000 fc2b 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_GPIO_Init+0x24c>)
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_GPIO_Init+0x23c>)
 8000e4e:	f000 fc1f 	bl	8001690 <HAL_GPIO_Init>

}
 8000e52:	bf00      	nop
 8000e54:	3730      	adds	r7, #48	; 0x30
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40020800 	.word	0x40020800
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	10120000 	.word	0x10120000
 8000e74:	40020000 	.word	0x40020000

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec6:	2007      	movs	r0, #7
 8000ec8:	f000 fb7e 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_I2C_MspInit+0x84>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12c      	bne.n	8000f54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1c:	2312      	movs	r3, #18
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	480c      	ldr	r0, [pc, #48]	; (8000f64 <HAL_I2C_MspInit+0x8c>)
 8000f34:	f000 fbac 	bl	8001690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_I2C_MspInit+0x88>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020400 	.word	0x40020400

08000f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <HAL_SPI_MspInit+0x94>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d134      	bne.n	8000ff4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_SPI_MspInit+0x98>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <HAL_SPI_MspInit+0x98>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_SPI_MspInit+0x98>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_SPI_MspInit+0x98>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a14      	ldr	r2, [pc, #80]	; (8001000 <HAL_SPI_MspInit+0x98>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_SPI_MspInit+0x98>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fc2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <HAL_SPI_MspInit+0x9c>)
 8000fe0:	f000 fb56 	bl	8001690 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2024      	movs	r0, #36	; 0x24
 8000fea:	f000 faf8 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000fee:	2024      	movs	r0, #36	; 0x24
 8000ff0:	f000 fb11 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40003800 	.word	0x40003800
 8001000:	40023800 	.word	0x40023800
 8001004:	40020400 	.word	0x40020400

08001008 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <HAL_TIM_PWM_MspInit+0x8c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10e      	bne.n	8001038 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001036:	e026      	b.n	8001086 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_TIM_PWM_MspInit+0x94>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10e      	bne.n	8001060 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
}
 800105e:	e012      	b.n	8001086 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM9)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_TIM_PWM_MspInit+0x98>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10d      	bne.n	8001086 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_TIM_PWM_MspInit+0x90>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
}
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40010000 	.word	0x40010000
 8001098:	40023800 	.word	0x40023800
 800109c:	40010400 	.word	0x40010400
 80010a0:	40014000 	.word	0x40014000

080010a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a46      	ldr	r2, [pc, #280]	; (80011dc <HAL_TIM_MspPostInit+0x138>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d13e      	bne.n	8001144 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a44      	ldr	r2, [pc, #272]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b42      	ldr	r3, [pc, #264]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a3d      	ldr	r2, [pc, #244]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M2_MBH_Pin|M3_MBH_Pin|M3_MAH_Pin;
 80010fe:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001110:	2301      	movs	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4832      	ldr	r0, [pc, #200]	; (80011e4 <HAL_TIM_MspPostInit+0x140>)
 800111c:	f000 fab8 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1__MAH_Pin;
 8001120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001132:	2301      	movs	r3, #1
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1__MAH_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	482a      	ldr	r0, [pc, #168]	; (80011e8 <HAL_TIM_MspPostInit+0x144>)
 800113e:	f000 faa7 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001142:	e047      	b.n	80011d4 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM8)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a28      	ldr	r2, [pc, #160]	; (80011ec <HAL_TIM_MspPostInit+0x148>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d11f      	bne.n	800118e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M2_MAH_Pin|M0_MBH_Pin|M1_MBH_Pin|M0_MAH_Pin;
 800116a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800117c:	2303      	movs	r3, #3
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <HAL_TIM_MspPostInit+0x14c>)
 8001188:	f000 fa82 	bl	8001690 <HAL_GPIO_Init>
}
 800118c:	e022      	b.n	80011d4 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM9)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <HAL_TIM_MspPostInit+0x150>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d11d      	bne.n	80011d4 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_TIM_MspPostInit+0x13c>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAH_Pin;
 80011b4:	2320      	movs	r3, #32
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80011c4:	2303      	movs	r3, #3
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAH_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <HAL_TIM_MspPostInit+0x140>)
 80011d0:	f000 fa5e 	bl	8001690 <HAL_GPIO_Init>
}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	; 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40010400 	.word	0x40010400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40014000 	.word	0x40014000

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <MemManage_Handler+0x4>

08001212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <UsageFault_Handler+0x4>

0800121e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124c:	f000 f8a8 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <SPI2_IRQHandler+0x10>)
 800125a:	f002 fb81 	bl	8003960 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200003c8 	.word	0x200003c8

08001268 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <OTG_FS_IRQHandler+0x10>)
 800126e:	f000 fe59 	bl	8001f24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20001a24 	.word	0x20001a24

0800127c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <SystemInit+0x28>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <SystemInit+0x28>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SystemInit+0x28>)
 8001292:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001296:	609a      	str	r2, [r3, #8]
#endif
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <Reset_Handler>:
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e0 <LoopFillZerobss+0x14>
 80012ac:	2100      	movs	r1, #0
 80012ae:	e003      	b.n	80012b8 <LoopCopyDataInit>

080012b0 <CopyDataInit>:
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <LoopFillZerobss+0x18>)
 80012b2:	585b      	ldr	r3, [r3, r1]
 80012b4:	5043      	str	r3, [r0, r1]
 80012b6:	3104      	adds	r1, #4

080012b8 <LoopCopyDataInit>:
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <LoopFillZerobss+0x1c>)
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <LoopFillZerobss+0x20>)
 80012bc:	1842      	adds	r2, r0, r1
 80012be:	429a      	cmp	r2, r3
 80012c0:	d3f6      	bcc.n	80012b0 <CopyDataInit>
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <LoopFillZerobss+0x24>)
 80012c4:	e002      	b.n	80012cc <LoopFillZerobss>

080012c6 <FillZerobss>:
 80012c6:	2300      	movs	r3, #0
 80012c8:	f842 3b04 	str.w	r3, [r2], #4

080012cc <LoopFillZerobss>:
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <LoopFillZerobss+0x28>)
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3f9      	bcc.n	80012c6 <FillZerobss>
 80012d2:	f7ff ffd3 	bl	800127c <SystemInit>
 80012d6:	f006 ff13 	bl	8008100 <__libc_init_array>
 80012da:	f7ff f9a1 	bl	8000620 <main>
 80012de:	4770      	bx	lr
 80012e0:	20020000 	.word	0x20020000
 80012e4:	080081e0 	.word	0x080081e0
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000180 	.word	0x20000180
 80012f0:	20000180 	.word	0x20000180
 80012f4:	20001e2c 	.word	0x20001e2c

080012f8 <ADC_IRQHandler>:
 80012f8:	e7fe      	b.n	80012f8 <ADC_IRQHandler>
	...

080012fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <HAL_Init+0x40>)
 8001306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_Init+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_Init+0x40>)
 8001312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_Init+0x40>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 f94f 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132a:	2000      	movs	r0, #0
 800132c:	f000 f808 	bl	8001340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001330:	f7ff fdaa 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023c00 	.word	0x40023c00

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x54>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x58>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	fbb3 f3f1 	udiv	r3, r3, r1
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f967 	bl	8001632 <HAL_SYSTICK_Config>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00e      	b.n	800138c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	d80a      	bhi.n	800138a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001374:	2200      	movs	r2, #0
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f000 f92f 	bl	80015de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_InitTick+0x5c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000000 	.word	0x20000000
 8001398:	20000008 	.word	0x20000008
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x20>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_IncTick+0x24>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_IncTick+0x24>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000550 	.word	0x20000550

080013c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return uwTick;
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_GetTick+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000550 	.word	0x20000550

080013e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e8:	f7ff ffee 	bl	80013c8 <HAL_GetTick>
 80013ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f8:	d005      	beq.n	8001406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_Delay+0x44>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001406:	bf00      	nop
 8001408:	f7ff ffde 	bl	80013c8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d8f7      	bhi.n	8001408 <HAL_Delay+0x28>
  {
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4907      	ldr	r1, [pc, #28]	; (80014c4 <__NVIC_EnableIRQ+0x38>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff29 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff3e 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff8e 	bl	800151c <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff31 	bl	800148c <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa2 	bl	8001584 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d004      	beq.n	8001668 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e00c      	b.n	8001682 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2205      	movs	r2, #5
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0201 	bic.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e16b      	b.n	8001984 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 815a 	bne.w	800197e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d005      	beq.n	80016e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d130      	bne.n	8001744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 0201 	and.w	r2, r3, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b03      	cmp	r3, #3
 800174e:	d017      	beq.n	8001780 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80b4 	beq.w	800197e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b60      	ldr	r3, [pc, #384]	; (800199c <HAL_GPIO_Init+0x30c>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a5f      	ldr	r2, [pc, #380]	; (800199c <HAL_GPIO_Init+0x30c>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_GPIO_Init+0x30c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001832:	4a5b      	ldr	r2, [pc, #364]	; (80019a0 <HAL_GPIO_Init+0x310>)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	3302      	adds	r3, #2
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_GPIO_Init+0x314>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d02b      	beq.n	80018b6 <HAL_GPIO_Init+0x226>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a51      	ldr	r2, [pc, #324]	; (80019a8 <HAL_GPIO_Init+0x318>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d025      	beq.n	80018b2 <HAL_GPIO_Init+0x222>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a50      	ldr	r2, [pc, #320]	; (80019ac <HAL_GPIO_Init+0x31c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01f      	beq.n	80018ae <HAL_GPIO_Init+0x21e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_GPIO_Init+0x320>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d019      	beq.n	80018aa <HAL_GPIO_Init+0x21a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4e      	ldr	r2, [pc, #312]	; (80019b4 <HAL_GPIO_Init+0x324>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0x216>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4d      	ldr	r2, [pc, #308]	; (80019b8 <HAL_GPIO_Init+0x328>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00d      	beq.n	80018a2 <HAL_GPIO_Init+0x212>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_GPIO_Init+0x32c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <HAL_GPIO_Init+0x20e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_GPIO_Init+0x330>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_GPIO_Init+0x20a>
 8001896:	2307      	movs	r3, #7
 8001898:	e00e      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 800189a:	2308      	movs	r3, #8
 800189c:	e00c      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 800189e:	2306      	movs	r3, #6
 80018a0:	e00a      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018a2:	2305      	movs	r3, #5
 80018a4:	e008      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x228>
 80018b6:	2300      	movs	r3, #0
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f002 0203 	and.w	r2, r2, #3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4093      	lsls	r3, r2
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c8:	4935      	ldr	r1, [pc, #212]	; (80019a0 <HAL_GPIO_Init+0x310>)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_GPIO_Init+0x334>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018fa:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <HAL_GPIO_Init+0x334>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_GPIO_Init+0x334>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <HAL_GPIO_Init+0x334>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_GPIO_Init+0x334>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_GPIO_Init+0x334>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_GPIO_Init+0x334>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_GPIO_Init+0x334>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	f67f ae90 	bls.w	80016ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40021400 	.word	0x40021400
 80019bc:	40021800 	.word	0x40021800
 80019c0:	40021c00 	.word	0x40021c00
 80019c4:	40013c00 	.word	0x40013c00

080019c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e4:	e003      	b.n	80019ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	041a      	lsls	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	619a      	str	r2, [r3, #24]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e12b      	b.n	8001c66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fa58 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2224      	movs	r2, #36	; 0x24
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a60:	f001 fee0 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8001a64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a81      	ldr	r2, [pc, #516]	; (8001c70 <HAL_I2C_Init+0x274>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d807      	bhi.n	8001a80 <HAL_I2C_Init+0x84>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4a80      	ldr	r2, [pc, #512]	; (8001c74 <HAL_I2C_Init+0x278>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	bf94      	ite	ls
 8001a78:	2301      	movls	r3, #1
 8001a7a:	2300      	movhi	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	e006      	b.n	8001a8e <HAL_I2C_Init+0x92>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a7d      	ldr	r2, [pc, #500]	; (8001c78 <HAL_I2C_Init+0x27c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	bf94      	ite	ls
 8001a88:	2301      	movls	r3, #1
 8001a8a:	2300      	movhi	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0e7      	b.n	8001c66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4a78      	ldr	r2, [pc, #480]	; (8001c7c <HAL_I2C_Init+0x280>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0c9b      	lsrs	r3, r3, #18
 8001aa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_I2C_Init+0x274>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d802      	bhi.n	8001ad0 <HAL_I2C_Init+0xd4>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3301      	adds	r3, #1
 8001ace:	e009      	b.n	8001ae4 <HAL_I2C_Init+0xe8>
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	4a69      	ldr	r2, [pc, #420]	; (8001c80 <HAL_I2C_Init+0x284>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	099b      	lsrs	r3, r3, #6
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001af6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	495c      	ldr	r1, [pc, #368]	; (8001c70 <HAL_I2C_Init+0x274>)
 8001b00:	428b      	cmp	r3, r1
 8001b02:	d819      	bhi.n	8001b38 <HAL_I2C_Init+0x13c>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1e59      	subs	r1, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b12:	1c59      	adds	r1, r3, #1
 8001b14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b18:	400b      	ands	r3, r1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00a      	beq.n	8001b34 <HAL_I2C_Init+0x138>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1e59      	subs	r1, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b32:	e051      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001b34:	2304      	movs	r3, #4
 8001b36:	e04f      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d111      	bne.n	8001b64 <HAL_I2C_Init+0x168>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	440b      	add	r3, r1
 8001b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	e012      	b.n	8001b8a <HAL_I2C_Init+0x18e>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	0099      	lsls	r1, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Init+0x196>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e022      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10e      	bne.n	8001bb8 <HAL_I2C_Init+0x1bc>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1e58      	subs	r0, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	440b      	add	r3, r1
 8001ba8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bac:	3301      	adds	r3, #1
 8001bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb6:	e00f      	b.n	8001bd8 <HAL_I2C_Init+0x1dc>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e58      	subs	r0, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	0099      	lsls	r1, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	6809      	ldr	r1, [r1, #0]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69da      	ldr	r2, [r3, #28]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6911      	ldr	r1, [r2, #16]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68d2      	ldr	r2, [r2, #12]
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	000186a0 	.word	0x000186a0
 8001c74:	001e847f 	.word	0x001e847f
 8001c78:	003d08ff 	.word	0x003d08ff
 8001c7c:	431bde83 	.word	0x431bde83
 8001c80:	10624dd3 	.word	0x10624dd3

08001c84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b08f      	sub	sp, #60	; 0x3c
 8001c88:	af0a      	add	r7, sp, #40	; 0x28
 8001c8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e10f      	b.n	8001eb6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f005 ff03 	bl	8007abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fe46 	bl	8004966 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	687e      	ldr	r6, [r7, #4]
 8001ce2:	466d      	mov	r5, sp
 8001ce4:	f106 0410 	add.w	r4, r6, #16
 8001ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cf8:	1d33      	adds	r3, r6, #4
 8001cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f002 fd1d 	bl	800473c <USB_CoreInit>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d0      	b.n	8001eb6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 fe34 	bl	8004988 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e04a      	b.n	8001dbc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	333d      	adds	r3, #61	; 0x3d
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	333c      	adds	r3, #60	; 0x3c
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	b298      	uxth	r0, r3
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3342      	adds	r3, #66	; 0x42
 8001d62:	4602      	mov	r2, r0
 8001d64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	333f      	adds	r3, #63	; 0x3f
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	3344      	adds	r3, #68	; 0x44
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3348      	adds	r3, #72	; 0x48
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3350      	adds	r3, #80	; 0x50
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	3301      	adds	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3af      	bcc.n	8001d26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	e044      	b.n	8001e56 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	3301      	adds	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d3b5      	bcc.n	8001dcc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	687e      	ldr	r6, [r7, #4]
 8001e68:	466d      	mov	r5, sp
 8001e6a:	f106 0410 	add.w	r4, r6, #16
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e7e:	1d33      	adds	r3, r6, #4
 8001e80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f002 fdaa 	bl	80049dc <USB_DevInit>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00d      	b.n	8001eb6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fdf2 	bl	8005a98 <USB_DevDisconnect>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ebe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_PCD_Start+0x1c>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e020      	b.n	8001f1c <HAL_PCD_Start+0x5e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d109      	bne.n	8001efe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d005      	beq.n	8001efe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 fd1e 	bl	8004944 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fda2 	bl	8005a56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b08d      	sub	sp, #52	; 0x34
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fe60 	bl	8005c00 <USB_GetMode>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 839d 	bne.w	8002682 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fdc4 	bl	8005ada <USB_ReadInterrupts>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8393 	beq.w	8002680 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fdbb 	bl	8005ada <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d107      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f002 0202 	and.w	r2, r2, #2
 8001f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fda9 	bl	8005ada <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d161      	bne.n	8002056 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0210 	bic.w	r2, r2, #16
 8001fa0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	0c5b      	lsrs	r3, r3, #17
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d124      	bne.n	8002018 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d035      	beq.n	8002046 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6a38      	ldr	r0, [r7, #32]
 8001fee:	f003 fc0f 	bl	8005810 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffe:	441a      	add	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002010:	441a      	add	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	619a      	str	r2, [r3, #24]
 8002016:	e016      	b.n	8002046 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	0c5b      	lsrs	r3, r3, #17
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	2b06      	cmp	r3, #6
 8002022:	d110      	bne.n	8002046 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800202a:	2208      	movs	r2, #8
 800202c:	4619      	mov	r1, r3
 800202e:	6a38      	ldr	r0, [r7, #32]
 8002030:	f003 fbee 	bl	8005810 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002040:	441a      	add	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0210 	orr.w	r2, r2, #16
 8002054:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f003 fd3d 	bl	8005ada <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002066:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800206a:	d16e      	bne.n	800214a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f003 fd43 	bl	8005b00 <USB_ReadDevAllOutEpInterrupt>
 800207a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800207c:	e062      	b.n	8002144 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d057      	beq.n	8002138 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fd68 	bl	8005b68 <USB_ReadDevOutEPInterrupt>
 8002098:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b0:	461a      	mov	r2, r3
 80020b2:	2301      	movs	r3, #1
 80020b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fdb1 	bl	8002c20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d4:	461a      	mov	r2, r3
 80020d6:	2308      	movs	r3, #8
 80020d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 feab 	bl	8002e38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	2310      	movs	r3, #16
 80020fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002114:	461a      	mov	r2, r3
 8002116:	2320      	movs	r3, #32
 8002118:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	4413      	add	r3, r2
 800212c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002130:	461a      	mov	r2, r3
 8002132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002136:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	3301      	adds	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	2b00      	cmp	r3, #0
 8002148:	d199      	bne.n	800207e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fcc3 	bl	8005ada <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800215e:	f040 80c0 	bne.w	80022e2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fce4 	bl	8005b34 <USB_ReadDevAllInEpInterrupt>
 800216c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002172:	e0b2      	b.n	80022da <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80a7 	beq.w	80022ce <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fd0a 	bl	8005ba4 <USB_ReadDevInEPInterrupt>
 8002190:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d057      	beq.n	800224c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	2201      	movs	r2, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69f9      	ldr	r1, [r7, #28]
 80021b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021bc:	4013      	ands	r3, r2
 80021be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021cc:	461a      	mov	r2, r3
 80021ce:	2301      	movs	r3, #1
 80021d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d132      	bne.n	8002240 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	3348      	adds	r3, #72	; 0x48
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4403      	add	r3, r0
 80021fa:	3344      	adds	r3, #68	; 0x44
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4419      	add	r1, r3
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4403      	add	r3, r0
 800220e:	3348      	adds	r3, #72	; 0x48
 8002210:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	2b00      	cmp	r3, #0
 8002216:	d113      	bne.n	8002240 <HAL_PCD_IRQHandler+0x31c>
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	3350      	adds	r3, #80	; 0x50
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d108      	bne.n	8002240 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002238:	461a      	mov	r2, r3
 800223a:	2101      	movs	r1, #1
 800223c:	f003 fd12 	bl	8005c64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	b2db      	uxtb	r3, r3
 8002244:	4619      	mov	r1, r3
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f005 fcc7 	bl	8007bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002262:	461a      	mov	r2, r3
 8002264:	2308      	movs	r3, #8
 8002266:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227e:	461a      	mov	r2, r3
 8002280:	2310      	movs	r3, #16
 8002282:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229a:	461a      	mov	r2, r3
 800229c:	2340      	movs	r3, #64	; 0x40
 800229e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b6:	461a      	mov	r2, r3
 80022b8:	2302      	movs	r3, #2
 80022ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fc1b 	bl	8002b04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	3301      	adds	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f af49 	bne.w	8002174 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 fbf7 	bl	8005ada <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022f6:	d122      	bne.n	800233e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002312:	2b01      	cmp	r3, #1
 8002314:	d108      	bne.n	8002328 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800231e:	2100      	movs	r1, #0
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fe27 	bl	8002f74 <HAL_PCDEx_LPM_Callback>
 8002326:	e002      	b.n	800232e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f005 fccd 	bl	8007cc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800233c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f003 fbc9 	bl	8005ada <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002352:	d112      	bne.n	800237a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d102      	bne.n	800236a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f005 fc89 	bl	8007c7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002378:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fbab 	bl	8005ada <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238e:	f040 80c7 	bne.w	8002520 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2110      	movs	r1, #16
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 fc79 	bl	8004ca4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b6:	e056      	b.n	8002466 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c4:	461a      	mov	r2, r3
 80023c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023dc:	0151      	lsls	r1, r2, #5
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	440a      	add	r2, r1
 80023e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023ea:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fc:	0151      	lsls	r1, r2, #5
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	440a      	add	r2, r1
 8002402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002406:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800240a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002418:	461a      	mov	r2, r3
 800241a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800241e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002430:	0151      	lsls	r1, r2, #5
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	440a      	add	r2, r1
 8002436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800243a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800243e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002450:	0151      	lsls	r1, r2, #5
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	440a      	add	r2, r1
 8002456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800245a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800245e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	3301      	adds	r3, #1
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246c:	429a      	cmp	r2, r3
 800246e:	d3a3      	bcc.n	80023b8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002482:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	2b00      	cmp	r3, #0
 800248a:	d016      	beq.n	80024ba <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249c:	f043 030b 	orr.w	r3, r3, #11
 80024a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b2:	f043 030b 	orr.w	r3, r3, #11
 80024b6:	6453      	str	r3, [r2, #68]	; 0x44
 80024b8:	e015      	b.n	80024e6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024cc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e0:	f043 030b 	orr.w	r3, r3, #11
 80024e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800250a:	461a      	mov	r2, r3
 800250c:	f003 fbaa 	bl	8005c64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800251e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 fad8 	bl	8005ada <USB_ReadInterrupts>
 800252a:	4603      	mov	r3, r0
 800252c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002534:	d124      	bne.n	8002580 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fb6e 	bl	8005c1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f002 fc0e 	bl	8004d66 <USB_GetDevSpeed>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681c      	ldr	r4, [r3, #0]
 8002556:	f001 f959 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800255a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	4620      	mov	r0, r4
 8002566:	f002 f94b 	bl	8004800 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f005 fb5d 	bl	8007c2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800257e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f003 faa8 	bl	8005ada <USB_ReadInterrupts>
 800258a:	4603      	mov	r3, r0
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	d10a      	bne.n	80025aa <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f005 fb3a 	bl	8007c0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f002 0208 	and.w	r2, r2, #8
 80025a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fa93 	bl	8005ada <USB_ReadInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025be:	d10f      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f005 fb9c 	bl	8007d08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fa78 	bl	8005ada <USB_ReadInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025f4:	d10f      	bne.n	8002616 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f005 fb6f 	bl	8007ce4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 fa5d 	bl	8005ada <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d10a      	bne.n	8002642 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f005 fb7d 	bl	8007d2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fa47 	bl	8005ada <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b04      	cmp	r3, #4
 8002654:	d115      	bne.n	8002682 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f005 fb6d 	bl	8007d48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	e000      	b.n	8002682 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002680:	bf00      	nop
    }
  }
}
 8002682:	3734      	adds	r7, #52	; 0x34
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}

08002688 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_PCD_SetAddress+0x1a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e013      	b.n	80026ca <HAL_PCD_SetAddress+0x42>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 f9a5 	bl	8005a0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	4608      	mov	r0, r1
 80026dc:	4611      	mov	r1, r2
 80026de:	461a      	mov	r2, r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	70fb      	strb	r3, [r7, #3]
 80026e4:	460b      	mov	r3, r1
 80026e6:	803b      	strh	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	da0f      	bge.n	8002718 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 020f 	and.w	r2, r3, #15
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	3338      	adds	r3, #56	; 0x38
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	3304      	adds	r3, #4
 800270e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	705a      	strb	r2, [r3, #1]
 8002716:	e00f      	b.n	8002738 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 020f 	and.w	r2, r3, #15
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	3304      	adds	r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002744:	883a      	ldrh	r2, [r7, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	78ba      	ldrb	r2, [r7, #2]
 800274e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002762:	78bb      	ldrb	r3, [r7, #2]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d102      	bne.n	800276e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_PCD_EP_Open+0xaa>
 8002778:	2302      	movs	r3, #2
 800277a:	e00e      	b.n	800279a <HAL_PCD_EP_Open+0xc8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68f9      	ldr	r1, [r7, #12]
 800278a:	4618      	mov	r0, r3
 800278c:	f002 fb10 	bl	8004db0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002798:	7afb      	ldrb	r3, [r7, #11]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da0f      	bge.n	80027d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	f003 020f 	and.w	r2, r3, #15
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	3338      	adds	r3, #56	; 0x38
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	705a      	strb	r2, [r3, #1]
 80027d4:	e00f      	b.n	80027f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	3304      	adds	r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_PCD_EP_Close+0x6e>
 800280c:	2302      	movs	r3, #2
 800280e:	e00e      	b.n	800282e <HAL_PCD_EP_Close+0x8c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	4618      	mov	r0, r3
 8002820:	f002 fb4e 	bl	8004ec0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	460b      	mov	r3, r1
 8002844:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002846:	7afb      	ldrb	r3, [r7, #11]
 8002848:	f003 020f 	and.w	r2, r3, #15
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	3304      	adds	r3, #4
 800285e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002878:	7afb      	ldrb	r3, [r7, #11]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	b2da      	uxtb	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d102      	bne.n	8002892 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	6979      	ldr	r1, [r7, #20]
 80028aa:	f002 fe29 	bl	8005500 <USB_EP0StartXfer>
 80028ae:	e008      	b.n	80028c2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	6979      	ldr	r1, [r7, #20]
 80028be:	f002 fbdb 	bl	8005078 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 020f 	and.w	r2, r3, #15
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	460b      	mov	r3, r1
 800290a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	3338      	adds	r3, #56	; 0x38
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	3304      	adds	r3, #4
 8002922:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2201      	movs	r2, #1
 800293a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800293c:	7afb      	ldrb	r3, [r7, #11]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	b2da      	uxtb	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d102      	bne.n	8002956 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002956:	7afb      	ldrb	r3, [r7, #11]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	f002 fdc7 	bl	8005500 <USB_EP0StartXfer>
 8002972:	e008      	b.n	8002986 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	6979      	ldr	r1, [r7, #20]
 8002982:	f002 fb79 	bl	8005078 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	f003 020f 	and.w	r2, r3, #15
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d901      	bls.n	80029ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e050      	b.n	8002a50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da0f      	bge.n	80029d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 020f 	and.w	r2, r3, #15
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3338      	adds	r3, #56	; 0x38
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	705a      	strb	r2, [r3, #1]
 80029d4:	e00d      	b.n	80029f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_PCD_EP_SetStall+0x82>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e01e      	b.n	8002a50 <HAL_PCD_EP_SetStall+0xc0>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 ff1e 	bl	8005862 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	b2d9      	uxtb	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a40:	461a      	mov	r2, r3
 8002a42:	f003 f90f 	bl	8005c64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d901      	bls.n	8002a76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e042      	b.n	8002afc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0f      	bge.n	8002a9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3338      	adds	r3, #56	; 0x38
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	705a      	strb	r2, [r3, #1]
 8002a9c:	e00f      	b.n	8002abe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_PCD_EP_ClrStall+0x86>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e00e      	b.n	8002afc <HAL_PCD_EP_ClrStall+0xa4>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68f9      	ldr	r1, [r7, #12]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f002 ff26 	bl	800593e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	3338      	adds	r3, #56	; 0x38
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	699a      	ldr	r2, [r3, #24]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d901      	bls.n	8002b3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e06c      	b.n	8002c16 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d902      	bls.n	8002b58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3303      	adds	r3, #3
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b60:	e02b      	b.n	8002bba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d902      	bls.n	8002b7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3303      	adds	r3, #3
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	68d9      	ldr	r1, [r3, #12]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	f002 fe02 	bl	80057a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	441a      	add	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	441a      	add	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d809      	bhi.n	8002be4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d203      	bcs.n	8002be4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1be      	bne.n	8002b62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d811      	bhi.n	8002c14 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	6939      	ldr	r1, [r7, #16]
 8002c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c10:	4013      	ands	r3, r2
 8002c12:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	333c      	adds	r3, #60	; 0x3c
 8002c38:	3304      	adds	r3, #4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	f040 80a0 	bne.w	8002d98 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d015      	beq.n	8002c8e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a72      	ldr	r2, [pc, #456]	; (8002e30 <PCD_EP_OutXfrComplete_int+0x210>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	f240 80dd 	bls.w	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80d7 	beq.w	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c84:	461a      	mov	r2, r3
 8002c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8a:	6093      	str	r3, [r2, #8]
 8002c8c:	e0cb      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	6093      	str	r3, [r2, #8]
 8002caa:	e0bc      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 80b7 	bne.w	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a5d      	ldr	r2, [pc, #372]	; (8002e30 <PCD_EP_OutXfrComplete_int+0x210>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d90f      	bls.n	8002ce0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cdc:	6093      	str	r3, [r2, #8]
 8002cde:	e0a2      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cf2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	0159      	lsls	r1, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d06:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4403      	add	r3, r0
 8002d16:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d1a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4403      	add	r3, r0
 8002d3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4419      	add	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4403      	add	r3, r0
 8002d54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d58:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d114      	bne.n	8002d8a <PCD_EP_OutXfrComplete_int+0x16a>
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d82:	461a      	mov	r2, r3
 8002d84:	2101      	movs	r1, #1
 8002d86:	f002 ff6d 	bl	8005c64 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f004 ff07 	bl	8007ba4 <HAL_PCD_DataOutStageCallback>
 8002d96:	e046      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <PCD_EP_OutXfrComplete_int+0x214>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d124      	bne.n	8002dea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	461a      	mov	r2, r3
 8002db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dbc:	6093      	str	r3, [r2, #8]
 8002dbe:	e032      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2320      	movs	r3, #32
 8002dda:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f004 fede 	bl	8007ba4 <HAL_PCD_DataOutStageCallback>
 8002de8:	e01d      	b.n	8002e26 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d114      	bne.n	8002e1a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d108      	bne.n	8002e1a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e12:	461a      	mov	r2, r3
 8002e14:	2100      	movs	r1, #0
 8002e16:	f002 ff25 	bl	8005c64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f004 febf 	bl	8007ba4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	4f54300a 	.word	0x4f54300a
 8002e34:	4f54310a 	.word	0x4f54310a

08002e38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	333c      	adds	r3, #60	; 0x3c
 8002e50:	3304      	adds	r3, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d90e      	bls.n	8002e8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e84:	461a      	mov	r2, r3
 8002e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f004 fe77 	bl	8007b80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d90c      	bls.n	8002eb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d108      	bne.n	8002eb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eac:	461a      	mov	r2, r3
 8002eae:	2101      	movs	r1, #1
 8002eb0:	f002 fed8 	bl	8005c64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	4f54300a 	.word	0x4f54300a

08002ec4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ee2:	883b      	ldrh	r3, [r7, #0]
 8002ee4:	0419      	lsls	r1, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
 8002ef0:	e028      	b.n	8002f44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	4413      	add	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e00d      	b.n	8002f22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3340      	adds	r3, #64	; 0x40
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	4413      	add	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3ec      	bcc.n	8002f06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f2c:	883b      	ldrh	r3, [r7, #0]
 8002f2e:	0418      	lsls	r0, r3, #16
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	4302      	orrs	r2, r0
 8002f3c:	3340      	adds	r3, #64	; 0x40
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e264      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d075      	beq.n	8003096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002faa:	4ba3      	ldr	r3, [pc, #652]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4ba0      	ldr	r3, [pc, #640]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d112      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc2:	4b9d      	ldr	r3, [pc, #628]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b99      	ldr	r3, [pc, #612]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05b      	beq.n	8003094 <HAL_RCC_OscConfig+0x108>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d157      	bne.n	8003094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e23f      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x74>
 8002ff2:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a90      	ldr	r2, [pc, #576]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x98>
 800300a:	4b8b      	ldr	r3, [pc, #556]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a8a      	ldr	r2, [pc, #552]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a87      	ldr	r2, [pc, #540]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003024:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a83      	ldr	r2, [pc, #524]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b81      	ldr	r3, [pc, #516]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a80      	ldr	r2, [pc, #512]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe f9c0 	bl	80013c8 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe f9bc 	bl	80013c8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e204      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xc0>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe f9ac 	bl	80013c8 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe f9a8 	bl	80013c8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1f0      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0xe8>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a2:	4b65      	ldr	r3, [pc, #404]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b62      	ldr	r3, [pc, #392]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b5c      	ldr	r3, [pc, #368]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1c4      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b56      	ldr	r3, [pc, #344]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4952      	ldr	r1, [pc, #328]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b4f      	ldr	r3, [pc, #316]	; (800323c <HAL_RCC_OscConfig+0x2b0>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe f961 	bl	80013c8 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe f95d 	bl	80013c8 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1a5      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b46      	ldr	r3, [pc, #280]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b43      	ldr	r3, [pc, #268]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4940      	ldr	r1, [pc, #256]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <HAL_RCC_OscConfig+0x2b0>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe f940 	bl	80013c8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314c:	f7fe f93c 	bl	80013c8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e184      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d030      	beq.n	80031d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_RCC_OscConfig+0x2b4>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe f920 	bl	80013c8 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318c:	f7fe f91c 	bl	80013c8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e164      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x200>
 80031aa:	e015      	b.n	80031d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ac:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_RCC_OscConfig+0x2b4>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fe f909 	bl	80013c8 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe f905 	bl	80013c8 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e14d      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a0 	beq.w	8003326 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10f      	bne.n	8003216 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d121      	bne.n	8003266 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a07      	ldr	r2, [pc, #28]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322e:	f7fe f8cb 	bl	80013c8 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	e011      	b.n	800325a <HAL_RCC_OscConfig+0x2ce>
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	42470000 	.word	0x42470000
 8003240:	42470e80 	.word	0x42470e80
 8003244:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7fe f8be 	bl	80013c8 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e106      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b85      	ldr	r3, [pc, #532]	; (8003470 <HAL_RCC_OscConfig+0x4e4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x2f0>
 800326e:	4b81      	ldr	r3, [pc, #516]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a80      	ldr	r2, [pc, #512]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	e01c      	b.n	80032b6 <HAL_RCC_OscConfig+0x32a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d10c      	bne.n	800329e <HAL_RCC_OscConfig+0x312>
 8003284:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a7a      	ldr	r2, [pc, #488]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	4b78      	ldr	r3, [pc, #480]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a77      	ldr	r2, [pc, #476]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e00b      	b.n	80032b6 <HAL_RCC_OscConfig+0x32a>
 800329e:	4b75      	ldr	r3, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a74      	ldr	r2, [pc, #464]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b72      	ldr	r3, [pc, #456]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a71      	ldr	r2, [pc, #452]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d015      	beq.n	80032ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe f883 	bl	80013c8 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe f87f 	bl	80013c8 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0c5      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	4b65      	ldr	r3, [pc, #404]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ee      	beq.n	80032c6 <HAL_RCC_OscConfig+0x33a>
 80032e8:	e014      	b.n	8003314 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ea:	f7fe f86d 	bl	80013c8 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe f869 	bl	80013c8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e0af      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	4b5a      	ldr	r3, [pc, #360]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ee      	bne.n	80032f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d105      	bne.n	8003326 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331a:	4b56      	ldr	r3, [pc, #344]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a55      	ldr	r2, [pc, #340]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 809b 	beq.w	8003466 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003330:	4b50      	ldr	r3, [pc, #320]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d05c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d141      	bne.n	80033c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b4c      	ldr	r3, [pc, #304]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe f83d 	bl	80013c8 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003352:	f7fe f839 	bl	80013c8 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e081      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003364:	4b43      	ldr	r3, [pc, #268]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f0      	bne.n	8003352 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	019b      	lsls	r3, r3, #6
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	3b01      	subs	r3, #1
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	4937      	ldr	r1, [pc, #220]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339a:	4b37      	ldr	r3, [pc, #220]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe f812 	bl	80013c8 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe f80e 	bl	80013c8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e056      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b2e      	ldr	r3, [pc, #184]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x41c>
 80033c6:	e04e      	b.n	8003466 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fd fffb 	bl	80013c8 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fd fff7 	bl	80013c8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e03f      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e8:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x44a>
 80033f4:	e037      	b.n	8003466 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e032      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d028      	beq.n	8003462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d121      	bne.n	8003462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d11a      	bne.n	8003462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003432:	4013      	ands	r3, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003438:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	3b01      	subs	r3, #1
 800344c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d107      	bne.n	8003462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40007000 	.word	0x40007000
 8003474:	40023800 	.word	0x40023800
 8003478:	42470060 	.word	0x42470060

0800347c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0cc      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b68      	ldr	r3, [pc, #416]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d90c      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0b8      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	494d      	ldr	r1, [pc, #308]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d044      	beq.n	800359c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d119      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d003      	beq.n	800353a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003536:	2b03      	cmp	r3, #3
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353a:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354a:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e067      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b37      	ldr	r3, [pc, #220]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4934      	ldr	r1, [pc, #208]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800356c:	f7fd ff2c 	bl	80013c8 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fd ff28 	bl	80013c8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e04f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d20c      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e032      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4916      	ldr	r1, [pc, #88]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	490e      	ldr	r1, [pc, #56]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003602:	f000 f821 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003606:	4602      	mov	r2, r0
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	490a      	ldr	r1, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	5ccb      	ldrb	r3, [r1, r3]
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fe8c 	bl	8001340 <HAL_InitTick>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00
 8003638:	40023800 	.word	0x40023800
 800363c:	080081b8 	.word	0x080081b8
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004

08003648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	2300      	movs	r3, #0
 800365a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003660:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b08      	cmp	r3, #8
 800366a:	d00d      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x40>
 800366c:	2b08      	cmp	r3, #8
 800366e:	f200 80bd 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x34>
 8003676:	2b04      	cmp	r3, #4
 8003678:	d003      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x3a>
 800367a:	e0b7      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b61      	ldr	r3, [pc, #388]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800367e:	60bb      	str	r3, [r7, #8]
       break;
 8003680:	e0b7      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003684:	60bb      	str	r3, [r7, #8]
      break;
 8003686:	e0b4      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003688:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003690:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003692:	4b5b      	ldr	r3, [pc, #364]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d04d      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369e:	4b58      	ldr	r3, [pc, #352]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	099b      	lsrs	r3, r3, #6
 80036a4:	461a      	mov	r2, r3
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	ea02 0800 	and.w	r8, r2, r0
 80036b6:	ea03 0901 	and.w	r9, r3, r1
 80036ba:	4640      	mov	r0, r8
 80036bc:	4649      	mov	r1, r9
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	014b      	lsls	r3, r1, #5
 80036c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036cc:	0142      	lsls	r2, r0, #5
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	ebb0 0008 	subs.w	r0, r0, r8
 80036d6:	eb61 0109 	sbc.w	r1, r1, r9
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	018b      	lsls	r3, r1, #6
 80036e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036e8:	0182      	lsls	r2, r0, #6
 80036ea:	1a12      	subs	r2, r2, r0
 80036ec:	eb63 0301 	sbc.w	r3, r3, r1
 80036f0:	f04f 0000 	mov.w	r0, #0
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	00d9      	lsls	r1, r3, #3
 80036fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036fe:	00d0      	lsls	r0, r2, #3
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	eb12 0208 	adds.w	r2, r2, r8
 8003708:	eb43 0309 	adc.w	r3, r3, r9
 800370c:	f04f 0000 	mov.w	r0, #0
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	0259      	lsls	r1, r3, #9
 8003716:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800371a:	0250      	lsls	r0, r2, #9
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	f7fc fd4c 	bl	80001c8 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4613      	mov	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e04a      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	099b      	lsrs	r3, r3, #6
 8003740:	461a      	mov	r2, r3
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	f240 10ff 	movw	r0, #511	; 0x1ff
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	ea02 0400 	and.w	r4, r2, r0
 8003752:	ea03 0501 	and.w	r5, r3, r1
 8003756:	4620      	mov	r0, r4
 8003758:	4629      	mov	r1, r5
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	014b      	lsls	r3, r1, #5
 8003764:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003768:	0142      	lsls	r2, r0, #5
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	1b00      	subs	r0, r0, r4
 8003770:	eb61 0105 	sbc.w	r1, r1, r5
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	018b      	lsls	r3, r1, #6
 800377e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003782:	0182      	lsls	r2, r0, #6
 8003784:	1a12      	subs	r2, r2, r0
 8003786:	eb63 0301 	sbc.w	r3, r3, r1
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	00d9      	lsls	r1, r3, #3
 8003794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003798:	00d0      	lsls	r0, r2, #3
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	1912      	adds	r2, r2, r4
 80037a0:	eb45 0303 	adc.w	r3, r5, r3
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	0299      	lsls	r1, r3, #10
 80037ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037b2:	0290      	lsls	r0, r2, #10
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	461a      	mov	r2, r3
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f7fc fd00 	bl	80001c8 <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4613      	mov	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	60bb      	str	r3, [r7, #8]
      break;
 80037ea:	e002      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037ee:	60bb      	str	r3, [r7, #8]
      break;
 80037f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f2:	68bb      	ldr	r3, [r7, #8]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	00f42400 	.word	0x00f42400
 8003808:	007a1200 	.word	0x007a1200

0800380c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_RCC_GetHCLKFreq+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff0 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	0a9b      	lsrs	r3, r3, #10
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	080081c8 	.word	0x080081c8

0800384c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e07b      	b.n	8003956 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386e:	d009      	beq.n	8003884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	61da      	str	r2, [r3, #28]
 8003876:	e005      	b.n	8003884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fb62 	bl	8000f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	ea42 0103 	orr.w	r1, r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	f003 0104 	and.w	r1, r3, #4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	f003 0210 	and.w	r2, r3, #16
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10f      	bne.n	80039a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
    return;
 80039a2:	e0d7      	b.n	8003b54 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <HAL_SPI_IRQHandler+0x66>
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	09db      	lsrs	r3, r3, #7
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
    return;
 80039c4:	e0c6      	b.n	8003b54 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_SPI_IRQHandler+0x8c>
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	099b      	lsrs	r3, r3, #6
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80b4 	beq.w	8003b54 <HAL_SPI_IRQHandler+0x1f4>
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80ad 	beq.w	8003b54 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d023      	beq.n	8003a4e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d011      	beq.n	8003a36 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	f043 0204 	orr.w	r2, r3, #4
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	e00b      	b.n	8003a4e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	693b      	ldr	r3, [r7, #16]
        return;
 8003a4c:	e082      	b.n	8003b54 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d014      	beq.n	8003a84 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	f043 0201 	orr.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00c      	beq.n	8003aaa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	f043 0208 	orr.w	r2, r3, #8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04f      	beq.n	8003b52 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ac0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <HAL_SPI_IRQHandler+0x17e>
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d034      	beq.n	8003b48 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0203 	bic.w	r2, r2, #3
 8003aec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d011      	beq.n	8003b1a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <HAL_SPI_IRQHandler+0x1fc>)
 8003afc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fda1 	bl	800164a <HAL_DMA_Abort_IT>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d016      	beq.n	8003b50 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b26:	4a0d      	ldr	r2, [pc, #52]	; (8003b5c <HAL_SPI_IRQHandler+0x1fc>)
 8003b28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fd8b 	bl	800164a <HAL_DMA_Abort_IT>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003b46:	e003      	b.n	8003b50 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f809 	bl	8003b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b4e:	e000      	b.n	8003b52 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003b50:	bf00      	nop
    return;
 8003b52:	bf00      	nop
  }
}
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	08003b75 	.word	0x08003b75

08003b60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff ffe6 	bl	8003b60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d001      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e04e      	b.n	8003c52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d022      	beq.n	8003c1c <HAL_TIM_Base_Start_IT+0x80>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bde:	d01d      	beq.n	8003c1c <HAL_TIM_Base_Start_IT+0x80>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d018      	beq.n	8003c1c <HAL_TIM_Base_Start_IT+0x80>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <HAL_TIM_Base_Start_IT+0x80>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <HAL_TIM_Base_Start_IT+0x80>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_TIM_Base_Start_IT+0x80>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_TIM_Base_Start_IT+0x80>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d111      	bne.n	8003c40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b06      	cmp	r3, #6
 8003c2c:	d010      	beq.n	8003c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	e007      	b.n	8003c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40010400 	.word	0x40010400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40001800 	.word	0x40001800

08003c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e041      	b.n	8003d12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fd f9b0 	bl	8001008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 f9fa 	bl	80040b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_TIM_PWM_Start_IT+0x24>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e022      	b.n	8003d86 <HAL_TIM_PWM_Start_IT+0x6a>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d109      	bne.n	8003d5a <HAL_TIM_PWM_Start_IT+0x3e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	e015      	b.n	8003d86 <HAL_TIM_PWM_Start_IT+0x6a>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d109      	bne.n	8003d74 <HAL_TIM_PWM_Start_IT+0x58>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e008      	b.n	8003d86 <HAL_TIM_PWM_Start_IT+0x6a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	bf14      	ite	ne
 8003d80:	2301      	movne	r3, #1
 8003d82:	2300      	moveq	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0c2      	b.n	8003f14 <HAL_TIM_PWM_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_PWM_Start_IT+0x82>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d9c:	e013      	b.n	8003dc6 <HAL_TIM_PWM_Start_IT+0xaa>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d104      	bne.n	8003dae <HAL_TIM_PWM_Start_IT+0x92>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dac:	e00b      	b.n	8003dc6 <HAL_TIM_PWM_Start_IT+0xaa>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_PWM_Start_IT+0xa2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dbc:	e003      	b.n	8003dc6 <HAL_TIM_PWM_Start_IT+0xaa>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b0c      	cmp	r3, #12
 8003dca:	d841      	bhi.n	8003e50 <HAL_TIM_PWM_Start_IT+0x134>
 8003dcc:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <HAL_TIM_PWM_Start_IT+0xb8>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003e09 	.word	0x08003e09
 8003dd8:	08003e51 	.word	0x08003e51
 8003ddc:	08003e51 	.word	0x08003e51
 8003de0:	08003e51 	.word	0x08003e51
 8003de4:	08003e1b 	.word	0x08003e1b
 8003de8:	08003e51 	.word	0x08003e51
 8003dec:	08003e51 	.word	0x08003e51
 8003df0:	08003e51 	.word	0x08003e51
 8003df4:	08003e2d 	.word	0x08003e2d
 8003df8:	08003e51 	.word	0x08003e51
 8003dfc:	08003e51 	.word	0x08003e51
 8003e00:	08003e51 	.word	0x08003e51
 8003e04:	08003e3f 	.word	0x08003e3f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0202 	orr.w	r2, r2, #2
 8003e16:	60da      	str	r2, [r3, #12]
      break;
 8003e18:	e01b      	b.n	8003e52 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0204 	orr.w	r2, r2, #4
 8003e28:	60da      	str	r2, [r3, #12]
      break;
 8003e2a:	e012      	b.n	8003e52 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0208 	orr.w	r2, r2, #8
 8003e3a:	60da      	str	r2, [r3, #12]
      break;
 8003e3c:	e009      	b.n	8003e52 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0210 	orr.w	r2, r2, #16
 8003e4c:	60da      	str	r2, [r3, #12]
      break;
 8003e4e:	e000      	b.n	8003e52 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003e50:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2201      	movs	r2, #1
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fb7a 	bl	8004554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <HAL_TIM_PWM_Start_IT+0x200>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_TIM_PWM_Start_IT+0x158>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2c      	ldr	r2, [pc, #176]	; (8003f20 <HAL_TIM_PWM_Start_IT+0x204>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <HAL_TIM_PWM_Start_IT+0x15c>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_TIM_PWM_Start_IT+0x15e>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_TIM_PWM_Start_IT+0x200>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <HAL_TIM_PWM_Start_IT+0x1c2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d01d      	beq.n	8003ede <HAL_TIM_PWM_Start_IT+0x1c2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <HAL_TIM_PWM_Start_IT+0x208>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_TIM_PWM_Start_IT+0x1c2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <HAL_TIM_PWM_Start_IT+0x20c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_TIM_PWM_Start_IT+0x1c2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1c      	ldr	r2, [pc, #112]	; (8003f2c <HAL_TIM_PWM_Start_IT+0x210>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_TIM_PWM_Start_IT+0x1c2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <HAL_TIM_PWM_Start_IT+0x204>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_TIM_PWM_Start_IT+0x1c2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_TIM_PWM_Start_IT+0x214>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIM_PWM_Start_IT+0x1c2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <HAL_TIM_PWM_Start_IT+0x218>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d111      	bne.n	8003f02 <HAL_TIM_PWM_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b06      	cmp	r3, #6
 8003eee:	d010      	beq.n	8003f12 <HAL_TIM_PWM_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f00:	e007      	b.n	8003f12 <HAL_TIM_PWM_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40010400 	.word	0x40010400
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40001800 	.word	0x40001800

08003f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e0ac      	b.n	80040ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b0c      	cmp	r3, #12
 8003f5e:	f200 809f 	bhi.w	80040a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003f9d 	.word	0x08003f9d
 8003f6c:	080040a1 	.word	0x080040a1
 8003f70:	080040a1 	.word	0x080040a1
 8003f74:	080040a1 	.word	0x080040a1
 8003f78:	08003fdd 	.word	0x08003fdd
 8003f7c:	080040a1 	.word	0x080040a1
 8003f80:	080040a1 	.word	0x080040a1
 8003f84:	080040a1 	.word	0x080040a1
 8003f88:	0800401f 	.word	0x0800401f
 8003f8c:	080040a1 	.word	0x080040a1
 8003f90:	080040a1 	.word	0x080040a1
 8003f94:	080040a1 	.word	0x080040a1
 8003f98:	0800405f 	.word	0x0800405f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f926 	bl	80041f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0208 	orr.w	r2, r2, #8
 8003fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0204 	bic.w	r2, r2, #4
 8003fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6999      	ldr	r1, [r3, #24]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	619a      	str	r2, [r3, #24]
      break;
 8003fda:	e062      	b.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f976 	bl	80042d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6999      	ldr	r1, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	021a      	lsls	r2, r3, #8
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	619a      	str	r2, [r3, #24]
      break;
 800401c:	e041      	b.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f9cb 	bl	80043c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0208 	orr.w	r2, r2, #8
 8004038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0204 	bic.w	r2, r2, #4
 8004048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69d9      	ldr	r1, [r3, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	61da      	str	r2, [r3, #28]
      break;
 800405c:	e021      	b.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fa1f 	bl	80044a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69d9      	ldr	r1, [r3, #28]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	021a      	lsls	r2, r3, #8
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	61da      	str	r2, [r3, #28]
      break;
 800409e:	e000      	b.n	80040a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a40      	ldr	r2, [pc, #256]	; (80041c8 <TIM_Base_SetConfig+0x114>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <TIM_Base_SetConfig+0x40>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d2:	d00f      	beq.n	80040f4 <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a3d      	ldr	r2, [pc, #244]	; (80041cc <TIM_Base_SetConfig+0x118>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00b      	beq.n	80040f4 <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3c      	ldr	r2, [pc, #240]	; (80041d0 <TIM_Base_SetConfig+0x11c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d007      	beq.n	80040f4 <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3b      	ldr	r2, [pc, #236]	; (80041d4 <TIM_Base_SetConfig+0x120>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3a      	ldr	r2, [pc, #232]	; (80041d8 <TIM_Base_SetConfig+0x124>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d108      	bne.n	8004106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a2f      	ldr	r2, [pc, #188]	; (80041c8 <TIM_Base_SetConfig+0x114>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d02b      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004114:	d027      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2c      	ldr	r2, [pc, #176]	; (80041cc <TIM_Base_SetConfig+0x118>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d023      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2b      	ldr	r2, [pc, #172]	; (80041d0 <TIM_Base_SetConfig+0x11c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01f      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2a      	ldr	r2, [pc, #168]	; (80041d4 <TIM_Base_SetConfig+0x120>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01b      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a29      	ldr	r2, [pc, #164]	; (80041d8 <TIM_Base_SetConfig+0x124>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d017      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a28      	ldr	r2, [pc, #160]	; (80041dc <TIM_Base_SetConfig+0x128>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a27      	ldr	r2, [pc, #156]	; (80041e0 <TIM_Base_SetConfig+0x12c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00f      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <TIM_Base_SetConfig+0x130>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a25      	ldr	r2, [pc, #148]	; (80041e8 <TIM_Base_SetConfig+0x134>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a24      	ldr	r2, [pc, #144]	; (80041ec <TIM_Base_SetConfig+0x138>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a23      	ldr	r2, [pc, #140]	; (80041f0 <TIM_Base_SetConfig+0x13c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d108      	bne.n	8004178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <TIM_Base_SetConfig+0x114>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0xf8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <TIM_Base_SetConfig+0x124>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	615a      	str	r2, [r3, #20]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40000400 	.word	0x40000400
 80041d0:	40000800 	.word	0x40000800
 80041d4:	40000c00 	.word	0x40000c00
 80041d8:	40010400 	.word	0x40010400
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800
 80041e8:	40001800 	.word	0x40001800
 80041ec:	40001c00 	.word	0x40001c00
 80041f0:	40002000 	.word	0x40002000

080041f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0201 	bic.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f023 0302 	bic.w	r3, r3, #2
 800423c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a20      	ldr	r2, [pc, #128]	; (80042cc <TIM_OC1_SetConfig+0xd8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d003      	beq.n	8004258 <TIM_OC1_SetConfig+0x64>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <TIM_OC1_SetConfig+0xdc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d10c      	bne.n	8004272 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 0308 	bic.w	r3, r3, #8
 800425e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f023 0304 	bic.w	r3, r3, #4
 8004270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a15      	ldr	r2, [pc, #84]	; (80042cc <TIM_OC1_SetConfig+0xd8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d003      	beq.n	8004282 <TIM_OC1_SetConfig+0x8e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a14      	ldr	r2, [pc, #80]	; (80042d0 <TIM_OC1_SetConfig+0xdc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d111      	bne.n	80042a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	621a      	str	r2, [r3, #32]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40010000 	.word	0x40010000
 80042d0:	40010400 	.word	0x40010400

080042d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0320 	bic.w	r3, r3, #32
 800431e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <TIM_OC2_SetConfig+0xe4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d003      	beq.n	800433c <TIM_OC2_SetConfig+0x68>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a21      	ldr	r2, [pc, #132]	; (80043bc <TIM_OC2_SetConfig+0xe8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d10d      	bne.n	8004358 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <TIM_OC2_SetConfig+0xe4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_OC2_SetConfig+0x94>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a16      	ldr	r2, [pc, #88]	; (80043bc <TIM_OC2_SetConfig+0xe8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d113      	bne.n	8004390 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800436e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40010400 	.word	0x40010400

080043c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <TIM_OC3_SetConfig+0xe0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_OC3_SetConfig+0x66>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <TIM_OC3_SetConfig+0xe4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10d      	bne.n	8004442 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800442c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <TIM_OC3_SetConfig+0xe0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d003      	beq.n	8004452 <TIM_OC3_SetConfig+0x92>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <TIM_OC3_SetConfig+0xe4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d113      	bne.n	800447a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	621a      	str	r2, [r3, #32]
}
 8004494:	bf00      	nop
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	40010000 	.word	0x40010000
 80044a4:	40010400 	.word	0x40010400

080044a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	031b      	lsls	r3, r3, #12
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a12      	ldr	r2, [pc, #72]	; (800454c <TIM_OC4_SetConfig+0xa4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_OC4_SetConfig+0x68>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a11      	ldr	r2, [pc, #68]	; (8004550 <TIM_OC4_SetConfig+0xa8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d109      	bne.n	8004524 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	019b      	lsls	r3, r3, #6
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	621a      	str	r2, [r3, #32]
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40010000 	.word	0x40010000
 8004550:	40010400 	.word	0x40010400

08004554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2201      	movs	r2, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1a      	ldr	r2, [r3, #32]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	fa01 f303 	lsl.w	r3, r1, r3
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e05a      	b.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a21      	ldr	r2, [pc, #132]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d022      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d01d      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d018      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1b      	ldr	r2, [pc, #108]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a18      	ldr	r2, [pc, #96]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a15      	ldr	r2, [pc, #84]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10c      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40010000 	.word	0x40010000
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40010400 	.word	0x40010400
 8004690:	40014000 	.word	0x40014000
 8004694:	40001800 	.word	0x40001800

08004698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e03d      	b.n	8004730 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800473c:	b084      	sub	sp, #16
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	f107 001c 	add.w	r0, r7, #28
 800474a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	2b01      	cmp	r3, #1
 8004752:	d122      	bne.n	800479a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800477c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d105      	bne.n	800478e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f001 fac6 	bl	8005d20 <USB_CoreReset>
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	e01a      	b.n	80047d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f001 faba 	bl	8005d20 <USB_CoreReset>
 80047ac:	4603      	mov	r3, r0
 80047ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
 80047c2:	e005      	b.n	80047d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10b      	bne.n	80047ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f043 0206 	orr.w	r2, r3, #6
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f043 0220 	orr.w	r2, r3, #32
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047fa:	b004      	add	sp, #16
 80047fc:	4770      	bx	lr
	...

08004800 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d165      	bne.n	80048e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a41      	ldr	r2, [pc, #260]	; (800491c <USB_SetTurnaroundTime+0x11c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d906      	bls.n	800482a <USB_SetTurnaroundTime+0x2a>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4a40      	ldr	r2, [pc, #256]	; (8004920 <USB_SetTurnaroundTime+0x120>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d202      	bcs.n	800482a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004824:	230f      	movs	r3, #15
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e062      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a3c      	ldr	r2, [pc, #240]	; (8004920 <USB_SetTurnaroundTime+0x120>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d306      	bcc.n	8004840 <USB_SetTurnaroundTime+0x40>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4a3b      	ldr	r2, [pc, #236]	; (8004924 <USB_SetTurnaroundTime+0x124>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d202      	bcs.n	8004840 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800483a:	230e      	movs	r3, #14
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e057      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a38      	ldr	r2, [pc, #224]	; (8004924 <USB_SetTurnaroundTime+0x124>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d306      	bcc.n	8004856 <USB_SetTurnaroundTime+0x56>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4a37      	ldr	r2, [pc, #220]	; (8004928 <USB_SetTurnaroundTime+0x128>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d202      	bcs.n	8004856 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004850:	230d      	movs	r3, #13
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e04c      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a33      	ldr	r2, [pc, #204]	; (8004928 <USB_SetTurnaroundTime+0x128>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d306      	bcc.n	800486c <USB_SetTurnaroundTime+0x6c>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4a32      	ldr	r2, [pc, #200]	; (800492c <USB_SetTurnaroundTime+0x12c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d802      	bhi.n	800486c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004866:	230c      	movs	r3, #12
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e041      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a2f      	ldr	r2, [pc, #188]	; (800492c <USB_SetTurnaroundTime+0x12c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d906      	bls.n	8004882 <USB_SetTurnaroundTime+0x82>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4a2e      	ldr	r2, [pc, #184]	; (8004930 <USB_SetTurnaroundTime+0x130>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d802      	bhi.n	8004882 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800487c:	230b      	movs	r3, #11
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e036      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4a2a      	ldr	r2, [pc, #168]	; (8004930 <USB_SetTurnaroundTime+0x130>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d906      	bls.n	8004898 <USB_SetTurnaroundTime+0x98>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4a29      	ldr	r2, [pc, #164]	; (8004934 <USB_SetTurnaroundTime+0x134>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d802      	bhi.n	8004898 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004892:	230a      	movs	r3, #10
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e02b      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4a26      	ldr	r2, [pc, #152]	; (8004934 <USB_SetTurnaroundTime+0x134>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d906      	bls.n	80048ae <USB_SetTurnaroundTime+0xae>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4a25      	ldr	r2, [pc, #148]	; (8004938 <USB_SetTurnaroundTime+0x138>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d202      	bcs.n	80048ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048a8:	2309      	movs	r3, #9
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e020      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4a21      	ldr	r2, [pc, #132]	; (8004938 <USB_SetTurnaroundTime+0x138>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d306      	bcc.n	80048c4 <USB_SetTurnaroundTime+0xc4>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4a20      	ldr	r2, [pc, #128]	; (800493c <USB_SetTurnaroundTime+0x13c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d802      	bhi.n	80048c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048be:	2308      	movs	r3, #8
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e015      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4a1d      	ldr	r2, [pc, #116]	; (800493c <USB_SetTurnaroundTime+0x13c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d906      	bls.n	80048da <USB_SetTurnaroundTime+0xda>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a1c      	ldr	r2, [pc, #112]	; (8004940 <USB_SetTurnaroundTime+0x140>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d202      	bcs.n	80048da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80048d4:	2307      	movs	r3, #7
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e00a      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80048da:	2306      	movs	r3, #6
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e007      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80048e0:	79fb      	ldrb	r3, [r7, #7]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048e6:	2309      	movs	r3, #9
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	e001      	b.n	80048f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80048ec:	2309      	movs	r3, #9
 80048ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	029b      	lsls	r3, r3, #10
 8004904:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004908:	431a      	orrs	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	00d8acbf 	.word	0x00d8acbf
 8004920:	00e4e1c0 	.word	0x00e4e1c0
 8004924:	00f42400 	.word	0x00f42400
 8004928:	01067380 	.word	0x01067380
 800492c:	011a499f 	.word	0x011a499f
 8004930:	01312cff 	.word	0x01312cff
 8004934:	014ca43f 	.word	0x014ca43f
 8004938:	016e3600 	.word	0x016e3600
 800493c:	01a6ab1f 	.word	0x01a6ab1f
 8004940:	01e84800 	.word	0x01e84800

08004944 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f043 0201 	orr.w	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d106      	bne.n	80049b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60da      	str	r2, [r3, #12]
 80049b2:	e00b      	b.n	80049cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	e001      	b.n	80049cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e003      	b.n	80049d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80049cc:	2032      	movs	r0, #50	; 0x32
 80049ce:	f7fc fd07 	bl	80013e0 <HAL_Delay>

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049dc:	b084      	sub	sp, #16
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e009      	b.n	8004a10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	3340      	adds	r3, #64	; 0x40
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	2200      	movs	r2, #0
 8004a08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b0e      	cmp	r3, #14
 8004a14:	d9f2      	bls.n	80049fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d11c      	bne.n	8004a56 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a2a:	f043 0302 	orr.w	r3, r3, #2
 8004a2e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38
 8004a54:	e00b      	b.n	8004a6e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a80:	4619      	mov	r1, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a88:	461a      	mov	r2, r3
 8004a8a:	680b      	ldr	r3, [r1, #0]
 8004a8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d10c      	bne.n	8004aae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f949 	bl	8004d34 <USB_SetDevSpeed>
 8004aa2:	e008      	b.n	8004ab6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f944 	bl	8004d34 <USB_SetDevSpeed>
 8004aac:	e003      	b.n	8004ab6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004aae:	2103      	movs	r1, #3
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f93f 	bl	8004d34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ab6:	2110      	movs	r1, #16
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f8f3 	bl	8004ca4 <USB_FlushTxFifo>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f911 	bl	8004cf0 <USB_FlushRxFifo>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ade:	461a      	mov	r2, r3
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	461a      	mov	r2, r3
 8004aec:	2300      	movs	r3, #0
 8004aee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	461a      	mov	r2, r3
 8004af8:	2300      	movs	r3, #0
 8004afa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	e043      	b.n	8004b8a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b18:	d118      	bne.n	8004b4c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	e013      	b.n	8004b5e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	461a      	mov	r2, r3
 8004b44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e008      	b.n	8004b5e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	461a      	mov	r2, r3
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	3301      	adds	r3, #1
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d3b7      	bcc.n	8004b02 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	e043      	b.n	8004c20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bae:	d118      	bne.n	8004be2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e013      	b.n	8004bf4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	e008      	b.n	8004bf4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c00:	461a      	mov	r2, r3
 8004c02:	2300      	movs	r3, #0
 8004c04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	461a      	mov	r2, r3
 8004c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d3b7      	bcc.n	8004b98 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d105      	bne.n	8004c5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f043 0210 	orr.w	r2, r3, #16
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <USB_DevInit+0x2c4>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f043 0208 	orr.w	r2, r3, #8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d107      	bne.n	8004c90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c88:	f043 0304 	orr.w	r3, r3, #4
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c9c:	b004      	add	sp, #16
 8004c9e:	4770      	bx	lr
 8004ca0:	803c3800 	.word	0x803c3800

08004ca4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	f043 0220 	orr.w	r2, r3, #32
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4a09      	ldr	r2, [pc, #36]	; (8004cec <USB_FlushTxFifo+0x48>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e006      	b.n	8004cde <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d0f0      	beq.n	8004cbe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	00030d40 	.word	0x00030d40

08004cf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2210      	movs	r2, #16
 8004d00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3301      	adds	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <USB_FlushRxFifo+0x40>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e006      	b.n	8004d22 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d0f0      	beq.n	8004d02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	00030d40 	.word	0x00030d40

08004d34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d54:	4313      	orrs	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b087      	sub	sp, #28
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0306 	and.w	r3, r3, #6
 8004d7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d86:	2300      	movs	r3, #0
 8004d88:	75fb      	strb	r3, [r7, #23]
 8004d8a:	e00a      	b.n	8004da2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d002      	beq.n	8004d98 <USB_GetDevSpeed+0x32>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b06      	cmp	r3, #6
 8004d96:	d102      	bne.n	8004d9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	75fb      	strb	r3, [r7, #23]
 8004d9c:	e001      	b.n	8004da2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d9e:	230f      	movs	r3, #15
 8004da0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	785b      	ldrb	r3, [r3, #1]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d13a      	bne.n	8004e42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	2101      	movs	r1, #1
 8004dde:	fa01 f303 	lsl.w	r3, r1, r3
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	68f9      	ldr	r1, [r7, #12]
 8004de6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d155      	bne.n	8004eb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	78db      	ldrb	r3, [r3, #3]
 8004e1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	059b      	lsls	r3, r3, #22
 8004e26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	e036      	b.n	8004eb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	2101      	movs	r1, #1
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11a      	bne.n	8004eb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	78db      	ldrb	r3, [r3, #3]
 8004e94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e96:	430b      	orrs	r3, r1
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
	...

08004ec0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	785b      	ldrb	r3, [r3, #1]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d161      	bne.n	8004fa0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ef2:	d11f      	bne.n	8004f34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	0151      	lsls	r1, r2, #5
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	440a      	add	r2, r1
 8004f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f54:	4013      	ands	r3, r2
 8004f56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	2101      	movs	r1, #1
 8004f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	0159      	lsls	r1, r3, #5
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	440b      	add	r3, r1
 8004f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f96:	4619      	mov	r1, r3
 8004f98:	4b35      	ldr	r3, [pc, #212]	; (8005070 <USB_DeactivateEndpoint+0x1b0>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]
 8004f9e:	e060      	b.n	8005062 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fb6:	d11f      	bne.n	8004ff8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	0151      	lsls	r1, r2, #5
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	440a      	add	r2, r1
 8004fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	041b      	lsls	r3, r3, #16
 8005010:	43db      	mvns	r3, r3
 8005012:	68f9      	ldr	r1, [r7, #12]
 8005014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005018:	4013      	ands	r3, r2
 800501a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	43db      	mvns	r3, r3
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800503c:	4013      	ands	r3, r2
 800503e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	0159      	lsls	r1, r3, #5
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	440b      	add	r3, r1
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	4619      	mov	r1, r3
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <USB_DeactivateEndpoint+0x1b4>)
 800505e:	4013      	ands	r3, r2
 8005060:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	ec337800 	.word	0xec337800
 8005074:	eff37800 	.word	0xeff37800

08005078 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	; 0x28
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	785b      	ldrb	r3, [r3, #1]
 8005094:	2b01      	cmp	r3, #1
 8005096:	f040 815c 	bne.w	8005352 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d132      	bne.n	8005108 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	0151      	lsls	r1, r2, #5
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	440a      	add	r2, r1
 80050dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	0151      	lsls	r1, r2, #5
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	440a      	add	r2, r1
 80050fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005100:	0cdb      	lsrs	r3, r3, #19
 8005102:	04db      	lsls	r3, r3, #19
 8005104:	6113      	str	r3, [r2, #16]
 8005106:	e074      	b.n	80051f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005122:	0cdb      	lsrs	r3, r3, #19
 8005124:	04db      	lsls	r3, r3, #19
 8005126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005142:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005146:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800514a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6959      	ldr	r1, [r3, #20]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	440b      	add	r3, r1
 8005164:	1e59      	subs	r1, r3, #1
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	fbb1 f3f3 	udiv	r3, r1, r3
 800516e:	04d9      	lsls	r1, r3, #19
 8005170:	4b9d      	ldr	r3, [pc, #628]	; (80053e8 <USB_EPStartXfer+0x370>)
 8005172:	400b      	ands	r3, r1
 8005174:	69b9      	ldr	r1, [r7, #24]
 8005176:	0148      	lsls	r0, r1, #5
 8005178:	69f9      	ldr	r1, [r7, #28]
 800517a:	4401      	add	r1, r0
 800517c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005180:	4313      	orrs	r3, r2
 8005182:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800519a:	69b9      	ldr	r1, [r7, #24]
 800519c:	0148      	lsls	r0, r1, #5
 800519e:	69f9      	ldr	r1, [r7, #28]
 80051a0:	4401      	add	r1, r0
 80051a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051a6:	4313      	orrs	r3, r2
 80051a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	78db      	ldrb	r3, [r3, #3]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d11f      	bne.n	80051f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	0151      	lsls	r1, r2, #5
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	440a      	add	r2, r1
 80051c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d14b      	bne.n	8005290 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	461a      	mov	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	78db      	ldrb	r3, [r3, #3]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d128      	bne.n	800526e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d110      	bne.n	800524e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e00f      	b.n	800526e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e12f      	b.n	80054f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	0151      	lsls	r1, r2, #5
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	440a      	add	r2, r1
 80052a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	78db      	ldrb	r3, [r3, #3]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d015      	beq.n	80052e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8117 	beq.w	80054f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	2101      	movs	r1, #1
 80052d4:	fa01 f303 	lsl.w	r3, r1, r3
 80052d8:	69f9      	ldr	r1, [r7, #28]
 80052da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052de:	4313      	orrs	r3, r2
 80052e0:	634b      	str	r3, [r1, #52]	; 0x34
 80052e2:	e105      	b.n	80054f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d110      	bne.n	8005316 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	440a      	add	r2, r1
 800530a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	e00f      	b.n	8005336 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005334:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	68d9      	ldr	r1, [r3, #12]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781a      	ldrb	r2, [r3, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	b298      	uxth	r0, r3
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	4603      	mov	r3, r0
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fa2b 	bl	80057a6 <USB_WritePacket>
 8005350:	e0ce      	b.n	80054f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536c:	0cdb      	lsrs	r3, r3, #19
 800536e:	04db      	lsls	r3, r3, #19
 8005370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	0151      	lsls	r1, r2, #5
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	440a      	add	r2, r1
 8005388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005390:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005394:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d126      	bne.n	80053ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b4:	69b9      	ldr	r1, [r7, #24]
 80053b6:	0148      	lsls	r0, r1, #5
 80053b8:	69f9      	ldr	r1, [r7, #28]
 80053ba:	4401      	add	r1, r0
 80053bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053c0:	4313      	orrs	r3, r2
 80053c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053e2:	6113      	str	r3, [r2, #16]
 80053e4:	e036      	b.n	8005454 <USB_EPStartXfer+0x3dc>
 80053e6:	bf00      	nop
 80053e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	695a      	ldr	r2, [r3, #20]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4413      	add	r3, r2
 80053f6:	1e5a      	subs	r2, r3, #1
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	8afb      	ldrh	r3, [r7, #22]
 8005412:	04d9      	lsls	r1, r3, #19
 8005414:	4b39      	ldr	r3, [pc, #228]	; (80054fc <USB_EPStartXfer+0x484>)
 8005416:	400b      	ands	r3, r1
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	0148      	lsls	r0, r1, #5
 800541c:	69f9      	ldr	r1, [r7, #28]
 800541e:	4401      	add	r1, r0
 8005420:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005424:	4313      	orrs	r3, r2
 8005426:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	8af9      	ldrh	r1, [r7, #22]
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005444:	69b9      	ldr	r1, [r7, #24]
 8005446:	0148      	lsls	r0, r1, #5
 8005448:	69f9      	ldr	r1, [r7, #28]
 800544a:	4401      	add	r1, r0
 800544c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005450:	4313      	orrs	r3, r2
 8005452:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10d      	bne.n	8005476 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	68d9      	ldr	r1, [r3, #12]
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005472:	460a      	mov	r2, r1
 8005474:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	78db      	ldrb	r3, [r3, #3]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d128      	bne.n	80054d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d110      	bne.n	80054b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e00f      	b.n	80054d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	1ff80000 	.word	0x1ff80000

08005500 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	4613      	mov	r3, r2
 800550c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b01      	cmp	r3, #1
 800551e:	f040 80cd 	bne.w	80056bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d132      	bne.n	8005590 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005544:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005548:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800554c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800556c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005588:	0cdb      	lsrs	r3, r3, #19
 800558a:	04db      	lsls	r3, r3, #19
 800558c:	6113      	str	r3, [r2, #16]
 800558e:	e04e      	b.n	800562e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055aa:	0cdb      	lsrs	r3, r3, #19
 80055ac:	04db      	lsls	r3, r3, #19
 80055ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	695a      	ldr	r2, [r3, #20]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d903      	bls.n	80055e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800561e:	6939      	ldr	r1, [r7, #16]
 8005620:	0148      	lsls	r0, r1, #5
 8005622:	6979      	ldr	r1, [r7, #20]
 8005624:	4401      	add	r1, r0
 8005626:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800562a:	4313      	orrs	r3, r2
 800562c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d11e      	bne.n	8005672 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e092      	b.n	8005798 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005690:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d07e      	beq.n	8005798 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	2101      	movs	r1, #1
 80056ac:	fa01 f303 	lsl.w	r3, r1, r3
 80056b0:	6979      	ldr	r1, [r7, #20]
 80056b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b6:	4313      	orrs	r3, r2
 80056b8:	634b      	str	r3, [r1, #52]	; 0x34
 80056ba:	e06d      	b.n	8005798 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d6:	0cdb      	lsrs	r3, r3, #19
 80056d8:	04db      	lsls	r3, r3, #19
 80056da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800572e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005746:	6939      	ldr	r1, [r7, #16]
 8005748:	0148      	lsls	r0, r1, #5
 800574a:	6979      	ldr	r1, [r7, #20]
 800574c:	4401      	add	r1, r0
 800574e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005752:	4313      	orrs	r3, r2
 8005754:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d10d      	bne.n	8005778 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	68d9      	ldr	r1, [r3, #12]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	460a      	mov	r2, r1
 8005776:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b089      	sub	sp, #36	; 0x24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	4611      	mov	r1, r2
 80057b2:	461a      	mov	r2, r3
 80057b4:	460b      	mov	r3, r1
 80057b6:	71fb      	strb	r3, [r7, #7]
 80057b8:	4613      	mov	r3, r2
 80057ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80057c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d11a      	bne.n	8005802 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057cc:	88bb      	ldrh	r3, [r7, #4]
 80057ce:	3303      	adds	r3, #3
 80057d0:	089b      	lsrs	r3, r3, #2
 80057d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e00f      	b.n	80057fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	031a      	lsls	r2, r3, #12
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e6:	461a      	mov	r2, r3
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	3304      	adds	r3, #4
 80057f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	3301      	adds	r3, #1
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d3eb      	bcc.n	80057da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3724      	adds	r7, #36	; 0x24
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005810:	b480      	push	{r7}
 8005812:	b089      	sub	sp, #36	; 0x24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	3303      	adds	r3, #3
 800582a:	089b      	lsrs	r3, r3, #2
 800582c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800582e:	2300      	movs	r3, #0
 8005830:	61bb      	str	r3, [r7, #24]
 8005832:	e00b      	b.n	800584c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3304      	adds	r3, #4
 8005844:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	3301      	adds	r3, #1
 800584a:	61bb      	str	r3, [r7, #24]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	429a      	cmp	r2, r3
 8005852:	d3ef      	bcc.n	8005834 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005854:	69fb      	ldr	r3, [r7, #28]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3724      	adds	r7, #36	; 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d12c      	bne.n	80058d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	db12      	blt.n	80058b6 <USB_EPSetStall+0x54>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00f      	beq.n	80058b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	0151      	lsls	r1, r2, #5
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	440a      	add	r2, r1
 80058ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	0151      	lsls	r1, r2, #5
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	440a      	add	r2, r1
 80058cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	e02b      	b.n	8005930 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	db12      	blt.n	8005910 <USB_EPSetStall+0xae>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00f      	beq.n	8005910 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800590e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800592e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800593e:	b480      	push	{r7}
 8005940:	b085      	sub	sp, #20
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d128      	bne.n	80059ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005978:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	78db      	ldrb	r3, [r3, #3]
 800597e:	2b03      	cmp	r3, #3
 8005980:	d003      	beq.n	800598a <USB_EPClearStall+0x4c>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	78db      	ldrb	r3, [r3, #3]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d138      	bne.n	80059fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	0151      	lsls	r1, r2, #5
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	440a      	add	r2, r1
 80059a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e027      	b.n	80059fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	78db      	ldrb	r3, [r3, #3]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d003      	beq.n	80059dc <USB_EPClearStall+0x9e>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	78db      	ldrb	r3, [r3, #3]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d10f      	bne.n	80059fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	460b      	mov	r3, r1
 8005a14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a2c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a44:	4313      	orrs	r3, r2
 8005a46:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a70:	f023 0303 	bic.w	r3, r3, #3
 8005a74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a84:	f023 0302 	bic.w	r3, r3, #2
 8005a88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ac6:	f043 0302 	orr.w	r3, r3, #2
 8005aca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4013      	ands	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005af2:	68fb      	ldr	r3, [r7, #12]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	4013      	ands	r3, r2
 8005b22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	0c1b      	lsrs	r3, r3, #16
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	4013      	ands	r3, r2
 8005b56:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	b29b      	uxth	r3, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	4013      	ands	r3, r2
 8005b94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b96:	68bb      	ldr	r3, [r7, #8]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd4:	01db      	lsls	r3, r3, #7
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c3a:	f023 0307 	bic.w	r3, r3, #7
 8005c3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	333c      	adds	r3, #60	; 0x3c
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <USB_EP0_OutStart+0xb8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d90a      	bls.n	8005c9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c98:	d101      	bne.n	8005c9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e037      	b.n	8005d0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ccc:	f043 0318 	orr.w	r3, r3, #24
 8005cd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ce4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d10f      	bne.n	8005d0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	4f54300a 	.word	0x4f54300a

08005d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <USB_CoreReset+0x64>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e01b      	b.n	8005d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	daf2      	bge.n	8005d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f043 0201 	orr.w	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <USB_CoreReset+0x64>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d901      	bls.n	8005d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e006      	b.n	8005d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d0f0      	beq.n	8005d56 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	00030d40 	.word	0x00030d40

08005d88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d98:	f002 f96e 	bl	8008078 <USBD_static_malloc>
 8005d9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005dac:	2302      	movs	r3, #2
 8005dae:	e066      	b.n	8005e7e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	7c1b      	ldrb	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d119      	bne.n	8005df4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	2181      	movs	r1, #129	; 0x81
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f002 f832 	bl	8007e32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dd8:	2202      	movs	r2, #2
 8005dda:	2101      	movs	r1, #1
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f002 f828 	bl	8007e32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2210      	movs	r2, #16
 8005dee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005df2:	e016      	b.n	8005e22 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005df4:	2340      	movs	r3, #64	; 0x40
 8005df6:	2202      	movs	r2, #2
 8005df8:	2181      	movs	r1, #129	; 0x81
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f002 f819 	bl	8007e32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	2202      	movs	r2, #2
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f002 f810 	bl	8007e32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2210      	movs	r2, #16
 8005e1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e22:	2308      	movs	r3, #8
 8005e24:	2203      	movs	r2, #3
 8005e26:	2182      	movs	r1, #130	; 0x82
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f002 f802 	bl	8007e32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7c1b      	ldrb	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d109      	bne.n	8005e6c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e62:	2101      	movs	r1, #1
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f002 f8d3 	bl	8008010 <USBD_LL_PrepareReceive>
 8005e6a:	e007      	b.n	8005e7c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e72:	2340      	movs	r3, #64	; 0x40
 8005e74:	2101      	movs	r1, #1
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f002 f8ca 	bl	8008010 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005e92:	2181      	movs	r1, #129	; 0x81
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 fff2 	bl	8007e7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 ffeb 	bl	8007e7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005eb0:	2182      	movs	r1, #130	; 0x82
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 ffe3 	bl	8007e7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00e      	beq.n	8005ef0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f002 f8d6 	bl	8008094 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e0af      	b.n	8006084 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d03f      	beq.n	8005fb0 <USBD_CDC_Setup+0xb4>
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	f040 809f 	bne.w	8006074 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	88db      	ldrh	r3, [r3, #6]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02e      	beq.n	8005f9c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	b25b      	sxtb	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	da16      	bge.n	8005f76 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005f54:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	88d2      	ldrh	r2, [r2, #6]
 8005f5a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	88db      	ldrh	r3, [r3, #6]
 8005f60:	2b07      	cmp	r3, #7
 8005f62:	bf28      	it	cs
 8005f64:	2307      	movcs	r3, #7
 8005f66:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	89fa      	ldrh	r2, [r7, #14]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 fb19 	bl	80075a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005f74:	e085      	b.n	8006082 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	785a      	ldrb	r2, [r3, #1]
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	88db      	ldrh	r3, [r3, #6]
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f8c:	6939      	ldr	r1, [r7, #16]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	88db      	ldrh	r3, [r3, #6]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fb32 	bl	80075fe <USBD_CtlPrepareRx>
      break;
 8005f9a:	e072      	b.n	8006082 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	7850      	ldrb	r0, [r2, #1]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	4798      	blx	r3
      break;
 8005fae:	e068      	b.n	8006082 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b0b      	cmp	r3, #11
 8005fb6:	d852      	bhi.n	800605e <USBD_CDC_Setup+0x162>
 8005fb8:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <USBD_CDC_Setup+0xc4>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005ff1 	.word	0x08005ff1
 8005fc4:	0800606d 	.word	0x0800606d
 8005fc8:	0800605f 	.word	0x0800605f
 8005fcc:	0800605f 	.word	0x0800605f
 8005fd0:	0800605f 	.word	0x0800605f
 8005fd4:	0800605f 	.word	0x0800605f
 8005fd8:	0800605f 	.word	0x0800605f
 8005fdc:	0800605f 	.word	0x0800605f
 8005fe0:	0800605f 	.word	0x0800605f
 8005fe4:	0800605f 	.word	0x0800605f
 8005fe8:	0800601b 	.word	0x0800601b
 8005fec:	08006045 	.word	0x08006045
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d107      	bne.n	800600c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ffc:	f107 030a 	add.w	r3, r7, #10
 8006000:	2202      	movs	r2, #2
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 face 	bl	80075a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800600a:	e032      	b.n	8006072 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fa58 	bl	80074c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006014:	2303      	movs	r3, #3
 8006016:	75fb      	strb	r3, [r7, #23]
          break;
 8006018:	e02b      	b.n	8006072 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b03      	cmp	r3, #3
 8006024:	d107      	bne.n	8006036 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006026:	f107 030d 	add.w	r3, r7, #13
 800602a:	2201      	movs	r2, #1
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 fab9 	bl	80075a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006034:	e01d      	b.n	8006072 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 fa43 	bl	80074c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800603e:	2303      	movs	r3, #3
 8006040:	75fb      	strb	r3, [r7, #23]
          break;
 8006042:	e016      	b.n	8006072 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b03      	cmp	r3, #3
 800604e:	d00f      	beq.n	8006070 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f001 fa36 	bl	80074c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006058:	2303      	movs	r3, #3
 800605a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800605c:	e008      	b.n	8006070 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f001 fa2f 	bl	80074c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006066:	2303      	movs	r3, #3
 8006068:	75fb      	strb	r3, [r7, #23]
          break;
 800606a:	e002      	b.n	8006072 <USBD_CDC_Setup+0x176>
          break;
 800606c:	bf00      	nop
 800606e:	e008      	b.n	8006082 <USBD_CDC_Setup+0x186>
          break;
 8006070:	bf00      	nop
      }
      break;
 8006072:	e006      	b.n	8006082 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 fa24 	bl	80074c4 <USBD_CtlError>
      ret = USBD_FAIL;
 800607c:	2303      	movs	r3, #3
 800607e:	75fb      	strb	r3, [r7, #23]
      break;
 8006080:	bf00      	nop
  }

  return (uint8_t)ret;
 8006082:	7dfb      	ldrb	r3, [r7, #23]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800609e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e04f      	b.n	800614e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3318      	adds	r3, #24
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d029      	beq.n	8006120 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80060cc:	78fa      	ldrb	r2, [r7, #3]
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	3318      	adds	r3, #24
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	78f9      	ldrb	r1, [r7, #3]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	460b      	mov	r3, r1
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	1a5b      	subs	r3, r3, r1
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4403      	add	r3, r0
 80060ec:	3344      	adds	r3, #68	; 0x44
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80060f4:	fb03 f301 	mul.w	r3, r3, r1
 80060f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d110      	bne.n	8006120 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80060fe:	78fa      	ldrb	r2, [r7, #3]
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	440b      	add	r3, r1
 800610c:	3318      	adds	r3, #24
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006112:	78f9      	ldrb	r1, [r7, #3]
 8006114:	2300      	movs	r3, #0
 8006116:	2200      	movs	r2, #0
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 ff58 	bl	8007fce <USBD_LL_Transmit>
 800611e:	e015      	b.n	800614c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00b      	beq.n	800614c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006148:	78fa      	ldrb	r2, [r7, #3]
 800614a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	460b      	mov	r3, r1
 8006160:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006168:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006174:	2303      	movs	r3, #3
 8006176:	e015      	b.n	80061a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 ff68 	bl	8008052 <USBD_LL_GetRxDataSize>
 8006182:	4602      	mov	r2, r0
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800619e:	4611      	mov	r1, r2
 80061a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e01b      	b.n	80061fe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d015      	beq.n	80061fc <USBD_CDC_EP0_RxReady+0x50>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061d6:	2bff      	cmp	r3, #255	; 0xff
 80061d8:	d010      	beq.n	80061fc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80061e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061f0:	b292      	uxth	r2, r2
 80061f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	22ff      	movs	r2, #255	; 0xff
 80061f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2243      	movs	r2, #67	; 0x43
 8006214:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006216:	4b03      	ldr	r3, [pc, #12]	; (8006224 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	20000094 	.word	0x20000094

08006228 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2243      	movs	r2, #67	; 0x43
 8006234:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006236:	4b03      	ldr	r3, [pc, #12]	; (8006244 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	20000050 	.word	0x20000050

08006248 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2243      	movs	r2, #67	; 0x43
 8006254:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006256:	4b03      	ldr	r3, [pc, #12]	; (8006264 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	200000d8 	.word	0x200000d8

08006268 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	220a      	movs	r2, #10
 8006274:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006276:	4b03      	ldr	r3, [pc, #12]	; (8006284 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	2000000c 	.word	0x2000000c

08006288 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006298:	2303      	movs	r3, #3
 800629a:	e004      	b.n	80062a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b087      	sub	sp, #28
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e008      	b.n	80062e2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006306:	2303      	movs	r3, #3
 8006308:	e004      	b.n	8006314 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800632e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006330:	2301      	movs	r3, #1
 8006332:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800633e:	2303      	movs	r3, #3
 8006340:	e01a      	b.n	8006378 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006348:	2b00      	cmp	r3, #0
 800634a:	d114      	bne.n	8006376 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2201      	movs	r2, #1
 8006350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800636a:	2181      	movs	r1, #129	; 0x81
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 fe2e 	bl	8007fce <USBD_LL_Transmit>

    ret = USBD_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800638e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800639a:	2303      	movs	r3, #3
 800639c:	e016      	b.n	80063cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7c1b      	ldrb	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063b0:	2101      	movs	r1, #1
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 fe2c 	bl	8008010 <USBD_LL_PrepareReceive>
 80063b8:	e007      	b.n	80063ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063c0:	2340      	movs	r3, #64	; 0x40
 80063c2:	2101      	movs	r1, #1
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fe23 	bl	8008010 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e01f      	b.n	800642c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	79fa      	ldrb	r2, [r7, #7]
 800641e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f001 fc9f 	bl	8007d64 <USBD_LL_Init>
 8006426:	4603      	mov	r3, r0
 8006428:	75fb      	strb	r3, [r7, #23]

  return ret;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006448:	2303      	movs	r3, #3
 800644a:	e016      	b.n	800647a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	f107 020e 	add.w	r2, r7, #14
 800646c:	4610      	mov	r0, r2
 800646e:	4798      	blx	r3
 8006470:	4602      	mov	r2, r0
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b082      	sub	sp, #8
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fcb6 	bl	8007dfc <USBD_LL_Start>
 8006490:	4603      	mov	r3, r0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80064bc:	2303      	movs	r3, #3
 80064be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	78fa      	ldrb	r2, [r7, #3]
 80064d4:	4611      	mov	r1, r2
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
 80064da:	4603      	mov	r3, r0
 80064dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	4611      	mov	r1, r2
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
  }

  return USBD_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 ff90 	bl	8007450 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800653e:	461a      	mov	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2b02      	cmp	r3, #2
 8006552:	d01a      	beq.n	800658a <USBD_LL_SetupStage+0x72>
 8006554:	2b02      	cmp	r3, #2
 8006556:	d822      	bhi.n	800659e <USBD_LL_SetupStage+0x86>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <USBD_LL_SetupStage+0x4a>
 800655c:	2b01      	cmp	r3, #1
 800655e:	d00a      	beq.n	8006576 <USBD_LL_SetupStage+0x5e>
 8006560:	e01d      	b.n	800659e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa62 	bl	8006a34 <USBD_StdDevReq>
 8006570:	4603      	mov	r3, r0
 8006572:	73fb      	strb	r3, [r7, #15]
      break;
 8006574:	e020      	b.n	80065b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fac6 	bl	8006b10 <USBD_StdItfReq>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]
      break;
 8006588:	e016      	b.n	80065b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fb05 	bl	8006ba2 <USBD_StdEPReq>
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]
      break;
 800659c:	e00c      	b.n	80065b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 fc85 	bl	8007ebc <USBD_LL_StallEP>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]
      break;
 80065b6:	bf00      	nop
  }

  return ret;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b086      	sub	sp, #24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	460b      	mov	r3, r1
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065d0:	7afb      	ldrb	r3, [r7, #11]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d138      	bne.n	8006648 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d14a      	bne.n	800667e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d913      	bls.n	800661c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	1ad2      	subs	r2, r2, r3
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4293      	cmp	r3, r2
 800660c:	bf28      	it	cs
 800660e:	4613      	movcs	r3, r2
 8006610:	461a      	mov	r2, r3
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f001 f80f 	bl	8007638 <USBD_CtlContinueRx>
 800661a:	e030      	b.n	800667e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b03      	cmp	r3, #3
 8006626:	d10b      	bne.n	8006640 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f001 f80a 	bl	800765a <USBD_CtlSendStatus>
 8006646:	e01a      	b.n	800667e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b03      	cmp	r3, #3
 8006652:	d114      	bne.n	800667e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00e      	beq.n	800667e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	7afa      	ldrb	r2, [r7, #11]
 800666a:	4611      	mov	r1, r2
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	4798      	blx	r3
 8006670:	4603      	mov	r3, r0
 8006672:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006674:	7dfb      	ldrb	r3, [r7, #23]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	e000      	b.n	8006680 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	460b      	mov	r3, r1
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006696:	7afb      	ldrb	r3, [r7, #11]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d16b      	bne.n	8006774 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3314      	adds	r3, #20
 80066a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d156      	bne.n	800675a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d914      	bls.n	80066e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	1ad2      	subs	r2, r2, r3
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	461a      	mov	r2, r3
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 ff84 	bl	80075dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066d4:	2300      	movs	r3, #0
 80066d6:	2200      	movs	r2, #0
 80066d8:	2100      	movs	r1, #0
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f001 fc98 	bl	8008010 <USBD_LL_PrepareReceive>
 80066e0:	e03b      	b.n	800675a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d11c      	bne.n	8006728 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d316      	bcc.n	8006728 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006704:	429a      	cmp	r2, r3
 8006706:	d20f      	bcs.n	8006728 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006708:	2200      	movs	r2, #0
 800670a:	2100      	movs	r1, #0
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 ff65 	bl	80075dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800671a:	2300      	movs	r3, #0
 800671c:	2200      	movs	r2, #0
 800671e:	2100      	movs	r1, #0
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f001 fc75 	bl	8008010 <USBD_LL_PrepareReceive>
 8006726:	e018      	b.n	800675a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b03      	cmp	r3, #3
 8006732:	d10b      	bne.n	800674c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800674c:	2180      	movs	r1, #128	; 0x80
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f001 fbb4 	bl	8007ebc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 ff93 	bl	8007680 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006760:	2b01      	cmp	r3, #1
 8006762:	d122      	bne.n	80067aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff fe98 	bl	800649a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006772:	e01a      	b.n	80067aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b03      	cmp	r3, #3
 800677e:	d114      	bne.n	80067aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00e      	beq.n	80067aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	7afa      	ldrb	r2, [r7, #11]
 8006796:	4611      	mov	r1, r2
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	4798      	blx	r3
 800679c:	4603      	mov	r3, r0
 800679e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	e000      	b.n	80067ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e02f      	b.n	8006848 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00f      	beq.n	8006812 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6852      	ldr	r2, [r2, #4]
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	4611      	mov	r1, r2
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006812:	2340      	movs	r3, #64	; 0x40
 8006814:	2200      	movs	r2, #0
 8006816:	2100      	movs	r1, #0
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fb0a 	bl	8007e32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2240      	movs	r2, #64	; 0x40
 800682a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800682e:	2340      	movs	r3, #64	; 0x40
 8006830:	2200      	movs	r2, #0
 8006832:	2180      	movs	r1, #128	; 0x80
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fafc 	bl	8007e32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2240      	movs	r2, #64	; 0x40
 8006844:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	78fa      	ldrb	r2, [r7, #3]
 8006860:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687e:	b2da      	uxtb	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2204      	movs	r2, #4
 800688a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d106      	bne.n	80068be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80068de:	2303      	movs	r3, #3
 80068e0:	e012      	b.n	8006908 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d10b      	bne.n	8006906 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006926:	2303      	movs	r3, #3
 8006928:	e014      	b.n	8006954 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b03      	cmp	r3, #3
 8006934:	d10d      	bne.n	8006952 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	78fa      	ldrb	r2, [r7, #3]
 800694c:	4611      	mov	r1, r2
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006972:	2303      	movs	r3, #3
 8006974:	e014      	b.n	80069a0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b03      	cmp	r3, #3
 8006980:	d10d      	bne.n	800699e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	78fa      	ldrb	r2, [r7, #3]
 8006998:	4611      	mov	r1, r2
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6852      	ldr	r2, [r2, #4]
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	4611      	mov	r1, r2
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
  }

  return USBD_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b087      	sub	sp, #28
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a14:	8a3b      	ldrh	r3, [r7, #16]
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	b21a      	sxth	r2, r3
 8006a1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	b21b      	sxth	r3, r3
 8006a22:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a24:	89fb      	ldrh	r3, [r7, #14]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d005      	beq.n	8006a5a <USBD_StdDevReq+0x26>
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	d853      	bhi.n	8006afa <USBD_StdDevReq+0xc6>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <USBD_StdDevReq+0x3a>
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d14f      	bne.n	8006afa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	4798      	blx	r3
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a6c:	e04a      	b.n	8006b04 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	2b09      	cmp	r3, #9
 8006a74:	d83b      	bhi.n	8006aee <USBD_StdDevReq+0xba>
 8006a76:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <USBD_StdDevReq+0x48>)
 8006a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7c:	08006ad1 	.word	0x08006ad1
 8006a80:	08006ae5 	.word	0x08006ae5
 8006a84:	08006aef 	.word	0x08006aef
 8006a88:	08006adb 	.word	0x08006adb
 8006a8c:	08006aef 	.word	0x08006aef
 8006a90:	08006aaf 	.word	0x08006aaf
 8006a94:	08006aa5 	.word	0x08006aa5
 8006a98:	08006aef 	.word	0x08006aef
 8006a9c:	08006ac7 	.word	0x08006ac7
 8006aa0:	08006ab9 	.word	0x08006ab9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f9de 	bl	8006e68 <USBD_GetDescriptor>
          break;
 8006aac:	e024      	b.n	8006af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fb43 	bl	800713c <USBD_SetAddress>
          break;
 8006ab6:	e01f      	b.n	8006af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fb82 	bl	80071c4 <USBD_SetConfig>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]
          break;
 8006ac4:	e018      	b.n	8006af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fc21 	bl	8007310 <USBD_GetConfig>
          break;
 8006ace:	e013      	b.n	8006af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fc52 	bl	800737c <USBD_GetStatus>
          break;
 8006ad8:	e00e      	b.n	8006af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fc81 	bl	80073e4 <USBD_SetFeature>
          break;
 8006ae2:	e009      	b.n	8006af8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fc90 	bl	800740c <USBD_ClrFeature>
          break;
 8006aec:	e004      	b.n	8006af8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fce7 	bl	80074c4 <USBD_CtlError>
          break;
 8006af6:	bf00      	nop
      }
      break;
 8006af8:	e004      	b.n	8006b04 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fce1 	bl	80074c4 <USBD_CtlError>
      break;
 8006b02:	bf00      	nop
  }

  return ret;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop

08006b10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d005      	beq.n	8006b36 <USBD_StdItfReq+0x26>
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d82f      	bhi.n	8006b8e <USBD_StdItfReq+0x7e>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <USBD_StdItfReq+0x26>
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d12b      	bne.n	8006b8e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d81d      	bhi.n	8006b80 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	889b      	ldrh	r3, [r3, #4]
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d813      	bhi.n	8006b76 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	88db      	ldrh	r3, [r3, #6]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d110      	bne.n	8006b8a <USBD_StdItfReq+0x7a>
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10d      	bne.n	8006b8a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fd73 	bl	800765a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b74:	e009      	b.n	8006b8a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fca3 	bl	80074c4 <USBD_CtlError>
          break;
 8006b7e:	e004      	b.n	8006b8a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fc9e 	bl	80074c4 <USBD_CtlError>
          break;
 8006b88:	e000      	b.n	8006b8c <USBD_StdItfReq+0x7c>
          break;
 8006b8a:	bf00      	nop
      }
      break;
 8006b8c:	e004      	b.n	8006b98 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fc97 	bl	80074c4 <USBD_CtlError>
      break;
 8006b96:	bf00      	nop
  }

  return ret;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	889b      	ldrh	r3, [r3, #4]
 8006bb4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bbe:	2b40      	cmp	r3, #64	; 0x40
 8006bc0:	d007      	beq.n	8006bd2 <USBD_StdEPReq+0x30>
 8006bc2:	2b40      	cmp	r3, #64	; 0x40
 8006bc4:	f200 8145 	bhi.w	8006e52 <USBD_StdEPReq+0x2b0>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00c      	beq.n	8006be6 <USBD_StdEPReq+0x44>
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	f040 8140 	bne.w	8006e52 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]
      break;
 8006be4:	e13a      	b.n	8006e5c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d007      	beq.n	8006bfe <USBD_StdEPReq+0x5c>
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	f300 8129 	bgt.w	8006e46 <USBD_StdEPReq+0x2a4>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d07f      	beq.n	8006cf8 <USBD_StdEPReq+0x156>
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d03c      	beq.n	8006c76 <USBD_StdEPReq+0xd4>
 8006bfc:	e123      	b.n	8006e46 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d002      	beq.n	8006c10 <USBD_StdEPReq+0x6e>
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d016      	beq.n	8006c3c <USBD_StdEPReq+0x9a>
 8006c0e:	e02c      	b.n	8006c6a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00d      	beq.n	8006c32 <USBD_StdEPReq+0x90>
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b80      	cmp	r3, #128	; 0x80
 8006c1a:	d00a      	beq.n	8006c32 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f94b 	bl	8007ebc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c26:	2180      	movs	r1, #128	; 0x80
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 f947 	bl	8007ebc <USBD_LL_StallEP>
 8006c2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c30:	e020      	b.n	8006c74 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fc45 	bl	80074c4 <USBD_CtlError>
              break;
 8006c3a:	e01b      	b.n	8006c74 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	885b      	ldrh	r3, [r3, #2]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10e      	bne.n	8006c62 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <USBD_StdEPReq+0xc0>
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	2b80      	cmp	r3, #128	; 0x80
 8006c4e:	d008      	beq.n	8006c62 <USBD_StdEPReq+0xc0>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	88db      	ldrh	r3, [r3, #6]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 f92d 	bl	8007ebc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fcf9 	bl	800765a <USBD_CtlSendStatus>

              break;
 8006c68:	e004      	b.n	8006c74 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fc29 	bl	80074c4 <USBD_CtlError>
              break;
 8006c72:	bf00      	nop
          }
          break;
 8006c74:	e0ec      	b.n	8006e50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d002      	beq.n	8006c88 <USBD_StdEPReq+0xe6>
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d016      	beq.n	8006cb4 <USBD_StdEPReq+0x112>
 8006c86:	e030      	b.n	8006cea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00d      	beq.n	8006caa <USBD_StdEPReq+0x108>
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b80      	cmp	r3, #128	; 0x80
 8006c92:	d00a      	beq.n	8006caa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 f90f 	bl	8007ebc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c9e:	2180      	movs	r1, #128	; 0x80
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 f90b 	bl	8007ebc <USBD_LL_StallEP>
 8006ca6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ca8:	e025      	b.n	8006cf6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fc09 	bl	80074c4 <USBD_CtlError>
              break;
 8006cb2:	e020      	b.n	8006cf6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	885b      	ldrh	r3, [r3, #2]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d11b      	bne.n	8006cf4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f001 f915 	bl	8007efa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fcc2 	bl	800765a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	4798      	blx	r3
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006ce8:	e004      	b.n	8006cf4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fbe9 	bl	80074c4 <USBD_CtlError>
              break;
 8006cf2:	e000      	b.n	8006cf6 <USBD_StdEPReq+0x154>
              break;
 8006cf4:	bf00      	nop
          }
          break;
 8006cf6:	e0ab      	b.n	8006e50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d002      	beq.n	8006d0a <USBD_StdEPReq+0x168>
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d032      	beq.n	8006d6e <USBD_StdEPReq+0x1cc>
 8006d08:	e097      	b.n	8006e3a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <USBD_StdEPReq+0x17e>
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	2b80      	cmp	r3, #128	; 0x80
 8006d14:	d004      	beq.n	8006d20 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fbd3 	bl	80074c4 <USBD_CtlError>
                break;
 8006d1e:	e091      	b.n	8006e44 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	da0b      	bge.n	8006d40 <USBD_StdEPReq+0x19e>
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	3310      	adds	r3, #16
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	e00b      	b.n	8006d58 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	4413      	add	r3, r2
 8006d56:	3304      	adds	r3, #4
 8006d58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2202      	movs	r2, #2
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fc1d 	bl	80075a6 <USBD_CtlSendData>
              break;
 8006d6c:	e06a      	b.n	8006e44 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da11      	bge.n	8006d9a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	f003 020f 	and.w	r2, r3, #15
 8006d7c:	6879      	ldr	r1, [r7, #4]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	440b      	add	r3, r1
 8006d88:	3324      	adds	r3, #36	; 0x24
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d117      	bne.n	8006dc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fb96 	bl	80074c4 <USBD_CtlError>
                  break;
 8006d98:	e054      	b.n	8006e44 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	f003 020f 	and.w	r2, r3, #15
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fb83 	bl	80074c4 <USBD_CtlError>
                  break;
 8006dbe:	e041      	b.n	8006e44 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da0b      	bge.n	8006de0 <USBD_StdEPReq+0x23e>
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	3310      	adds	r3, #16
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	4413      	add	r3, r2
 8006ddc:	3304      	adds	r3, #4
 8006dde:	e00b      	b.n	8006df8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006de6:	4613      	mov	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	4413      	add	r3, r2
 8006df6:	3304      	adds	r3, #4
 8006df8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <USBD_StdEPReq+0x264>
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	2b80      	cmp	r3, #128	; 0x80
 8006e04:	d103      	bne.n	8006e0e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	e00e      	b.n	8006e2c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 f890 	bl	8007f38 <USBD_LL_IsStallEP>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2201      	movs	r2, #1
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	e002      	b.n	8006e2c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fbb7 	bl	80075a6 <USBD_CtlSendData>
              break;
 8006e38:	e004      	b.n	8006e44 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fb41 	bl	80074c4 <USBD_CtlError>
              break;
 8006e42:	bf00      	nop
          }
          break;
 8006e44:	e004      	b.n	8006e50 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fb3b 	bl	80074c4 <USBD_CtlError>
          break;
 8006e4e:	bf00      	nop
      }
      break;
 8006e50:	e004      	b.n	8006e5c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fb35 	bl	80074c4 <USBD_CtlError>
      break;
 8006e5a:	bf00      	nop
  }

  return ret;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	885b      	ldrh	r3, [r3, #2]
 8006e82:	0a1b      	lsrs	r3, r3, #8
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	2b06      	cmp	r3, #6
 8006e8a:	f200 8128 	bhi.w	80070de <USBD_GetDescriptor+0x276>
 8006e8e:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <USBD_GetDescriptor+0x2c>)
 8006e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e94:	08006eb1 	.word	0x08006eb1
 8006e98:	08006ec9 	.word	0x08006ec9
 8006e9c:	08006f09 	.word	0x08006f09
 8006ea0:	080070df 	.word	0x080070df
 8006ea4:	080070df 	.word	0x080070df
 8006ea8:	0800707f 	.word	0x0800707f
 8006eac:	080070ab 	.word	0x080070ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	7c12      	ldrb	r2, [r2, #16]
 8006ebc:	f107 0108 	add.w	r1, r7, #8
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	60f8      	str	r0, [r7, #12]
      break;
 8006ec6:	e112      	b.n	80070ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	7c1b      	ldrb	r3, [r3, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10d      	bne.n	8006eec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed8:	f107 0208 	add.w	r2, r7, #8
 8006edc:	4610      	mov	r0, r2
 8006ede:	4798      	blx	r3
 8006ee0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006eea:	e100      	b.n	80070ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	f107 0208 	add.w	r2, r7, #8
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4798      	blx	r3
 8006efc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	2202      	movs	r2, #2
 8006f04:	701a      	strb	r2, [r3, #0]
      break;
 8006f06:	e0f2      	b.n	80070ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	885b      	ldrh	r3, [r3, #2]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b05      	cmp	r3, #5
 8006f10:	f200 80ac 	bhi.w	800706c <USBD_GetDescriptor+0x204>
 8006f14:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <USBD_GetDescriptor+0xb4>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f35 	.word	0x08006f35
 8006f20:	08006f69 	.word	0x08006f69
 8006f24:	08006f9d 	.word	0x08006f9d
 8006f28:	08006fd1 	.word	0x08006fd1
 8006f2c:	08007005 	.word	0x08007005
 8006f30:	08007039 	.word	0x08007039
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	7c12      	ldrb	r2, [r2, #16]
 8006f4c:	f107 0108 	add.w	r1, r7, #8
 8006f50:	4610      	mov	r0, r2
 8006f52:	4798      	blx	r3
 8006f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f56:	e091      	b.n	800707c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fab2 	bl	80074c4 <USBD_CtlError>
            err++;
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	3301      	adds	r3, #1
 8006f64:	72fb      	strb	r3, [r7, #11]
          break;
 8006f66:	e089      	b.n	800707c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	7c12      	ldrb	r2, [r2, #16]
 8006f80:	f107 0108 	add.w	r1, r7, #8
 8006f84:	4610      	mov	r0, r2
 8006f86:	4798      	blx	r3
 8006f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f8a:	e077      	b.n	800707c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa98 	bl	80074c4 <USBD_CtlError>
            err++;
 8006f94:	7afb      	ldrb	r3, [r7, #11]
 8006f96:	3301      	adds	r3, #1
 8006f98:	72fb      	strb	r3, [r7, #11]
          break;
 8006f9a:	e06f      	b.n	800707c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00b      	beq.n	8006fc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	7c12      	ldrb	r2, [r2, #16]
 8006fb4:	f107 0108 	add.w	r1, r7, #8
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4798      	blx	r3
 8006fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fbe:	e05d      	b.n	800707c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa7e 	bl	80074c4 <USBD_CtlError>
            err++;
 8006fc8:	7afb      	ldrb	r3, [r7, #11]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fce:	e055      	b.n	800707c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	7c12      	ldrb	r2, [r2, #16]
 8006fe8:	f107 0108 	add.w	r1, r7, #8
 8006fec:	4610      	mov	r0, r2
 8006fee:	4798      	blx	r3
 8006ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ff2:	e043      	b.n	800707c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fa64 	bl	80074c4 <USBD_CtlError>
            err++;
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	3301      	adds	r3, #1
 8007000:	72fb      	strb	r3, [r7, #11]
          break;
 8007002:	e03b      	b.n	800707c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00b      	beq.n	8007028 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	7c12      	ldrb	r2, [r2, #16]
 800701c:	f107 0108 	add.w	r1, r7, #8
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
 8007024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007026:	e029      	b.n	800707c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa4a 	bl	80074c4 <USBD_CtlError>
            err++;
 8007030:	7afb      	ldrb	r3, [r7, #11]
 8007032:	3301      	adds	r3, #1
 8007034:	72fb      	strb	r3, [r7, #11]
          break;
 8007036:	e021      	b.n	800707c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	7c12      	ldrb	r2, [r2, #16]
 8007050:	f107 0108 	add.w	r1, r7, #8
 8007054:	4610      	mov	r0, r2
 8007056:	4798      	blx	r3
 8007058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800705a:	e00f      	b.n	800707c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa30 	bl	80074c4 <USBD_CtlError>
            err++;
 8007064:	7afb      	ldrb	r3, [r7, #11]
 8007066:	3301      	adds	r3, #1
 8007068:	72fb      	strb	r3, [r7, #11]
          break;
 800706a:	e007      	b.n	800707c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa28 	bl	80074c4 <USBD_CtlError>
          err++;
 8007074:	7afb      	ldrb	r3, [r7, #11]
 8007076:	3301      	adds	r3, #1
 8007078:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800707a:	bf00      	nop
      }
      break;
 800707c:	e037      	b.n	80070ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	7c1b      	ldrb	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708e:	f107 0208 	add.w	r2, r7, #8
 8007092:	4610      	mov	r0, r2
 8007094:	4798      	blx	r3
 8007096:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007098:	e029      	b.n	80070ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa11 	bl	80074c4 <USBD_CtlError>
        err++;
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	3301      	adds	r3, #1
 80070a6:	72fb      	strb	r3, [r7, #11]
      break;
 80070a8:	e021      	b.n	80070ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7c1b      	ldrb	r3, [r3, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10d      	bne.n	80070ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	f107 0208 	add.w	r2, r7, #8
 80070be:	4610      	mov	r0, r2
 80070c0:	4798      	blx	r3
 80070c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	2207      	movs	r2, #7
 80070ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070cc:	e00f      	b.n	80070ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f9f7 	bl	80074c4 <USBD_CtlError>
        err++;
 80070d6:	7afb      	ldrb	r3, [r7, #11]
 80070d8:	3301      	adds	r3, #1
 80070da:	72fb      	strb	r3, [r7, #11]
      break;
 80070dc:	e007      	b.n	80070ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f9ef 	bl	80074c4 <USBD_CtlError>
      err++;
 80070e6:	7afb      	ldrb	r3, [r7, #11]
 80070e8:	3301      	adds	r3, #1
 80070ea:	72fb      	strb	r3, [r7, #11]
      break;
 80070ec:	bf00      	nop
  }

  if (err != 0U)
 80070ee:	7afb      	ldrb	r3, [r7, #11]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d11e      	bne.n	8007132 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	88db      	ldrh	r3, [r3, #6]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d016      	beq.n	800712a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80070fc:	893b      	ldrh	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00e      	beq.n	8007120 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	88da      	ldrh	r2, [r3, #6]
 8007106:	893b      	ldrh	r3, [r7, #8]
 8007108:	4293      	cmp	r3, r2
 800710a:	bf28      	it	cs
 800710c:	4613      	movcs	r3, r2
 800710e:	b29b      	uxth	r3, r3
 8007110:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007112:	893b      	ldrh	r3, [r7, #8]
 8007114:	461a      	mov	r2, r3
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fa44 	bl	80075a6 <USBD_CtlSendData>
 800711e:	e009      	b.n	8007134 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f9ce 	bl	80074c4 <USBD_CtlError>
 8007128:	e004      	b.n	8007134 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fa95 	bl	800765a <USBD_CtlSendStatus>
 8007130:	e000      	b.n	8007134 <USBD_GetDescriptor+0x2cc>
    return;
 8007132:	bf00      	nop
  }
}
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop

0800713c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	889b      	ldrh	r3, [r3, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d131      	bne.n	80071b2 <USBD_SetAddress+0x76>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	88db      	ldrh	r3, [r3, #6]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d12d      	bne.n	80071b2 <USBD_SetAddress+0x76>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	885b      	ldrh	r3, [r3, #2]
 800715a:	2b7f      	cmp	r3, #127	; 0x7f
 800715c:	d829      	bhi.n	80071b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	885b      	ldrh	r3, [r3, #2]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007168:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b03      	cmp	r3, #3
 8007174:	d104      	bne.n	8007180 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f9a3 	bl	80074c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717e:	e01d      	b.n	80071bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7bfa      	ldrb	r2, [r7, #15]
 8007184:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 feff 	bl	8007f90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa61 	bl	800765a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d004      	beq.n	80071a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2202      	movs	r2, #2
 80071a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a6:	e009      	b.n	80071bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b0:	e004      	b.n	80071bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f985 	bl	80074c4 <USBD_CtlError>
  }
}
 80071ba:	bf00      	nop
 80071bc:	bf00      	nop
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	885b      	ldrh	r3, [r3, #2]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	4b4c      	ldr	r3, [pc, #304]	; (800730c <USBD_SetConfig+0x148>)
 80071da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071dc:	4b4b      	ldr	r3, [pc, #300]	; (800730c <USBD_SetConfig+0x148>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d905      	bls.n	80071f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f96c 	bl	80074c4 <USBD_CtlError>
    return USBD_FAIL;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e088      	b.n	8007302 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d002      	beq.n	8007202 <USBD_SetConfig+0x3e>
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d025      	beq.n	800724c <USBD_SetConfig+0x88>
 8007200:	e071      	b.n	80072e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007202:	4b42      	ldr	r3, [pc, #264]	; (800730c <USBD_SetConfig+0x148>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d01c      	beq.n	8007244 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800720a:	4b40      	ldr	r3, [pc, #256]	; (800730c <USBD_SetConfig+0x148>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007214:	4b3d      	ldr	r3, [pc, #244]	; (800730c <USBD_SetConfig+0x148>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff f948 	bl	80064b0 <USBD_SetClassConfig>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d004      	beq.n	8007234 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f949 	bl	80074c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007232:	e065      	b.n	8007300 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fa10 	bl	800765a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2203      	movs	r2, #3
 800723e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007242:	e05d      	b.n	8007300 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fa08 	bl	800765a <USBD_CtlSendStatus>
      break;
 800724a:	e059      	b.n	8007300 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800724c:	4b2f      	ldr	r3, [pc, #188]	; (800730c <USBD_SetConfig+0x148>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d112      	bne.n	800727a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800725c:	4b2b      	ldr	r3, [pc, #172]	; (800730c <USBD_SetConfig+0x148>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007266:	4b29      	ldr	r3, [pc, #164]	; (800730c <USBD_SetConfig+0x148>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff f93b 	bl	80064e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f9f1 	bl	800765a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007278:	e042      	b.n	8007300 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800727a:	4b24      	ldr	r3, [pc, #144]	; (800730c <USBD_SetConfig+0x148>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	429a      	cmp	r2, r3
 8007286:	d02a      	beq.n	80072de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff f929 	bl	80064e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007296:	4b1d      	ldr	r3, [pc, #116]	; (800730c <USBD_SetConfig+0x148>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072a0:	4b1a      	ldr	r3, [pc, #104]	; (800730c <USBD_SetConfig+0x148>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff f902 	bl	80064b0 <USBD_SetClassConfig>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00f      	beq.n	80072d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f903 	bl	80074c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff f90e 	bl	80064e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072d4:	e014      	b.n	8007300 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f9bf 	bl	800765a <USBD_CtlSendStatus>
      break;
 80072dc:	e010      	b.n	8007300 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f9bb 	bl	800765a <USBD_CtlSendStatus>
      break;
 80072e4:	e00c      	b.n	8007300 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f8eb 	bl	80074c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <USBD_SetConfig+0x148>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff f8f7 	bl	80064e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80072fa:	2303      	movs	r3, #3
 80072fc:	73fb      	strb	r3, [r7, #15]
      break;
 80072fe:	bf00      	nop
  }

  return ret;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	2000019c 	.word	0x2000019c

08007310 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	88db      	ldrh	r3, [r3, #6]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d004      	beq.n	800732c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f8cd 	bl	80074c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800732a:	e023      	b.n	8007374 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	dc02      	bgt.n	800733e <USBD_GetConfig+0x2e>
 8007338:	2b00      	cmp	r3, #0
 800733a:	dc03      	bgt.n	8007344 <USBD_GetConfig+0x34>
 800733c:	e015      	b.n	800736a <USBD_GetConfig+0x5a>
 800733e:	2b03      	cmp	r3, #3
 8007340:	d00b      	beq.n	800735a <USBD_GetConfig+0x4a>
 8007342:	e012      	b.n	800736a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3308      	adds	r3, #8
 800734e:	2201      	movs	r2, #1
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f927 	bl	80075a6 <USBD_CtlSendData>
        break;
 8007358:	e00c      	b.n	8007374 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	2201      	movs	r2, #1
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f91f 	bl	80075a6 <USBD_CtlSendData>
        break;
 8007368:	e004      	b.n	8007374 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8a9 	bl	80074c4 <USBD_CtlError>
        break;
 8007372:	bf00      	nop
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738c:	b2db      	uxtb	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	2b02      	cmp	r3, #2
 8007392:	d81e      	bhi.n	80073d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	88db      	ldrh	r3, [r3, #6]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d004      	beq.n	80073a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f890 	bl	80074c4 <USBD_CtlError>
        break;
 80073a4:	e01a      	b.n	80073dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d005      	beq.n	80073c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f043 0202 	orr.w	r2, r3, #2
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	330c      	adds	r3, #12
 80073c6:	2202      	movs	r2, #2
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f8eb 	bl	80075a6 <USBD_CtlSendData>
      break;
 80073d0:	e004      	b.n	80073dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f875 	bl	80074c4 <USBD_CtlError>
      break;
 80073da:	bf00      	nop
  }
}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	885b      	ldrh	r3, [r3, #2]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d106      	bne.n	8007404 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f92b 	bl	800765a <USBD_CtlSendStatus>
  }
}
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741c:	b2db      	uxtb	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	2b02      	cmp	r3, #2
 8007422:	d80b      	bhi.n	800743c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	885b      	ldrh	r3, [r3, #2]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d10c      	bne.n	8007446 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f910 	bl	800765a <USBD_CtlSendStatus>
      }
      break;
 800743a:	e004      	b.n	8007446 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f840 	bl	80074c4 <USBD_CtlError>
      break;
 8007444:	e000      	b.n	8007448 <USBD_ClrFeature+0x3c>
      break;
 8007446:	bf00      	nop
  }
}
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	781a      	ldrb	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3301      	adds	r3, #1
 800746a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f7ff fabb 	bl	80069f6 <SWAPBYTE>
 8007480:	4603      	mov	r3, r0
 8007482:	461a      	mov	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3301      	adds	r3, #1
 8007492:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f7ff faae 	bl	80069f6 <SWAPBYTE>
 800749a:	4603      	mov	r3, r0
 800749c:	461a      	mov	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3301      	adds	r3, #1
 80074a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff faa1 	bl	80069f6 <SWAPBYTE>
 80074b4:	4603      	mov	r3, r0
 80074b6:	461a      	mov	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	80da      	strh	r2, [r3, #6]
}
 80074bc:	bf00      	nop
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ce:	2180      	movs	r1, #128	; 0x80
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fcf3 	bl	8007ebc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80074d6:	2100      	movs	r1, #0
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fcef 	bl	8007ebc <USBD_LL_StallEP>
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b086      	sub	sp, #24
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d036      	beq.n	800756a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007500:	6938      	ldr	r0, [r7, #16]
 8007502:	f000 f836 	bl	8007572 <USBD_GetLen>
 8007506:	4603      	mov	r3, r0
 8007508:	3301      	adds	r3, #1
 800750a:	b29b      	uxth	r3, r3
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	4413      	add	r3, r2
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	7812      	ldrb	r2, [r2, #0]
 800751e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	3301      	adds	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	4413      	add	r3, r2
 800752c:	2203      	movs	r2, #3
 800752e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	3301      	adds	r3, #1
 8007534:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007536:	e013      	b.n	8007560 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	4413      	add	r3, r2
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	3301      	adds	r3, #1
 8007548:	613b      	str	r3, [r7, #16]
    idx++;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	3301      	adds	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	4413      	add	r3, r2
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
    idx++;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	3301      	adds	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e7      	bne.n	8007538 <USBD_GetString+0x52>
 8007568:	e000      	b.n	800756c <USBD_GetString+0x86>
    return;
 800756a:	bf00      	nop
  }
}
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007572:	b480      	push	{r7}
 8007574:	b085      	sub	sp, #20
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007582:	e005      	b.n	8007590 <USBD_GetLen+0x1e>
  {
    len++;
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	3301      	adds	r3, #1
 8007588:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	3301      	adds	r3, #1
 800758e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1f5      	bne.n	8007584 <USBD_GetLen+0x12>
  }

  return len;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	60f8      	str	r0, [r7, #12]
 80075ae:	60b9      	str	r1, [r7, #8]
 80075b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2202      	movs	r2, #2
 80075b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	2100      	movs	r1, #0
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fcfe 	bl	8007fce <USBD_LL_Transmit>

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	2100      	movs	r1, #0
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fced 	bl	8007fce <USBD_LL_Transmit>

  return USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2203      	movs	r2, #3
 800760e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	2100      	movs	r1, #0
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fcf1 	bl	8008010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	2100      	movs	r1, #0
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fce0 	bl	8008010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2204      	movs	r2, #4
 8007666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800766a:	2300      	movs	r3, #0
 800766c:	2200      	movs	r2, #0
 800766e:	2100      	movs	r1, #0
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fcac 	bl	8007fce <USBD_LL_Transmit>

  return USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2205      	movs	r2, #5
 800768c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007690:	2300      	movs	r3, #0
 8007692:	2200      	movs	r2, #0
 8007694:	2100      	movs	r1, #0
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fcba 	bl	8008010 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80076ac:	2200      	movs	r2, #0
 80076ae:	4912      	ldr	r1, [pc, #72]	; (80076f8 <MX_USB_DEVICE_Init+0x50>)
 80076b0:	4812      	ldr	r0, [pc, #72]	; (80076fc <MX_USB_DEVICE_Init+0x54>)
 80076b2:	f7fe fe8f 	bl	80063d4 <USBD_Init>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80076bc:	f7f9 fbdc 	bl	8000e78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80076c0:	490f      	ldr	r1, [pc, #60]	; (8007700 <MX_USB_DEVICE_Init+0x58>)
 80076c2:	480e      	ldr	r0, [pc, #56]	; (80076fc <MX_USB_DEVICE_Init+0x54>)
 80076c4:	f7fe feb6 	bl	8006434 <USBD_RegisterClass>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076ce:	f7f9 fbd3 	bl	8000e78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076d2:	490c      	ldr	r1, [pc, #48]	; (8007704 <MX_USB_DEVICE_Init+0x5c>)
 80076d4:	4809      	ldr	r0, [pc, #36]	; (80076fc <MX_USB_DEVICE_Init+0x54>)
 80076d6:	f7fe fdd7 	bl	8006288 <USBD_CDC_RegisterInterface>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076e0:	f7f9 fbca 	bl	8000e78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076e4:	4805      	ldr	r0, [pc, #20]	; (80076fc <MX_USB_DEVICE_Init+0x54>)
 80076e6:	f7fe fecc 	bl	8006482 <USBD_Start>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076f0:	f7f9 fbc2 	bl	8000e78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076f4:	bf00      	nop
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20000130 	.word	0x20000130
 80076fc:	20000554 	.word	0x20000554
 8007700:	20000018 	.word	0x20000018
 8007704:	2000011c 	.word	0x2000011c

08007708 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800770c:	2200      	movs	r2, #0
 800770e:	4905      	ldr	r1, [pc, #20]	; (8007724 <CDC_Init_FS+0x1c>)
 8007710:	4805      	ldr	r0, [pc, #20]	; (8007728 <CDC_Init_FS+0x20>)
 8007712:	f7fe fdce 	bl	80062b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007716:	4905      	ldr	r1, [pc, #20]	; (800772c <CDC_Init_FS+0x24>)
 8007718:	4803      	ldr	r0, [pc, #12]	; (8007728 <CDC_Init_FS+0x20>)
 800771a:	f7fe fde8 	bl	80062ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800771e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007720:	4618      	mov	r0, r3
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20001024 	.word	0x20001024
 8007728:	20000554 	.word	0x20000554
 800772c:	20000824 	.word	0x20000824

08007730 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007734:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007736:	4618      	mov	r0, r3
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	71fb      	strb	r3, [r7, #7]
 800774c:	4613      	mov	r3, r2
 800774e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007750:	79fb      	ldrb	r3, [r7, #7]
 8007752:	2b23      	cmp	r3, #35	; 0x23
 8007754:	d84a      	bhi.n	80077ec <CDC_Control_FS+0xac>
 8007756:	a201      	add	r2, pc, #4	; (adr r2, 800775c <CDC_Control_FS+0x1c>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	080077ed 	.word	0x080077ed
 8007760:	080077ed 	.word	0x080077ed
 8007764:	080077ed 	.word	0x080077ed
 8007768:	080077ed 	.word	0x080077ed
 800776c:	080077ed 	.word	0x080077ed
 8007770:	080077ed 	.word	0x080077ed
 8007774:	080077ed 	.word	0x080077ed
 8007778:	080077ed 	.word	0x080077ed
 800777c:	080077ed 	.word	0x080077ed
 8007780:	080077ed 	.word	0x080077ed
 8007784:	080077ed 	.word	0x080077ed
 8007788:	080077ed 	.word	0x080077ed
 800778c:	080077ed 	.word	0x080077ed
 8007790:	080077ed 	.word	0x080077ed
 8007794:	080077ed 	.word	0x080077ed
 8007798:	080077ed 	.word	0x080077ed
 800779c:	080077ed 	.word	0x080077ed
 80077a0:	080077ed 	.word	0x080077ed
 80077a4:	080077ed 	.word	0x080077ed
 80077a8:	080077ed 	.word	0x080077ed
 80077ac:	080077ed 	.word	0x080077ed
 80077b0:	080077ed 	.word	0x080077ed
 80077b4:	080077ed 	.word	0x080077ed
 80077b8:	080077ed 	.word	0x080077ed
 80077bc:	080077ed 	.word	0x080077ed
 80077c0:	080077ed 	.word	0x080077ed
 80077c4:	080077ed 	.word	0x080077ed
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	080077ed 	.word	0x080077ed
 80077d0:	080077ed 	.word	0x080077ed
 80077d4:	080077ed 	.word	0x080077ed
 80077d8:	080077ed 	.word	0x080077ed
 80077dc:	080077ed 	.word	0x080077ed
 80077e0:	080077ed 	.word	0x080077ed
 80077e4:	080077ed 	.word	0x080077ed
 80077e8:	080077ed 	.word	0x080077ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077ec:	bf00      	nop
  }

  return (USBD_OK);
 80077ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	4806      	ldr	r0, [pc, #24]	; (8007824 <CDC_Receive_FS+0x28>)
 800780a:	f7fe fd70 	bl	80062ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800780e:	4805      	ldr	r0, [pc, #20]	; (8007824 <CDC_Receive_FS+0x28>)
 8007810:	f7fe fdb6 	bl	8006380 <USBD_CDC_ReceivePacket>
  recvUSBStruct = (struct recvUSBStruct_t*)(Buf);
 8007814:	4a04      	ldr	r2, [pc, #16]	; (8007828 <CDC_Receive_FS+0x2c>)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6013      	str	r3, [r2, #0]
  return (USBD_OK);
 800781a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000554 	.word	0x20000554
 8007828:	200004bc 	.word	0x200004bc

0800782c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800783c:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <CDC_Transmit_FS+0x48>)
 800783e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007842:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800784e:	2301      	movs	r3, #1
 8007850:	e00b      	b.n	800786a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007852:	887b      	ldrh	r3, [r7, #2]
 8007854:	461a      	mov	r2, r3
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	4806      	ldr	r0, [pc, #24]	; (8007874 <CDC_Transmit_FS+0x48>)
 800785a:	f7fe fd2a 	bl	80062b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800785e:	4805      	ldr	r0, [pc, #20]	; (8007874 <CDC_Transmit_FS+0x48>)
 8007860:	f7fe fd5e 	bl	8006320 <USBD_CDC_TransmitPacket>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000554 	.word	0x20000554

08007878 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800788a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800788e:	4618      	mov	r0, r3
 8007890:	371c      	adds	r7, #28
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
	...

0800789c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2212      	movs	r2, #18
 80078ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078ae:	4b03      	ldr	r3, [pc, #12]	; (80078bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	2000014c 	.word	0x2000014c

080078c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2204      	movs	r2, #4
 80078d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078d2:	4b03      	ldr	r3, [pc, #12]	; (80078e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	20000160 	.word	0x20000160

080078e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	6039      	str	r1, [r7, #0]
 80078ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d105      	bne.n	8007902 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	4907      	ldr	r1, [pc, #28]	; (8007918 <USBD_FS_ProductStrDescriptor+0x34>)
 80078fa:	4808      	ldr	r0, [pc, #32]	; (800791c <USBD_FS_ProductStrDescriptor+0x38>)
 80078fc:	f7ff fdf3 	bl	80074e6 <USBD_GetString>
 8007900:	e004      	b.n	800790c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4904      	ldr	r1, [pc, #16]	; (8007918 <USBD_FS_ProductStrDescriptor+0x34>)
 8007906:	4805      	ldr	r0, [pc, #20]	; (800791c <USBD_FS_ProductStrDescriptor+0x38>)
 8007908:	f7ff fded 	bl	80074e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800790c:	4b02      	ldr	r3, [pc, #8]	; (8007918 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20001824 	.word	0x20001824
 800791c:	08008170 	.word	0x08008170

08007920 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	4904      	ldr	r1, [pc, #16]	; (8007940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007930:	4804      	ldr	r0, [pc, #16]	; (8007944 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007932:	f7ff fdd8 	bl	80074e6 <USBD_GetString>
  return USBD_StrDesc;
 8007936:	4b02      	ldr	r3, [pc, #8]	; (8007940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20001824 	.word	0x20001824
 8007944:	08008188 	.word	0x08008188

08007948 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	221a      	movs	r2, #26
 8007958:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800795a:	f000 f843 	bl	80079e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800795e:	4b02      	ldr	r3, [pc, #8]	; (8007968 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000164 	.word	0x20000164

0800796c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	6039      	str	r1, [r7, #0]
 8007976:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007978:	79fb      	ldrb	r3, [r7, #7]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d105      	bne.n	800798a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	4907      	ldr	r1, [pc, #28]	; (80079a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007982:	4808      	ldr	r0, [pc, #32]	; (80079a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007984:	f7ff fdaf 	bl	80074e6 <USBD_GetString>
 8007988:	e004      	b.n	8007994 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	4904      	ldr	r1, [pc, #16]	; (80079a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800798e:	4805      	ldr	r0, [pc, #20]	; (80079a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007990:	f7ff fda9 	bl	80074e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007994:	4b02      	ldr	r3, [pc, #8]	; (80079a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20001824 	.word	0x20001824
 80079a4:	0800819c 	.word	0x0800819c

080079a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	6039      	str	r1, [r7, #0]
 80079b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d105      	bne.n	80079c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	4907      	ldr	r1, [pc, #28]	; (80079dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079be:	4808      	ldr	r0, [pc, #32]	; (80079e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079c0:	f7ff fd91 	bl	80074e6 <USBD_GetString>
 80079c4:	e004      	b.n	80079d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	4904      	ldr	r1, [pc, #16]	; (80079dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ca:	4805      	ldr	r0, [pc, #20]	; (80079e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079cc:	f7ff fd8b 	bl	80074e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079d0:	4b02      	ldr	r3, [pc, #8]	; (80079dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20001824 	.word	0x20001824
 80079e0:	080081a8 	.word	0x080081a8

080079e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ea:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <Get_SerialNum+0x44>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079f0:	4b0e      	ldr	r3, [pc, #56]	; (8007a2c <Get_SerialNum+0x48>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079f6:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <Get_SerialNum+0x4c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a0a:	2208      	movs	r2, #8
 8007a0c:	4909      	ldr	r1, [pc, #36]	; (8007a34 <Get_SerialNum+0x50>)
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f814 	bl	8007a3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a14:	2204      	movs	r2, #4
 8007a16:	4908      	ldr	r1, [pc, #32]	; (8007a38 <Get_SerialNum+0x54>)
 8007a18:	68b8      	ldr	r0, [r7, #8]
 8007a1a:	f000 f80f 	bl	8007a3c <IntToUnicode>
  }
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	1fff7a10 	.word	0x1fff7a10
 8007a2c:	1fff7a14 	.word	0x1fff7a14
 8007a30:	1fff7a18 	.word	0x1fff7a18
 8007a34:	20000166 	.word	0x20000166
 8007a38:	20000176 	.word	0x20000176

08007a3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75fb      	strb	r3, [r7, #23]
 8007a52:	e027      	b.n	8007aa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	0f1b      	lsrs	r3, r3, #28
 8007a58:	2b09      	cmp	r3, #9
 8007a5a:	d80b      	bhi.n	8007a74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	0f1b      	lsrs	r3, r3, #28
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	4619      	mov	r1, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	440b      	add	r3, r1
 8007a6c:	3230      	adds	r2, #48	; 0x30
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	e00a      	b.n	8007a8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	0f1b      	lsrs	r3, r3, #28
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	440b      	add	r3, r1
 8007a84:	3237      	adds	r2, #55	; 0x37
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	3301      	adds	r3, #1
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	4413      	add	r3, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	75fb      	strb	r3, [r7, #23]
 8007aa4:	7dfa      	ldrb	r2, [r7, #23]
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d3d3      	bcc.n	8007a54 <IntToUnicode+0x18>
  }
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	; 0x28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac4:	f107 0314 	add.w	r3, r7, #20
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	609a      	str	r2, [r3, #8]
 8007ad0:	60da      	str	r2, [r3, #12]
 8007ad2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007adc:	d147      	bne.n	8007b6e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ade:	2300      	movs	r3, #0
 8007ae0:	613b      	str	r3, [r7, #16]
 8007ae2:	4b25      	ldr	r3, [pc, #148]	; (8007b78 <HAL_PCD_MspInit+0xbc>)
 8007ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae6:	4a24      	ldr	r2, [pc, #144]	; (8007b78 <HAL_PCD_MspInit+0xbc>)
 8007ae8:	f043 0301 	orr.w	r3, r3, #1
 8007aec:	6313      	str	r3, [r2, #48]	; 0x30
 8007aee:	4b22      	ldr	r3, [pc, #136]	; (8007b78 <HAL_PCD_MspInit+0xbc>)
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b00:	2300      	movs	r3, #0
 8007b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007b08:	f107 0314 	add.w	r3, r7, #20
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	481b      	ldr	r0, [pc, #108]	; (8007b7c <HAL_PCD_MspInit+0xc0>)
 8007b10:	f7f9 fdbe 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007b14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b22:	2300      	movs	r3, #0
 8007b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b26:	230a      	movs	r3, #10
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b2a:	f107 0314 	add.w	r3, r7, #20
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4812      	ldr	r0, [pc, #72]	; (8007b7c <HAL_PCD_MspInit+0xc0>)
 8007b32:	f7f9 fdad 	bl	8001690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b36:	4b10      	ldr	r3, [pc, #64]	; (8007b78 <HAL_PCD_MspInit+0xbc>)
 8007b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3a:	4a0f      	ldr	r2, [pc, #60]	; (8007b78 <HAL_PCD_MspInit+0xbc>)
 8007b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b40:	6353      	str	r3, [r2, #52]	; 0x34
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <HAL_PCD_MspInit+0xbc>)
 8007b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4a:	4a0b      	ldr	r2, [pc, #44]	; (8007b78 <HAL_PCD_MspInit+0xbc>)
 8007b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b50:	6453      	str	r3, [r2, #68]	; 0x44
 8007b52:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <HAL_PCD_MspInit+0xbc>)
 8007b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2100      	movs	r1, #0
 8007b62:	2043      	movs	r0, #67	; 0x43
 8007b64:	f7f9 fd3b 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b68:	2043      	movs	r0, #67	; 0x43
 8007b6a:	f7f9 fd54 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b6e:	bf00      	nop
 8007b70:	3728      	adds	r7, #40	; 0x28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	40020000 	.word	0x40020000

08007b80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f7fe fcbe 	bl	8006518 <USBD_LL_SetupStage>
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	1a9b      	subs	r3, r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f7fe fcf8 	bl	80065c2 <USBD_LL_DataOutStage>
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007bec:	78fa      	ldrb	r2, [r7, #3]
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	1a9b      	subs	r3, r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	3348      	adds	r3, #72	; 0x48
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	4619      	mov	r1, r3
 8007c02:	f7fe fd41 	bl	8006688 <USBD_LL_DataInStage>
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe fe55 	bl	80068cc <USBD_LL_SOF>
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c32:	2301      	movs	r3, #1
 8007c34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73fb      	strb	r3, [r7, #15]
 8007c42:	e008      	b.n	8007c56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d102      	bne.n	8007c52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
 8007c50:	e001      	b.n	8007c56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c52:	f7f9 f911 	bl	8000e78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c5c:	7bfa      	ldrb	r2, [r7, #15]
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fdf5 	bl	8006850 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe fda1 	bl	80067b4 <USBD_LL_Reset>
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fdf0 	bl	8006870 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cb0:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <HAL_PCD_SuspendCallback+0x48>)
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	4a03      	ldr	r2, [pc, #12]	; (8007cc4 <HAL_PCD_SuspendCallback+0x48>)
 8007cb6:	f043 0306 	orr.w	r3, r3, #6
 8007cba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	e000ed00 	.word	0xe000ed00

08007cc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fde0 	bl	800689c <USBD_LL_Resume>
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fe2e 	bl	800695c <USBD_LL_IsoOUTIncomplete>
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d1a:	78fa      	ldrb	r2, [r7, #3]
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fdf6 	bl	8006910 <USBD_LL_IsoINIncomplete>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fe34 	bl	80069a8 <USBD_LL_DevConnected>
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe fe31 	bl	80069be <USBD_LL_DevDisconnected>
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d13c      	bne.n	8007dee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d74:	4a20      	ldr	r2, [pc, #128]	; (8007df8 <USBD_LL_Init+0x94>)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a1e      	ldr	r2, [pc, #120]	; (8007df8 <USBD_LL_Init+0x94>)
 8007d80:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d84:	4b1c      	ldr	r3, [pc, #112]	; (8007df8 <USBD_LL_Init+0x94>)
 8007d86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d8c:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <USBD_LL_Init+0x94>)
 8007d8e:	2204      	movs	r2, #4
 8007d90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d92:	4b19      	ldr	r3, [pc, #100]	; (8007df8 <USBD_LL_Init+0x94>)
 8007d94:	2202      	movs	r2, #2
 8007d96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d98:	4b17      	ldr	r3, [pc, #92]	; (8007df8 <USBD_LL_Init+0x94>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d9e:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <USBD_LL_Init+0x94>)
 8007da0:	2202      	movs	r2, #2
 8007da2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007da4:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <USBD_LL_Init+0x94>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007daa:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <USBD_LL_Init+0x94>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007db0:	4b11      	ldr	r3, [pc, #68]	; (8007df8 <USBD_LL_Init+0x94>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007db6:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <USBD_LL_Init+0x94>)
 8007db8:	2201      	movs	r2, #1
 8007dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	; (8007df8 <USBD_LL_Init+0x94>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007dc2:	480d      	ldr	r0, [pc, #52]	; (8007df8 <USBD_LL_Init+0x94>)
 8007dc4:	f7f9 ff5e 	bl	8001c84 <HAL_PCD_Init>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dce:	f7f9 f853 	bl	8000e78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007dd2:	2180      	movs	r1, #128	; 0x80
 8007dd4:	4808      	ldr	r0, [pc, #32]	; (8007df8 <USBD_LL_Init+0x94>)
 8007dd6:	f7fb f8bc 	bl	8002f52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007dda:	2240      	movs	r2, #64	; 0x40
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4806      	ldr	r0, [pc, #24]	; (8007df8 <USBD_LL_Init+0x94>)
 8007de0:	f7fb f870 	bl	8002ec4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007de4:	2280      	movs	r2, #128	; 0x80
 8007de6:	2101      	movs	r1, #1
 8007de8:	4803      	ldr	r0, [pc, #12]	; (8007df8 <USBD_LL_Init+0x94>)
 8007dea:	f7fb f86b 	bl	8002ec4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	20001a24 	.word	0x20001a24

08007dfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fa f853 	bl	8001ebe <HAL_PCD_Start>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 f942 	bl	80080a8 <USBD_Get_USB_Status>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	4608      	mov	r0, r1
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	461a      	mov	r2, r3
 8007e40:	4603      	mov	r3, r0
 8007e42:	70fb      	strb	r3, [r7, #3]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70bb      	strb	r3, [r7, #2]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e5a:	78bb      	ldrb	r3, [r7, #2]
 8007e5c:	883a      	ldrh	r2, [r7, #0]
 8007e5e:	78f9      	ldrb	r1, [r7, #3]
 8007e60:	f7fa fc37 	bl	80026d2 <HAL_PCD_EP_Open>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 f91c 	bl	80080a8 <USBD_Get_USB_Status>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e98:	78fa      	ldrb	r2, [r7, #3]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fa fc80 	bl	80027a2 <HAL_PCD_EP_Close>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 f8fd 	bl	80080a8 <USBD_Get_USB_Status>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ed6:	78fa      	ldrb	r2, [r7, #3]
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fa fd58 	bl	8002990 <HAL_PCD_EP_SetStall>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f8de 	bl	80080a8 <USBD_Get_USB_Status>
 8007eec:	4603      	mov	r3, r0
 8007eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f14:	78fa      	ldrb	r2, [r7, #3]
 8007f16:	4611      	mov	r1, r2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fa fd9d 	bl	8002a58 <HAL_PCD_EP_ClrStall>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 f8bf 	bl	80080a8 <USBD_Get_USB_Status>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	da0b      	bge.n	8007f6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f5a:	68f9      	ldr	r1, [r7, #12]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	333e      	adds	r3, #62	; 0x3e
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	e00b      	b.n	8007f84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f72:	68f9      	ldr	r1, [r7, #12]
 8007f74:	4613      	mov	r3, r2
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	1a9b      	subs	r3, r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fa fb6a 	bl	8002688 <HAL_PCD_SetAddress>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 f874 	bl	80080a8 <USBD_Get_USB_Status>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b086      	sub	sp, #24
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fec:	7af9      	ldrb	r1, [r7, #11]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	f7fa fc83 	bl	80028fc <HAL_PCD_EP_Transmit>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 f853 	bl	80080a8 <USBD_Get_USB_Status>
 8008002:	4603      	mov	r3, r0
 8008004:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008006:	7dbb      	ldrb	r3, [r7, #22]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	607a      	str	r2, [r7, #4]
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	460b      	mov	r3, r1
 800801e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800802e:	7af9      	ldrb	r1, [r7, #11]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	f7fa fbff 	bl	8002836 <HAL_PCD_EP_Receive>
 8008038:	4603      	mov	r3, r0
 800803a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 f832 	bl	80080a8 <USBD_Get_USB_Status>
 8008044:	4603      	mov	r3, r0
 8008046:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008048:	7dbb      	ldrb	r3, [r7, #22]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	4611      	mov	r1, r2
 8008068:	4618      	mov	r0, r3
 800806a:	f7fa fc2f 	bl	80028cc <HAL_PCD_EP_GetRxCount>
 800806e:	4603      	mov	r3, r0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008080:	4b03      	ldr	r3, [pc, #12]	; (8008090 <USBD_static_malloc+0x18>)
}
 8008082:	4618      	mov	r0, r3
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	200001a0 	.word	0x200001a0

08008094 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]

}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080b6:	79fb      	ldrb	r3, [r7, #7]
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d817      	bhi.n	80080ec <USBD_Get_USB_Status+0x44>
 80080bc:	a201      	add	r2, pc, #4	; (adr r2, 80080c4 <USBD_Get_USB_Status+0x1c>)
 80080be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c2:	bf00      	nop
 80080c4:	080080d5 	.word	0x080080d5
 80080c8:	080080db 	.word	0x080080db
 80080cc:	080080e1 	.word	0x080080e1
 80080d0:	080080e7 	.word	0x080080e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
    break;
 80080d8:	e00b      	b.n	80080f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080da:	2303      	movs	r3, #3
 80080dc:	73fb      	strb	r3, [r7, #15]
    break;
 80080de:	e008      	b.n	80080f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080e0:	2301      	movs	r3, #1
 80080e2:	73fb      	strb	r3, [r7, #15]
    break;
 80080e4:	e005      	b.n	80080f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080e6:	2303      	movs	r3, #3
 80080e8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ea:	e002      	b.n	80080f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080ec:	2303      	movs	r3, #3
 80080ee:	73fb      	strb	r3, [r7, #15]
    break;
 80080f0:	bf00      	nop
  }
  return usb_status;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <__libc_init_array>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	4d0d      	ldr	r5, [pc, #52]	; (8008138 <__libc_init_array+0x38>)
 8008104:	4c0d      	ldr	r4, [pc, #52]	; (800813c <__libc_init_array+0x3c>)
 8008106:	1b64      	subs	r4, r4, r5
 8008108:	10a4      	asrs	r4, r4, #2
 800810a:	2600      	movs	r6, #0
 800810c:	42a6      	cmp	r6, r4
 800810e:	d109      	bne.n	8008124 <__libc_init_array+0x24>
 8008110:	4d0b      	ldr	r5, [pc, #44]	; (8008140 <__libc_init_array+0x40>)
 8008112:	4c0c      	ldr	r4, [pc, #48]	; (8008144 <__libc_init_array+0x44>)
 8008114:	f000 f820 	bl	8008158 <_init>
 8008118:	1b64      	subs	r4, r4, r5
 800811a:	10a4      	asrs	r4, r4, #2
 800811c:	2600      	movs	r6, #0
 800811e:	42a6      	cmp	r6, r4
 8008120:	d105      	bne.n	800812e <__libc_init_array+0x2e>
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	f855 3b04 	ldr.w	r3, [r5], #4
 8008128:	4798      	blx	r3
 800812a:	3601      	adds	r6, #1
 800812c:	e7ee      	b.n	800810c <__libc_init_array+0xc>
 800812e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008132:	4798      	blx	r3
 8008134:	3601      	adds	r6, #1
 8008136:	e7f2      	b.n	800811e <__libc_init_array+0x1e>
 8008138:	080081d8 	.word	0x080081d8
 800813c:	080081d8 	.word	0x080081d8
 8008140:	080081d8 	.word	0x080081d8
 8008144:	080081dc 	.word	0x080081dc

08008148 <memset>:
 8008148:	4402      	add	r2, r0
 800814a:	4603      	mov	r3, r0
 800814c:	4293      	cmp	r3, r2
 800814e:	d100      	bne.n	8008152 <memset+0xa>
 8008150:	4770      	bx	lr
 8008152:	f803 1b01 	strb.w	r1, [r3], #1
 8008156:	e7f9      	b.n	800814c <memset+0x4>

08008158 <_init>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr

08008164 <_fini>:
 8008164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008166:	bf00      	nop
 8008168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816a:	bc08      	pop	{r3}
 800816c:	469e      	mov	lr, r3
 800816e:	4770      	bx	lr
