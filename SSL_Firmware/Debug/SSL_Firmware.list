
SSL_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a82c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800a9bc  0800a9bc  0001a9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afa8  0800afa8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800afa8  0800afa8  0001afa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afb0  0800afb0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afb0  0800afb0  0001afb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afb4  0800afb4  0001afb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800afb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001afc  200001e4  0800b19c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce0  0800b19c  00021ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f88e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004034  00000000  00000000  0003faa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001920  00000000  00000000  00043ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001770  00000000  00000000  000453f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025e50  00000000  00000000  00046b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000166b3  00000000  00000000  0006c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2be1  00000000  00000000  0008306b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155c4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d4c  00000000  00000000  00155cc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9a4 	.word	0x0800a9a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a9a4 	.word	0x0800a9a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b0a8      	sub	sp, #160	; 0xa0
 8000584:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fdf7 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f875 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fa67 	bl	8000a60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000592:	f000 f8f3 	bl	800077c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000596:	f000 f91f 	bl	80007d8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800059a:	f000 f94d 	bl	8000838 <MX_SPI1_Init>
  MX_TIM1_Init();
 800059e:	f000 f9b7 	bl	8000910 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80005a2:	f009 f8a7 	bl	80096f4 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80005a6:	f000 f97d 	bl	80008a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005aa:	482e      	ldr	r0, [pc, #184]	; (8000664 <main+0xe4>)
 80005ac:	f004 fcbc 	bl	8004f28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 80005b0:	2100      	movs	r1, #0
 80005b2:	482c      	ldr	r0, [pc, #176]	; (8000664 <main+0xe4>)
 80005b4:	f004 fd08 	bl	8004fc8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 80005b8:	2104      	movs	r1, #4
 80005ba:	482a      	ldr	r0, [pc, #168]	; (8000664 <main+0xe4>)
 80005bc:	f004 fd04 	bl	8004fc8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 80005c0:	2108      	movs	r1, #8
 80005c2:	4828      	ldr	r0, [pc, #160]	; (8000664 <main+0xe4>)
 80005c4:	f004 fd00 	bl	8004fc8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 80005c8:	210c      	movs	r1, #12
 80005ca:	4826      	ldr	r0, [pc, #152]	; (8000664 <main+0xe4>)
 80005cc:	f004 fcfc 	bl	8004fc8 <HAL_TIM_PWM_Start_IT>

  TIM1->CCR1 = 32768;
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <main+0xe8>)
 80005d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 32768;
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <main+0xe8>)
 80005da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005de:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 32768;
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <main+0xe8>)
 80005e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005e6:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 32768;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <main+0xe8>)
 80005ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005ee:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(1000);
 80005f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f4:	f000 fe32 	bl	800125c <HAL_Delay>
	for(int i=0; i<64; i++){
 80005f8:	2300      	movs	r3, #0
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
 80005fc:	e007      	b.n	800060e <main+0x8e>
		usbBuf[i] = 0;
 80005fe:	1d3a      	adds	r2, r7, #4
 8000600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000602:	4413      	add	r3, r2
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<64; i++){
 8000608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800060a:	3301      	adds	r3, #1
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
 800060e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000610:	2b3f      	cmp	r3, #63	; 0x3f
 8000612:	ddf4      	ble.n	80005fe <main+0x7e>
	}
	strcpy(usbBuf, "!!!Hello World!!!\n\r");
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4a15      	ldr	r2, [pc, #84]	; (800066c <main+0xec>)
 8000618:	461c      	mov	r4, r3
 800061a:	4615      	mov	r5, r2
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	682b      	ldr	r3, [r5, #0]
 8000622:	6023      	str	r3, [r4, #0]
  while(CDC_Transmit_FS(usbBuf, 19) == USBD_BUSY);
 8000624:	bf00      	nop
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2113      	movs	r1, #19
 800062a:	4618      	mov	r0, r3
 800062c:	f009 f920 	bl	8009870 <CDC_Transmit_FS>
 8000630:	4603      	mov	r3, r0
 8000632:	2b01      	cmp	r3, #1
 8000634:	d0f7      	beq.n	8000626 <main+0xa6>
  NRF24_begin(CE_GPIO_Port, CSN_Pin, CE_Pin, hspi2);
 8000636:	4c0e      	ldr	r4, [pc, #56]	; (8000670 <main+0xf0>)
 8000638:	4668      	mov	r0, sp
 800063a:	1d23      	adds	r3, r4, #4
 800063c:	2254      	movs	r2, #84	; 0x54
 800063e:	4619      	mov	r1, r3
 8000640:	f009 fda0 	bl	800a184 <memcpy>
 8000644:	6823      	ldr	r3, [r4, #0]
 8000646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800064a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0xf4>)
 8000650:	f006 fd58 	bl	8007104 <NRF24_begin>
  printRadioSettings();
 8000654:	f006 ff70 	bl	8007538 <printRadioSettings>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	//while(CDC_Transmit_FS(usbBuf, 19) == USBD_BUSY);
  	HAL_Delay(1000);
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f000 fdfe 	bl	800125c <HAL_Delay>
 8000660:	e7fa      	b.n	8000658 <main+0xd8>
 8000662:	bf00      	nop
 8000664:	20000320 	.word	0x20000320
 8000668:	40010000 	.word	0x40010000
 800066c:	0800a9bc 	.word	0x0800a9bc
 8000670:	20000274 	.word	0x20000274
 8000674:	40020400 	.word	0x40020400

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b098      	sub	sp, #96	; 0x60
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f009 fd87 	bl	800a19a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <SystemClock_Config+0xfc>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	4a30      	ldr	r2, [pc, #192]	; (8000774 <SystemClock_Config+0xfc>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <SystemClock_Config+0xfc>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <SystemClock_Config+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a2a      	ldr	r2, [pc, #168]	; (8000778 <SystemClock_Config+0x100>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <SystemClock_Config+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f6:	2308      	movs	r3, #8
 80006f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006fa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000704:	2307      	movs	r3, #7
 8000706:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800070c:	4618      	mov	r0, r3
 800070e:	f003 f80b 	bl	8003728 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000718:	f000 fab4 	bl	8000c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	2105      	movs	r1, #5
 800073a:	4618      	mov	r0, r3
 800073c:	f003 fa64 	bl	8003c08 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000746:	f000 fa9d 	bl	8000c84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800074a:	2301      	movs	r3, #1
 800074c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800074e:	23c0      	movs	r3, #192	; 0xc0
 8000750:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fc32 	bl	8003fc4 <HAL_RCCEx_PeriphCLKConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000766:	f000 fa8d 	bl	8000c84 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3760      	adds	r7, #96	; 0x60
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C1_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_I2C1_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C1_Init+0x50>)
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_I2C1_Init+0x58>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_I2C1_Init+0x50>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_I2C1_Init+0x50>)
 80007ba:	f001 f859 	bl	8001870 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 fa5e 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200002cc 	.word	0x200002cc
 80007d0:	40005400 	.word	0x40005400
 80007d4:	000186a0 	.word	0x000186a0

080007d8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_I2S3_Init+0x54>)
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <MX_I2S3_Init+0x58>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_I2S3_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_I2S3_Init+0x54>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_I2S3_Init+0x54>)
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <MX_I2S3_Init+0x5c>)
 8000802:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_I2S3_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_I2S3_Init+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_I2S3_Init+0x54>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_I2S3_Init+0x54>)
 8000818:	f001 f962 	bl	8001ae0 <HAL_I2S_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000822:	f000 fa2f 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200003b8 	.word	0x200003b8
 8000830:	40003c00 	.word	0x40003c00
 8000834:	00017700 	.word	0x00017700

08000838 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_SPI1_Init+0x64>)
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <MX_SPI1_Init+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_SPI1_Init+0x64>)
 8000844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_SPI1_Init+0x64>)
 8000864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000868:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_SPI1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_SPI1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_SPI1_Init+0x64>)
 8000884:	220a      	movs	r2, #10
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_SPI1_Init+0x64>)
 800088a:	f003 fcd9 	bl	8004240 <HAL_SPI_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000894:	f000 f9f6 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000360 	.word	0x20000360
 80008a0:	40013000 	.word	0x40013000

080008a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_SPI2_Init+0x64>)
 80008aa:	4a18      	ldr	r2, [pc, #96]	; (800090c <MX_SPI2_Init+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_SPI2_Init+0x64>)
 80008b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_SPI2_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_SPI2_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_SPI2_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_SPI2_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_SPI2_Init+0x64>)
 80008d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_SPI2_Init+0x64>)
 80008d8:	2220      	movs	r2, #32
 80008da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_SPI2_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_SPI2_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_SPI2_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_SPI2_Init+0x64>)
 80008f0:	220a      	movs	r2, #10
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_SPI2_Init+0x64>)
 80008f6:	f003 fca3 	bl	8004240 <HAL_SPI_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000900:	f000 f9c0 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000274 	.word	0x20000274
 800090c:	40003800 	.word	0x40003800

08000910 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b092      	sub	sp, #72	; 0x48
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2220      	movs	r2, #32
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f009 fc2d 	bl	800a19a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000940:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <MX_TIM1_Init+0x148>)
 8000942:	4a46      	ldr	r2, [pc, #280]	; (8000a5c <MX_TIM1_Init+0x14c>)
 8000944:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <MX_TIM1_Init+0x148>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <MX_TIM1_Init+0x148>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000952:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <MX_TIM1_Init+0x148>)
 8000954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000958:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <MX_TIM1_Init+0x148>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000960:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <MX_TIM1_Init+0x148>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <MX_TIM1_Init+0x148>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800096c:	483a      	ldr	r0, [pc, #232]	; (8000a58 <MX_TIM1_Init+0x148>)
 800096e:	f004 faff 	bl	8004f70 <HAL_TIM_PWM_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000978:	f000 f984 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097c:	2300      	movs	r3, #0
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000988:	4619      	mov	r1, r3
 800098a:	4833      	ldr	r0, [pc, #204]	; (8000a58 <MX_TIM1_Init+0x148>)
 800098c:	f004 fedc 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000996:	f000 f975 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099a:	2360      	movs	r3, #96	; 0x60
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	2200      	movs	r2, #0
 80009bc:	4619      	mov	r1, r3
 80009be:	4826      	ldr	r0, [pc, #152]	; (8000a58 <MX_TIM1_Init+0x148>)
 80009c0:	f004 fb86 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80009ca:	f000 f95b 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	2204      	movs	r2, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4820      	ldr	r0, [pc, #128]	; (8000a58 <MX_TIM1_Init+0x148>)
 80009d8:	f004 fb7a 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80009e2:	f000 f94f 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	2208      	movs	r2, #8
 80009ec:	4619      	mov	r1, r3
 80009ee:	481a      	ldr	r0, [pc, #104]	; (8000a58 <MX_TIM1_Init+0x148>)
 80009f0:	f004 fb6e 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80009fa:	f000 f943 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	220c      	movs	r2, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_TIM1_Init+0x148>)
 8000a08:	f004 fb62 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000a12:	f000 f937 	bl	8000c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4619      	mov	r1, r3
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM1_Init+0x148>)
 8000a3a:	f004 ff01 	bl	8005840 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000a44:	f000 f91e 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM1_Init+0x148>)
 8000a4a:	f000 faa3 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 8000a4e:	bf00      	nop
 8000a50:	3748      	adds	r7, #72	; 0x48
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000320 	.word	0x20000320
 8000a5c:	40010000 	.word	0x40010000

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
 8000a7a:	4b7b      	ldr	r3, [pc, #492]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a7a      	ldr	r2, [pc, #488]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b78      	ldr	r3, [pc, #480]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0310 	and.w	r3, r3, #16
 8000a8e:	61bb      	str	r3, [r7, #24]
 8000a90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	4b74      	ldr	r3, [pc, #464]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a73      	ldr	r2, [pc, #460]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b71      	ldr	r3, [pc, #452]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b6d      	ldr	r3, [pc, #436]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a6c      	ldr	r2, [pc, #432]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b6a      	ldr	r3, [pc, #424]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b66      	ldr	r3, [pc, #408]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a65      	ldr	r2, [pc, #404]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b63      	ldr	r3, [pc, #396]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b5f      	ldr	r3, [pc, #380]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a5e      	ldr	r2, [pc, #376]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b5c      	ldr	r3, [pc, #368]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b58      	ldr	r3, [pc, #352]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a57      	ldr	r2, [pc, #348]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b55      	ldr	r3, [pc, #340]	; (8000c68 <MX_GPIO_Init+0x208>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2108      	movs	r1, #8
 8000b22:	4852      	ldr	r0, [pc, #328]	; (8000c6c <MX_GPIO_Init+0x20c>)
 8000b24:	f000 fe8a 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4850      	ldr	r0, [pc, #320]	; (8000c70 <MX_GPIO_Init+0x210>)
 8000b2e:	f000 fe85 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000b38:	484e      	ldr	r0, [pc, #312]	; (8000c74 <MX_GPIO_Init+0x214>)
 8000b3a:	f000 fe7f 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b44:	484c      	ldr	r0, [pc, #304]	; (8000c78 <MX_GPIO_Init+0x218>)
 8000b46:	f000 fe79 	bl	800183c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4842      	ldr	r0, [pc, #264]	; (8000c6c <MX_GPIO_Init+0x20c>)
 8000b62:	f000 fcd1 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	483c      	ldr	r0, [pc, #240]	; (8000c70 <MX_GPIO_Init+0x210>)
 8000b7e:	f000 fcc3 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b82:	2308      	movs	r3, #8
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b92:	2305      	movs	r3, #5
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4834      	ldr	r0, [pc, #208]	; (8000c70 <MX_GPIO_Init+0x210>)
 8000b9e:	f000 fcb3 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ba6:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <MX_GPIO_Init+0x21c>)
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4832      	ldr	r0, [pc, #200]	; (8000c80 <MX_GPIO_Init+0x220>)
 8000bb6:	f000 fca7 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4829      	ldr	r0, [pc, #164]	; (8000c74 <MX_GPIO_Init+0x214>)
 8000bce:	f000 fc9b 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be4:	2305      	movs	r3, #5
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4821      	ldr	r0, [pc, #132]	; (8000c74 <MX_GPIO_Init+0x214>)
 8000bf0:	f000 fc8a 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000bf4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4819      	ldr	r0, [pc, #100]	; (8000c74 <MX_GPIO_Init+0x214>)
 8000c0e:	f000 fc7b 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c12:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c16:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4813      	ldr	r0, [pc, #76]	; (8000c78 <MX_GPIO_Init+0x218>)
 8000c2c:	f000 fc6c 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c30:	2320      	movs	r3, #32
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_GPIO_Init+0x218>)
 8000c44:	f000 fc60 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_GPIO_Init+0x21c>)
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_GPIO_Init+0x20c>)
 8000c5c:	f000 fc54 	bl	8001508 <HAL_GPIO_Init>

}
 8000c60:	bf00      	nop
 8000c62:	3730      	adds	r7, #48	; 0x30
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40020c00 	.word	0x40020c00
 8000c7c:	10120000 	.word	0x10120000
 8000c80:	40020000 	.word	0x40020000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f000 fbb4 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <HAL_I2C_MspInit+0x84>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12c      	bne.n	8000d60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d28:	2312      	movs	r3, #18
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d34:	2304      	movs	r3, #4
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_I2C_MspInit+0x8c>)
 8000d40:	f000 fbe2 	bl	8001508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_I2C_MspInit+0x88>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020400 	.word	0x40020400

08000d74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <HAL_I2S_MspInit+0xc0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d14a      	bne.n	8000e2c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a1f      	ldr	r2, [pc, #124]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_I2S_MspInit+0xc4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dea:	2310      	movs	r3, #16
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <HAL_I2S_MspInit+0xc8>)
 8000e06:	f000 fb7f 	bl	8001508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e0a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <HAL_I2S_MspInit+0xcc>)
 8000e28:	f000 fb6e 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40003c00 	.word	0x40003c00
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020800 	.word	0x40020800

08000e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a36      	ldr	r2, [pc, #216]	; (8000f3c <HAL_SPI_MspInit+0xf8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12c      	bne.n	8000ec0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a34      	ldr	r2, [pc, #208]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e9e:	23e0      	movs	r3, #224	; 0xe0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4822      	ldr	r0, [pc, #136]	; (8000f44 <HAL_SPI_MspInit+0x100>)
 8000eba:	f000 fb25 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ebe:	e039      	b.n	8000f34 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <HAL_SPI_MspInit+0x104>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d134      	bne.n	8000f34 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_SPI_MspInit+0xfc>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f02:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f14:	2305      	movs	r3, #5
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <HAL_SPI_MspInit+0x108>)
 8000f20:	f000 faf2 	bl	8001508 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2024      	movs	r0, #36	; 0x24
 8000f2a:	f000 fa94 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000f2e:	2024      	movs	r0, #36	; 0x24
 8000f30:	f000 faad 	bl	800148e <HAL_NVIC_EnableIRQ>
}
 8000f34:	bf00      	nop
 8000f36:	3730      	adds	r7, #48	; 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40013000 	.word	0x40013000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40003800 	.word	0x40003800
 8000f4c:	40020400 	.word	0x40020400

08000f50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d10d      	bne.n	8000f7e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_TIM_PWM_MspInit+0x40>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <HAL_TIM_PWM_MspInit+0x40>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_TIM_PWM_MspInit+0x40>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <HAL_TIM_MspPostInit+0x68>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d11e      	bne.n	8000ff4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_TIM_MspPostInit+0x6c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_TIM_MspPostInit+0x6c>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_TIM_MspPostInit+0x6c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000fd2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000fd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <HAL_TIM_MspPostInit+0x70>)
 8000ff0:	f000 fa8a 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010000 	.word	0x40010000
 8001000:	40023800 	.word	0x40023800
 8001004:	40021000 	.word	0x40021000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f8de 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <SPI2_IRQHandler+0x10>)
 800106a:	f003 fd2d 	bl	8004ac8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000274 	.word	0x20000274

08001078 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <OTG_FS_IRQHandler+0x10>)
 800107e:	f001 fb1f 	bl	80026c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200018d4 	.word	0x200018d4

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f009 f828 	bl	800a110 <__errno>
 80010c0:	4602      	mov	r2, r0
 80010c2:	230c      	movs	r3, #12
 80010c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20020000 	.word	0x20020000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	20000200 	.word	0x20000200
 80010f4:	20001ce0 	.word	0x20001ce0

080010f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <SystemInit+0x28>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <SystemInit+0x28>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SystemInit+0x28>)
 800110e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001112:	609a      	str	r2, [r3, #8]
#endif
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001128:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800112a:	e003      	b.n	8001134 <LoopCopyDataInit>

0800112c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800112e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001130:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001132:	3104      	adds	r1, #4

08001134 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001138:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800113a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800113c:	d3f6      	bcc.n	800112c <CopyDataInit>
  ldr  r2, =_sbss
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001140:	e002      	b.n	8001148 <LoopFillZerobss>

08001142 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001142:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001144:	f842 3b04 	str.w	r3, [r2], #4

08001148 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800114a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800114c:	d3f9      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800114e:	f7ff ffd3 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f008 ffe3 	bl	800a11c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fa13 	bl	8000580 <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800115c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001160:	0800afb8 	.word	0x0800afb8
  ldr  r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001168:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800116c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001170:	20001ce0 	.word	0x20001ce0

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800117c:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_Init+0x40>)
 8001182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_Init+0x40>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_Init+0x40>)
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f94d 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f808 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f7ff fd72 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x54>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_InitTick+0x58>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f965 	bl	80014aa <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00e      	b.n	8001208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d80a      	bhi.n	8001206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f000 f92d 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_InitTick+0x5c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	e000      	b.n	8001208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	20000008 	.word	0x20000008
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x24>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4413      	add	r3, r2
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_IncTick+0x24>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	20000400 	.word	0x20000400

08001244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_GetTick+0x14>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000400 	.word	0x20000400

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ffee 	bl	8001244 <HAL_GetTick>
 8001268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_Delay+0x40>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001282:	bf00      	nop
 8001284:	f7ff ffde 	bl	8001244 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000008 	.word	0x20000008

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff3e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff8e 	bl	8001394 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff31 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d004      	beq.n	80014e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e00c      	b.n	80014fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2205      	movs	r2, #5
 80014e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	e16b      	b.n	80017fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	429a      	cmp	r2, r3
 800153e:	f040 815a 	bne.w	80017f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d00b      	beq.n	8001562 <HAL_GPIO_Init+0x5a>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d007      	beq.n	8001562 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001556:	2b11      	cmp	r3, #17
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b12      	cmp	r3, #18
 8001560:	d130      	bne.n	80015c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 0201 	and.w	r2, r3, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0xfc>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b12      	cmp	r3, #18
 8001602:	d123      	bne.n	800164c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	08da      	lsrs	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3208      	adds	r2, #8
 8001646:	69b9      	ldr	r1, [r7, #24]
 8001648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0203 	and.w	r2, r3, #3
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80b4 	beq.w	80017f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b5f      	ldr	r3, [pc, #380]	; (8001810 <HAL_GPIO_Init+0x308>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a5e      	ldr	r2, [pc, #376]	; (8001810 <HAL_GPIO_Init+0x308>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b5c      	ldr	r3, [pc, #368]	; (8001810 <HAL_GPIO_Init+0x308>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016aa:	4a5a      	ldr	r2, [pc, #360]	; (8001814 <HAL_GPIO_Init+0x30c>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a51      	ldr	r2, [pc, #324]	; (8001818 <HAL_GPIO_Init+0x310>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d02b      	beq.n	800172e <HAL_GPIO_Init+0x226>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a50      	ldr	r2, [pc, #320]	; (800181c <HAL_GPIO_Init+0x314>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d025      	beq.n	800172a <HAL_GPIO_Init+0x222>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4f      	ldr	r2, [pc, #316]	; (8001820 <HAL_GPIO_Init+0x318>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d01f      	beq.n	8001726 <HAL_GPIO_Init+0x21e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4e      	ldr	r2, [pc, #312]	; (8001824 <HAL_GPIO_Init+0x31c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d019      	beq.n	8001722 <HAL_GPIO_Init+0x21a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <HAL_GPIO_Init+0x320>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_GPIO_Init+0x216>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4c      	ldr	r2, [pc, #304]	; (800182c <HAL_GPIO_Init+0x324>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d00d      	beq.n	800171a <HAL_GPIO_Init+0x212>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <HAL_GPIO_Init+0x328>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d007      	beq.n	8001716 <HAL_GPIO_Init+0x20e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4a      	ldr	r2, [pc, #296]	; (8001834 <HAL_GPIO_Init+0x32c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d101      	bne.n	8001712 <HAL_GPIO_Init+0x20a>
 800170e:	2307      	movs	r3, #7
 8001710:	e00e      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001712:	2308      	movs	r3, #8
 8001714:	e00c      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001716:	2306      	movs	r3, #6
 8001718:	e00a      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800171a:	2305      	movs	r3, #5
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800171e:	2304      	movs	r3, #4
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4934      	ldr	r1, [pc, #208]	; (8001814 <HAL_GPIO_Init+0x30c>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <HAL_GPIO_Init+0x330>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001772:	4a31      	ldr	r2, [pc, #196]	; (8001838 <HAL_GPIO_Init+0x330>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_GPIO_Init+0x330>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179c:	4a26      	ldr	r2, [pc, #152]	; (8001838 <HAL_GPIO_Init+0x330>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_GPIO_Init+0x330>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <HAL_GPIO_Init+0x330>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_GPIO_Init+0x330>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <HAL_GPIO_Init+0x330>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f ae90 	bls.w	8001524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	3724      	adds	r7, #36	; 0x24
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40023800 	.word	0x40023800
 8001814:	40013800 	.word	0x40013800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40021400 	.word	0x40021400
 8001830:	40021800 	.word	0x40021800
 8001834:	40021c00 	.word	0x40021c00
 8001838:	40013c00 	.word	0x40013c00

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e11f      	b.n	8001ac2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fa24 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2224      	movs	r2, #36	; 0x24
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018d4:	f002 fb62 	bl	8003f9c <HAL_RCC_GetPCLK1Freq>
 80018d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a7b      	ldr	r2, [pc, #492]	; (8001acc <HAL_I2C_Init+0x25c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d807      	bhi.n	80018f4 <HAL_I2C_Init+0x84>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4a7a      	ldr	r2, [pc, #488]	; (8001ad0 <HAL_I2C_Init+0x260>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	bf94      	ite	ls
 80018ec:	2301      	movls	r3, #1
 80018ee:	2300      	movhi	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	e006      	b.n	8001902 <HAL_I2C_Init+0x92>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a77      	ldr	r2, [pc, #476]	; (8001ad4 <HAL_I2C_Init+0x264>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	bf94      	ite	ls
 80018fc:	2301      	movls	r3, #1
 80018fe:	2300      	movhi	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0db      	b.n	8001ac2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4a72      	ldr	r2, [pc, #456]	; (8001ad8 <HAL_I2C_Init+0x268>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9b      	lsrs	r3, r3, #18
 8001914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a64      	ldr	r2, [pc, #400]	; (8001acc <HAL_I2C_Init+0x25c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d802      	bhi.n	8001944 <HAL_I2C_Init+0xd4>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3301      	adds	r3, #1
 8001942:	e009      	b.n	8001958 <HAL_I2C_Init+0xe8>
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	4a63      	ldr	r2, [pc, #396]	; (8001adc <HAL_I2C_Init+0x26c>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	3301      	adds	r3, #1
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	430b      	orrs	r3, r1
 800195e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800196a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4956      	ldr	r1, [pc, #344]	; (8001acc <HAL_I2C_Init+0x25c>)
 8001974:	428b      	cmp	r3, r1
 8001976:	d80d      	bhi.n	8001994 <HAL_I2C_Init+0x124>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e59      	subs	r1, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fbb1 f3f3 	udiv	r3, r1, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198c:	2b04      	cmp	r3, #4
 800198e:	bf38      	it	cc
 8001990:	2304      	movcc	r3, #4
 8001992:	e04f      	b.n	8001a34 <HAL_I2C_Init+0x1c4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <HAL_I2C_Init+0x150>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	440b      	add	r3, r1
 80019aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	e012      	b.n	80019e6 <HAL_I2C_Init+0x176>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1e58      	subs	r0, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	0099      	lsls	r1, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_Init+0x17e>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e022      	b.n	8001a34 <HAL_I2C_Init+0x1c4>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10e      	bne.n	8001a14 <HAL_I2C_Init+0x1a4>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1e58      	subs	r0, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6859      	ldr	r1, [r3, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	440b      	add	r3, r1
 8001a04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a12:	e00f      	b.n	8001a34 <HAL_I2C_Init+0x1c4>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1e58      	subs	r0, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6859      	ldr	r1, [r3, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	0099      	lsls	r1, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	6809      	ldr	r1, [r1, #0]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6911      	ldr	r1, [r2, #16]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68d2      	ldr	r2, [r2, #12]
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	000186a0 	.word	0x000186a0
 8001ad0:	001e847f 	.word	0x001e847f
 8001ad4:	003d08ff 	.word	0x003d08ff
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	10624dd3 	.word	0x10624dd3

08001ae0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e128      	b.n	8001d44 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a90      	ldr	r2, [pc, #576]	; (8001d4c <HAL_I2S_Init+0x26c>)
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff f931 	bl	8000d74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2202      	movs	r2, #2
 8001b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b28:	f023 030f 	bic.w	r3, r3, #15
 8001b2c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2202      	movs	r2, #2
 8001b34:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d060      	beq.n	8001c00 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001b46:	2310      	movs	r3, #16
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e001      	b.n	8001b50 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d802      	bhi.n	8001b5e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f002 fb12 	bl	8004188 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b64:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b6e:	d125      	bne.n	8001bbc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d010      	beq.n	8001b9a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b94:	3305      	adds	r3, #5
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	e01f      	b.n	8001bda <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	461a      	mov	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	3305      	adds	r3, #5
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e00e      	b.n	8001bda <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	461a      	mov	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	3305      	adds	r3, #5
 8001bd8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4a5c      	ldr	r2, [pc, #368]	; (8001d50 <HAL_I2S_Init+0x270>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	08db      	lsrs	r3, r3, #3
 8001be4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	085b      	lsrs	r3, r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	e003      	b.n	8001c08 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d902      	bls.n	8001c14 <HAL_I2S_Init+0x134>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	2bff      	cmp	r3, #255	; 0xff
 8001c12:	d907      	bls.n	8001c24 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	f043 0210 	orr.w	r2, r3, #16
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e08f      	b.n	8001d44 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	ea42 0103 	orr.w	r1, r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c42:	f023 030f 	bic.w	r3, r3, #15
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6851      	ldr	r1, [r2, #4]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6892      	ldr	r2, [r2, #8]
 8001c4e:	4311      	orrs	r1, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68d2      	ldr	r2, [r2, #12]
 8001c54:	4311      	orrs	r1, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6992      	ldr	r2, [r2, #24]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c66:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d161      	bne.n	8001d34 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a38      	ldr	r2, [pc, #224]	; (8001d54 <HAL_I2S_Init+0x274>)
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a37      	ldr	r2, [pc, #220]	; (8001d58 <HAL_I2S_Init+0x278>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_I2S_Init+0x1a4>
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_I2S_Init+0x27c>)
 8001c82:	e001      	b.n	8001c88 <HAL_I2S_Init+0x1a8>
 8001c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	4932      	ldr	r1, [pc, #200]	; (8001d58 <HAL_I2S_Init+0x278>)
 8001c90:	428a      	cmp	r2, r1
 8001c92:	d101      	bne.n	8001c98 <HAL_I2S_Init+0x1b8>
 8001c94:	4a31      	ldr	r2, [pc, #196]	; (8001d5c <HAL_I2S_Init+0x27c>)
 8001c96:	e001      	b.n	8001c9c <HAL_I2S_Init+0x1bc>
 8001c98:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c9c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ca0:	f023 030f 	bic.w	r3, r3, #15
 8001ca4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a2b      	ldr	r2, [pc, #172]	; (8001d58 <HAL_I2S_Init+0x278>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_I2S_Init+0x1d4>
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_I2S_Init+0x27c>)
 8001cb2:	e001      	b.n	8001cb8 <HAL_I2S_Init+0x1d8>
 8001cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cb8:	2202      	movs	r2, #2
 8001cba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <HAL_I2S_Init+0x278>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_I2S_Init+0x1ea>
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_I2S_Init+0x27c>)
 8001cc8:	e001      	b.n	8001cce <HAL_I2S_Init+0x1ee>
 8001cca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cda:	d003      	beq.n	8001ce4 <HAL_I2S_Init+0x204>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	e001      	b.n	8001cf0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	b299      	uxth	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001d06:	4303      	orrs	r3, r0
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	897b      	ldrh	r3, [r7, #10]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d1c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <HAL_I2S_Init+0x278>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_I2S_Init+0x24c>
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_I2S_Init+0x27c>)
 8001d2a:	e001      	b.n	8001d30 <HAL_I2S_Init+0x250>
 8001d2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d30:	897a      	ldrh	r2, [r7, #10]
 8001d32:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	08001e57 	.word	0x08001e57
 8001d50:	cccccccd 	.word	0xcccccccd
 8001d54:	08001f6d 	.word	0x08001f6d
 8001d58:	40003800 	.word	0x40003800
 8001d5c:	40003400 	.word	0x40003400

08001d60 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	881a      	ldrh	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	1c9a      	adds	r2, r3, #2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10e      	bne.n	8001df0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001de0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffb8 	bl	8001d60 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	b292      	uxth	r2, r2
 8001e0c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	1c9a      	adds	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10e      	bne.n	8001e4e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e3e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff93 	bl	8001d74 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d13a      	bne.n	8001ee8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d109      	bne.n	8001e90 <I2S_IRQHandler+0x3a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d102      	bne.n	8001e90 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffb4 	bl	8001df8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e96:	2b40      	cmp	r3, #64	; 0x40
 8001e98:	d126      	bne.n	8001ee8 <I2S_IRQHandler+0x92>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d11f      	bne.n	8001ee8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eb6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f043 0202 	orr.w	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ff50 	bl	8001d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d136      	bne.n	8001f62 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d109      	bne.n	8001f12 <I2S_IRQHandler+0xbc>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	2b80      	cmp	r3, #128	; 0x80
 8001f0a:	d102      	bne.n	8001f12 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff45 	bl	8001d9c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d122      	bne.n	8001f62 <I2S_IRQHandler+0x10c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d11b      	bne.n	8001f62 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f38:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	f043 0204 	orr.w	r2, r3, #4
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff13 	bl	8001d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4aa2      	ldr	r2, [pc, #648]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001f86:	4ba2      	ldr	r3, [pc, #648]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f88:	e001      	b.n	8001f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001f8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a9b      	ldr	r2, [pc, #620]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001fa4:	4b9a      	ldr	r3, [pc, #616]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001fa6:	e001      	b.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001fa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb8:	d004      	beq.n	8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 8099 	bne.w	80020f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d107      	bne.n	8001fde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f925 	bl	8002228 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9c8 	bl	8002388 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b40      	cmp	r3, #64	; 0x40
 8002000:	d13a      	bne.n	8002078 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b00      	cmp	r3, #0
 800200a:	d035      	beq.n	8002078 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a7e      	ldr	r2, [pc, #504]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002016:	4b7e      	ldr	r3, [pc, #504]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002018:	e001      	b.n	800201e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800201a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4979      	ldr	r1, [pc, #484]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002026:	428b      	cmp	r3, r1
 8002028:	d101      	bne.n	800202e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800202a:	4b79      	ldr	r3, [pc, #484]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800202c:	e001      	b.n	8002032 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800202e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002032:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002036:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002046:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f043 0202 	orr.w	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fe88 	bl	8001d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b08      	cmp	r3, #8
 8002080:	f040 80be 	bne.w	8002200 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80b8 	beq.w	8002200 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800209e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a59      	ldr	r2, [pc, #356]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80020aa:	4b59      	ldr	r3, [pc, #356]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80020ac:	e001      	b.n	80020b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80020ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4954      	ldr	r1, [pc, #336]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80020ba:	428b      	cmp	r3, r1
 80020bc:	d101      	bne.n	80020c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80020be:	4b54      	ldr	r3, [pc, #336]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80020c0:	e001      	b.n	80020c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80020c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f043 0204 	orr.w	r2, r3, #4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fe4a 	bl	8001d88 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020f4:	e084      	b.n	8002200 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d107      	bne.n	8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f8be 	bl	800228c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8fd 	bl	8002324 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002130:	2b40      	cmp	r3, #64	; 0x40
 8002132:	d12f      	bne.n	8002194 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d02a      	beq.n	8002194 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800214c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2e      	ldr	r2, [pc, #184]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800215a:	e001      	b.n	8002160 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800215c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4929      	ldr	r1, [pc, #164]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002168:	428b      	cmp	r3, r1
 800216a:	d101      	bne.n	8002170 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800216e:	e001      	b.n	8002174 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002170:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002174:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002178:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f043 0202 	orr.w	r2, r3, #2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fdfa 	bl	8001d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b08      	cmp	r3, #8
 800219c:	d131      	bne.n	8002202 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d02c      	beq.n	8002202 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80021b4:	e001      	b.n	80021ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80021b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4912      	ldr	r1, [pc, #72]	; (800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80021c2:	428b      	cmp	r3, r1
 80021c4:	d101      	bne.n	80021ca <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80021c8:	e001      	b.n	80021ce <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80021ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021e2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f043 0204 	orr.w	r2, r3, #4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fdc5 	bl	8001d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021fe:	e000      	b.n	8002202 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002200:	bf00      	nop
}
 8002202:	bf00      	nop
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40003800 	.word	0x40003800
 8002210:	40003400 	.word	0x40003400

08002214 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	1c99      	adds	r1, r3, #2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6251      	str	r1, [r2, #36]	; 0x24
 800223a:	881a      	ldrh	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d113      	bne.n	8002282 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002268:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ffc9 	bl	8002214 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	1c99      	adds	r1, r3, #2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6251      	str	r1, [r2, #36]	; 0x24
 800229e:	8819      	ldrh	r1, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <I2SEx_TxISR_I2SExt+0x90>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <I2SEx_TxISR_I2SExt+0x22>
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <I2SEx_TxISR_I2SExt+0x94>)
 80022ac:	e001      	b.n	80022b2 <I2SEx_TxISR_I2SExt+0x26>
 80022ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022b2:	460a      	mov	r2, r1
 80022b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d121      	bne.n	8002312 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <I2SEx_TxISR_I2SExt+0x90>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <I2SEx_TxISR_I2SExt+0x50>
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <I2SEx_TxISR_I2SExt+0x94>)
 80022da:	e001      	b.n	80022e0 <I2SEx_TxISR_I2SExt+0x54>
 80022dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	490d      	ldr	r1, [pc, #52]	; (800231c <I2SEx_TxISR_I2SExt+0x90>)
 80022e8:	428b      	cmp	r3, r1
 80022ea:	d101      	bne.n	80022f0 <I2SEx_TxISR_I2SExt+0x64>
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <I2SEx_TxISR_I2SExt+0x94>)
 80022ee:	e001      	b.n	80022f4 <I2SEx_TxISR_I2SExt+0x68>
 80022f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d106      	bne.n	8002312 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff81 	bl	8002214 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40003800 	.word	0x40003800
 8002320:	40003400 	.word	0x40003400

08002324 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68d8      	ldr	r0, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	1c99      	adds	r1, r3, #2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800233c:	b282      	uxth	r2, r0
 800233e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d113      	bne.n	8002380 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002366:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ff4a 	bl	8002214 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a20      	ldr	r2, [pc, #128]	; (8002418 <I2SEx_RxISR_I2SExt+0x90>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <I2SEx_RxISR_I2SExt+0x16>
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <I2SEx_RxISR_I2SExt+0x94>)
 800239c:	e001      	b.n	80023a2 <I2SEx_RxISR_I2SExt+0x1a>
 800239e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023a2:	68d8      	ldr	r0, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	1c99      	adds	r1, r3, #2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	62d1      	str	r1, [r2, #44]	; 0x2c
 80023ae:	b282      	uxth	r2, r0
 80023b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d121      	bne.n	800240e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <I2SEx_RxISR_I2SExt+0x90>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <I2SEx_RxISR_I2SExt+0x50>
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <I2SEx_RxISR_I2SExt+0x94>)
 80023d6:	e001      	b.n	80023dc <I2SEx_RxISR_I2SExt+0x54>
 80023d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	490d      	ldr	r1, [pc, #52]	; (8002418 <I2SEx_RxISR_I2SExt+0x90>)
 80023e4:	428b      	cmp	r3, r1
 80023e6:	d101      	bne.n	80023ec <I2SEx_RxISR_I2SExt+0x64>
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <I2SEx_RxISR_I2SExt+0x94>)
 80023ea:	e001      	b.n	80023f0 <I2SEx_RxISR_I2SExt+0x68>
 80023ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d106      	bne.n	800240e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff03 	bl	8002214 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40003800 	.word	0x40003800
 800241c:	40003400 	.word	0x40003400

08002420 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002422:	b08f      	sub	sp, #60	; 0x3c
 8002424:	af0a      	add	r7, sp, #40	; 0x28
 8002426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e10f      	b.n	8002652 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d106      	bne.n	8002452 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f007 fb55 	bl	8009afc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2203      	movs	r2, #3
 8002456:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f003 fb4c 	bl	8005b0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	687e      	ldr	r6, [r7, #4]
 800247e:	466d      	mov	r5, sp
 8002480:	f106 0410 	add.w	r4, r6, #16
 8002484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002490:	e885 0003 	stmia.w	r5, {r0, r1}
 8002494:	1d33      	adds	r3, r6, #4
 8002496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002498:	6838      	ldr	r0, [r7, #0]
 800249a:	f003 fa23 	bl	80058e4 <USB_CoreInit>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0d0      	b.n	8002652 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fb3a 	bl	8005b30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e04a      	b.n	8002558 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	333d      	adds	r3, #61	; 0x3d
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	333c      	adds	r3, #60	; 0x3c
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	b298      	uxth	r0, r3
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	3342      	adds	r3, #66	; 0x42
 80024fe:	4602      	mov	r2, r0
 8002500:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	333f      	adds	r3, #63	; 0x3f
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	3344      	adds	r3, #68	; 0x44
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3348      	adds	r3, #72	; 0x48
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3350      	adds	r3, #80	; 0x50
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	3301      	adds	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	429a      	cmp	r2, r3
 8002560:	d3af      	bcc.n	80024c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e044      	b.n	80025f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	3301      	adds	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d3b5      	bcc.n	8002568 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	687e      	ldr	r6, [r7, #4]
 8002604:	466d      	mov	r5, sp
 8002606:	f106 0410 	add.w	r4, r6, #16
 800260a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002612:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002616:	e885 0003 	stmia.w	r5, {r0, r1}
 800261a:	1d33      	adds	r3, r6, #4
 800261c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261e:	6838      	ldr	r0, [r7, #0]
 8002620:	f003 fab0 	bl	8005b84 <USB_DevInit>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e00d      	b.n	8002652 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f004 faf8 	bl	8006c40 <USB_DevDisconnect>

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800265a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_PCD_Start+0x1c>
 8002672:	2302      	movs	r3, #2
 8002674:	e020      	b.n	80026b8 <HAL_PCD_Start+0x5e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	2b01      	cmp	r3, #1
 8002684:	d109      	bne.n	800269a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800268a:	2b01      	cmp	r3, #1
 800268c:	d005      	beq.n	800269a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fa24 	bl	8005aec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 faa8 	bl	8006bfe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b08d      	sub	sp, #52	; 0x34
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 fb66 	bl	8006da8 <USB_GetMode>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 839d 	bne.w	8002e1e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f004 faca 	bl	8006c82 <USB_ReadInterrupts>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8393 	beq.w	8002e1c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fac1 	bl	8006c82 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b02      	cmp	r3, #2
 8002708:	d107      	bne.n	800271a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f002 0202 	and.w	r2, r2, #2
 8002718:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f004 faaf 	bl	8006c82 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d161      	bne.n	80027f2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699a      	ldr	r2, [r3, #24]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0210 	bic.w	r2, r2, #16
 800273c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 020f 	and.w	r2, r3, #15
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	3304      	adds	r3, #4
 800275c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	0c5b      	lsrs	r3, r3, #17
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	2b02      	cmp	r3, #2
 8002768:	d124      	bne.n	80027b4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d035      	beq.n	80027e2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002780:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002784:	b29b      	uxth	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	6a38      	ldr	r0, [r7, #32]
 800278a:	f004 f915 	bl	80069b8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279a:	441a      	add	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ac:	441a      	add	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	e016      	b.n	80027e2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	0c5b      	lsrs	r3, r3, #17
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	2b06      	cmp	r3, #6
 80027be:	d110      	bne.n	80027e2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027c6:	2208      	movs	r2, #8
 80027c8:	4619      	mov	r1, r3
 80027ca:	6a38      	ldr	r0, [r7, #32]
 80027cc:	f004 f8f4 	bl	80069b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	699a      	ldr	r2, [r3, #24]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027dc:	441a      	add	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699a      	ldr	r2, [r3, #24]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0210 	orr.w	r2, r2, #16
 80027f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 fa43 	bl	8006c82 <USB_ReadInterrupts>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002802:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002806:	d16e      	bne.n	80028e6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f004 fa49 	bl	8006ca8 <USB_ReadDevAllOutEpInterrupt>
 8002816:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002818:	e062      	b.n	80028e0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d057      	beq.n	80028d4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f004 fa6e 	bl	8006d10 <USB_ReadDevOutEPInterrupt>
 8002834:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284c:	461a      	mov	r2, r3
 800284e:	2301      	movs	r3, #1
 8002850:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fdb1 	bl	80033bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00c      	beq.n	800287e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002870:	461a      	mov	r2, r3
 8002872:	2308      	movs	r3, #8
 8002874:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 feab 	bl	80035d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	2310      	movs	r3, #16
 8002898:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b0:	461a      	mov	r2, r3
 80028b2:	2320      	movs	r3, #32
 80028b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028cc:	461a      	mov	r2, r3
 80028ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	3301      	adds	r3, #1
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d199      	bne.n	800281a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f004 f9c9 	bl	8006c82 <USB_ReadInterrupts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028fa:	f040 80c0 	bne.w	8002a7e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f004 f9ea 	bl	8006cdc <USB_ReadDevAllInEpInterrupt>
 8002908:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800290e:	e0b2      	b.n	8002a76 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80a7 	beq.w	8002a6a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f004 fa10 	bl	8006d4c <USB_ReadDevInEPInterrupt>
 800292c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d057      	beq.n	80029e8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	2201      	movs	r2, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43db      	mvns	r3, r3
 8002952:	69f9      	ldr	r1, [r7, #28]
 8002954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002958:	4013      	ands	r3, r2
 800295a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4413      	add	r3, r2
 8002964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002968:	461a      	mov	r2, r3
 800296a:	2301      	movs	r3, #1
 800296c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d132      	bne.n	80029dc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	3348      	adds	r3, #72	; 0x48
 8002986:	6819      	ldr	r1, [r3, #0]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4403      	add	r3, r0
 8002996:	3344      	adds	r3, #68	; 0x44
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4419      	add	r1, r3
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4403      	add	r3, r0
 80029aa:	3348      	adds	r3, #72	; 0x48
 80029ac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d113      	bne.n	80029dc <HAL_PCD_IRQHandler+0x31c>
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3350      	adds	r3, #80	; 0x50
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029d4:	461a      	mov	r2, r3
 80029d6:	2101      	movs	r1, #1
 80029d8:	f004 fa18 	bl	8006e0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f007 f919 	bl	8009c1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fe:	461a      	mov	r2, r3
 8002a00:	2308      	movs	r3, #8
 8002a02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a36:	461a      	mov	r2, r3
 8002a38:	2340      	movs	r3, #64	; 0x40
 8002a3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a52:	461a      	mov	r2, r3
 8002a54:	2302      	movs	r3, #2
 8002a56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fc1b 	bl	80032a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	085b      	lsrs	r3, r3, #1
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f47f af49 	bne.w	8002910 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 f8fd 	bl	8006c82 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a92:	d122      	bne.n	8002ada <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d108      	bne.n	8002ac4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002aba:	2100      	movs	r1, #0
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fe27 	bl	8003710 <HAL_PCDEx_LPM_Callback>
 8002ac2:	e002      	b.n	8002aca <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f007 f91f 	bl	8009d08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 f8cf 	bl	8006c82 <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aee:	d112      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d102      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f007 f8db 	bl	8009cbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b14:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 f8b1 	bl	8006c82 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2a:	f040 80c7 	bne.w	8002cbc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2110      	movs	r1, #16
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 f97f 	bl	8005e4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b52:	e056      	b.n	8002c02 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b60:	461a      	mov	r2, r3
 8002b62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b78:	0151      	lsls	r1, r2, #5
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b86:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b98:	0151      	lsls	r1, r2, #5
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	440a      	add	r2, r1
 8002b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ba2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ba6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bcc:	0151      	lsls	r1, r2, #5
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	440a      	add	r2, r1
 8002bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bec:	0151      	lsls	r1, r2, #5
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	440a      	add	r2, r1
 8002bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bfa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	3301      	adds	r3, #1
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d3a3      	bcc.n	8002b54 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c1a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d016      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c38:	f043 030b 	orr.w	r3, r3, #11
 8002c3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c4e:	f043 030b 	orr.w	r3, r3, #11
 8002c52:	6453      	str	r3, [r2, #68]	; 0x44
 8002c54:	e015      	b.n	8002c82 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c68:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c6c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c7c:	f043 030b 	orr.w	r3, r3, #11
 8002c80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f004 f8b0 	bl	8006e0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 ffde 	bl	8006c82 <USB_ReadInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd0:	d124      	bne.n	8002d1c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 f874 	bl	8006dc4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 f914 	bl	8005f0e <USB_GetDevSpeed>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681c      	ldr	r4, [r3, #0]
 8002cf2:	f001 f947 	bl	8003f84 <HAL_RCC_GetHCLKFreq>
 8002cf6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4620      	mov	r0, r4
 8002d02:	f002 fe51 	bl	80059a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f006 ffaf 	bl	8009c6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 ffae 	bl	8006c82 <USB_ReadInterrupts>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d10a      	bne.n	8002d46 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f006 ff8c 	bl	8009c4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f002 0208 	and.w	r2, r2, #8
 8002d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 ff99 	bl	8006c82 <USB_ReadInterrupts>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d5a:	d10f      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4619      	mov	r1, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f006 ffee 	bl	8009d48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 ff7e 	bl	8006c82 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d90:	d10f      	bne.n	8002db2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f006 ffc1 	bl	8009d24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 ff63 	bl	8006c82 <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc6:	d10a      	bne.n	8002dde <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f006 ffcf 	bl	8009d6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 ff4d 	bl	8006c82 <USB_ReadInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d115      	bne.n	8002e1e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f006 ffbf 	bl	8009d88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e000      	b.n	8002e1e <HAL_PCD_IRQHandler+0x75e>
      return;
 8002e1c:	bf00      	nop
    }
  }
}
 8002e1e:	3734      	adds	r7, #52	; 0x34
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd90      	pop	{r4, r7, pc}

08002e24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_PCD_SetAddress+0x1a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e013      	b.n	8002e66 <HAL_PCD_SetAddress+0x42>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 feab 	bl	8006bb2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	4608      	mov	r0, r1
 8002e78:	4611      	mov	r1, r2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	70fb      	strb	r3, [r7, #3]
 8002e80:	460b      	mov	r3, r1
 8002e82:	803b      	strh	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da0f      	bge.n	8002eb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	3338      	adds	r3, #56	; 0x38
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	705a      	strb	r2, [r3, #1]
 8002eb2:	e00f      	b.n	8002ed4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	f003 020f 	and.w	r2, r3, #15
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	3304      	adds	r3, #4
 8002ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ee0:	883a      	ldrh	r2, [r7, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	78ba      	ldrb	r2, [r7, #2]
 8002eea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002efe:	78bb      	ldrb	r3, [r7, #2]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d102      	bne.n	8002f0a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_PCD_EP_Open+0xaa>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e00e      	b.n	8002f36 <HAL_PCD_EP_Open+0xc8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68f9      	ldr	r1, [r7, #12]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 f816 	bl	8005f58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f34:	7afb      	ldrb	r3, [r7, #11]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da0f      	bge.n	8002f72 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 020f 	and.w	r2, r3, #15
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	3338      	adds	r3, #56	; 0x38
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	3304      	adds	r3, #4
 8002f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	705a      	strb	r2, [r3, #1]
 8002f70:	e00f      	b.n	8002f92 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	3304      	adds	r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_PCD_EP_Close+0x6e>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e00e      	b.n	8002fca <HAL_PCD_EP_Close+0x8c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 f854 	bl	8006068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2200      	movs	r2, #0
 8003012:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003014:	7afb      	ldrb	r3, [r7, #11]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	b2da      	uxtb	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d102      	bne.n	800302e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800302e:	7afb      	ldrb	r3, [r7, #11]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6979      	ldr	r1, [r7, #20]
 8003046:	f003 fb2f 	bl	80066a8 <USB_EP0StartXfer>
 800304a:	e008      	b.n	800305e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	6979      	ldr	r1, [r7, #20]
 800305a:	f003 f8e1 	bl	8006220 <USB_EPStartXfer>
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	f003 020f 	and.w	r2, r3, #15
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	460b      	mov	r3, r1
 80030a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	7afb      	ldrb	r3, [r7, #11]
 80030aa:	f003 020f 	and.w	r2, r3, #15
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	3338      	adds	r3, #56	; 0x38
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	3304      	adds	r3, #4
 80030be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2200      	movs	r2, #0
 80030d0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2201      	movs	r2, #1
 80030d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d8:	7afb      	ldrb	r3, [r7, #11]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d102      	bne.n	80030f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030f2:	7afb      	ldrb	r3, [r7, #11]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d109      	bne.n	8003110 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	6979      	ldr	r1, [r7, #20]
 800310a:	f003 facd 	bl	80066a8 <USB_EP0StartXfer>
 800310e:	e008      	b.n	8003122 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	6979      	ldr	r1, [r7, #20]
 800311e:	f003 f87f 	bl	8006220 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 020f 	and.w	r2, r3, #15
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d901      	bls.n	800314a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e050      	b.n	80031ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800314a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800314e:	2b00      	cmp	r3, #0
 8003150:	da0f      	bge.n	8003172 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	f003 020f 	and.w	r2, r3, #15
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	3338      	adds	r3, #56	; 0x38
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	3304      	adds	r3, #4
 8003168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	705a      	strb	r2, [r3, #1]
 8003170:	e00d      	b.n	800318e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	3304      	adds	r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_PCD_EP_SetStall+0x82>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e01e      	b.n	80031ec <HAL_PCD_EP_SetStall+0xc0>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68f9      	ldr	r1, [r7, #12]
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 fc24 	bl	8006a0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	b2d9      	uxtb	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031dc:	461a      	mov	r2, r3
 80031de:	f003 fe15 	bl	8006e0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 020f 	and.w	r2, r3, #15
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	429a      	cmp	r2, r3
 800320c:	d901      	bls.n	8003212 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e042      	b.n	8003298 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003216:	2b00      	cmp	r3, #0
 8003218:	da0f      	bge.n	800323a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 020f 	and.w	r2, r3, #15
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	3338      	adds	r3, #56	; 0x38
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	705a      	strb	r2, [r3, #1]
 8003238:	e00f      	b.n	800325a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 020f 	and.w	r2, r3, #15
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	4413      	add	r3, r2
 8003250:	3304      	adds	r3, #4
 8003252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_PCD_EP_ClrStall+0x86>
 8003276:	2302      	movs	r3, #2
 8003278:	e00e      	b.n	8003298 <HAL_PCD_EP_ClrStall+0xa4>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	4618      	mov	r0, r3
 800328a:	f003 fc2c 	bl	8006ae6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	3338      	adds	r3, #56	; 0x38
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	4413      	add	r3, r2
 80032c4:	3304      	adds	r3, #4
 80032c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d901      	bls.n	80032d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e06c      	b.n	80033b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d902      	bls.n	80032f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	3303      	adds	r3, #3
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032fc:	e02b      	b.n	8003356 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	429a      	cmp	r2, r3
 8003312:	d902      	bls.n	800331a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3303      	adds	r3, #3
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	68d9      	ldr	r1, [r3, #12]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003332:	b2db      	uxtb	r3, r3
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	4603      	mov	r3, r0
 8003338:	6978      	ldr	r0, [r7, #20]
 800333a:	f003 fb08 	bl	800694e <USB_WritePacket>

    ep->xfer_buff  += len;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	441a      	add	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	441a      	add	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	b29b      	uxth	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	429a      	cmp	r2, r3
 800336a:	d809      	bhi.n	8003380 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003374:	429a      	cmp	r2, r3
 8003376:	d203      	bcs.n	8003380 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1be      	bne.n	80032fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	429a      	cmp	r2, r3
 800338a:	d811      	bhi.n	80033b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	2201      	movs	r2, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	6939      	ldr	r1, [r7, #16]
 80033a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ac:	4013      	ands	r3, r2
 80033ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	333c      	adds	r3, #60	; 0x3c
 80033d4:	3304      	adds	r3, #4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	f040 80a0 	bne.w	8003534 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d015      	beq.n	800342a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a72      	ldr	r2, [pc, #456]	; (80035cc <PCD_EP_OutXfrComplete_int+0x210>)
 8003402:	4293      	cmp	r3, r2
 8003404:	f240 80dd 	bls.w	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80d7 	beq.w	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	461a      	mov	r2, r3
 8003422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003426:	6093      	str	r3, [r2, #8]
 8003428:	e0cb      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	461a      	mov	r2, r3
 8003442:	2320      	movs	r3, #32
 8003444:	6093      	str	r3, [r2, #8]
 8003446:	e0bc      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 80b7 	bne.w	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a5d      	ldr	r2, [pc, #372]	; (80035cc <PCD_EP_OutXfrComplete_int+0x210>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d90f      	bls.n	800347c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	461a      	mov	r2, r3
 8003474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003478:	6093      	str	r3, [r2, #8]
 800347a:	e0a2      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800348e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	0159      	lsls	r1, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	440b      	add	r3, r1
 8003498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4403      	add	r3, r0
 80034b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4403      	add	r3, r0
 80034da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4419      	add	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4403      	add	r3, r0
 80034f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d114      	bne.n	8003526 <PCD_EP_OutXfrComplete_int+0x16a>
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d108      	bne.n	8003526 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800351e:	461a      	mov	r2, r3
 8003520:	2101      	movs	r1, #1
 8003522:	f003 fc73 	bl	8006e0c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f006 fb59 	bl	8009be4 <HAL_PCD_DataOutStageCallback>
 8003532:	e046      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a26      	ldr	r2, [pc, #152]	; (80035d0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d124      	bne.n	8003586 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003552:	461a      	mov	r2, r3
 8003554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003558:	6093      	str	r3, [r2, #8]
 800355a:	e032      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	2320      	movs	r3, #32
 8003576:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f006 fb30 	bl	8009be4 <HAL_PCD_DataOutStageCallback>
 8003584:	e01d      	b.n	80035c2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d114      	bne.n	80035b6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d108      	bne.n	80035b6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035ae:	461a      	mov	r2, r3
 80035b0:	2100      	movs	r1, #0
 80035b2:	f003 fc2b 	bl	8006e0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f006 fb11 	bl	8009be4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	4f54300a 	.word	0x4f54300a
 80035d0:	4f54310a 	.word	0x4f54310a

080035d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	333c      	adds	r3, #60	; 0x3c
 80035ec:	3304      	adds	r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <PCD_EP_OutSetupPacket_int+0x88>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d90e      	bls.n	8003628 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003610:	2b00      	cmp	r3, #0
 8003612:	d009      	beq.n	8003628 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003620:	461a      	mov	r2, r3
 8003622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003626:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f006 fac9 	bl	8009bc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a0a      	ldr	r2, [pc, #40]	; (800365c <PCD_EP_OutSetupPacket_int+0x88>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d90c      	bls.n	8003650 <PCD_EP_OutSetupPacket_int+0x7c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d108      	bne.n	8003650 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003648:	461a      	mov	r2, r3
 800364a:	2101      	movs	r1, #1
 800364c:	f003 fbde 	bl	8006e0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	4f54300a 	.word	0x4f54300a

08003660 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
 800366c:	4613      	mov	r3, r2
 800366e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d107      	bne.n	800368e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800367e:	883b      	ldrh	r3, [r7, #0]
 8003680:	0419      	lsls	r1, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	430a      	orrs	r2, r1
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
 800368c:	e028      	b.n	80036e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4413      	add	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
 80036a0:	e00d      	b.n	80036be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3340      	adds	r3, #64	; 0x40
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	3301      	adds	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d3ec      	bcc.n	80036a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036c8:	883b      	ldrh	r3, [r7, #0]
 80036ca:	0418      	lsls	r0, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	4302      	orrs	r2, r0
 80036d8:	3340      	adds	r3, #64	; 0x40
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e25b      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d075      	beq.n	8003832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003746:	4ba3      	ldr	r3, [pc, #652]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b04      	cmp	r3, #4
 8003750:	d00c      	beq.n	800376c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003752:	4ba0      	ldr	r3, [pc, #640]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375a:	2b08      	cmp	r3, #8
 800375c:	d112      	bne.n	8003784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800375e:	4b9d      	ldr	r3, [pc, #628]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376a:	d10b      	bne.n	8003784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	4b99      	ldr	r3, [pc, #612]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d05b      	beq.n	8003830 <HAL_RCC_OscConfig+0x108>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d157      	bne.n	8003830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e236      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d106      	bne.n	800379c <HAL_RCC_OscConfig+0x74>
 800378e:	4b91      	ldr	r3, [pc, #580]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a90      	ldr	r2, [pc, #576]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e01d      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x98>
 80037a6:	4b8b      	ldr	r3, [pc, #556]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a8a      	ldr	r2, [pc, #552]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a87      	ldr	r2, [pc, #540]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
 80037c0:	4b84      	ldr	r3, [pc, #528]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a83      	ldr	r2, [pc, #524]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b81      	ldr	r3, [pc, #516]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a80      	ldr	r2, [pc, #512]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fd fd30 	bl	8001244 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fd fd2c 	bl	8001244 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1fb      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b76      	ldr	r3, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0xc0>
 8003806:	e014      	b.n	8003832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fd fd1c 	bl	8001244 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003810:	f7fd fd18 	bl	8001244 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e1e7      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	4b6c      	ldr	r3, [pc, #432]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0xe8>
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d063      	beq.n	8003906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800383e:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384a:	4b62      	ldr	r3, [pc, #392]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003852:	2b08      	cmp	r3, #8
 8003854:	d11c      	bne.n	8003890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003856:	4b5f      	ldr	r3, [pc, #380]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d116      	bne.n	8003890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	4b5c      	ldr	r3, [pc, #368]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_RCC_OscConfig+0x152>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e1bb      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387a:	4b56      	ldr	r3, [pc, #344]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4952      	ldr	r1, [pc, #328]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388e:	e03a      	b.n	8003906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003898:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <HAL_RCC_OscConfig+0x2b0>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd fcd1 	bl	8001244 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fd fccd 	bl	8001244 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e19c      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4940      	ldr	r1, [pc, #256]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
 80038d8:	e015      	b.n	8003906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <HAL_RCC_OscConfig+0x2b0>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fd fcb0 	bl	8001244 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e8:	f7fd fcac 	bl	8001244 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e17b      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d030      	beq.n	8003974 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <HAL_RCC_OscConfig+0x2b4>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fd fc90 	bl	8001244 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003928:	f7fd fc8c 	bl	8001244 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e15b      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x200>
 8003946:	e015      	b.n	8003974 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003948:	4b24      	ldr	r3, [pc, #144]	; (80039dc <HAL_RCC_OscConfig+0x2b4>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394e:	f7fd fc79 	bl	8001244 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003956:	f7fd fc75 	bl	8001244 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e144      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800396a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80a0 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003982:	2300      	movs	r3, #0
 8003984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	6413      	str	r3, [r2, #64]	; 0x40
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_OscConfig+0x2b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d121      	bne.n	8003a02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_RCC_OscConfig+0x2b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <HAL_RCC_OscConfig+0x2b8>)
 80039c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ca:	f7fd fc3b 	bl	8001244 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	e011      	b.n	80039f6 <HAL_RCC_OscConfig+0x2ce>
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	42470000 	.word	0x42470000
 80039dc:	42470e80 	.word	0x42470e80
 80039e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e4:	f7fd fc2e 	bl	8001244 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0fd      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	4b81      	ldr	r3, [pc, #516]	; (8003bfc <HAL_RCC_OscConfig+0x4d4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d106      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2f0>
 8003a0a:	4b7d      	ldr	r3, [pc, #500]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a7c      	ldr	r2, [pc, #496]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
 8003a16:	e01c      	b.n	8003a52 <HAL_RCC_OscConfig+0x32a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCC_OscConfig+0x312>
 8003a20:	4b77      	ldr	r3, [pc, #476]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a76      	ldr	r2, [pc, #472]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a26:	f043 0304 	orr.w	r3, r3, #4
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2c:	4b74      	ldr	r3, [pc, #464]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a73      	ldr	r2, [pc, #460]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	e00b      	b.n	8003a52 <HAL_RCC_OscConfig+0x32a>
 8003a3a:	4b71      	ldr	r3, [pc, #452]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a70      	ldr	r2, [pc, #448]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	4b6e      	ldr	r3, [pc, #440]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a6d      	ldr	r2, [pc, #436]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d015      	beq.n	8003a86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5a:	f7fd fbf3 	bl	8001244 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fd fbef 	bl	8001244 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e0bc      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ee      	beq.n	8003a62 <HAL_RCC_OscConfig+0x33a>
 8003a84:	e014      	b.n	8003ab0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a86:	f7fd fbdd 	bl	8001244 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fd fbd9 	bl	8001244 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e0a6      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa4:	4b56      	ldr	r3, [pc, #344]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ee      	bne.n	8003a8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d105      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	4a51      	ldr	r2, [pc, #324]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 8092 	beq.w	8003bf0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003acc:	4b4c      	ldr	r3, [pc, #304]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d05c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d141      	bne.n	8003b64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae0:	4b48      	ldr	r3, [pc, #288]	; (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7fd fbad 	bl	8001244 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aee:	f7fd fba9 	bl	8001244 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e078      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b00:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f0      	bne.n	8003aee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	019b      	lsls	r3, r3, #6
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	3b01      	subs	r3, #1
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	4933      	ldr	r1, [pc, #204]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b36:	4b33      	ldr	r3, [pc, #204]	; (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fb82 	bl	8001244 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd fb7e 	bl	8001244 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e04d      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x41c>
 8003b62:	e045      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b64:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_RCC_OscConfig+0x4dc>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fd fb6b 	bl	8001244 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fd fb67 	bl	8001244 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e036      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x44a>
 8003b90:	e02e      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e029      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b9e:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <HAL_RCC_OscConfig+0x4d8>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d11c      	bne.n	8003bec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d115      	bne.n	8003bec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10d      	bne.n	8003bec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d106      	bne.n	8003bec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	40023800 	.word	0x40023800
 8003c04:	42470060 	.word	0x42470060

08003c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0cc      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b68      	ldr	r3, [pc, #416]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d90c      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b63      	ldr	r3, [pc, #396]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0b8      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c5c:	4b59      	ldr	r3, [pc, #356]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c74:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a52      	ldr	r2, [pc, #328]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c80:	4b50      	ldr	r3, [pc, #320]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	494d      	ldr	r1, [pc, #308]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d044      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d119      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e07f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e06f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b3b      	ldr	r3, [pc, #236]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e067      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce6:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4934      	ldr	r1, [pc, #208]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf8:	f7fd faa4 	bl	8001244 <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d00:	f7fd faa0 	bl	8001244 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e04f      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 020c 	and.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1eb      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d20c      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e032      	b.n	8003db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d5c:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	4916      	ldr	r1, [pc, #88]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	490e      	ldr	r1, [pc, #56]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d8e:	f000 f821 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003d92:	4601      	mov	r1, r0
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	5cd3      	ldrb	r3, [r2, r3]
 8003da2:	fa21 f303 	lsr.w	r3, r1, r3
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd fa04 	bl	80011bc <HAL_InitTick>

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40023c00 	.word	0x40023c00
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	0800af5c 	.word	0x0800af5c
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	20000004 	.word	0x20000004

08003dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	2300      	movs	r3, #0
 8003de4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dea:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d007      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x32>
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d008      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x38>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f040 80b4 	bne.w	8003f68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e00:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e02:	60bb      	str	r3, [r7, #8]
       break;
 8003e04:	e0b3      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e06:	4b5e      	ldr	r3, [pc, #376]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e08:	60bb      	str	r3, [r7, #8]
      break;
 8003e0a:	e0b0      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e0c:	4b5a      	ldr	r3, [pc, #360]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e16:	4b58      	ldr	r3, [pc, #352]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d04a      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e22:	4b55      	ldr	r3, [pc, #340]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	099b      	lsrs	r3, r3, #6
 8003e28:	f04f 0400 	mov.w	r4, #0
 8003e2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	ea03 0501 	and.w	r5, r3, r1
 8003e38:	ea04 0602 	and.w	r6, r4, r2
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4632      	mov	r2, r6
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	f04f 0400 	mov.w	r4, #0
 8003e48:	0154      	lsls	r4, r2, #5
 8003e4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e4e:	014b      	lsls	r3, r1, #5
 8003e50:	4619      	mov	r1, r3
 8003e52:	4622      	mov	r2, r4
 8003e54:	1b49      	subs	r1, r1, r5
 8003e56:	eb62 0206 	sbc.w	r2, r2, r6
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	f04f 0400 	mov.w	r4, #0
 8003e62:	0194      	lsls	r4, r2, #6
 8003e64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e68:	018b      	lsls	r3, r1, #6
 8003e6a:	1a5b      	subs	r3, r3, r1
 8003e6c:	eb64 0402 	sbc.w	r4, r4, r2
 8003e70:	f04f 0100 	mov.w	r1, #0
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	00e2      	lsls	r2, r4, #3
 8003e7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e7e:	00d9      	lsls	r1, r3, #3
 8003e80:	460b      	mov	r3, r1
 8003e82:	4614      	mov	r4, r2
 8003e84:	195b      	adds	r3, r3, r5
 8003e86:	eb44 0406 	adc.w	r4, r4, r6
 8003e8a:	f04f 0100 	mov.w	r1, #0
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	0262      	lsls	r2, r4, #9
 8003e94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e98:	0259      	lsls	r1, r3, #9
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4614      	mov	r4, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f04f 0400 	mov.w	r4, #0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4623      	mov	r3, r4
 8003eac:	f7fc f9e8 	bl	8000280 <__aeabi_uldivmod>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e049      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb8:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	f04f 0400 	mov.w	r4, #0
 8003ec2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	ea03 0501 	and.w	r5, r3, r1
 8003ece:	ea04 0602 	and.w	r6, r4, r2
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	4632      	mov	r2, r6
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f04f 0400 	mov.w	r4, #0
 8003ede:	0154      	lsls	r4, r2, #5
 8003ee0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ee4:	014b      	lsls	r3, r1, #5
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4622      	mov	r2, r4
 8003eea:	1b49      	subs	r1, r1, r5
 8003eec:	eb62 0206 	sbc.w	r2, r2, r6
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	f04f 0400 	mov.w	r4, #0
 8003ef8:	0194      	lsls	r4, r2, #6
 8003efa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003efe:	018b      	lsls	r3, r1, #6
 8003f00:	1a5b      	subs	r3, r3, r1
 8003f02:	eb64 0402 	sbc.w	r4, r4, r2
 8003f06:	f04f 0100 	mov.w	r1, #0
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	00e2      	lsls	r2, r4, #3
 8003f10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f14:	00d9      	lsls	r1, r3, #3
 8003f16:	460b      	mov	r3, r1
 8003f18:	4614      	mov	r4, r2
 8003f1a:	195b      	adds	r3, r3, r5
 8003f1c:	eb44 0406 	adc.w	r4, r4, r6
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	02a2      	lsls	r2, r4, #10
 8003f2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f2e:	0299      	lsls	r1, r3, #10
 8003f30:	460b      	mov	r3, r1
 8003f32:	4614      	mov	r4, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	4621      	mov	r1, r4
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f04f 0400 	mov.w	r4, #0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4623      	mov	r3, r4
 8003f42:	f7fc f99d 	bl	8000280 <__aeabi_uldivmod>
 8003f46:	4603      	mov	r3, r0
 8003f48:	460c      	mov	r4, r1
 8003f4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	3301      	adds	r3, #1
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f64:	60bb      	str	r3, [r7, #8]
      break;
 8003f66:	e002      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f6a:	60bb      	str	r3, [r7, #8]
      break;
 8003f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	00f42400 	.word	0x00f42400
 8003f80:	007a1200 	.word	0x007a1200

08003f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000000 	.word	0x20000000

08003f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fa0:	f7ff fff0 	bl	8003f84 <HAL_RCC_GetHCLKFreq>
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	0a9b      	lsrs	r3, r3, #10
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4a03      	ldr	r2, [pc, #12]	; (8003fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	0800af6c 	.word	0x0800af6c

08003fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d035      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fec:	4b62      	ldr	r3, [pc, #392]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ff2:	f7fd f927 	bl	8001244 <HAL_GetTick>
 8003ff6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ffa:	f7fd f923 	bl	8001244 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e0b0      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800400c:	4b5b      	ldr	r3, [pc, #364]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f0      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	019a      	lsls	r2, r3, #6
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	071b      	lsls	r3, r3, #28
 8004024:	4955      	ldr	r1, [pc, #340]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800402c:	4b52      	ldr	r3, [pc, #328]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004032:	f7fd f907 	bl	8001244 <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004038:	e008      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800403a:	f7fd f903 	bl	8001244 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e090      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800404c:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8083 	beq.w	800416c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	4b44      	ldr	r3, [pc, #272]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	4a43      	ldr	r2, [pc, #268]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004074:	6413      	str	r3, [r2, #64]	; 0x40
 8004076:	4b41      	ldr	r3, [pc, #260]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004082:	4b3f      	ldr	r3, [pc, #252]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a3e      	ldr	r2, [pc, #248]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800408e:	f7fd f8d9 	bl	8001244 <HAL_GetTick>
 8004092:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004096:	f7fd f8d5 	bl	8001244 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e062      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040a8:	4b35      	ldr	r3, [pc, #212]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b4:	4b31      	ldr	r3, [pc, #196]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02f      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d028      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d2:	4b2a      	ldr	r3, [pc, #168]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040dc:	4b29      	ldr	r3, [pc, #164]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e2:	4b28      	ldr	r3, [pc, #160]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040e8:	4a24      	ldr	r2, [pc, #144]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d114      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fd f8a3 	bl	8001244 <HAL_GetTick>
 80040fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd f89f 	bl	8001244 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e02a      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004118:	4b18      	ldr	r3, [pc, #96]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ee      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004130:	d10d      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004146:	490d      	ldr	r1, [pc, #52]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]
 800414c:	e005      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004154:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004158:	6093      	str	r3, [r2, #8]
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800415c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004166:	4905      	ldr	r1, [pc, #20]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004168:	4313      	orrs	r3, r2
 800416a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	42470068 	.word	0x42470068
 800417c:	40023800 	.word	0x40023800
 8004180:	40007000 	.word	0x40007000
 8004184:	42470e40 	.word	0x42470e40

08004188 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d13d      	bne.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ae:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d12f      	bne.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80041ba:	4b1e      	ldr	r3, [pc, #120]	; (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041bc:	617b      	str	r3, [r7, #20]
          break;
 80041be:	e02f      	b.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041cc:	d108      	bne.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041ce:	4b18      	ldr	r3, [pc, #96]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d6:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e007      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041e0:	4b13      	ldr	r3, [pc, #76]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e8:	4a14      	ldr	r2, [pc, #80]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80041f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f6:	099b      	lsrs	r3, r3, #6
 80041f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
 8004202:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420a:	0f1b      	lsrs	r3, r3, #28
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	617b      	str	r3, [r7, #20]
          break;
 8004218:	e002      	b.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
          break;
 800421e:	bf00      	nop
        }
      }
      break;
 8004220:	bf00      	nop
    }
  }
  return frequency;
 8004222:	697b      	ldr	r3, [r7, #20]
}
 8004224:	4618      	mov	r0, r3
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40023800 	.word	0x40023800
 8004234:	00bb8000 	.word	0x00bb8000
 8004238:	007a1200 	.word	0x007a1200
 800423c:	00f42400 	.word	0x00f42400

08004240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e056      	b.n	8004300 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7fc fde9 	bl	8000e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004288:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	ea42 0103 	orr.w	r1, r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	0c1b      	lsrs	r3, r3, #16
 80042d0:	f003 0104 	and.w	r1, r3, #4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_SPI_Transmit+0x22>
 8004326:	2302      	movs	r3, #2
 8004328:	e11e      	b.n	8004568 <HAL_SPI_Transmit+0x260>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004332:	f7fc ff87 	bl	8001244 <HAL_GetTick>
 8004336:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d002      	beq.n	800434e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004348:	2302      	movs	r3, #2
 800434a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800434c:	e103      	b.n	8004556 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_SPI_Transmit+0x52>
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800435e:	e0fa      	b.n	8004556 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2203      	movs	r2, #3
 8004364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a6:	d107      	bne.n	80043b8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d007      	beq.n	80043d6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043de:	d14b      	bne.n	8004478 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_SPI_Transmit+0xe6>
 80043e8:	8afb      	ldrh	r3, [r7, #22]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d13e      	bne.n	800446c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	881a      	ldrh	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	1c9a      	adds	r2, r3, #2
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004412:	e02b      	b.n	800446c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d112      	bne.n	8004448 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	881a      	ldrh	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	1c9a      	adds	r2, r3, #2
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	86da      	strh	r2, [r3, #54]	; 0x36
 8004446:	e011      	b.n	800446c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004448:	f7fc fefc 	bl	8001244 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d803      	bhi.n	8004460 <HAL_SPI_Transmit+0x158>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d102      	bne.n	8004466 <HAL_SPI_Transmit+0x15e>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	77fb      	strb	r3, [r7, #31]
          goto error;
 800446a:	e074      	b.n	8004556 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ce      	bne.n	8004414 <HAL_SPI_Transmit+0x10c>
 8004476:	e04c      	b.n	8004512 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_SPI_Transmit+0x17e>
 8004480:	8afb      	ldrh	r3, [r7, #22]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d140      	bne.n	8004508 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	7812      	ldrb	r2, [r2, #0]
 8004492:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044ac:	e02c      	b.n	8004508 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d113      	bne.n	80044e4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80044e2:	e011      	b.n	8004508 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e4:	f7fc feae 	bl	8001244 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d803      	bhi.n	80044fc <HAL_SPI_Transmit+0x1f4>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d102      	bne.n	8004502 <HAL_SPI_Transmit+0x1fa>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d102      	bne.n	8004508 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004506:	e026      	b.n	8004556 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1cd      	bne.n	80044ae <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	6839      	ldr	r1, [r7, #0]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fcc4 	bl	8004ea4 <SPI_EndRxTxTransaction>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e000      	b.n	8004556 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004554:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004566:	7ffb      	ldrb	r3, [r7, #31]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800458c:	d112      	bne.n	80045b4 <HAL_SPI_Receive+0x44>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10e      	bne.n	80045b4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2204      	movs	r2, #4
 800459a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800459e:	88fa      	ldrh	r2, [r7, #6]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f8e9 	bl	8004782 <HAL_SPI_TransmitReceive>
 80045b0:	4603      	mov	r3, r0
 80045b2:	e0e2      	b.n	800477a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_SPI_Receive+0x52>
 80045be:	2302      	movs	r3, #2
 80045c0:	e0db      	b.n	800477a <HAL_SPI_Receive+0x20a>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ca:	f7fc fe3b 	bl	8001244 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d002      	beq.n	80045e2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
 80045de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045e0:	e0c2      	b.n	8004768 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_SPI_Receive+0x7e>
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045f2:	e0b9      	b.n	8004768 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2204      	movs	r2, #4
 80045f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800463a:	d107      	bne.n	800464c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800464a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d007      	beq.n	800466a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004668:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d162      	bne.n	8004738 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004672:	e02e      	b.n	80046d2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d115      	bne.n	80046ae <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f103 020c 	add.w	r2, r3, #12
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	7812      	ldrb	r2, [r2, #0]
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046ac:	e011      	b.n	80046d2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ae:	f7fc fdc9 	bl	8001244 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d803      	bhi.n	80046c6 <HAL_SPI_Receive+0x156>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d102      	bne.n	80046cc <HAL_SPI_Receive+0x15c>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d102      	bne.n	80046d2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046d0:	e04a      	b.n	8004768 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1cb      	bne.n	8004674 <HAL_SPI_Receive+0x104>
 80046dc:	e031      	b.n	8004742 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d113      	bne.n	8004714 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	b292      	uxth	r2, r2
 80046f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004712:	e011      	b.n	8004738 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004714:	f7fc fd96 	bl	8001244 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d803      	bhi.n	800472c <HAL_SPI_Receive+0x1bc>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d102      	bne.n	8004732 <HAL_SPI_Receive+0x1c2>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d102      	bne.n	8004738 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004736:	e017      	b.n	8004768 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1cd      	bne.n	80046de <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	6839      	ldr	r1, [r7, #0]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fb46 	bl	8004dd8 <SPI_EndRxTransaction>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	75fb      	strb	r3, [r7, #23]
 8004764:	e000      	b.n	8004768 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004766:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004778:	7dfb      	ldrb	r3, [r7, #23]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b08c      	sub	sp, #48	; 0x30
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004790:	2301      	movs	r3, #1
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_SPI_TransmitReceive+0x26>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e18a      	b.n	8004abe <HAL_SPI_TransmitReceive+0x33c>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047b0:	f7fc fd48 	bl	8001244 <HAL_GetTick>
 80047b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047c6:	887b      	ldrh	r3, [r7, #2]
 80047c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d00f      	beq.n	80047f2 <HAL_SPI_TransmitReceive+0x70>
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d8:	d107      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x68>
 80047e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d003      	beq.n	80047f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
 80047ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047f0:	e15b      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x82>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x82>
 80047fe:	887b      	ldrh	r3, [r7, #2]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d103      	bne.n	800480c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800480a:	e14e      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b04      	cmp	r3, #4
 8004816:	d003      	beq.n	8004820 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2205      	movs	r2, #5
 800481c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	887a      	ldrh	r2, [r7, #2]
 8004836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	887a      	ldrh	r2, [r7, #2]
 8004842:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d007      	beq.n	8004874 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004872:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487c:	d178      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_SPI_TransmitReceive+0x10a>
 8004886:	8b7b      	ldrh	r3, [r7, #26]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d166      	bne.n	800495a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	881a      	ldrh	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	1c9a      	adds	r2, r3, #2
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048b0:	e053      	b.n	800495a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d11b      	bne.n	80048f8 <HAL_SPI_TransmitReceive+0x176>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <HAL_SPI_TransmitReceive+0x176>
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d113      	bne.n	80048f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	881a      	ldrh	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	1c9a      	adds	r2, r3, #2
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b01      	cmp	r3, #1
 8004904:	d119      	bne.n	800493a <HAL_SPI_TransmitReceive+0x1b8>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d014      	beq.n	800493a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	b292      	uxth	r2, r2
 800491c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	1c9a      	adds	r2, r3, #2
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004936:	2301      	movs	r3, #1
 8004938:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800493a:	f7fc fc83 	bl	8001244 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004946:	429a      	cmp	r2, r3
 8004948:	d807      	bhi.n	800495a <HAL_SPI_TransmitReceive+0x1d8>
 800494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d003      	beq.n	800495a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004958:	e0a7      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1a6      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x130>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1a1      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x130>
 800496e:	e07c      	b.n	8004a6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_SPI_TransmitReceive+0x1fc>
 8004978:	8b7b      	ldrh	r3, [r7, #26]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d16b      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	7812      	ldrb	r2, [r2, #0]
 800498a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a4:	e057      	b.n	8004a56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d11c      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x26c>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d017      	beq.n	80049ee <HAL_SPI_TransmitReceive+0x26c>
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d114      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d119      	bne.n	8004a30 <HAL_SPI_TransmitReceive+0x2ae>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d014      	beq.n	8004a30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a30:	f7fc fc08 	bl	8001244 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d803      	bhi.n	8004a48 <HAL_SPI_TransmitReceive+0x2c6>
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d102      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x2cc>
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d103      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a54:	e029      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1a2      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x224>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d19d      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fa18 	bl	8004ea4 <SPI_EndRxTxTransaction>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d006      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a86:	e010      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10b      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	e000      	b.n	8004aaa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004aa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004aba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3730      	adds	r7, #48	; 0x30
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10f      	bne.n	8004b0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	099b      	lsrs	r3, r3, #6
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d004      	beq.n	8004b0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
    return;
 8004b0a:	e0d8      	b.n	8004cbe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_SPI_IRQHandler+0x66>
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	09db      	lsrs	r3, r3, #7
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
    return;
 8004b2c:	e0c7      	b.n	8004cbe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10c      	bne.n	8004b54 <HAL_SPI_IRQHandler+0x8c>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	099b      	lsrs	r3, r3, #6
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80b5 	beq.w	8004cbe <HAL_SPI_IRQHandler+0x1f6>
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80ae 	beq.w	8004cbe <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d023      	beq.n	8004bb6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d011      	beq.n	8004b9e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	f043 0204 	orr.w	r2, r3, #4
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	e00b      	b.n	8004bb6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	693b      	ldr	r3, [r7, #16]
        return;
 8004bb4:	e083      	b.n	8004cbe <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d014      	beq.n	8004bec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc6:	f043 0201 	orr.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00c      	beq.n	8004c12 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfc:	f043 0208 	orr.w	r2, r3, #8
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c04:	2300      	movs	r3, #0
 8004c06:	60bb      	str	r3, [r7, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d050      	beq.n	8004cbc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <HAL_SPI_IRQHandler+0x17e>
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d034      	beq.n	8004cb0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0203 	bic.w	r2, r2, #3
 8004c54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d011      	beq.n	8004c82 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	4a18      	ldr	r2, [pc, #96]	; (8004cc4 <HAL_SPI_IRQHandler+0x1fc>)
 8004c64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fc fc29 	bl	80014c2 <HAL_DMA_Abort_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8e:	4a0d      	ldr	r2, [pc, #52]	; (8004cc4 <HAL_SPI_IRQHandler+0x1fc>)
 8004c90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fc fc13 	bl	80014c2 <HAL_DMA_Abort_IT>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004cae:	e003      	b.n	8004cb8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f809 	bl	8004cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cb6:	e000      	b.n	8004cba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004cb8:	bf00      	nop
    return;
 8004cba:	bf00      	nop
 8004cbc:	bf00      	nop
  }
}
 8004cbe:	3720      	adds	r7, #32
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	08004cdd 	.word	0x08004cdd

08004cc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff ffe6 	bl	8004cc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	4613      	mov	r3, r2
 8004d12:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d14:	e04c      	b.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1c:	d048      	beq.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d1e:	f7fc fa91 	bl	8001244 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d902      	bls.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d13d      	bne.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d4c:	d111      	bne.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d56:	d004      	beq.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d60:	d107      	bne.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7a:	d10f      	bne.n	8004d9c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e00f      	b.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d1a3      	bne.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dec:	d111      	bne.n	8004e12 <SPI_EndRxTransaction+0x3a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	d004      	beq.n	8004e02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e00:	d107      	bne.n	8004e12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d12a      	bne.n	8004e72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d012      	beq.n	8004e4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2180      	movs	r1, #128	; 0x80
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff ff67 	bl	8004d04 <SPI_WaitFlagStateUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02d      	beq.n	8004e98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e026      	b.n	8004e9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2101      	movs	r1, #1
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7ff ff54 	bl	8004d04 <SPI_WaitFlagStateUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01a      	beq.n	8004e98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e013      	b.n	8004e9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff ff41 	bl	8004d04 <SPI_WaitFlagStateUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e000      	b.n	8004e9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <SPI_EndRxTxTransaction+0x7c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <SPI_EndRxTxTransaction+0x80>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	0d5b      	lsrs	r3, r3, #21
 8004ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ec0:	fb02 f303 	mul.w	r3, r2, r3
 8004ec4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ece:	d112      	bne.n	8004ef6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2180      	movs	r1, #128	; 0x80
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff ff12 	bl	8004d04 <SPI_WaitFlagStateUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d016      	beq.n	8004f14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	f043 0220 	orr.w	r2, r3, #32
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e00f      	b.n	8004f16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d0f2      	beq.n	8004ef6 <SPI_EndRxTxTransaction+0x52>
 8004f10:	e000      	b.n	8004f14 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f12:	bf00      	nop
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000000 	.word	0x20000000
 8004f24:	165e9f81 	.word	0x165e9f81

08004f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d007      	beq.n	8004f62 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e01d      	b.n	8004fbe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fb ffda 	bl	8000f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f000 f954 	bl	800525c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b0c      	cmp	r3, #12
 8004fd6:	d841      	bhi.n	800505c <HAL_TIM_PWM_Start_IT+0x94>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <HAL_TIM_PWM_Start_IT+0x18>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005015 	.word	0x08005015
 8004fe4:	0800505d 	.word	0x0800505d
 8004fe8:	0800505d 	.word	0x0800505d
 8004fec:	0800505d 	.word	0x0800505d
 8004ff0:	08005027 	.word	0x08005027
 8004ff4:	0800505d 	.word	0x0800505d
 8004ff8:	0800505d 	.word	0x0800505d
 8004ffc:	0800505d 	.word	0x0800505d
 8005000:	08005039 	.word	0x08005039
 8005004:	0800505d 	.word	0x0800505d
 8005008:	0800505d 	.word	0x0800505d
 800500c:	0800505d 	.word	0x0800505d
 8005010:	0800504b 	.word	0x0800504b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0202 	orr.w	r2, r2, #2
 8005022:	60da      	str	r2, [r3, #12]
      break;
 8005024:	e01b      	b.n	800505e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0204 	orr.w	r2, r2, #4
 8005034:	60da      	str	r2, [r3, #12]
      break;
 8005036:	e012      	b.n	800505e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0208 	orr.w	r2, r2, #8
 8005046:	60da      	str	r2, [r3, #12]
      break;
 8005048:	e009      	b.n	800505e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0210 	orr.w	r2, r2, #16
 8005058:	60da      	str	r2, [r3, #12]
      break;
 800505a:	e000      	b.n	800505e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800505c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2201      	movs	r2, #1
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fb48 	bl	80056fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <HAL_TIM_PWM_Start_IT+0x100>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_TIM_PWM_Start_IT+0xb8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a14      	ldr	r2, [pc, #80]	; (80050cc <HAL_TIM_PWM_Start_IT+0x104>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d101      	bne.n	8005084 <HAL_TIM_PWM_Start_IT+0xbc>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <HAL_TIM_PWM_Start_IT+0xbe>
 8005084:	2300      	movs	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b06      	cmp	r3, #6
 80050aa:	d007      	beq.n	80050bc <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0201 	orr.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40010400 	.word	0x40010400

080050d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e0b4      	b.n	8005254 <HAL_TIM_PWM_ConfigChannel+0x184>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b0c      	cmp	r3, #12
 80050fe:	f200 809f 	bhi.w	8005240 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	0800513d 	.word	0x0800513d
 800510c:	08005241 	.word	0x08005241
 8005110:	08005241 	.word	0x08005241
 8005114:	08005241 	.word	0x08005241
 8005118:	0800517d 	.word	0x0800517d
 800511c:	08005241 	.word	0x08005241
 8005120:	08005241 	.word	0x08005241
 8005124:	08005241 	.word	0x08005241
 8005128:	080051bf 	.word	0x080051bf
 800512c:	08005241 	.word	0x08005241
 8005130:	08005241 	.word	0x08005241
 8005134:	08005241 	.word	0x08005241
 8005138:	080051ff 	.word	0x080051ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f92a 	bl	800539c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0208 	orr.w	r2, r2, #8
 8005156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0204 	bic.w	r2, r2, #4
 8005166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6999      	ldr	r1, [r3, #24]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	619a      	str	r2, [r3, #24]
      break;
 800517a:	e062      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f97a 	bl	800547c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6999      	ldr	r1, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	021a      	lsls	r2, r3, #8
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	619a      	str	r2, [r3, #24]
      break;
 80051bc:	e041      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f9cf 	bl	8005568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0208 	orr.w	r2, r2, #8
 80051d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0204 	bic.w	r2, r2, #4
 80051e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69d9      	ldr	r1, [r3, #28]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	61da      	str	r2, [r3, #28]
      break;
 80051fc:	e021      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fa23 	bl	8005650 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69d9      	ldr	r1, [r3, #28]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	021a      	lsls	r2, r3, #8
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	61da      	str	r2, [r3, #28]
      break;
 800523e:	e000      	b.n	8005242 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005240:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a40      	ldr	r2, [pc, #256]	; (8005370 <TIM_Base_SetConfig+0x114>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <TIM_Base_SetConfig+0x40>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527a:	d00f      	beq.n	800529c <TIM_Base_SetConfig+0x40>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a3d      	ldr	r2, [pc, #244]	; (8005374 <TIM_Base_SetConfig+0x118>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00b      	beq.n	800529c <TIM_Base_SetConfig+0x40>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a3c      	ldr	r2, [pc, #240]	; (8005378 <TIM_Base_SetConfig+0x11c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d007      	beq.n	800529c <TIM_Base_SetConfig+0x40>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a3b      	ldr	r2, [pc, #236]	; (800537c <TIM_Base_SetConfig+0x120>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a3a      	ldr	r2, [pc, #232]	; (8005380 <TIM_Base_SetConfig+0x124>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d108      	bne.n	80052ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2f      	ldr	r2, [pc, #188]	; (8005370 <TIM_Base_SetConfig+0x114>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d02b      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052bc:	d027      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a2c      	ldr	r2, [pc, #176]	; (8005374 <TIM_Base_SetConfig+0x118>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d023      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a2b      	ldr	r2, [pc, #172]	; (8005378 <TIM_Base_SetConfig+0x11c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01f      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2a      	ldr	r2, [pc, #168]	; (800537c <TIM_Base_SetConfig+0x120>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01b      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a29      	ldr	r2, [pc, #164]	; (8005380 <TIM_Base_SetConfig+0x124>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d017      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a28      	ldr	r2, [pc, #160]	; (8005384 <TIM_Base_SetConfig+0x128>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a27      	ldr	r2, [pc, #156]	; (8005388 <TIM_Base_SetConfig+0x12c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00f      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a26      	ldr	r2, [pc, #152]	; (800538c <TIM_Base_SetConfig+0x130>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00b      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a25      	ldr	r2, [pc, #148]	; (8005390 <TIM_Base_SetConfig+0x134>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a24      	ldr	r2, [pc, #144]	; (8005394 <TIM_Base_SetConfig+0x138>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a23      	ldr	r2, [pc, #140]	; (8005398 <TIM_Base_SetConfig+0x13c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d108      	bne.n	8005320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <TIM_Base_SetConfig+0x114>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0xf8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <TIM_Base_SetConfig+0x124>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d103      	bne.n	800535c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	615a      	str	r2, [r3, #20]
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40010000 	.word	0x40010000
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40000c00 	.word	0x40000c00
 8005380:	40010400 	.word	0x40010400
 8005384:	40014000 	.word	0x40014000
 8005388:	40014400 	.word	0x40014400
 800538c:	40014800 	.word	0x40014800
 8005390:	40001800 	.word	0x40001800
 8005394:	40001c00 	.word	0x40001c00
 8005398:	40002000 	.word	0x40002000

0800539c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f023 0201 	bic.w	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0303 	bic.w	r3, r3, #3
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 0302 	bic.w	r3, r3, #2
 80053e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a20      	ldr	r2, [pc, #128]	; (8005474 <TIM_OC1_SetConfig+0xd8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_OC1_SetConfig+0x64>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <TIM_OC1_SetConfig+0xdc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10c      	bne.n	800541a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0308 	bic.w	r3, r3, #8
 8005406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 0304 	bic.w	r3, r3, #4
 8005418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <TIM_OC1_SetConfig+0xd8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_OC1_SetConfig+0x8e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a14      	ldr	r2, [pc, #80]	; (8005478 <TIM_OC1_SetConfig+0xdc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d111      	bne.n	800544e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	621a      	str	r2, [r3, #32]
}
 8005468:	bf00      	nop
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40010000 	.word	0x40010000
 8005478:	40010400 	.word	0x40010400

0800547c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f023 0210 	bic.w	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0320 	bic.w	r3, r3, #32
 80054c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a22      	ldr	r2, [pc, #136]	; (8005560 <TIM_OC2_SetConfig+0xe4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC2_SetConfig+0x68>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a21      	ldr	r2, [pc, #132]	; (8005564 <TIM_OC2_SetConfig+0xe8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10d      	bne.n	8005500 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a17      	ldr	r2, [pc, #92]	; (8005560 <TIM_OC2_SetConfig+0xe4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_OC2_SetConfig+0x94>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a16      	ldr	r2, [pc, #88]	; (8005564 <TIM_OC2_SetConfig+0xe8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d113      	bne.n	8005538 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800551e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40010400 	.word	0x40010400

08005568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a21      	ldr	r2, [pc, #132]	; (8005648 <TIM_OC3_SetConfig+0xe0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_OC3_SetConfig+0x66>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a20      	ldr	r2, [pc, #128]	; (800564c <TIM_OC3_SetConfig+0xe4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10d      	bne.n	80055ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a16      	ldr	r2, [pc, #88]	; (8005648 <TIM_OC3_SetConfig+0xe0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_OC3_SetConfig+0x92>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a15      	ldr	r2, [pc, #84]	; (800564c <TIM_OC3_SetConfig+0xe4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d113      	bne.n	8005622 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40010000 	.word	0x40010000
 800564c:	40010400 	.word	0x40010400

08005650 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800569a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	031b      	lsls	r3, r3, #12
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <TIM_OC4_SetConfig+0xa4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_OC4_SetConfig+0x68>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <TIM_OC4_SetConfig+0xa8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d109      	bne.n	80056cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	019b      	lsls	r3, r3, #6
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40010400 	.word	0x40010400

080056fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 031f 	and.w	r3, r3, #31
 800570e:	2201      	movs	r2, #1
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	43db      	mvns	r3, r3
 800571e:	401a      	ands	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1a      	ldr	r2, [r3, #32]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	431a      	orrs	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800575c:	2302      	movs	r3, #2
 800575e:	e05a      	b.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a21      	ldr	r2, [pc, #132]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d022      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ac:	d01d      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d018      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1b      	ldr	r2, [pc, #108]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1a      	ldr	r2, [pc, #104]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00e      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a18      	ldr	r2, [pc, #96]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d009      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a17      	ldr	r2, [pc, #92]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d004      	beq.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a15      	ldr	r2, [pc, #84]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d10c      	bne.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40010000 	.word	0x40010000
 8005828:	40000400 	.word	0x40000400
 800582c:	40000800 	.word	0x40000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	40010400 	.word	0x40010400
 8005838:	40014000 	.word	0x40014000
 800583c:	40001800 	.word	0x40001800

08005840 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005858:	2302      	movs	r3, #2
 800585a:	e03d      	b.n	80058d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058e4:	b084      	sub	sp, #16
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	f107 001c 	add.w	r0, r7, #28
 80058f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d122      	bne.n	8005942 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005926:	2b01      	cmp	r3, #1
 8005928:	d105      	bne.n	8005936 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f001 fac6 	bl	8006ec8 <USB_CoreReset>
 800593c:	4603      	mov	r3, r0
 800593e:	73fb      	strb	r3, [r7, #15]
 8005940:	e01a      	b.n	8005978 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 faba 	bl	8006ec8 <USB_CoreReset>
 8005954:	4603      	mov	r3, r0
 8005956:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	639a      	str	r2, [r3, #56]	; 0x38
 800596a:	e005      	b.n	8005978 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	2b01      	cmp	r3, #1
 800597c:	d10b      	bne.n	8005996 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f043 0206 	orr.w	r2, r3, #6
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059a2:	b004      	add	sp, #16
 80059a4:	4770      	bx	lr
	...

080059a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d165      	bne.n	8005a88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4a41      	ldr	r2, [pc, #260]	; (8005ac4 <USB_SetTurnaroundTime+0x11c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d906      	bls.n	80059d2 <USB_SetTurnaroundTime+0x2a>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <USB_SetTurnaroundTime+0x120>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d802      	bhi.n	80059d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80059cc:	230f      	movs	r3, #15
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e062      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4a3c      	ldr	r2, [pc, #240]	; (8005ac8 <USB_SetTurnaroundTime+0x120>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d906      	bls.n	80059e8 <USB_SetTurnaroundTime+0x40>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4a3b      	ldr	r2, [pc, #236]	; (8005acc <USB_SetTurnaroundTime+0x124>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d802      	bhi.n	80059e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80059e2:	230e      	movs	r3, #14
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	e057      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4a38      	ldr	r2, [pc, #224]	; (8005acc <USB_SetTurnaroundTime+0x124>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d906      	bls.n	80059fe <USB_SetTurnaroundTime+0x56>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4a37      	ldr	r2, [pc, #220]	; (8005ad0 <USB_SetTurnaroundTime+0x128>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d802      	bhi.n	80059fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80059f8:	230d      	movs	r3, #13
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	e04c      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4a33      	ldr	r2, [pc, #204]	; (8005ad0 <USB_SetTurnaroundTime+0x128>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d906      	bls.n	8005a14 <USB_SetTurnaroundTime+0x6c>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4a32      	ldr	r2, [pc, #200]	; (8005ad4 <USB_SetTurnaroundTime+0x12c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d802      	bhi.n	8005a14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a0e:	230c      	movs	r3, #12
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e041      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4a2f      	ldr	r2, [pc, #188]	; (8005ad4 <USB_SetTurnaroundTime+0x12c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d906      	bls.n	8005a2a <USB_SetTurnaroundTime+0x82>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4a2e      	ldr	r2, [pc, #184]	; (8005ad8 <USB_SetTurnaroundTime+0x130>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d802      	bhi.n	8005a2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a24:	230b      	movs	r3, #11
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e036      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4a2a      	ldr	r2, [pc, #168]	; (8005ad8 <USB_SetTurnaroundTime+0x130>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d906      	bls.n	8005a40 <USB_SetTurnaroundTime+0x98>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4a29      	ldr	r2, [pc, #164]	; (8005adc <USB_SetTurnaroundTime+0x134>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d802      	bhi.n	8005a40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a3a:	230a      	movs	r3, #10
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	e02b      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4a26      	ldr	r2, [pc, #152]	; (8005adc <USB_SetTurnaroundTime+0x134>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d906      	bls.n	8005a56 <USB_SetTurnaroundTime+0xae>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4a25      	ldr	r2, [pc, #148]	; (8005ae0 <USB_SetTurnaroundTime+0x138>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d802      	bhi.n	8005a56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a50:	2309      	movs	r3, #9
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e020      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4a21      	ldr	r2, [pc, #132]	; (8005ae0 <USB_SetTurnaroundTime+0x138>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d906      	bls.n	8005a6c <USB_SetTurnaroundTime+0xc4>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	4a20      	ldr	r2, [pc, #128]	; (8005ae4 <USB_SetTurnaroundTime+0x13c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d802      	bhi.n	8005a6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a66:	2308      	movs	r3, #8
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e015      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <USB_SetTurnaroundTime+0x13c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d906      	bls.n	8005a82 <USB_SetTurnaroundTime+0xda>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <USB_SetTurnaroundTime+0x140>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d802      	bhi.n	8005a82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a7c:	2307      	movs	r3, #7
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	e00a      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a82:	2306      	movs	r3, #6
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e007      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d102      	bne.n	8005a94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a8e:	2309      	movs	r3, #9
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	e001      	b.n	8005a98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a94:	2309      	movs	r3, #9
 8005a96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	029b      	lsls	r3, r3, #10
 8005aac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	00d8acbf 	.word	0x00d8acbf
 8005ac8:	00e4e1bf 	.word	0x00e4e1bf
 8005acc:	00f423ff 	.word	0x00f423ff
 8005ad0:	0106737f 	.word	0x0106737f
 8005ad4:	011a499f 	.word	0x011a499f
 8005ad8:	01312cff 	.word	0x01312cff
 8005adc:	014ca43f 	.word	0x014ca43f
 8005ae0:	016e35ff 	.word	0x016e35ff
 8005ae4:	01a6ab1f 	.word	0x01a6ab1f
 8005ae8:	01e847ff 	.word	0x01e847ff

08005aec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f043 0201 	orr.w	r2, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f023 0201 	bic.w	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d106      	bne.n	8005b5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	e00b      	b.n	8005b74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60da      	str	r2, [r3, #12]
 8005b6e:	e001      	b.n	8005b74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e003      	b.n	8005b7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005b74:	2032      	movs	r0, #50	; 0x32
 8005b76:	f7fb fb71 	bl	800125c <HAL_Delay>

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b84:	b084      	sub	sp, #16
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b086      	sub	sp, #24
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	e009      	b.n	8005bb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	3340      	adds	r3, #64	; 0x40
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	2200      	movs	r2, #0
 8005bb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b0e      	cmp	r3, #14
 8005bbc:	d9f2      	bls.n	8005ba4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11c      	bne.n	8005bfe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd2:	f043 0302 	orr.w	r3, r3, #2
 8005bd6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38
 8005bfc:	e00b      	b.n	8005c16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2300      	movs	r3, #0
 8005c20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c28:	4619      	mov	r1, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c30:	461a      	mov	r2, r3
 8005c32:	680b      	ldr	r3, [r1, #0]
 8005c34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10c      	bne.n	8005c56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c42:	2100      	movs	r1, #0
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f949 	bl	8005edc <USB_SetDevSpeed>
 8005c4a:	e008      	b.n	8005c5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f944 	bl	8005edc <USB_SetDevSpeed>
 8005c54:	e003      	b.n	8005c5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c56:	2103      	movs	r1, #3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f93f 	bl	8005edc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c5e:	2110      	movs	r1, #16
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f8f3 	bl	8005e4c <USB_FlushTxFifo>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f911 	bl	8005e98 <USB_FlushRxFifo>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c86:	461a      	mov	r2, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	461a      	mov	r2, r3
 8005c94:	2300      	movs	r3, #0
 8005c96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	e043      	b.n	8005d32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cc0:	d118      	bne.n	8005cf4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	e013      	b.n	8005d06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cea:	461a      	mov	r2, r3
 8005cec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	e008      	b.n	8005d06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	461a      	mov	r2, r3
 8005d02:	2300      	movs	r3, #0
 8005d04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d12:	461a      	mov	r2, r3
 8005d14:	2300      	movs	r3, #0
 8005d16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	461a      	mov	r2, r3
 8005d26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d3b7      	bcc.n	8005caa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	e043      	b.n	8005dc8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d56:	d118      	bne.n	8005d8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	e013      	b.n	8005d9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d80:	461a      	mov	r2, r3
 8005d82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	e008      	b.n	8005d9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d96:	461a      	mov	r2, r3
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	461a      	mov	r2, r3
 8005daa:	2300      	movs	r3, #0
 8005dac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d3b7      	bcc.n	8005d40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005df0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f043 0210 	orr.w	r2, r3, #16
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699a      	ldr	r2, [r3, #24]
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <USB_DevInit+0x2c4>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f043 0208 	orr.w	r2, r3, #8
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d107      	bne.n	8005e38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e30:	f043 0304 	orr.w	r3, r3, #4
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e44:	b004      	add	sp, #16
 8005e46:	4770      	bx	lr
 8005e48:	803c3800 	.word	0x803c3800

08005e4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	019b      	lsls	r3, r3, #6
 8005e5e:	f043 0220 	orr.w	r2, r3, #32
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <USB_FlushTxFifo+0x48>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d901      	bls.n	8005e78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e006      	b.n	8005e86 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d0f0      	beq.n	8005e66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	00030d40 	.word	0x00030d40

08005e98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2210      	movs	r2, #16
 8005ea8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3301      	adds	r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <USB_FlushRxFifo+0x40>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d901      	bls.n	8005ebc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e006      	b.n	8005eca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d0f0      	beq.n	8005eaa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	00030d40 	.word	0x00030d40

08005edc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005efc:	4313      	orrs	r3, r2
 8005efe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b087      	sub	sp, #28
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 0306 	and.w	r3, r3, #6
 8005f26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]
 8005f32:	e00a      	b.n	8005f4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d002      	beq.n	8005f40 <USB_GetDevSpeed+0x32>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	d102      	bne.n	8005f46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f40:	2302      	movs	r3, #2
 8005f42:	75fb      	strb	r3, [r7, #23]
 8005f44:	e001      	b.n	8005f4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f46:	230f      	movs	r3, #15
 8005f48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d13a      	bne.n	8005fea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	69da      	ldr	r2, [r3, #28]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	2101      	movs	r1, #1
 8005f86:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	68f9      	ldr	r1, [r7, #12]
 8005f8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f92:	4313      	orrs	r3, r2
 8005f94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d155      	bne.n	8006058 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	78db      	ldrb	r3, [r3, #3]
 8005fc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	059b      	lsls	r3, r3, #22
 8005fce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e036      	b.n	8006058 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006008:	4313      	orrs	r3, r2
 800600a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d11a      	bne.n	8006058 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	78db      	ldrb	r3, [r3, #3]
 800603c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800603e:	430b      	orrs	r3, r1
 8006040:	4313      	orrs	r3, r2
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	440a      	add	r2, r1
 800604a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006056:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d161      	bne.n	8006148 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800609a:	d11f      	bne.n	80060dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	2101      	movs	r1, #1
 80060ee:	fa01 f303 	lsl.w	r3, r1, r3
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	43db      	mvns	r3, r3
 80060f6:	68f9      	ldr	r1, [r7, #12]
 80060f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060fc:	4013      	ands	r3, r2
 80060fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006106:	69da      	ldr	r2, [r3, #28]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	2101      	movs	r1, #1
 8006112:	fa01 f303 	lsl.w	r3, r1, r3
 8006116:	b29b      	uxth	r3, r3
 8006118:	43db      	mvns	r3, r3
 800611a:	68f9      	ldr	r1, [r7, #12]
 800611c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006120:	4013      	ands	r3, r2
 8006122:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	0159      	lsls	r1, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	440b      	add	r3, r1
 800613a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613e:	4619      	mov	r1, r3
 8006140:	4b35      	ldr	r3, [pc, #212]	; (8006218 <USB_DeactivateEndpoint+0x1b0>)
 8006142:	4013      	ands	r3, r2
 8006144:	600b      	str	r3, [r1, #0]
 8006146:	e060      	b.n	800620a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800615a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800615e:	d11f      	bne.n	80061a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800617a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800617e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800619e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	2101      	movs	r1, #1
 80061b2:	fa01 f303 	lsl.w	r3, r1, r3
 80061b6:	041b      	lsls	r3, r3, #16
 80061b8:	43db      	mvns	r3, r3
 80061ba:	68f9      	ldr	r1, [r7, #12]
 80061bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061c0:	4013      	ands	r3, r2
 80061c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	2101      	movs	r1, #1
 80061d6:	fa01 f303 	lsl.w	r3, r1, r3
 80061da:	041b      	lsls	r3, r3, #16
 80061dc:	43db      	mvns	r3, r3
 80061de:	68f9      	ldr	r1, [r7, #12]
 80061e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061e4:	4013      	ands	r3, r2
 80061e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	0159      	lsls	r1, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	440b      	add	r3, r1
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	4619      	mov	r1, r3
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <USB_DeactivateEndpoint+0x1b4>)
 8006206:	4013      	ands	r3, r2
 8006208:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	ec337800 	.word	0xec337800
 800621c:	eff37800 	.word	0xeff37800

08006220 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	; 0x28
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	4613      	mov	r3, r2
 800622c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	2b01      	cmp	r3, #1
 800623e:	f040 815c 	bne.w	80064fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d132      	bne.n	80062b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006264:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006268:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800626c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	440a      	add	r2, r1
 8006284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006288:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800628c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a8:	0cdb      	lsrs	r3, r3, #19
 80062aa:	04db      	lsls	r3, r3, #19
 80062ac:	6113      	str	r3, [r2, #16]
 80062ae:	e074      	b.n	800639a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ca:	0cdb      	lsrs	r3, r3, #19
 80062cc:	04db      	lsls	r3, r3, #19
 80062ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6959      	ldr	r1, [r3, #20]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	440b      	add	r3, r1
 800630c:	1e59      	subs	r1, r3, #1
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	fbb1 f3f3 	udiv	r3, r1, r3
 8006316:	04d9      	lsls	r1, r3, #19
 8006318:	4b9d      	ldr	r3, [pc, #628]	; (8006590 <USB_EPStartXfer+0x370>)
 800631a:	400b      	ands	r3, r1
 800631c:	69b9      	ldr	r1, [r7, #24]
 800631e:	0148      	lsls	r0, r1, #5
 8006320:	69f9      	ldr	r1, [r7, #28]
 8006322:	4401      	add	r1, r0
 8006324:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006328:	4313      	orrs	r3, r2
 800632a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006342:	69b9      	ldr	r1, [r7, #24]
 8006344:	0148      	lsls	r0, r1, #5
 8006346:	69f9      	ldr	r1, [r7, #28]
 8006348:	4401      	add	r1, r0
 800634a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800634e:	4313      	orrs	r3, r2
 8006350:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	78db      	ldrb	r3, [r3, #3]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d11f      	bne.n	800639a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006374:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006378:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006398:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d14b      	bne.n	8006438 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	461a      	mov	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	78db      	ldrb	r3, [r3, #3]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d128      	bne.n	8006416 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d110      	bne.n	80063f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e00f      	b.n	8006416 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006414:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006430:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	e12f      	b.n	8006698 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006452:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006456:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	78db      	ldrb	r3, [r3, #3]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d015      	beq.n	800648c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8117 	beq.w	8006698 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	2101      	movs	r1, #1
 800647c:	fa01 f303 	lsl.w	r3, r1, r3
 8006480:	69f9      	ldr	r1, [r7, #28]
 8006482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006486:	4313      	orrs	r3, r2
 8006488:	634b      	str	r3, [r1, #52]	; 0x34
 800648a:	e105      	b.n	8006698 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006498:	2b00      	cmp	r3, #0
 800649a:	d110      	bne.n	80064be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e00f      	b.n	80064de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	68d9      	ldr	r1, [r3, #12]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	781a      	ldrb	r2, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	b298      	uxth	r0, r3
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	4603      	mov	r3, r0
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fa2b 	bl	800694e <USB_WritePacket>
 80064f8:	e0ce      	b.n	8006698 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	440a      	add	r2, r1
 8006510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006514:	0cdb      	lsrs	r3, r3, #19
 8006516:	04db      	lsls	r3, r3, #19
 8006518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800653c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d126      	bne.n	8006594 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800655c:	69b9      	ldr	r1, [r7, #24]
 800655e:	0148      	lsls	r0, r1, #5
 8006560:	69f9      	ldr	r1, [r7, #28]
 8006562:	4401      	add	r1, r0
 8006564:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006568:	4313      	orrs	r3, r2
 800656a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	440a      	add	r2, r1
 8006582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006586:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800658a:	6113      	str	r3, [r2, #16]
 800658c:	e036      	b.n	80065fc <USB_EPStartXfer+0x3dc>
 800658e:	bf00      	nop
 8006590:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	4413      	add	r3, r2
 800659e:	1e5a      	subs	r2, r3, #1
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	8afb      	ldrh	r3, [r7, #22]
 80065ba:	04d9      	lsls	r1, r3, #19
 80065bc:	4b39      	ldr	r3, [pc, #228]	; (80066a4 <USB_EPStartXfer+0x484>)
 80065be:	400b      	ands	r3, r1
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	0148      	lsls	r0, r1, #5
 80065c4:	69f9      	ldr	r1, [r7, #28]
 80065c6:	4401      	add	r1, r0
 80065c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065cc:	4313      	orrs	r3, r2
 80065ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	8af9      	ldrh	r1, [r7, #22]
 80065e4:	fb01 f303 	mul.w	r3, r1, r3
 80065e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ec:	69b9      	ldr	r1, [r7, #24]
 80065ee:	0148      	lsls	r0, r1, #5
 80065f0:	69f9      	ldr	r1, [r7, #28]
 80065f2:	4401      	add	r1, r0
 80065f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065f8:	4313      	orrs	r3, r2
 80065fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d10d      	bne.n	800661e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	68d9      	ldr	r1, [r3, #12]
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661a:	460a      	mov	r2, r1
 800661c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	78db      	ldrb	r3, [r3, #3]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d128      	bne.n	8006678 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006632:	2b00      	cmp	r3, #0
 8006634:	d110      	bne.n	8006658 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006650:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e00f      	b.n	8006678 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006676:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	0151      	lsls	r1, r2, #5
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	440a      	add	r2, r1
 800668e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006696:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3720      	adds	r7, #32
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	1ff80000 	.word	0x1ff80000

080066a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	f040 80cd 	bne.w	8006864 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d132      	bne.n	8006738 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	0151      	lsls	r1, r2, #5
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	440a      	add	r2, r1
 80066e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	440a      	add	r2, r1
 800670c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006714:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006730:	0cdb      	lsrs	r3, r3, #19
 8006732:	04db      	lsls	r3, r3, #19
 8006734:	6113      	str	r3, [r2, #16]
 8006736:	e04e      	b.n	80067d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006752:	0cdb      	lsrs	r3, r3, #19
 8006754:	04db      	lsls	r3, r3, #19
 8006756:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006772:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006776:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800677a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	695a      	ldr	r2, [r3, #20]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	d903      	bls.n	8006790 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c6:	6939      	ldr	r1, [r7, #16]
 80067c8:	0148      	lsls	r0, r1, #5
 80067ca:	6979      	ldr	r1, [r7, #20]
 80067cc:	4401      	add	r1, r0
 80067ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067d2:	4313      	orrs	r3, r2
 80067d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d11e      	bne.n	800681a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d009      	beq.n	80067f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	461a      	mov	r2, r3
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	0151      	lsls	r1, r2, #5
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	440a      	add	r2, r1
 800680e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006812:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	e092      	b.n	8006940 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	0151      	lsls	r1, r2, #5
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	440a      	add	r2, r1
 8006830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006834:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006838:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d07e      	beq.n	8006940 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	2101      	movs	r1, #1
 8006854:	fa01 f303 	lsl.w	r3, r1, r3
 8006858:	6979      	ldr	r1, [r7, #20]
 800685a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800685e:	4313      	orrs	r3, r2
 8006860:	634b      	str	r3, [r1, #52]	; 0x34
 8006862:	e06d      	b.n	8006940 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687e:	0cdb      	lsrs	r3, r3, #19
 8006880:	04db      	lsls	r3, r3, #19
 8006882:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800689e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	691a      	ldr	r2, [r3, #16]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ee:	6939      	ldr	r1, [r7, #16]
 80068f0:	0148      	lsls	r0, r1, #5
 80068f2:	6979      	ldr	r1, [r7, #20]
 80068f4:	4401      	add	r1, r0
 80068f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068fa:	4313      	orrs	r3, r2
 80068fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d10d      	bne.n	8006920 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	68d9      	ldr	r1, [r3, #12]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691c:	460a      	mov	r2, r1
 800691e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800693e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800694e:	b480      	push	{r7}
 8006950:	b089      	sub	sp, #36	; 0x24
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	4611      	mov	r1, r2
 800695a:	461a      	mov	r2, r3
 800695c:	460b      	mov	r3, r1
 800695e:	71fb      	strb	r3, [r7, #7]
 8006960:	4613      	mov	r3, r2
 8006962:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800696c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	d11a      	bne.n	80069aa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006974:	88bb      	ldrh	r3, [r7, #4]
 8006976:	3303      	adds	r3, #3
 8006978:	089b      	lsrs	r3, r3, #2
 800697a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800697c:	2300      	movs	r3, #0
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	e00f      	b.n	80069a2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	031a      	lsls	r2, r3, #12
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	4413      	add	r3, r2
 800698a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800698e:	461a      	mov	r2, r3
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	3304      	adds	r3, #4
 800699a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	3301      	adds	r3, #1
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d3eb      	bcc.n	8006982 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3724      	adds	r7, #36	; 0x24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b089      	sub	sp, #36	; 0x24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	3303      	adds	r3, #3
 80069d2:	089b      	lsrs	r3, r3, #2
 80069d4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80069d6:	2300      	movs	r3, #0
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	e00b      	b.n	80069f4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	3304      	adds	r3, #4
 80069ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	3301      	adds	r3, #1
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d3ef      	bcc.n	80069dc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80069fc:	69fb      	ldr	r3, [r7, #28]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3724      	adds	r7, #36	; 0x24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d12c      	bne.n	8006a80 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	db12      	blt.n	8006a5e <USB_EPSetStall+0x54>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00f      	beq.n	8006a5e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a5c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e02b      	b.n	8006ad8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	db12      	blt.n	8006ab8 <USB_EPSetStall+0xae>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00f      	beq.n	8006ab8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ab6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ad6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	785b      	ldrb	r3, [r3, #1]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d128      	bne.n	8006b54 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	78db      	ldrb	r3, [r3, #3]
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d003      	beq.n	8006b32 <USB_EPClearStall+0x4c>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	78db      	ldrb	r3, [r3, #3]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d138      	bne.n	8006ba4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	e027      	b.n	8006ba4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	78db      	ldrb	r3, [r3, #3]
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d003      	beq.n	8006b84 <USB_EPClearStall+0x9e>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	78db      	ldrb	r3, [r3, #3]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d10f      	bne.n	8006ba4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bd0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006bd4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	78fb      	ldrb	r3, [r7, #3]
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bec:	4313      	orrs	r3, r2
 8006bee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c18:	f023 0303 	bic.w	r3, r3, #3
 8006c1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c2c:	f023 0302 	bic.w	r3, r3, #2
 8006c30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c5a:	f023 0303 	bic.w	r3, r3, #3
 8006c5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c6e:	f043 0302 	orr.w	r3, r3, #2
 8006c72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4013      	ands	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	0c1b      	lsrs	r3, r3, #16
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	b29b      	uxth	r3, r3
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	fa22 f303 	lsr.w	r3, r2, r3
 8006d7c:	01db      	lsls	r3, r3, #7
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4013      	ands	r3, r2
 8006d98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	371c      	adds	r7, #28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f003 0301 	and.w	r3, r3, #1
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006de2:	f023 0307 	bic.w	r3, r3, #7
 8006de6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	460b      	mov	r3, r1
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	333c      	adds	r3, #60	; 0x3c
 8006e22:	3304      	adds	r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4a26      	ldr	r2, [pc, #152]	; (8006ec4 <USB_EP0_OutStart+0xb8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d90a      	bls.n	8006e46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e40:	d101      	bne.n	8006e46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e037      	b.n	8006eb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e74:	f043 0318 	orr.w	r3, r3, #24
 8006e78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006e8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e8e:	7afb      	ldrb	r3, [r7, #11]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d10f      	bne.n	8006eb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006eb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	4f54300a 	.word	0x4f54300a

08006ec8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4a13      	ldr	r2, [pc, #76]	; (8006f2c <USB_CoreReset+0x64>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d901      	bls.n	8006ee6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e01b      	b.n	8006f1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	daf2      	bge.n	8006ed4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f043 0201 	orr.w	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <USB_CoreReset+0x64>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d901      	bls.n	8006f10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e006      	b.n	8006f1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d0f0      	beq.n	8006efe <USB_CoreReset+0x36>

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	00030d40 	.word	0x00030d40

08006f30 <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d008      	beq.n	8006f50 <NRF24_csn+0x20>
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <NRF24_csn+0x38>)
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <NRF24_csn+0x3c>)
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	2201      	movs	r2, #1
 8006f48:	4619      	mov	r1, r3
 8006f4a:	f7fa fc77 	bl	800183c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8006f4e:	e007      	b.n	8006f60 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <NRF24_csn+0x38>)
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <NRF24_csn+0x3c>)
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	f7fa fc6e 	bl	800183c <HAL_GPIO_WritePin>
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000208 	.word	0x20000208
 8006f6c:	2000020c 	.word	0x2000020c

08006f70 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d008      	beq.n	8006f90 <NRF24_ce+0x20>
 8006f7e:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <NRF24_ce+0x38>)
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <NRF24_ce+0x3c>)
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	2201      	movs	r2, #1
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f7fa fc57 	bl	800183c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8006f8e:	e007      	b.n	8006fa0 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <NRF24_ce+0x38>)
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	4b05      	ldr	r3, [pc, #20]	; (8006fac <NRF24_ce+0x3c>)
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	f7fa fc4e 	bl	800183c <HAL_GPIO_WritePin>
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000208 	.word	0x20000208
 8006fac:	2000020e 	.word	0x2000020e

08006fb0 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8006fba:	2000      	movs	r0, #0
 8006fbc:	f7ff ffb8 	bl	8006f30 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8006fca:	f107 010c 	add.w	r1, r7, #12
 8006fce:	2364      	movs	r3, #100	; 0x64
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	480a      	ldr	r0, [pc, #40]	; (8006ffc <NRF24_read_register+0x4c>)
 8006fd4:	f7fd f998 	bl	8004308 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8006fd8:	f107 030c 	add.w	r3, r7, #12
 8006fdc:	1c59      	adds	r1, r3, #1
 8006fde:	2364      	movs	r3, #100	; 0x64
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	4806      	ldr	r0, [pc, #24]	; (8006ffc <NRF24_read_register+0x4c>)
 8006fe4:	f7fd fac4 	bl	8004570 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8006fe8:	7b7b      	ldrb	r3, [r7, #13]
 8006fea:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8006fec:	2001      	movs	r0, #1
 8006fee:	f7ff ff9f 	bl	8006f30 <NRF24_csn>
	return retData;
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000210 	.word	0x20000210

08007000 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	71fb      	strb	r3, [r7, #7]
 800700c:	4613      	mov	r3, r2
 800700e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8007010:	2000      	movs	r0, #0
 8007012:	f7ff ff8d 	bl	8006f30 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	f003 031f 	and.w	r3, r3, #31
 800701c:	b2db      	uxtb	r3, r3
 800701e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8007020:	f107 010c 	add.w	r1, r7, #12
 8007024:	2364      	movs	r3, #100	; 0x64
 8007026:	2201      	movs	r2, #1
 8007028:	4808      	ldr	r0, [pc, #32]	; (800704c <NRF24_read_registerN+0x4c>)
 800702a:	f7fd f96d 	bl	8004308 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800702e:	79bb      	ldrb	r3, [r7, #6]
 8007030:	b29a      	uxth	r2, r3
 8007032:	2364      	movs	r3, #100	; 0x64
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	4805      	ldr	r0, [pc, #20]	; (800704c <NRF24_read_registerN+0x4c>)
 8007038:	f7fd fa9a 	bl	8004570 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 800703c:	2001      	movs	r0, #1
 800703e:	f7ff ff77 	bl	8006f30 <NRF24_csn>
}
 8007042:	bf00      	nop
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000210 	.word	0x20000210

08007050 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	460a      	mov	r2, r1
 800705a:	71fb      	strb	r3, [r7, #7]
 800705c:	4613      	mov	r3, r2
 800705e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8007060:	2000      	movs	r0, #0
 8007062:	f7ff ff65 	bl	8006f30 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	f043 0320 	orr.w	r3, r3, #32
 800706c:	b2db      	uxtb	r3, r3
 800706e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8007070:	79bb      	ldrb	r3, [r7, #6]
 8007072:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8007074:	f107 010c 	add.w	r1, r7, #12
 8007078:	2364      	movs	r3, #100	; 0x64
 800707a:	2202      	movs	r2, #2
 800707c:	4804      	ldr	r0, [pc, #16]	; (8007090 <NRF24_write_register+0x40>)
 800707e:	f7fd f943 	bl	8004308 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8007082:	2001      	movs	r0, #1
 8007084:	f7ff ff54 	bl	8006f30 <NRF24_csn>
}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20000210 	.word	0x20000210

08007094 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	6039      	str	r1, [r7, #0]
 800709e:	71fb      	strb	r3, [r7, #7]
 80070a0:	4613      	mov	r3, r2
 80070a2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80070a4:	2000      	movs	r0, #0
 80070a6:	f7ff ff43 	bl	8006f30 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	f043 0320 	orr.w	r3, r3, #32
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80070b4:	f107 010c 	add.w	r1, r7, #12
 80070b8:	2364      	movs	r3, #100	; 0x64
 80070ba:	2201      	movs	r2, #1
 80070bc:	4808      	ldr	r0, [pc, #32]	; (80070e0 <NRF24_write_registerN+0x4c>)
 80070be:	f7fd f923 	bl	8004308 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80070c2:	79bb      	ldrb	r3, [r7, #6]
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	2364      	movs	r3, #100	; 0x64
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	4805      	ldr	r0, [pc, #20]	; (80070e0 <NRF24_write_registerN+0x4c>)
 80070cc:	f7fd f91c 	bl	8004308 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80070d0:	2001      	movs	r0, #1
 80070d2:	f7ff ff2d 	bl	8006f30 <NRF24_csn>
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000210 	.word	0x20000210

080070e4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80070e8:	21ff      	movs	r1, #255	; 0xff
 80070ea:	20e1      	movs	r0, #225	; 0xe1
 80070ec:	f7ff ffb0 	bl	8007050 <NRF24_write_register>
}
 80070f0:	bf00      	nop
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80070f8:	21ff      	movs	r1, #255	; 0xff
 80070fa:	20e2      	movs	r0, #226	; 0xe2
 80070fc:	f7ff ffa8 	bl	8007050 <NRF24_write_register>
}
 8007100:	bf00      	nop
 8007102:	bd80      	pop	{r7, pc}

08007104 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8007104:	b082      	sub	sp, #8
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	61fb      	str	r3, [r7, #28]
 8007110:	460b      	mov	r3, r1
 8007112:	807b      	strh	r3, [r7, #2]
 8007114:	4613      	mov	r3, r2
 8007116:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8007118:	4b66      	ldr	r3, [pc, #408]	; (80072b4 <NRF24_begin+0x1b0>)
 800711a:	4618      	mov	r0, r3
 800711c:	f107 031c 	add.w	r3, r7, #28
 8007120:	2258      	movs	r2, #88	; 0x58
 8007122:	4619      	mov	r1, r3
 8007124:	f003 f82e 	bl	800a184 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8007128:	4a63      	ldr	r2, [pc, #396]	; (80072b8 <NRF24_begin+0x1b4>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800712e:	4a63      	ldr	r2, [pc, #396]	; (80072bc <NRF24_begin+0x1b8>)
 8007130:	887b      	ldrh	r3, [r7, #2]
 8007132:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8007134:	4a62      	ldr	r2, [pc, #392]	; (80072c0 <NRF24_begin+0x1bc>)
 8007136:	883b      	ldrh	r3, [r7, #0]
 8007138:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800713a:	2001      	movs	r0, #1
 800713c:	f7ff fef8 	bl	8006f30 <NRF24_csn>
	NRF24_ce(0);
 8007140:	2000      	movs	r0, #0
 8007142:	f7ff ff15 	bl	8006f70 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8007146:	2005      	movs	r0, #5
 8007148:	f7fa f888 	bl	800125c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800714c:	2108      	movs	r1, #8
 800714e:	2000      	movs	r0, #0
 8007150:	f7ff ff7e 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8007154:	213f      	movs	r1, #63	; 0x3f
 8007156:	2001      	movs	r0, #1
 8007158:	f7ff ff7a 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800715c:	2103      	movs	r1, #3
 800715e:	2002      	movs	r0, #2
 8007160:	f7ff ff76 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8007164:	2103      	movs	r1, #3
 8007166:	2003      	movs	r0, #3
 8007168:	f7ff ff72 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800716c:	2103      	movs	r1, #3
 800716e:	2004      	movs	r0, #4
 8007170:	f7ff ff6e 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8007174:	2102      	movs	r1, #2
 8007176:	2005      	movs	r0, #5
 8007178:	f7ff ff6a 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800717c:	210f      	movs	r1, #15
 800717e:	2006      	movs	r0, #6
 8007180:	f7ff ff66 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8007184:	210e      	movs	r1, #14
 8007186:	2007      	movs	r0, #7
 8007188:	f7ff ff62 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800718c:	2100      	movs	r1, #0
 800718e:	2008      	movs	r0, #8
 8007190:	f7ff ff5e 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8007194:	2100      	movs	r1, #0
 8007196:	2009      	movs	r0, #9
 8007198:	f7ff ff5a 	bl	8007050 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800719c:	23e7      	movs	r3, #231	; 0xe7
 800719e:	733b      	strb	r3, [r7, #12]
 80071a0:	23e7      	movs	r3, #231	; 0xe7
 80071a2:	72fb      	strb	r3, [r7, #11]
 80071a4:	23e7      	movs	r3, #231	; 0xe7
 80071a6:	72bb      	strb	r3, [r7, #10]
 80071a8:	23e7      	movs	r3, #231	; 0xe7
 80071aa:	727b      	strb	r3, [r7, #9]
 80071ac:	23e7      	movs	r3, #231	; 0xe7
 80071ae:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80071b0:	f107 0308 	add.w	r3, r7, #8
 80071b4:	2205      	movs	r2, #5
 80071b6:	4619      	mov	r1, r3
 80071b8:	200a      	movs	r0, #10
 80071ba:	f7ff ff6b 	bl	8007094 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80071be:	23c2      	movs	r3, #194	; 0xc2
 80071c0:	733b      	strb	r3, [r7, #12]
 80071c2:	23c2      	movs	r3, #194	; 0xc2
 80071c4:	72fb      	strb	r3, [r7, #11]
 80071c6:	23c2      	movs	r3, #194	; 0xc2
 80071c8:	72bb      	strb	r3, [r7, #10]
 80071ca:	23c2      	movs	r3, #194	; 0xc2
 80071cc:	727b      	strb	r3, [r7, #9]
 80071ce:	23c2      	movs	r3, #194	; 0xc2
 80071d0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80071d2:	f107 0308 	add.w	r3, r7, #8
 80071d6:	2205      	movs	r2, #5
 80071d8:	4619      	mov	r1, r3
 80071da:	200b      	movs	r0, #11
 80071dc:	f7ff ff5a 	bl	8007094 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80071e0:	21c3      	movs	r1, #195	; 0xc3
 80071e2:	200c      	movs	r0, #12
 80071e4:	f7ff ff34 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80071e8:	21c4      	movs	r1, #196	; 0xc4
 80071ea:	200d      	movs	r0, #13
 80071ec:	f7ff ff30 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80071f0:	21c5      	movs	r1, #197	; 0xc5
 80071f2:	200e      	movs	r0, #14
 80071f4:	f7ff ff2c 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80071f8:	21c6      	movs	r1, #198	; 0xc6
 80071fa:	200f      	movs	r0, #15
 80071fc:	f7ff ff28 	bl	8007050 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8007200:	23e7      	movs	r3, #231	; 0xe7
 8007202:	733b      	strb	r3, [r7, #12]
 8007204:	23e7      	movs	r3, #231	; 0xe7
 8007206:	72fb      	strb	r3, [r7, #11]
 8007208:	23e7      	movs	r3, #231	; 0xe7
 800720a:	72bb      	strb	r3, [r7, #10]
 800720c:	23e7      	movs	r3, #231	; 0xe7
 800720e:	727b      	strb	r3, [r7, #9]
 8007210:	23e7      	movs	r3, #231	; 0xe7
 8007212:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8007214:	f107 0308 	add.w	r3, r7, #8
 8007218:	2205      	movs	r2, #5
 800721a:	4619      	mov	r1, r3
 800721c:	2010      	movs	r0, #16
 800721e:	f7ff ff39 	bl	8007094 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8007222:	2100      	movs	r1, #0
 8007224:	2011      	movs	r0, #17
 8007226:	f7ff ff13 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800722a:	2100      	movs	r1, #0
 800722c:	2012      	movs	r0, #18
 800722e:	f7ff ff0f 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8007232:	2100      	movs	r1, #0
 8007234:	2013      	movs	r0, #19
 8007236:	f7ff ff0b 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800723a:	2100      	movs	r1, #0
 800723c:	2014      	movs	r0, #20
 800723e:	f7ff ff07 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8007242:	2100      	movs	r1, #0
 8007244:	2015      	movs	r0, #21
 8007246:	f7ff ff03 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800724a:	2100      	movs	r1, #0
 800724c:	2016      	movs	r0, #22
 800724e:	f7ff feff 	bl	8007050 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8007252:	f000 f957 	bl	8007504 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8007256:	2100      	movs	r1, #0
 8007258:	201c      	movs	r0, #28
 800725a:	f7ff fef9 	bl	8007050 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800725e:	2100      	movs	r1, #0
 8007260:	201d      	movs	r0, #29
 8007262:	f7ff fef5 	bl	8007050 <NRF24_write_register>
	printRadioSettings();
 8007266:	f000 f967 	bl	8007538 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800726a:	210f      	movs	r1, #15
 800726c:	200f      	movs	r0, #15
 800726e:	f000 f829 	bl	80072c4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8007272:	2003      	movs	r0, #3
 8007274:	f000 f886 	bl	8007384 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8007278:	2001      	movs	r0, #1
 800727a:	f000 f8bd 	bl	80073f8 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800727e:	2002      	movs	r0, #2
 8007280:	f000 f900 	bl	8007484 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8007284:	f000 f866 	bl	8007354 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8007288:	2020      	movs	r0, #32
 800728a:	f000 f84b 	bl	8007324 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800728e:	f000 f930 	bl	80074f2 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8007292:	204c      	movs	r0, #76	; 0x4c
 8007294:	f000 f831 	bl	80072fa <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8007298:	f7ff ff24 	bl	80070e4 <NRF24_flush_tx>
	NRF24_flush_rx();
 800729c:	f7ff ff2a 	bl	80070f4 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80072a0:	f000 f918 	bl	80074d4 <NRF24_powerDown>
	
}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072ae:	b002      	add	sp, #8
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20000210 	.word	0x20000210
 80072b8:	20000208 	.word	0x20000208
 80072bc:	2000020c 	.word	0x2000020c
 80072c0:	2000020e 	.word	0x2000020e

080072c4 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	460a      	mov	r2, r1
 80072ce:	71fb      	strb	r3, [r7, #7]
 80072d0:	4613      	mov	r3, r2
 80072d2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80072d4:	79fb      	ldrb	r3, [r7, #7]
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	b25a      	sxtb	r2, r3
 80072da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	b25b      	sxtb	r3, r3
 80072e4:	4313      	orrs	r3, r2
 80072e6:	b25b      	sxtb	r3, r3
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	4619      	mov	r1, r3
 80072ec:	2004      	movs	r0, #4
 80072ee:	f7ff feaf 	bl	8007050 <NRF24_write_register>
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	4603      	mov	r3, r0
 8007302:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8007304:	237f      	movs	r3, #127	; 0x7f
 8007306:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8007308:	7bfa      	ldrb	r2, [r7, #15]
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	4293      	cmp	r3, r2
 800730e:	bf28      	it	cs
 8007310:	4613      	movcs	r3, r2
 8007312:	b2db      	uxtb	r3, r3
 8007314:	4619      	mov	r1, r3
 8007316:	2005      	movs	r0, #5
 8007318:	f7ff fe9a 	bl	8007050 <NRF24_write_register>
}
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800732e:	2320      	movs	r3, #32
 8007330:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8007332:	7bfa      	ldrb	r2, [r7, #15]
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	4293      	cmp	r3, r2
 8007338:	bf28      	it	cs
 800733a:	4613      	movcs	r3, r2
 800733c:	b2da      	uxtb	r2, r3
 800733e:	4b04      	ldr	r3, [pc, #16]	; (8007350 <NRF24_setPayloadSize+0x2c>)
 8007340:	701a      	strb	r2, [r3, #0]
}
 8007342:	bf00      	nop
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20000204 	.word	0x20000204

08007354 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8007358:	201d      	movs	r0, #29
 800735a:	f7ff fe29 	bl	8006fb0 <NRF24_read_register>
 800735e:	4603      	mov	r3, r0
 8007360:	f023 0304 	bic.w	r3, r3, #4
 8007364:	b2db      	uxtb	r3, r3
 8007366:	4619      	mov	r1, r3
 8007368:	201d      	movs	r0, #29
 800736a:	f7ff fe71 	bl	8007050 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800736e:	2100      	movs	r1, #0
 8007370:	201c      	movs	r0, #28
 8007372:	f7ff fe6d 	bl	8007050 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8007376:	4b02      	ldr	r3, [pc, #8]	; (8007380 <NRF24_disableDynamicPayloads+0x2c>)
 8007378:	2200      	movs	r2, #0
 800737a:	701a      	strb	r2, [r3, #0]
}
 800737c:	bf00      	nop
 800737e:	bd80      	pop	{r7, pc}
 8007380:	20000205 	.word	0x20000205

08007384 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800738e:	2006      	movs	r0, #6
 8007390:	f7ff fe0e 	bl	8006fb0 <NRF24_read_register>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	f023 0306 	bic.w	r3, r3, #6
 800739e:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d104      	bne.n	80073b0 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	f043 0306 	orr.w	r3, r3, #6
 80073ac:	73fb      	strb	r3, [r7, #15]
 80073ae:	e019      	b.n	80073e4 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d104      	bne.n	80073c0 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	f043 0304 	orr.w	r3, r3, #4
 80073bc:	73fb      	strb	r3, [r7, #15]
 80073be:	e011      	b.n	80073e4 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d104      	bne.n	80073d0 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	f043 0302 	orr.w	r3, r3, #2
 80073cc:	73fb      	strb	r3, [r7, #15]
 80073ce:	e009      	b.n	80073e4 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d006      	beq.n	80073e4 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d103      	bne.n	80073e4 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	f043 0306 	orr.w	r3, r3, #6
 80073e2:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4619      	mov	r1, r3
 80073e8:	2006      	movs	r0, #6
 80073ea:	f7ff fe31 	bl	8007050 <NRF24_write_register>
}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8007406:	2006      	movs	r0, #6
 8007408:	f7ff fdd2 	bl	8006fb0 <NRF24_read_register>
 800740c:	4603      	mov	r3, r0
 800740e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8007410:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <NRF24_setDataRate+0x88>)
 8007412:	2200      	movs	r2, #0
 8007414:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800741c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800741e:	79fb      	ldrb	r3, [r7, #7]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d107      	bne.n	8007434 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8007424:	4b16      	ldr	r3, [pc, #88]	; (8007480 <NRF24_setDataRate+0x88>)
 8007426:	2200      	movs	r2, #0
 8007428:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	f043 0320 	orr.w	r3, r3, #32
 8007430:	73bb      	strb	r3, [r7, #14]
 8007432:	e00d      	b.n	8007450 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8007434:	79fb      	ldrb	r3, [r7, #7]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d107      	bne.n	800744a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800743a:	4b11      	ldr	r3, [pc, #68]	; (8007480 <NRF24_setDataRate+0x88>)
 800743c:	2201      	movs	r2, #1
 800743e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8007440:	7bbb      	ldrb	r3, [r7, #14]
 8007442:	f043 0308 	orr.w	r3, r3, #8
 8007446:	73bb      	strb	r3, [r7, #14]
 8007448:	e002      	b.n	8007450 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800744a:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <NRF24_setDataRate+0x88>)
 800744c:	2200      	movs	r2, #0
 800744e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	4619      	mov	r1, r3
 8007454:	2006      	movs	r0, #6
 8007456:	f7ff fdfb 	bl	8007050 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800745a:	2006      	movs	r0, #6
 800745c:	f7ff fda8 	bl	8006fb0 <NRF24_read_register>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	4293      	cmp	r3, r2
 8007468:	d102      	bne.n	8007470 <NRF24_setDataRate+0x78>
  {
    result = true;
 800746a:	2301      	movs	r3, #1
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	e002      	b.n	8007476 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8007470:	4b03      	ldr	r3, [pc, #12]	; (8007480 <NRF24_setDataRate+0x88>)
 8007472:	2200      	movs	r2, #0
 8007474:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000206 	.word	0x20000206

08007484 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800748e:	2000      	movs	r0, #0
 8007490:	f7ff fd8e 	bl	8006fb0 <NRF24_read_register>
 8007494:	4603      	mov	r3, r0
 8007496:	f023 030c 	bic.w	r3, r3, #12
 800749a:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00f      	beq.n	80074c2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d104      	bne.n	80074b2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	f043 0308 	orr.w	r3, r3, #8
 80074ae:	73fb      	strb	r3, [r7, #15]
 80074b0:	e007      	b.n	80074c2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	f043 0308 	orr.w	r3, r3, #8
 80074b8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	f043 0304 	orr.w	r3, r3, #4
 80074c0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	4619      	mov	r1, r3
 80074c6:	2000      	movs	r0, #0
 80074c8:	f7ff fdc2 	bl	8007050 <NRF24_write_register>
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80074d8:	2000      	movs	r0, #0
 80074da:	f7ff fd69 	bl	8006fb0 <NRF24_read_register>
 80074de:	4603      	mov	r3, r0
 80074e0:	f023 0302 	bic.w	r3, r3, #2
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	4619      	mov	r1, r3
 80074e8:	2000      	movs	r0, #0
 80074ea:	f7ff fdb1 	bl	8007050 <NRF24_write_register>
}
 80074ee:	bf00      	nop
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80074f6:	2170      	movs	r1, #112	; 0x70
 80074f8:	2007      	movs	r0, #7
 80074fa:	f7ff fda9 	bl	8007050 <NRF24_write_register>
}
 80074fe:	bf00      	nop
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800750a:	2000      	movs	r0, #0
 800750c:	f7ff fd10 	bl	8006f30 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8007510:	2350      	movs	r3, #80	; 0x50
 8007512:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8007514:	2373      	movs	r3, #115	; 0x73
 8007516:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8007518:	1d39      	adds	r1, r7, #4
 800751a:	2364      	movs	r3, #100	; 0x64
 800751c:	2202      	movs	r2, #2
 800751e:	4805      	ldr	r0, [pc, #20]	; (8007534 <NRF24_ACTIVATE_cmd+0x30>)
 8007520:	f7fc fef2 	bl	8004308 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8007524:	2001      	movs	r0, #1
 8007526:	f7ff fd03 	bl	8006f30 <NRF24_csn>
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20000210 	.word	0x20000210

08007538 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8007538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800753a:	b0a1      	sub	sp, #132	; 0x84
 800753c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800753e:	f107 0308 	add.w	r3, r7, #8
 8007542:	4abf      	ldr	r2, [pc, #764]	; (8007840 <printRadioSettings+0x308>)
 8007544:	461c      	mov	r4, r3
 8007546:	4615      	mov	r5, r2
 8007548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800754a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800754c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800754e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	8022      	strh	r2, [r4, #0]
 800755a:	3402      	adds	r4, #2
 800755c:	0c1b      	lsrs	r3, r3, #16
 800755e:	7023      	strb	r3, [r4, #0]
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007560:	bf00      	nop
 8007562:	f107 0308 	add.w	r3, r7, #8
 8007566:	4618      	mov	r0, r3
 8007568:	f7f8 fe32 	bl	80001d0 <strlen>
 800756c:	4602      	mov	r2, r0
 800756e:	f107 0308 	add.w	r3, r7, #8
 8007572:	4611      	mov	r1, r2
 8007574:	4618      	mov	r0, r3
 8007576:	f002 f97b 	bl	8009870 <CDC_Transmit_FS>
 800757a:	4603      	mov	r3, r0
 800757c:	2b01      	cmp	r3, #1
 800757e:	d0f0      	beq.n	8007562 <printRadioSettings+0x2a>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8007580:	2000      	movs	r0, #0
 8007582:	f7ff fd15 	bl	8006fb0 <NRF24_read_register>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800758c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d020      	beq.n	80075da <printRadioSettings+0xa2>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8007598:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <printRadioSettings+0x84>
 80075a4:	f107 0308 	add.w	r3, r7, #8
 80075a8:	4aa6      	ldr	r2, [pc, #664]	; (8007844 <printRadioSettings+0x30c>)
 80075aa:	461c      	mov	r4, r3
 80075ac:	4615      	mov	r5, r2
 80075ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80075b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80075ba:	e017      	b.n	80075ec <printRadioSettings+0xb4>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80075bc:	f107 0308 	add.w	r3, r7, #8
 80075c0:	4aa1      	ldr	r2, [pc, #644]	; (8007848 <printRadioSettings+0x310>)
 80075c2:	461c      	mov	r4, r3
 80075c4:	4615      	mov	r5, r2
 80075c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80075ce:	c403      	stmia	r4!, {r0, r1}
 80075d0:	8022      	strh	r2, [r4, #0]
 80075d2:	3402      	adds	r4, #2
 80075d4:	0c13      	lsrs	r3, r2, #16
 80075d6:	7023      	strb	r3, [r4, #0]
 80075d8:	e008      	b.n	80075ec <printRadioSettings+0xb4>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80075da:	f107 0308 	add.w	r3, r7, #8
 80075de:	4a9b      	ldr	r2, [pc, #620]	; (800784c <printRadioSettings+0x314>)
 80075e0:	461c      	mov	r4, r3
 80075e2:	4615      	mov	r5, r2
 80075e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	6023      	str	r3, [r4, #0]
	}
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 80075ec:	bf00      	nop
 80075ee:	f107 0308 	add.w	r3, r7, #8
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7f8 fdec 	bl	80001d0 <strlen>
 80075f8:	4602      	mov	r2, r0
 80075fa:	f107 0308 	add.w	r3, r7, #8
 80075fe:	4611      	mov	r1, r2
 8007600:	4618      	mov	r0, r3
 8007602:	f002 f935 	bl	8009870 <CDC_Transmit_FS>
 8007606:	4603      	mov	r3, r0
 8007608:	2b01      	cmp	r3, #1
 800760a:	d0f0      	beq.n	80075ee <printRadioSettings+0xb6>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800760c:	2001      	movs	r0, #1
 800760e:	f7ff fccf 	bl	8006fb0 <NRF24_read_register>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007618:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800761c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007620:	2b00      	cmp	r3, #0
 8007622:	bfcc      	ite	gt
 8007624:	2301      	movgt	r3, #1
 8007626:	2300      	movle	r3, #0
 8007628:	b2db      	uxtb	r3, r3
 800762a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800762c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007630:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007634:	2b00      	cmp	r3, #0
 8007636:	bfcc      	ite	gt
 8007638:	2301      	movgt	r3, #1
 800763a:	2300      	movle	r3, #0
 800763c:	b2db      	uxtb	r3, r3
 800763e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007640:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007644:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007648:	2b00      	cmp	r3, #0
 800764a:	bfcc      	ite	gt
 800764c:	2301      	movgt	r3, #1
 800764e:	2300      	movle	r3, #0
 8007650:	b2db      	uxtb	r3, r3
 8007652:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007654:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007658:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800765c:	2b00      	cmp	r3, #0
 800765e:	bfcc      	ite	gt
 8007660:	2301      	movgt	r3, #1
 8007662:	2300      	movle	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007668:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800766c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007670:	2b00      	cmp	r3, #0
 8007672:	bfcc      	ite	gt
 8007674:	2301      	movgt	r3, #1
 8007676:	2300      	movle	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800767c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007680:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfcc      	ite	gt
 8007688:	2301      	movgt	r3, #1
 800768a:	2300      	movle	r3, #0
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f107 0008 	add.w	r0, r7, #8
 8007692:	9303      	str	r3, [sp, #12]
 8007694:	9402      	str	r4, [sp, #8]
 8007696:	9101      	str	r1, [sp, #4]
 8007698:	9200      	str	r2, [sp, #0]
 800769a:	4633      	mov	r3, r6
 800769c:	462a      	mov	r2, r5
 800769e:	496c      	ldr	r1, [pc, #432]	; (8007850 <printRadioSettings+0x318>)
 80076a0:	f002 fe3c 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 80076a4:	bf00      	nop
 80076a6:	f107 0308 	add.w	r3, r7, #8
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7f8 fd90 	bl	80001d0 <strlen>
 80076b0:	4602      	mov	r2, r0
 80076b2:	f107 0308 	add.w	r3, r7, #8
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f002 f8d9 	bl	8009870 <CDC_Transmit_FS>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d0f0      	beq.n	80076a6 <printRadioSettings+0x16e>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80076c4:	2002      	movs	r0, #2
 80076c6:	f7ff fc73 	bl	8006fb0 <NRF24_read_register>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80076d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076d4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bfcc      	ite	gt
 80076dc:	2301      	movgt	r3, #1
 80076de:	2300      	movle	r3, #0
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80076e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076e8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bfcc      	ite	gt
 80076f0:	2301      	movgt	r3, #1
 80076f2:	2300      	movle	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80076f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076fc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007700:	2b00      	cmp	r3, #0
 8007702:	bfcc      	ite	gt
 8007704:	2301      	movgt	r3, #1
 8007706:	2300      	movle	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800770c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007710:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007714:	2b00      	cmp	r3, #0
 8007716:	bfcc      	ite	gt
 8007718:	2301      	movgt	r3, #1
 800771a:	2300      	movle	r3, #0
 800771c:	b2db      	uxtb	r3, r3
 800771e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007720:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007724:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007728:	2b00      	cmp	r3, #0
 800772a:	bfcc      	ite	gt
 800772c:	2301      	movgt	r3, #1
 800772e:	2300      	movle	r3, #0
 8007730:	b2db      	uxtb	r3, r3
 8007732:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007734:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007738:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800773c:	2b00      	cmp	r3, #0
 800773e:	bfcc      	ite	gt
 8007740:	2301      	movgt	r3, #1
 8007742:	2300      	movle	r3, #0
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f107 0008 	add.w	r0, r7, #8
 800774a:	9303      	str	r3, [sp, #12]
 800774c:	9402      	str	r4, [sp, #8]
 800774e:	9101      	str	r1, [sp, #4]
 8007750:	9200      	str	r2, [sp, #0]
 8007752:	4633      	mov	r3, r6
 8007754:	462a      	mov	r2, r5
 8007756:	493f      	ldr	r1, [pc, #252]	; (8007854 <printRadioSettings+0x31c>)
 8007758:	f002 fde0 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 800775c:	bf00      	nop
 800775e:	f107 0308 	add.w	r3, r7, #8
 8007762:	4618      	mov	r0, r3
 8007764:	f7f8 fd34 	bl	80001d0 <strlen>
 8007768:	4602      	mov	r2, r0
 800776a:	f107 0308 	add.w	r3, r7, #8
 800776e:	4611      	mov	r1, r2
 8007770:	4618      	mov	r0, r3
 8007772:	f002 f87d 	bl	8009870 <CDC_Transmit_FS>
 8007776:	4603      	mov	r3, r0
 8007778:	2b01      	cmp	r3, #1
 800777a:	d0f0      	beq.n	800775e <printRadioSettings+0x226>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800777c:	2003      	movs	r0, #3
 800777e:	f7ff fc17 	bl	8006fb0 <NRF24_read_register>
 8007782:	4603      	mov	r3, r0
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800778c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007790:	3302      	adds	r3, #2
 8007792:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8007796:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800779a:	f107 0308 	add.w	r3, r7, #8
 800779e:	492e      	ldr	r1, [pc, #184]	; (8007858 <printRadioSettings+0x320>)
 80077a0:	4618      	mov	r0, r3
 80077a2:	f002 fdbb 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 80077a6:	bf00      	nop
 80077a8:	f107 0308 	add.w	r3, r7, #8
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7f8 fd0f 	bl	80001d0 <strlen>
 80077b2:	4602      	mov	r2, r0
 80077b4:	f107 0308 	add.w	r3, r7, #8
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f002 f858 	bl	8009870 <CDC_Transmit_FS>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d0f0      	beq.n	80077a8 <printRadioSettings+0x270>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80077c6:	2005      	movs	r0, #5
 80077c8:	f7ff fbf2 	bl	8006fb0 <NRF24_read_register>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80077d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80077d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077da:	f107 0308 	add.w	r3, r7, #8
 80077de:	491f      	ldr	r1, [pc, #124]	; (800785c <printRadioSettings+0x324>)
 80077e0:	4618      	mov	r0, r3
 80077e2:	f002 fd9b 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 80077e6:	bf00      	nop
 80077e8:	f107 0308 	add.w	r3, r7, #8
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7f8 fcef 	bl	80001d0 <strlen>
 80077f2:	4602      	mov	r2, r0
 80077f4:	f107 0308 	add.w	r3, r7, #8
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f002 f838 	bl	8009870 <CDC_Transmit_FS>
 8007800:	4603      	mov	r3, r0
 8007802:	2b01      	cmp	r3, #1
 8007804:	d0f0      	beq.n	80077e8 <printRadioSettings+0x2b0>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8007806:	2006      	movs	r0, #6
 8007808:	f7ff fbd2 	bl	8006fb0 <NRF24_read_register>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8007812:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d022      	beq.n	8007864 <printRadioSettings+0x32c>
 800781e:	f107 0308 	add.w	r3, r7, #8
 8007822:	4a0f      	ldr	r2, [pc, #60]	; (8007860 <printRadioSettings+0x328>)
 8007824:	461c      	mov	r4, r3
 8007826:	4615      	mov	r5, r2
 8007828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800782a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800782c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007830:	6020      	str	r0, [r4, #0]
 8007832:	3404      	adds	r4, #4
 8007834:	8021      	strh	r1, [r4, #0]
 8007836:	3402      	adds	r4, #2
 8007838:	0c0b      	lsrs	r3, r1, #16
 800783a:	7023      	strb	r3, [r4, #0]
 800783c:	e021      	b.n	8007882 <printRadioSettings+0x34a>
 800783e:	bf00      	nop
 8007840:	0800a9d0 	.word	0x0800a9d0
 8007844:	0800aa04 	.word	0x0800aa04
 8007848:	0800aa20 	.word	0x0800aa20
 800784c:	0800aa3c 	.word	0x0800aa3c
 8007850:	0800aa50 	.word	0x0800aa50
 8007854:	0800aa94 	.word	0x0800aa94
 8007858:	0800aae0 	.word	0x0800aae0
 800785c:	0800aafc 	.word	0x0800aafc
 8007860:	0800ab10 	.word	0x0800ab10
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8007864:	f107 0308 	add.w	r3, r7, #8
 8007868:	4a2a      	ldr	r2, [pc, #168]	; (8007914 <printRadioSettings+0x3dc>)
 800786a:	461c      	mov	r4, r3
 800786c:	4615      	mov	r5, r2
 800786e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007872:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007876:	6020      	str	r0, [r4, #0]
 8007878:	3404      	adds	r4, #4
 800787a:	8021      	strh	r1, [r4, #0]
 800787c:	3402      	adds	r4, #2
 800787e:	0c0b      	lsrs	r3, r1, #16
 8007880:	7023      	strb	r3, [r4, #0]
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007882:	bf00      	nop
 8007884:	f107 0308 	add.w	r3, r7, #8
 8007888:	4618      	mov	r0, r3
 800788a:	f7f8 fca1 	bl	80001d0 <strlen>
 800788e:	4602      	mov	r2, r0
 8007890:	f107 0308 	add.w	r3, r7, #8
 8007894:	4611      	mov	r1, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f001 ffea 	bl	8009870 <CDC_Transmit_FS>
 800789c:	4603      	mov	r3, r0
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d0f0      	beq.n	8007884 <printRadioSettings+0x34c>
	reg8Val &= (3 << 1);
 80078a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80078a6:	f003 0306 	and.w	r3, r3, #6
 80078aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80078ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80078b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d109      	bne.n	80078d4 <printRadioSettings+0x39c>
 80078c0:	f107 0308 	add.w	r3, r7, #8
 80078c4:	4a14      	ldr	r2, [pc, #80]	; (8007918 <printRadioSettings+0x3e0>)
 80078c6:	461c      	mov	r4, r3
 80078c8:	4615      	mov	r5, r2
 80078ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ce:	682b      	ldr	r3, [r5, #0]
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	e034      	b.n	800793e <printRadioSettings+0x406>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80078d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d109      	bne.n	80078f0 <printRadioSettings+0x3b8>
 80078dc:	f107 0308 	add.w	r3, r7, #8
 80078e0:	4a0e      	ldr	r2, [pc, #56]	; (800791c <printRadioSettings+0x3e4>)
 80078e2:	461c      	mov	r4, r3
 80078e4:	4615      	mov	r5, r2
 80078e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ea:	682b      	ldr	r3, [r5, #0]
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	e026      	b.n	800793e <printRadioSettings+0x406>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80078f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d115      	bne.n	8007924 <printRadioSettings+0x3ec>
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4a08      	ldr	r2, [pc, #32]	; (8007920 <printRadioSettings+0x3e8>)
 80078fe:	461c      	mov	r4, r3
 8007900:	4615      	mov	r5, r2
 8007902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007906:	682b      	ldr	r3, [r5, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	8022      	strh	r2, [r4, #0]
 800790c:	3402      	adds	r4, #2
 800790e:	0c1b      	lsrs	r3, r3, #16
 8007910:	7023      	strb	r3, [r4, #0]
 8007912:	e014      	b.n	800793e <printRadioSettings+0x406>
 8007914:	0800ab28 	.word	0x0800ab28
 8007918:	0800ab40 	.word	0x0800ab40
 800791c:	0800ab54 	.word	0x0800ab54
 8007920:	0800ab68 	.word	0x0800ab68
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8007924:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007928:	2b03      	cmp	r3, #3
 800792a:	d108      	bne.n	800793e <printRadioSettings+0x406>
 800792c:	f107 0308 	add.w	r3, r7, #8
 8007930:	4ada      	ldr	r2, [pc, #872]	; (8007c9c <printRadioSettings+0x764>)
 8007932:	461c      	mov	r4, r3
 8007934:	4615      	mov	r5, r2
 8007936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800793a:	682b      	ldr	r3, [r5, #0]
 800793c:	8023      	strh	r3, [r4, #0]
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 800793e:	bf00      	nop
 8007940:	f107 0308 	add.w	r3, r7, #8
 8007944:	4618      	mov	r0, r3
 8007946:	f7f8 fc43 	bl	80001d0 <strlen>
 800794a:	4602      	mov	r2, r0
 800794c:	f107 0308 	add.w	r3, r7, #8
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f001 ff8c 	bl	8009870 <CDC_Transmit_FS>
 8007958:	4603      	mov	r3, r0
 800795a:	2b01      	cmp	r3, #1
 800795c:	d0f0      	beq.n	8007940 <printRadioSettings+0x408>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800795e:	463b      	mov	r3, r7
 8007960:	2205      	movs	r2, #5
 8007962:	4619      	mov	r1, r3
 8007964:	200a      	movs	r0, #10
 8007966:	f7ff fb4b 	bl	8007000 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800796a:	793b      	ldrb	r3, [r7, #4]
 800796c:	461c      	mov	r4, r3
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	461d      	mov	r5, r3
 8007972:	78bb      	ldrb	r3, [r7, #2]
 8007974:	787a      	ldrb	r2, [r7, #1]
 8007976:	7839      	ldrb	r1, [r7, #0]
 8007978:	f107 0008 	add.w	r0, r7, #8
 800797c:	9102      	str	r1, [sp, #8]
 800797e:	9201      	str	r2, [sp, #4]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	462b      	mov	r3, r5
 8007984:	4622      	mov	r2, r4
 8007986:	49c6      	ldr	r1, [pc, #792]	; (8007ca0 <printRadioSettings+0x768>)
 8007988:	f002 fcc8 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 800798c:	bf00      	nop
 800798e:	f107 0308 	add.w	r3, r7, #8
 8007992:	4618      	mov	r0, r3
 8007994:	f7f8 fc1c 	bl	80001d0 <strlen>
 8007998:	4602      	mov	r2, r0
 800799a:	f107 0308 	add.w	r3, r7, #8
 800799e:	4611      	mov	r1, r2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f001 ff65 	bl	8009870 <CDC_Transmit_FS>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d0f0      	beq.n	800798e <printRadioSettings+0x456>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80079ac:	463b      	mov	r3, r7
 80079ae:	2205      	movs	r2, #5
 80079b0:	4619      	mov	r1, r3
 80079b2:	200b      	movs	r0, #11
 80079b4:	f7ff fb24 	bl	8007000 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80079b8:	793b      	ldrb	r3, [r7, #4]
 80079ba:	461c      	mov	r4, r3
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	461d      	mov	r5, r3
 80079c0:	78bb      	ldrb	r3, [r7, #2]
 80079c2:	787a      	ldrb	r2, [r7, #1]
 80079c4:	7839      	ldrb	r1, [r7, #0]
 80079c6:	f107 0008 	add.w	r0, r7, #8
 80079ca:	9102      	str	r1, [sp, #8]
 80079cc:	9201      	str	r2, [sp, #4]
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	462b      	mov	r3, r5
 80079d2:	4622      	mov	r2, r4
 80079d4:	49b3      	ldr	r1, [pc, #716]	; (8007ca4 <printRadioSettings+0x76c>)
 80079d6:	f002 fca1 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 80079da:	bf00      	nop
 80079dc:	f107 0308 	add.w	r3, r7, #8
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7f8 fbf5 	bl	80001d0 <strlen>
 80079e6:	4602      	mov	r2, r0
 80079e8:	f107 0308 	add.w	r3, r7, #8
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f001 ff3e 	bl	8009870 <CDC_Transmit_FS>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d0f0      	beq.n	80079dc <printRadioSettings+0x4a4>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80079fa:	463b      	mov	r3, r7
 80079fc:	2201      	movs	r2, #1
 80079fe:	4619      	mov	r1, r3
 8007a00:	200c      	movs	r0, #12
 8007a02:	f7ff fafd 	bl	8007000 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8007a06:	783b      	ldrb	r3, [r7, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f107 0308 	add.w	r3, r7, #8
 8007a0e:	49a6      	ldr	r1, [pc, #664]	; (8007ca8 <printRadioSettings+0x770>)
 8007a10:	4618      	mov	r0, r3
 8007a12:	f002 fc83 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007a16:	bf00      	nop
 8007a18:	f107 0308 	add.w	r3, r7, #8
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7f8 fbd7 	bl	80001d0 <strlen>
 8007a22:	4602      	mov	r2, r0
 8007a24:	f107 0308 	add.w	r3, r7, #8
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f001 ff20 	bl	8009870 <CDC_Transmit_FS>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d0f0      	beq.n	8007a18 <printRadioSettings+0x4e0>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8007a36:	463b      	mov	r3, r7
 8007a38:	2201      	movs	r2, #1
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	200d      	movs	r0, #13
 8007a3e:	f7ff fadf 	bl	8007000 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8007a42:	783b      	ldrb	r3, [r7, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	f107 0308 	add.w	r3, r7, #8
 8007a4a:	4998      	ldr	r1, [pc, #608]	; (8007cac <printRadioSettings+0x774>)
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f002 fc65 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007a52:	bf00      	nop
 8007a54:	f107 0308 	add.w	r3, r7, #8
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7f8 fbb9 	bl	80001d0 <strlen>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	f107 0308 	add.w	r3, r7, #8
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 ff02 	bl	8009870 <CDC_Transmit_FS>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d0f0      	beq.n	8007a54 <printRadioSettings+0x51c>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8007a72:	463b      	mov	r3, r7
 8007a74:	2201      	movs	r2, #1
 8007a76:	4619      	mov	r1, r3
 8007a78:	200e      	movs	r0, #14
 8007a7a:	f7ff fac1 	bl	8007000 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8007a7e:	783b      	ldrb	r3, [r7, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	498a      	ldr	r1, [pc, #552]	; (8007cb0 <printRadioSettings+0x778>)
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f002 fc47 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007a8e:	bf00      	nop
 8007a90:	f107 0308 	add.w	r3, r7, #8
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7f8 fb9b 	bl	80001d0 <strlen>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	f107 0308 	add.w	r3, r7, #8
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f001 fee4 	bl	8009870 <CDC_Transmit_FS>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d0f0      	beq.n	8007a90 <printRadioSettings+0x558>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8007aae:	463b      	mov	r3, r7
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	200f      	movs	r0, #15
 8007ab6:	f7ff faa3 	bl	8007000 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8007aba:	783b      	ldrb	r3, [r7, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	f107 0308 	add.w	r3, r7, #8
 8007ac2:	497c      	ldr	r1, [pc, #496]	; (8007cb4 <printRadioSettings+0x77c>)
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f002 fc29 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007aca:	bf00      	nop
 8007acc:	f107 0308 	add.w	r3, r7, #8
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7f8 fb7d 	bl	80001d0 <strlen>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	f107 0308 	add.w	r3, r7, #8
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 fec6 	bl	8009870 <CDC_Transmit_FS>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d0f0      	beq.n	8007acc <printRadioSettings+0x594>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8007aea:	463b      	mov	r3, r7
 8007aec:	2205      	movs	r2, #5
 8007aee:	4619      	mov	r1, r3
 8007af0:	2010      	movs	r0, #16
 8007af2:	f7ff fa85 	bl	8007000 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8007af6:	793b      	ldrb	r3, [r7, #4]
 8007af8:	461c      	mov	r4, r3
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	461d      	mov	r5, r3
 8007afe:	78bb      	ldrb	r3, [r7, #2]
 8007b00:	787a      	ldrb	r2, [r7, #1]
 8007b02:	7839      	ldrb	r1, [r7, #0]
 8007b04:	f107 0008 	add.w	r0, r7, #8
 8007b08:	9102      	str	r1, [sp, #8]
 8007b0a:	9201      	str	r2, [sp, #4]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	462b      	mov	r3, r5
 8007b10:	4622      	mov	r2, r4
 8007b12:	4969      	ldr	r1, [pc, #420]	; (8007cb8 <printRadioSettings+0x780>)
 8007b14:	f002 fc02 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007b18:	bf00      	nop
 8007b1a:	f107 0308 	add.w	r3, r7, #8
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7f8 fb56 	bl	80001d0 <strlen>
 8007b24:	4602      	mov	r2, r0
 8007b26:	f107 0308 	add.w	r3, r7, #8
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 fe9f 	bl	8009870 <CDC_Transmit_FS>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d0f0      	beq.n	8007b1a <printRadioSettings+0x5e2>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8007b38:	2011      	movs	r0, #17
 8007b3a:	f7ff fa39 	bl	8006fb0 <NRF24_read_register>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007b44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007b48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b4c:	f107 0308 	add.w	r3, r7, #8
 8007b50:	495a      	ldr	r1, [pc, #360]	; (8007cbc <printRadioSettings+0x784>)
 8007b52:	4618      	mov	r0, r3
 8007b54:	f002 fbe2 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007b58:	bf00      	nop
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7f8 fb36 	bl	80001d0 <strlen>
 8007b64:	4602      	mov	r2, r0
 8007b66:	f107 0308 	add.w	r3, r7, #8
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 fe7f 	bl	8009870 <CDC_Transmit_FS>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d0f0      	beq.n	8007b5a <printRadioSettings+0x622>
	
	reg8Val = NRF24_read_register(0x11+1);
 8007b78:	2012      	movs	r0, #18
 8007b7a:	f7ff fa19 	bl	8006fb0 <NRF24_read_register>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007b88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b8c:	f107 0308 	add.w	r3, r7, #8
 8007b90:	494b      	ldr	r1, [pc, #300]	; (8007cc0 <printRadioSettings+0x788>)
 8007b92:	4618      	mov	r0, r3
 8007b94:	f002 fbc2 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007b98:	bf00      	nop
 8007b9a:	f107 0308 	add.w	r3, r7, #8
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7f8 fb16 	bl	80001d0 <strlen>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	f107 0308 	add.w	r3, r7, #8
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 fe5f 	bl	8009870 <CDC_Transmit_FS>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d0f0      	beq.n	8007b9a <printRadioSettings+0x662>
	
	reg8Val = NRF24_read_register(0x11+2);
 8007bb8:	2013      	movs	r0, #19
 8007bba:	f7ff f9f9 	bl	8006fb0 <NRF24_read_register>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007bc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007bc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bcc:	f107 0308 	add.w	r3, r7, #8
 8007bd0:	493c      	ldr	r1, [pc, #240]	; (8007cc4 <printRadioSettings+0x78c>)
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f002 fba2 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007bd8:	bf00      	nop
 8007bda:	f107 0308 	add.w	r3, r7, #8
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7f8 faf6 	bl	80001d0 <strlen>
 8007be4:	4602      	mov	r2, r0
 8007be6:	f107 0308 	add.w	r3, r7, #8
 8007bea:	4611      	mov	r1, r2
 8007bec:	4618      	mov	r0, r3
 8007bee:	f001 fe3f 	bl	8009870 <CDC_Transmit_FS>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d0f0      	beq.n	8007bda <printRadioSettings+0x6a2>
	
	reg8Val = NRF24_read_register(0x11+3);
 8007bf8:	2014      	movs	r0, #20
 8007bfa:	f7ff f9d9 	bl	8006fb0 <NRF24_read_register>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007c04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c0c:	f107 0308 	add.w	r3, r7, #8
 8007c10:	492d      	ldr	r1, [pc, #180]	; (8007cc8 <printRadioSettings+0x790>)
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 fb82 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007c18:	bf00      	nop
 8007c1a:	f107 0308 	add.w	r3, r7, #8
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7f8 fad6 	bl	80001d0 <strlen>
 8007c24:	4602      	mov	r2, r0
 8007c26:	f107 0308 	add.w	r3, r7, #8
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f001 fe1f 	bl	8009870 <CDC_Transmit_FS>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d0f0      	beq.n	8007c1a <printRadioSettings+0x6e2>
	
	reg8Val = NRF24_read_register(0x11+4);
 8007c38:	2015      	movs	r0, #21
 8007c3a:	f7ff f9b9 	bl	8006fb0 <NRF24_read_register>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007c44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c4c:	f107 0308 	add.w	r3, r7, #8
 8007c50:	491e      	ldr	r1, [pc, #120]	; (8007ccc <printRadioSettings+0x794>)
 8007c52:	4618      	mov	r0, r3
 8007c54:	f002 fb62 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007c58:	bf00      	nop
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7f8 fab6 	bl	80001d0 <strlen>
 8007c64:	4602      	mov	r2, r0
 8007c66:	f107 0308 	add.w	r3, r7, #8
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 fdff 	bl	8009870 <CDC_Transmit_FS>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d0f0      	beq.n	8007c5a <printRadioSettings+0x722>
	
	reg8Val = NRF24_read_register(0x11+5);
 8007c78:	2016      	movs	r0, #22
 8007c7a:	f7ff f999 	bl	8006fb0 <NRF24_read_register>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007c84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c8c:	f107 0308 	add.w	r3, r7, #8
 8007c90:	490f      	ldr	r1, [pc, #60]	; (8007cd0 <printRadioSettings+0x798>)
 8007c92:	4618      	mov	r0, r3
 8007c94:	f002 fb42 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007c98:	bf00      	nop
 8007c9a:	e01b      	b.n	8007cd4 <printRadioSettings+0x79c>
 8007c9c:	0800ab7c 	.word	0x0800ab7c
 8007ca0:	0800ab90 	.word	0x0800ab90
 8007ca4:	0800abc0 	.word	0x0800abc0
 8007ca8:	0800abf0 	.word	0x0800abf0
 8007cac:	0800ac18 	.word	0x0800ac18
 8007cb0:	0800ac40 	.word	0x0800ac40
 8007cb4:	0800ac68 	.word	0x0800ac68
 8007cb8:	0800ac90 	.word	0x0800ac90
 8007cbc:	0800acbc 	.word	0x0800acbc
 8007cc0:	0800acd8 	.word	0x0800acd8
 8007cc4:	0800acf4 	.word	0x0800acf4
 8007cc8:	0800ad10 	.word	0x0800ad10
 8007ccc:	0800ad2c 	.word	0x0800ad2c
 8007cd0:	0800ad48 	.word	0x0800ad48
 8007cd4:	f107 0308 	add.w	r3, r7, #8
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7f8 fa79 	bl	80001d0 <strlen>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	f107 0308 	add.w	r3, r7, #8
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 fdc2 	bl	8009870 <CDC_Transmit_FS>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d0f0      	beq.n	8007cd4 <printRadioSettings+0x79c>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8007cf2:	201c      	movs	r0, #28
 8007cf4:	f7ff f95c 	bl	8006fb0 <NRF24_read_register>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007cfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007d02:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfcc      	ite	gt
 8007d0a:	2301      	movgt	r3, #1
 8007d0c:	2300      	movle	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007d12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007d16:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bfcc      	ite	gt
 8007d1e:	2301      	movgt	r3, #1
 8007d20:	2300      	movle	r3, #0
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007d26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007d2a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	bfcc      	ite	gt
 8007d32:	2301      	movgt	r3, #1
 8007d34:	2300      	movle	r3, #0
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007d3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007d3e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	bfcc      	ite	gt
 8007d46:	2301      	movgt	r3, #1
 8007d48:	2300      	movle	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007d4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007d52:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	bfcc      	ite	gt
 8007d5a:	2301      	movgt	r3, #1
 8007d5c:	2300      	movle	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007d62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007d66:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bfcc      	ite	gt
 8007d6e:	2301      	movgt	r3, #1
 8007d70:	2300      	movle	r3, #0
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	f107 0008 	add.w	r0, r7, #8
 8007d78:	9303      	str	r3, [sp, #12]
 8007d7a:	9402      	str	r4, [sp, #8]
 8007d7c:	9101      	str	r1, [sp, #4]
 8007d7e:	9200      	str	r2, [sp, #0]
 8007d80:	4633      	mov	r3, r6
 8007d82:	462a      	mov	r2, r5
 8007d84:	494f      	ldr	r1, [pc, #316]	; (8007ec4 <printRadioSettings+0x98c>)
 8007d86:	f002 fac9 	bl	800a31c <siprintf>
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007d8a:	bf00      	nop
 8007d8c:	f107 0308 	add.w	r3, r7, #8
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7f8 fa1d 	bl	80001d0 <strlen>
 8007d96:	4602      	mov	r2, r0
 8007d98:	f107 0308 	add.w	r3, r7, #8
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 fd66 	bl	8009870 <CDC_Transmit_FS>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d0f0      	beq.n	8007d8c <printRadioSettings+0x854>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8007daa:	201d      	movs	r0, #29
 8007dac:	f7ff f900 	bl	8006fb0 <NRF24_read_register>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8007db6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007dba:	f003 0304 	and.w	r3, r3, #4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00c      	beq.n	8007ddc <printRadioSettings+0x8a4>
 8007dc2:	f107 0308 	add.w	r3, r7, #8
 8007dc6:	4a40      	ldr	r2, [pc, #256]	; (8007ec8 <printRadioSettings+0x990>)
 8007dc8:	461c      	mov	r4, r3
 8007dca:	4615      	mov	r5, r2
 8007dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007dd4:	6020      	str	r0, [r4, #0]
 8007dd6:	3404      	adds	r4, #4
 8007dd8:	8021      	strh	r1, [r4, #0]
 8007dda:	e00e      	b.n	8007dfa <printRadioSettings+0x8c2>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8007ddc:	f107 0308 	add.w	r3, r7, #8
 8007de0:	4a3a      	ldr	r2, [pc, #232]	; (8007ecc <printRadioSettings+0x994>)
 8007de2:	461c      	mov	r4, r3
 8007de4:	4615      	mov	r5, r2
 8007de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007dee:	6020      	str	r0, [r4, #0]
 8007df0:	3404      	adds	r4, #4
 8007df2:	8021      	strh	r1, [r4, #0]
 8007df4:	3402      	adds	r4, #2
 8007df6:	0c0b      	lsrs	r3, r1, #16
 8007df8:	7023      	strb	r3, [r4, #0]
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007dfa:	bf00      	nop
 8007dfc:	f107 0308 	add.w	r3, r7, #8
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7f8 f9e5 	bl	80001d0 <strlen>
 8007e06:	4602      	mov	r2, r0
 8007e08:	f107 0308 	add.w	r3, r7, #8
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 fd2e 	bl	8009870 <CDC_Transmit_FS>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d0f0      	beq.n	8007dfc <printRadioSettings+0x8c4>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8007e1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <printRadioSettings+0x906>
 8007e26:	f107 0308 	add.w	r3, r7, #8
 8007e2a:	4a29      	ldr	r2, [pc, #164]	; (8007ed0 <printRadioSettings+0x998>)
 8007e2c:	461c      	mov	r4, r3
 8007e2e:	4615      	mov	r5, r2
 8007e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e38:	c403      	stmia	r4!, {r0, r1}
 8007e3a:	8022      	strh	r2, [r4, #0]
 8007e3c:	e00d      	b.n	8007e5a <printRadioSettings+0x922>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8007e3e:	f107 0308 	add.w	r3, r7, #8
 8007e42:	4a24      	ldr	r2, [pc, #144]	; (8007ed4 <printRadioSettings+0x99c>)
 8007e44:	461c      	mov	r4, r3
 8007e46:	4615      	mov	r5, r2
 8007e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e50:	c403      	stmia	r4!, {r0, r1}
 8007e52:	8022      	strh	r2, [r4, #0]
 8007e54:	3402      	adds	r4, #2
 8007e56:	0c13      	lsrs	r3, r2, #16
 8007e58:	7023      	strb	r3, [r4, #0]
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007e5a:	bf00      	nop
 8007e5c:	f107 0308 	add.w	r3, r7, #8
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7f8 f9b5 	bl	80001d0 <strlen>
 8007e66:	4602      	mov	r2, r0
 8007e68:	f107 0308 	add.w	r3, r7, #8
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f001 fcfe 	bl	8009870 <CDC_Transmit_FS>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d0f0      	beq.n	8007e5c <printRadioSettings+0x924>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8007e7a:	f107 0308 	add.w	r3, r7, #8
 8007e7e:	4a16      	ldr	r2, [pc, #88]	; (8007ed8 <printRadioSettings+0x9a0>)
 8007e80:	461c      	mov	r4, r3
 8007e82:	4615      	mov	r5, r2
 8007e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	8022      	strh	r2, [r4, #0]
 8007e96:	3402      	adds	r4, #2
 8007e98:	0c1b      	lsrs	r3, r3, #16
 8007e9a:	7023      	strb	r3, [r4, #0]
	while(CDC_Transmit_FS((uint8_t *)uartTxBuf, strlen(uartTxBuf)) == USBD_BUSY);
 8007e9c:	bf00      	nop
 8007e9e:	f107 0308 	add.w	r3, r7, #8
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7f8 f994 	bl	80001d0 <strlen>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	f107 0308 	add.w	r3, r7, #8
 8007eae:	4611      	mov	r1, r2
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f001 fcdd 	bl	8009870 <CDC_Transmit_FS>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d0f0      	beq.n	8007e9e <printRadioSettings+0x966>
}
 8007ebc:	bf00      	nop
 8007ebe:	3774      	adds	r7, #116	; 0x74
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ec4:	0800ad64 	.word	0x0800ad64
 8007ec8:	0800adb0 	.word	0x0800adb0
 8007ecc:	0800adc8 	.word	0x0800adc8
 8007ed0:	0800ade0 	.word	0x0800ade0
 8007ed4:	0800adfc 	.word	0x0800adfc
 8007ed8:	0800a9d0 	.word	0x0800a9d0

08007edc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ee8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007eec:	f002 f93a 	bl	800a164 <malloc>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d105      	bne.n	8007f06 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f02:	2302      	movs	r3, #2
 8007f04:	e066      	b.n	8007fd4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	7c1b      	ldrb	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d119      	bne.n	8007f4a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	2181      	movs	r1, #129	; 0x81
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 ffa7 	bl	8009e72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f2e:	2202      	movs	r2, #2
 8007f30:	2101      	movs	r1, #1
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 ff9d 	bl	8009e72 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2210      	movs	r2, #16
 8007f44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007f48:	e016      	b.n	8007f78 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f4a:	2340      	movs	r3, #64	; 0x40
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	2181      	movs	r1, #129	; 0x81
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 ff8e 	bl	8009e72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f5c:	2340      	movs	r3, #64	; 0x40
 8007f5e:	2202      	movs	r2, #2
 8007f60:	2101      	movs	r1, #1
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 ff85 	bl	8009e72 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2210      	movs	r2, #16
 8007f74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f78:	2308      	movs	r3, #8
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	2182      	movs	r1, #130	; 0x82
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 ff77 	bl	8009e72 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	7c1b      	ldrb	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d109      	bne.n	8007fc2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fb8:	2101      	movs	r1, #1
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f002 f848 	bl	800a050 <USBD_LL_PrepareReceive>
 8007fc0:	e007      	b.n	8007fd2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fc8:	2340      	movs	r3, #64	; 0x40
 8007fca:	2101      	movs	r1, #1
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 f83f 	bl	800a050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007fec:	2181      	movs	r1, #129	; 0x81
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 ff65 	bl	8009ebe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 ff5e 	bl	8009ebe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800800a:	2182      	movs	r1, #130	; 0x82
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 ff56 	bl	8009ebe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00e      	beq.n	800804a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800803c:	4618      	mov	r0, r3
 800803e:	f002 f899 	bl	800a174 <free>
    pdev->pClassData = NULL;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008064:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800807a:	2b00      	cmp	r3, #0
 800807c:	d03a      	beq.n	80080f4 <USBD_CDC_Setup+0xa0>
 800807e:	2b20      	cmp	r3, #32
 8008080:	f040 8097 	bne.w	80081b2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	88db      	ldrh	r3, [r3, #6]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d029      	beq.n	80080e0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	b25b      	sxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	da11      	bge.n	80080ba <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80080a2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	88d2      	ldrh	r2, [r2, #6]
 80080a8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80080aa:	6939      	ldr	r1, [r7, #16]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	88db      	ldrh	r3, [r3, #6]
 80080b0:	461a      	mov	r2, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 fa9d 	bl	80095f2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80080b8:	e082      	b.n	80081c0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	785a      	ldrb	r2, [r3, #1]
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	88db      	ldrh	r3, [r3, #6]
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80080d0:	6939      	ldr	r1, [r7, #16]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	88db      	ldrh	r3, [r3, #6]
 80080d6:	461a      	mov	r2, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 fab6 	bl	800964a <USBD_CtlPrepareRx>
    break;
 80080de:	e06f      	b.n	80081c0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	7850      	ldrb	r0, [r2, #1]
 80080ec:	2200      	movs	r2, #0
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	4798      	blx	r3
    break;
 80080f2:	e065      	b.n	80081c0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	785b      	ldrb	r3, [r3, #1]
 80080f8:	2b0b      	cmp	r3, #11
 80080fa:	d84f      	bhi.n	800819c <USBD_CDC_Setup+0x148>
 80080fc:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <USBD_CDC_Setup+0xb0>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	08008135 	.word	0x08008135
 8008108:	080081ab 	.word	0x080081ab
 800810c:	0800819d 	.word	0x0800819d
 8008110:	0800819d 	.word	0x0800819d
 8008114:	0800819d 	.word	0x0800819d
 8008118:	0800819d 	.word	0x0800819d
 800811c:	0800819d 	.word	0x0800819d
 8008120:	0800819d 	.word	0x0800819d
 8008124:	0800819d 	.word	0x0800819d
 8008128:	0800819d 	.word	0x0800819d
 800812c:	0800815d 	.word	0x0800815d
 8008130:	08008185 	.word	0x08008185
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813a:	2b03      	cmp	r3, #3
 800813c:	d107      	bne.n	800814e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800813e:	f107 030c 	add.w	r3, r7, #12
 8008142:	2202      	movs	r2, #2
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 fa53 	bl	80095f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800814c:	e030      	b.n	80081b0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 f9dd 	bl	8009510 <USBD_CtlError>
        ret = USBD_FAIL;
 8008156:	2303      	movs	r3, #3
 8008158:	75fb      	strb	r3, [r7, #23]
      break;
 800815a:	e029      	b.n	80081b0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008162:	2b03      	cmp	r3, #3
 8008164:	d107      	bne.n	8008176 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008166:	f107 030f 	add.w	r3, r7, #15
 800816a:	2201      	movs	r2, #1
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 fa3f 	bl	80095f2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008174:	e01c      	b.n	80081b0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 f9c9 	bl	8009510 <USBD_CtlError>
        ret = USBD_FAIL;
 800817e:	2303      	movs	r3, #3
 8008180:	75fb      	strb	r3, [r7, #23]
      break;
 8008182:	e015      	b.n	80081b0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818a:	2b03      	cmp	r3, #3
 800818c:	d00f      	beq.n	80081ae <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f9bd 	bl	8009510 <USBD_CtlError>
        ret = USBD_FAIL;
 8008196:	2303      	movs	r3, #3
 8008198:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800819a:	e008      	b.n	80081ae <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f001 f9b6 	bl	8009510 <USBD_CtlError>
      ret = USBD_FAIL;
 80081a4:	2303      	movs	r3, #3
 80081a6:	75fb      	strb	r3, [r7, #23]
      break;
 80081a8:	e002      	b.n	80081b0 <USBD_CDC_Setup+0x15c>
      break;
 80081aa:	bf00      	nop
 80081ac:	e008      	b.n	80081c0 <USBD_CDC_Setup+0x16c>
      break;
 80081ae:	bf00      	nop
    }
    break;
 80081b0:	e006      	b.n	80081c0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 f9ab 	bl	8009510 <USBD_CtlError>
    ret = USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	75fb      	strb	r3, [r7, #23]
    break;
 80081be:	bf00      	nop
  }

  return (uint8_t)ret;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop

080081cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e049      	b.n	8008282 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	3318      	adds	r3, #24
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d029      	beq.n	8008260 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800820c:	78fa      	ldrb	r2, [r7, #3]
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	3318      	adds	r3, #24
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	78f9      	ldrb	r1, [r7, #3]
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	460b      	mov	r3, r1
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	1a5b      	subs	r3, r3, r1
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4403      	add	r3, r0
 800822c:	3344      	adds	r3, #68	; 0x44
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	fbb2 f1f3 	udiv	r1, r2, r3
 8008234:	fb03 f301 	mul.w	r3, r3, r1
 8008238:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800823a:	2b00      	cmp	r3, #0
 800823c:	d110      	bne.n	8008260 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800823e:	78fa      	ldrb	r2, [r7, #3]
 8008240:	6879      	ldr	r1, [r7, #4]
 8008242:	4613      	mov	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	440b      	add	r3, r1
 800824c:	3318      	adds	r3, #24
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008252:	78f9      	ldrb	r1, [r7, #3]
 8008254:	2300      	movs	r3, #0
 8008256:	2200      	movs	r2, #0
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 fed8 	bl	800a00e <USBD_LL_Transmit>
 800825e:	e00f      	b.n	8008280 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2200      	movs	r2, #0
 8008264:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800827c:	78fa      	ldrb	r2, [r7, #3]
 800827e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e015      	b.n	80082d8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 feee 	bl	800a092 <USBD_LL_GetRxDataSize>
 80082b6:	4602      	mov	r2, r0
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082d2:	4611      	mov	r1, r2
 80082d4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d015      	beq.n	8008326 <USBD_CDC_EP0_RxReady+0x46>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008300:	2bff      	cmp	r3, #255	; 0xff
 8008302:	d010      	beq.n	8008326 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008312:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800831a:	b292      	uxth	r2, r2
 800831c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	22ff      	movs	r2, #255	; 0xff
 8008322:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2243      	movs	r2, #67	; 0x43
 800833c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800833e:	4b03      	ldr	r3, [pc, #12]	; (800834c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	20000094 	.word	0x20000094

08008350 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2243      	movs	r2, #67	; 0x43
 800835c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800835e:	4b03      	ldr	r3, [pc, #12]	; (800836c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	20000050 	.word	0x20000050

08008370 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2243      	movs	r2, #67	; 0x43
 800837c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800837e:	4b03      	ldr	r3, [pc, #12]	; (800838c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	200000d8 	.word	0x200000d8

08008390 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	220a      	movs	r2, #10
 800839c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800839e:	4b03      	ldr	r3, [pc, #12]	; (80083ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	2000000c 	.word	0x2000000c

080083b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e004      	b.n	80083ce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80083da:	b480      	push	{r7}
 80083dc:	b087      	sub	sp, #28
 80083de:	af00      	add	r7, sp, #0
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	60b9      	str	r1, [r7, #8]
 80083e4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	371c      	adds	r7, #28
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800841c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008442:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008444:	2301      	movs	r3, #1
 8008446:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008452:	2303      	movs	r3, #3
 8008454:	e01a      	b.n	800848c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800845c:	2b00      	cmp	r3, #0
 800845e:	d114      	bne.n	800848a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2201      	movs	r2, #1
 8008464:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800847e:	2181      	movs	r1, #129	; 0x81
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 fdc4 	bl	800a00e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e016      	b.n	80084e0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	7c1b      	ldrb	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084c4:	2101      	movs	r1, #1
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 fdc2 	bl	800a050 <USBD_LL_PrepareReceive>
 80084cc:	e007      	b.n	80084de <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084d4:	2340      	movs	r3, #64	; 0x40
 80084d6:	2101      	movs	r1, #1
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 fdb9 	bl	800a050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e025      	b.n	800854c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	79fa      	ldrb	r2, [r7, #7]
 800853e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f001 fc2f 	bl	8009da4 <USBD_LL_Init>
 8008546:	4603      	mov	r3, r0
 8008548:	75fb      	strb	r3, [r7, #23]

  return ret;
 800854a:	7dfb      	ldrb	r3, [r7, #23]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008568:	2303      	movs	r3, #3
 800856a:	e010      	b.n	800858e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	f107 020e 	add.w	r2, r7, #14
 8008580:	4610      	mov	r0, r2
 8008582:	4798      	blx	r3
 8008584:	4602      	mov	r2, r0
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f001 fc4c 	bl	8009e3c <USBD_LL_Start>
 80085a4:	4603      	mov	r3, r0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085d0:	2303      	movs	r3, #3
 80085d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d009      	beq.n	80085f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	78fa      	ldrb	r2, [r7, #3]
 80085e8:	4611      	mov	r1, r2
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	4798      	blx	r3
 80085ee:	4603      	mov	r3, r0
 80085f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	4611      	mov	r1, r2
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
  }

  return USBD_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f000 ff2c 	bl	800949c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008652:	461a      	mov	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	2b01      	cmp	r3, #1
 8008666:	d00e      	beq.n	8008686 <USBD_LL_SetupStage+0x5a>
 8008668:	2b01      	cmp	r3, #1
 800866a:	d302      	bcc.n	8008672 <USBD_LL_SetupStage+0x46>
 800866c:	2b02      	cmp	r3, #2
 800866e:	d014      	beq.n	800869a <USBD_LL_SetupStage+0x6e>
 8008670:	e01d      	b.n	80086ae <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa18 	bl	8008ab0 <USBD_StdDevReq>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
      break;
 8008684:	e020      	b.n	80086c8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa7c 	bl	8008b8c <USBD_StdItfReq>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]
      break;
 8008698:	e016      	b.n	80086c8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fab8 	bl	8008c18 <USBD_StdEPReq>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
      break;
 80086ac:	e00c      	b.n	80086c8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 fc1d 	bl	8009efc <USBD_LL_StallEP>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73fb      	strb	r3, [r7, #15]
      break;
 80086c6:	bf00      	nop
  }

  return ret;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b086      	sub	sp, #24
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	460b      	mov	r3, r1
 80086dc:	607a      	str	r2, [r7, #4]
 80086de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80086e0:	7afb      	ldrb	r3, [r7, #11]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d137      	bne.n	8008756 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d14a      	bne.n	800878e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	429a      	cmp	r2, r3
 8008702:	d913      	bls.n	800872c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	1ad2      	subs	r2, r2, r3
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	4293      	cmp	r3, r2
 800871c:	bf28      	it	cs
 800871e:	4613      	movcs	r3, r2
 8008720:	461a      	mov	r2, r3
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 ffad 	bl	8009684 <USBD_CtlContinueRx>
 800872a:	e030      	b.n	800878e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00a      	beq.n	800874e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800873e:	2b03      	cmp	r3, #3
 8008740:	d105      	bne.n	800874e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 ffa9 	bl	80096a6 <USBD_CtlSendStatus>
 8008754:	e01b      	b.n	800878e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d013      	beq.n	800878a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008768:	2b03      	cmp	r3, #3
 800876a:	d10e      	bne.n	800878a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	7afa      	ldrb	r2, [r7, #11]
 8008776:	4611      	mov	r1, r2
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	4798      	blx	r3
 800877c:	4603      	mov	r3, r0
 800877e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	e002      	b.n	8008790 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800878a:	2303      	movs	r3, #3
 800878c:	e000      	b.n	8008790 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	460b      	mov	r3, r1
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d16a      	bne.n	8008882 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3314      	adds	r3, #20
 80087b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d155      	bne.n	8008868 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d914      	bls.n	80087f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	1ad2      	subs	r2, r2, r3
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	461a      	mov	r2, r3
 80087dc:	6879      	ldr	r1, [r7, #4]
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 ff22 	bl	8009628 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087e4:	2300      	movs	r3, #0
 80087e6:	2200      	movs	r2, #0
 80087e8:	2100      	movs	r1, #0
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f001 fc30 	bl	800a050 <USBD_LL_PrepareReceive>
 80087f0:	e03a      	b.n	8008868 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d11c      	bne.n	8008838 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008806:	429a      	cmp	r2, r3
 8008808:	d316      	bcc.n	8008838 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008814:	429a      	cmp	r2, r3
 8008816:	d20f      	bcs.n	8008838 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008818:	2200      	movs	r2, #0
 800881a:	2100      	movs	r1, #0
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 ff03 	bl	8009628 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800882a:	2300      	movs	r3, #0
 800882c:	2200      	movs	r2, #0
 800882e:	2100      	movs	r1, #0
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f001 fc0d 	bl	800a050 <USBD_LL_PrepareReceive>
 8008836:	e017      	b.n	8008868 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00a      	beq.n	800885a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800884a:	2b03      	cmp	r3, #3
 800884c:	d105      	bne.n	800885a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800885a:	2180      	movs	r1, #128	; 0x80
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f001 fb4d 	bl	8009efc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 ff32 	bl	80096cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800886e:	2b01      	cmp	r3, #1
 8008870:	d123      	bne.n	80088ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f7ff fe9b 	bl	80085ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008880:	e01b      	b.n	80088ba <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d013      	beq.n	80088b6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008894:	2b03      	cmp	r3, #3
 8008896:	d10e      	bne.n	80088b6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	7afa      	ldrb	r2, [r7, #11]
 80088a2:	4611      	mov	r1, r2
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	4798      	blx	r3
 80088a8:	4603      	mov	r3, r0
 80088aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	e002      	b.n	80088bc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e000      	b.n	80088bc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d009      	beq.n	8008908 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6852      	ldr	r2, [r2, #4]
 8008900:	b2d2      	uxtb	r2, r2
 8008902:	4611      	mov	r1, r2
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008908:	2340      	movs	r3, #64	; 0x40
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 faaf 	bl	8009e72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2240      	movs	r2, #64	; 0x40
 8008920:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008924:	2340      	movs	r3, #64	; 0x40
 8008926:	2200      	movs	r2, #0
 8008928:	2180      	movs	r1, #128	; 0x80
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 faa1 	bl	8009e72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2240      	movs	r2, #64	; 0x40
 800893a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	78fa      	ldrb	r2, [r7, #3]
 8008956:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008966:	b480      	push	{r7}
 8008968:	b083      	sub	sp, #12
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2204      	movs	r2, #4
 800897e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899e:	2b04      	cmp	r3, #4
 80089a0:	d105      	bne.n	80089ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d10b      	bne.n	80089e6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d005      	beq.n	80089e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	460b      	mov	r3, r1
 8008a14:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	6852      	ldr	r2, [r2, #4]
 8008a60:	b2d2      	uxtb	r2, r2
 8008a62:	4611      	mov	r1, r2
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	4798      	blx	r3
  }

  return USBD_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b087      	sub	sp, #28
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	3301      	adds	r3, #1
 8008a88:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a90:	8a3b      	ldrh	r3, [r7, #16]
 8008a92:	021b      	lsls	r3, r3, #8
 8008a94:	b21a      	sxth	r2, r3
 8008a96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	b21b      	sxth	r3, r3
 8008a9e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008aa0:	89fb      	ldrh	r3, [r7, #14]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
	...

08008ab0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d004      	beq.n	8008ad4 <USBD_StdDevReq+0x24>
 8008aca:	2b40      	cmp	r3, #64	; 0x40
 8008acc:	d002      	beq.n	8008ad4 <USBD_StdDevReq+0x24>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <USBD_StdDevReq+0x38>
 8008ad2:	e050      	b.n	8008b76 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae6:	e04b      	b.n	8008b80 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	785b      	ldrb	r3, [r3, #1]
 8008aec:	2b09      	cmp	r3, #9
 8008aee:	d83c      	bhi.n	8008b6a <USBD_StdDevReq+0xba>
 8008af0:	a201      	add	r2, pc, #4	; (adr r2, 8008af8 <USBD_StdDevReq+0x48>)
 8008af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af6:	bf00      	nop
 8008af8:	08008b4d 	.word	0x08008b4d
 8008afc:	08008b61 	.word	0x08008b61
 8008b00:	08008b6b 	.word	0x08008b6b
 8008b04:	08008b57 	.word	0x08008b57
 8008b08:	08008b6b 	.word	0x08008b6b
 8008b0c:	08008b2b 	.word	0x08008b2b
 8008b10:	08008b21 	.word	0x08008b21
 8008b14:	08008b6b 	.word	0x08008b6b
 8008b18:	08008b43 	.word	0x08008b43
 8008b1c:	08008b35 	.word	0x08008b35
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f9ce 	bl	8008ec4 <USBD_GetDescriptor>
      break;
 8008b28:	e024      	b.n	8008b74 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fb33 	bl	8009198 <USBD_SetAddress>
      break;
 8008b32:	e01f      	b.n	8008b74 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fb70 	bl	800921c <USBD_SetConfig>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b40:	e018      	b.n	8008b74 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fc0d 	bl	8009364 <USBD_GetConfig>
      break;
 8008b4a:	e013      	b.n	8008b74 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fc3c 	bl	80093cc <USBD_GetStatus>
      break;
 8008b54:	e00e      	b.n	8008b74 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fc6a 	bl	8009432 <USBD_SetFeature>
      break;
 8008b5e:	e009      	b.n	8008b74 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fc79 	bl	800945a <USBD_ClrFeature>
      break;
 8008b68:	e004      	b.n	8008b74 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fccf 	bl	8009510 <USBD_CtlError>
      break;
 8008b72:	bf00      	nop
    }
    break;
 8008b74:	e004      	b.n	8008b80 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fcc9 	bl	8009510 <USBD_CtlError>
    break;
 8008b7e:	bf00      	nop
  }

  return ret;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop

08008b8c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	d003      	beq.n	8008bae <USBD_StdItfReq+0x22>
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d001      	beq.n	8008bae <USBD_StdItfReq+0x22>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d12a      	bne.n	8008c04 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d81d      	bhi.n	8008bf6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	889b      	ldrh	r3, [r3, #4]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d813      	bhi.n	8008bec <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	4798      	blx	r3
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	88db      	ldrh	r3, [r3, #6]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d110      	bne.n	8008c00 <USBD_StdItfReq+0x74>
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10d      	bne.n	8008c00 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fd5e 	bl	80096a6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008bea:	e009      	b.n	8008c00 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fc8e 	bl	8009510 <USBD_CtlError>
      break;
 8008bf4:	e004      	b.n	8008c00 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fc89 	bl	8009510 <USBD_CtlError>
      break;
 8008bfe:	e000      	b.n	8008c02 <USBD_StdItfReq+0x76>
      break;
 8008c00:	bf00      	nop
    }
    break;
 8008c02:	e004      	b.n	8008c0e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fc82 	bl	8009510 <USBD_CtlError>
    break;
 8008c0c:	bf00      	nop
  }

  return ret;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	889b      	ldrh	r3, [r3, #4]
 8008c2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c34:	2b20      	cmp	r3, #32
 8008c36:	d004      	beq.n	8008c42 <USBD_StdEPReq+0x2a>
 8008c38:	2b40      	cmp	r3, #64	; 0x40
 8008c3a:	d002      	beq.n	8008c42 <USBD_StdEPReq+0x2a>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00a      	beq.n	8008c56 <USBD_StdEPReq+0x3e>
 8008c40:	e135      	b.n	8008eae <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	4798      	blx	r3
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]
    break;
 8008c54:	e130      	b.n	8008eb8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d03e      	beq.n	8008cdc <USBD_StdEPReq+0xc4>
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d002      	beq.n	8008c68 <USBD_StdEPReq+0x50>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d077      	beq.n	8008d56 <USBD_StdEPReq+0x13e>
 8008c66:	e11c      	b.n	8008ea2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d002      	beq.n	8008c78 <USBD_StdEPReq+0x60>
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d015      	beq.n	8008ca2 <USBD_StdEPReq+0x8a>
 8008c76:	e02b      	b.n	8008cd0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00c      	beq.n	8008c98 <USBD_StdEPReq+0x80>
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	2b80      	cmp	r3, #128	; 0x80
 8008c82:	d009      	beq.n	8008c98 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 f937 	bl	8009efc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c8e:	2180      	movs	r1, #128	; 0x80
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 f933 	bl	8009efc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008c96:	e020      	b.n	8008cda <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fc38 	bl	8009510 <USBD_CtlError>
        break;
 8008ca0:	e01b      	b.n	8008cda <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	885b      	ldrh	r3, [r3, #2]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10e      	bne.n	8008cc8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <USBD_StdEPReq+0xb0>
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	2b80      	cmp	r3, #128	; 0x80
 8008cb4:	d008      	beq.n	8008cc8 <USBD_StdEPReq+0xb0>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	88db      	ldrh	r3, [r3, #6]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d104      	bne.n	8008cc8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 f91a 	bl	8009efc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fcec 	bl	80096a6 <USBD_CtlSendStatus>

        break;
 8008cce:	e004      	b.n	8008cda <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fc1c 	bl	8009510 <USBD_CtlError>
        break;
 8008cd8:	bf00      	nop
      }
      break;
 8008cda:	e0e7      	b.n	8008eac <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d002      	beq.n	8008cec <USBD_StdEPReq+0xd4>
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d015      	beq.n	8008d16 <USBD_StdEPReq+0xfe>
 8008cea:	e02d      	b.n	8008d48 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00c      	beq.n	8008d0c <USBD_StdEPReq+0xf4>
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	2b80      	cmp	r3, #128	; 0x80
 8008cf6:	d009      	beq.n	8008d0c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 f8fd 	bl	8009efc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d02:	2180      	movs	r1, #128	; 0x80
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 f8f9 	bl	8009efc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008d0a:	e023      	b.n	8008d54 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fbfe 	bl	8009510 <USBD_CtlError>
        break;
 8008d14:	e01e      	b.n	8008d54 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	885b      	ldrh	r3, [r3, #2]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d119      	bne.n	8008d52 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 f904 	bl	8009f3a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fcb7 	bl	80096a6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	4798      	blx	r3
        }
        break;
 8008d46:	e004      	b.n	8008d52 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fbe0 	bl	8009510 <USBD_CtlError>
        break;
 8008d50:	e000      	b.n	8008d54 <USBD_StdEPReq+0x13c>
        break;
 8008d52:	bf00      	nop
      }
      break;
 8008d54:	e0aa      	b.n	8008eac <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d002      	beq.n	8008d66 <USBD_StdEPReq+0x14e>
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d032      	beq.n	8008dca <USBD_StdEPReq+0x1b2>
 8008d64:	e097      	b.n	8008e96 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d007      	beq.n	8008d7c <USBD_StdEPReq+0x164>
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	2b80      	cmp	r3, #128	; 0x80
 8008d70:	d004      	beq.n	8008d7c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fbcb 	bl	8009510 <USBD_CtlError>
          break;
 8008d7a:	e091      	b.n	8008ea0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	da0b      	bge.n	8008d9c <USBD_StdEPReq+0x184>
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	3310      	adds	r3, #16
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	4413      	add	r3, r2
 8008d98:	3304      	adds	r3, #4
 8008d9a:	e00b      	b.n	8008db4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008da2:	4613      	mov	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	4413      	add	r3, r2
 8008db2:	3304      	adds	r3, #4
 8008db4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fc15 	bl	80095f2 <USBD_CtlSendData>
        break;
 8008dc8:	e06a      	b.n	8008ea0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008dca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	da11      	bge.n	8008df6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	f003 020f 	and.w	r2, r3, #15
 8008dd8:	6879      	ldr	r1, [r7, #4]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	3324      	adds	r3, #36	; 0x24
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d117      	bne.n	8008e1c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fb8e 	bl	8009510 <USBD_CtlError>
            break;
 8008df4:	e054      	b.n	8008ea0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	f003 020f 	and.w	r2, r3, #15
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	440b      	add	r3, r1
 8008e08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d104      	bne.n	8008e1c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fb7b 	bl	8009510 <USBD_CtlError>
            break;
 8008e1a:	e041      	b.n	8008ea0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	da0b      	bge.n	8008e3c <USBD_StdEPReq+0x224>
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	3310      	adds	r3, #16
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4413      	add	r3, r2
 8008e38:	3304      	adds	r3, #4
 8008e3a:	e00b      	b.n	8008e54 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	4413      	add	r3, r2
 8008e52:	3304      	adds	r3, #4
 8008e54:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <USBD_StdEPReq+0x24a>
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	2b80      	cmp	r3, #128	; 0x80
 8008e60:	d103      	bne.n	8008e6a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2200      	movs	r2, #0
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	e00e      	b.n	8008e88 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f001 f882 	bl	8009f78 <USBD_LL_IsStallEP>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	e002      	b.n	8008e88 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fbaf 	bl	80095f2 <USBD_CtlSendData>
          break;
 8008e94:	e004      	b.n	8008ea0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fb39 	bl	8009510 <USBD_CtlError>
        break;
 8008e9e:	bf00      	nop
      }
      break;
 8008ea0:	e004      	b.n	8008eac <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fb33 	bl	8009510 <USBD_CtlError>
      break;
 8008eaa:	bf00      	nop
    }
    break;
 8008eac:	e004      	b.n	8008eb8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fb2d 	bl	8009510 <USBD_CtlError>
    break;
 8008eb6:	bf00      	nop
  }

  return ret;
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	885b      	ldrh	r3, [r3, #2]
 8008ede:	0a1b      	lsrs	r3, r3, #8
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	2b06      	cmp	r3, #6
 8008ee6:	f200 8128 	bhi.w	800913a <USBD_GetDescriptor+0x276>
 8008eea:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <USBD_GetDescriptor+0x2c>)
 8008eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef0:	08008f0d 	.word	0x08008f0d
 8008ef4:	08008f25 	.word	0x08008f25
 8008ef8:	08008f65 	.word	0x08008f65
 8008efc:	0800913b 	.word	0x0800913b
 8008f00:	0800913b 	.word	0x0800913b
 8008f04:	080090db 	.word	0x080090db
 8008f08:	08009107 	.word	0x08009107
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	7c12      	ldrb	r2, [r2, #16]
 8008f18:	f107 0108 	add.w	r1, r7, #8
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4798      	blx	r3
 8008f20:	60f8      	str	r0, [r7, #12]
    break;
 8008f22:	e112      	b.n	800914a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7c1b      	ldrb	r3, [r3, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10d      	bne.n	8008f48 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	f107 0208 	add.w	r2, r7, #8
 8008f38:	4610      	mov	r0, r2
 8008f3a:	4798      	blx	r3
 8008f3c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3301      	adds	r3, #1
 8008f42:	2202      	movs	r2, #2
 8008f44:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008f46:	e100      	b.n	800914a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	f107 0208 	add.w	r2, r7, #8
 8008f54:	4610      	mov	r0, r2
 8008f56:	4798      	blx	r3
 8008f58:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	2202      	movs	r2, #2
 8008f60:	701a      	strb	r2, [r3, #0]
    break;
 8008f62:	e0f2      	b.n	800914a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	885b      	ldrh	r3, [r3, #2]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	f200 80ac 	bhi.w	80090c8 <USBD_GetDescriptor+0x204>
 8008f70:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <USBD_GetDescriptor+0xb4>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008f91 	.word	0x08008f91
 8008f7c:	08008fc5 	.word	0x08008fc5
 8008f80:	08008ff9 	.word	0x08008ff9
 8008f84:	0800902d 	.word	0x0800902d
 8008f88:	08009061 	.word	0x08009061
 8008f8c:	08009095 	.word	0x08009095
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00b      	beq.n	8008fb4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	7c12      	ldrb	r2, [r2, #16]
 8008fa8:	f107 0108 	add.w	r1, r7, #8
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
 8008fb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fb2:	e091      	b.n	80090d8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 faaa 	bl	8009510 <USBD_CtlError>
        err++;
 8008fbc:	7afb      	ldrb	r3, [r7, #11]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc2:	e089      	b.n	80090d8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	7c12      	ldrb	r2, [r2, #16]
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fe6:	e077      	b.n	80090d8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fa90 	bl	8009510 <USBD_CtlError>
        err++;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff6:	e06f      	b.n	80090d8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800901a:	e05d      	b.n	80090d8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa76 	bl	8009510 <USBD_CtlError>
        err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
      break;
 800902a:	e055      	b.n	80090d8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800904e:	e043      	b.n	80090d8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa5c 	bl	8009510 <USBD_CtlError>
        err++;
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	3301      	adds	r3, #1
 800905c:	72fb      	strb	r3, [r7, #11]
      break;
 800905e:	e03b      	b.n	80090d8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	7c12      	ldrb	r2, [r2, #16]
 8009078:	f107 0108 	add.w	r1, r7, #8
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
 8009080:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009082:	e029      	b.n	80090d8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa42 	bl	8009510 <USBD_CtlError>
        err++;
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	3301      	adds	r3, #1
 8009090:	72fb      	strb	r3, [r7, #11]
      break;
 8009092:	e021      	b.n	80090d8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	7c12      	ldrb	r2, [r2, #16]
 80090ac:	f107 0108 	add.w	r1, r7, #8
 80090b0:	4610      	mov	r0, r2
 80090b2:	4798      	blx	r3
 80090b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090b6:	e00f      	b.n	80090d8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa28 	bl	8009510 <USBD_CtlError>
        err++;
 80090c0:	7afb      	ldrb	r3, [r7, #11]
 80090c2:	3301      	adds	r3, #1
 80090c4:	72fb      	strb	r3, [r7, #11]
      break;
 80090c6:	e007      	b.n	80090d8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa20 	bl	8009510 <USBD_CtlError>
      err++;
 80090d0:	7afb      	ldrb	r3, [r7, #11]
 80090d2:	3301      	adds	r3, #1
 80090d4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80090d6:	bf00      	nop
    }
    break;
 80090d8:	e037      	b.n	800914a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	7c1b      	ldrb	r3, [r3, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ea:	f107 0208 	add.w	r2, r7, #8
 80090ee:	4610      	mov	r0, r2
 80090f0:	4798      	blx	r3
 80090f2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80090f4:	e029      	b.n	800914a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fa09 	bl	8009510 <USBD_CtlError>
      err++;
 80090fe:	7afb      	ldrb	r3, [r7, #11]
 8009100:	3301      	adds	r3, #1
 8009102:	72fb      	strb	r3, [r7, #11]
    break;
 8009104:	e021      	b.n	800914a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	7c1b      	ldrb	r3, [r3, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10d      	bne.n	800912a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009116:	f107 0208 	add.w	r2, r7, #8
 800911a:	4610      	mov	r0, r2
 800911c:	4798      	blx	r3
 800911e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	3301      	adds	r3, #1
 8009124:	2207      	movs	r2, #7
 8009126:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009128:	e00f      	b.n	800914a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f9ef 	bl	8009510 <USBD_CtlError>
      err++;
 8009132:	7afb      	ldrb	r3, [r7, #11]
 8009134:	3301      	adds	r3, #1
 8009136:	72fb      	strb	r3, [r7, #11]
    break;
 8009138:	e007      	b.n	800914a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f9e7 	bl	8009510 <USBD_CtlError>
    err++;
 8009142:	7afb      	ldrb	r3, [r7, #11]
 8009144:	3301      	adds	r3, #1
 8009146:	72fb      	strb	r3, [r7, #11]
    break;
 8009148:	bf00      	nop
  }

  if (err != 0U)
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d11e      	bne.n	800918e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	88db      	ldrh	r3, [r3, #6]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d016      	beq.n	8009186 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009158:	893b      	ldrh	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00e      	beq.n	800917c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	88da      	ldrh	r2, [r3, #6]
 8009162:	893b      	ldrh	r3, [r7, #8]
 8009164:	4293      	cmp	r3, r2
 8009166:	bf28      	it	cs
 8009168:	4613      	movcs	r3, r2
 800916a:	b29b      	uxth	r3, r3
 800916c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800916e:	893b      	ldrh	r3, [r7, #8]
 8009170:	461a      	mov	r2, r3
 8009172:	68f9      	ldr	r1, [r7, #12]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fa3c 	bl	80095f2 <USBD_CtlSendData>
 800917a:	e009      	b.n	8009190 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9c6 	bl	8009510 <USBD_CtlError>
 8009184:	e004      	b.n	8009190 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa8d 	bl	80096a6 <USBD_CtlSendStatus>
 800918c:	e000      	b.n	8009190 <USBD_GetDescriptor+0x2cc>
    return;
 800918e:	bf00      	nop
    }
  }
}
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop

08009198 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	889b      	ldrh	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d130      	bne.n	800920c <USBD_SetAddress+0x74>
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	88db      	ldrh	r3, [r3, #6]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d12c      	bne.n	800920c <USBD_SetAddress+0x74>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	885b      	ldrh	r3, [r3, #2]
 80091b6:	2b7f      	cmp	r3, #127	; 0x7f
 80091b8:	d828      	bhi.n	800920c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	885b      	ldrh	r3, [r3, #2]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d104      	bne.n	80091da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f99c 	bl	8009510 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d8:	e01c      	b.n	8009214 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	7bfa      	ldrb	r2, [r7, #15]
 80091de:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fef2 	bl	8009fd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fa5a 	bl	80096a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d004      	beq.n	8009202 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009200:	e008      	b.n	8009214 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920a:	e003      	b.n	8009214 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f97e 	bl	8009510 <USBD_CtlError>
  }
}
 8009214:	bf00      	nop
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	885b      	ldrh	r3, [r3, #2]
 800922e:	b2da      	uxtb	r2, r3
 8009230:	4b4b      	ldr	r3, [pc, #300]	; (8009360 <USBD_SetConfig+0x144>)
 8009232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009234:	4b4a      	ldr	r3, [pc, #296]	; (8009360 <USBD_SetConfig+0x144>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d905      	bls.n	8009248 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f966 	bl	8009510 <USBD_CtlError>
    return USBD_FAIL;
 8009244:	2303      	movs	r3, #3
 8009246:	e087      	b.n	8009358 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924e:	2b02      	cmp	r3, #2
 8009250:	d002      	beq.n	8009258 <USBD_SetConfig+0x3c>
 8009252:	2b03      	cmp	r3, #3
 8009254:	d025      	beq.n	80092a2 <USBD_SetConfig+0x86>
 8009256:	e071      	b.n	800933c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009258:	4b41      	ldr	r3, [pc, #260]	; (8009360 <USBD_SetConfig+0x144>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d01c      	beq.n	800929a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009260:	4b3f      	ldr	r3, [pc, #252]	; (8009360 <USBD_SetConfig+0x144>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	461a      	mov	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800926a:	4b3d      	ldr	r3, [pc, #244]	; (8009360 <USBD_SetConfig+0x144>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff f9a7 	bl	80085c4 <USBD_SetClassConfig>
 8009276:	4603      	mov	r3, r0
 8009278:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d004      	beq.n	800928a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f944 	bl	8009510 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009288:	e065      	b.n	8009356 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fa0b 	bl	80096a6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2203      	movs	r2, #3
 8009294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009298:	e05d      	b.n	8009356 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa03 	bl	80096a6 <USBD_CtlSendStatus>
    break;
 80092a0:	e059      	b.n	8009356 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80092a2:	4b2f      	ldr	r3, [pc, #188]	; (8009360 <USBD_SetConfig+0x144>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d112      	bne.n	80092d0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2202      	movs	r2, #2
 80092ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80092b2:	4b2b      	ldr	r3, [pc, #172]	; (8009360 <USBD_SetConfig+0x144>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092bc:	4b28      	ldr	r3, [pc, #160]	; (8009360 <USBD_SetConfig+0x144>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff f99a 	bl	80085fc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f9ec 	bl	80096a6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80092ce:	e042      	b.n	8009356 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80092d0:	4b23      	ldr	r3, [pc, #140]	; (8009360 <USBD_SetConfig+0x144>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	461a      	mov	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d02a      	beq.n	8009334 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff f988 	bl	80085fc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80092ec:	4b1c      	ldr	r3, [pc, #112]	; (8009360 <USBD_SetConfig+0x144>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	461a      	mov	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80092f6:	4b1a      	ldr	r3, [pc, #104]	; (8009360 <USBD_SetConfig+0x144>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff f961 	bl	80085c4 <USBD_SetClassConfig>
 8009302:	4603      	mov	r3, r0
 8009304:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00f      	beq.n	800932c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f8fe 	bl	8009510 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7ff f96d 	bl	80085fc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2202      	movs	r2, #2
 8009326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800932a:	e014      	b.n	8009356 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f9ba 	bl	80096a6 <USBD_CtlSendStatus>
    break;
 8009332:	e010      	b.n	8009356 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f9b6 	bl	80096a6 <USBD_CtlSendStatus>
    break;
 800933a:	e00c      	b.n	8009356 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f8e6 	bl	8009510 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009344:	4b06      	ldr	r3, [pc, #24]	; (8009360 <USBD_SetConfig+0x144>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff f956 	bl	80085fc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009350:	2303      	movs	r3, #3
 8009352:	73fb      	strb	r3, [r7, #15]
    break;
 8009354:	bf00      	nop
  }

  return ret;
 8009356:	7bfb      	ldrb	r3, [r7, #15]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20000268 	.word	0x20000268

08009364 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	88db      	ldrh	r3, [r3, #6]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d004      	beq.n	8009380 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f8c9 	bl	8009510 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800937e:	e021      	b.n	80093c4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009386:	2b01      	cmp	r3, #1
 8009388:	db17      	blt.n	80093ba <USBD_GetConfig+0x56>
 800938a:	2b02      	cmp	r3, #2
 800938c:	dd02      	ble.n	8009394 <USBD_GetConfig+0x30>
 800938e:	2b03      	cmp	r3, #3
 8009390:	d00b      	beq.n	80093aa <USBD_GetConfig+0x46>
 8009392:	e012      	b.n	80093ba <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3308      	adds	r3, #8
 800939e:	2201      	movs	r2, #1
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f925 	bl	80095f2 <USBD_CtlSendData>
      break;
 80093a8:	e00c      	b.n	80093c4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3304      	adds	r3, #4
 80093ae:	2201      	movs	r2, #1
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f91d 	bl	80095f2 <USBD_CtlSendData>
      break;
 80093b8:	e004      	b.n	80093c4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f8a7 	bl	8009510 <USBD_CtlError>
      break;
 80093c2:	bf00      	nop
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093dc:	3b01      	subs	r3, #1
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d81e      	bhi.n	8009420 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	88db      	ldrh	r3, [r3, #6]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d004      	beq.n	80093f4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f88f 	bl	8009510 <USBD_CtlError>
      break;
 80093f2:	e01a      	b.n	800942a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009400:	2b00      	cmp	r3, #0
 8009402:	d005      	beq.n	8009410 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f043 0202 	orr.w	r2, r3, #2
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	330c      	adds	r3, #12
 8009414:	2202      	movs	r2, #2
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f8ea 	bl	80095f2 <USBD_CtlSendData>
    break;
 800941e:	e004      	b.n	800942a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f874 	bl	8009510 <USBD_CtlError>
    break;
 8009428:	bf00      	nop
  }
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	885b      	ldrh	r3, [r3, #2]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d106      	bne.n	8009452 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f92a 	bl	80096a6 <USBD_CtlSendStatus>
  }
}
 8009452:	bf00      	nop
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946a:	3b01      	subs	r3, #1
 800946c:	2b02      	cmp	r3, #2
 800946e:	d80b      	bhi.n	8009488 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	885b      	ldrh	r3, [r3, #2]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d10c      	bne.n	8009492 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f910 	bl	80096a6 <USBD_CtlSendStatus>
      }
      break;
 8009486:	e004      	b.n	8009492 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f840 	bl	8009510 <USBD_CtlError>
      break;
 8009490:	e000      	b.n	8009494 <USBD_ClrFeature+0x3a>
      break;
 8009492:	bf00      	nop
  }
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	781a      	ldrb	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	781a      	ldrb	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3301      	adds	r3, #1
 80094c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff fad3 	bl	8008a72 <SWAPBYTE>
 80094cc:	4603      	mov	r3, r0
 80094ce:	461a      	mov	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3301      	adds	r3, #1
 80094d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3301      	adds	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f7ff fac6 	bl	8008a72 <SWAPBYTE>
 80094e6:	4603      	mov	r3, r0
 80094e8:	461a      	mov	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3301      	adds	r3, #1
 80094f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	3301      	adds	r3, #1
 80094f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff fab9 	bl	8008a72 <SWAPBYTE>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	80da      	strh	r2, [r3, #6]
}
 8009508:	bf00      	nop
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800951a:	2180      	movs	r1, #128	; 0x80
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fced 	bl	8009efc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009522:	2100      	movs	r1, #0
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fce9 	bl	8009efc <USBD_LL_StallEP>
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b086      	sub	sp, #24
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800953e:	2300      	movs	r3, #0
 8009540:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d036      	beq.n	80095b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800954c:	6938      	ldr	r0, [r7, #16]
 800954e:	f000 f836 	bl	80095be <USBD_GetLen>
 8009552:	4603      	mov	r3, r0
 8009554:	3301      	adds	r3, #1
 8009556:	b29b      	uxth	r3, r3
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	b29a      	uxth	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	4413      	add	r3, r2
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	7812      	ldrb	r2, [r2, #0]
 800956a:	701a      	strb	r2, [r3, #0]
  idx++;
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	3301      	adds	r3, #1
 8009570:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	4413      	add	r3, r2
 8009578:	2203      	movs	r2, #3
 800957a:	701a      	strb	r2, [r3, #0]
  idx++;
 800957c:	7dfb      	ldrb	r3, [r7, #23]
 800957e:	3301      	adds	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009582:	e013      	b.n	80095ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	4413      	add	r3, r2
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	7812      	ldrb	r2, [r2, #0]
 800958e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	3301      	adds	r3, #1
 8009594:	613b      	str	r3, [r7, #16]
    idx++;
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	3301      	adds	r3, #1
 800959a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	4413      	add	r3, r2
 80095a2:	2200      	movs	r2, #0
 80095a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	3301      	adds	r3, #1
 80095aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e7      	bne.n	8009584 <USBD_GetString+0x52>
 80095b4:	e000      	b.n	80095b8 <USBD_GetString+0x86>
    return;
 80095b6:	bf00      	nop
  }
}
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095be:	b480      	push	{r7}
 80095c0:	b085      	sub	sp, #20
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095ce:	e005      	b.n	80095dc <USBD_GetLen+0x1e>
  {
    len++;
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	3301      	adds	r3, #1
 80095d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	3301      	adds	r3, #1
 80095da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1f5      	bne.n	80095d0 <USBD_GetLen+0x12>
  }

  return len;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2202      	movs	r2, #2
 8009602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	2100      	movs	r1, #0
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 fcf8 	bl	800a00e <USBD_LL_Transmit>

  return USBD_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	2100      	movs	r1, #0
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 fce7 	bl	800a00e <USBD_LL_Transmit>

  return USBD_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2203      	movs	r2, #3
 800965a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	2100      	movs	r1, #0
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 fceb 	bl	800a050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	2100      	movs	r1, #0
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fcda 	bl	800a050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2204      	movs	r2, #4
 80096b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096b6:	2300      	movs	r3, #0
 80096b8:	2200      	movs	r2, #0
 80096ba:	2100      	movs	r1, #0
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fca6 	bl	800a00e <USBD_LL_Transmit>

  return USBD_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2205      	movs	r2, #5
 80096d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096dc:	2300      	movs	r3, #0
 80096de:	2200      	movs	r2, #0
 80096e0:	2100      	movs	r1, #0
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fcb4 	bl	800a050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096f8:	2200      	movs	r2, #0
 80096fa:	4912      	ldr	r1, [pc, #72]	; (8009744 <MX_USB_DEVICE_Init+0x50>)
 80096fc:	4812      	ldr	r0, [pc, #72]	; (8009748 <MX_USB_DEVICE_Init+0x54>)
 80096fe:	f7fe fef3 	bl	80084e8 <USBD_Init>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009708:	f7f7 fabc 	bl	8000c84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800970c:	490f      	ldr	r1, [pc, #60]	; (800974c <MX_USB_DEVICE_Init+0x58>)
 800970e:	480e      	ldr	r0, [pc, #56]	; (8009748 <MX_USB_DEVICE_Init+0x54>)
 8009710:	f7fe ff20 	bl	8008554 <USBD_RegisterClass>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800971a:	f7f7 fab3 	bl	8000c84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800971e:	490c      	ldr	r1, [pc, #48]	; (8009750 <MX_USB_DEVICE_Init+0x5c>)
 8009720:	4809      	ldr	r0, [pc, #36]	; (8009748 <MX_USB_DEVICE_Init+0x54>)
 8009722:	f7fe fe45 	bl	80083b0 <USBD_CDC_RegisterInterface>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800972c:	f7f7 faaa 	bl	8000c84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009730:	4805      	ldr	r0, [pc, #20]	; (8009748 <MX_USB_DEVICE_Init+0x54>)
 8009732:	f7fe ff30 	bl	8008596 <USBD_Start>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800973c:	f7f7 faa2 	bl	8000c84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009740:	bf00      	nop
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000130 	.word	0x20000130
 8009748:	20000404 	.word	0x20000404
 800974c:	20000018 	.word	0x20000018
 8009750:	2000011c 	.word	0x2000011c

08009754 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009758:	2200      	movs	r2, #0
 800975a:	4905      	ldr	r1, [pc, #20]	; (8009770 <CDC_Init_FS+0x1c>)
 800975c:	4805      	ldr	r0, [pc, #20]	; (8009774 <CDC_Init_FS+0x20>)
 800975e:	f7fe fe3c 	bl	80083da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009762:	4905      	ldr	r1, [pc, #20]	; (8009778 <CDC_Init_FS+0x24>)
 8009764:	4803      	ldr	r0, [pc, #12]	; (8009774 <CDC_Init_FS+0x20>)
 8009766:	f7fe fe51 	bl	800840c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800976a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800976c:	4618      	mov	r0, r3
 800976e:	bd80      	pop	{r7, pc}
 8009770:	20000ed4 	.word	0x20000ed4
 8009774:	20000404 	.word	0x20000404
 8009778:	200006d4 	.word	0x200006d4

0800977c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800977c:	b480      	push	{r7}
 800977e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009780:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009782:	4618      	mov	r0, r3
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	6039      	str	r1, [r7, #0]
 8009796:	71fb      	strb	r3, [r7, #7]
 8009798:	4613      	mov	r3, r2
 800979a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	2b23      	cmp	r3, #35	; 0x23
 80097a0:	d84a      	bhi.n	8009838 <CDC_Control_FS+0xac>
 80097a2:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <CDC_Control_FS+0x1c>)
 80097a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a8:	08009839 	.word	0x08009839
 80097ac:	08009839 	.word	0x08009839
 80097b0:	08009839 	.word	0x08009839
 80097b4:	08009839 	.word	0x08009839
 80097b8:	08009839 	.word	0x08009839
 80097bc:	08009839 	.word	0x08009839
 80097c0:	08009839 	.word	0x08009839
 80097c4:	08009839 	.word	0x08009839
 80097c8:	08009839 	.word	0x08009839
 80097cc:	08009839 	.word	0x08009839
 80097d0:	08009839 	.word	0x08009839
 80097d4:	08009839 	.word	0x08009839
 80097d8:	08009839 	.word	0x08009839
 80097dc:	08009839 	.word	0x08009839
 80097e0:	08009839 	.word	0x08009839
 80097e4:	08009839 	.word	0x08009839
 80097e8:	08009839 	.word	0x08009839
 80097ec:	08009839 	.word	0x08009839
 80097f0:	08009839 	.word	0x08009839
 80097f4:	08009839 	.word	0x08009839
 80097f8:	08009839 	.word	0x08009839
 80097fc:	08009839 	.word	0x08009839
 8009800:	08009839 	.word	0x08009839
 8009804:	08009839 	.word	0x08009839
 8009808:	08009839 	.word	0x08009839
 800980c:	08009839 	.word	0x08009839
 8009810:	08009839 	.word	0x08009839
 8009814:	08009839 	.word	0x08009839
 8009818:	08009839 	.word	0x08009839
 800981c:	08009839 	.word	0x08009839
 8009820:	08009839 	.word	0x08009839
 8009824:	08009839 	.word	0x08009839
 8009828:	08009839 	.word	0x08009839
 800982c:	08009839 	.word	0x08009839
 8009830:	08009839 	.word	0x08009839
 8009834:	08009839 	.word	0x08009839
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009838:	bf00      	nop
  }

  return (USBD_OK);
 800983a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800983c:	4618      	mov	r0, r3
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4805      	ldr	r0, [pc, #20]	; (800986c <CDC_Receive_FS+0x24>)
 8009856:	f7fe fdd9 	bl	800840c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800985a:	4804      	ldr	r0, [pc, #16]	; (800986c <CDC_Receive_FS+0x24>)
 800985c:	f7fe fe1a 	bl	8008494 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009860:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	20000404 	.word	0x20000404

08009870 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009880:	4b0d      	ldr	r3, [pc, #52]	; (80098b8 <CDC_Transmit_FS+0x48>)
 8009882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009886:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009892:	2301      	movs	r3, #1
 8009894:	e00b      	b.n	80098ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009896:	887b      	ldrh	r3, [r7, #2]
 8009898:	461a      	mov	r2, r3
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	4806      	ldr	r0, [pc, #24]	; (80098b8 <CDC_Transmit_FS+0x48>)
 800989e:	f7fe fd9c 	bl	80083da <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098a2:	4805      	ldr	r0, [pc, #20]	; (80098b8 <CDC_Transmit_FS+0x48>)
 80098a4:	f7fe fdc6 	bl	8008434 <USBD_CDC_TransmitPacket>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20000404 	.word	0x20000404

080098bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	4613      	mov	r3, r2
 80098c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80098ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	371c      	adds	r7, #28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
	...

080098e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	6039      	str	r1, [r7, #0]
 80098ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2212      	movs	r2, #18
 80098f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098f2:	4b03      	ldr	r3, [pc, #12]	; (8009900 <USBD_FS_DeviceDescriptor+0x20>)
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	2000014c 	.word	0x2000014c

08009904 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	6039      	str	r1, [r7, #0]
 800990e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	2204      	movs	r2, #4
 8009914:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009916:	4b03      	ldr	r3, [pc, #12]	; (8009924 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009918:	4618      	mov	r0, r3
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	20000160 	.word	0x20000160

08009928 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	6039      	str	r1, [r7, #0]
 8009932:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d105      	bne.n	8009946 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	4907      	ldr	r1, [pc, #28]	; (800995c <USBD_FS_ProductStrDescriptor+0x34>)
 800993e:	4808      	ldr	r0, [pc, #32]	; (8009960 <USBD_FS_ProductStrDescriptor+0x38>)
 8009940:	f7ff fdf7 	bl	8009532 <USBD_GetString>
 8009944:	e004      	b.n	8009950 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	4904      	ldr	r1, [pc, #16]	; (800995c <USBD_FS_ProductStrDescriptor+0x34>)
 800994a:	4805      	ldr	r0, [pc, #20]	; (8009960 <USBD_FS_ProductStrDescriptor+0x38>)
 800994c:	f7ff fdf1 	bl	8009532 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009950:	4b02      	ldr	r3, [pc, #8]	; (800995c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009952:	4618      	mov	r0, r3
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	200016d4 	.word	0x200016d4
 8009960:	0800af14 	.word	0x0800af14

08009964 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	6039      	str	r1, [r7, #0]
 800996e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	4904      	ldr	r1, [pc, #16]	; (8009984 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009974:	4804      	ldr	r0, [pc, #16]	; (8009988 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009976:	f7ff fddc 	bl	8009532 <USBD_GetString>
  return USBD_StrDesc;
 800997a:	4b02      	ldr	r3, [pc, #8]	; (8009984 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800997c:	4618      	mov	r0, r3
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	200016d4 	.word	0x200016d4
 8009988:	0800af2c 	.word	0x0800af2c

0800998c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	6039      	str	r1, [r7, #0]
 8009996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	221a      	movs	r2, #26
 800999c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800999e:	f000 f843 	bl	8009a28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099a2:	4b02      	ldr	r3, [pc, #8]	; (80099ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20000164 	.word	0x20000164

080099b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	6039      	str	r1, [r7, #0]
 80099ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099bc:	79fb      	ldrb	r3, [r7, #7]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d105      	bne.n	80099ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	4907      	ldr	r1, [pc, #28]	; (80099e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099c6:	4808      	ldr	r0, [pc, #32]	; (80099e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099c8:	f7ff fdb3 	bl	8009532 <USBD_GetString>
 80099cc:	e004      	b.n	80099d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	4904      	ldr	r1, [pc, #16]	; (80099e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099d2:	4805      	ldr	r0, [pc, #20]	; (80099e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099d4:	f7ff fdad 	bl	8009532 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099d8:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	200016d4 	.word	0x200016d4
 80099e8:	0800af40 	.word	0x0800af40

080099ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	6039      	str	r1, [r7, #0]
 80099f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d105      	bne.n	8009a0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	4907      	ldr	r1, [pc, #28]	; (8009a20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a02:	4808      	ldr	r0, [pc, #32]	; (8009a24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a04:	f7ff fd95 	bl	8009532 <USBD_GetString>
 8009a08:	e004      	b.n	8009a14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	4904      	ldr	r1, [pc, #16]	; (8009a20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a0e:	4805      	ldr	r0, [pc, #20]	; (8009a24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a10:	f7ff fd8f 	bl	8009532 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a14:	4b02      	ldr	r3, [pc, #8]	; (8009a20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	200016d4 	.word	0x200016d4
 8009a24:	0800af4c 	.word	0x0800af4c

08009a28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a2e:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <Get_SerialNum+0x44>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a34:	4b0e      	ldr	r3, [pc, #56]	; (8009a70 <Get_SerialNum+0x48>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a3a:	4b0e      	ldr	r3, [pc, #56]	; (8009a74 <Get_SerialNum+0x4c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4413      	add	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d009      	beq.n	8009a62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a4e:	2208      	movs	r2, #8
 8009a50:	4909      	ldr	r1, [pc, #36]	; (8009a78 <Get_SerialNum+0x50>)
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f814 	bl	8009a80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a58:	2204      	movs	r2, #4
 8009a5a:	4908      	ldr	r1, [pc, #32]	; (8009a7c <Get_SerialNum+0x54>)
 8009a5c:	68b8      	ldr	r0, [r7, #8]
 8009a5e:	f000 f80f 	bl	8009a80 <IntToUnicode>
  }
}
 8009a62:	bf00      	nop
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	1fff7a10 	.word	0x1fff7a10
 8009a70:	1fff7a14 	.word	0x1fff7a14
 8009a74:	1fff7a18 	.word	0x1fff7a18
 8009a78:	20000166 	.word	0x20000166
 8009a7c:	20000176 	.word	0x20000176

08009a80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a92:	2300      	movs	r3, #0
 8009a94:	75fb      	strb	r3, [r7, #23]
 8009a96:	e027      	b.n	8009ae8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	0f1b      	lsrs	r3, r3, #28
 8009a9c:	2b09      	cmp	r3, #9
 8009a9e:	d80b      	bhi.n	8009ab8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	0f1b      	lsrs	r3, r3, #28
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	4619      	mov	r1, r3
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	440b      	add	r3, r1
 8009ab0:	3230      	adds	r2, #48	; 0x30
 8009ab2:	b2d2      	uxtb	r2, r2
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	e00a      	b.n	8009ace <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	0f1b      	lsrs	r3, r3, #28
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	7dfb      	ldrb	r3, [r7, #23]
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	440b      	add	r3, r1
 8009ac8:	3237      	adds	r2, #55	; 0x37
 8009aca:	b2d2      	uxtb	r2, r2
 8009acc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	011b      	lsls	r3, r3, #4
 8009ad2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	3301      	adds	r3, #1
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	4413      	add	r3, r2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	75fb      	strb	r3, [r7, #23]
 8009ae8:	7dfa      	ldrb	r2, [r7, #23]
 8009aea:	79fb      	ldrb	r3, [r7, #7]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d3d3      	bcc.n	8009a98 <IntToUnicode+0x18>
  }
}
 8009af0:	bf00      	nop
 8009af2:	371c      	adds	r7, #28
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08a      	sub	sp, #40	; 0x28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b04:	f107 0314 	add.w	r3, r7, #20
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	605a      	str	r2, [r3, #4]
 8009b0e:	609a      	str	r2, [r3, #8]
 8009b10:	60da      	str	r2, [r3, #12]
 8009b12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b1c:	d147      	bne.n	8009bae <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b1e:	2300      	movs	r3, #0
 8009b20:	613b      	str	r3, [r7, #16]
 8009b22:	4b25      	ldr	r3, [pc, #148]	; (8009bb8 <HAL_PCD_MspInit+0xbc>)
 8009b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b26:	4a24      	ldr	r2, [pc, #144]	; (8009bb8 <HAL_PCD_MspInit+0xbc>)
 8009b28:	f043 0301 	orr.w	r3, r3, #1
 8009b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b2e:	4b22      	ldr	r3, [pc, #136]	; (8009bb8 <HAL_PCD_MspInit+0xbc>)
 8009b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	613b      	str	r3, [r7, #16]
 8009b38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b40:	2300      	movs	r3, #0
 8009b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b44:	2300      	movs	r3, #0
 8009b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009b48:	f107 0314 	add.w	r3, r7, #20
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	481b      	ldr	r0, [pc, #108]	; (8009bbc <HAL_PCD_MspInit+0xc0>)
 8009b50:	f7f7 fcda 	bl	8001508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009b54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b62:	2300      	movs	r3, #0
 8009b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b66:	230a      	movs	r3, #10
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b6a:	f107 0314 	add.w	r3, r7, #20
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4812      	ldr	r0, [pc, #72]	; (8009bbc <HAL_PCD_MspInit+0xc0>)
 8009b72:	f7f7 fcc9 	bl	8001508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b76:	4b10      	ldr	r3, [pc, #64]	; (8009bb8 <HAL_PCD_MspInit+0xbc>)
 8009b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b7a:	4a0f      	ldr	r2, [pc, #60]	; (8009bb8 <HAL_PCD_MspInit+0xbc>)
 8009b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b80:	6353      	str	r3, [r2, #52]	; 0x34
 8009b82:	2300      	movs	r3, #0
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	4b0c      	ldr	r3, [pc, #48]	; (8009bb8 <HAL_PCD_MspInit+0xbc>)
 8009b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8a:	4a0b      	ldr	r2, [pc, #44]	; (8009bb8 <HAL_PCD_MspInit+0xbc>)
 8009b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b90:	6453      	str	r3, [r2, #68]	; 0x44
 8009b92:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <HAL_PCD_MspInit+0xbc>)
 8009b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	2043      	movs	r0, #67	; 0x43
 8009ba4:	f7f7 fc57 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ba8:	2043      	movs	r0, #67	; 0x43
 8009baa:	f7f7 fc70 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009bae:	bf00      	nop
 8009bb0:	3728      	adds	r7, #40	; 0x28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	40023800 	.word	0x40023800
 8009bbc:	40020000 	.word	0x40020000

08009bc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	f7fe fd28 	bl	800862c <USBD_LL_SetupStage>
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009bf6:	78fa      	ldrb	r2, [r7, #3]
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	00db      	lsls	r3, r3, #3
 8009bfe:	1a9b      	subs	r3, r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	440b      	add	r3, r1
 8009c04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	78fb      	ldrb	r3, [r7, #3]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	f7fe fd60 	bl	80086d2 <USBD_LL_DataOutStage>
}
 8009c12:	bf00      	nop
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	460b      	mov	r3, r1
 8009c24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009c2c:	78fa      	ldrb	r2, [r7, #3]
 8009c2e:	6879      	ldr	r1, [r7, #4]
 8009c30:	4613      	mov	r3, r2
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	1a9b      	subs	r3, r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	440b      	add	r3, r1
 8009c3a:	3348      	adds	r3, #72	; 0x48
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	78fb      	ldrb	r3, [r7, #3]
 8009c40:	4619      	mov	r1, r3
 8009c42:	f7fe fda9 	bl	8008798 <USBD_LL_DataInStage>
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b082      	sub	sp, #8
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe fead 	bl	80089bc <USBD_LL_SOF>
}
 8009c62:	bf00      	nop
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c72:	2301      	movs	r3, #1
 8009c74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
 8009c82:	e008      	b.n	8009c96 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d102      	bne.n	8009c92 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	73fb      	strb	r3, [r7, #15]
 8009c90:	e001      	b.n	8009c96 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009c92:	f7f6 fff7 	bl	8000c84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c9c:	7bfa      	ldrb	r2, [r7, #15]
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fe fe50 	bl	8008946 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fe09 	bl	80088c4 <USBD_LL_Reset>
}
 8009cb2:	bf00      	nop
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe fe4b 	bl	8008966 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	6812      	ldr	r2, [r2, #0]
 8009cde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ce2:	f043 0301 	orr.w	r3, r3, #1
 8009ce6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cf0:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <HAL_PCD_SuspendCallback+0x48>)
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	4a03      	ldr	r2, [pc, #12]	; (8009d04 <HAL_PCD_SuspendCallback+0x48>)
 8009cf6:	f043 0306 	orr.w	r3, r3, #6
 8009cfa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	e000ed00 	.word	0xe000ed00

08009d08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe fe3a 	bl	8008990 <USBD_LL_Resume>
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d36:	78fa      	ldrb	r2, [r7, #3]
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fe fe65 	bl	8008a0a <USBD_LL_IsoOUTIncomplete>
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d5a:	78fa      	ldrb	r2, [r7, #3]
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe fe46 	bl	80089f0 <USBD_LL_IsoINIncomplete>
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe fe52 	bl	8008a24 <USBD_LL_DevConnected>
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fe fe4f 	bl	8008a3a <USBD_LL_DevDisconnected>
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d13c      	bne.n	8009e2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009db4:	4a20      	ldr	r2, [pc, #128]	; (8009e38 <USBD_LL_Init+0x94>)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a1e      	ldr	r2, [pc, #120]	; (8009e38 <USBD_LL_Init+0x94>)
 8009dc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009dc4:	4b1c      	ldr	r3, [pc, #112]	; (8009e38 <USBD_LL_Init+0x94>)
 8009dc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009dca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009dcc:	4b1a      	ldr	r3, [pc, #104]	; (8009e38 <USBD_LL_Init+0x94>)
 8009dce:	2204      	movs	r2, #4
 8009dd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009dd2:	4b19      	ldr	r3, [pc, #100]	; (8009e38 <USBD_LL_Init+0x94>)
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009dd8:	4b17      	ldr	r3, [pc, #92]	; (8009e38 <USBD_LL_Init+0x94>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009dde:	4b16      	ldr	r3, [pc, #88]	; (8009e38 <USBD_LL_Init+0x94>)
 8009de0:	2202      	movs	r2, #2
 8009de2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009de4:	4b14      	ldr	r3, [pc, #80]	; (8009e38 <USBD_LL_Init+0x94>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009dea:	4b13      	ldr	r3, [pc, #76]	; (8009e38 <USBD_LL_Init+0x94>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009df0:	4b11      	ldr	r3, [pc, #68]	; (8009e38 <USBD_LL_Init+0x94>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009df6:	4b10      	ldr	r3, [pc, #64]	; (8009e38 <USBD_LL_Init+0x94>)
 8009df8:	2201      	movs	r2, #1
 8009dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009dfc:	4b0e      	ldr	r3, [pc, #56]	; (8009e38 <USBD_LL_Init+0x94>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e02:	480d      	ldr	r0, [pc, #52]	; (8009e38 <USBD_LL_Init+0x94>)
 8009e04:	f7f8 fb0c 	bl	8002420 <HAL_PCD_Init>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009e0e:	f7f6 ff39 	bl	8000c84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009e12:	2180      	movs	r1, #128	; 0x80
 8009e14:	4808      	ldr	r0, [pc, #32]	; (8009e38 <USBD_LL_Init+0x94>)
 8009e16:	f7f9 fc6a 	bl	80036ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009e1a:	2240      	movs	r2, #64	; 0x40
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4806      	ldr	r0, [pc, #24]	; (8009e38 <USBD_LL_Init+0x94>)
 8009e20:	f7f9 fc1e 	bl	8003660 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009e24:	2280      	movs	r2, #128	; 0x80
 8009e26:	2101      	movs	r1, #1
 8009e28:	4803      	ldr	r0, [pc, #12]	; (8009e38 <USBD_LL_Init+0x94>)
 8009e2a:	f7f9 fc19 	bl	8003660 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	200018d4 	.word	0x200018d4

08009e3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7f8 fc01 	bl	800265a <HAL_PCD_Start>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 f92a 	bl	800a0b8 <USBD_Get_USB_Status>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	4608      	mov	r0, r1
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	461a      	mov	r2, r3
 8009e80:	4603      	mov	r3, r0
 8009e82:	70fb      	strb	r3, [r7, #3]
 8009e84:	460b      	mov	r3, r1
 8009e86:	70bb      	strb	r3, [r7, #2]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e9a:	78bb      	ldrb	r3, [r7, #2]
 8009e9c:	883a      	ldrh	r2, [r7, #0]
 8009e9e:	78f9      	ldrb	r1, [r7, #3]
 8009ea0:	f7f8 ffe5 	bl	8002e6e <HAL_PCD_EP_Open>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 f904 	bl	800a0b8 <USBD_Get_USB_Status>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ed8:	78fa      	ldrb	r2, [r7, #3]
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7f9 f82e 	bl	8002f3e <HAL_PCD_EP_Close>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 f8e5 	bl	800a0b8 <USBD_Get_USB_Status>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f16:	78fa      	ldrb	r2, [r7, #3]
 8009f18:	4611      	mov	r1, r2
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7f9 f906 	bl	800312c <HAL_PCD_EP_SetStall>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 f8c6 	bl	800a0b8 <USBD_Get_USB_Status>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	460b      	mov	r3, r1
 8009f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f54:	78fa      	ldrb	r2, [r7, #3]
 8009f56:	4611      	mov	r1, r2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7f9 f94b 	bl	80031f4 <HAL_PCD_EP_ClrStall>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 f8a7 	bl	800a0b8 <USBD_Get_USB_Status>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	da0b      	bge.n	8009fac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f9a:	68f9      	ldr	r1, [r7, #12]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	00db      	lsls	r3, r3, #3
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	333e      	adds	r3, #62	; 0x3e
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	e00b      	b.n	8009fc4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fb2:	68f9      	ldr	r1, [r7, #12]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	1a9b      	subs	r3, r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009fc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fea:	78fa      	ldrb	r2, [r7, #3]
 8009fec:	4611      	mov	r1, r2
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7f8 ff18 	bl	8002e24 <HAL_PCD_SetAddress>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 f85c 	bl	800a0b8 <USBD_Get_USB_Status>
 800a000:	4603      	mov	r3, r0
 800a002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a004:	7bbb      	ldrb	r3, [r7, #14]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b086      	sub	sp, #24
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
 800a01a:	460b      	mov	r3, r1
 800a01c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a02c:	7af9      	ldrb	r1, [r7, #11]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	f7f9 f831 	bl	8003098 <HAL_PCD_EP_Transmit>
 800a036:	4603      	mov	r3, r0
 800a038:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 f83b 	bl	800a0b8 <USBD_Get_USB_Status>
 800a042:	4603      	mov	r3, r0
 800a044:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a046:	7dbb      	ldrb	r3, [r7, #22]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	607a      	str	r2, [r7, #4]
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	460b      	mov	r3, r1
 800a05e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a06e:	7af9      	ldrb	r1, [r7, #11]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	f7f8 ffad 	bl	8002fd2 <HAL_PCD_EP_Receive>
 800a078:	4603      	mov	r3, r0
 800a07a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 f81a 	bl	800a0b8 <USBD_Get_USB_Status>
 800a084:	4603      	mov	r3, r0
 800a086:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a088:	7dbb      	ldrb	r3, [r7, #22]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	460b      	mov	r3, r1
 800a09c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0a4:	78fa      	ldrb	r2, [r7, #3]
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7f8 ffdd 	bl	8003068 <HAL_PCD_EP_GetRxCount>
 800a0ae:	4603      	mov	r3, r0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0c6:	79fb      	ldrb	r3, [r7, #7]
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d817      	bhi.n	800a0fc <USBD_Get_USB_Status+0x44>
 800a0cc:	a201      	add	r2, pc, #4	; (adr r2, 800a0d4 <USBD_Get_USB_Status+0x1c>)
 800a0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d2:	bf00      	nop
 800a0d4:	0800a0e5 	.word	0x0800a0e5
 800a0d8:	0800a0eb 	.word	0x0800a0eb
 800a0dc:	0800a0f1 	.word	0x0800a0f1
 800a0e0:	0800a0f7 	.word	0x0800a0f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e8:	e00b      	b.n	800a102 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ee:	e008      	b.n	800a102 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f4:	e005      	b.n	800a102 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0fa:	e002      	b.n	800a102 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a100:	bf00      	nop
  }
  return usb_status;
 800a102:	7bfb      	ldrb	r3, [r7, #15]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <__errno>:
 800a110:	4b01      	ldr	r3, [pc, #4]	; (800a118 <__errno+0x8>)
 800a112:	6818      	ldr	r0, [r3, #0]
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	20000180 	.word	0x20000180

0800a11c <__libc_init_array>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	4e0d      	ldr	r6, [pc, #52]	; (800a154 <__libc_init_array+0x38>)
 800a120:	4c0d      	ldr	r4, [pc, #52]	; (800a158 <__libc_init_array+0x3c>)
 800a122:	1ba4      	subs	r4, r4, r6
 800a124:	10a4      	asrs	r4, r4, #2
 800a126:	2500      	movs	r5, #0
 800a128:	42a5      	cmp	r5, r4
 800a12a:	d109      	bne.n	800a140 <__libc_init_array+0x24>
 800a12c:	4e0b      	ldr	r6, [pc, #44]	; (800a15c <__libc_init_array+0x40>)
 800a12e:	4c0c      	ldr	r4, [pc, #48]	; (800a160 <__libc_init_array+0x44>)
 800a130:	f000 fc38 	bl	800a9a4 <_init>
 800a134:	1ba4      	subs	r4, r4, r6
 800a136:	10a4      	asrs	r4, r4, #2
 800a138:	2500      	movs	r5, #0
 800a13a:	42a5      	cmp	r5, r4
 800a13c:	d105      	bne.n	800a14a <__libc_init_array+0x2e>
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a144:	4798      	blx	r3
 800a146:	3501      	adds	r5, #1
 800a148:	e7ee      	b.n	800a128 <__libc_init_array+0xc>
 800a14a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a14e:	4798      	blx	r3
 800a150:	3501      	adds	r5, #1
 800a152:	e7f2      	b.n	800a13a <__libc_init_array+0x1e>
 800a154:	0800afb0 	.word	0x0800afb0
 800a158:	0800afb0 	.word	0x0800afb0
 800a15c:	0800afb0 	.word	0x0800afb0
 800a160:	0800afb4 	.word	0x0800afb4

0800a164 <malloc>:
 800a164:	4b02      	ldr	r3, [pc, #8]	; (800a170 <malloc+0xc>)
 800a166:	4601      	mov	r1, r0
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	f000 b86d 	b.w	800a248 <_malloc_r>
 800a16e:	bf00      	nop
 800a170:	20000180 	.word	0x20000180

0800a174 <free>:
 800a174:	4b02      	ldr	r3, [pc, #8]	; (800a180 <free+0xc>)
 800a176:	4601      	mov	r1, r0
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f000 b817 	b.w	800a1ac <_free_r>
 800a17e:	bf00      	nop
 800a180:	20000180 	.word	0x20000180

0800a184 <memcpy>:
 800a184:	b510      	push	{r4, lr}
 800a186:	1e43      	subs	r3, r0, #1
 800a188:	440a      	add	r2, r1
 800a18a:	4291      	cmp	r1, r2
 800a18c:	d100      	bne.n	800a190 <memcpy+0xc>
 800a18e:	bd10      	pop	{r4, pc}
 800a190:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a194:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a198:	e7f7      	b.n	800a18a <memcpy+0x6>

0800a19a <memset>:
 800a19a:	4402      	add	r2, r0
 800a19c:	4603      	mov	r3, r0
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d100      	bne.n	800a1a4 <memset+0xa>
 800a1a2:	4770      	bx	lr
 800a1a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a1a8:	e7f9      	b.n	800a19e <memset+0x4>
	...

0800a1ac <_free_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	2900      	cmp	r1, #0
 800a1b2:	d045      	beq.n	800a240 <_free_r+0x94>
 800a1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1b8:	1f0c      	subs	r4, r1, #4
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	bfb8      	it	lt
 800a1be:	18e4      	addlt	r4, r4, r3
 800a1c0:	f000 f8cc 	bl	800a35c <__malloc_lock>
 800a1c4:	4a1f      	ldr	r2, [pc, #124]	; (800a244 <_free_r+0x98>)
 800a1c6:	6813      	ldr	r3, [r2, #0]
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	b933      	cbnz	r3, 800a1da <_free_r+0x2e>
 800a1cc:	6063      	str	r3, [r4, #4]
 800a1ce:	6014      	str	r4, [r2, #0]
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1d6:	f000 b8c2 	b.w	800a35e <__malloc_unlock>
 800a1da:	42a3      	cmp	r3, r4
 800a1dc:	d90c      	bls.n	800a1f8 <_free_r+0x4c>
 800a1de:	6821      	ldr	r1, [r4, #0]
 800a1e0:	1862      	adds	r2, r4, r1
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	bf04      	itt	eq
 800a1e6:	681a      	ldreq	r2, [r3, #0]
 800a1e8:	685b      	ldreq	r3, [r3, #4]
 800a1ea:	6063      	str	r3, [r4, #4]
 800a1ec:	bf04      	itt	eq
 800a1ee:	1852      	addeq	r2, r2, r1
 800a1f0:	6022      	streq	r2, [r4, #0]
 800a1f2:	6004      	str	r4, [r0, #0]
 800a1f4:	e7ec      	b.n	800a1d0 <_free_r+0x24>
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	685a      	ldr	r2, [r3, #4]
 800a1fa:	b10a      	cbz	r2, 800a200 <_free_r+0x54>
 800a1fc:	42a2      	cmp	r2, r4
 800a1fe:	d9fa      	bls.n	800a1f6 <_free_r+0x4a>
 800a200:	6819      	ldr	r1, [r3, #0]
 800a202:	1858      	adds	r0, r3, r1
 800a204:	42a0      	cmp	r0, r4
 800a206:	d10b      	bne.n	800a220 <_free_r+0x74>
 800a208:	6820      	ldr	r0, [r4, #0]
 800a20a:	4401      	add	r1, r0
 800a20c:	1858      	adds	r0, r3, r1
 800a20e:	4282      	cmp	r2, r0
 800a210:	6019      	str	r1, [r3, #0]
 800a212:	d1dd      	bne.n	800a1d0 <_free_r+0x24>
 800a214:	6810      	ldr	r0, [r2, #0]
 800a216:	6852      	ldr	r2, [r2, #4]
 800a218:	605a      	str	r2, [r3, #4]
 800a21a:	4401      	add	r1, r0
 800a21c:	6019      	str	r1, [r3, #0]
 800a21e:	e7d7      	b.n	800a1d0 <_free_r+0x24>
 800a220:	d902      	bls.n	800a228 <_free_r+0x7c>
 800a222:	230c      	movs	r3, #12
 800a224:	602b      	str	r3, [r5, #0]
 800a226:	e7d3      	b.n	800a1d0 <_free_r+0x24>
 800a228:	6820      	ldr	r0, [r4, #0]
 800a22a:	1821      	adds	r1, r4, r0
 800a22c:	428a      	cmp	r2, r1
 800a22e:	bf04      	itt	eq
 800a230:	6811      	ldreq	r1, [r2, #0]
 800a232:	6852      	ldreq	r2, [r2, #4]
 800a234:	6062      	str	r2, [r4, #4]
 800a236:	bf04      	itt	eq
 800a238:	1809      	addeq	r1, r1, r0
 800a23a:	6021      	streq	r1, [r4, #0]
 800a23c:	605c      	str	r4, [r3, #4]
 800a23e:	e7c7      	b.n	800a1d0 <_free_r+0x24>
 800a240:	bd38      	pop	{r3, r4, r5, pc}
 800a242:	bf00      	nop
 800a244:	2000026c 	.word	0x2000026c

0800a248 <_malloc_r>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	1ccd      	adds	r5, r1, #3
 800a24c:	f025 0503 	bic.w	r5, r5, #3
 800a250:	3508      	adds	r5, #8
 800a252:	2d0c      	cmp	r5, #12
 800a254:	bf38      	it	cc
 800a256:	250c      	movcc	r5, #12
 800a258:	2d00      	cmp	r5, #0
 800a25a:	4606      	mov	r6, r0
 800a25c:	db01      	blt.n	800a262 <_malloc_r+0x1a>
 800a25e:	42a9      	cmp	r1, r5
 800a260:	d903      	bls.n	800a26a <_malloc_r+0x22>
 800a262:	230c      	movs	r3, #12
 800a264:	6033      	str	r3, [r6, #0]
 800a266:	2000      	movs	r0, #0
 800a268:	bd70      	pop	{r4, r5, r6, pc}
 800a26a:	f000 f877 	bl	800a35c <__malloc_lock>
 800a26e:	4a21      	ldr	r2, [pc, #132]	; (800a2f4 <_malloc_r+0xac>)
 800a270:	6814      	ldr	r4, [r2, #0]
 800a272:	4621      	mov	r1, r4
 800a274:	b991      	cbnz	r1, 800a29c <_malloc_r+0x54>
 800a276:	4c20      	ldr	r4, [pc, #128]	; (800a2f8 <_malloc_r+0xb0>)
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	b91b      	cbnz	r3, 800a284 <_malloc_r+0x3c>
 800a27c:	4630      	mov	r0, r6
 800a27e:	f000 f83d 	bl	800a2fc <_sbrk_r>
 800a282:	6020      	str	r0, [r4, #0]
 800a284:	4629      	mov	r1, r5
 800a286:	4630      	mov	r0, r6
 800a288:	f000 f838 	bl	800a2fc <_sbrk_r>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d124      	bne.n	800a2da <_malloc_r+0x92>
 800a290:	230c      	movs	r3, #12
 800a292:	6033      	str	r3, [r6, #0]
 800a294:	4630      	mov	r0, r6
 800a296:	f000 f862 	bl	800a35e <__malloc_unlock>
 800a29a:	e7e4      	b.n	800a266 <_malloc_r+0x1e>
 800a29c:	680b      	ldr	r3, [r1, #0]
 800a29e:	1b5b      	subs	r3, r3, r5
 800a2a0:	d418      	bmi.n	800a2d4 <_malloc_r+0x8c>
 800a2a2:	2b0b      	cmp	r3, #11
 800a2a4:	d90f      	bls.n	800a2c6 <_malloc_r+0x7e>
 800a2a6:	600b      	str	r3, [r1, #0]
 800a2a8:	50cd      	str	r5, [r1, r3]
 800a2aa:	18cc      	adds	r4, r1, r3
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f000 f856 	bl	800a35e <__malloc_unlock>
 800a2b2:	f104 000b 	add.w	r0, r4, #11
 800a2b6:	1d23      	adds	r3, r4, #4
 800a2b8:	f020 0007 	bic.w	r0, r0, #7
 800a2bc:	1ac3      	subs	r3, r0, r3
 800a2be:	d0d3      	beq.n	800a268 <_malloc_r+0x20>
 800a2c0:	425a      	negs	r2, r3
 800a2c2:	50e2      	str	r2, [r4, r3]
 800a2c4:	e7d0      	b.n	800a268 <_malloc_r+0x20>
 800a2c6:	428c      	cmp	r4, r1
 800a2c8:	684b      	ldr	r3, [r1, #4]
 800a2ca:	bf16      	itet	ne
 800a2cc:	6063      	strne	r3, [r4, #4]
 800a2ce:	6013      	streq	r3, [r2, #0]
 800a2d0:	460c      	movne	r4, r1
 800a2d2:	e7eb      	b.n	800a2ac <_malloc_r+0x64>
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	6849      	ldr	r1, [r1, #4]
 800a2d8:	e7cc      	b.n	800a274 <_malloc_r+0x2c>
 800a2da:	1cc4      	adds	r4, r0, #3
 800a2dc:	f024 0403 	bic.w	r4, r4, #3
 800a2e0:	42a0      	cmp	r0, r4
 800a2e2:	d005      	beq.n	800a2f0 <_malloc_r+0xa8>
 800a2e4:	1a21      	subs	r1, r4, r0
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f000 f808 	bl	800a2fc <_sbrk_r>
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	d0cf      	beq.n	800a290 <_malloc_r+0x48>
 800a2f0:	6025      	str	r5, [r4, #0]
 800a2f2:	e7db      	b.n	800a2ac <_malloc_r+0x64>
 800a2f4:	2000026c 	.word	0x2000026c
 800a2f8:	20000270 	.word	0x20000270

0800a2fc <_sbrk_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4c06      	ldr	r4, [pc, #24]	; (800a318 <_sbrk_r+0x1c>)
 800a300:	2300      	movs	r3, #0
 800a302:	4605      	mov	r5, r0
 800a304:	4608      	mov	r0, r1
 800a306:	6023      	str	r3, [r4, #0]
 800a308:	f7f6 fec0 	bl	800108c <_sbrk>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_sbrk_r+0x1a>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	b103      	cbz	r3, 800a316 <_sbrk_r+0x1a>
 800a314:	602b      	str	r3, [r5, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	20001cdc 	.word	0x20001cdc

0800a31c <siprintf>:
 800a31c:	b40e      	push	{r1, r2, r3}
 800a31e:	b500      	push	{lr}
 800a320:	b09c      	sub	sp, #112	; 0x70
 800a322:	ab1d      	add	r3, sp, #116	; 0x74
 800a324:	9002      	str	r0, [sp, #8]
 800a326:	9006      	str	r0, [sp, #24]
 800a328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a32c:	4809      	ldr	r0, [pc, #36]	; (800a354 <siprintf+0x38>)
 800a32e:	9107      	str	r1, [sp, #28]
 800a330:	9104      	str	r1, [sp, #16]
 800a332:	4909      	ldr	r1, [pc, #36]	; (800a358 <siprintf+0x3c>)
 800a334:	f853 2b04 	ldr.w	r2, [r3], #4
 800a338:	9105      	str	r1, [sp, #20]
 800a33a:	6800      	ldr	r0, [r0, #0]
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	a902      	add	r1, sp, #8
 800a340:	f000 f868 	bl	800a414 <_svfiprintf_r>
 800a344:	9b02      	ldr	r3, [sp, #8]
 800a346:	2200      	movs	r2, #0
 800a348:	701a      	strb	r2, [r3, #0]
 800a34a:	b01c      	add	sp, #112	; 0x70
 800a34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a350:	b003      	add	sp, #12
 800a352:	4770      	bx	lr
 800a354:	20000180 	.word	0x20000180
 800a358:	ffff0208 	.word	0xffff0208

0800a35c <__malloc_lock>:
 800a35c:	4770      	bx	lr

0800a35e <__malloc_unlock>:
 800a35e:	4770      	bx	lr

0800a360 <__ssputs_r>:
 800a360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a364:	688e      	ldr	r6, [r1, #8]
 800a366:	429e      	cmp	r6, r3
 800a368:	4682      	mov	sl, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	4690      	mov	r8, r2
 800a36e:	4699      	mov	r9, r3
 800a370:	d837      	bhi.n	800a3e2 <__ssputs_r+0x82>
 800a372:	898a      	ldrh	r2, [r1, #12]
 800a374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a378:	d031      	beq.n	800a3de <__ssputs_r+0x7e>
 800a37a:	6825      	ldr	r5, [r4, #0]
 800a37c:	6909      	ldr	r1, [r1, #16]
 800a37e:	1a6f      	subs	r7, r5, r1
 800a380:	6965      	ldr	r5, [r4, #20]
 800a382:	2302      	movs	r3, #2
 800a384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a388:	fb95 f5f3 	sdiv	r5, r5, r3
 800a38c:	f109 0301 	add.w	r3, r9, #1
 800a390:	443b      	add	r3, r7
 800a392:	429d      	cmp	r5, r3
 800a394:	bf38      	it	cc
 800a396:	461d      	movcc	r5, r3
 800a398:	0553      	lsls	r3, r2, #21
 800a39a:	d530      	bpl.n	800a3fe <__ssputs_r+0x9e>
 800a39c:	4629      	mov	r1, r5
 800a39e:	f7ff ff53 	bl	800a248 <_malloc_r>
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	b950      	cbnz	r0, 800a3bc <__ssputs_r+0x5c>
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	f8ca 3000 	str.w	r3, [sl]
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3bc:	463a      	mov	r2, r7
 800a3be:	6921      	ldr	r1, [r4, #16]
 800a3c0:	f7ff fee0 	bl	800a184 <memcpy>
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ce:	81a3      	strh	r3, [r4, #12]
 800a3d0:	6126      	str	r6, [r4, #16]
 800a3d2:	6165      	str	r5, [r4, #20]
 800a3d4:	443e      	add	r6, r7
 800a3d6:	1bed      	subs	r5, r5, r7
 800a3d8:	6026      	str	r6, [r4, #0]
 800a3da:	60a5      	str	r5, [r4, #8]
 800a3dc:	464e      	mov	r6, r9
 800a3de:	454e      	cmp	r6, r9
 800a3e0:	d900      	bls.n	800a3e4 <__ssputs_r+0x84>
 800a3e2:	464e      	mov	r6, r9
 800a3e4:	4632      	mov	r2, r6
 800a3e6:	4641      	mov	r1, r8
 800a3e8:	6820      	ldr	r0, [r4, #0]
 800a3ea:	f000 fa93 	bl	800a914 <memmove>
 800a3ee:	68a3      	ldr	r3, [r4, #8]
 800a3f0:	1b9b      	subs	r3, r3, r6
 800a3f2:	60a3      	str	r3, [r4, #8]
 800a3f4:	6823      	ldr	r3, [r4, #0]
 800a3f6:	441e      	add	r6, r3
 800a3f8:	6026      	str	r6, [r4, #0]
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	e7dc      	b.n	800a3b8 <__ssputs_r+0x58>
 800a3fe:	462a      	mov	r2, r5
 800a400:	f000 faa1 	bl	800a946 <_realloc_r>
 800a404:	4606      	mov	r6, r0
 800a406:	2800      	cmp	r0, #0
 800a408:	d1e2      	bne.n	800a3d0 <__ssputs_r+0x70>
 800a40a:	6921      	ldr	r1, [r4, #16]
 800a40c:	4650      	mov	r0, sl
 800a40e:	f7ff fecd 	bl	800a1ac <_free_r>
 800a412:	e7c8      	b.n	800a3a6 <__ssputs_r+0x46>

0800a414 <_svfiprintf_r>:
 800a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	461d      	mov	r5, r3
 800a41a:	898b      	ldrh	r3, [r1, #12]
 800a41c:	061f      	lsls	r7, r3, #24
 800a41e:	b09d      	sub	sp, #116	; 0x74
 800a420:	4680      	mov	r8, r0
 800a422:	460c      	mov	r4, r1
 800a424:	4616      	mov	r6, r2
 800a426:	d50f      	bpl.n	800a448 <_svfiprintf_r+0x34>
 800a428:	690b      	ldr	r3, [r1, #16]
 800a42a:	b96b      	cbnz	r3, 800a448 <_svfiprintf_r+0x34>
 800a42c:	2140      	movs	r1, #64	; 0x40
 800a42e:	f7ff ff0b 	bl	800a248 <_malloc_r>
 800a432:	6020      	str	r0, [r4, #0]
 800a434:	6120      	str	r0, [r4, #16]
 800a436:	b928      	cbnz	r0, 800a444 <_svfiprintf_r+0x30>
 800a438:	230c      	movs	r3, #12
 800a43a:	f8c8 3000 	str.w	r3, [r8]
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295
 800a442:	e0c8      	b.n	800a5d6 <_svfiprintf_r+0x1c2>
 800a444:	2340      	movs	r3, #64	; 0x40
 800a446:	6163      	str	r3, [r4, #20]
 800a448:	2300      	movs	r3, #0
 800a44a:	9309      	str	r3, [sp, #36]	; 0x24
 800a44c:	2320      	movs	r3, #32
 800a44e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a452:	2330      	movs	r3, #48	; 0x30
 800a454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a458:	9503      	str	r5, [sp, #12]
 800a45a:	f04f 0b01 	mov.w	fp, #1
 800a45e:	4637      	mov	r7, r6
 800a460:	463d      	mov	r5, r7
 800a462:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a466:	b10b      	cbz	r3, 800a46c <_svfiprintf_r+0x58>
 800a468:	2b25      	cmp	r3, #37	; 0x25
 800a46a:	d13e      	bne.n	800a4ea <_svfiprintf_r+0xd6>
 800a46c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a470:	d00b      	beq.n	800a48a <_svfiprintf_r+0x76>
 800a472:	4653      	mov	r3, sl
 800a474:	4632      	mov	r2, r6
 800a476:	4621      	mov	r1, r4
 800a478:	4640      	mov	r0, r8
 800a47a:	f7ff ff71 	bl	800a360 <__ssputs_r>
 800a47e:	3001      	adds	r0, #1
 800a480:	f000 80a4 	beq.w	800a5cc <_svfiprintf_r+0x1b8>
 800a484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a486:	4453      	add	r3, sl
 800a488:	9309      	str	r3, [sp, #36]	; 0x24
 800a48a:	783b      	ldrb	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 809d 	beq.w	800a5cc <_svfiprintf_r+0x1b8>
 800a492:	2300      	movs	r3, #0
 800a494:	f04f 32ff 	mov.w	r2, #4294967295
 800a498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a49c:	9304      	str	r3, [sp, #16]
 800a49e:	9307      	str	r3, [sp, #28]
 800a4a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a4a6:	462f      	mov	r7, r5
 800a4a8:	2205      	movs	r2, #5
 800a4aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a4ae:	4850      	ldr	r0, [pc, #320]	; (800a5f0 <_svfiprintf_r+0x1dc>)
 800a4b0:	f7f5 fe96 	bl	80001e0 <memchr>
 800a4b4:	9b04      	ldr	r3, [sp, #16]
 800a4b6:	b9d0      	cbnz	r0, 800a4ee <_svfiprintf_r+0xda>
 800a4b8:	06d9      	lsls	r1, r3, #27
 800a4ba:	bf44      	itt	mi
 800a4bc:	2220      	movmi	r2, #32
 800a4be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4c2:	071a      	lsls	r2, r3, #28
 800a4c4:	bf44      	itt	mi
 800a4c6:	222b      	movmi	r2, #43	; 0x2b
 800a4c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a4cc:	782a      	ldrb	r2, [r5, #0]
 800a4ce:	2a2a      	cmp	r2, #42	; 0x2a
 800a4d0:	d015      	beq.n	800a4fe <_svfiprintf_r+0xea>
 800a4d2:	9a07      	ldr	r2, [sp, #28]
 800a4d4:	462f      	mov	r7, r5
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	250a      	movs	r5, #10
 800a4da:	4639      	mov	r1, r7
 800a4dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4e0:	3b30      	subs	r3, #48	; 0x30
 800a4e2:	2b09      	cmp	r3, #9
 800a4e4:	d94d      	bls.n	800a582 <_svfiprintf_r+0x16e>
 800a4e6:	b1b8      	cbz	r0, 800a518 <_svfiprintf_r+0x104>
 800a4e8:	e00f      	b.n	800a50a <_svfiprintf_r+0xf6>
 800a4ea:	462f      	mov	r7, r5
 800a4ec:	e7b8      	b.n	800a460 <_svfiprintf_r+0x4c>
 800a4ee:	4a40      	ldr	r2, [pc, #256]	; (800a5f0 <_svfiprintf_r+0x1dc>)
 800a4f0:	1a80      	subs	r0, r0, r2
 800a4f2:	fa0b f000 	lsl.w	r0, fp, r0
 800a4f6:	4318      	orrs	r0, r3
 800a4f8:	9004      	str	r0, [sp, #16]
 800a4fa:	463d      	mov	r5, r7
 800a4fc:	e7d3      	b.n	800a4a6 <_svfiprintf_r+0x92>
 800a4fe:	9a03      	ldr	r2, [sp, #12]
 800a500:	1d11      	adds	r1, r2, #4
 800a502:	6812      	ldr	r2, [r2, #0]
 800a504:	9103      	str	r1, [sp, #12]
 800a506:	2a00      	cmp	r2, #0
 800a508:	db01      	blt.n	800a50e <_svfiprintf_r+0xfa>
 800a50a:	9207      	str	r2, [sp, #28]
 800a50c:	e004      	b.n	800a518 <_svfiprintf_r+0x104>
 800a50e:	4252      	negs	r2, r2
 800a510:	f043 0302 	orr.w	r3, r3, #2
 800a514:	9207      	str	r2, [sp, #28]
 800a516:	9304      	str	r3, [sp, #16]
 800a518:	783b      	ldrb	r3, [r7, #0]
 800a51a:	2b2e      	cmp	r3, #46	; 0x2e
 800a51c:	d10c      	bne.n	800a538 <_svfiprintf_r+0x124>
 800a51e:	787b      	ldrb	r3, [r7, #1]
 800a520:	2b2a      	cmp	r3, #42	; 0x2a
 800a522:	d133      	bne.n	800a58c <_svfiprintf_r+0x178>
 800a524:	9b03      	ldr	r3, [sp, #12]
 800a526:	1d1a      	adds	r2, r3, #4
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	9203      	str	r2, [sp, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bfb8      	it	lt
 800a530:	f04f 33ff 	movlt.w	r3, #4294967295
 800a534:	3702      	adds	r7, #2
 800a536:	9305      	str	r3, [sp, #20]
 800a538:	4d2e      	ldr	r5, [pc, #184]	; (800a5f4 <_svfiprintf_r+0x1e0>)
 800a53a:	7839      	ldrb	r1, [r7, #0]
 800a53c:	2203      	movs	r2, #3
 800a53e:	4628      	mov	r0, r5
 800a540:	f7f5 fe4e 	bl	80001e0 <memchr>
 800a544:	b138      	cbz	r0, 800a556 <_svfiprintf_r+0x142>
 800a546:	2340      	movs	r3, #64	; 0x40
 800a548:	1b40      	subs	r0, r0, r5
 800a54a:	fa03 f000 	lsl.w	r0, r3, r0
 800a54e:	9b04      	ldr	r3, [sp, #16]
 800a550:	4303      	orrs	r3, r0
 800a552:	3701      	adds	r7, #1
 800a554:	9304      	str	r3, [sp, #16]
 800a556:	7839      	ldrb	r1, [r7, #0]
 800a558:	4827      	ldr	r0, [pc, #156]	; (800a5f8 <_svfiprintf_r+0x1e4>)
 800a55a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a55e:	2206      	movs	r2, #6
 800a560:	1c7e      	adds	r6, r7, #1
 800a562:	f7f5 fe3d 	bl	80001e0 <memchr>
 800a566:	2800      	cmp	r0, #0
 800a568:	d038      	beq.n	800a5dc <_svfiprintf_r+0x1c8>
 800a56a:	4b24      	ldr	r3, [pc, #144]	; (800a5fc <_svfiprintf_r+0x1e8>)
 800a56c:	bb13      	cbnz	r3, 800a5b4 <_svfiprintf_r+0x1a0>
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	3307      	adds	r3, #7
 800a572:	f023 0307 	bic.w	r3, r3, #7
 800a576:	3308      	adds	r3, #8
 800a578:	9303      	str	r3, [sp, #12]
 800a57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57c:	444b      	add	r3, r9
 800a57e:	9309      	str	r3, [sp, #36]	; 0x24
 800a580:	e76d      	b.n	800a45e <_svfiprintf_r+0x4a>
 800a582:	fb05 3202 	mla	r2, r5, r2, r3
 800a586:	2001      	movs	r0, #1
 800a588:	460f      	mov	r7, r1
 800a58a:	e7a6      	b.n	800a4da <_svfiprintf_r+0xc6>
 800a58c:	2300      	movs	r3, #0
 800a58e:	3701      	adds	r7, #1
 800a590:	9305      	str	r3, [sp, #20]
 800a592:	4619      	mov	r1, r3
 800a594:	250a      	movs	r5, #10
 800a596:	4638      	mov	r0, r7
 800a598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a59c:	3a30      	subs	r2, #48	; 0x30
 800a59e:	2a09      	cmp	r2, #9
 800a5a0:	d903      	bls.n	800a5aa <_svfiprintf_r+0x196>
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d0c8      	beq.n	800a538 <_svfiprintf_r+0x124>
 800a5a6:	9105      	str	r1, [sp, #20]
 800a5a8:	e7c6      	b.n	800a538 <_svfiprintf_r+0x124>
 800a5aa:	fb05 2101 	mla	r1, r5, r1, r2
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	4607      	mov	r7, r0
 800a5b2:	e7f0      	b.n	800a596 <_svfiprintf_r+0x182>
 800a5b4:	ab03      	add	r3, sp, #12
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	4b11      	ldr	r3, [pc, #68]	; (800a600 <_svfiprintf_r+0x1ec>)
 800a5bc:	a904      	add	r1, sp, #16
 800a5be:	4640      	mov	r0, r8
 800a5c0:	f3af 8000 	nop.w
 800a5c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a5c8:	4681      	mov	r9, r0
 800a5ca:	d1d6      	bne.n	800a57a <_svfiprintf_r+0x166>
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	065b      	lsls	r3, r3, #25
 800a5d0:	f53f af35 	bmi.w	800a43e <_svfiprintf_r+0x2a>
 800a5d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5d6:	b01d      	add	sp, #116	; 0x74
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5dc:	ab03      	add	r3, sp, #12
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	4b07      	ldr	r3, [pc, #28]	; (800a600 <_svfiprintf_r+0x1ec>)
 800a5e4:	a904      	add	r1, sp, #16
 800a5e6:	4640      	mov	r0, r8
 800a5e8:	f000 f882 	bl	800a6f0 <_printf_i>
 800a5ec:	e7ea      	b.n	800a5c4 <_svfiprintf_r+0x1b0>
 800a5ee:	bf00      	nop
 800a5f0:	0800af74 	.word	0x0800af74
 800a5f4:	0800af7a 	.word	0x0800af7a
 800a5f8:	0800af7e 	.word	0x0800af7e
 800a5fc:	00000000 	.word	0x00000000
 800a600:	0800a361 	.word	0x0800a361

0800a604 <_printf_common>:
 800a604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a608:	4691      	mov	r9, r2
 800a60a:	461f      	mov	r7, r3
 800a60c:	688a      	ldr	r2, [r1, #8]
 800a60e:	690b      	ldr	r3, [r1, #16]
 800a610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a614:	4293      	cmp	r3, r2
 800a616:	bfb8      	it	lt
 800a618:	4613      	movlt	r3, r2
 800a61a:	f8c9 3000 	str.w	r3, [r9]
 800a61e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a622:	4606      	mov	r6, r0
 800a624:	460c      	mov	r4, r1
 800a626:	b112      	cbz	r2, 800a62e <_printf_common+0x2a>
 800a628:	3301      	adds	r3, #1
 800a62a:	f8c9 3000 	str.w	r3, [r9]
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	0699      	lsls	r1, r3, #26
 800a632:	bf42      	ittt	mi
 800a634:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a638:	3302      	addmi	r3, #2
 800a63a:	f8c9 3000 	strmi.w	r3, [r9]
 800a63e:	6825      	ldr	r5, [r4, #0]
 800a640:	f015 0506 	ands.w	r5, r5, #6
 800a644:	d107      	bne.n	800a656 <_printf_common+0x52>
 800a646:	f104 0a19 	add.w	sl, r4, #25
 800a64a:	68e3      	ldr	r3, [r4, #12]
 800a64c:	f8d9 2000 	ldr.w	r2, [r9]
 800a650:	1a9b      	subs	r3, r3, r2
 800a652:	42ab      	cmp	r3, r5
 800a654:	dc28      	bgt.n	800a6a8 <_printf_common+0xa4>
 800a656:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	3300      	adds	r3, #0
 800a65e:	bf18      	it	ne
 800a660:	2301      	movne	r3, #1
 800a662:	0692      	lsls	r2, r2, #26
 800a664:	d42d      	bmi.n	800a6c2 <_printf_common+0xbe>
 800a666:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a66a:	4639      	mov	r1, r7
 800a66c:	4630      	mov	r0, r6
 800a66e:	47c0      	blx	r8
 800a670:	3001      	adds	r0, #1
 800a672:	d020      	beq.n	800a6b6 <_printf_common+0xb2>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	68e5      	ldr	r5, [r4, #12]
 800a678:	f8d9 2000 	ldr.w	r2, [r9]
 800a67c:	f003 0306 	and.w	r3, r3, #6
 800a680:	2b04      	cmp	r3, #4
 800a682:	bf08      	it	eq
 800a684:	1aad      	subeq	r5, r5, r2
 800a686:	68a3      	ldr	r3, [r4, #8]
 800a688:	6922      	ldr	r2, [r4, #16]
 800a68a:	bf0c      	ite	eq
 800a68c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a690:	2500      	movne	r5, #0
 800a692:	4293      	cmp	r3, r2
 800a694:	bfc4      	itt	gt
 800a696:	1a9b      	subgt	r3, r3, r2
 800a698:	18ed      	addgt	r5, r5, r3
 800a69a:	f04f 0900 	mov.w	r9, #0
 800a69e:	341a      	adds	r4, #26
 800a6a0:	454d      	cmp	r5, r9
 800a6a2:	d11a      	bne.n	800a6da <_printf_common+0xd6>
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	e008      	b.n	800a6ba <_printf_common+0xb6>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	4652      	mov	r2, sl
 800a6ac:	4639      	mov	r1, r7
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	47c0      	blx	r8
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	d103      	bne.n	800a6be <_printf_common+0xba>
 800a6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6be:	3501      	adds	r5, #1
 800a6c0:	e7c3      	b.n	800a64a <_printf_common+0x46>
 800a6c2:	18e1      	adds	r1, r4, r3
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	2030      	movs	r0, #48	; 0x30
 800a6c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6cc:	4422      	add	r2, r4
 800a6ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6d6:	3302      	adds	r3, #2
 800a6d8:	e7c5      	b.n	800a666 <_printf_common+0x62>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4622      	mov	r2, r4
 800a6de:	4639      	mov	r1, r7
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	47c0      	blx	r8
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d0e6      	beq.n	800a6b6 <_printf_common+0xb2>
 800a6e8:	f109 0901 	add.w	r9, r9, #1
 800a6ec:	e7d8      	b.n	800a6a0 <_printf_common+0x9c>
	...

0800a6f0 <_printf_i>:
 800a6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a6f8:	460c      	mov	r4, r1
 800a6fa:	7e09      	ldrb	r1, [r1, #24]
 800a6fc:	b085      	sub	sp, #20
 800a6fe:	296e      	cmp	r1, #110	; 0x6e
 800a700:	4617      	mov	r7, r2
 800a702:	4606      	mov	r6, r0
 800a704:	4698      	mov	r8, r3
 800a706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a708:	f000 80b3 	beq.w	800a872 <_printf_i+0x182>
 800a70c:	d822      	bhi.n	800a754 <_printf_i+0x64>
 800a70e:	2963      	cmp	r1, #99	; 0x63
 800a710:	d036      	beq.n	800a780 <_printf_i+0x90>
 800a712:	d80a      	bhi.n	800a72a <_printf_i+0x3a>
 800a714:	2900      	cmp	r1, #0
 800a716:	f000 80b9 	beq.w	800a88c <_printf_i+0x19c>
 800a71a:	2958      	cmp	r1, #88	; 0x58
 800a71c:	f000 8083 	beq.w	800a826 <_printf_i+0x136>
 800a720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a724:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a728:	e032      	b.n	800a790 <_printf_i+0xa0>
 800a72a:	2964      	cmp	r1, #100	; 0x64
 800a72c:	d001      	beq.n	800a732 <_printf_i+0x42>
 800a72e:	2969      	cmp	r1, #105	; 0x69
 800a730:	d1f6      	bne.n	800a720 <_printf_i+0x30>
 800a732:	6820      	ldr	r0, [r4, #0]
 800a734:	6813      	ldr	r3, [r2, #0]
 800a736:	0605      	lsls	r5, r0, #24
 800a738:	f103 0104 	add.w	r1, r3, #4
 800a73c:	d52a      	bpl.n	800a794 <_printf_i+0xa4>
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6011      	str	r1, [r2, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	da03      	bge.n	800a74e <_printf_i+0x5e>
 800a746:	222d      	movs	r2, #45	; 0x2d
 800a748:	425b      	negs	r3, r3
 800a74a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a74e:	486f      	ldr	r0, [pc, #444]	; (800a90c <_printf_i+0x21c>)
 800a750:	220a      	movs	r2, #10
 800a752:	e039      	b.n	800a7c8 <_printf_i+0xd8>
 800a754:	2973      	cmp	r1, #115	; 0x73
 800a756:	f000 809d 	beq.w	800a894 <_printf_i+0x1a4>
 800a75a:	d808      	bhi.n	800a76e <_printf_i+0x7e>
 800a75c:	296f      	cmp	r1, #111	; 0x6f
 800a75e:	d020      	beq.n	800a7a2 <_printf_i+0xb2>
 800a760:	2970      	cmp	r1, #112	; 0x70
 800a762:	d1dd      	bne.n	800a720 <_printf_i+0x30>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	f043 0320 	orr.w	r3, r3, #32
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	e003      	b.n	800a776 <_printf_i+0x86>
 800a76e:	2975      	cmp	r1, #117	; 0x75
 800a770:	d017      	beq.n	800a7a2 <_printf_i+0xb2>
 800a772:	2978      	cmp	r1, #120	; 0x78
 800a774:	d1d4      	bne.n	800a720 <_printf_i+0x30>
 800a776:	2378      	movs	r3, #120	; 0x78
 800a778:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a77c:	4864      	ldr	r0, [pc, #400]	; (800a910 <_printf_i+0x220>)
 800a77e:	e055      	b.n	800a82c <_printf_i+0x13c>
 800a780:	6813      	ldr	r3, [r2, #0]
 800a782:	1d19      	adds	r1, r3, #4
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6011      	str	r1, [r2, #0]
 800a788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a78c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a790:	2301      	movs	r3, #1
 800a792:	e08c      	b.n	800a8ae <_printf_i+0x1be>
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6011      	str	r1, [r2, #0]
 800a798:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a79c:	bf18      	it	ne
 800a79e:	b21b      	sxthne	r3, r3
 800a7a0:	e7cf      	b.n	800a742 <_printf_i+0x52>
 800a7a2:	6813      	ldr	r3, [r2, #0]
 800a7a4:	6825      	ldr	r5, [r4, #0]
 800a7a6:	1d18      	adds	r0, r3, #4
 800a7a8:	6010      	str	r0, [r2, #0]
 800a7aa:	0628      	lsls	r0, r5, #24
 800a7ac:	d501      	bpl.n	800a7b2 <_printf_i+0xc2>
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	e002      	b.n	800a7b8 <_printf_i+0xc8>
 800a7b2:	0668      	lsls	r0, r5, #25
 800a7b4:	d5fb      	bpl.n	800a7ae <_printf_i+0xbe>
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	4854      	ldr	r0, [pc, #336]	; (800a90c <_printf_i+0x21c>)
 800a7ba:	296f      	cmp	r1, #111	; 0x6f
 800a7bc:	bf14      	ite	ne
 800a7be:	220a      	movne	r2, #10
 800a7c0:	2208      	moveq	r2, #8
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7c8:	6865      	ldr	r5, [r4, #4]
 800a7ca:	60a5      	str	r5, [r4, #8]
 800a7cc:	2d00      	cmp	r5, #0
 800a7ce:	f2c0 8095 	blt.w	800a8fc <_printf_i+0x20c>
 800a7d2:	6821      	ldr	r1, [r4, #0]
 800a7d4:	f021 0104 	bic.w	r1, r1, #4
 800a7d8:	6021      	str	r1, [r4, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d13d      	bne.n	800a85a <_printf_i+0x16a>
 800a7de:	2d00      	cmp	r5, #0
 800a7e0:	f040 808e 	bne.w	800a900 <_printf_i+0x210>
 800a7e4:	4665      	mov	r5, ip
 800a7e6:	2a08      	cmp	r2, #8
 800a7e8:	d10b      	bne.n	800a802 <_printf_i+0x112>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	07db      	lsls	r3, r3, #31
 800a7ee:	d508      	bpl.n	800a802 <_printf_i+0x112>
 800a7f0:	6923      	ldr	r3, [r4, #16]
 800a7f2:	6862      	ldr	r2, [r4, #4]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	bfde      	ittt	le
 800a7f8:	2330      	movle	r3, #48	; 0x30
 800a7fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a802:	ebac 0305 	sub.w	r3, ip, r5
 800a806:	6123      	str	r3, [r4, #16]
 800a808:	f8cd 8000 	str.w	r8, [sp]
 800a80c:	463b      	mov	r3, r7
 800a80e:	aa03      	add	r2, sp, #12
 800a810:	4621      	mov	r1, r4
 800a812:	4630      	mov	r0, r6
 800a814:	f7ff fef6 	bl	800a604 <_printf_common>
 800a818:	3001      	adds	r0, #1
 800a81a:	d14d      	bne.n	800a8b8 <_printf_i+0x1c8>
 800a81c:	f04f 30ff 	mov.w	r0, #4294967295
 800a820:	b005      	add	sp, #20
 800a822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a826:	4839      	ldr	r0, [pc, #228]	; (800a90c <_printf_i+0x21c>)
 800a828:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a82c:	6813      	ldr	r3, [r2, #0]
 800a82e:	6821      	ldr	r1, [r4, #0]
 800a830:	1d1d      	adds	r5, r3, #4
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6015      	str	r5, [r2, #0]
 800a836:	060a      	lsls	r2, r1, #24
 800a838:	d50b      	bpl.n	800a852 <_printf_i+0x162>
 800a83a:	07ca      	lsls	r2, r1, #31
 800a83c:	bf44      	itt	mi
 800a83e:	f041 0120 	orrmi.w	r1, r1, #32
 800a842:	6021      	strmi	r1, [r4, #0]
 800a844:	b91b      	cbnz	r3, 800a84e <_printf_i+0x15e>
 800a846:	6822      	ldr	r2, [r4, #0]
 800a848:	f022 0220 	bic.w	r2, r2, #32
 800a84c:	6022      	str	r2, [r4, #0]
 800a84e:	2210      	movs	r2, #16
 800a850:	e7b7      	b.n	800a7c2 <_printf_i+0xd2>
 800a852:	064d      	lsls	r5, r1, #25
 800a854:	bf48      	it	mi
 800a856:	b29b      	uxthmi	r3, r3
 800a858:	e7ef      	b.n	800a83a <_printf_i+0x14a>
 800a85a:	4665      	mov	r5, ip
 800a85c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a860:	fb02 3311 	mls	r3, r2, r1, r3
 800a864:	5cc3      	ldrb	r3, [r0, r3]
 800a866:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a86a:	460b      	mov	r3, r1
 800a86c:	2900      	cmp	r1, #0
 800a86e:	d1f5      	bne.n	800a85c <_printf_i+0x16c>
 800a870:	e7b9      	b.n	800a7e6 <_printf_i+0xf6>
 800a872:	6813      	ldr	r3, [r2, #0]
 800a874:	6825      	ldr	r5, [r4, #0]
 800a876:	6961      	ldr	r1, [r4, #20]
 800a878:	1d18      	adds	r0, r3, #4
 800a87a:	6010      	str	r0, [r2, #0]
 800a87c:	0628      	lsls	r0, r5, #24
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	d501      	bpl.n	800a886 <_printf_i+0x196>
 800a882:	6019      	str	r1, [r3, #0]
 800a884:	e002      	b.n	800a88c <_printf_i+0x19c>
 800a886:	066a      	lsls	r2, r5, #25
 800a888:	d5fb      	bpl.n	800a882 <_printf_i+0x192>
 800a88a:	8019      	strh	r1, [r3, #0]
 800a88c:	2300      	movs	r3, #0
 800a88e:	6123      	str	r3, [r4, #16]
 800a890:	4665      	mov	r5, ip
 800a892:	e7b9      	b.n	800a808 <_printf_i+0x118>
 800a894:	6813      	ldr	r3, [r2, #0]
 800a896:	1d19      	adds	r1, r3, #4
 800a898:	6011      	str	r1, [r2, #0]
 800a89a:	681d      	ldr	r5, [r3, #0]
 800a89c:	6862      	ldr	r2, [r4, #4]
 800a89e:	2100      	movs	r1, #0
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	f7f5 fc9d 	bl	80001e0 <memchr>
 800a8a6:	b108      	cbz	r0, 800a8ac <_printf_i+0x1bc>
 800a8a8:	1b40      	subs	r0, r0, r5
 800a8aa:	6060      	str	r0, [r4, #4]
 800a8ac:	6863      	ldr	r3, [r4, #4]
 800a8ae:	6123      	str	r3, [r4, #16]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8b6:	e7a7      	b.n	800a808 <_printf_i+0x118>
 800a8b8:	6923      	ldr	r3, [r4, #16]
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	4639      	mov	r1, r7
 800a8be:	4630      	mov	r0, r6
 800a8c0:	47c0      	blx	r8
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	d0aa      	beq.n	800a81c <_printf_i+0x12c>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	079b      	lsls	r3, r3, #30
 800a8ca:	d413      	bmi.n	800a8f4 <_printf_i+0x204>
 800a8cc:	68e0      	ldr	r0, [r4, #12]
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	4298      	cmp	r0, r3
 800a8d2:	bfb8      	it	lt
 800a8d4:	4618      	movlt	r0, r3
 800a8d6:	e7a3      	b.n	800a820 <_printf_i+0x130>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	464a      	mov	r2, r9
 800a8dc:	4639      	mov	r1, r7
 800a8de:	4630      	mov	r0, r6
 800a8e0:	47c0      	blx	r8
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	d09a      	beq.n	800a81c <_printf_i+0x12c>
 800a8e6:	3501      	adds	r5, #1
 800a8e8:	68e3      	ldr	r3, [r4, #12]
 800a8ea:	9a03      	ldr	r2, [sp, #12]
 800a8ec:	1a9b      	subs	r3, r3, r2
 800a8ee:	42ab      	cmp	r3, r5
 800a8f0:	dcf2      	bgt.n	800a8d8 <_printf_i+0x1e8>
 800a8f2:	e7eb      	b.n	800a8cc <_printf_i+0x1dc>
 800a8f4:	2500      	movs	r5, #0
 800a8f6:	f104 0919 	add.w	r9, r4, #25
 800a8fa:	e7f5      	b.n	800a8e8 <_printf_i+0x1f8>
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1ac      	bne.n	800a85a <_printf_i+0x16a>
 800a900:	7803      	ldrb	r3, [r0, #0]
 800a902:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a906:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a90a:	e76c      	b.n	800a7e6 <_printf_i+0xf6>
 800a90c:	0800af85 	.word	0x0800af85
 800a910:	0800af96 	.word	0x0800af96

0800a914 <memmove>:
 800a914:	4288      	cmp	r0, r1
 800a916:	b510      	push	{r4, lr}
 800a918:	eb01 0302 	add.w	r3, r1, r2
 800a91c:	d807      	bhi.n	800a92e <memmove+0x1a>
 800a91e:	1e42      	subs	r2, r0, #1
 800a920:	4299      	cmp	r1, r3
 800a922:	d00a      	beq.n	800a93a <memmove+0x26>
 800a924:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a928:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a92c:	e7f8      	b.n	800a920 <memmove+0xc>
 800a92e:	4283      	cmp	r3, r0
 800a930:	d9f5      	bls.n	800a91e <memmove+0xa>
 800a932:	1881      	adds	r1, r0, r2
 800a934:	1ad2      	subs	r2, r2, r3
 800a936:	42d3      	cmn	r3, r2
 800a938:	d100      	bne.n	800a93c <memmove+0x28>
 800a93a:	bd10      	pop	{r4, pc}
 800a93c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a940:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a944:	e7f7      	b.n	800a936 <memmove+0x22>

0800a946 <_realloc_r>:
 800a946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a948:	4607      	mov	r7, r0
 800a94a:	4614      	mov	r4, r2
 800a94c:	460e      	mov	r6, r1
 800a94e:	b921      	cbnz	r1, 800a95a <_realloc_r+0x14>
 800a950:	4611      	mov	r1, r2
 800a952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a956:	f7ff bc77 	b.w	800a248 <_malloc_r>
 800a95a:	b922      	cbnz	r2, 800a966 <_realloc_r+0x20>
 800a95c:	f7ff fc26 	bl	800a1ac <_free_r>
 800a960:	4625      	mov	r5, r4
 800a962:	4628      	mov	r0, r5
 800a964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a966:	f000 f814 	bl	800a992 <_malloc_usable_size_r>
 800a96a:	42a0      	cmp	r0, r4
 800a96c:	d20f      	bcs.n	800a98e <_realloc_r+0x48>
 800a96e:	4621      	mov	r1, r4
 800a970:	4638      	mov	r0, r7
 800a972:	f7ff fc69 	bl	800a248 <_malloc_r>
 800a976:	4605      	mov	r5, r0
 800a978:	2800      	cmp	r0, #0
 800a97a:	d0f2      	beq.n	800a962 <_realloc_r+0x1c>
 800a97c:	4631      	mov	r1, r6
 800a97e:	4622      	mov	r2, r4
 800a980:	f7ff fc00 	bl	800a184 <memcpy>
 800a984:	4631      	mov	r1, r6
 800a986:	4638      	mov	r0, r7
 800a988:	f7ff fc10 	bl	800a1ac <_free_r>
 800a98c:	e7e9      	b.n	800a962 <_realloc_r+0x1c>
 800a98e:	4635      	mov	r5, r6
 800a990:	e7e7      	b.n	800a962 <_realloc_r+0x1c>

0800a992 <_malloc_usable_size_r>:
 800a992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a996:	1f18      	subs	r0, r3, #4
 800a998:	2b00      	cmp	r3, #0
 800a99a:	bfbc      	itt	lt
 800a99c:	580b      	ldrlt	r3, [r1, r0]
 800a99e:	18c0      	addlt	r0, r0, r3
 800a9a0:	4770      	bx	lr
	...

0800a9a4 <_init>:
 800a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a6:	bf00      	nop
 800a9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9aa:	bc08      	pop	{r3}
 800a9ac:	469e      	mov	lr, r3
 800a9ae:	4770      	bx	lr

0800a9b0 <_fini>:
 800a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b2:	bf00      	nop
 800a9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9b6:	bc08      	pop	{r3}
 800a9b8:	469e      	mov	lr, r3
 800a9ba:	4770      	bx	lr
