
SSL_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800bf30  0800bf30  0001bf30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c37c  0800c37c  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800c37c  0800c37c  0001c37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c384  0800c384  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c384  0800c384  0001c384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c38c  0800c38c  0001c38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800c390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e48  20000350  0800c6e0  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002198  0800c6e0  00022198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffa2  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ba  00000000  00000000  00040322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  000448e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  00045d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e06  00000000  00000000  00046f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196ab  00000000  00000000  0006dd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d25ca  00000000  00000000  00087419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001599e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006324  00000000  00000000  00159a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf18 	.word	0x0800bf18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800bf18 	.word	0x0800bf18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <_ZN16CommunicationUSBC1Ev>:
#include "main.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"
#include "CommunicationUSB.hpp"

CommunicationUSB::CommunicationUSB()
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
{

}
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <_ZN16CommunicationUSB25TransmitEncoderReadingRPMEm>:

void CommunicationUSB::TransmitEncoderReadingRPM(uint32_t reading){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	float readingRPM = (float)3600*(reading)/(float)32; //Explicar no comentário
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ecc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000f40 <_ZN16CommunicationUSB25TransmitEncoderReadingRPMEm+0x88>
 8000ed0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ed4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000f44 <_ZN16CommunicationUSB25TransmitEncoderReadingRPMEm+0x8c>
 8000ed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000edc:	edc7 7a07 	vstr	s15, [r7, #28]
	uint8_t package[14] = "Hello";
 8000ee0:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <_ZN16CommunicationUSB25TransmitEncoderReadingRPMEm+0x90>)
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eea:	6018      	str	r0, [r3, #0]
 8000eec:	3304      	adds	r3, #4
 8000eee:	8019      	strh	r1, [r3, #0]
 8000ef0:	f107 0312 	add.w	r3, r7, #18
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
	//sprintf((char*)package, "%f\n\r", readingRPM);
	while(CDC_Transmit_FS(package, 14)==USBD_BUSY);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	210e      	movs	r1, #14
 8000f00:	4618      	mov	r0, r3
 8000f02:	f007 fe9b 	bl	8008c3c <CDC_Transmit_FS>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d000      	beq.n	8000f18 <_ZN16CommunicationUSB25TransmitEncoderReadingRPMEm+0x60>
 8000f16:	e7f0      	b.n	8000efa <_ZN16CommunicationUSB25TransmitEncoderReadingRPMEm+0x42>
	readingRPM = (float)3600*(reading)/(float)32;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f22:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f40 <_ZN16CommunicationUSB25TransmitEncoderReadingRPMEm+0x88>
 8000f26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f2a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000f44 <_ZN16CommunicationUSB25TransmitEncoderReadingRPMEm+0x8c>
 8000f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f32:	edc7 7a07 	vstr	s15, [r7, #28]
}
 8000f36:	bf00      	nop
 8000f38:	3720      	adds	r7, #32
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	45610000 	.word	0x45610000
 8000f44:	42000000 	.word	0x42000000
 8000f48:	0800bf30 	.word	0x0800bf30

08000f4c <_ZN7EncoderC1Eh>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;
extern TIM_HandleTypeDef htim6;

Encoder::Encoder (uint8_t encoderId){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3350      	adds	r3, #80	; 0x50
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff9f 	bl	8000ea0 <_ZN16CommunicationUSBC1Ev>
	switch(encoderId)
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d82b      	bhi.n	8000fc0 <_ZN7EncoderC1Eh+0x74>
 8000f68:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <_ZN7EncoderC1Eh+0x24>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000f81 	.word	0x08000f81
 8000f74:	08000f91 	.word	0x08000f91
 8000f78:	08000fa1 	.word	0x08000fa1
 8000f7c:	08000fb1 	.word	0x08000fb1
	{
		case 0:
		{
			ENC = htim3;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <_ZN7EncoderC1Eh+0x98>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	4611      	mov	r1, r2
 8000f88:	2348      	movs	r3, #72	; 0x48
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f008 faea 	bl	8009564 <memcpy>
		}
		case 1:
		{
			ENC = htim2;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <_ZN7EncoderC1Eh+0x9c>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	4611      	mov	r1, r2
 8000f98:	2348      	movs	r3, #72	; 0x48
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f008 fae2 	bl	8009564 <memcpy>
		}
		case 2:
		{
			ENC = htim5;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_ZN7EncoderC1Eh+0xa0>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	2348      	movs	r3, #72	; 0x48
 8000faa:	461a      	mov	r2, r3
 8000fac:	f008 fada 	bl	8009564 <memcpy>
		}
		case 3:
		{
			ENC = htim4;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <_ZN7EncoderC1Eh+0xa4>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	2348      	movs	r3, #72	; 0x48
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f008 fad2 	bl	8009564 <memcpy>
		}
		default:
			break;
 8000fc0:	bf00      	nop
	}
	communicationUSB = CommunicationUSB();
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff6a 	bl	8000ea0 <_ZN16CommunicationUSBC1Ev>
	timCntVal = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	649a      	str	r2, [r3, #72]	; 0x48
	timCntPast = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000744 	.word	0x20000744
 8000fe8:	20000864 	.word	0x20000864
 8000fec:	200006fc 	.word	0x200006fc
 8000ff0:	200006b4 	.word	0x200006b4

08000ff4 <_ZN7Encoder11ReadEncoderEv>:

volatile uint32_t Encoder::ReadEncoder(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	timCntPast = timCntVal;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	64da      	str	r2, [r3, #76]	; 0x4c
	timCntVal = ENC.Instance->CNT;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	649a      	str	r2, [r3, #72]	; 0x48
	if (timCntVal >= timCntPast)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	429a      	cmp	r2, r3
 8001018:	bf2c      	ite	cs
 800101a:	2301      	movcs	r3, #1
 800101c:	2300      	movcc	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00b      	beq.n	800103c <_ZN7Encoder11ReadEncoderEv+0x48>
	{
		communicationUSB.TransmitEncoderReadingRPM(timCntVal - timCntPast);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff ff3f 	bl	8000eb8 <_ZN16CommunicationUSB25TransmitEncoderReadingRPMEm>
 800103a:	e00d      	b.n	8001058 <_ZN7Encoder11ReadEncoderEv+0x64>
		//return timCntVal - timCntPast;
	}
	else
	{
		communicationUSB.TransmitEncoderReadingRPM(timCntVal - (65535 - timCntPast));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	4413      	add	r3, r2
 800104c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001050:	3bff      	subs	r3, #255	; 0xff
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff ff30 	bl	8000eb8 <_ZN16CommunicationUSB25TransmitEncoderReadingRPMEm>
		//return timCntVal - (65535 - timCntPast);
	}
	return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <_ZN5MotorC1Eh>:
 *      Author: Moraes
 */

#include "Motor.hpp"

Motor::Motor (uint8_t motorId){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
	Pwm_Max = TIM8->ARR;
 8001070:	4b34      	ldr	r3, [pc, #208]	; (8001144 <_ZN5MotorC1Eh+0xe0>)
 8001072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
	switch(motorId){
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d859      	bhi.n	8001132 <_ZN5MotorC1Eh+0xce>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <_ZN5MotorC1Eh+0x20>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	08001095 	.word	0x08001095
 8001088:	080010bd 	.word	0x080010bd
 800108c:	080010e3 	.word	0x080010e3
 8001090:	08001109 	.word	0x08001109
		case 0:
		{
			MAL_GPIO_Port = M0_MAL_GPIO_Port;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a2c      	ldr	r2, [pc, #176]	; (8001148 <_ZN5MotorC1Eh+0xe4>)
 8001098:	601a      	str	r2, [r3, #0]
			MBL_GPIO_Port = M0_MBL_GPIO_Port;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a2b      	ldr	r2, [pc, #172]	; (800114c <_ZN5MotorC1Eh+0xe8>)
 800109e:	605a      	str	r2, [r3, #4]
			MAL_Pin = M0_MAL_Pin;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	811a      	strh	r2, [r3, #8]
			MBL_Pin = M0_MBL_Pin;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ac:	815a      	strh	r2, [r3, #10]
			MAH_Pwm = &(TIM8->CCR4);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a27      	ldr	r2, [pc, #156]	; (8001150 <_ZN5MotorC1Eh+0xec>)
 80010b2:	60da      	str	r2, [r3, #12]
			MBH_Pwm = &(TIM8->CCR2);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a27      	ldr	r2, [pc, #156]	; (8001154 <_ZN5MotorC1Eh+0xf0>)
 80010b8:	611a      	str	r2, [r3, #16]
			break;
 80010ba:	e03b      	b.n	8001134 <_ZN5MotorC1Eh+0xd0>
		}
		case 1:
		{
			MAL_GPIO_Port = M1_MAL_GPIO_Port;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a26      	ldr	r2, [pc, #152]	; (8001158 <_ZN5MotorC1Eh+0xf4>)
 80010c0:	601a      	str	r2, [r3, #0]
			MBL_GPIO_Port = M1_MBL_GPIO_Port;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a24      	ldr	r2, [pc, #144]	; (8001158 <_ZN5MotorC1Eh+0xf4>)
 80010c6:	605a      	str	r2, [r3, #4]
			MAL_Pin = M1_MAL_Pin;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2240      	movs	r2, #64	; 0x40
 80010cc:	811a      	strh	r2, [r3, #8]
			MBL_Pin = M1_MBL_Pin;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2210      	movs	r2, #16
 80010d2:	815a      	strh	r2, [r3, #10]
			MAH_Pwm = &(TIM1->CCR1);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a21      	ldr	r2, [pc, #132]	; (800115c <_ZN5MotorC1Eh+0xf8>)
 80010d8:	60da      	str	r2, [r3, #12]
			MBH_Pwm = &(TIM8->CCR3);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a20      	ldr	r2, [pc, #128]	; (8001160 <_ZN5MotorC1Eh+0xfc>)
 80010de:	611a      	str	r2, [r3, #16]
			break;
 80010e0:	e028      	b.n	8001134 <_ZN5MotorC1Eh+0xd0>
		}

		case 2:
		{
			MAL_GPIO_Port = M2_MAL_GPIO_Port;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <_ZN5MotorC1Eh+0xe8>)
 80010e6:	601a      	str	r2, [r3, #0]
			MBL_GPIO_Port = M2_MBL_GPIO_Port;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <_ZN5MotorC1Eh+0x100>)
 80010ec:	605a      	str	r2, [r3, #4]
			MAL_Pin = M2_MAL_Pin;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2204      	movs	r2, #4
 80010f2:	811a      	strh	r2, [r3, #8]
			MBL_Pin = M2_MBL_Pin;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2202      	movs	r2, #2
 80010f8:	815a      	strh	r2, [r3, #10]
			MAH_Pwm = &(TIM8->CCR1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <_ZN5MotorC1Eh+0x104>)
 80010fe:	60da      	str	r2, [r3, #12]
			MBH_Pwm = &(TIM1->CCR2);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a1a      	ldr	r2, [pc, #104]	; (800116c <_ZN5MotorC1Eh+0x108>)
 8001104:	611a      	str	r2, [r3, #16]
			break;
 8001106:	e015      	b.n	8001134 <_ZN5MotorC1Eh+0xd0>
		}
		case 3:
		{
			MAL_GPIO_Port = M3_MAL_GPIO_Port;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a16      	ldr	r2, [pc, #88]	; (8001164 <_ZN5MotorC1Eh+0x100>)
 800110c:	601a      	str	r2, [r3, #0]
			MBL_GPIO_Port = M3_MBL_GPIO_Port;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <_ZN5MotorC1Eh+0x100>)
 8001112:	605a      	str	r2, [r3, #4]
			MAL_Pin = M3_MAL_Pin;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111a:	811a      	strh	r2, [r3, #8]
			MBL_Pin = M3_MBL_Pin;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001122:	815a      	strh	r2, [r3, #10]
			MAH_Pwm = &(TIM1->CCR4);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <_ZN5MotorC1Eh+0x10c>)
 8001128:	60da      	str	r2, [r3, #12]
			MBH_Pwm = &(TIM1->CCR3);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a11      	ldr	r2, [pc, #68]	; (8001174 <_ZN5MotorC1Eh+0x110>)
 800112e:	611a      	str	r2, [r3, #16]
			break;
 8001130:	e000      	b.n	8001134 <_ZN5MotorC1Eh+0xd0>
		}
		default:
			break;
 8001132:	bf00      	nop
	}
}
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40010400 	.word	0x40010400
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40020800 	.word	0x40020800
 8001150:	40010440 	.word	0x40010440
 8001154:	40010438 	.word	0x40010438
 8001158:	40021000 	.word	0x40021000
 800115c:	40010034 	.word	0x40010034
 8001160:	4001043c 	.word	0x4001043c
 8001164:	40020400 	.word	0x40020400
 8001168:	40010434 	.word	0x40010434
 800116c:	40010038 	.word	0x40010038
 8001170:	40010040 	.word	0x40010040
 8001174:	4001003c 	.word	0x4001003c

08001178 <_ZN5Motor8SetSpeedEl>:




void Motor::SetSpeed(int32_t spd){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	if(spd>0){
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dd1c      	ble.n	80011c2 <_ZN5Motor8SetSpeedEl+0x4a>
		*MAH_Pwm = Pwm_Max - spd; //MAH
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6999      	ldr	r1, [r3, #24]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	1a8a      	subs	r2, r1, r2
 8001194:	601a      	str	r2, [r3, #0]
		*MBH_Pwm = Pwm_Max; //MBH
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6992      	ldr	r2, [r2, #24]
 800119e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(MAL_GPIO_Port, MAL_Pin, GPIO_PinState(RESET));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	891b      	ldrh	r3, [r3, #8]
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	f001 fda6 	bl	8002cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MBL_GPIO_Port, MBL_Pin, GPIO_PinState(SET));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6858      	ldr	r0, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	895b      	ldrh	r3, [r3, #10]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	f001 fd9e 	bl	8002cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MAL_GPIO_Port, MAL_Pin, GPIO_PinState(SET));
		HAL_GPIO_WritePin(MBL_GPIO_Port, MBL_Pin, GPIO_PinState(SET));
	}


}
 80011c0:	e039      	b.n	8001236 <_ZN5Motor8SetSpeedEl+0xbe>
	}else if(spd<0){
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	da1c      	bge.n	8001202 <_ZN5Motor8SetSpeedEl+0x8a>
		*MAH_Pwm = Pwm_Max; //MAH
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6992      	ldr	r2, [r2, #24]
 80011d0:	601a      	str	r2, [r3, #0]
		*MBH_Pwm = Pwm_Max + spd; //MBH
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6999      	ldr	r1, [r3, #24]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	440a      	add	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(MAL_GPIO_Port, MAL_Pin, GPIO_PinState(SET));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	891b      	ldrh	r3, [r3, #8]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4619      	mov	r1, r3
 80011ec:	f001 fd86 	bl	8002cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MBL_GPIO_Port, MBL_Pin, GPIO_PinState(RESET));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6858      	ldr	r0, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	895b      	ldrh	r3, [r3, #10]
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	f001 fd7e 	bl	8002cfc <HAL_GPIO_WritePin>
}
 8001200:	e019      	b.n	8001236 <_ZN5Motor8SetSpeedEl+0xbe>
		*MAH_Pwm = Pwm_Max; //MAH
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6992      	ldr	r2, [r2, #24]
 800120a:	601a      	str	r2, [r3, #0]
		*MBH_Pwm = Pwm_Max; //MBH
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6992      	ldr	r2, [r2, #24]
 8001214:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(MAL_GPIO_Port, MAL_Pin, GPIO_PinState(SET));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	891b      	ldrh	r3, [r3, #8]
 800121e:	2201      	movs	r2, #1
 8001220:	4619      	mov	r1, r3
 8001222:	f001 fd6b 	bl	8002cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MBL_GPIO_Port, MBL_Pin, GPIO_PinState(SET));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6858      	ldr	r0, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	895b      	ldrh	r3, [r3, #10]
 800122e:	2201      	movs	r2, #1
 8001230:	4619      	mov	r1, r3
 8001232:	f001 fd63 	bl	8002cfc <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <_ZN5Motor10SetDribbleEl>:

void Motor::SetDribble(int32_t spd){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	//*DAH_Pwm = Pwm_Max - spd; //O drible só tem um pino
	TIM9->CCR1 = Pwm_Max - spd;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	4904      	ldr	r1, [pc, #16]	; (8001264 <_ZN5Motor10SetDribbleEl+0x24>)
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	634b      	str	r3, [r1, #52]	; 0x34
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40014000 	.word	0x40014000

08001268 <_ZN15sendUSBStruct_tC1Ev>:
	uint32_t sevSeg;
	uint32_t kickPow_s;
	uint32_t kickPow[2];
}*recvUSBStruct;

struct sendUSBStruct_t{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2204      	movs	r2, #4
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3304      	adds	r3, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <HAL_TIM_PeriodElapsedCallback>:
}usbStruct;

Encoder encoder(0);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	int i=0;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
	if(htim == &htim6){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d102      	bne.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x1a>
		//Encoder encoder(0);
		encoder.ReadEncoder();
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012aa:	f7ff fea3 	bl	8000ff4 <_ZN7Encoder11ReadEncoderEv>
	}
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000078c 	.word	0x2000078c
 80012bc:	20000390 	.word	0x20000390

080012c0 <Start>:


void Start(){
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b09f      	sub	sp, #124	; 0x7c
 80012c4:	af00      	add	r7, sp, #0
	Motor motor[4] = {Motor(0), Motor(1), Motor(2), Motor(3)};
 80012c6:	1d3c      	adds	r4, r7, #4
 80012c8:	2100      	movs	r1, #0
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff feca 	bl	8001064 <_ZN5MotorC1Eh>
 80012d0:	341c      	adds	r4, #28
 80012d2:	2101      	movs	r1, #1
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff fec5 	bl	8001064 <_ZN5MotorC1Eh>
 80012da:	341c      	adds	r4, #28
 80012dc:	2102      	movs	r1, #2
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff fec0 	bl	8001064 <_ZN5MotorC1Eh>
 80012e4:	f104 031c 	add.w	r3, r4, #28
 80012e8:	2103      	movs	r1, #3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff feba 	bl	8001064 <_ZN5MotorC1Eh>
	while(1){
		usbStruct.val1 = 100;
 80012f0:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <Start+0x118>)
 80012f2:	2264      	movs	r2, #100	; 0x64
 80012f4:	601a      	str	r2, [r3, #0]
		usbStruct.val2 = 101;
 80012f6:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <Start+0x118>)
 80012f8:	2265      	movs	r2, #101	; 0x65
 80012fa:	605a      	str	r2, [r3, #4]
		motor[0].SetDribble(recvUSBStruct->dribbleSpd);
 80012fc:	4b37      	ldr	r3, [pc, #220]	; (80013dc <Start+0x11c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff9a 	bl	8001240 <_ZN5Motor10SetDribbleEl>
		for(int i=0;i<4;i++){
 800130c:	2300      	movs	r3, #0
 800130e:	677b      	str	r3, [r7, #116]	; 0x74
 8001310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001312:	2b03      	cmp	r3, #3
 8001314:	dc13      	bgt.n	800133e <Start+0x7e>
			motor[i].SetSpeed(recvUSBStruct->motorSpd[i]);
 8001316:	1d39      	adds	r1, r7, #4
 8001318:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800131a:	4613      	mov	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	18c8      	adds	r0, r1, r3
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <Start+0x11c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff ff21 	bl	8001178 <_ZN5Motor8SetSpeedEl>
		for(int i=0;i<4;i++){
 8001336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001338:	3301      	adds	r3, #1
 800133a:	677b      	str	r3, [r7, #116]	; 0x74
 800133c:	e7e8      	b.n	8001310 <Start+0x50>
		}
		sendUSBStruct.button = HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin);
 800133e:	2104      	movs	r1, #4
 8001340:	4827      	ldr	r0, [pc, #156]	; (80013e0 <Start+0x120>)
 8001342:	f001 fcc3 	bl	8002ccc <HAL_GPIO_ReadPin>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <Start+0x124>)
 800134c:	615a      	str	r2, [r3, #20]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PinState(recvUSBStruct->led & 1));
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <Start+0x11c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001362:	4821      	ldr	r0, [pc, #132]	; (80013e8 <Start+0x128>)
 8001364:	f001 fcca 	bl	8002cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PinState(recvUSBStruct->led & 2));
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <Start+0x11c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	b2db      	uxtb	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137c:	481a      	ldr	r0, [pc, #104]	; (80013e8 <Start+0x128>)
 800137e:	f001 fcbd 	bl	8002cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PinState(recvUSBStruct->led & 4));
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <Start+0x11c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001396:	4814      	ldr	r0, [pc, #80]	; (80013e8 <Start+0x128>)
 8001398:	f001 fcb0 	bl	8002cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PinState(recvUSBStruct->led & 8));
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <Start+0x11c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <Start+0x128>)
 80013b2:	f001 fca3 	bl	8002cfc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f001 f9b6 	bl	8002728 <HAL_Delay>
		while(CDC_Transmit_FS((uint8_t*)&sendUSBStruct, 24) == USBD_BUSY);
 80013bc:	2118      	movs	r1, #24
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <Start+0x124>)
 80013c0:	f007 fc3c 	bl	8008c3c <CDC_Transmit_FS>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	bf0c      	ite	eq
 80013ca:	2301      	moveq	r3, #1
 80013cc:	2300      	movne	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d08d      	beq.n	80012f0 <Start+0x30>
 80013d4:	e7f2      	b.n	80013bc <Start+0xfc>
 80013d6:	bf00      	nop
 80013d8:	20000388 	.word	0x20000388
 80013dc:	2000036c 	.word	0x2000036c
 80013e0:	40021000 	.word	0x40021000
 80013e4:	20000370 	.word	0x20000370
 80013e8:	40020c00 	.word	0x40020c00

080013ec <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10b      	bne.n	8001414 <_Z41__static_initialization_and_destruction_0ii+0x28>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001402:	4293      	cmp	r3, r2
 8001404:	d106      	bne.n	8001414 <_Z41__static_initialization_and_destruction_0ii+0x28>
}sendUSBStruct;
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001408:	f7ff ff2e 	bl	8001268 <_ZN15sendUSBStruct_tC1Ev>
Encoder encoder(0);
 800140c:	2100      	movs	r1, #0
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001410:	f7ff fd9c 	bl	8000f4c <_ZN7EncoderC1Eh>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000370 	.word	0x20000370
 8001420:	20000390 	.word	0x20000390

08001424 <_GLOBAL__sub_I_recvUSBStruct>:
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
 8001428:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800142c:	2001      	movs	r0, #1
 800142e:	f7ff ffdd 	bl	80013ec <_Z41__static_initialization_and_destruction_0ii>
 8001432:	bd80      	pop	{r7, pc}

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001438:	f001 f904 	bl	8002644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143c:	f000 f86e 	bl	800151c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001440:	f000 fc28 	bl	8001c94 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001444:	f000 f90a 	bl	800165c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001448:	f007 fb36 	bl	8008ab8 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 800144c:	f000 f8d0 	bl	80015f0 <MX_SPI2_Init>
  MX_TIM8_Init();
 8001450:	f000 fb32 	bl	8001ab8 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001454:	f000 fbd8 	bl	8001c08 <MX_TIM9_Init>
  MX_TIM2_Init();
 8001458:	f000 f9a8 	bl	80017ac <MX_TIM2_Init>
  MX_TIM3_Init();
 800145c:	f000 f9fa 	bl	8001854 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001460:	f000 fa4c 	bl	80018fc <MX_TIM4_Init>
  MX_TIM5_Init();
 8001464:	f000 fa9e 	bl	80019a4 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001468:	f000 faf0 	bl	8001a4c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800146c:	4823      	ldr	r0, [pc, #140]	; (80014fc <main+0xc8>)
 800146e:	f003 fb05 	bl	8004a7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 8001472:	2100      	movs	r1, #0
 8001474:	4821      	ldr	r0, [pc, #132]	; (80014fc <main+0xc8>)
 8001476:	f003 fbc1 	bl	8004bfc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 800147a:	2104      	movs	r1, #4
 800147c:	481f      	ldr	r0, [pc, #124]	; (80014fc <main+0xc8>)
 800147e:	f003 fbbd 	bl	8004bfc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 8001482:	2108      	movs	r1, #8
 8001484:	481d      	ldr	r0, [pc, #116]	; (80014fc <main+0xc8>)
 8001486:	f003 fbb9 	bl	8004bfc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 800148a:	210c      	movs	r1, #12
 800148c:	481b      	ldr	r0, [pc, #108]	; (80014fc <main+0xc8>)
 800148e:	f003 fbb5 	bl	8004bfc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001492:	213c      	movs	r1, #60	; 0x3c
 8001494:	481a      	ldr	r0, [pc, #104]	; (8001500 <main+0xcc>)
 8001496:	f003 fd65 	bl	8004f64 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800149a:	213c      	movs	r1, #60	; 0x3c
 800149c:	4819      	ldr	r0, [pc, #100]	; (8001504 <main+0xd0>)
 800149e:	f003 fd61 	bl	8004f64 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80014a2:	213c      	movs	r1, #60	; 0x3c
 80014a4:	4818      	ldr	r0, [pc, #96]	; (8001508 <main+0xd4>)
 80014a6:	f003 fd5d 	bl	8004f64 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80014aa:	213c      	movs	r1, #60	; 0x3c
 80014ac:	4817      	ldr	r0, [pc, #92]	; (800150c <main+0xd8>)
 80014ae:	f003 fd59 	bl	8004f64 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80014b2:	4817      	ldr	r0, [pc, #92]	; (8001510 <main+0xdc>)
 80014b4:	f003 fae2 	bl	8004a7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80014b8:	4816      	ldr	r0, [pc, #88]	; (8001514 <main+0xe0>)
 80014ba:	f003 fadf 	bl	8004a7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_1);
 80014be:	2100      	movs	r1, #0
 80014c0:	4814      	ldr	r0, [pc, #80]	; (8001514 <main+0xe0>)
 80014c2:	f003 fb9b 	bl	8004bfc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_2);
 80014c6:	2104      	movs	r1, #4
 80014c8:	4812      	ldr	r0, [pc, #72]	; (8001514 <main+0xe0>)
 80014ca:	f003 fb97 	bl	8004bfc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_3);
 80014ce:	2108      	movs	r1, #8
 80014d0:	4810      	ldr	r0, [pc, #64]	; (8001514 <main+0xe0>)
 80014d2:	f003 fb93 	bl	8004bfc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_4);
 80014d6:	210c      	movs	r1, #12
 80014d8:	480e      	ldr	r0, [pc, #56]	; (8001514 <main+0xe0>)
 80014da:	f003 fb8f 	bl	8004bfc <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 80014de:	480e      	ldr	r0, [pc, #56]	; (8001518 <main+0xe4>)
 80014e0:	f003 facc 	bl	8004a7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim9,TIM_CHANNEL_1);
 80014e4:	2100      	movs	r1, #0
 80014e6:	480c      	ldr	r0, [pc, #48]	; (8001518 <main+0xe4>)
 80014e8:	f003 fb88 	bl	8004bfc <HAL_TIM_PWM_Start_IT>
  TIM1->CCR4 = 65535;
  TIM8->CCR1 = 65535;
  TIM8->CCR2 = 65535;
  TIM8->CCR3 = 65535;
  TIM8->CCR4 = 65535;*/
  HAL_Delay(1000);
 80014ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f0:	f001 f91a 	bl	8002728 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Start();
 80014f4:	f7ff fee4 	bl	80012c0 <Start>
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <main+0xc4>
 80014fa:	bf00      	nop
 80014fc:	200007d4 	.word	0x200007d4
 8001500:	20000864 	.word	0x20000864
 8001504:	20000744 	.word	0x20000744
 8001508:	200006b4 	.word	0x200006b4
 800150c:	200006fc 	.word	0x200006fc
 8001510:	2000078c 	.word	0x2000078c
 8001514:	2000066c 	.word	0x2000066c
 8001518:	2000081c 	.word	0x2000081c

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b094      	sub	sp, #80	; 0x50
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	2230      	movs	r2, #48	; 0x30
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f008 f828 	bl	8009580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <SystemClock_Config+0xcc>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <SystemClock_Config+0xcc>)
 800154a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154e:	6413      	str	r3, [r2, #64]	; 0x40
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <SystemClock_Config+0xcc>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <SystemClock_Config+0xd0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a21      	ldr	r2, [pc, #132]	; (80015ec <SystemClock_Config+0xd0>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <SystemClock_Config+0xd0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001578:	2301      	movs	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800157c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001582:	2302      	movs	r3, #2
 8001584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800158c:	2308      	movs	r3, #8
 800158e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001590:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001596:	2302      	movs	r3, #2
 8001598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800159a:	2307      	movs	r3, #7
 800159c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fd46 	bl	8004034 <HAL_RCC_OscConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015ae:	f000 fc67 	bl	8001e80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b2:	230f      	movs	r3, #15
 80015b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b6:	2302      	movs	r3, #2
 80015b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2105      	movs	r1, #5
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 ffa7 	bl	8004524 <HAL_RCC_ClockConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015dc:	f000 fc50 	bl	8001e80 <Error_Handler>
  }
}
 80015e0:	bf00      	nop
 80015e2:	3750      	adds	r7, #80	; 0x50
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40007000 	.word	0x40007000

080015f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_SPI2_Init+0x64>)
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <MX_SPI2_Init+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_SPI2_Init+0x64>)
 80015fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001600:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_SPI2_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_SPI2_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_SPI2_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_SPI2_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_SPI2_Init+0x64>)
 800161c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001620:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_SPI2_Init+0x64>)
 8001624:	2220      	movs	r2, #32
 8001626:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_SPI2_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_SPI2_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MX_SPI2_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_SPI2_Init+0x64>)
 800163c:	220a      	movs	r2, #10
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_SPI2_Init+0x64>)
 8001642:	f003 f943 	bl	80048cc <HAL_SPI_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800164c:	f000 fc18 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000614 	.word	0x20000614
 8001658:	40003800 	.word	0x40003800

0800165c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b092      	sub	sp, #72	; 0x48
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001662:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	615a      	str	r2, [r3, #20]
 800167e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2220      	movs	r2, #32
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f007 ff7a 	bl	8009580 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800168c:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <MX_TIM1_Init+0x148>)
 800168e:	4a46      	ldr	r2, [pc, #280]	; (80017a8 <MX_TIM1_Init+0x14c>)
 8001690:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <MX_TIM1_Init+0x148>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <MX_TIM1_Init+0x148>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <MX_TIM1_Init+0x148>)
 80016a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <MX_TIM1_Init+0x148>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ac:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <MX_TIM1_Init+0x148>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b2:	4b3c      	ldr	r3, [pc, #240]	; (80017a4 <MX_TIM1_Init+0x148>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016b8:	483a      	ldr	r0, [pc, #232]	; (80017a4 <MX_TIM1_Init+0x148>)
 80016ba:	f003 fa4f 	bl	8004b5c <HAL_TIM_PWM_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80016c4:	f000 fbdc 	bl	8001e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d4:	4619      	mov	r1, r3
 80016d6:	4833      	ldr	r0, [pc, #204]	; (80017a4 <MX_TIM1_Init+0x148>)
 80016d8:	f004 f956 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80016e2:	f000 fbcd 	bl	8001e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	; 0x60
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f2:	2300      	movs	r3, #0
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001706:	2200      	movs	r2, #0
 8001708:	4619      	mov	r1, r3
 800170a:	4826      	ldr	r0, [pc, #152]	; (80017a4 <MX_TIM1_Init+0x148>)
 800170c:	f003 fde0 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001716:	f000 fbb3 	bl	8001e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171e:	2204      	movs	r2, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4820      	ldr	r0, [pc, #128]	; (80017a4 <MX_TIM1_Init+0x148>)
 8001724:	f003 fdd4 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800172e:	f000 fba7 	bl	8001e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001736:	2208      	movs	r2, #8
 8001738:	4619      	mov	r1, r3
 800173a:	481a      	ldr	r0, [pc, #104]	; (80017a4 <MX_TIM1_Init+0x148>)
 800173c:	f003 fdc8 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001746:	f000 fb9b 	bl	8001e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	220c      	movs	r2, #12
 8001750:	4619      	mov	r1, r3
 8001752:	4814      	ldr	r0, [pc, #80]	; (80017a4 <MX_TIM1_Init+0x148>)
 8001754:	f003 fdbc 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800175e:	f000 fb8f 	bl	8001e80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4807      	ldr	r0, [pc, #28]	; (80017a4 <MX_TIM1_Init+0x148>)
 8001786:	f004 f97b 	bl	8005a80 <HAL_TIMEx_ConfigBreakDeadTime>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001790:	f000 fb76 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001794:	4803      	ldr	r0, [pc, #12]	; (80017a4 <MX_TIM1_Init+0x148>)
 8001796:	f000 fd63 	bl	8002260 <HAL_TIM_MspPostInit>

}
 800179a:	bf00      	nop
 800179c:	3748      	adds	r7, #72	; 0x48
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200007d4 	.word	0x200007d4
 80017a8:	40010000 	.word	0x40010000

080017ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	; 0x30
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	2224      	movs	r2, #36	; 0x24
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f007 fee0 	bl	8009580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <MX_TIM2_Init+0xa4>)
 80017ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <MX_TIM2_Init+0xa4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MX_TIM2_Init+0xa4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <MX_TIM2_Init+0xa4>)
 80017de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_TIM2_Init+0xa4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <MX_TIM2_Init+0xa4>)
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017f0:	2303      	movs	r3, #3
 80017f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017f8:	2301      	movs	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001808:	2301      	movs	r3, #1
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4619      	mov	r1, r3
 800181a:	480d      	ldr	r0, [pc, #52]	; (8001850 <MX_TIM2_Init+0xa4>)
 800181c:	f003 fafc 	bl	8004e18 <HAL_TIM_Encoder_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001826:	f000 fb2b 	bl	8001e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <MX_TIM2_Init+0xa4>)
 8001838:	f004 f8a6 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001842:	f000 fb1d 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	; 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000864 	.word	0x20000864

08001854 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	2224      	movs	r2, #36	; 0x24
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f007 fe8c 	bl	8009580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <MX_TIM3_Init+0xa0>)
 8001872:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <MX_TIM3_Init+0xa4>)
 8001874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <MX_TIM3_Init+0xa0>)
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_TIM3_Init+0xa0>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_TIM3_Init+0xa0>)
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_TIM3_Init+0xa0>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_TIM3_Init+0xa0>)
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001896:	2303      	movs	r3, #3
 8001898:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800189e:	2301      	movs	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ae:	2301      	movs	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	4619      	mov	r1, r3
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <MX_TIM3_Init+0xa0>)
 80018c2:	f003 faa9 	bl	8004e18 <HAL_TIM_Encoder_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80018cc:	f000 fad8 	bl	8001e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_TIM3_Init+0xa0>)
 80018de:	f004 f853 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018e8:	f000 faca 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3730      	adds	r7, #48	; 0x30
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000744 	.word	0x20000744
 80018f8:	40000400 	.word	0x40000400

080018fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2224      	movs	r2, #36	; 0x24
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f007 fe38 	bl	8009580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <MX_TIM4_Init+0xa0>)
 800191a:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <MX_TIM4_Init+0xa4>)
 800191c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <MX_TIM4_Init+0xa0>)
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <MX_TIM4_Init+0xa0>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <MX_TIM4_Init+0xa0>)
 800192c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001930:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <MX_TIM4_Init+0xa0>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <MX_TIM4_Init+0xa0>)
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800193e:	2303      	movs	r3, #3
 8001940:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001956:	2301      	movs	r3, #1
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	4619      	mov	r1, r3
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <MX_TIM4_Init+0xa0>)
 800196a:	f003 fa55 	bl	8004e18 <HAL_TIM_Encoder_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001974:	f000 fa84 	bl	8001e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_TIM4_Init+0xa0>)
 8001986:	f003 ffff 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001990:	f000 fa76 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	3730      	adds	r7, #48	; 0x30
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200006b4 	.word	0x200006b4
 80019a0:	40000800 	.word	0x40000800

080019a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	2224      	movs	r2, #36	; 0x24
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f007 fde4 	bl	8009580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <MX_TIM5_Init+0xa0>)
 80019c2:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <MX_TIM5_Init+0xa4>)
 80019c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <MX_TIM5_Init+0xa0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <MX_TIM5_Init+0xa0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_TIM5_Init+0xa0>)
 80019d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_TIM5_Init+0xa0>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_TIM5_Init+0xa0>)
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019e6:	2303      	movs	r3, #3
 80019e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019ee:	2301      	movs	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019fe:	2301      	movs	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <MX_TIM5_Init+0xa0>)
 8001a12:	f003 fa01 	bl	8004e18 <HAL_TIM_Encoder_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001a1c:	f000 fa30 	bl	8001e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_TIM5_Init+0xa0>)
 8001a2e:	f003 ffab 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001a38:	f000 fa22 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	3730      	adds	r7, #48	; 0x30
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200006fc 	.word	0x200006fc
 8001a48:	40000c00 	.word	0x40000c00

08001a4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a5c:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <MX_TIM6_Init+0x68>)
 8001a5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2799;
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a62:	f640 22ef 	movw	r2, #2799	; 0xaef
 8001a66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a74:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a78:	2280      	movs	r2, #128	; 0x80
 8001a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a7e:	f002 ffae 	bl	80049de <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a88:	f000 f9fa 	bl	8001e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a9a:	f003 ff75 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001aa4:	f000 f9ec 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000078c 	.word	0x2000078c
 8001ab4:	40001000 	.word	0x40001000

08001ab8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b092      	sub	sp, #72	; 0x48
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	615a      	str	r2, [r3, #20]
 8001ada:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2220      	movs	r2, #32
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f007 fd4c 	bl	8009580 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ae8:	4b45      	ldr	r3, [pc, #276]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001aea:	4a46      	ldr	r2, [pc, #280]	; (8001c04 <MX_TIM8_Init+0x14c>)
 8001aec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001aee:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b00:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b02:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b08:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b3c      	ldr	r3, [pc, #240]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b14:	483a      	ldr	r0, [pc, #232]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001b16:	f003 f821 	bl	8004b5c <HAL_TIM_PWM_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001b20:	f000 f9ae 	bl	8001e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b30:	4619      	mov	r1, r3
 8001b32:	4833      	ldr	r0, [pc, #204]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001b34:	f003 ff28 	bl	8005988 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001b3e:	f000 f99f 	bl	8001e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b42:	2360      	movs	r3, #96	; 0x60
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	2200      	movs	r2, #0
 8001b64:	4619      	mov	r1, r3
 8001b66:	4826      	ldr	r0, [pc, #152]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001b68:	f003 fbb2 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001b72:	f000 f985 	bl	8001e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4820      	ldr	r0, [pc, #128]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001b80:	f003 fba6 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001b8a:	f000 f979 	bl	8001e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b92:	2208      	movs	r2, #8
 8001b94:	4619      	mov	r1, r3
 8001b96:	481a      	ldr	r0, [pc, #104]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001b98:	f003 fb9a 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8001ba2:	f000 f96d 	bl	8001e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	220c      	movs	r2, #12
 8001bac:	4619      	mov	r1, r3
 8001bae:	4814      	ldr	r0, [pc, #80]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001bb0:	f003 fb8e 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8001bba:	f000 f961 	bl	8001e80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001be2:	f003 ff4d 	bl	8005a80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8001bec:	f000 f948 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM8_Init+0x148>)
 8001bf2:	f000 fb35 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001bf6:	bf00      	nop
 8001bf8:	3748      	adds	r7, #72	; 0x48
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000066c 	.word	0x2000066c
 8001c04:	40010400 	.word	0x40010400

08001c08 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <MX_TIM9_Init+0x84>)
 8001c22:	4a1b      	ldr	r2, [pc, #108]	; (8001c90 <MX_TIM9_Init+0x88>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <MX_TIM9_Init+0x84>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <MX_TIM9_Init+0x84>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <MX_TIM9_Init+0x84>)
 8001c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c38:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_TIM9_Init+0x84>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_TIM9_Init+0x84>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001c46:	4811      	ldr	r0, [pc, #68]	; (8001c8c <MX_TIM9_Init+0x84>)
 8001c48:	f002 ff88 	bl	8004b5c <HAL_TIM_PWM_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001c52:	f000 f915 	bl	8001e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c56:	2360      	movs	r3, #96	; 0x60
 8001c58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 65535;
 8001c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4807      	ldr	r0, [pc, #28]	; (8001c8c <MX_TIM9_Init+0x84>)
 8001c70:	f003 fb2e 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8001c7a:	f000 f901 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001c7e:	4803      	ldr	r0, [pc, #12]	; (8001c8c <MX_TIM9_Init+0x84>)
 8001c80:	f000 faee 	bl	8002260 <HAL_TIM_MspPostInit>

}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000081c 	.word	0x2000081c
 8001c90:	40014000 	.word	0x40014000

08001c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	4b6e      	ldr	r3, [pc, #440]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a6d      	ldr	r2, [pc, #436]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a66      	ldr	r2, [pc, #408]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b64      	ldr	r3, [pc, #400]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b60      	ldr	r3, [pc, #384]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a5f      	ldr	r2, [pc, #380]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b5d      	ldr	r3, [pc, #372]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b56      	ldr	r3, [pc, #344]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b52      	ldr	r3, [pc, #328]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a51      	ldr	r2, [pc, #324]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a4a      	ldr	r2, [pc, #296]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b48      	ldr	r3, [pc, #288]	; (8001e68 <MX_GPIO_Init+0x1d4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|M1_MBL_Pin|M1_MAL_Pin, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2158      	movs	r1, #88	; 0x58
 8001d56:	4845      	ldr	r0, [pc, #276]	; (8001e6c <MX_GPIO_Init+0x1d8>)
 8001d58:	f000 ffd0 	bl	8002cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M0_MBL_Pin|M2_MAL_Pin, GPIO_PIN_RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f242 0104 	movw	r1, #8196	; 0x2004
 8001d62:	4843      	ldr	r0, [pc, #268]	; (8001e70 <MX_GPIO_Init+0x1dc>)
 8001d64:	f000 ffca 	bl	8002cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	4840      	ldr	r0, [pc, #256]	; (8001e70 <MX_GPIO_Init+0x1dc>)
 8001d6e:	f000 ffc5 	bl	8002cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f641 0102 	movw	r1, #6146	; 0x1802
 8001d78:	483e      	ldr	r0, [pc, #248]	; (8001e74 <MX_GPIO_Init+0x1e0>)
 8001d7a:	f000 ffbf 	bl	8002cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f24f 0190 	movw	r1, #61584	; 0xf090
 8001d84:	483c      	ldr	r0, [pc, #240]	; (8001e78 <MX_GPIO_Init+0x1e4>)
 8001d86:	f000 ffb9 	bl	8002cfc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|M0_MAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Btn_Pin */
  GPIO_InitStruct.Pin = Btn_Pin;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4833      	ldr	r0, [pc, #204]	; (8001e6c <MX_GPIO_Init+0x1d8>)
 8001d9e:	f000 fdf9 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin M1_MBL_Pin M1_MAL_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|M1_MBL_Pin|M1_MAL_Pin;
 8001da2:	2358      	movs	r3, #88	; 0x58
 8001da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	482c      	ldr	r0, [pc, #176]	; (8001e6c <MX_GPIO_Init+0x1d8>)
 8001dba:	f000 fdeb 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_MBL_Pin OTG_FS_PowerSwitchOn_Pin M2_MAL_Pin */
  GPIO_InitStruct.Pin = M0_MBL_Pin|OTG_FS_PowerSwitchOn_Pin|M2_MAL_Pin;
 8001dbe:	f242 0305 	movw	r3, #8197	; 0x2005
 8001dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4826      	ldr	r0, [pc, #152]	; (8001e70 <MX_GPIO_Init+0x1dc>)
 8001dd8:	f000 fddc 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_MBL_Pin M3_MBL_Pin M3_MAL_Pin */
  GPIO_InitStruct.Pin = M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin;
 8001ddc:	f641 0302 	movw	r3, #6146	; 0x1802
 8001de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4619      	mov	r1, r3
 8001df4:	481f      	ldr	r0, [pc, #124]	; (8001e74 <MX_GPIO_Init+0x1e0>)
 8001df6:	f000 fdcd 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4819      	ldr	r0, [pc, #100]	; (8001e74 <MX_GPIO_Init+0x1e0>)
 8001e0e:	f000 fdc1 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin M0_MAL_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001e12:	f24f 0390 	movw	r3, #61584	; 0xf090
 8001e16:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|M0_MAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4813      	ldr	r0, [pc, #76]	; (8001e78 <MX_GPIO_Init+0x1e4>)
 8001e2c:	f000 fdb2 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e30:	2320      	movs	r3, #32
 8001e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	480d      	ldr	r0, [pc, #52]	; (8001e78 <MX_GPIO_Init+0x1e4>)
 8001e44:	f000 fda6 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <MX_GPIO_Init+0x1e8>)
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_GPIO_Init+0x1d8>)
 8001e5c:	f000 fd9a 	bl	8002994 <HAL_GPIO_Init>

}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	10120000 	.word	0x10120000

08001e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_MspInit+0x4c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_MspInit+0x4c>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_MspInit+0x4c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_MspInit+0x4c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_MspInit+0x4c>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_MspInit+0x4c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ece:	2007      	movs	r0, #7
 8001ed0:	f000 fd1e 	bl	8002910 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_SPI_MspInit+0x84>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d12c      	bne.n	8001f5c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_SPI_MspInit+0x88>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <HAL_SPI_MspInit+0x8c>)
 8001f58:	f000 fd1c 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40003800 	.word	0x40003800
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020400 	.word	0x40020400

08001f70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_TIM_PWM_MspInit+0x8c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10e      	bne.n	8001fa0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_TIM_PWM_MspInit+0x90>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_TIM_PWM_MspInit+0x90>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_TIM_PWM_MspInit+0x90>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001f9e:	e026      	b.n	8001fee <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_TIM_PWM_MspInit+0x94>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_TIM_PWM_MspInit+0x90>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a13      	ldr	r2, [pc, #76]	; (8002000 <HAL_TIM_PWM_MspInit+0x90>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_TIM_PWM_MspInit+0x90>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
}
 8001fc6:	e012      	b.n	8001fee <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM9)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <HAL_TIM_PWM_MspInit+0x98>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d10d      	bne.n	8001fee <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_TIM_PWM_MspInit+0x90>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_TIM_PWM_MspInit+0x90>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_TIM_PWM_MspInit+0x90>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40023800 	.word	0x40023800
 8002004:	40010400 	.word	0x40010400
 8002008:	40014000 	.word	0x40014000

0800200c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b090      	sub	sp, #64	; 0x40
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202c:	d14b      	bne.n	80020c6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
 8002032:	4b71      	ldr	r3, [pc, #452]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a70      	ldr	r2, [pc, #448]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b6e      	ldr	r3, [pc, #440]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a69      	ldr	r2, [pc, #420]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a62      	ldr	r2, [pc, #392]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b60      	ldr	r3, [pc, #384]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	623b      	str	r3, [r7, #32]
 8002080:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1_ENCA_Pin;
 8002082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208c:	2301      	movs	r3, #1
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002094:	2301      	movs	r3, #1
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(M1_ENCA_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800209c:	4619      	mov	r1, r3
 800209e:	4857      	ldr	r0, [pc, #348]	; (80021fc <HAL_TIM_Encoder_MspInit+0x1f0>)
 80020a0:	f000 fc78 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_ENCB_Pin;
 80020a4:	2308      	movs	r3, #8
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020b4:	2301      	movs	r3, #1
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(M1_ENCB_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020bc:	4619      	mov	r1, r3
 80020be:	4850      	ldr	r0, [pc, #320]	; (8002200 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80020c0:	f000 fc68 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020c4:	e094      	b.n	80021f0 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(htim_encoder->Instance==TIM3)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4e      	ldr	r2, [pc, #312]	; (8002204 <HAL_TIM_Encoder_MspInit+0x1f8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d12c      	bne.n	800212a <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a47      	ldr	r2, [pc, #284]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
 80020e0:	4b45      	ldr	r3, [pc, #276]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	4a40      	ldr	r2, [pc, #256]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	6313      	str	r3, [r2, #48]	; 0x30
 80020fc:	4b3e      	ldr	r3, [pc, #248]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M0_ENCA_Pin|M0_ENCB_Pin;
 8002108:	2330      	movs	r3, #48	; 0x30
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002110:	2301      	movs	r3, #1
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002118:	2302      	movs	r3, #2
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002120:	4619      	mov	r1, r3
 8002122:	4837      	ldr	r0, [pc, #220]	; (8002200 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002124:	f000 fc36 	bl	8002994 <HAL_GPIO_Init>
}
 8002128:	e062      	b.n	80021f0 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(htim_encoder->Instance==TIM4)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a36      	ldr	r2, [pc, #216]	; (8002208 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d12c      	bne.n	800218e <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	4a2e      	ldr	r2, [pc, #184]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6413      	str	r3, [r2, #64]	; 0x40
 8002144:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	6313      	str	r3, [r2, #48]	; 0x30
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_ENCA_Pin|M3_ENCB_Pin;
 800216c:	23c0      	movs	r3, #192	; 0xc0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002174:	2301      	movs	r3, #1
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800217c:	2302      	movs	r3, #2
 800217e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002184:	4619      	mov	r1, r3
 8002186:	481e      	ldr	r0, [pc, #120]	; (8002200 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002188:	f000 fc04 	bl	8002994 <HAL_GPIO_Init>
}
 800218c:	e030      	b.n	80021f0 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(htim_encoder->Instance==TIM5)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1e      	ldr	r2, [pc, #120]	; (800220c <HAL_TIM_Encoder_MspInit+0x200>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d12b      	bne.n	80021f0 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021a2:	f043 0308 	orr.w	r3, r3, #8
 80021a6:	6413      	str	r3, [r2, #64]	; 0x40
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6313      	str	r3, [r2, #48]	; 0x30
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021d0:	2303      	movs	r3, #3
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d8:	2301      	movs	r3, #1
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021e0:	2302      	movs	r3, #2
 80021e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e8:	4619      	mov	r1, r3
 80021ea:	4804      	ldr	r0, [pc, #16]	; (80021fc <HAL_TIM_Encoder_MspInit+0x1f0>)
 80021ec:	f000 fbd2 	bl	8002994 <HAL_GPIO_Init>
}
 80021f0:	bf00      	nop
 80021f2:	3740      	adds	r7, #64	; 0x40
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800
 800220c:	40000c00 	.word	0x40000c00

08002210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <HAL_TIM_Base_MspInit+0x48>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d115      	bne.n	800224e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_TIM_Base_MspInit+0x4c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <HAL_TIM_Base_MspInit+0x4c>)
 800222c:	f043 0310 	orr.w	r3, r3, #16
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_TIM_Base_MspInit+0x4c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	2036      	movs	r0, #54	; 0x36
 8002244:	f000 fb6f 	bl	8002926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002248:	2036      	movs	r0, #54	; 0x36
 800224a:	f000 fb88 	bl	800295e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40001000 	.word	0x40001000
 800225c:	40023800 	.word	0x40023800

08002260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08c      	sub	sp, #48	; 0x30
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a46      	ldr	r2, [pc, #280]	; (8002398 <HAL_TIM_MspPostInit+0x138>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d13e      	bne.n	8002300 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	4b45      	ldr	r3, [pc, #276]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a44      	ldr	r2, [pc, #272]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b42      	ldr	r3, [pc, #264]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a3d      	ldr	r2, [pc, #244]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M2_MBH_Pin|M3_MBH_Pin|M3_MAH_Pin;
 80022ba:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80022be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	4619      	mov	r1, r3
 80022d6:	4832      	ldr	r0, [pc, #200]	; (80023a0 <HAL_TIM_MspPostInit+0x140>)
 80022d8:	f000 fb5c 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1__MAH_Pin;
 80022dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1__MAH_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	4619      	mov	r1, r3
 80022f8:	482a      	ldr	r0, [pc, #168]	; (80023a4 <HAL_TIM_MspPostInit+0x144>)
 80022fa:	f000 fb4b 	bl	8002994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80022fe:	e047      	b.n	8002390 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM8)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a28      	ldr	r2, [pc, #160]	; (80023a8 <HAL_TIM_MspPostInit+0x148>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d11f      	bne.n	800234a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a22      	ldr	r2, [pc, #136]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M2_MAH_Pin|M0_MBH_Pin|M1_MBH_Pin|M0_MAH_Pin;
 8002326:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800232a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002338:	2303      	movs	r3, #3
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	4619      	mov	r1, r3
 8002342:	481a      	ldr	r0, [pc, #104]	; (80023ac <HAL_TIM_MspPostInit+0x14c>)
 8002344:	f000 fb26 	bl	8002994 <HAL_GPIO_Init>
}
 8002348:	e022      	b.n	8002390 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM9)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <HAL_TIM_MspPostInit+0x150>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d11d      	bne.n	8002390 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4a0f      	ldr	r2, [pc, #60]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 800235e:	f043 0310 	orr.w	r3, r3, #16
 8002362:	6313      	str	r3, [r2, #48]	; 0x30
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_TIM_MspPostInit+0x13c>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAH_Pin;
 8002370:	2320      	movs	r3, #32
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002380:	2303      	movs	r3, #3
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAH_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4619      	mov	r1, r3
 800238a:	4805      	ldr	r0, [pc, #20]	; (80023a0 <HAL_TIM_MspPostInit+0x140>)
 800238c:	f000 fb02 	bl	8002994 <HAL_GPIO_Init>
}
 8002390:	bf00      	nop
 8002392:	3730      	adds	r7, #48	; 0x30
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010000 	.word	0x40010000
 800239c:	40023800 	.word	0x40023800
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40010400 	.word	0x40010400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40014000 	.word	0x40014000

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <MemManage_Handler+0x4>

080023ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <BusFault_Handler+0x4>

080023d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <UsageFault_Handler+0x4>

080023da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002408:	f000 f96e 	bl	80026e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM6_DAC_IRQHandler+0x10>)
 8002416:	f002 fe53 	bl	80050c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000078c 	.word	0x2000078c

08002424 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <OTG_FS_IRQHandler+0x10>)
 800242a:	f000 fdd0 	bl	8002fce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20001d80 	.word	0x20001d80

08002438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
	return 1;
 800243c:	2301      	movs	r3, #1
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_kill>:

int _kill(int pid, int sig)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002452:	f007 f85d 	bl	8009510 <__errno>
 8002456:	4603      	mov	r3, r0
 8002458:	2216      	movs	r2, #22
 800245a:	601a      	str	r2, [r3, #0]
	return -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_exit>:

void _exit (int status)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffe7 	bl	8002448 <_kill>
	while (1) {}		/* Make sure we hang here */
 800247a:	e7fe      	b.n	800247a <_exit+0x12>

0800247c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e00a      	b.n	80024a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800248e:	f3af 8000 	nop.w
 8002492:	4601      	mov	r1, r0
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	60ba      	str	r2, [r7, #8]
 800249a:	b2ca      	uxtb	r2, r1
 800249c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	dbf0      	blt.n	800248e <_read+0x12>
	}

return len;
 80024ac:	687b      	ldr	r3, [r7, #4]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e009      	b.n	80024dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	60ba      	str	r2, [r7, #8]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	dbf1      	blt.n	80024c8 <_write+0x12>
	}
	return len;
 80024e4:	687b      	ldr	r3, [r7, #4]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_close>:

int _close(int file)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
	return -1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002516:	605a      	str	r2, [r3, #4]
	return 0;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_isatty>:

int _isatty(int file)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
	return 1;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
	return 0;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f006 ffc2 	bl	8009510 <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <_sbrk+0x64>)
 80025a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20020000 	.word	0x20020000
 80025b8:	00000400 	.word	0x00000400
 80025bc:	200003e4 	.word	0x200003e4
 80025c0:	20002198 	.word	0x20002198

080025c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <SystemInit+0x28>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <SystemInit+0x28>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <SystemInit+0x28>)
 80025da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025de:	609a      	str	r2, [r3, #8]
#endif
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002628 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025f6:	e003      	b.n	8002600 <LoopCopyDataInit>

080025f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025fe:	3104      	adds	r1, #4

08002600 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002600:	480b      	ldr	r0, [pc, #44]	; (8002630 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002604:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002606:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002608:	d3f6      	bcc.n	80025f8 <CopyDataInit>
  ldr  r2, =_sbss
 800260a:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800260c:	e002      	b.n	8002614 <LoopFillZerobss>

0800260e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800260e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002610:	f842 3b04 	str.w	r3, [r2], #4

08002614 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002616:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002618:	d3f9      	bcc.n	800260e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800261a:	f7ff ffd3 	bl	80025c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261e:	f006 ff7d 	bl	800951c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002622:	f7fe ff07 	bl	8001434 <main>
  bx  lr    
 8002626:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002628:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800262c:	0800c390 	.word	0x0800c390
  ldr  r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002634:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8002638:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 800263c:	20002198 	.word	0x20002198

08002640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002640:	e7fe      	b.n	8002640 <ADC_IRQHandler>
	...

08002644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_Init+0x40>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <HAL_Init+0x40>)
 800264e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002652:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <HAL_Init+0x40>)
 800265a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <HAL_Init+0x40>)
 8002666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266c:	2003      	movs	r0, #3
 800266e:	f000 f94f 	bl	8002910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002672:	2000      	movs	r0, #0
 8002674:	f000 f808 	bl	8002688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002678:	f7ff fc0a 	bl	8001e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023c00 	.word	0x40023c00

08002688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x54>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_InitTick+0x58>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269e:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f967 	bl	800297a <HAL_SYSTICK_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00e      	b.n	80026d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	d80a      	bhi.n	80026d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026bc:	2200      	movs	r2, #0
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f000 f92f 	bl	8002926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c8:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <HAL_InitTick+0x5c>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000000 	.word	0x20000000
 80026e0:	20000008 	.word	0x20000008
 80026e4:	20000004 	.word	0x20000004

080026e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x20>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x24>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_IncTick+0x24>)
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000008 	.word	0x20000008
 800270c:	200008ac 	.word	0x200008ac

08002710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return uwTick;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_GetTick+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	200008ac 	.word	0x200008ac

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff ffee 	bl	8002710 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_Delay+0x44>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800274e:	bf00      	nop
 8002750:	f7ff ffde 	bl	8002710 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000008 	.word	0x20000008

08002770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800278c:	4013      	ands	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800279c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a2:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	60d3      	str	r3, [r2, #12]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <__NVIC_GetPriorityGrouping+0x18>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	f003 0307 	and.w	r3, r3, #7
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	db0b      	blt.n	80027fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	f003 021f 	and.w	r2, r3, #31
 80027ec:	4907      	ldr	r1, [pc, #28]	; (800280c <__NVIC_EnableIRQ+0x38>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2001      	movs	r0, #1
 80027f6:	fa00 f202 	lsl.w	r2, r0, r2
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000e100 	.word	0xe000e100

08002810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db0a      	blt.n	800283a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	490c      	ldr	r1, [pc, #48]	; (800285c <__NVIC_SetPriority+0x4c>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	440b      	add	r3, r1
 8002834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002838:	e00a      	b.n	8002850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4908      	ldr	r1, [pc, #32]	; (8002860 <__NVIC_SetPriority+0x50>)
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	3b04      	subs	r3, #4
 8002848:	0112      	lsls	r2, r2, #4
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	440b      	add	r3, r1
 800284e:	761a      	strb	r2, [r3, #24]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000e100 	.word	0xe000e100
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f1c3 0307 	rsb	r3, r3, #7
 800287e:	2b04      	cmp	r3, #4
 8002880:	bf28      	it	cs
 8002882:	2304      	movcs	r3, #4
 8002884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3304      	adds	r3, #4
 800288a:	2b06      	cmp	r3, #6
 800288c:	d902      	bls.n	8002894 <NVIC_EncodePriority+0x30>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3b03      	subs	r3, #3
 8002892:	e000      	b.n	8002896 <NVIC_EncodePriority+0x32>
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	401a      	ands	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	43d9      	mvns	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	4313      	orrs	r3, r2
         );
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028dc:	d301      	bcc.n	80028e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028de:	2301      	movs	r3, #1
 80028e0:	e00f      	b.n	8002902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <SysTick_Config+0x40>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ea:	210f      	movs	r1, #15
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295
 80028f0:	f7ff ff8e 	bl	8002810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <SysTick_Config+0x40>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <SysTick_Config+0x40>)
 80028fc:	2207      	movs	r2, #7
 80028fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	e000e010 	.word	0xe000e010

08002910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff29 	bl	8002770 <__NVIC_SetPriorityGrouping>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002926:	b580      	push	{r7, lr}
 8002928:	b086      	sub	sp, #24
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002938:	f7ff ff3e 	bl	80027b8 <__NVIC_GetPriorityGrouping>
 800293c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	6978      	ldr	r0, [r7, #20]
 8002944:	f7ff ff8e 	bl	8002864 <NVIC_EncodePriority>
 8002948:	4602      	mov	r2, r0
 800294a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff5d 	bl	8002810 <__NVIC_SetPriority>
}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff31 	bl	80027d4 <__NVIC_EnableIRQ>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ffa2 	bl	80028cc <SysTick_Config>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e16b      	b.n	8002c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	f040 815a 	bne.w	8002c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d005      	beq.n	80029e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d130      	bne.n	8002a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	2203      	movs	r2, #3
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0201 	and.w	r2, r3, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d017      	beq.n	8002a84 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d123      	bne.n	8002ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80b4 	beq.w	8002c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	4a5f      	ldr	r2, [pc, #380]	; (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b36:	4a5b      	ldr	r2, [pc, #364]	; (8002ca4 <HAL_GPIO_Init+0x310>)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_GPIO_Init+0x314>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d02b      	beq.n	8002bba <HAL_GPIO_Init+0x226>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a51      	ldr	r2, [pc, #324]	; (8002cac <HAL_GPIO_Init+0x318>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d025      	beq.n	8002bb6 <HAL_GPIO_Init+0x222>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a50      	ldr	r2, [pc, #320]	; (8002cb0 <HAL_GPIO_Init+0x31c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01f      	beq.n	8002bb2 <HAL_GPIO_Init+0x21e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <HAL_GPIO_Init+0x320>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d019      	beq.n	8002bae <HAL_GPIO_Init+0x21a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4e      	ldr	r2, [pc, #312]	; (8002cb8 <HAL_GPIO_Init+0x324>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0x216>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <HAL_GPIO_Init+0x328>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00d      	beq.n	8002ba6 <HAL_GPIO_Init+0x212>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4c      	ldr	r2, [pc, #304]	; (8002cc0 <HAL_GPIO_Init+0x32c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0x20e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <HAL_GPIO_Init+0x330>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_GPIO_Init+0x20a>
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	e00e      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	e00c      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	e00a      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	e008      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002baa:	2304      	movs	r3, #4
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e004      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f002 0203 	and.w	r2, r2, #3
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	4093      	lsls	r3, r2
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bcc:	4935      	ldr	r1, [pc, #212]	; (8002ca4 <HAL_GPIO_Init+0x310>)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bfe:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c04:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c28:	4a27      	ldr	r2, [pc, #156]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c7c:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	f67f ae90 	bls.w	80029b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40020400 	.word	0x40020400
 8002cb0:	40020800 	.word	0x40020800
 8002cb4:	40020c00 	.word	0x40020c00
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40021400 	.word	0x40021400
 8002cc0:	40021800 	.word	0x40021800
 8002cc4:	40021c00 	.word	0x40021c00
 8002cc8:	40013c00 	.word	0x40013c00

08002ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	887b      	ldrh	r3, [r7, #2]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e001      	b.n	8002cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d0c:	787b      	ldrb	r3, [r7, #1]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d12:	887a      	ldrh	r2, [r7, #2]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d18:	e003      	b.n	8002d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	041a      	lsls	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	619a      	str	r2, [r3, #24]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d30:	b08f      	sub	sp, #60	; 0x3c
 8002d32:	af0a      	add	r7, sp, #40	; 0x28
 8002d34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e10f      	b.n	8002f60 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f006 f8b6 	bl	8008ecc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2203      	movs	r2, #3
 8002d64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 fff9 	bl	8005d76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	687e      	ldr	r6, [r7, #4]
 8002d8c:	466d      	mov	r5, sp
 8002d8e:	f106 0410 	add.w	r4, r6, #16
 8002d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002da2:	1d33      	adds	r3, r6, #4
 8002da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da6:	6838      	ldr	r0, [r7, #0]
 8002da8:	f002 fed0 	bl	8005b4c <USB_CoreInit>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0d0      	b.n	8002f60 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f002 ffe7 	bl	8005d98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	e04a      	b.n	8002e66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	333d      	adds	r3, #61	; 0x3d
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	333c      	adds	r3, #60	; 0x3c
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	b298      	uxth	r0, r3
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	3342      	adds	r3, #66	; 0x42
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e10:	7bfa      	ldrb	r2, [r7, #15]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	333f      	adds	r3, #63	; 0x3f
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3344      	adds	r3, #68	; 0x44
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3348      	adds	r3, #72	; 0x48
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3350      	adds	r3, #80	; 0x50
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	3301      	adds	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d3af      	bcc.n	8002dd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e044      	b.n	8002f00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e76:	7bfa      	ldrb	r2, [r7, #15]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ea2:	7bfa      	ldrb	r2, [r7, #15]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3301      	adds	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3b5      	bcc.n	8002e76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	687e      	ldr	r6, [r7, #4]
 8002f12:	466d      	mov	r5, sp
 8002f14:	f106 0410 	add.w	r4, r6, #16
 8002f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f24:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f28:	1d33      	adds	r3, r6, #4
 8002f2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f2c:	6838      	ldr	r0, [r7, #0]
 8002f2e:	f002 ff5d 	bl	8005dec <USB_DevInit>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e00d      	b.n	8002f60 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 ffa5 	bl	8006ea8 <USB_DevDisconnect>

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_PCD_Start+0x1c>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e020      	b.n	8002fc6 <HAL_PCD_Start+0x5e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d109      	bne.n	8002fa8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d005      	beq.n	8002fa8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 fed1 	bl	8005d54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 ff55 	bl	8006e66 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fce:	b590      	push	{r4, r7, lr}
 8002fd0:	b08d      	sub	sp, #52	; 0x34
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f004 f813 	bl	8007010 <USB_GetMode>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f040 839d 	bne.w	800372c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 ff77 	bl	8006eea <USB_ReadInterrupts>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8393 	beq.w	800372a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f003 ff6e 	bl	8006eea <USB_ReadInterrupts>
 800300e:	4603      	mov	r3, r0
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d107      	bne.n	8003028 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f002 0202 	and.w	r2, r2, #2
 8003026:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f003 ff5c 	bl	8006eea <USB_ReadInterrupts>
 8003032:	4603      	mov	r3, r0
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b10      	cmp	r3, #16
 800303a:	d161      	bne.n	8003100 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0210 	bic.w	r2, r2, #16
 800304a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4413      	add	r3, r2
 8003068:	3304      	adds	r3, #4
 800306a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	0c5b      	lsrs	r3, r3, #17
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	2b02      	cmp	r3, #2
 8003076:	d124      	bne.n	80030c2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d035      	beq.n	80030f0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800308e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	6a38      	ldr	r0, [r7, #32]
 8003098:	f003 fdc2 	bl	8006c20 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a8:	441a      	add	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ba:	441a      	add	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	619a      	str	r2, [r3, #24]
 80030c0:	e016      	b.n	80030f0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	0c5b      	lsrs	r3, r3, #17
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d110      	bne.n	80030f0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030d4:	2208      	movs	r2, #8
 80030d6:	4619      	mov	r1, r3
 80030d8:	6a38      	ldr	r0, [r7, #32]
 80030da:	f003 fda1 	bl	8006c20 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ea:	441a      	add	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0210 	orr.w	r2, r2, #16
 80030fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f003 fef0 	bl	8006eea <USB_ReadInterrupts>
 800310a:	4603      	mov	r3, r0
 800310c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003110:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003114:	d16e      	bne.n	80031f4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fef6 	bl	8006f10 <USB_ReadDevAllOutEpInterrupt>
 8003124:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003126:	e062      	b.n	80031ee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d057      	beq.n	80031e2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f003 ff1b 	bl	8006f78 <USB_ReadDevOutEPInterrupt>
 8003142:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315a:	461a      	mov	r2, r3
 800315c:	2301      	movs	r3, #1
 800315e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fdb0 	bl	8003cc8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317e:	461a      	mov	r2, r3
 8003180:	2308      	movs	r3, #8
 8003182:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 feaa 	bl	8003ee0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	461a      	mov	r2, r3
 80031a4:	2310      	movs	r3, #16
 80031a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	2320      	movs	r3, #32
 80031c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031da:	461a      	mov	r2, r3
 80031dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	3301      	adds	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d199      	bne.n	8003128 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 fe76 	bl	8006eea <USB_ReadInterrupts>
 80031fe:	4603      	mov	r3, r0
 8003200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003204:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003208:	f040 80c0 	bne.w	800338c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f003 fe97 	bl	8006f44 <USB_ReadDevAllInEpInterrupt>
 8003216:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800321c:	e0b2      	b.n	8003384 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80a7 	beq.w	8003378 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f003 febd 	bl	8006fb4 <USB_ReadDevInEPInterrupt>
 800323a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d057      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	2201      	movs	r2, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	43db      	mvns	r3, r3
 8003260:	69f9      	ldr	r1, [r7, #28]
 8003262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003266:	4013      	ands	r3, r2
 8003268:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003276:	461a      	mov	r2, r3
 8003278:	2301      	movs	r3, #1
 800327a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d132      	bne.n	80032ea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3348      	adds	r3, #72	; 0x48
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4403      	add	r3, r0
 80032a4:	3344      	adds	r3, #68	; 0x44
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4419      	add	r1, r3
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4403      	add	r3, r0
 80032b8:	3348      	adds	r3, #72	; 0x48
 80032ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d113      	bne.n	80032ea <HAL_PCD_IRQHandler+0x31c>
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3350      	adds	r3, #80	; 0x50
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d108      	bne.n	80032ea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032e2:	461a      	mov	r2, r3
 80032e4:	2101      	movs	r1, #1
 80032e6:	f003 fec5 	bl	8007074 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	4619      	mov	r1, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f005 fe7a 	bl	8008fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330c:	461a      	mov	r2, r3
 800330e:	2308      	movs	r3, #8
 8003310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003328:	461a      	mov	r2, r3
 800332a:	2310      	movs	r3, #16
 800332c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003344:	461a      	mov	r2, r3
 8003346:	2340      	movs	r3, #64	; 0x40
 8003348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003360:	461a      	mov	r2, r3
 8003362:	2302      	movs	r3, #2
 8003364:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fc1b 	bl	8003bae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	3301      	adds	r3, #1
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	2b00      	cmp	r3, #0
 8003388:	f47f af49 	bne.w	800321e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f003 fdaa 	bl	8006eea <USB_ReadInterrupts>
 8003396:	4603      	mov	r3, r0
 8003398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800339c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033a0:	d122      	bne.n	80033e8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d108      	bne.n	80033d2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80033c8:	2100      	movs	r1, #0
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fe26 	bl	800401c <HAL_PCDEx_LPM_Callback>
 80033d0:	e002      	b.n	80033d8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f005 fe80 	bl	80090d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80033e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 fd7c 	bl	8006eea <USB_ReadInterrupts>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fc:	d112      	bne.n	8003424 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d102      	bne.n	8003414 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f005 fe3c 	bl	800908c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003422:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f003 fd5e 	bl	8006eea <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003438:	f040 80c7 	bne.w	80035ca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2110      	movs	r1, #16
 8003456:	4618      	mov	r0, r3
 8003458:	f002 fe2c 	bl	80060b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345c:	2300      	movs	r3, #0
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003460:	e056      	b.n	8003510 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346e:	461a      	mov	r2, r3
 8003470:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003474:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	440a      	add	r2, r1
 800348c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003490:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003494:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a6:	0151      	lsls	r1, r2, #5
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	440a      	add	r2, r1
 80034ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c2:	461a      	mov	r2, r3
 80034c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034da:	0151      	lsls	r1, r2, #5
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	440a      	add	r2, r1
 80034e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fa:	0151      	lsls	r1, r2, #5
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	440a      	add	r2, r1
 8003500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003504:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003508:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	3301      	adds	r3, #1
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003516:	429a      	cmp	r2, r3
 8003518:	d3a3      	bcc.n	8003462 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003528:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800352c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003546:	f043 030b 	orr.w	r3, r3, #11
 800354a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800355c:	f043 030b 	orr.w	r3, r3, #11
 8003560:	6453      	str	r3, [r2, #68]	; 0x44
 8003562:	e015      	b.n	8003590 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003572:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003576:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800357a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800358a:	f043 030b 	orr.w	r3, r3, #11
 800358e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80035a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035b4:	461a      	mov	r2, r3
 80035b6:	f003 fd5d 	bl	8007074 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80035c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 fc8b 	bl	8006eea <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035de:	d124      	bne.n	800362a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f003 fd21 	bl	800702c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f002 fdc1 	bl	8006176 <USB_GetDevSpeed>
 80035f4:	4603      	mov	r3, r0
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681c      	ldr	r4, [r3, #0]
 8003600:	f001 f958 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 8003604:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	4620      	mov	r0, r4
 8003610:	f002 fafe 	bl	8005c10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f005 fd10 	bl	800903a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003628:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f003 fc5b 	bl	8006eea <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b08      	cmp	r3, #8
 800363c:	d10a      	bne.n	8003654 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f005 fced 	bl	800901e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f002 0208 	and.w	r2, r2, #8
 8003652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f003 fc46 	bl	8006eea <USB_ReadInterrupts>
 800365e:	4603      	mov	r3, r0
 8003660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003668:	d10f      	bne.n	800368a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f005 fd4f 	bl	8009118 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f003 fc2b 	bl	8006eea <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800369e:	d10f      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	4619      	mov	r1, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f005 fd22 	bl	80090f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 fc10 	bl	8006eea <USB_ReadInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d10a      	bne.n	80036ec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f005 fd30 	bl	800913c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f003 fbfa 	bl	8006eea <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d115      	bne.n	800372c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f005 fd20 	bl	8009158 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	430a      	orrs	r2, r1
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	e000      	b.n	800372c <HAL_PCD_IRQHandler+0x75e>
      return;
 800372a:	bf00      	nop
    }
  }
}
 800372c:	3734      	adds	r7, #52	; 0x34
 800372e:	46bd      	mov	sp, r7
 8003730:	bd90      	pop	{r4, r7, pc}

08003732 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_PCD_SetAddress+0x1a>
 8003748:	2302      	movs	r3, #2
 800374a:	e013      	b.n	8003774 <HAL_PCD_SetAddress+0x42>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f003 fb58 	bl	8006e1a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4603      	mov	r3, r0
 800378c:	70fb      	strb	r3, [r7, #3]
 800378e:	460b      	mov	r3, r1
 8003790:	803b      	strh	r3, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800379a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	da0f      	bge.n	80037c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 020f 	and.w	r2, r3, #15
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	3338      	adds	r3, #56	; 0x38
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	3304      	adds	r3, #4
 80037b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	705a      	strb	r2, [r3, #1]
 80037c0:	e00f      	b.n	80037e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	f003 020f 	and.w	r2, r3, #15
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	3304      	adds	r3, #4
 80037da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037ee:	883a      	ldrh	r2, [r7, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	78ba      	ldrb	r2, [r7, #2]
 80037f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	785b      	ldrb	r3, [r3, #1]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800380c:	78bb      	ldrb	r3, [r7, #2]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d102      	bne.n	8003818 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_PCD_EP_Open+0xaa>
 8003822:	2302      	movs	r3, #2
 8003824:	e00e      	b.n	8003844 <HAL_PCD_EP_Open+0xc8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68f9      	ldr	r1, [r7, #12]
 8003834:	4618      	mov	r0, r3
 8003836:	f002 fcc3 	bl	80061c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003842:	7afb      	ldrb	r3, [r7, #11]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800385c:	2b00      	cmp	r3, #0
 800385e:	da0f      	bge.n	8003880 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	f003 020f 	and.w	r2, r3, #15
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	3338      	adds	r3, #56	; 0x38
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	4413      	add	r3, r2
 8003874:	3304      	adds	r3, #4
 8003876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	705a      	strb	r2, [r3, #1]
 800387e:	e00f      	b.n	80038a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	f003 020f 	and.w	r2, r3, #15
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	3304      	adds	r3, #4
 8003898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_PCD_EP_Close+0x6e>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e00e      	b.n	80038d8 <HAL_PCD_EP_Close+0x8c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f002 fd01 	bl	80062d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	460b      	mov	r3, r1
 80038ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038f0:	7afb      	ldrb	r3, [r7, #11]
 80038f2:	f003 020f 	and.w	r2, r3, #15
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4413      	add	r3, r2
 8003906:	3304      	adds	r3, #4
 8003908:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2200      	movs	r2, #0
 8003920:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003922:	7afb      	ldrb	r3, [r7, #11]
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	b2da      	uxtb	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d102      	bne.n	800393c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800393c:	7afb      	ldrb	r3, [r7, #11]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	6979      	ldr	r1, [r7, #20]
 8003954:	f002 ffdc 	bl	8006910 <USB_EP0StartXfer>
 8003958:	e008      	b.n	800396c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	6979      	ldr	r1, [r7, #20]
 8003968:	f002 fd8e 	bl	8006488 <USB_EPStartXfer>
  }

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 020f 	and.w	r2, r3, #15
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003998:	681b      	ldr	r3, [r3, #0]
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	460b      	mov	r3, r1
 80039b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039b6:	7afb      	ldrb	r3, [r7, #11]
 80039b8:	f003 020f 	and.w	r2, r3, #15
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	3338      	adds	r3, #56	; 0x38
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	3304      	adds	r3, #4
 80039cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2201      	movs	r2, #1
 80039e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039e6:	7afb      	ldrb	r3, [r7, #11]
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d102      	bne.n	8003a00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a00:	7afb      	ldrb	r3, [r7, #11]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	6979      	ldr	r1, [r7, #20]
 8003a18:	f002 ff7a 	bl	8006910 <USB_EP0StartXfer>
 8003a1c:	e008      	b.n	8003a30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6979      	ldr	r1, [r7, #20]
 8003a2c:	f002 fd2c 	bl	8006488 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d901      	bls.n	8003a58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e050      	b.n	8003afa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	da0f      	bge.n	8003a80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	f003 020f 	and.w	r2, r3, #15
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	3338      	adds	r3, #56	; 0x38
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	4413      	add	r3, r2
 8003a74:	3304      	adds	r3, #4
 8003a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	705a      	strb	r2, [r3, #1]
 8003a7e:	e00d      	b.n	8003a9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4413      	add	r3, r2
 8003a92:	3304      	adds	r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_PCD_EP_SetStall+0x82>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e01e      	b.n	8003afa <HAL_PCD_EP_SetStall+0xc0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68f9      	ldr	r1, [r7, #12]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f003 f8d1 	bl	8006c72 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	b2d9      	uxtb	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003aea:	461a      	mov	r2, r3
 8003aec:	f003 fac2 	bl	8007074 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 020f 	and.w	r2, r3, #15
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d901      	bls.n	8003b20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e042      	b.n	8003ba6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	da0f      	bge.n	8003b48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	f003 020f 	and.w	r2, r3, #15
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	3338      	adds	r3, #56	; 0x38
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	705a      	strb	r2, [r3, #1]
 8003b46:	e00f      	b.n	8003b68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	f003 020f 	and.w	r2, r3, #15
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3304      	adds	r3, #4
 8003b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_PCD_EP_ClrStall+0x86>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e00e      	b.n	8003ba6 <HAL_PCD_EP_ClrStall+0xa4>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68f9      	ldr	r1, [r7, #12]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f003 f8d9 	bl	8006d4e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b08a      	sub	sp, #40	; 0x28
 8003bb2:	af02      	add	r7, sp, #8
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	3338      	adds	r3, #56	; 0x38
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d901      	bls.n	8003be6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06c      	b.n	8003cc0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d902      	bls.n	8003c02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3303      	adds	r3, #3
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c0a:	e02b      	b.n	8003c64 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d902      	bls.n	8003c28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3303      	adds	r3, #3
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68d9      	ldr	r1, [r3, #12]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4603      	mov	r3, r0
 8003c46:	6978      	ldr	r0, [r7, #20]
 8003c48:	f002 ffb5 	bl	8006bb6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	441a      	add	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	441a      	add	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d809      	bhi.n	8003c8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d203      	bcs.n	8003c8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1be      	bne.n	8003c0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d811      	bhi.n	8003cbe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	6939      	ldr	r1, [r7, #16]
 8003cb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cba:	4013      	ands	r3, r2
 8003cbc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	333c      	adds	r3, #60	; 0x3c
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	f040 80a0 	bne.w	8003e40 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d015      	beq.n	8003d36 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a72      	ldr	r2, [pc, #456]	; (8003ed8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	f240 80dd 	bls.w	8003ece <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80d7 	beq.w	8003ece <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d32:	6093      	str	r3, [r2, #8]
 8003d34:	e0cb      	b.n	8003ece <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2320      	movs	r3, #32
 8003d50:	6093      	str	r3, [r2, #8]
 8003d52:	e0bc      	b.n	8003ece <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 80b7 	bne.w	8003ece <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a5d      	ldr	r2, [pc, #372]	; (8003ed8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d90f      	bls.n	8003d88 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d84:	6093      	str	r3, [r2, #8]
 8003d86:	e0a2      	b.n	8003ece <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d9a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	0159      	lsls	r1, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	440b      	add	r3, r1
 8003da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003dae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4403      	add	r3, r0
 8003dbe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003dc2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4403      	add	r3, r0
 8003de6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4419      	add	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4403      	add	r3, r0
 8003dfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e00:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d114      	bne.n	8003e32 <PCD_EP_OutXfrComplete_int+0x16a>
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	f003 f921 	bl	8007074 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f005 f8bb 	bl	8008fb4 <HAL_PCD_DataOutStageCallback>
 8003e3e:	e046      	b.n	8003ece <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a26      	ldr	r2, [pc, #152]	; (8003edc <PCD_EP_OutXfrComplete_int+0x214>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d124      	bne.n	8003e92 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e64:	6093      	str	r3, [r2, #8]
 8003e66:	e032      	b.n	8003ece <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2320      	movs	r3, #32
 8003e82:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f005 f892 	bl	8008fb4 <HAL_PCD_DataOutStageCallback>
 8003e90:	e01d      	b.n	8003ece <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d114      	bne.n	8003ec2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d108      	bne.n	8003ec2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	f003 f8d9 	bl	8007074 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f005 f873 	bl	8008fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	4f54300a 	.word	0x4f54300a
 8003edc:	4f54310a 	.word	0x4f54310a

08003ee0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	333c      	adds	r3, #60	; 0x3c
 8003ef8:	3304      	adds	r3, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d90e      	bls.n	8003f34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f005 f82b 	bl	8008f90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d90c      	bls.n	8003f5c <PCD_EP_OutSetupPacket_int+0x7c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d108      	bne.n	8003f5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f54:	461a      	mov	r2, r3
 8003f56:	2101      	movs	r1, #1
 8003f58:	f003 f88c 	bl	8007074 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	4f54300a 	.word	0x4f54300a

08003f6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d107      	bne.n	8003f9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f8a:	883b      	ldrh	r3, [r7, #0]
 8003f8c:	0419      	lsls	r1, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
 8003f98:	e028      	b.n	8003fec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	e00d      	b.n	8003fca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	3340      	adds	r3, #64	; 0x40
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d3ec      	bcc.n	8003fae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fd4:	883b      	ldrh	r3, [r7, #0]
 8003fd6:	0418      	lsls	r0, r3, #16
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	4302      	orrs	r2, r0
 8003fe4:	3340      	adds	r3, #64	; 0x40
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e264      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d075      	beq.n	800413e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004052:	4ba3      	ldr	r3, [pc, #652]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b04      	cmp	r3, #4
 800405c:	d00c      	beq.n	8004078 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405e:	4ba0      	ldr	r3, [pc, #640]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004066:	2b08      	cmp	r3, #8
 8004068:	d112      	bne.n	8004090 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406a:	4b9d      	ldr	r3, [pc, #628]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004076:	d10b      	bne.n	8004090 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	4b99      	ldr	r3, [pc, #612]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d05b      	beq.n	800413c <HAL_RCC_OscConfig+0x108>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d157      	bne.n	800413c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e23f      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x74>
 800409a:	4b91      	ldr	r3, [pc, #580]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a90      	ldr	r2, [pc, #576]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e01d      	b.n	80040e4 <HAL_RCC_OscConfig+0xb0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x98>
 80040b2:	4b8b      	ldr	r3, [pc, #556]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a8a      	ldr	r2, [pc, #552]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	4b88      	ldr	r3, [pc, #544]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a87      	ldr	r2, [pc, #540]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0xb0>
 80040cc:	4b84      	ldr	r3, [pc, #528]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a83      	ldr	r2, [pc, #524]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a80      	ldr	r2, [pc, #512]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fe fb10 	bl	8002710 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fe fb0c 	bl	8002710 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e204      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0xc0>
 8004112:	e014      	b.n	800413e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fe fafc 	bl	8002710 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800411c:	f7fe faf8 	bl	8002710 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1f0      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	4b6c      	ldr	r3, [pc, #432]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0xe8>
 800413a:	e000      	b.n	800413e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d063      	beq.n	8004212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004156:	4b62      	ldr	r3, [pc, #392]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415e:	2b08      	cmp	r3, #8
 8004160:	d11c      	bne.n	800419c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004162:	4b5f      	ldr	r3, [pc, #380]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d116      	bne.n	800419c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	4b5c      	ldr	r3, [pc, #368]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_RCC_OscConfig+0x152>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e1c4      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	4b56      	ldr	r3, [pc, #344]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4952      	ldr	r1, [pc, #328]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419a:	e03a      	b.n	8004212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d020      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a4:	4b4f      	ldr	r3, [pc, #316]	; (80042e4 <HAL_RCC_OscConfig+0x2b0>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fe fab1 	bl	8002710 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b2:	f7fe faad 	bl	8002710 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e1a5      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c4:	4b46      	ldr	r3, [pc, #280]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d0:	4b43      	ldr	r3, [pc, #268]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4940      	ldr	r1, [pc, #256]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]
 80041e4:	e015      	b.n	8004212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCC_OscConfig+0x2b0>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fe fa90 	bl	8002710 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f4:	f7fe fa8c 	bl	8002710 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e184      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d030      	beq.n	8004280 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004226:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <HAL_RCC_OscConfig+0x2b4>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fe fa70 	bl	8002710 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004234:	f7fe fa6c 	bl	8002710 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e164      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x200>
 8004252:	e015      	b.n	8004280 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004254:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCC_OscConfig+0x2b4>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fe fa59 	bl	8002710 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004262:	f7fe fa55 	bl	8002710 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e14d      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80a0 	beq.w	80043ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428e:	2300      	movs	r3, #0
 8004290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10f      	bne.n	80042be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6413      	str	r3, [r2, #64]	; 0x40
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_OscConfig+0x2b8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d121      	bne.n	800430e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ca:	4b08      	ldr	r3, [pc, #32]	; (80042ec <HAL_RCC_OscConfig+0x2b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a07      	ldr	r2, [pc, #28]	; (80042ec <HAL_RCC_OscConfig+0x2b8>)
 80042d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d6:	f7fe fa1b 	bl	8002710 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	e011      	b.n	8004302 <HAL_RCC_OscConfig+0x2ce>
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	42470000 	.word	0x42470000
 80042e8:	42470e80 	.word	0x42470e80
 80042ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f0:	f7fe fa0e 	bl	8002710 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e106      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b85      	ldr	r3, [pc, #532]	; (8004518 <HAL_RCC_OscConfig+0x4e4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d106      	bne.n	8004324 <HAL_RCC_OscConfig+0x2f0>
 8004316:	4b81      	ldr	r3, [pc, #516]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	4a80      	ldr	r2, [pc, #512]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6713      	str	r3, [r2, #112]	; 0x70
 8004322:	e01c      	b.n	800435e <HAL_RCC_OscConfig+0x32a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b05      	cmp	r3, #5
 800432a:	d10c      	bne.n	8004346 <HAL_RCC_OscConfig+0x312>
 800432c:	4b7b      	ldr	r3, [pc, #492]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	4a7a      	ldr	r2, [pc, #488]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 8004332:	f043 0304 	orr.w	r3, r3, #4
 8004336:	6713      	str	r3, [r2, #112]	; 0x70
 8004338:	4b78      	ldr	r3, [pc, #480]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	4a77      	ldr	r2, [pc, #476]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6713      	str	r3, [r2, #112]	; 0x70
 8004344:	e00b      	b.n	800435e <HAL_RCC_OscConfig+0x32a>
 8004346:	4b75      	ldr	r3, [pc, #468]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	4a74      	ldr	r2, [pc, #464]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	6713      	str	r3, [r2, #112]	; 0x70
 8004352:	4b72      	ldr	r3, [pc, #456]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	4a71      	ldr	r2, [pc, #452]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 8004358:	f023 0304 	bic.w	r3, r3, #4
 800435c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d015      	beq.n	8004392 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004366:	f7fe f9d3 	bl	8002710 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	e00a      	b.n	8004384 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fe f9cf 	bl	8002710 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	; 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e0c5      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	4b65      	ldr	r3, [pc, #404]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ee      	beq.n	800436e <HAL_RCC_OscConfig+0x33a>
 8004390:	e014      	b.n	80043bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004392:	f7fe f9bd 	bl	8002710 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fe f9b9 	bl	8002710 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0af      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b0:	4b5a      	ldr	r3, [pc, #360]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1ee      	bne.n	800439a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d105      	bne.n	80043ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c2:	4b56      	ldr	r3, [pc, #344]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	4a55      	ldr	r2, [pc, #340]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 80043c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 809b 	beq.w	800450e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d05c      	beq.n	800449e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d141      	bne.n	8004470 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ec:	4b4c      	ldr	r3, [pc, #304]	; (8004520 <HAL_RCC_OscConfig+0x4ec>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fe f98d 	bl	8002710 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fe f989 	bl	8002710 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e081      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440c:	4b43      	ldr	r3, [pc, #268]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	019b      	lsls	r3, r3, #6
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	3b01      	subs	r3, #1
 8004432:	041b      	lsls	r3, r3, #16
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	4937      	ldr	r1, [pc, #220]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 800443e:	4313      	orrs	r3, r2
 8004440:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004442:	4b37      	ldr	r3, [pc, #220]	; (8004520 <HAL_RCC_OscConfig+0x4ec>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fe f962 	bl	8002710 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004450:	f7fe f95e 	bl	8002710 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e056      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x41c>
 800446e:	e04e      	b.n	800450e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004470:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <HAL_RCC_OscConfig+0x4ec>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004476:	f7fe f94b 	bl	8002710 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447e:	f7fe f947 	bl	8002710 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e03f      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004490:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f0      	bne.n	800447e <HAL_RCC_OscConfig+0x44a>
 800449c:	e037      	b.n	800450e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e032      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044aa:	4b1c      	ldr	r3, [pc, #112]	; (800451c <HAL_RCC_OscConfig+0x4e8>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d028      	beq.n	800450a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d121      	bne.n	800450a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d11a      	bne.n	800450a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044da:	4013      	ands	r3, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d111      	bne.n	800450a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	085b      	lsrs	r3, r3, #1
 80044f2:	3b01      	subs	r3, #1
 80044f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d107      	bne.n	800450a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40007000 	.word	0x40007000
 800451c:	40023800 	.word	0x40023800
 8004520:	42470060 	.word	0x42470060

08004524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0cc      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004538:	4b68      	ldr	r3, [pc, #416]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d90c      	bls.n	8004560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b65      	ldr	r3, [pc, #404]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b63      	ldr	r3, [pc, #396]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0b8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b59      	ldr	r3, [pc, #356]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a58      	ldr	r2, [pc, #352]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004582:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800459a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	494d      	ldr	r1, [pc, #308]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d044      	beq.n	8004644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d119      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d003      	beq.n	80045e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e2:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e06f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f2:	4b3b      	ldr	r3, [pc, #236]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e067      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004602:	4b37      	ldr	r3, [pc, #220]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4934      	ldr	r1, [pc, #208]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004614:	f7fe f87c 	bl	8002710 <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	e00a      	b.n	8004632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fe f878 	bl	8002710 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e04f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 020c 	and.w	r2, r3, #12
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	429a      	cmp	r2, r3
 8004642:	d1eb      	bne.n	800461c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d20c      	bcs.n	800466c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e032      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4916      	ldr	r1, [pc, #88]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490e      	ldr	r1, [pc, #56]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046aa:	f000 f821 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490a      	ldr	r1, [pc, #40]	; (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd ffdc 	bl	8002688 <HAL_InitTick>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023c00 	.word	0x40023c00
 80046e0:	40023800 	.word	0x40023800
 80046e4:	0800bf88 	.word	0x0800bf88
 80046e8:	20000000 	.word	0x20000000
 80046ec:	20000004 	.word	0x20000004

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	2300      	movs	r3, #0
 8004702:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004708:	4b67      	ldr	r3, [pc, #412]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d00d      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x40>
 8004714:	2b08      	cmp	r3, #8
 8004716:	f200 80bd 	bhi.w	8004894 <HAL_RCC_GetSysClockFreq+0x1a4>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 800471e:	2b04      	cmp	r3, #4
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x3a>
 8004722:	e0b7      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b61      	ldr	r3, [pc, #388]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004726:	60bb      	str	r3, [r7, #8]
       break;
 8004728:	e0b7      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472a:	4b61      	ldr	r3, [pc, #388]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800472c:	60bb      	str	r3, [r7, #8]
      break;
 800472e:	e0b4      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004730:	4b5d      	ldr	r3, [pc, #372]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004738:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800473a:	4b5b      	ldr	r3, [pc, #364]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04d      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b58      	ldr	r3, [pc, #352]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	461a      	mov	r2, r3
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	ea02 0800 	and.w	r8, r2, r0
 800475e:	ea03 0901 	and.w	r9, r3, r1
 8004762:	4640      	mov	r0, r8
 8004764:	4649      	mov	r1, r9
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	014b      	lsls	r3, r1, #5
 8004770:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004774:	0142      	lsls	r2, r0, #5
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	ebb0 0008 	subs.w	r0, r0, r8
 800477e:	eb61 0109 	sbc.w	r1, r1, r9
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	018b      	lsls	r3, r1, #6
 800478c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004790:	0182      	lsls	r2, r0, #6
 8004792:	1a12      	subs	r2, r2, r0
 8004794:	eb63 0301 	sbc.w	r3, r3, r1
 8004798:	f04f 0000 	mov.w	r0, #0
 800479c:	f04f 0100 	mov.w	r1, #0
 80047a0:	00d9      	lsls	r1, r3, #3
 80047a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047a6:	00d0      	lsls	r0, r2, #3
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	eb12 0208 	adds.w	r2, r2, r8
 80047b0:	eb43 0309 	adc.w	r3, r3, r9
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	0259      	lsls	r1, r3, #9
 80047be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047c2:	0250      	lsls	r0, r2, #9
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	f7fc f9e8 	bl	8000ba8 <__aeabi_uldivmod>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4613      	mov	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e04a      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e2:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	461a      	mov	r2, r3
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	ea02 0400 	and.w	r4, r2, r0
 80047fa:	ea03 0501 	and.w	r5, r3, r1
 80047fe:	4620      	mov	r0, r4
 8004800:	4629      	mov	r1, r5
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	014b      	lsls	r3, r1, #5
 800480c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004810:	0142      	lsls	r2, r0, #5
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	1b00      	subs	r0, r0, r4
 8004818:	eb61 0105 	sbc.w	r1, r1, r5
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	018b      	lsls	r3, r1, #6
 8004826:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800482a:	0182      	lsls	r2, r0, #6
 800482c:	1a12      	subs	r2, r2, r0
 800482e:	eb63 0301 	sbc.w	r3, r3, r1
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	00d9      	lsls	r1, r3, #3
 800483c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004840:	00d0      	lsls	r0, r2, #3
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	1912      	adds	r2, r2, r4
 8004848:	eb45 0303 	adc.w	r3, r5, r3
 800484c:	f04f 0000 	mov.w	r0, #0
 8004850:	f04f 0100 	mov.w	r1, #0
 8004854:	0299      	lsls	r1, r3, #10
 8004856:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800485a:	0290      	lsls	r0, r2, #10
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	461a      	mov	r2, r3
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	f7fc f99c 	bl	8000ba8 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4613      	mov	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	3301      	adds	r3, #1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	60bb      	str	r3, [r7, #8]
      break;
 8004892:	e002      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004896:	60bb      	str	r3, [r7, #8]
      break;
 8004898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489a:	68bb      	ldr	r3, [r7, #8]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	007a1200 	.word	0x007a1200

080048b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000000 	.word	0x20000000

080048cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e07b      	b.n	80049d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d108      	bne.n	80048f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ee:	d009      	beq.n	8004904 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	61da      	str	r2, [r3, #28]
 80048f6:	e005      	b.n	8004904 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd fade 	bl	8001ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	ea42 0103 	orr.w	r1, r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	0c1b      	lsrs	r3, r3, #16
 80049a2:	f003 0104 	and.w	r1, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f003 0210 	and.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e041      	b.n	8004a74 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d106      	bne.n	8004a0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fd fc03 	bl	8002210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f000 fd3d 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d001      	beq.n	8004a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e04e      	b.n	8004b32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a23      	ldr	r2, [pc, #140]	; (8004b40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d022      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abe:	d01d      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d018      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00e      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d009      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <HAL_TIM_Base_Start_IT+0xd8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <HAL_TIM_Base_Start_IT+0xdc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d111      	bne.n	8004b20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d010      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	e007      	b.n	8004b30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40001800 	.word	0x40001800

08004b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e041      	b.n	8004bf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fd f9f4 	bl	8001f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f000 fc7e 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <HAL_TIM_PWM_Start_IT+0x24>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e022      	b.n	8004c66 <HAL_TIM_PWM_Start_IT+0x6a>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d109      	bne.n	8004c3a <HAL_TIM_PWM_Start_IT+0x3e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	e015      	b.n	8004c66 <HAL_TIM_PWM_Start_IT+0x6a>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d109      	bne.n	8004c54 <HAL_TIM_PWM_Start_IT+0x58>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e008      	b.n	8004c66 <HAL_TIM_PWM_Start_IT+0x6a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0c2      	b.n	8004df4 <HAL_TIM_PWM_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <HAL_TIM_PWM_Start_IT+0x82>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c7c:	e013      	b.n	8004ca6 <HAL_TIM_PWM_Start_IT+0xaa>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_PWM_Start_IT+0x92>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c8c:	e00b      	b.n	8004ca6 <HAL_TIM_PWM_Start_IT+0xaa>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_PWM_Start_IT+0xa2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9c:	e003      	b.n	8004ca6 <HAL_TIM_PWM_Start_IT+0xaa>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b0c      	cmp	r3, #12
 8004caa:	d841      	bhi.n	8004d30 <HAL_TIM_PWM_Start_IT+0x134>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <HAL_TIM_PWM_Start_IT+0xb8>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004ce9 	.word	0x08004ce9
 8004cb8:	08004d31 	.word	0x08004d31
 8004cbc:	08004d31 	.word	0x08004d31
 8004cc0:	08004d31 	.word	0x08004d31
 8004cc4:	08004cfb 	.word	0x08004cfb
 8004cc8:	08004d31 	.word	0x08004d31
 8004ccc:	08004d31 	.word	0x08004d31
 8004cd0:	08004d31 	.word	0x08004d31
 8004cd4:	08004d0d 	.word	0x08004d0d
 8004cd8:	08004d31 	.word	0x08004d31
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004d31 	.word	0x08004d31
 8004ce4:	08004d1f 	.word	0x08004d1f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0202 	orr.w	r2, r2, #2
 8004cf6:	60da      	str	r2, [r3, #12]
      break;
 8004cf8:	e01b      	b.n	8004d32 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0204 	orr.w	r2, r2, #4
 8004d08:	60da      	str	r2, [r3, #12]
      break;
 8004d0a:	e012      	b.n	8004d32 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0208 	orr.w	r2, r2, #8
 8004d1a:	60da      	str	r2, [r3, #12]
      break;
 8004d1c:	e009      	b.n	8004d32 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0210 	orr.w	r2, r2, #16
 8004d2c:	60da      	str	r2, [r3, #12]
      break;
 8004d2e:	e000      	b.n	8004d32 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004d30:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2201      	movs	r2, #1
 8004d38:	6839      	ldr	r1, [r7, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fdfe 	bl	800593c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2d      	ldr	r2, [pc, #180]	; (8004dfc <HAL_TIM_PWM_Start_IT+0x200>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_TIM_PWM_Start_IT+0x158>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <HAL_TIM_PWM_Start_IT+0x204>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d101      	bne.n	8004d58 <HAL_TIM_PWM_Start_IT+0x15c>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <HAL_TIM_PWM_Start_IT+0x15e>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a22      	ldr	r2, [pc, #136]	; (8004dfc <HAL_TIM_PWM_Start_IT+0x200>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d022      	beq.n	8004dbe <HAL_TIM_PWM_Start_IT+0x1c2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d80:	d01d      	beq.n	8004dbe <HAL_TIM_PWM_Start_IT+0x1c2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <HAL_TIM_PWM_Start_IT+0x208>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d018      	beq.n	8004dbe <HAL_TIM_PWM_Start_IT+0x1c2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <HAL_TIM_PWM_Start_IT+0x20c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <HAL_TIM_PWM_Start_IT+0x1c2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_TIM_PWM_Start_IT+0x210>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00e      	beq.n	8004dbe <HAL_TIM_PWM_Start_IT+0x1c2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <HAL_TIM_PWM_Start_IT+0x204>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d009      	beq.n	8004dbe <HAL_TIM_PWM_Start_IT+0x1c2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <HAL_TIM_PWM_Start_IT+0x214>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d004      	beq.n	8004dbe <HAL_TIM_PWM_Start_IT+0x1c2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <HAL_TIM_PWM_Start_IT+0x218>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d111      	bne.n	8004de2 <HAL_TIM_PWM_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d010      	beq.n	8004df2 <HAL_TIM_PWM_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de0:	e007      	b.n	8004df2 <HAL_TIM_PWM_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40010400 	.word	0x40010400
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40001800 	.word	0x40001800

08004e18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e097      	b.n	8004f5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7fd f8e3 	bl	800200c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6812      	ldr	r2, [r2, #0]
 8004e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e5c:	f023 0307 	bic.w	r3, r3, #7
 8004e60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f000 fb15 	bl	800549c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004eb8:	f023 030c 	bic.w	r3, r3, #12
 8004ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ec4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	011a      	lsls	r2, r3, #4
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	031b      	lsls	r3, r3, #12
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d110      	bne.n	8004fb6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d102      	bne.n	8004fa0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f9a:	7b7b      	ldrb	r3, [r7, #13]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d001      	beq.n	8004fa4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e089      	b.n	80050b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb4:	e031      	b.n	800501a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d110      	bne.n	8004fde <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d102      	bne.n	8004fc8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fc2:	7b3b      	ldrb	r3, [r7, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d001      	beq.n	8004fcc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e075      	b.n	80050b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fdc:	e01d      	b.n	800501a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d108      	bne.n	8004ff6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fe4:	7bbb      	ldrb	r3, [r7, #14]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fea:	7b7b      	ldrb	r3, [r7, #13]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d102      	bne.n	8004ff6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ff0:	7b3b      	ldrb	r3, [r7, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e05e      	b.n	80050b8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b04      	cmp	r3, #4
 8005024:	d010      	beq.n	8005048 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005026:	e01f      	b.n	8005068 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2201      	movs	r2, #1
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fc83 	bl	800593c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0202 	orr.w	r2, r2, #2
 8005044:	60da      	str	r2, [r3, #12]
      break;
 8005046:	e02e      	b.n	80050a6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2201      	movs	r2, #1
 800504e:	2104      	movs	r1, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fc73 	bl	800593c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0204 	orr.w	r2, r2, #4
 8005064:	60da      	str	r2, [r3, #12]
      break;
 8005066:	e01e      	b.n	80050a6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2201      	movs	r2, #1
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fc63 	bl	800593c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2201      	movs	r2, #1
 800507c:	2104      	movs	r1, #4
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fc5c 	bl	800593c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0202 	orr.w	r2, r2, #2
 8005092:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0204 	orr.w	r2, r2, #4
 80050a2:	60da      	str	r2, [r3, #12]
      break;
 80050a4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0201 	orr.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d122      	bne.n	800511c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d11b      	bne.n	800511c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0202 	mvn.w	r2, #2
 80050ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9ac 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f99e 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f9af 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b04      	cmp	r3, #4
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b04      	cmp	r3, #4
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0204 	mvn.w	r2, #4
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f982 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f974 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f985 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b08      	cmp	r3, #8
 800517c:	d122      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b08      	cmp	r3, #8
 800518a:	d11b      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0208 	mvn.w	r2, #8
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2204      	movs	r2, #4
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f958 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f94a 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f95b 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d122      	bne.n	8005218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d11b      	bne.n	8005218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0210 	mvn.w	r2, #16
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2208      	movs	r2, #8
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f92e 	bl	8005460 <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f920 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f931 	bl	8005474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d10e      	bne.n	8005244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b01      	cmp	r3, #1
 8005232:	d107      	bne.n	8005244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0201 	mvn.w	r2, #1
 800523c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fc f828 	bl	8001294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b80      	cmp	r3, #128	; 0x80
 8005250:	d10e      	bne.n	8005270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525c:	2b80      	cmp	r3, #128	; 0x80
 800525e:	d107      	bne.n	8005270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fc64 	bl	8005b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b40      	cmp	r3, #64	; 0x40
 800527c:	d10e      	bne.n	800529c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b40      	cmp	r3, #64	; 0x40
 800528a:	d107      	bne.n	800529c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8f6 	bl	8005488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d10e      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d107      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0220 	mvn.w	r2, #32
 80052c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fc2e 	bl	8005b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0ac      	b.n	8005444 <HAL_TIM_PWM_ConfigChannel+0x174>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	f200 809f 	bhi.w	8005438 <HAL_TIM_PWM_ConfigChannel+0x168>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005335 	.word	0x08005335
 8005304:	08005439 	.word	0x08005439
 8005308:	08005439 	.word	0x08005439
 800530c:	08005439 	.word	0x08005439
 8005310:	08005375 	.word	0x08005375
 8005314:	08005439 	.word	0x08005439
 8005318:	08005439 	.word	0x08005439
 800531c:	08005439 	.word	0x08005439
 8005320:	080053b7 	.word	0x080053b7
 8005324:	08005439 	.word	0x08005439
 8005328:	08005439 	.word	0x08005439
 800532c:	08005439 	.word	0x08005439
 8005330:	080053f7 	.word	0x080053f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f94e 	bl	80055dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0208 	orr.w	r2, r2, #8
 800534e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0204 	bic.w	r2, r2, #4
 800535e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6999      	ldr	r1, [r3, #24]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	619a      	str	r2, [r3, #24]
      break;
 8005372:	e062      	b.n	800543a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f99e 	bl	80056bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6999      	ldr	r1, [r3, #24]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	021a      	lsls	r2, r3, #8
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	619a      	str	r2, [r3, #24]
      break;
 80053b4:	e041      	b.n	800543a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 f9f3 	bl	80057a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0208 	orr.w	r2, r2, #8
 80053d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0204 	bic.w	r2, r2, #4
 80053e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69d9      	ldr	r1, [r3, #28]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	61da      	str	r2, [r3, #28]
      break;
 80053f4:	e021      	b.n	800543a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fa47 	bl	8005890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69d9      	ldr	r1, [r3, #28]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	021a      	lsls	r2, r3, #8
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	61da      	str	r2, [r3, #28]
      break;
 8005436:	e000      	b.n	800543a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005438:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a40      	ldr	r2, [pc, #256]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d00f      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3d      	ldr	r2, [pc, #244]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3c      	ldr	r2, [pc, #240]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3b      	ldr	r2, [pc, #236]	; (80055bc <TIM_Base_SetConfig+0x120>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2f      	ldr	r2, [pc, #188]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02b      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d027      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d023      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01f      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <TIM_Base_SetConfig+0x120>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01b      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d017      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a28      	ldr	r2, [pc, #160]	; (80055c4 <TIM_Base_SetConfig+0x128>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d013      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a27      	ldr	r2, [pc, #156]	; (80055c8 <TIM_Base_SetConfig+0x12c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00f      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a26      	ldr	r2, [pc, #152]	; (80055cc <TIM_Base_SetConfig+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00b      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a25      	ldr	r2, [pc, #148]	; (80055d0 <TIM_Base_SetConfig+0x134>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d007      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a24      	ldr	r2, [pc, #144]	; (80055d4 <TIM_Base_SetConfig+0x138>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a23      	ldr	r2, [pc, #140]	; (80055d8 <TIM_Base_SetConfig+0x13c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d108      	bne.n	8005560 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a0a      	ldr	r2, [pc, #40]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a0c      	ldr	r2, [pc, #48]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d103      	bne.n	800559c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	615a      	str	r2, [r3, #20]
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40010400 	.word	0x40010400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800
 80055d0:	40001800 	.word	0x40001800
 80055d4:	40001c00 	.word	0x40001c00
 80055d8:	40002000 	.word	0x40002000

080055dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0201 	bic.w	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 0302 	bic.w	r3, r3, #2
 8005624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a20      	ldr	r2, [pc, #128]	; (80056b4 <TIM_OC1_SetConfig+0xd8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <TIM_OC1_SetConfig+0x64>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <TIM_OC1_SetConfig+0xdc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d10c      	bne.n	800565a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0308 	bic.w	r3, r3, #8
 8005646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f023 0304 	bic.w	r3, r3, #4
 8005658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <TIM_OC1_SetConfig+0xd8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_OC1_SetConfig+0x8e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <TIM_OC1_SetConfig+0xdc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d111      	bne.n	800568e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	621a      	str	r2, [r3, #32]
}
 80056a8:	bf00      	nop
 80056aa:	371c      	adds	r7, #28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40010400 	.word	0x40010400

080056bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f023 0210 	bic.w	r2, r3, #16
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0320 	bic.w	r3, r3, #32
 8005706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a22      	ldr	r2, [pc, #136]	; (80057a0 <TIM_OC2_SetConfig+0xe4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC2_SetConfig+0x68>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a21      	ldr	r2, [pc, #132]	; (80057a4 <TIM_OC2_SetConfig+0xe8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d10d      	bne.n	8005740 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a17      	ldr	r2, [pc, #92]	; (80057a0 <TIM_OC2_SetConfig+0xe4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d003      	beq.n	8005750 <TIM_OC2_SetConfig+0x94>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a16      	ldr	r2, [pc, #88]	; (80057a4 <TIM_OC2_SetConfig+0xe8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d113      	bne.n	8005778 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800575e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40010400 	.word	0x40010400

080057a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0303 	bic.w	r3, r3, #3
 80057de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a21      	ldr	r2, [pc, #132]	; (8005888 <TIM_OC3_SetConfig+0xe0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d003      	beq.n	800580e <TIM_OC3_SetConfig+0x66>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a20      	ldr	r2, [pc, #128]	; (800588c <TIM_OC3_SetConfig+0xe4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d10d      	bne.n	800582a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a16      	ldr	r2, [pc, #88]	; (8005888 <TIM_OC3_SetConfig+0xe0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d003      	beq.n	800583a <TIM_OC3_SetConfig+0x92>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a15      	ldr	r2, [pc, #84]	; (800588c <TIM_OC3_SetConfig+0xe4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d113      	bne.n	8005862 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400

08005890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	031b      	lsls	r3, r3, #12
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a12      	ldr	r2, [pc, #72]	; (8005934 <TIM_OC4_SetConfig+0xa4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC4_SetConfig+0x68>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a11      	ldr	r2, [pc, #68]	; (8005938 <TIM_OC4_SetConfig+0xa8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d109      	bne.n	800590c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	019b      	lsls	r3, r3, #6
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000
 8005938:	40010400 	.word	0x40010400

0800593c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2201      	movs	r2, #1
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e05a      	b.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a21      	ldr	r2, [pc, #132]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d022      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d01d      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d018      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1b      	ldr	r2, [pc, #108]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1a      	ldr	r2, [pc, #104]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a17      	ldr	r2, [pc, #92]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d10c      	bne.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40010000 	.word	0x40010000
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40010400 	.word	0x40010400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40001800 	.word	0x40001800

08005a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e03d      	b.n	8005b18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	f107 001c 	add.w	r0, r7, #28
 8005b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d122      	bne.n	8005baa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d105      	bne.n	8005b9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 fac6 	bl	8007130 <USB_CoreReset>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	73fb      	strb	r3, [r7, #15]
 8005ba8:	e01a      	b.n	8005be0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f001 faba 	bl	8007130 <USB_CoreReset>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38
 8005bd2:	e005      	b.n	8005be0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d10b      	bne.n	8005bfe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f043 0206 	orr.w	r2, r3, #6
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f043 0220 	orr.w	r2, r3, #32
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c0a:	b004      	add	sp, #16
 8005c0c:	4770      	bx	lr
	...

08005c10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d165      	bne.n	8005cf0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4a41      	ldr	r2, [pc, #260]	; (8005d2c <USB_SetTurnaroundTime+0x11c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d906      	bls.n	8005c3a <USB_SetTurnaroundTime+0x2a>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4a40      	ldr	r2, [pc, #256]	; (8005d30 <USB_SetTurnaroundTime+0x120>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d202      	bcs.n	8005c3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c34:	230f      	movs	r3, #15
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e062      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	4a3c      	ldr	r2, [pc, #240]	; (8005d30 <USB_SetTurnaroundTime+0x120>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d306      	bcc.n	8005c50 <USB_SetTurnaroundTime+0x40>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4a3b      	ldr	r2, [pc, #236]	; (8005d34 <USB_SetTurnaroundTime+0x124>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d202      	bcs.n	8005c50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c4a:	230e      	movs	r3, #14
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	e057      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4a38      	ldr	r2, [pc, #224]	; (8005d34 <USB_SetTurnaroundTime+0x124>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d306      	bcc.n	8005c66 <USB_SetTurnaroundTime+0x56>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4a37      	ldr	r2, [pc, #220]	; (8005d38 <USB_SetTurnaroundTime+0x128>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d202      	bcs.n	8005c66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c60:	230d      	movs	r3, #13
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e04c      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4a33      	ldr	r2, [pc, #204]	; (8005d38 <USB_SetTurnaroundTime+0x128>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d306      	bcc.n	8005c7c <USB_SetTurnaroundTime+0x6c>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4a32      	ldr	r2, [pc, #200]	; (8005d3c <USB_SetTurnaroundTime+0x12c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d802      	bhi.n	8005c7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c76:	230c      	movs	r3, #12
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e041      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4a2f      	ldr	r2, [pc, #188]	; (8005d3c <USB_SetTurnaroundTime+0x12c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d906      	bls.n	8005c92 <USB_SetTurnaroundTime+0x82>
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4a2e      	ldr	r2, [pc, #184]	; (8005d40 <USB_SetTurnaroundTime+0x130>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d802      	bhi.n	8005c92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c8c:	230b      	movs	r3, #11
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e036      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4a2a      	ldr	r2, [pc, #168]	; (8005d40 <USB_SetTurnaroundTime+0x130>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d906      	bls.n	8005ca8 <USB_SetTurnaroundTime+0x98>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	4a29      	ldr	r2, [pc, #164]	; (8005d44 <USB_SetTurnaroundTime+0x134>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d802      	bhi.n	8005ca8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ca2:	230a      	movs	r3, #10
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e02b      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4a26      	ldr	r2, [pc, #152]	; (8005d44 <USB_SetTurnaroundTime+0x134>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d906      	bls.n	8005cbe <USB_SetTurnaroundTime+0xae>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4a25      	ldr	r2, [pc, #148]	; (8005d48 <USB_SetTurnaroundTime+0x138>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d202      	bcs.n	8005cbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005cb8:	2309      	movs	r3, #9
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e020      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4a21      	ldr	r2, [pc, #132]	; (8005d48 <USB_SetTurnaroundTime+0x138>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d306      	bcc.n	8005cd4 <USB_SetTurnaroundTime+0xc4>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4a20      	ldr	r2, [pc, #128]	; (8005d4c <USB_SetTurnaroundTime+0x13c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d802      	bhi.n	8005cd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005cce:	2308      	movs	r3, #8
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	e015      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4a1d      	ldr	r2, [pc, #116]	; (8005d4c <USB_SetTurnaroundTime+0x13c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d906      	bls.n	8005cea <USB_SetTurnaroundTime+0xda>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <USB_SetTurnaroundTime+0x140>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d202      	bcs.n	8005cea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ce4:	2307      	movs	r3, #7
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e00a      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005cea:	2306      	movs	r3, #6
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	e007      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005cf6:	2309      	movs	r3, #9
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e001      	b.n	8005d00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005cfc:	2309      	movs	r3, #9
 8005cfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	029b      	lsls	r3, r3, #10
 8005d14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	00d8acbf 	.word	0x00d8acbf
 8005d30:	00e4e1c0 	.word	0x00e4e1c0
 8005d34:	00f42400 	.word	0x00f42400
 8005d38:	01067380 	.word	0x01067380
 8005d3c:	011a499f 	.word	0x011a499f
 8005d40:	01312cff 	.word	0x01312cff
 8005d44:	014ca43f 	.word	0x014ca43f
 8005d48:	016e3600 	.word	0x016e3600
 8005d4c:	01a6ab1f 	.word	0x01a6ab1f
 8005d50:	01e84800 	.word	0x01e84800

08005d54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f043 0201 	orr.w	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f023 0201 	bic.w	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d106      	bne.n	8005dc4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60da      	str	r2, [r3, #12]
 8005dc2:	e00b      	b.n	8005ddc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60da      	str	r2, [r3, #12]
 8005dd6:	e001      	b.n	8005ddc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e003      	b.n	8005de4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005ddc:	2032      	movs	r0, #50	; 0x32
 8005dde:	f7fc fca3 	bl	8002728 <HAL_Delay>

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dec:	b084      	sub	sp, #16
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	e009      	b.n	8005e20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	3340      	adds	r3, #64	; 0x40
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b0e      	cmp	r3, #14
 8005e24:	d9f2      	bls.n	8005e0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d11c      	bne.n	8005e66 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e3a:	f043 0302 	orr.w	r3, r3, #2
 8005e3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
 8005e64:	e00b      	b.n	8005e7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e84:	461a      	mov	r2, r3
 8005e86:	2300      	movs	r3, #0
 8005e88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e90:	4619      	mov	r1, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e98:	461a      	mov	r2, r3
 8005e9a:	680b      	ldr	r3, [r1, #0]
 8005e9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d10c      	bne.n	8005ebe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d104      	bne.n	8005eb4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005eaa:	2100      	movs	r1, #0
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f949 	bl	8006144 <USB_SetDevSpeed>
 8005eb2:	e008      	b.n	8005ec6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f944 	bl	8006144 <USB_SetDevSpeed>
 8005ebc:	e003      	b.n	8005ec6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ebe:	2103      	movs	r1, #3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f93f 	bl	8006144 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ec6:	2110      	movs	r1, #16
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f8f3 	bl	80060b4 <USB_FlushTxFifo>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f911 	bl	8006100 <USB_FlushRxFifo>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efa:	461a      	mov	r2, r3
 8005efc:	2300      	movs	r3, #0
 8005efe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	461a      	mov	r2, r3
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	e043      	b.n	8005f9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f28:	d118      	bne.n	8005f5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e013      	b.n	8005f6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f52:	461a      	mov	r2, r3
 8005f54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e008      	b.n	8005f6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	461a      	mov	r2, r3
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	3301      	adds	r3, #1
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d3b7      	bcc.n	8005f12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	e043      	b.n	8006030 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fbe:	d118      	bne.n	8005ff2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e013      	b.n	8006004 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e008      	b.n	8006004 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	461a      	mov	r2, r3
 8006000:	2300      	movs	r3, #0
 8006002:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	461a      	mov	r2, r3
 8006012:	2300      	movs	r3, #0
 8006014:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	461a      	mov	r2, r3
 8006024:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006028:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	3301      	adds	r3, #1
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	429a      	cmp	r2, r3
 8006036:	d3b7      	bcc.n	8005fa8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800604a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006058:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f043 0210 	orr.w	r2, r3, #16
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699a      	ldr	r2, [r3, #24]
 8006070:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <USB_DevInit+0x2c4>)
 8006072:	4313      	orrs	r3, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f043 0208 	orr.w	r2, r3, #8
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800608a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d107      	bne.n	80060a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006098:	f043 0304 	orr.w	r3, r3, #4
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060ac:	b004      	add	sp, #16
 80060ae:	4770      	bx	lr
 80060b0:	803c3800 	.word	0x803c3800

080060b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	019b      	lsls	r3, r3, #6
 80060c6:	f043 0220 	orr.w	r2, r3, #32
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3301      	adds	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4a09      	ldr	r2, [pc, #36]	; (80060fc <USB_FlushTxFifo+0x48>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d901      	bls.n	80060e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e006      	b.n	80060ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d0f0      	beq.n	80060ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	00030d40 	.word	0x00030d40

08006100 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2210      	movs	r2, #16
 8006110:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a09      	ldr	r2, [pc, #36]	; (8006140 <USB_FlushRxFifo+0x40>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d901      	bls.n	8006124 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e006      	b.n	8006132 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b10      	cmp	r3, #16
 800612e:	d0f0      	beq.n	8006112 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	00030d40 	.word	0x00030d40

08006144 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006164:	4313      	orrs	r3, r2
 8006166:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 0306 	and.w	r3, r3, #6
 800618e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]
 800619a:	e00a      	b.n	80061b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d002      	beq.n	80061a8 <USB_GetDevSpeed+0x32>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b06      	cmp	r3, #6
 80061a6:	d102      	bne.n	80061ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061a8:	2302      	movs	r3, #2
 80061aa:	75fb      	strb	r3, [r7, #23]
 80061ac:	e001      	b.n	80061b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061ae:	230f      	movs	r3, #15
 80061b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d13a      	bne.n	8006252 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	2101      	movs	r1, #1
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	68f9      	ldr	r1, [r7, #12]
 80061f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d155      	bne.n	80062c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	78db      	ldrb	r3, [r3, #3]
 800622e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006230:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	059b      	lsls	r3, r3, #22
 8006236:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006238:	4313      	orrs	r3, r2
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	e036      	b.n	80062c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	69da      	ldr	r2, [r3, #28]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	2101      	movs	r1, #1
 8006264:	fa01 f303 	lsl.w	r3, r1, r3
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	68f9      	ldr	r1, [r7, #12]
 800626c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006270:	4313      	orrs	r3, r2
 8006272:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11a      	bne.n	80062c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	78db      	ldrb	r3, [r3, #3]
 80062a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062a6:	430b      	orrs	r3, r1
 80062a8:	4313      	orrs	r3, r2
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
	...

080062d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d161      	bne.n	80063b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006302:	d11f      	bne.n	8006344 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006322:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	440a      	add	r2, r1
 800633a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006342:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	2101      	movs	r1, #1
 8006356:	fa01 f303 	lsl.w	r3, r1, r3
 800635a:	b29b      	uxth	r3, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006364:	4013      	ands	r3, r2
 8006366:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	2101      	movs	r1, #1
 800637a:	fa01 f303 	lsl.w	r3, r1, r3
 800637e:	b29b      	uxth	r3, r3
 8006380:	43db      	mvns	r3, r3
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006388:	4013      	ands	r3, r2
 800638a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	0159      	lsls	r1, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	440b      	add	r3, r1
 80063a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a6:	4619      	mov	r1, r3
 80063a8:	4b35      	ldr	r3, [pc, #212]	; (8006480 <USB_DeactivateEndpoint+0x1b0>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	600b      	str	r3, [r1, #0]
 80063ae:	e060      	b.n	8006472 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c6:	d11f      	bne.n	8006408 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006402:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006406:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	2101      	movs	r1, #1
 800641a:	fa01 f303 	lsl.w	r3, r1, r3
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	43db      	mvns	r3, r3
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006428:	4013      	ands	r3, r2
 800642a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	2101      	movs	r1, #1
 800643e:	fa01 f303 	lsl.w	r3, r1, r3
 8006442:	041b      	lsls	r3, r3, #16
 8006444:	43db      	mvns	r3, r3
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800644c:	4013      	ands	r3, r2
 800644e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	0159      	lsls	r1, r3, #5
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	440b      	add	r3, r1
 8006466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646a:	4619      	mov	r1, r3
 800646c:	4b05      	ldr	r3, [pc, #20]	; (8006484 <USB_DeactivateEndpoint+0x1b4>)
 800646e:	4013      	ands	r3, r2
 8006470:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	ec337800 	.word	0xec337800
 8006484:	eff37800 	.word	0xeff37800

08006488 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af02      	add	r7, sp, #8
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	f040 815c 	bne.w	8006762 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d132      	bne.n	8006518 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	0151      	lsls	r1, r2, #5
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	440a      	add	r2, r1
 80064c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006510:	0cdb      	lsrs	r3, r3, #19
 8006512:	04db      	lsls	r3, r3, #19
 8006514:	6113      	str	r3, [r2, #16]
 8006516:	e074      	b.n	8006602 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006532:	0cdb      	lsrs	r3, r3, #19
 8006534:	04db      	lsls	r3, r3, #19
 8006536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006556:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800655a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6959      	ldr	r1, [r3, #20]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	440b      	add	r3, r1
 8006574:	1e59      	subs	r1, r3, #1
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	fbb1 f3f3 	udiv	r3, r1, r3
 800657e:	04d9      	lsls	r1, r3, #19
 8006580:	4b9d      	ldr	r3, [pc, #628]	; (80067f8 <USB_EPStartXfer+0x370>)
 8006582:	400b      	ands	r3, r1
 8006584:	69b9      	ldr	r1, [r7, #24]
 8006586:	0148      	lsls	r0, r1, #5
 8006588:	69f9      	ldr	r1, [r7, #28]
 800658a:	4401      	add	r1, r0
 800658c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006590:	4313      	orrs	r3, r2
 8006592:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065aa:	69b9      	ldr	r1, [r7, #24]
 80065ac:	0148      	lsls	r0, r1, #5
 80065ae:	69f9      	ldr	r1, [r7, #28]
 80065b0:	4401      	add	r1, r0
 80065b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065b6:	4313      	orrs	r3, r2
 80065b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	78db      	ldrb	r3, [r3, #3]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d11f      	bne.n	8006602 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80065e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006600:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d14b      	bne.n	80066a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661c:	461a      	mov	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	78db      	ldrb	r3, [r3, #3]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d128      	bne.n	800667e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d110      	bne.n	800665e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	e00f      	b.n	800667e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800667c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	440a      	add	r2, r1
 8006694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006698:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e12f      	b.n	8006900 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	78db      	ldrb	r3, [r3, #3]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d015      	beq.n	80066f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8117 	beq.w	8006900 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	f003 030f 	and.w	r3, r3, #15
 80066e2:	2101      	movs	r1, #1
 80066e4:	fa01 f303 	lsl.w	r3, r1, r3
 80066e8:	69f9      	ldr	r1, [r7, #28]
 80066ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ee:	4313      	orrs	r3, r2
 80066f0:	634b      	str	r3, [r1, #52]	; 0x34
 80066f2:	e105      	b.n	8006900 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	2b00      	cmp	r3, #0
 8006702:	d110      	bne.n	8006726 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	440a      	add	r2, r1
 800671a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	e00f      	b.n	8006746 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006744:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	68d9      	ldr	r1, [r3, #12]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	b298      	uxth	r0, r3
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	4603      	mov	r3, r0
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 fa2b 	bl	8006bb6 <USB_WritePacket>
 8006760:	e0ce      	b.n	8006900 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800677c:	0cdb      	lsrs	r3, r3, #19
 800677e:	04db      	lsls	r3, r3, #19
 8006780:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800679c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d126      	bne.n	80067fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c4:	69b9      	ldr	r1, [r7, #24]
 80067c6:	0148      	lsls	r0, r1, #5
 80067c8:	69f9      	ldr	r1, [r7, #28]
 80067ca:	4401      	add	r1, r0
 80067cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067d0:	4313      	orrs	r3, r2
 80067d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067f2:	6113      	str	r3, [r2, #16]
 80067f4:	e036      	b.n	8006864 <USB_EPStartXfer+0x3dc>
 80067f6:	bf00      	nop
 80067f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	695a      	ldr	r2, [r3, #20]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	4413      	add	r3, r2
 8006806:	1e5a      	subs	r2, r3, #1
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	8afb      	ldrh	r3, [r7, #22]
 8006822:	04d9      	lsls	r1, r3, #19
 8006824:	4b39      	ldr	r3, [pc, #228]	; (800690c <USB_EPStartXfer+0x484>)
 8006826:	400b      	ands	r3, r1
 8006828:	69b9      	ldr	r1, [r7, #24]
 800682a:	0148      	lsls	r0, r1, #5
 800682c:	69f9      	ldr	r1, [r7, #28]
 800682e:	4401      	add	r1, r0
 8006830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006834:	4313      	orrs	r3, r2
 8006836:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	8af9      	ldrh	r1, [r7, #22]
 800684c:	fb01 f303 	mul.w	r3, r1, r3
 8006850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006854:	69b9      	ldr	r1, [r7, #24]
 8006856:	0148      	lsls	r0, r1, #5
 8006858:	69f9      	ldr	r1, [r7, #28]
 800685a:	4401      	add	r1, r0
 800685c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006860:	4313      	orrs	r3, r2
 8006862:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d10d      	bne.n	8006886 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	68d9      	ldr	r1, [r3, #12]
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006882:	460a      	mov	r2, r1
 8006884:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	78db      	ldrb	r3, [r3, #3]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d128      	bne.n	80068e0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d110      	bne.n	80068c0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	e00f      	b.n	80068e0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	1ff80000 	.word	0x1ff80000

08006910 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	2b01      	cmp	r3, #1
 800692e:	f040 80cd 	bne.w	8006acc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d132      	bne.n	80069a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	440a      	add	r2, r1
 8006950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006954:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006958:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800695c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	440a      	add	r2, r1
 8006974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800697c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006998:	0cdb      	lsrs	r3, r3, #19
 800699a:	04db      	lsls	r3, r3, #19
 800699c:	6113      	str	r3, [r2, #16]
 800699e:	e04e      	b.n	8006a3e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ba:	0cdb      	lsrs	r3, r3, #19
 80069bc:	04db      	lsls	r3, r3, #19
 80069be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	0151      	lsls	r1, r2, #5
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	440a      	add	r2, r1
 80069d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d903      	bls.n	80069f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a2e:	6939      	ldr	r1, [r7, #16]
 8006a30:	0148      	lsls	r0, r1, #5
 8006a32:	6979      	ldr	r1, [r7, #20]
 8006a34:	4401      	add	r1, r0
 8006a36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d11e      	bne.n	8006a82 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	461a      	mov	r2, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	e092      	b.n	8006ba8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006aa0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d07e      	beq.n	8006ba8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	2101      	movs	r1, #1
 8006abc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac0:	6979      	ldr	r1, [r7, #20]
 8006ac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	634b      	str	r3, [r1, #52]	; 0x34
 8006aca:	e06d      	b.n	8006ba8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae6:	0cdb      	lsrs	r3, r3, #19
 8006ae8:	04db      	lsls	r3, r3, #19
 8006aea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b0e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	691a      	ldr	r2, [r3, #16]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b56:	6939      	ldr	r1, [r7, #16]
 8006b58:	0148      	lsls	r0, r1, #5
 8006b5a:	6979      	ldr	r1, [r7, #20]
 8006b5c:	4401      	add	r1, r0
 8006b5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b62:	4313      	orrs	r3, r2
 8006b64:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d10d      	bne.n	8006b88 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	68d9      	ldr	r1, [r3, #12]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b84:	460a      	mov	r2, r1
 8006b86:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ba6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	371c      	adds	r7, #28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b089      	sub	sp, #36	; 0x24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	71fb      	strb	r3, [r7, #7]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006bd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d11a      	bne.n	8006c12 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bdc:	88bb      	ldrh	r3, [r7, #4]
 8006bde:	3303      	adds	r3, #3
 8006be0:	089b      	lsrs	r3, r3, #2
 8006be2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006be4:	2300      	movs	r3, #0
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	e00f      	b.n	8006c0a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	031a      	lsls	r2, r3, #12
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	3304      	adds	r3, #4
 8006c02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	3301      	adds	r3, #1
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d3eb      	bcc.n	8006bea <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3724      	adds	r7, #36	; 0x24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b089      	sub	sp, #36	; 0x24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	3303      	adds	r3, #3
 8006c3a:	089b      	lsrs	r3, r3, #2
 8006c3c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	e00b      	b.n	8006c5c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	3304      	adds	r3, #4
 8006c54:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d3ef      	bcc.n	8006c44 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006c64:	69fb      	ldr	r3, [r7, #28]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3724      	adds	r7, #36	; 0x24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d12c      	bne.n	8006ce8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	db12      	blt.n	8006cc6 <USB_EPSetStall+0x54>
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00f      	beq.n	8006cc6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	0151      	lsls	r1, r2, #5
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	440a      	add	r2, r1
 8006cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cc4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	e02b      	b.n	8006d40 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	db12      	blt.n	8006d20 <USB_EPSetStall+0xae>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00f      	beq.n	8006d20 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d1e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d128      	bne.n	8006dbc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	0151      	lsls	r1, r2, #5
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	440a      	add	r2, r1
 8006d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	78db      	ldrb	r3, [r3, #3]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d003      	beq.n	8006d9a <USB_EPClearStall+0x4c>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	78db      	ldrb	r3, [r3, #3]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d138      	bne.n	8006e0c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	e027      	b.n	8006e0c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	78db      	ldrb	r3, [r3, #3]
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d003      	beq.n	8006dec <USB_EPClearStall+0x9e>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	78db      	ldrb	r3, [r3, #3]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d10f      	bne.n	8006e0c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e0a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e3c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e4e:	68f9      	ldr	r1, [r7, #12]
 8006e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e54:	4313      	orrs	r3, r2
 8006e56:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e80:	f023 0303 	bic.w	r3, r3, #3
 8006e84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e94:	f023 0302 	bic.w	r3, r3, #2
 8006e98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ed6:	f043 0302 	orr.w	r3, r3, #2
 8006eda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4013      	ands	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f02:	68fb      	ldr	r3, [r7, #12]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	4013      	ands	r3, r2
 8006f32:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	0c1b      	lsrs	r3, r3, #16
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	4013      	ands	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	b29b      	uxth	r3, r3
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe4:	01db      	lsls	r3, r3, #7
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fee:	78fb      	ldrb	r3, [r7, #3]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	4013      	ands	r3, r2
 8007000:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007002:	68bb      	ldr	r3, [r7, #8]
}
 8007004:	4618      	mov	r0, r3
 8007006:	371c      	adds	r7, #28
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	f003 0301 	and.w	r3, r3, #1
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007046:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800704a:	f023 0307 	bic.w	r3, r3, #7
 800704e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800705e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007062:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
	...

08007074 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	460b      	mov	r3, r1
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	333c      	adds	r3, #60	; 0x3c
 800708a:	3304      	adds	r3, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	4a26      	ldr	r2, [pc, #152]	; (800712c <USB_EP0_OutStart+0xb8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d90a      	bls.n	80070ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a8:	d101      	bne.n	80070ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e037      	b.n	800711e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b4:	461a      	mov	r2, r3
 80070b6:	2300      	movs	r3, #0
 80070b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070dc:	f043 0318 	orr.w	r3, r3, #24
 80070e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80070f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070f6:	7afb      	ldrb	r3, [r7, #11]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d10f      	bne.n	800711c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	461a      	mov	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007116:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800711a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	4f54300a 	.word	0x4f54300a

08007130 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4a13      	ldr	r2, [pc, #76]	; (8007194 <USB_CoreReset+0x64>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e01b      	b.n	8007186 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	daf2      	bge.n	800713c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f043 0201 	orr.w	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3301      	adds	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a09      	ldr	r2, [pc, #36]	; (8007194 <USB_CoreReset+0x64>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d901      	bls.n	8007178 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e006      	b.n	8007186 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d0f0      	beq.n	8007166 <USB_CoreReset+0x36>

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	00030d40 	.word	0x00030d40

08007198 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071a8:	f002 f96e 	bl	8009488 <USBD_static_malloc>
 80071ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80071bc:	2302      	movs	r3, #2
 80071be:	e066      	b.n	800728e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7c1b      	ldrb	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d119      	bne.n	8007204 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071d4:	2202      	movs	r2, #2
 80071d6:	2181      	movs	r1, #129	; 0x81
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f002 f832 	bl	8009242 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071e8:	2202      	movs	r2, #2
 80071ea:	2101      	movs	r1, #1
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f002 f828 	bl	8009242 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2210      	movs	r2, #16
 80071fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007202:	e016      	b.n	8007232 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	2202      	movs	r2, #2
 8007208:	2181      	movs	r1, #129	; 0x81
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f002 f819 	bl	8009242 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007216:	2340      	movs	r3, #64	; 0x40
 8007218:	2202      	movs	r2, #2
 800721a:	2101      	movs	r1, #1
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f002 f810 	bl	8009242 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2210      	movs	r2, #16
 800722e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007232:	2308      	movs	r3, #8
 8007234:	2203      	movs	r2, #3
 8007236:	2182      	movs	r1, #130	; 0x82
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f002 f802 	bl	8009242 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	7c1b      	ldrb	r3, [r3, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d109      	bne.n	800727c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800726e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007272:	2101      	movs	r1, #1
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f002 f8d3 	bl	8009420 <USBD_LL_PrepareReceive>
 800727a:	e007      	b.n	800728c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007282:	2340      	movs	r3, #64	; 0x40
 8007284:	2101      	movs	r1, #1
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f002 f8ca 	bl	8009420 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	460b      	mov	r3, r1
 80072a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80072a2:	2181      	movs	r1, #129	; 0x81
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 fff2 	bl	800928e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80072b0:	2101      	movs	r1, #1
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 ffeb 	bl	800928e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80072c0:	2182      	movs	r1, #130	; 0x82
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 ffe3 	bl	800928e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00e      	beq.n	8007300 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072f2:	4618      	mov	r0, r3
 80072f4:	f002 f8d6 	bl	80094a4 <USBD_static_free>
    pdev->pClassData = NULL;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800731c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007330:	2303      	movs	r3, #3
 8007332:	e0af      	b.n	8007494 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800733c:	2b00      	cmp	r3, #0
 800733e:	d03f      	beq.n	80073c0 <USBD_CDC_Setup+0xb4>
 8007340:	2b20      	cmp	r3, #32
 8007342:	f040 809f 	bne.w	8007484 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	88db      	ldrh	r3, [r3, #6]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d02e      	beq.n	80073ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	b25b      	sxtb	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	da16      	bge.n	8007386 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007364:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	88d2      	ldrh	r2, [r2, #6]
 800736a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	88db      	ldrh	r3, [r3, #6]
 8007370:	2b07      	cmp	r3, #7
 8007372:	bf28      	it	cs
 8007374:	2307      	movcs	r3, #7
 8007376:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	89fa      	ldrh	r2, [r7, #14]
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 fb19 	bl	80089b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007384:	e085      	b.n	8007492 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	785a      	ldrb	r2, [r3, #1]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	88db      	ldrh	r3, [r3, #6]
 8007394:	b2da      	uxtb	r2, r3
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800739c:	6939      	ldr	r1, [r7, #16]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	88db      	ldrh	r3, [r3, #6]
 80073a2:	461a      	mov	r2, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 fb32 	bl	8008a0e <USBD_CtlPrepareRx>
      break;
 80073aa:	e072      	b.n	8007492 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	7850      	ldrb	r0, [r2, #1]
 80073b8:	2200      	movs	r2, #0
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	4798      	blx	r3
      break;
 80073be:	e068      	b.n	8007492 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	2b0b      	cmp	r3, #11
 80073c6:	d852      	bhi.n	800746e <USBD_CDC_Setup+0x162>
 80073c8:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <USBD_CDC_Setup+0xc4>)
 80073ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ce:	bf00      	nop
 80073d0:	08007401 	.word	0x08007401
 80073d4:	0800747d 	.word	0x0800747d
 80073d8:	0800746f 	.word	0x0800746f
 80073dc:	0800746f 	.word	0x0800746f
 80073e0:	0800746f 	.word	0x0800746f
 80073e4:	0800746f 	.word	0x0800746f
 80073e8:	0800746f 	.word	0x0800746f
 80073ec:	0800746f 	.word	0x0800746f
 80073f0:	0800746f 	.word	0x0800746f
 80073f4:	0800746f 	.word	0x0800746f
 80073f8:	0800742b 	.word	0x0800742b
 80073fc:	08007455 	.word	0x08007455
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b03      	cmp	r3, #3
 800740a:	d107      	bne.n	800741c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800740c:	f107 030a 	add.w	r3, r7, #10
 8007410:	2202      	movs	r2, #2
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 face 	bl	80089b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800741a:	e032      	b.n	8007482 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 fa58 	bl	80088d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007424:	2303      	movs	r3, #3
 8007426:	75fb      	strb	r3, [r7, #23]
          break;
 8007428:	e02b      	b.n	8007482 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b03      	cmp	r3, #3
 8007434:	d107      	bne.n	8007446 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007436:	f107 030d 	add.w	r3, r7, #13
 800743a:	2201      	movs	r2, #1
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 fab9 	bl	80089b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007444:	e01d      	b.n	8007482 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 fa43 	bl	80088d4 <USBD_CtlError>
            ret = USBD_FAIL;
 800744e:	2303      	movs	r3, #3
 8007450:	75fb      	strb	r3, [r7, #23]
          break;
 8007452:	e016      	b.n	8007482 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b03      	cmp	r3, #3
 800745e:	d00f      	beq.n	8007480 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 fa36 	bl	80088d4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007468:	2303      	movs	r3, #3
 800746a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800746c:	e008      	b.n	8007480 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fa2f 	bl	80088d4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007476:	2303      	movs	r3, #3
 8007478:	75fb      	strb	r3, [r7, #23]
          break;
 800747a:	e002      	b.n	8007482 <USBD_CDC_Setup+0x176>
          break;
 800747c:	bf00      	nop
 800747e:	e008      	b.n	8007492 <USBD_CDC_Setup+0x186>
          break;
 8007480:	bf00      	nop
      }
      break;
 8007482:	e006      	b.n	8007492 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fa24 	bl	80088d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800748c:	2303      	movs	r3, #3
 800748e:	75fb      	strb	r3, [r7, #23]
      break;
 8007490:	bf00      	nop
  }

  return (uint8_t)ret;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e04f      	b.n	800755e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	440b      	add	r3, r1
 80074d4:	3318      	adds	r3, #24
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d029      	beq.n	8007530 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80074dc:	78fa      	ldrb	r2, [r7, #3]
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	3318      	adds	r3, #24
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	78f9      	ldrb	r1, [r7, #3]
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	460b      	mov	r3, r1
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	1a5b      	subs	r3, r3, r1
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4403      	add	r3, r0
 80074fc:	3344      	adds	r3, #68	; 0x44
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	fbb2 f1f3 	udiv	r1, r2, r3
 8007504:	fb03 f301 	mul.w	r3, r3, r1
 8007508:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800750a:	2b00      	cmp	r3, #0
 800750c:	d110      	bne.n	8007530 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	3318      	adds	r3, #24
 800751e:	2200      	movs	r2, #0
 8007520:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007522:	78f9      	ldrb	r1, [r7, #3]
 8007524:	2300      	movs	r3, #0
 8007526:	2200      	movs	r2, #0
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 ff58 	bl	80093de <USBD_LL_Transmit>
 800752e:	e015      	b.n	800755c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	460b      	mov	r3, r1
 8007570:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007578:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007584:	2303      	movs	r3, #3
 8007586:	e015      	b.n	80075b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 ff68 	bl	8009462 <USBD_LL_GetRxDataSize>
 8007592:	4602      	mov	r2, r0
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80075ae:	4611      	mov	r1, r2
 80075b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e01b      	b.n	800760e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d015      	beq.n	800760c <USBD_CDC_EP0_RxReady+0x50>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80075e6:	2bff      	cmp	r3, #255	; 0xff
 80075e8:	d010      	beq.n	800760c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80075f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007600:	b292      	uxth	r2, r2
 8007602:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	22ff      	movs	r2, #255	; 0xff
 8007608:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2243      	movs	r2, #67	; 0x43
 8007624:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007626:	4b03      	ldr	r3, [pc, #12]	; (8007634 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	20000094 	.word	0x20000094

08007638 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2243      	movs	r2, #67	; 0x43
 8007644:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007646:	4b03      	ldr	r3, [pc, #12]	; (8007654 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	20000050 	.word	0x20000050

08007658 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2243      	movs	r2, #67	; 0x43
 8007664:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007666:	4b03      	ldr	r3, [pc, #12]	; (8007674 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	200000d8 	.word	0x200000d8

08007678 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	220a      	movs	r2, #10
 8007684:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007686:	4b03      	ldr	r3, [pc, #12]	; (8007694 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	2000000c 	.word	0x2000000c

08007698 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e004      	b.n	80076b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b087      	sub	sp, #28
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	e008      	b.n	80076f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076fe:	b480      	push	{r7}
 8007700:	b085      	sub	sp, #20
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800770e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007716:	2303      	movs	r3, #3
 8007718:	e004      	b.n	8007724 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800773e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007740:	2301      	movs	r3, #1
 8007742:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800774e:	2303      	movs	r3, #3
 8007750:	e01a      	b.n	8007788 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007758:	2b00      	cmp	r3, #0
 800775a:	d114      	bne.n	8007786 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2201      	movs	r2, #1
 8007760:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800777a:	2181      	movs	r1, #129	; 0x81
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 fe2e 	bl	80093de <USBD_LL_Transmit>

    ret = USBD_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800779e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e016      	b.n	80077dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7c1b      	ldrb	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077c0:	2101      	movs	r1, #1
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f001 fe2c 	bl	8009420 <USBD_LL_PrepareReceive>
 80077c8:	e007      	b.n	80077da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077d0:	2340      	movs	r3, #64	; 0x40
 80077d2:	2101      	movs	r1, #1
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 fe23 	bl	8009420 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e01f      	b.n	800783c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	79fa      	ldrb	r2, [r7, #7]
 800782e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f001 fc9f 	bl	8009174 <USBD_LL_Init>
 8007836:	4603      	mov	r3, r0
 8007838:	75fb      	strb	r3, [r7, #23]

  return ret;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007858:	2303      	movs	r3, #3
 800785a:	e016      	b.n	800788a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00b      	beq.n	8007888 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	f107 020e 	add.w	r2, r7, #14
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	4602      	mov	r2, r0
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 fcb6 	bl	800920c <USBD_LL_Start>
 80078a0:	4603      	mov	r3, r0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80078cc:	2303      	movs	r3, #3
 80078ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	4611      	mov	r1, r2
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	4611      	mov	r1, r2
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
  }

  return USBD_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 ff90 	bl	8008860 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800794e:	461a      	mov	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	2b02      	cmp	r3, #2
 8007962:	d01a      	beq.n	800799a <USBD_LL_SetupStage+0x72>
 8007964:	2b02      	cmp	r3, #2
 8007966:	d822      	bhi.n	80079ae <USBD_LL_SetupStage+0x86>
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <USBD_LL_SetupStage+0x4a>
 800796c:	2b01      	cmp	r3, #1
 800796e:	d00a      	beq.n	8007986 <USBD_LL_SetupStage+0x5e>
 8007970:	e01d      	b.n	80079ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa62 	bl	8007e44 <USBD_StdDevReq>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]
      break;
 8007984:	e020      	b.n	80079c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fac6 	bl	8007f20 <USBD_StdItfReq>
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
      break;
 8007998:	e016      	b.n	80079c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb05 	bl	8007fb2 <USBD_StdEPReq>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]
      break;
 80079ac:	e00c      	b.n	80079c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 fc85 	bl	80092cc <USBD_LL_StallEP>
 80079c2:	4603      	mov	r3, r0
 80079c4:	73fb      	strb	r3, [r7, #15]
      break;
 80079c6:	bf00      	nop
  }

  return ret;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b086      	sub	sp, #24
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	460b      	mov	r3, r1
 80079dc:	607a      	str	r2, [r7, #4]
 80079de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80079e0:	7afb      	ldrb	r3, [r7, #11]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d138      	bne.n	8007a58 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d14a      	bne.n	8007a8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d913      	bls.n	8007a2c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	1ad2      	subs	r2, r2, r3
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	bf28      	it	cs
 8007a1e:	4613      	movcs	r3, r2
 8007a20:	461a      	mov	r2, r3
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f001 f80f 	bl	8008a48 <USBD_CtlContinueRx>
 8007a2a:	e030      	b.n	8007a8e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d10b      	bne.n	8007a50 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f001 f80a 	bl	8008a6a <USBD_CtlSendStatus>
 8007a56:	e01a      	b.n	8007a8e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d114      	bne.n	8007a8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00e      	beq.n	8007a8e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	7afa      	ldrb	r2, [r7, #11]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	4798      	blx	r3
 8007a80:	4603      	mov	r3, r0
 8007a82:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	e000      	b.n	8007a90 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d16b      	bne.n	8007b84 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3314      	adds	r3, #20
 8007ab0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d156      	bne.n	8007b6a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d914      	bls.n	8007af2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	1ad2      	subs	r2, r2, r3
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	461a      	mov	r2, r3
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 ff84 	bl	80089ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2100      	movs	r1, #0
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f001 fc98 	bl	8009420 <USBD_LL_PrepareReceive>
 8007af0:	e03b      	b.n	8007b6a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d11c      	bne.n	8007b38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d316      	bcc.n	8007b38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d20f      	bcs.n	8007b38 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 ff65 	bl	80089ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2100      	movs	r1, #0
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f001 fc75 	bl	8009420 <USBD_LL_PrepareReceive>
 8007b36:	e018      	b.n	8007b6a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d10b      	bne.n	8007b5c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d005      	beq.n	8007b5c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b5c:	2180      	movs	r1, #128	; 0x80
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f001 fbb4 	bl	80092cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 ff93 	bl	8008a90 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d122      	bne.n	8007bba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff fe98 	bl	80078aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b82:	e01a      	b.n	8007bba <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d114      	bne.n	8007bba <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00e      	beq.n	8007bba <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	7afa      	ldrb	r2, [r7, #11]
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	4798      	blx	r3
 8007bac:	4603      	mov	r3, r0
 8007bae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	e000      	b.n	8007bbc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e02f      	b.n	8007c58 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00f      	beq.n	8007c22 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6852      	ldr	r2, [r2, #4]
 8007c1a:	b2d2      	uxtb	r2, r2
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c22:	2340      	movs	r3, #64	; 0x40
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 fb0a 	bl	8009242 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2240      	movs	r2, #64	; 0x40
 8007c3a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c3e:	2340      	movs	r3, #64	; 0x40
 8007c40:	2200      	movs	r2, #0
 8007c42:	2180      	movs	r1, #128	; 0x80
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 fafc 	bl	8009242 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2240      	movs	r2, #64	; 0x40
 8007c54:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2204      	movs	r2, #4
 8007c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	d106      	bne.n	8007cce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e012      	b.n	8007d18 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d10b      	bne.n	8007d16 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e014      	b.n	8007d64 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d10d      	bne.n	8007d62 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d007      	beq.n	8007d62 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	78fa      	ldrb	r2, [r7, #3]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e014      	b.n	8007db0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d10d      	bne.n	8007dae <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d007      	beq.n	8007dae <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	78fa      	ldrb	r2, [r7, #3]
 8007da8:	4611      	mov	r1, r2
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d009      	beq.n	8007dfc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6852      	ldr	r2, [r2, #4]
 8007df4:	b2d2      	uxtb	r2, r2
 8007df6:	4611      	mov	r1, r2
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
  }

  return USBD_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b087      	sub	sp, #28
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e24:	8a3b      	ldrh	r3, [r7, #16]
 8007e26:	021b      	lsls	r3, r3, #8
 8007e28:	b21a      	sxth	r2, r3
 8007e2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	b21b      	sxth	r3, r3
 8007e32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e34:	89fb      	ldrh	r3, [r7, #14]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	371c      	adds	r7, #28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e5a:	2b40      	cmp	r3, #64	; 0x40
 8007e5c:	d005      	beq.n	8007e6a <USBD_StdDevReq+0x26>
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d853      	bhi.n	8007f0a <USBD_StdDevReq+0xc6>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00b      	beq.n	8007e7e <USBD_StdDevReq+0x3a>
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d14f      	bne.n	8007f0a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e7c:	e04a      	b.n	8007f14 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	2b09      	cmp	r3, #9
 8007e84:	d83b      	bhi.n	8007efe <USBD_StdDevReq+0xba>
 8007e86:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <USBD_StdDevReq+0x48>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007ee1 	.word	0x08007ee1
 8007e90:	08007ef5 	.word	0x08007ef5
 8007e94:	08007eff 	.word	0x08007eff
 8007e98:	08007eeb 	.word	0x08007eeb
 8007e9c:	08007eff 	.word	0x08007eff
 8007ea0:	08007ebf 	.word	0x08007ebf
 8007ea4:	08007eb5 	.word	0x08007eb5
 8007ea8:	08007eff 	.word	0x08007eff
 8007eac:	08007ed7 	.word	0x08007ed7
 8007eb0:	08007ec9 	.word	0x08007ec9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f9de 	bl	8008278 <USBD_GetDescriptor>
          break;
 8007ebc:	e024      	b.n	8007f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fb43 	bl	800854c <USBD_SetAddress>
          break;
 8007ec6:	e01f      	b.n	8007f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fb82 	bl	80085d4 <USBD_SetConfig>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
          break;
 8007ed4:	e018      	b.n	8007f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc21 	bl	8008720 <USBD_GetConfig>
          break;
 8007ede:	e013      	b.n	8007f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fc52 	bl	800878c <USBD_GetStatus>
          break;
 8007ee8:	e00e      	b.n	8007f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fc81 	bl	80087f4 <USBD_SetFeature>
          break;
 8007ef2:	e009      	b.n	8007f08 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fc90 	bl	800881c <USBD_ClrFeature>
          break;
 8007efc:	e004      	b.n	8007f08 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fce7 	bl	80088d4 <USBD_CtlError>
          break;
 8007f06:	bf00      	nop
      }
      break;
 8007f08:	e004      	b.n	8007f14 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fce1 	bl	80088d4 <USBD_CtlError>
      break;
 8007f12:	bf00      	nop
  }

  return ret;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop

08007f20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d005      	beq.n	8007f46 <USBD_StdItfReq+0x26>
 8007f3a:	2b40      	cmp	r3, #64	; 0x40
 8007f3c:	d82f      	bhi.n	8007f9e <USBD_StdItfReq+0x7e>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <USBD_StdItfReq+0x26>
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d12b      	bne.n	8007f9e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d81d      	bhi.n	8007f90 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	889b      	ldrh	r3, [r3, #4]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d813      	bhi.n	8007f86 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	4798      	blx	r3
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	88db      	ldrh	r3, [r3, #6]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d110      	bne.n	8007f9a <USBD_StdItfReq+0x7a>
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10d      	bne.n	8007f9a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fd73 	bl	8008a6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f84:	e009      	b.n	8007f9a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fca3 	bl	80088d4 <USBD_CtlError>
          break;
 8007f8e:	e004      	b.n	8007f9a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fc9e 	bl	80088d4 <USBD_CtlError>
          break;
 8007f98:	e000      	b.n	8007f9c <USBD_StdItfReq+0x7c>
          break;
 8007f9a:	bf00      	nop
      }
      break;
 8007f9c:	e004      	b.n	8007fa8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc97 	bl	80088d4 <USBD_CtlError>
      break;
 8007fa6:	bf00      	nop
  }

  return ret;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	889b      	ldrh	r3, [r3, #4]
 8007fc4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d007      	beq.n	8007fe2 <USBD_StdEPReq+0x30>
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	f200 8145 	bhi.w	8008262 <USBD_StdEPReq+0x2b0>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00c      	beq.n	8007ff6 <USBD_StdEPReq+0x44>
 8007fdc:	2b20      	cmp	r3, #32
 8007fde:	f040 8140 	bne.w	8008262 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	4798      	blx	r3
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff4:	e13a      	b.n	800826c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d007      	beq.n	800800e <USBD_StdEPReq+0x5c>
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	f300 8129 	bgt.w	8008256 <USBD_StdEPReq+0x2a4>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d07f      	beq.n	8008108 <USBD_StdEPReq+0x156>
 8008008:	2b01      	cmp	r3, #1
 800800a:	d03c      	beq.n	8008086 <USBD_StdEPReq+0xd4>
 800800c:	e123      	b.n	8008256 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b02      	cmp	r3, #2
 8008018:	d002      	beq.n	8008020 <USBD_StdEPReq+0x6e>
 800801a:	2b03      	cmp	r3, #3
 800801c:	d016      	beq.n	800804c <USBD_StdEPReq+0x9a>
 800801e:	e02c      	b.n	800807a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00d      	beq.n	8008042 <USBD_StdEPReq+0x90>
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	2b80      	cmp	r3, #128	; 0x80
 800802a:	d00a      	beq.n	8008042 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 f94b 	bl	80092cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008036:	2180      	movs	r1, #128	; 0x80
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 f947 	bl	80092cc <USBD_LL_StallEP>
 800803e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008040:	e020      	b.n	8008084 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fc45 	bl	80088d4 <USBD_CtlError>
              break;
 800804a:	e01b      	b.n	8008084 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	885b      	ldrh	r3, [r3, #2]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10e      	bne.n	8008072 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008054:	7bbb      	ldrb	r3, [r7, #14]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00b      	beq.n	8008072 <USBD_StdEPReq+0xc0>
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b80      	cmp	r3, #128	; 0x80
 800805e:	d008      	beq.n	8008072 <USBD_StdEPReq+0xc0>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	88db      	ldrh	r3, [r3, #6]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d104      	bne.n	8008072 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 f92d 	bl	80092cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fcf9 	bl	8008a6a <USBD_CtlSendStatus>

              break;
 8008078:	e004      	b.n	8008084 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fc29 	bl	80088d4 <USBD_CtlError>
              break;
 8008082:	bf00      	nop
          }
          break;
 8008084:	e0ec      	b.n	8008260 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d002      	beq.n	8008098 <USBD_StdEPReq+0xe6>
 8008092:	2b03      	cmp	r3, #3
 8008094:	d016      	beq.n	80080c4 <USBD_StdEPReq+0x112>
 8008096:	e030      	b.n	80080fa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00d      	beq.n	80080ba <USBD_StdEPReq+0x108>
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b80      	cmp	r3, #128	; 0x80
 80080a2:	d00a      	beq.n	80080ba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 f90f 	bl	80092cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f90b 	bl	80092cc <USBD_LL_StallEP>
 80080b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080b8:	e025      	b.n	8008106 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fc09 	bl	80088d4 <USBD_CtlError>
              break;
 80080c2:	e020      	b.n	8008106 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	885b      	ldrh	r3, [r3, #2]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d11b      	bne.n	8008104 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 f915 	bl	800930a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fcc2 	bl	8008a6a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80080f8:	e004      	b.n	8008104 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fbe9 	bl	80088d4 <USBD_CtlError>
              break;
 8008102:	e000      	b.n	8008106 <USBD_StdEPReq+0x154>
              break;
 8008104:	bf00      	nop
          }
          break;
 8008106:	e0ab      	b.n	8008260 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b02      	cmp	r3, #2
 8008112:	d002      	beq.n	800811a <USBD_StdEPReq+0x168>
 8008114:	2b03      	cmp	r3, #3
 8008116:	d032      	beq.n	800817e <USBD_StdEPReq+0x1cc>
 8008118:	e097      	b.n	800824a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <USBD_StdEPReq+0x17e>
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2b80      	cmp	r3, #128	; 0x80
 8008124:	d004      	beq.n	8008130 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fbd3 	bl	80088d4 <USBD_CtlError>
                break;
 800812e:	e091      	b.n	8008254 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008134:	2b00      	cmp	r3, #0
 8008136:	da0b      	bge.n	8008150 <USBD_StdEPReq+0x19e>
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	3310      	adds	r3, #16
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	4413      	add	r3, r2
 800814c:	3304      	adds	r3, #4
 800814e:	e00b      	b.n	8008168 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	4413      	add	r3, r2
 8008166:	3304      	adds	r3, #4
 8008168:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2202      	movs	r2, #2
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fc1d 	bl	80089b6 <USBD_CtlSendData>
              break;
 800817c:	e06a      	b.n	8008254 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800817e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008182:	2b00      	cmp	r3, #0
 8008184:	da11      	bge.n	80081aa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	f003 020f 	and.w	r2, r3, #15
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	3324      	adds	r3, #36	; 0x24
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d117      	bne.n	80081d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fb96 	bl	80088d4 <USBD_CtlError>
                  break;
 80081a8:	e054      	b.n	8008254 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	f003 020f 	and.w	r2, r3, #15
 80081b0:	6879      	ldr	r1, [r7, #4]
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	440b      	add	r3, r1
 80081bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d104      	bne.n	80081d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fb83 	bl	80088d4 <USBD_CtlError>
                  break;
 80081ce:	e041      	b.n	8008254 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	da0b      	bge.n	80081f0 <USBD_StdEPReq+0x23e>
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	3310      	adds	r3, #16
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	4413      	add	r3, r2
 80081ec:	3304      	adds	r3, #4
 80081ee:	e00b      	b.n	8008208 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	4413      	add	r3, r2
 8008206:	3304      	adds	r3, #4
 8008208:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <USBD_StdEPReq+0x264>
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	2b80      	cmp	r3, #128	; 0x80
 8008214:	d103      	bne.n	800821e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	e00e      	b.n	800823c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f001 f890 	bl	8009348 <USBD_LL_IsStallEP>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2201      	movs	r2, #1
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	e002      	b.n	800823c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2202      	movs	r2, #2
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fbb7 	bl	80089b6 <USBD_CtlSendData>
              break;
 8008248:	e004      	b.n	8008254 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fb41 	bl	80088d4 <USBD_CtlError>
              break;
 8008252:	bf00      	nop
          }
          break;
 8008254:	e004      	b.n	8008260 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fb3b 	bl	80088d4 <USBD_CtlError>
          break;
 800825e:	bf00      	nop
      }
      break;
 8008260:	e004      	b.n	800826c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fb35 	bl	80088d4 <USBD_CtlError>
      break;
 800826a:	bf00      	nop
  }

  return ret;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	885b      	ldrh	r3, [r3, #2]
 8008292:	0a1b      	lsrs	r3, r3, #8
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	2b06      	cmp	r3, #6
 800829a:	f200 8128 	bhi.w	80084ee <USBD_GetDescriptor+0x276>
 800829e:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <USBD_GetDescriptor+0x2c>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082c1 	.word	0x080082c1
 80082a8:	080082d9 	.word	0x080082d9
 80082ac:	08008319 	.word	0x08008319
 80082b0:	080084ef 	.word	0x080084ef
 80082b4:	080084ef 	.word	0x080084ef
 80082b8:	0800848f 	.word	0x0800848f
 80082bc:	080084bb 	.word	0x080084bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	7c12      	ldrb	r2, [r2, #16]
 80082cc:	f107 0108 	add.w	r1, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
      break;
 80082d6:	e112      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7c1b      	ldrb	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10d      	bne.n	80082fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e8:	f107 0208 	add.w	r2, r7, #8
 80082ec:	4610      	mov	r0, r2
 80082ee:	4798      	blx	r3
 80082f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3301      	adds	r3, #1
 80082f6:	2202      	movs	r2, #2
 80082f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082fa:	e100      	b.n	80084fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	f107 0208 	add.w	r2, r7, #8
 8008308:	4610      	mov	r0, r2
 800830a:	4798      	blx	r3
 800830c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3301      	adds	r3, #1
 8008312:	2202      	movs	r2, #2
 8008314:	701a      	strb	r2, [r3, #0]
      break;
 8008316:	e0f2      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b05      	cmp	r3, #5
 8008320:	f200 80ac 	bhi.w	800847c <USBD_GetDescriptor+0x204>
 8008324:	a201      	add	r2, pc, #4	; (adr r2, 800832c <USBD_GetDescriptor+0xb4>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008345 	.word	0x08008345
 8008330:	08008379 	.word	0x08008379
 8008334:	080083ad 	.word	0x080083ad
 8008338:	080083e1 	.word	0x080083e1
 800833c:	08008415 	.word	0x08008415
 8008340:	08008449 	.word	0x08008449
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	7c12      	ldrb	r2, [r2, #16]
 800835c:	f107 0108 	add.w	r1, r7, #8
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
 8008364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008366:	e091      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fab2 	bl	80088d4 <USBD_CtlError>
            err++;
 8008370:	7afb      	ldrb	r3, [r7, #11]
 8008372:	3301      	adds	r3, #1
 8008374:	72fb      	strb	r3, [r7, #11]
          break;
 8008376:	e089      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7c12      	ldrb	r2, [r2, #16]
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	4610      	mov	r0, r2
 8008396:	4798      	blx	r3
 8008398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839a:	e077      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa98 	bl	80088d4 <USBD_CtlError>
            err++;
 80083a4:	7afb      	ldrb	r3, [r7, #11]
 80083a6:	3301      	adds	r3, #1
 80083a8:	72fb      	strb	r3, [r7, #11]
          break;
 80083aa:	e06f      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	7c12      	ldrb	r2, [r2, #16]
 80083c4:	f107 0108 	add.w	r1, r7, #8
 80083c8:	4610      	mov	r0, r2
 80083ca:	4798      	blx	r3
 80083cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ce:	e05d      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa7e 	bl	80088d4 <USBD_CtlError>
            err++;
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	3301      	adds	r3, #1
 80083dc:	72fb      	strb	r3, [r7, #11]
          break;
 80083de:	e055      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00b      	beq.n	8008404 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7c12      	ldrb	r2, [r2, #16]
 80083f8:	f107 0108 	add.w	r1, r7, #8
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008402:	e043      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa64 	bl	80088d4 <USBD_CtlError>
            err++;
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	3301      	adds	r3, #1
 8008410:	72fb      	strb	r3, [r7, #11]
          break;
 8008412:	e03b      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	7c12      	ldrb	r2, [r2, #16]
 800842c:	f107 0108 	add.w	r1, r7, #8
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
 8008434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008436:	e029      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa4a 	bl	80088d4 <USBD_CtlError>
            err++;
 8008440:	7afb      	ldrb	r3, [r7, #11]
 8008442:	3301      	adds	r3, #1
 8008444:	72fb      	strb	r3, [r7, #11]
          break;
 8008446:	e021      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	7c12      	ldrb	r2, [r2, #16]
 8008460:	f107 0108 	add.w	r1, r7, #8
 8008464:	4610      	mov	r0, r2
 8008466:	4798      	blx	r3
 8008468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800846a:	e00f      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fa30 	bl	80088d4 <USBD_CtlError>
            err++;
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	3301      	adds	r3, #1
 8008478:	72fb      	strb	r3, [r7, #11]
          break;
 800847a:	e007      	b.n	800848c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa28 	bl	80088d4 <USBD_CtlError>
          err++;
 8008484:	7afb      	ldrb	r3, [r7, #11]
 8008486:	3301      	adds	r3, #1
 8008488:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800848a:	bf00      	nop
      }
      break;
 800848c:	e037      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7c1b      	ldrb	r3, [r3, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d109      	bne.n	80084aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849e:	f107 0208 	add.w	r2, r7, #8
 80084a2:	4610      	mov	r0, r2
 80084a4:	4798      	blx	r3
 80084a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084a8:	e029      	b.n	80084fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa11 	bl	80088d4 <USBD_CtlError>
        err++;
 80084b2:	7afb      	ldrb	r3, [r7, #11]
 80084b4:	3301      	adds	r3, #1
 80084b6:	72fb      	strb	r3, [r7, #11]
      break;
 80084b8:	e021      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7c1b      	ldrb	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10d      	bne.n	80084de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	f107 0208 	add.w	r2, r7, #8
 80084ce:	4610      	mov	r0, r2
 80084d0:	4798      	blx	r3
 80084d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3301      	adds	r3, #1
 80084d8:	2207      	movs	r2, #7
 80084da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084dc:	e00f      	b.n	80084fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f9f7 	bl	80088d4 <USBD_CtlError>
        err++;
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	3301      	adds	r3, #1
 80084ea:	72fb      	strb	r3, [r7, #11]
      break;
 80084ec:	e007      	b.n	80084fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f9ef 	bl	80088d4 <USBD_CtlError>
      err++;
 80084f6:	7afb      	ldrb	r3, [r7, #11]
 80084f8:	3301      	adds	r3, #1
 80084fa:	72fb      	strb	r3, [r7, #11]
      break;
 80084fc:	bf00      	nop
  }

  if (err != 0U)
 80084fe:	7afb      	ldrb	r3, [r7, #11]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11e      	bne.n	8008542 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	88db      	ldrh	r3, [r3, #6]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d016      	beq.n	800853a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800850c:	893b      	ldrh	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00e      	beq.n	8008530 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	88da      	ldrh	r2, [r3, #6]
 8008516:	893b      	ldrh	r3, [r7, #8]
 8008518:	4293      	cmp	r3, r2
 800851a:	bf28      	it	cs
 800851c:	4613      	movcs	r3, r2
 800851e:	b29b      	uxth	r3, r3
 8008520:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008522:	893b      	ldrh	r3, [r7, #8]
 8008524:	461a      	mov	r2, r3
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fa44 	bl	80089b6 <USBD_CtlSendData>
 800852e:	e009      	b.n	8008544 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f9ce 	bl	80088d4 <USBD_CtlError>
 8008538:	e004      	b.n	8008544 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fa95 	bl	8008a6a <USBD_CtlSendStatus>
 8008540:	e000      	b.n	8008544 <USBD_GetDescriptor+0x2cc>
    return;
 8008542:	bf00      	nop
  }
}
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop

0800854c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	889b      	ldrh	r3, [r3, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d131      	bne.n	80085c2 <USBD_SetAddress+0x76>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	88db      	ldrh	r3, [r3, #6]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d12d      	bne.n	80085c2 <USBD_SetAddress+0x76>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	885b      	ldrh	r3, [r3, #2]
 800856a:	2b7f      	cmp	r3, #127	; 0x7f
 800856c:	d829      	bhi.n	80085c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	b2db      	uxtb	r3, r3
 8008574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b03      	cmp	r3, #3
 8008584:	d104      	bne.n	8008590 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f9a3 	bl	80088d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858e:	e01d      	b.n	80085cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	7bfa      	ldrb	r2, [r7, #15]
 8008594:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 feff 	bl	80093a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa61 	bl	8008a6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d004      	beq.n	80085b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b6:	e009      	b.n	80085cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c0:	e004      	b.n	80085cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f985 	bl	80088d4 <USBD_CtlError>
  }
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	885b      	ldrh	r3, [r3, #2]
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	4b4c      	ldr	r3, [pc, #304]	; (800871c <USBD_SetConfig+0x148>)
 80085ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085ec:	4b4b      	ldr	r3, [pc, #300]	; (800871c <USBD_SetConfig+0x148>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d905      	bls.n	8008600 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f96c 	bl	80088d4 <USBD_CtlError>
    return USBD_FAIL;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e088      	b.n	8008712 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d002      	beq.n	8008612 <USBD_SetConfig+0x3e>
 800860c:	2b03      	cmp	r3, #3
 800860e:	d025      	beq.n	800865c <USBD_SetConfig+0x88>
 8008610:	e071      	b.n	80086f6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008612:	4b42      	ldr	r3, [pc, #264]	; (800871c <USBD_SetConfig+0x148>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d01c      	beq.n	8008654 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800861a:	4b40      	ldr	r3, [pc, #256]	; (800871c <USBD_SetConfig+0x148>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008624:	4b3d      	ldr	r3, [pc, #244]	; (800871c <USBD_SetConfig+0x148>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff f948 	bl	80078c0 <USBD_SetClassConfig>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f949 	bl	80088d4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008642:	e065      	b.n	8008710 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fa10 	bl	8008a6a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2203      	movs	r2, #3
 800864e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008652:	e05d      	b.n	8008710 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fa08 	bl	8008a6a <USBD_CtlSendStatus>
      break;
 800865a:	e059      	b.n	8008710 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800865c:	4b2f      	ldr	r3, [pc, #188]	; (800871c <USBD_SetConfig+0x148>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d112      	bne.n	800868a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800866c:	4b2b      	ldr	r3, [pc, #172]	; (800871c <USBD_SetConfig+0x148>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008676:	4b29      	ldr	r3, [pc, #164]	; (800871c <USBD_SetConfig+0x148>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff f93b 	bl	80078f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f9f1 	bl	8008a6a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008688:	e042      	b.n	8008710 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800868a:	4b24      	ldr	r3, [pc, #144]	; (800871c <USBD_SetConfig+0x148>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	429a      	cmp	r2, r3
 8008696:	d02a      	beq.n	80086ee <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	b2db      	uxtb	r3, r3
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff f929 	bl	80078f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80086a6:	4b1d      	ldr	r3, [pc, #116]	; (800871c <USBD_SetConfig+0x148>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086b0:	4b1a      	ldr	r3, [pc, #104]	; (800871c <USBD_SetConfig+0x148>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff f902 	bl	80078c0 <USBD_SetClassConfig>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00f      	beq.n	80086e6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f903 	bl	80088d4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff f90e 	bl	80078f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2202      	movs	r2, #2
 80086e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086e4:	e014      	b.n	8008710 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f9bf 	bl	8008a6a <USBD_CtlSendStatus>
      break;
 80086ec:	e010      	b.n	8008710 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f9bb 	bl	8008a6a <USBD_CtlSendStatus>
      break;
 80086f4:	e00c      	b.n	8008710 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f8eb 	bl	80088d4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086fe:	4b07      	ldr	r3, [pc, #28]	; (800871c <USBD_SetConfig+0x148>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff f8f7 	bl	80078f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800870a:	2303      	movs	r3, #3
 800870c:	73fb      	strb	r3, [r7, #15]
      break;
 800870e:	bf00      	nop
  }

  return ret;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	200003e8 	.word	0x200003e8

08008720 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	88db      	ldrh	r3, [r3, #6]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d004      	beq.n	800873c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f8cd 	bl	80088d4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800873a:	e023      	b.n	8008784 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b02      	cmp	r3, #2
 8008746:	dc02      	bgt.n	800874e <USBD_GetConfig+0x2e>
 8008748:	2b00      	cmp	r3, #0
 800874a:	dc03      	bgt.n	8008754 <USBD_GetConfig+0x34>
 800874c:	e015      	b.n	800877a <USBD_GetConfig+0x5a>
 800874e:	2b03      	cmp	r3, #3
 8008750:	d00b      	beq.n	800876a <USBD_GetConfig+0x4a>
 8008752:	e012      	b.n	800877a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3308      	adds	r3, #8
 800875e:	2201      	movs	r2, #1
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f927 	bl	80089b6 <USBD_CtlSendData>
        break;
 8008768:	e00c      	b.n	8008784 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3304      	adds	r3, #4
 800876e:	2201      	movs	r2, #1
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f91f 	bl	80089b6 <USBD_CtlSendData>
        break;
 8008778:	e004      	b.n	8008784 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f8a9 	bl	80088d4 <USBD_CtlError>
        break;
 8008782:	bf00      	nop
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879c:	b2db      	uxtb	r3, r3
 800879e:	3b01      	subs	r3, #1
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d81e      	bhi.n	80087e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	88db      	ldrh	r3, [r3, #6]
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d004      	beq.n	80087b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f890 	bl	80088d4 <USBD_CtlError>
        break;
 80087b4:	e01a      	b.n	80087ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f043 0202 	orr.w	r2, r3, #2
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	330c      	adds	r3, #12
 80087d6:	2202      	movs	r2, #2
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f8eb 	bl	80089b6 <USBD_CtlSendData>
      break;
 80087e0:	e004      	b.n	80087ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f875 	bl	80088d4 <USBD_CtlError>
      break;
 80087ea:	bf00      	nop
  }
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	885b      	ldrh	r3, [r3, #2]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d106      	bne.n	8008814 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f92b 	bl	8008a6a <USBD_CtlSendStatus>
  }
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882c:	b2db      	uxtb	r3, r3
 800882e:	3b01      	subs	r3, #1
 8008830:	2b02      	cmp	r3, #2
 8008832:	d80b      	bhi.n	800884c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	885b      	ldrh	r3, [r3, #2]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d10c      	bne.n	8008856 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f910 	bl	8008a6a <USBD_CtlSendStatus>
      }
      break;
 800884a:	e004      	b.n	8008856 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f840 	bl	80088d4 <USBD_CtlError>
      break;
 8008854:	e000      	b.n	8008858 <USBD_ClrFeature+0x3c>
      break;
 8008856:	bf00      	nop
  }
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	781a      	ldrb	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	781a      	ldrb	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3301      	adds	r3, #1
 8008888:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f7ff fabb 	bl	8007e06 <SWAPBYTE>
 8008890:	4603      	mov	r3, r0
 8008892:	461a      	mov	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3301      	adds	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3301      	adds	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f7ff faae 	bl	8007e06 <SWAPBYTE>
 80088aa:	4603      	mov	r3, r0
 80088ac:	461a      	mov	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3301      	adds	r3, #1
 80088bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f7ff faa1 	bl	8007e06 <SWAPBYTE>
 80088c4:	4603      	mov	r3, r0
 80088c6:	461a      	mov	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	80da      	strh	r2, [r3, #6]
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088de:	2180      	movs	r1, #128	; 0x80
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fcf3 	bl	80092cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088e6:	2100      	movs	r1, #0
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fcef 	bl	80092cc <USBD_LL_StallEP>
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d036      	beq.n	800897a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008910:	6938      	ldr	r0, [r7, #16]
 8008912:	f000 f836 	bl	8008982 <USBD_GetLen>
 8008916:	4603      	mov	r3, r0
 8008918:	3301      	adds	r3, #1
 800891a:	b29b      	uxth	r3, r3
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	4413      	add	r3, r2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	7812      	ldrb	r2, [r2, #0]
 800892e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	3301      	adds	r3, #1
 8008934:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	4413      	add	r3, r2
 800893c:	2203      	movs	r2, #3
 800893e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	3301      	adds	r3, #1
 8008944:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008946:	e013      	b.n	8008970 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	4413      	add	r3, r2
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	3301      	adds	r3, #1
 8008958:	613b      	str	r3, [r7, #16]
    idx++;
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	3301      	adds	r3, #1
 800895e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	4413      	add	r3, r2
 8008966:	2200      	movs	r2, #0
 8008968:	701a      	strb	r2, [r3, #0]
    idx++;
 800896a:	7dfb      	ldrb	r3, [r7, #23]
 800896c:	3301      	adds	r3, #1
 800896e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e7      	bne.n	8008948 <USBD_GetString+0x52>
 8008978:	e000      	b.n	800897c <USBD_GetString+0x86>
    return;
 800897a:	bf00      	nop
  }
}
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008982:	b480      	push	{r7}
 8008984:	b085      	sub	sp, #20
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008992:	e005      	b.n	80089a0 <USBD_GetLen+0x1e>
  {
    len++;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	3301      	adds	r3, #1
 8008998:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	3301      	adds	r3, #1
 800899e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1f5      	bne.n	8008994 <USBD_GetLen+0x12>
  }

  return len;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2202      	movs	r2, #2
 80089c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	2100      	movs	r1, #0
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fcfe 	bl	80093de <USBD_LL_Transmit>

  return USBD_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	2100      	movs	r1, #0
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fced 	bl	80093de <USBD_LL_Transmit>

  return USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2203      	movs	r2, #3
 8008a1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	2100      	movs	r1, #0
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fcf1 	bl	8009420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	2100      	movs	r1, #0
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fce0 	bl	8009420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2204      	movs	r2, #4
 8008a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2100      	movs	r1, #0
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fcac 	bl	80093de <USBD_LL_Transmit>

  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2205      	movs	r2, #5
 8008a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fcba 	bl	8009420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008abc:	2200      	movs	r2, #0
 8008abe:	4912      	ldr	r1, [pc, #72]	; (8008b08 <MX_USB_DEVICE_Init+0x50>)
 8008ac0:	4812      	ldr	r0, [pc, #72]	; (8008b0c <MX_USB_DEVICE_Init+0x54>)
 8008ac2:	f7fe fe8f 	bl	80077e4 <USBD_Init>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008acc:	f7f9 f9d8 	bl	8001e80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ad0:	490f      	ldr	r1, [pc, #60]	; (8008b10 <MX_USB_DEVICE_Init+0x58>)
 8008ad2:	480e      	ldr	r0, [pc, #56]	; (8008b0c <MX_USB_DEVICE_Init+0x54>)
 8008ad4:	f7fe feb6 	bl	8007844 <USBD_RegisterClass>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ade:	f7f9 f9cf 	bl	8001e80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ae2:	490c      	ldr	r1, [pc, #48]	; (8008b14 <MX_USB_DEVICE_Init+0x5c>)
 8008ae4:	4809      	ldr	r0, [pc, #36]	; (8008b0c <MX_USB_DEVICE_Init+0x54>)
 8008ae6:	f7fe fdd7 	bl	8007698 <USBD_CDC_RegisterInterface>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008af0:	f7f9 f9c6 	bl	8001e80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008af4:	4805      	ldr	r0, [pc, #20]	; (8008b0c <MX_USB_DEVICE_Init+0x54>)
 8008af6:	f7fe fecc 	bl	8007892 <USBD_Start>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b00:	f7f9 f9be 	bl	8001e80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b04:	bf00      	nop
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000130 	.word	0x20000130
 8008b0c:	200008b0 	.word	0x200008b0
 8008b10:	20000018 	.word	0x20000018
 8008b14:	2000011c 	.word	0x2000011c

08008b18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	4905      	ldr	r1, [pc, #20]	; (8008b34 <CDC_Init_FS+0x1c>)
 8008b20:	4805      	ldr	r0, [pc, #20]	; (8008b38 <CDC_Init_FS+0x20>)
 8008b22:	f7fe fdce 	bl	80076c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b26:	4905      	ldr	r1, [pc, #20]	; (8008b3c <CDC_Init_FS+0x24>)
 8008b28:	4803      	ldr	r0, [pc, #12]	; (8008b38 <CDC_Init_FS+0x20>)
 8008b2a:	f7fe fde8 	bl	80076fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b2e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20001380 	.word	0x20001380
 8008b38:	200008b0 	.word	0x200008b0
 8008b3c:	20000b80 	.word	0x20000b80

08008b40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b40:	b480      	push	{r7}
 8008b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	71fb      	strb	r3, [r7, #7]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	2b23      	cmp	r3, #35	; 0x23
 8008b64:	d84a      	bhi.n	8008bfc <CDC_Control_FS+0xac>
 8008b66:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <CDC_Control_FS+0x1c>)
 8008b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6c:	08008bfd 	.word	0x08008bfd
 8008b70:	08008bfd 	.word	0x08008bfd
 8008b74:	08008bfd 	.word	0x08008bfd
 8008b78:	08008bfd 	.word	0x08008bfd
 8008b7c:	08008bfd 	.word	0x08008bfd
 8008b80:	08008bfd 	.word	0x08008bfd
 8008b84:	08008bfd 	.word	0x08008bfd
 8008b88:	08008bfd 	.word	0x08008bfd
 8008b8c:	08008bfd 	.word	0x08008bfd
 8008b90:	08008bfd 	.word	0x08008bfd
 8008b94:	08008bfd 	.word	0x08008bfd
 8008b98:	08008bfd 	.word	0x08008bfd
 8008b9c:	08008bfd 	.word	0x08008bfd
 8008ba0:	08008bfd 	.word	0x08008bfd
 8008ba4:	08008bfd 	.word	0x08008bfd
 8008ba8:	08008bfd 	.word	0x08008bfd
 8008bac:	08008bfd 	.word	0x08008bfd
 8008bb0:	08008bfd 	.word	0x08008bfd
 8008bb4:	08008bfd 	.word	0x08008bfd
 8008bb8:	08008bfd 	.word	0x08008bfd
 8008bbc:	08008bfd 	.word	0x08008bfd
 8008bc0:	08008bfd 	.word	0x08008bfd
 8008bc4:	08008bfd 	.word	0x08008bfd
 8008bc8:	08008bfd 	.word	0x08008bfd
 8008bcc:	08008bfd 	.word	0x08008bfd
 8008bd0:	08008bfd 	.word	0x08008bfd
 8008bd4:	08008bfd 	.word	0x08008bfd
 8008bd8:	08008bfd 	.word	0x08008bfd
 8008bdc:	08008bfd 	.word	0x08008bfd
 8008be0:	08008bfd 	.word	0x08008bfd
 8008be4:	08008bfd 	.word	0x08008bfd
 8008be8:	08008bfd 	.word	0x08008bfd
 8008bec:	08008bfd 	.word	0x08008bfd
 8008bf0:	08008bfd 	.word	0x08008bfd
 8008bf4:	08008bfd 	.word	0x08008bfd
 8008bf8:	08008bfd 	.word	0x08008bfd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bfc:	bf00      	nop
  }

  return (USBD_OK);
 8008bfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c16:	6879      	ldr	r1, [r7, #4]
 8008c18:	4806      	ldr	r0, [pc, #24]	; (8008c34 <CDC_Receive_FS+0x28>)
 8008c1a:	f7fe fd70 	bl	80076fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c1e:	4805      	ldr	r0, [pc, #20]	; (8008c34 <CDC_Receive_FS+0x28>)
 8008c20:	f7fe fdb6 	bl	8007790 <USBD_CDC_ReceivePacket>
  recvUSBStruct = (struct recvUSBStruct_t*)(Buf);
 8008c24:	4a04      	ldr	r2, [pc, #16]	; (8008c38 <CDC_Receive_FS+0x2c>)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6013      	str	r3, [r2, #0]
  return (USBD_OK);
 8008c2a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	200008b0 	.word	0x200008b0
 8008c38:	2000036c 	.word	0x2000036c

08008c3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <CDC_Transmit_FS+0x48>)
 8008c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e00b      	b.n	8008c7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c62:	887b      	ldrh	r3, [r7, #2]
 8008c64:	461a      	mov	r2, r3
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4806      	ldr	r0, [pc, #24]	; (8008c84 <CDC_Transmit_FS+0x48>)
 8008c6a:	f7fe fd2a 	bl	80076c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c6e:	4805      	ldr	r0, [pc, #20]	; (8008c84 <CDC_Transmit_FS+0x48>)
 8008c70:	f7fe fd5e 	bl	8007730 <USBD_CDC_TransmitPacket>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	200008b0 	.word	0x200008b0

08008c88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	4613      	mov	r3, r2
 8008c94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
	...

08008cac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6039      	str	r1, [r7, #0]
 8008cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2212      	movs	r2, #18
 8008cbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008cbe:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	2000014c 	.word	0x2000014c

08008cd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	6039      	str	r1, [r7, #0]
 8008cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2204      	movs	r2, #4
 8008ce0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ce2:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20000160 	.word	0x20000160

08008cf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d105      	bne.n	8008d12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	4907      	ldr	r1, [pc, #28]	; (8008d28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d0a:	4808      	ldr	r0, [pc, #32]	; (8008d2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008d0c:	f7ff fdf3 	bl	80088f6 <USBD_GetString>
 8008d10:	e004      	b.n	8008d1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	4904      	ldr	r1, [pc, #16]	; (8008d28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d16:	4805      	ldr	r0, [pc, #20]	; (8008d2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008d18:	f7ff fded 	bl	80088f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d1c:	4b02      	ldr	r3, [pc, #8]	; (8008d28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20001b80 	.word	0x20001b80
 8008d2c:	0800bf40 	.word	0x0800bf40

08008d30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	6039      	str	r1, [r7, #0]
 8008d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	4904      	ldr	r1, [pc, #16]	; (8008d50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d40:	4804      	ldr	r0, [pc, #16]	; (8008d54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d42:	f7ff fdd8 	bl	80088f6 <USBD_GetString>
  return USBD_StrDesc;
 8008d46:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20001b80 	.word	0x20001b80
 8008d54:	0800bf58 	.word	0x0800bf58

08008d58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	221a      	movs	r2, #26
 8008d68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d6a:	f000 f843 	bl	8008df4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d6e:	4b02      	ldr	r3, [pc, #8]	; (8008d78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000164 	.word	0x20000164

08008d7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d105      	bne.n	8008d9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	4907      	ldr	r1, [pc, #28]	; (8008db0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d92:	4808      	ldr	r0, [pc, #32]	; (8008db4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d94:	f7ff fdaf 	bl	80088f6 <USBD_GetString>
 8008d98:	e004      	b.n	8008da4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	4904      	ldr	r1, [pc, #16]	; (8008db0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d9e:	4805      	ldr	r0, [pc, #20]	; (8008db4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008da0:	f7ff fda9 	bl	80088f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20001b80 	.word	0x20001b80
 8008db4:	0800bf6c 	.word	0x0800bf6c

08008db8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d105      	bne.n	8008dd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	4907      	ldr	r1, [pc, #28]	; (8008dec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dce:	4808      	ldr	r0, [pc, #32]	; (8008df0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dd0:	f7ff fd91 	bl	80088f6 <USBD_GetString>
 8008dd4:	e004      	b.n	8008de0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	4904      	ldr	r1, [pc, #16]	; (8008dec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dda:	4805      	ldr	r0, [pc, #20]	; (8008df0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ddc:	f7ff fd8b 	bl	80088f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de0:	4b02      	ldr	r3, [pc, #8]	; (8008dec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20001b80 	.word	0x20001b80
 8008df0:	0800bf78 	.word	0x0800bf78

08008df4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dfa:	4b0f      	ldr	r3, [pc, #60]	; (8008e38 <Get_SerialNum+0x44>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e00:	4b0e      	ldr	r3, [pc, #56]	; (8008e3c <Get_SerialNum+0x48>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e06:	4b0e      	ldr	r3, [pc, #56]	; (8008e40 <Get_SerialNum+0x4c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d009      	beq.n	8008e2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	4909      	ldr	r1, [pc, #36]	; (8008e44 <Get_SerialNum+0x50>)
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 f814 	bl	8008e4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e24:	2204      	movs	r2, #4
 8008e26:	4908      	ldr	r1, [pc, #32]	; (8008e48 <Get_SerialNum+0x54>)
 8008e28:	68b8      	ldr	r0, [r7, #8]
 8008e2a:	f000 f80f 	bl	8008e4c <IntToUnicode>
  }
}
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	1fff7a10 	.word	0x1fff7a10
 8008e3c:	1fff7a14 	.word	0x1fff7a14
 8008e40:	1fff7a18 	.word	0x1fff7a18
 8008e44:	20000166 	.word	0x20000166
 8008e48:	20000176 	.word	0x20000176

08008e4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	4613      	mov	r3, r2
 8008e58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]
 8008e62:	e027      	b.n	8008eb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	0f1b      	lsrs	r3, r3, #28
 8008e68:	2b09      	cmp	r3, #9
 8008e6a:	d80b      	bhi.n	8008e84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	0f1b      	lsrs	r3, r3, #28
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	005b      	lsls	r3, r3, #1
 8008e76:	4619      	mov	r1, r3
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	440b      	add	r3, r1
 8008e7c:	3230      	adds	r2, #48	; 0x30
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	701a      	strb	r2, [r3, #0]
 8008e82:	e00a      	b.n	8008e9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	0f1b      	lsrs	r3, r3, #28
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	4619      	mov	r1, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	440b      	add	r3, r1
 8008e94:	3237      	adds	r2, #55	; 0x37
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	011b      	lsls	r3, r3, #4
 8008e9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	75fb      	strb	r3, [r7, #23]
 8008eb4:	7dfa      	ldrb	r2, [r7, #23]
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d3d3      	bcc.n	8008e64 <IntToUnicode+0x18>
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	bf00      	nop
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
	...

08008ecc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	; 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed4:	f107 0314 	add.w	r3, r7, #20
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	605a      	str	r2, [r3, #4]
 8008ede:	609a      	str	r2, [r3, #8]
 8008ee0:	60da      	str	r2, [r3, #12]
 8008ee2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eec:	d147      	bne.n	8008f7e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	4b25      	ldr	r3, [pc, #148]	; (8008f88 <HAL_PCD_MspInit+0xbc>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	4a24      	ldr	r2, [pc, #144]	; (8008f88 <HAL_PCD_MspInit+0xbc>)
 8008ef8:	f043 0301 	orr.w	r3, r3, #1
 8008efc:	6313      	str	r3, [r2, #48]	; 0x30
 8008efe:	4b22      	ldr	r3, [pc, #136]	; (8008f88 <HAL_PCD_MspInit+0xbc>)
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f18:	f107 0314 	add.w	r3, r7, #20
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	481b      	ldr	r0, [pc, #108]	; (8008f8c <HAL_PCD_MspInit+0xc0>)
 8008f20:	f7f9 fd38 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f32:	2300      	movs	r3, #0
 8008f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f36:	230a      	movs	r3, #10
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f3a:	f107 0314 	add.w	r3, r7, #20
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4812      	ldr	r0, [pc, #72]	; (8008f8c <HAL_PCD_MspInit+0xc0>)
 8008f42:	f7f9 fd27 	bl	8002994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f46:	4b10      	ldr	r3, [pc, #64]	; (8008f88 <HAL_PCD_MspInit+0xbc>)
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	4a0f      	ldr	r2, [pc, #60]	; (8008f88 <HAL_PCD_MspInit+0xbc>)
 8008f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f50:	6353      	str	r3, [r2, #52]	; 0x34
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <HAL_PCD_MspInit+0xbc>)
 8008f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5a:	4a0b      	ldr	r2, [pc, #44]	; (8008f88 <HAL_PCD_MspInit+0xbc>)
 8008f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f60:	6453      	str	r3, [r2, #68]	; 0x44
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <HAL_PCD_MspInit+0xbc>)
 8008f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	2043      	movs	r0, #67	; 0x43
 8008f74:	f7f9 fcd7 	bl	8002926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f78:	2043      	movs	r0, #67	; 0x43
 8008f7a:	f7f9 fcf0 	bl	800295e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f7e:	bf00      	nop
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	40023800 	.word	0x40023800
 8008f8c:	40020000 	.word	0x40020000

08008f90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f7fe fcbe 	bl	8007928 <USBD_LL_SetupStage>
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008fc6:	78fa      	ldrb	r2, [r7, #3]
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	1a9b      	subs	r3, r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	f7fe fcf8 	bl	80079d2 <USBD_LL_DataOutStage>
}
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	4613      	mov	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	1a9b      	subs	r3, r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	3348      	adds	r3, #72	; 0x48
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	4619      	mov	r1, r3
 8009012:	f7fe fd41 	bl	8007a98 <USBD_LL_DataInStage>
}
 8009016:	bf00      	nop
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b082      	sub	sp, #8
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800902c:	4618      	mov	r0, r3
 800902e:	f7fe fe55 	bl	8007cdc <USBD_LL_SOF>
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009042:	2301      	movs	r3, #1
 8009044:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d102      	bne.n	8009054 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]
 8009052:	e008      	b.n	8009066 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d102      	bne.n	8009062 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800905c:	2301      	movs	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]
 8009060:	e001      	b.n	8009066 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009062:	f7f8 ff0d 	bl	8001e80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800906c:	7bfa      	ldrb	r2, [r7, #15]
 800906e:	4611      	mov	r1, r2
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fdf5 	bl	8007c60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe fda1 	bl	8007bc4 <USBD_LL_Reset>
}
 8009082:	bf00      	nop
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
	...

0800908c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fdf0 	bl	8007c80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	6812      	ldr	r2, [r2, #0]
 80090ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090b2:	f043 0301 	orr.w	r3, r3, #1
 80090b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a1b      	ldr	r3, [r3, #32]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090c0:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <HAL_PCD_SuspendCallback+0x48>)
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	4a03      	ldr	r2, [pc, #12]	; (80090d4 <HAL_PCD_SuspendCallback+0x48>)
 80090c6:	f043 0306 	orr.w	r3, r3, #6
 80090ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090cc:	bf00      	nop
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	e000ed00 	.word	0xe000ed00

080090d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe fde0 	bl	8007cac <USBD_LL_Resume>
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009106:	78fa      	ldrb	r2, [r7, #3]
 8009108:	4611      	mov	r1, r2
 800910a:	4618      	mov	r0, r3
 800910c:	f7fe fe2e 	bl	8007d6c <USBD_LL_IsoOUTIncomplete>
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	4611      	mov	r1, r2
 800912e:	4618      	mov	r0, r3
 8009130:	f7fe fdf6 	bl	8007d20 <USBD_LL_IsoINIncomplete>
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe fe34 	bl	8007db8 <USBD_LL_DevConnected>
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fe31 	bl	8007dce <USBD_LL_DevDisconnected>
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d13c      	bne.n	80091fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009184:	4a20      	ldr	r2, [pc, #128]	; (8009208 <USBD_LL_Init+0x94>)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a1e      	ldr	r2, [pc, #120]	; (8009208 <USBD_LL_Init+0x94>)
 8009190:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009194:	4b1c      	ldr	r3, [pc, #112]	; (8009208 <USBD_LL_Init+0x94>)
 8009196:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800919a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800919c:	4b1a      	ldr	r3, [pc, #104]	; (8009208 <USBD_LL_Init+0x94>)
 800919e:	2204      	movs	r2, #4
 80091a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80091a2:	4b19      	ldr	r3, [pc, #100]	; (8009208 <USBD_LL_Init+0x94>)
 80091a4:	2202      	movs	r2, #2
 80091a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091a8:	4b17      	ldr	r3, [pc, #92]	; (8009208 <USBD_LL_Init+0x94>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091ae:	4b16      	ldr	r3, [pc, #88]	; (8009208 <USBD_LL_Init+0x94>)
 80091b0:	2202      	movs	r2, #2
 80091b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091b4:	4b14      	ldr	r3, [pc, #80]	; (8009208 <USBD_LL_Init+0x94>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091ba:	4b13      	ldr	r3, [pc, #76]	; (8009208 <USBD_LL_Init+0x94>)
 80091bc:	2200      	movs	r2, #0
 80091be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091c0:	4b11      	ldr	r3, [pc, #68]	; (8009208 <USBD_LL_Init+0x94>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80091c6:	4b10      	ldr	r3, [pc, #64]	; (8009208 <USBD_LL_Init+0x94>)
 80091c8:	2201      	movs	r2, #1
 80091ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091cc:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <USBD_LL_Init+0x94>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091d2:	480d      	ldr	r0, [pc, #52]	; (8009208 <USBD_LL_Init+0x94>)
 80091d4:	f7f9 fdab 	bl	8002d2e <HAL_PCD_Init>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80091de:	f7f8 fe4f 	bl	8001e80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091e2:	2180      	movs	r1, #128	; 0x80
 80091e4:	4808      	ldr	r0, [pc, #32]	; (8009208 <USBD_LL_Init+0x94>)
 80091e6:	f7fa ff08 	bl	8003ffa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091ea:	2240      	movs	r2, #64	; 0x40
 80091ec:	2100      	movs	r1, #0
 80091ee:	4806      	ldr	r0, [pc, #24]	; (8009208 <USBD_LL_Init+0x94>)
 80091f0:	f7fa febc 	bl	8003f6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091f4:	2280      	movs	r2, #128	; 0x80
 80091f6:	2101      	movs	r1, #1
 80091f8:	4803      	ldr	r0, [pc, #12]	; (8009208 <USBD_LL_Init+0x94>)
 80091fa:	f7fa feb7 	bl	8003f6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20001d80 	.word	0x20001d80

0800920c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009222:	4618      	mov	r0, r3
 8009224:	f7f9 fea0 	bl	8002f68 <HAL_PCD_Start>
 8009228:	4603      	mov	r3, r0
 800922a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f942 	bl	80094b8 <USBD_Get_USB_Status>
 8009234:	4603      	mov	r3, r0
 8009236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009238:	7bbb      	ldrb	r3, [r7, #14]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	4608      	mov	r0, r1
 800924c:	4611      	mov	r1, r2
 800924e:	461a      	mov	r2, r3
 8009250:	4603      	mov	r3, r0
 8009252:	70fb      	strb	r3, [r7, #3]
 8009254:	460b      	mov	r3, r1
 8009256:	70bb      	strb	r3, [r7, #2]
 8009258:	4613      	mov	r3, r2
 800925a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800926a:	78bb      	ldrb	r3, [r7, #2]
 800926c:	883a      	ldrh	r2, [r7, #0]
 800926e:	78f9      	ldrb	r1, [r7, #3]
 8009270:	f7fa fa84 	bl	800377c <HAL_PCD_EP_Open>
 8009274:	4603      	mov	r3, r0
 8009276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	4618      	mov	r0, r3
 800927c:	f000 f91c 	bl	80094b8 <USBD_Get_USB_Status>
 8009280:	4603      	mov	r3, r0
 8009282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009284:	7bbb      	ldrb	r3, [r7, #14]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	460b      	mov	r3, r1
 8009298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092a8:	78fa      	ldrb	r2, [r7, #3]
 80092aa:	4611      	mov	r1, r2
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fa facd 	bl	800384c <HAL_PCD_EP_Close>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 f8fd 	bl	80094b8 <USBD_Get_USB_Status>
 80092be:	4603      	mov	r3, r0
 80092c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092e6:	78fa      	ldrb	r2, [r7, #3]
 80092e8:	4611      	mov	r1, r2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fa fba5 	bl	8003a3a <HAL_PCD_EP_SetStall>
 80092f0:	4603      	mov	r3, r0
 80092f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f8de 	bl	80094b8 <USBD_Get_USB_Status>
 80092fc:	4603      	mov	r3, r0
 80092fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009300:	7bbb      	ldrb	r3, [r7, #14]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009324:	78fa      	ldrb	r2, [r7, #3]
 8009326:	4611      	mov	r1, r2
 8009328:	4618      	mov	r0, r3
 800932a:	f7fa fbea 	bl	8003b02 <HAL_PCD_EP_ClrStall>
 800932e:	4603      	mov	r3, r0
 8009330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	4618      	mov	r0, r3
 8009336:	f000 f8bf 	bl	80094b8 <USBD_Get_USB_Status>
 800933a:	4603      	mov	r3, r0
 800933c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800933e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800935a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800935c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009360:	2b00      	cmp	r3, #0
 8009362:	da0b      	bge.n	800937c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	4613      	mov	r3, r2
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	440b      	add	r3, r1
 8009376:	333e      	adds	r3, #62	; 0x3e
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	e00b      	b.n	8009394 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009382:	68f9      	ldr	r1, [r7, #12]
 8009384:	4613      	mov	r3, r2
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	440b      	add	r3, r1
 800938e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009392:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093ba:	78fa      	ldrb	r2, [r7, #3]
 80093bc:	4611      	mov	r1, r2
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fa f9b7 	bl	8003732 <HAL_PCD_SetAddress>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 f874 	bl	80094b8 <USBD_Get_USB_Status>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b086      	sub	sp, #24
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
 80093ea:	460b      	mov	r3, r1
 80093ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093fc:	7af9      	ldrb	r1, [r7, #11]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	f7fa fad0 	bl	80039a6 <HAL_PCD_EP_Transmit>
 8009406:	4603      	mov	r3, r0
 8009408:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	4618      	mov	r0, r3
 800940e:	f000 f853 	bl	80094b8 <USBD_Get_USB_Status>
 8009412:	4603      	mov	r3, r0
 8009414:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009416:	7dbb      	ldrb	r3, [r7, #22]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	607a      	str	r2, [r7, #4]
 800942a:	603b      	str	r3, [r7, #0]
 800942c:	460b      	mov	r3, r1
 800942e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800943e:	7af9      	ldrb	r1, [r7, #11]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	f7fa fa4c 	bl	80038e0 <HAL_PCD_EP_Receive>
 8009448:	4603      	mov	r3, r0
 800944a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	4618      	mov	r0, r3
 8009450:	f000 f832 	bl	80094b8 <USBD_Get_USB_Status>
 8009454:	4603      	mov	r3, r0
 8009456:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009458:	7dbb      	ldrb	r3, [r7, #22]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b082      	sub	sp, #8
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	460b      	mov	r3, r1
 800946c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009474:	78fa      	ldrb	r2, [r7, #3]
 8009476:	4611      	mov	r1, r2
 8009478:	4618      	mov	r0, r3
 800947a:	f7fa fa7c 	bl	8003976 <HAL_PCD_EP_GetRxCount>
 800947e:	4603      	mov	r3, r0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009490:	4b03      	ldr	r3, [pc, #12]	; (80094a0 <USBD_static_malloc+0x18>)
}
 8009492:	4618      	mov	r0, r3
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	200003ec 	.word	0x200003ec

080094a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]

}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d817      	bhi.n	80094fc <USBD_Get_USB_Status+0x44>
 80094cc:	a201      	add	r2, pc, #4	; (adr r2, 80094d4 <USBD_Get_USB_Status+0x1c>)
 80094ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d2:	bf00      	nop
 80094d4:	080094e5 	.word	0x080094e5
 80094d8:	080094eb 	.word	0x080094eb
 80094dc:	080094f1 	.word	0x080094f1
 80094e0:	080094f7 	.word	0x080094f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]
    break;
 80094e8:	e00b      	b.n	8009502 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094ea:	2303      	movs	r3, #3
 80094ec:	73fb      	strb	r3, [r7, #15]
    break;
 80094ee:	e008      	b.n	8009502 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094f0:	2301      	movs	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]
    break;
 80094f4:	e005      	b.n	8009502 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094f6:	2303      	movs	r3, #3
 80094f8:	73fb      	strb	r3, [r7, #15]
    break;
 80094fa:	e002      	b.n	8009502 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094fc:	2303      	movs	r3, #3
 80094fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009500:	bf00      	nop
  }
  return usb_status;
 8009502:	7bfb      	ldrb	r3, [r7, #15]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <__errno>:
 8009510:	4b01      	ldr	r3, [pc, #4]	; (8009518 <__errno+0x8>)
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	20000180 	.word	0x20000180

0800951c <__libc_init_array>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	4d0d      	ldr	r5, [pc, #52]	; (8009554 <__libc_init_array+0x38>)
 8009520:	4c0d      	ldr	r4, [pc, #52]	; (8009558 <__libc_init_array+0x3c>)
 8009522:	1b64      	subs	r4, r4, r5
 8009524:	10a4      	asrs	r4, r4, #2
 8009526:	2600      	movs	r6, #0
 8009528:	42a6      	cmp	r6, r4
 800952a:	d109      	bne.n	8009540 <__libc_init_array+0x24>
 800952c:	4d0b      	ldr	r5, [pc, #44]	; (800955c <__libc_init_array+0x40>)
 800952e:	4c0c      	ldr	r4, [pc, #48]	; (8009560 <__libc_init_array+0x44>)
 8009530:	f002 fcf2 	bl	800bf18 <_init>
 8009534:	1b64      	subs	r4, r4, r5
 8009536:	10a4      	asrs	r4, r4, #2
 8009538:	2600      	movs	r6, #0
 800953a:	42a6      	cmp	r6, r4
 800953c:	d105      	bne.n	800954a <__libc_init_array+0x2e>
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	f855 3b04 	ldr.w	r3, [r5], #4
 8009544:	4798      	blx	r3
 8009546:	3601      	adds	r6, #1
 8009548:	e7ee      	b.n	8009528 <__libc_init_array+0xc>
 800954a:	f855 3b04 	ldr.w	r3, [r5], #4
 800954e:	4798      	blx	r3
 8009550:	3601      	adds	r6, #1
 8009552:	e7f2      	b.n	800953a <__libc_init_array+0x1e>
 8009554:	0800c384 	.word	0x0800c384
 8009558:	0800c384 	.word	0x0800c384
 800955c:	0800c384 	.word	0x0800c384
 8009560:	0800c38c 	.word	0x0800c38c

08009564 <memcpy>:
 8009564:	440a      	add	r2, r1
 8009566:	4291      	cmp	r1, r2
 8009568:	f100 33ff 	add.w	r3, r0, #4294967295
 800956c:	d100      	bne.n	8009570 <memcpy+0xc>
 800956e:	4770      	bx	lr
 8009570:	b510      	push	{r4, lr}
 8009572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800957a:	4291      	cmp	r1, r2
 800957c:	d1f9      	bne.n	8009572 <memcpy+0xe>
 800957e:	bd10      	pop	{r4, pc}

08009580 <memset>:
 8009580:	4402      	add	r2, r0
 8009582:	4603      	mov	r3, r0
 8009584:	4293      	cmp	r3, r2
 8009586:	d100      	bne.n	800958a <memset+0xa>
 8009588:	4770      	bx	lr
 800958a:	f803 1b01 	strb.w	r1, [r3], #1
 800958e:	e7f9      	b.n	8009584 <memset+0x4>

08009590 <__cvt>:
 8009590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009594:	ec55 4b10 	vmov	r4, r5, d0
 8009598:	2d00      	cmp	r5, #0
 800959a:	460e      	mov	r6, r1
 800959c:	4619      	mov	r1, r3
 800959e:	462b      	mov	r3, r5
 80095a0:	bfbb      	ittet	lt
 80095a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80095a6:	461d      	movlt	r5, r3
 80095a8:	2300      	movge	r3, #0
 80095aa:	232d      	movlt	r3, #45	; 0x2d
 80095ac:	700b      	strb	r3, [r1, #0]
 80095ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80095b4:	4691      	mov	r9, r2
 80095b6:	f023 0820 	bic.w	r8, r3, #32
 80095ba:	bfbc      	itt	lt
 80095bc:	4622      	movlt	r2, r4
 80095be:	4614      	movlt	r4, r2
 80095c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095c4:	d005      	beq.n	80095d2 <__cvt+0x42>
 80095c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095ca:	d100      	bne.n	80095ce <__cvt+0x3e>
 80095cc:	3601      	adds	r6, #1
 80095ce:	2102      	movs	r1, #2
 80095d0:	e000      	b.n	80095d4 <__cvt+0x44>
 80095d2:	2103      	movs	r1, #3
 80095d4:	ab03      	add	r3, sp, #12
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	ab02      	add	r3, sp, #8
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	ec45 4b10 	vmov	d0, r4, r5
 80095e0:	4653      	mov	r3, sl
 80095e2:	4632      	mov	r2, r6
 80095e4:	f000 fccc 	bl	8009f80 <_dtoa_r>
 80095e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095ec:	4607      	mov	r7, r0
 80095ee:	d102      	bne.n	80095f6 <__cvt+0x66>
 80095f0:	f019 0f01 	tst.w	r9, #1
 80095f4:	d022      	beq.n	800963c <__cvt+0xac>
 80095f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095fa:	eb07 0906 	add.w	r9, r7, r6
 80095fe:	d110      	bne.n	8009622 <__cvt+0x92>
 8009600:	783b      	ldrb	r3, [r7, #0]
 8009602:	2b30      	cmp	r3, #48	; 0x30
 8009604:	d10a      	bne.n	800961c <__cvt+0x8c>
 8009606:	2200      	movs	r2, #0
 8009608:	2300      	movs	r3, #0
 800960a:	4620      	mov	r0, r4
 800960c:	4629      	mov	r1, r5
 800960e:	f7f7 fa5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009612:	b918      	cbnz	r0, 800961c <__cvt+0x8c>
 8009614:	f1c6 0601 	rsb	r6, r6, #1
 8009618:	f8ca 6000 	str.w	r6, [sl]
 800961c:	f8da 3000 	ldr.w	r3, [sl]
 8009620:	4499      	add	r9, r3
 8009622:	2200      	movs	r2, #0
 8009624:	2300      	movs	r3, #0
 8009626:	4620      	mov	r0, r4
 8009628:	4629      	mov	r1, r5
 800962a:	f7f7 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800962e:	b108      	cbz	r0, 8009634 <__cvt+0xa4>
 8009630:	f8cd 900c 	str.w	r9, [sp, #12]
 8009634:	2230      	movs	r2, #48	; 0x30
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	454b      	cmp	r3, r9
 800963a:	d307      	bcc.n	800964c <__cvt+0xbc>
 800963c:	9b03      	ldr	r3, [sp, #12]
 800963e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009640:	1bdb      	subs	r3, r3, r7
 8009642:	4638      	mov	r0, r7
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	b004      	add	sp, #16
 8009648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964c:	1c59      	adds	r1, r3, #1
 800964e:	9103      	str	r1, [sp, #12]
 8009650:	701a      	strb	r2, [r3, #0]
 8009652:	e7f0      	b.n	8009636 <__cvt+0xa6>

08009654 <__exponent>:
 8009654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009656:	4603      	mov	r3, r0
 8009658:	2900      	cmp	r1, #0
 800965a:	bfb8      	it	lt
 800965c:	4249      	neglt	r1, r1
 800965e:	f803 2b02 	strb.w	r2, [r3], #2
 8009662:	bfb4      	ite	lt
 8009664:	222d      	movlt	r2, #45	; 0x2d
 8009666:	222b      	movge	r2, #43	; 0x2b
 8009668:	2909      	cmp	r1, #9
 800966a:	7042      	strb	r2, [r0, #1]
 800966c:	dd2a      	ble.n	80096c4 <__exponent+0x70>
 800966e:	f10d 0407 	add.w	r4, sp, #7
 8009672:	46a4      	mov	ip, r4
 8009674:	270a      	movs	r7, #10
 8009676:	46a6      	mov	lr, r4
 8009678:	460a      	mov	r2, r1
 800967a:	fb91 f6f7 	sdiv	r6, r1, r7
 800967e:	fb07 1516 	mls	r5, r7, r6, r1
 8009682:	3530      	adds	r5, #48	; 0x30
 8009684:	2a63      	cmp	r2, #99	; 0x63
 8009686:	f104 34ff 	add.w	r4, r4, #4294967295
 800968a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800968e:	4631      	mov	r1, r6
 8009690:	dcf1      	bgt.n	8009676 <__exponent+0x22>
 8009692:	3130      	adds	r1, #48	; 0x30
 8009694:	f1ae 0502 	sub.w	r5, lr, #2
 8009698:	f804 1c01 	strb.w	r1, [r4, #-1]
 800969c:	1c44      	adds	r4, r0, #1
 800969e:	4629      	mov	r1, r5
 80096a0:	4561      	cmp	r1, ip
 80096a2:	d30a      	bcc.n	80096ba <__exponent+0x66>
 80096a4:	f10d 0209 	add.w	r2, sp, #9
 80096a8:	eba2 020e 	sub.w	r2, r2, lr
 80096ac:	4565      	cmp	r5, ip
 80096ae:	bf88      	it	hi
 80096b0:	2200      	movhi	r2, #0
 80096b2:	4413      	add	r3, r2
 80096b4:	1a18      	subs	r0, r3, r0
 80096b6:	b003      	add	sp, #12
 80096b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80096c2:	e7ed      	b.n	80096a0 <__exponent+0x4c>
 80096c4:	2330      	movs	r3, #48	; 0x30
 80096c6:	3130      	adds	r1, #48	; 0x30
 80096c8:	7083      	strb	r3, [r0, #2]
 80096ca:	70c1      	strb	r1, [r0, #3]
 80096cc:	1d03      	adds	r3, r0, #4
 80096ce:	e7f1      	b.n	80096b4 <__exponent+0x60>

080096d0 <_printf_float>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	ed2d 8b02 	vpush	{d8}
 80096d8:	b08d      	sub	sp, #52	; 0x34
 80096da:	460c      	mov	r4, r1
 80096dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096e0:	4616      	mov	r6, r2
 80096e2:	461f      	mov	r7, r3
 80096e4:	4605      	mov	r5, r0
 80096e6:	f001 fa37 	bl	800ab58 <_localeconv_r>
 80096ea:	f8d0 a000 	ldr.w	sl, [r0]
 80096ee:	4650      	mov	r0, sl
 80096f0:	f7f6 fd6e 	bl	80001d0 <strlen>
 80096f4:	2300      	movs	r3, #0
 80096f6:	930a      	str	r3, [sp, #40]	; 0x28
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	9305      	str	r3, [sp, #20]
 80096fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009700:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009704:	3307      	adds	r3, #7
 8009706:	f023 0307 	bic.w	r3, r3, #7
 800970a:	f103 0208 	add.w	r2, r3, #8
 800970e:	f8c8 2000 	str.w	r2, [r8]
 8009712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009716:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800971a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800971e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009722:	9307      	str	r3, [sp, #28]
 8009724:	f8cd 8018 	str.w	r8, [sp, #24]
 8009728:	ee08 0a10 	vmov	s16, r0
 800972c:	4b9f      	ldr	r3, [pc, #636]	; (80099ac <_printf_float+0x2dc>)
 800972e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009732:	f04f 32ff 	mov.w	r2, #4294967295
 8009736:	f7f7 f9f9 	bl	8000b2c <__aeabi_dcmpun>
 800973a:	bb88      	cbnz	r0, 80097a0 <_printf_float+0xd0>
 800973c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009740:	4b9a      	ldr	r3, [pc, #616]	; (80099ac <_printf_float+0x2dc>)
 8009742:	f04f 32ff 	mov.w	r2, #4294967295
 8009746:	f7f7 f9d3 	bl	8000af0 <__aeabi_dcmple>
 800974a:	bb48      	cbnz	r0, 80097a0 <_printf_float+0xd0>
 800974c:	2200      	movs	r2, #0
 800974e:	2300      	movs	r3, #0
 8009750:	4640      	mov	r0, r8
 8009752:	4649      	mov	r1, r9
 8009754:	f7f7 f9c2 	bl	8000adc <__aeabi_dcmplt>
 8009758:	b110      	cbz	r0, 8009760 <_printf_float+0x90>
 800975a:	232d      	movs	r3, #45	; 0x2d
 800975c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009760:	4b93      	ldr	r3, [pc, #588]	; (80099b0 <_printf_float+0x2e0>)
 8009762:	4894      	ldr	r0, [pc, #592]	; (80099b4 <_printf_float+0x2e4>)
 8009764:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009768:	bf94      	ite	ls
 800976a:	4698      	movls	r8, r3
 800976c:	4680      	movhi	r8, r0
 800976e:	2303      	movs	r3, #3
 8009770:	6123      	str	r3, [r4, #16]
 8009772:	9b05      	ldr	r3, [sp, #20]
 8009774:	f023 0204 	bic.w	r2, r3, #4
 8009778:	6022      	str	r2, [r4, #0]
 800977a:	f04f 0900 	mov.w	r9, #0
 800977e:	9700      	str	r7, [sp, #0]
 8009780:	4633      	mov	r3, r6
 8009782:	aa0b      	add	r2, sp, #44	; 0x2c
 8009784:	4621      	mov	r1, r4
 8009786:	4628      	mov	r0, r5
 8009788:	f000 f9d8 	bl	8009b3c <_printf_common>
 800978c:	3001      	adds	r0, #1
 800978e:	f040 8090 	bne.w	80098b2 <_printf_float+0x1e2>
 8009792:	f04f 30ff 	mov.w	r0, #4294967295
 8009796:	b00d      	add	sp, #52	; 0x34
 8009798:	ecbd 8b02 	vpop	{d8}
 800979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a0:	4642      	mov	r2, r8
 80097a2:	464b      	mov	r3, r9
 80097a4:	4640      	mov	r0, r8
 80097a6:	4649      	mov	r1, r9
 80097a8:	f7f7 f9c0 	bl	8000b2c <__aeabi_dcmpun>
 80097ac:	b140      	cbz	r0, 80097c0 <_printf_float+0xf0>
 80097ae:	464b      	mov	r3, r9
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bfbc      	itt	lt
 80097b4:	232d      	movlt	r3, #45	; 0x2d
 80097b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80097ba:	487f      	ldr	r0, [pc, #508]	; (80099b8 <_printf_float+0x2e8>)
 80097bc:	4b7f      	ldr	r3, [pc, #508]	; (80099bc <_printf_float+0x2ec>)
 80097be:	e7d1      	b.n	8009764 <_printf_float+0x94>
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80097c6:	9206      	str	r2, [sp, #24]
 80097c8:	1c5a      	adds	r2, r3, #1
 80097ca:	d13f      	bne.n	800984c <_printf_float+0x17c>
 80097cc:	2306      	movs	r3, #6
 80097ce:	6063      	str	r3, [r4, #4]
 80097d0:	9b05      	ldr	r3, [sp, #20]
 80097d2:	6861      	ldr	r1, [r4, #4]
 80097d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097d8:	2300      	movs	r3, #0
 80097da:	9303      	str	r3, [sp, #12]
 80097dc:	ab0a      	add	r3, sp, #40	; 0x28
 80097de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097e2:	ab09      	add	r3, sp, #36	; 0x24
 80097e4:	ec49 8b10 	vmov	d0, r8, r9
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	6022      	str	r2, [r4, #0]
 80097ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097f0:	4628      	mov	r0, r5
 80097f2:	f7ff fecd 	bl	8009590 <__cvt>
 80097f6:	9b06      	ldr	r3, [sp, #24]
 80097f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097fa:	2b47      	cmp	r3, #71	; 0x47
 80097fc:	4680      	mov	r8, r0
 80097fe:	d108      	bne.n	8009812 <_printf_float+0x142>
 8009800:	1cc8      	adds	r0, r1, #3
 8009802:	db02      	blt.n	800980a <_printf_float+0x13a>
 8009804:	6863      	ldr	r3, [r4, #4]
 8009806:	4299      	cmp	r1, r3
 8009808:	dd41      	ble.n	800988e <_printf_float+0x1be>
 800980a:	f1ab 0b02 	sub.w	fp, fp, #2
 800980e:	fa5f fb8b 	uxtb.w	fp, fp
 8009812:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009816:	d820      	bhi.n	800985a <_printf_float+0x18a>
 8009818:	3901      	subs	r1, #1
 800981a:	465a      	mov	r2, fp
 800981c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009820:	9109      	str	r1, [sp, #36]	; 0x24
 8009822:	f7ff ff17 	bl	8009654 <__exponent>
 8009826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009828:	1813      	adds	r3, r2, r0
 800982a:	2a01      	cmp	r2, #1
 800982c:	4681      	mov	r9, r0
 800982e:	6123      	str	r3, [r4, #16]
 8009830:	dc02      	bgt.n	8009838 <_printf_float+0x168>
 8009832:	6822      	ldr	r2, [r4, #0]
 8009834:	07d2      	lsls	r2, r2, #31
 8009836:	d501      	bpl.n	800983c <_printf_float+0x16c>
 8009838:	3301      	adds	r3, #1
 800983a:	6123      	str	r3, [r4, #16]
 800983c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009840:	2b00      	cmp	r3, #0
 8009842:	d09c      	beq.n	800977e <_printf_float+0xae>
 8009844:	232d      	movs	r3, #45	; 0x2d
 8009846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800984a:	e798      	b.n	800977e <_printf_float+0xae>
 800984c:	9a06      	ldr	r2, [sp, #24]
 800984e:	2a47      	cmp	r2, #71	; 0x47
 8009850:	d1be      	bne.n	80097d0 <_printf_float+0x100>
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1bc      	bne.n	80097d0 <_printf_float+0x100>
 8009856:	2301      	movs	r3, #1
 8009858:	e7b9      	b.n	80097ce <_printf_float+0xfe>
 800985a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800985e:	d118      	bne.n	8009892 <_printf_float+0x1c2>
 8009860:	2900      	cmp	r1, #0
 8009862:	6863      	ldr	r3, [r4, #4]
 8009864:	dd0b      	ble.n	800987e <_printf_float+0x1ae>
 8009866:	6121      	str	r1, [r4, #16]
 8009868:	b913      	cbnz	r3, 8009870 <_printf_float+0x1a0>
 800986a:	6822      	ldr	r2, [r4, #0]
 800986c:	07d0      	lsls	r0, r2, #31
 800986e:	d502      	bpl.n	8009876 <_printf_float+0x1a6>
 8009870:	3301      	adds	r3, #1
 8009872:	440b      	add	r3, r1
 8009874:	6123      	str	r3, [r4, #16]
 8009876:	65a1      	str	r1, [r4, #88]	; 0x58
 8009878:	f04f 0900 	mov.w	r9, #0
 800987c:	e7de      	b.n	800983c <_printf_float+0x16c>
 800987e:	b913      	cbnz	r3, 8009886 <_printf_float+0x1b6>
 8009880:	6822      	ldr	r2, [r4, #0]
 8009882:	07d2      	lsls	r2, r2, #31
 8009884:	d501      	bpl.n	800988a <_printf_float+0x1ba>
 8009886:	3302      	adds	r3, #2
 8009888:	e7f4      	b.n	8009874 <_printf_float+0x1a4>
 800988a:	2301      	movs	r3, #1
 800988c:	e7f2      	b.n	8009874 <_printf_float+0x1a4>
 800988e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009894:	4299      	cmp	r1, r3
 8009896:	db05      	blt.n	80098a4 <_printf_float+0x1d4>
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	6121      	str	r1, [r4, #16]
 800989c:	07d8      	lsls	r0, r3, #31
 800989e:	d5ea      	bpl.n	8009876 <_printf_float+0x1a6>
 80098a0:	1c4b      	adds	r3, r1, #1
 80098a2:	e7e7      	b.n	8009874 <_printf_float+0x1a4>
 80098a4:	2900      	cmp	r1, #0
 80098a6:	bfd4      	ite	le
 80098a8:	f1c1 0202 	rsble	r2, r1, #2
 80098ac:	2201      	movgt	r2, #1
 80098ae:	4413      	add	r3, r2
 80098b0:	e7e0      	b.n	8009874 <_printf_float+0x1a4>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	055a      	lsls	r2, r3, #21
 80098b6:	d407      	bmi.n	80098c8 <_printf_float+0x1f8>
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	4642      	mov	r2, r8
 80098bc:	4631      	mov	r1, r6
 80098be:	4628      	mov	r0, r5
 80098c0:	47b8      	blx	r7
 80098c2:	3001      	adds	r0, #1
 80098c4:	d12c      	bne.n	8009920 <_printf_float+0x250>
 80098c6:	e764      	b.n	8009792 <_printf_float+0xc2>
 80098c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098cc:	f240 80e0 	bls.w	8009a90 <_printf_float+0x3c0>
 80098d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098d4:	2200      	movs	r2, #0
 80098d6:	2300      	movs	r3, #0
 80098d8:	f7f7 f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d034      	beq.n	800994a <_printf_float+0x27a>
 80098e0:	4a37      	ldr	r2, [pc, #220]	; (80099c0 <_printf_float+0x2f0>)
 80098e2:	2301      	movs	r3, #1
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	f43f af51 	beq.w	8009792 <_printf_float+0xc2>
 80098f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098f4:	429a      	cmp	r2, r3
 80098f6:	db02      	blt.n	80098fe <_printf_float+0x22e>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	07d8      	lsls	r0, r3, #31
 80098fc:	d510      	bpl.n	8009920 <_printf_float+0x250>
 80098fe:	ee18 3a10 	vmov	r3, s16
 8009902:	4652      	mov	r2, sl
 8009904:	4631      	mov	r1, r6
 8009906:	4628      	mov	r0, r5
 8009908:	47b8      	blx	r7
 800990a:	3001      	adds	r0, #1
 800990c:	f43f af41 	beq.w	8009792 <_printf_float+0xc2>
 8009910:	f04f 0800 	mov.w	r8, #0
 8009914:	f104 091a 	add.w	r9, r4, #26
 8009918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800991a:	3b01      	subs	r3, #1
 800991c:	4543      	cmp	r3, r8
 800991e:	dc09      	bgt.n	8009934 <_printf_float+0x264>
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	079b      	lsls	r3, r3, #30
 8009924:	f100 8105 	bmi.w	8009b32 <_printf_float+0x462>
 8009928:	68e0      	ldr	r0, [r4, #12]
 800992a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800992c:	4298      	cmp	r0, r3
 800992e:	bfb8      	it	lt
 8009930:	4618      	movlt	r0, r3
 8009932:	e730      	b.n	8009796 <_printf_float+0xc6>
 8009934:	2301      	movs	r3, #1
 8009936:	464a      	mov	r2, r9
 8009938:	4631      	mov	r1, r6
 800993a:	4628      	mov	r0, r5
 800993c:	47b8      	blx	r7
 800993e:	3001      	adds	r0, #1
 8009940:	f43f af27 	beq.w	8009792 <_printf_float+0xc2>
 8009944:	f108 0801 	add.w	r8, r8, #1
 8009948:	e7e6      	b.n	8009918 <_printf_float+0x248>
 800994a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800994c:	2b00      	cmp	r3, #0
 800994e:	dc39      	bgt.n	80099c4 <_printf_float+0x2f4>
 8009950:	4a1b      	ldr	r2, [pc, #108]	; (80099c0 <_printf_float+0x2f0>)
 8009952:	2301      	movs	r3, #1
 8009954:	4631      	mov	r1, r6
 8009956:	4628      	mov	r0, r5
 8009958:	47b8      	blx	r7
 800995a:	3001      	adds	r0, #1
 800995c:	f43f af19 	beq.w	8009792 <_printf_float+0xc2>
 8009960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009964:	4313      	orrs	r3, r2
 8009966:	d102      	bne.n	800996e <_printf_float+0x29e>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	07d9      	lsls	r1, r3, #31
 800996c:	d5d8      	bpl.n	8009920 <_printf_float+0x250>
 800996e:	ee18 3a10 	vmov	r3, s16
 8009972:	4652      	mov	r2, sl
 8009974:	4631      	mov	r1, r6
 8009976:	4628      	mov	r0, r5
 8009978:	47b8      	blx	r7
 800997a:	3001      	adds	r0, #1
 800997c:	f43f af09 	beq.w	8009792 <_printf_float+0xc2>
 8009980:	f04f 0900 	mov.w	r9, #0
 8009984:	f104 0a1a 	add.w	sl, r4, #26
 8009988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800998a:	425b      	negs	r3, r3
 800998c:	454b      	cmp	r3, r9
 800998e:	dc01      	bgt.n	8009994 <_printf_float+0x2c4>
 8009990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009992:	e792      	b.n	80098ba <_printf_float+0x1ea>
 8009994:	2301      	movs	r3, #1
 8009996:	4652      	mov	r2, sl
 8009998:	4631      	mov	r1, r6
 800999a:	4628      	mov	r0, r5
 800999c:	47b8      	blx	r7
 800999e:	3001      	adds	r0, #1
 80099a0:	f43f aef7 	beq.w	8009792 <_printf_float+0xc2>
 80099a4:	f109 0901 	add.w	r9, r9, #1
 80099a8:	e7ee      	b.n	8009988 <_printf_float+0x2b8>
 80099aa:	bf00      	nop
 80099ac:	7fefffff 	.word	0x7fefffff
 80099b0:	0800bf9c 	.word	0x0800bf9c
 80099b4:	0800bfa0 	.word	0x0800bfa0
 80099b8:	0800bfa8 	.word	0x0800bfa8
 80099bc:	0800bfa4 	.word	0x0800bfa4
 80099c0:	0800bfac 	.word	0x0800bfac
 80099c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099c8:	429a      	cmp	r2, r3
 80099ca:	bfa8      	it	ge
 80099cc:	461a      	movge	r2, r3
 80099ce:	2a00      	cmp	r2, #0
 80099d0:	4691      	mov	r9, r2
 80099d2:	dc37      	bgt.n	8009a44 <_printf_float+0x374>
 80099d4:	f04f 0b00 	mov.w	fp, #0
 80099d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099dc:	f104 021a 	add.w	r2, r4, #26
 80099e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099e2:	9305      	str	r3, [sp, #20]
 80099e4:	eba3 0309 	sub.w	r3, r3, r9
 80099e8:	455b      	cmp	r3, fp
 80099ea:	dc33      	bgt.n	8009a54 <_printf_float+0x384>
 80099ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099f0:	429a      	cmp	r2, r3
 80099f2:	db3b      	blt.n	8009a6c <_printf_float+0x39c>
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	07da      	lsls	r2, r3, #31
 80099f8:	d438      	bmi.n	8009a6c <_printf_float+0x39c>
 80099fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099fc:	9b05      	ldr	r3, [sp, #20]
 80099fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	eba2 0901 	sub.w	r9, r2, r1
 8009a06:	4599      	cmp	r9, r3
 8009a08:	bfa8      	it	ge
 8009a0a:	4699      	movge	r9, r3
 8009a0c:	f1b9 0f00 	cmp.w	r9, #0
 8009a10:	dc35      	bgt.n	8009a7e <_printf_float+0x3ae>
 8009a12:	f04f 0800 	mov.w	r8, #0
 8009a16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a1a:	f104 0a1a 	add.w	sl, r4, #26
 8009a1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a22:	1a9b      	subs	r3, r3, r2
 8009a24:	eba3 0309 	sub.w	r3, r3, r9
 8009a28:	4543      	cmp	r3, r8
 8009a2a:	f77f af79 	ble.w	8009920 <_printf_float+0x250>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4652      	mov	r2, sl
 8009a32:	4631      	mov	r1, r6
 8009a34:	4628      	mov	r0, r5
 8009a36:	47b8      	blx	r7
 8009a38:	3001      	adds	r0, #1
 8009a3a:	f43f aeaa 	beq.w	8009792 <_printf_float+0xc2>
 8009a3e:	f108 0801 	add.w	r8, r8, #1
 8009a42:	e7ec      	b.n	8009a1e <_printf_float+0x34e>
 8009a44:	4613      	mov	r3, r2
 8009a46:	4631      	mov	r1, r6
 8009a48:	4642      	mov	r2, r8
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b8      	blx	r7
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d1c0      	bne.n	80099d4 <_printf_float+0x304>
 8009a52:	e69e      	b.n	8009792 <_printf_float+0xc2>
 8009a54:	2301      	movs	r3, #1
 8009a56:	4631      	mov	r1, r6
 8009a58:	4628      	mov	r0, r5
 8009a5a:	9205      	str	r2, [sp, #20]
 8009a5c:	47b8      	blx	r7
 8009a5e:	3001      	adds	r0, #1
 8009a60:	f43f ae97 	beq.w	8009792 <_printf_float+0xc2>
 8009a64:	9a05      	ldr	r2, [sp, #20]
 8009a66:	f10b 0b01 	add.w	fp, fp, #1
 8009a6a:	e7b9      	b.n	80099e0 <_printf_float+0x310>
 8009a6c:	ee18 3a10 	vmov	r3, s16
 8009a70:	4652      	mov	r2, sl
 8009a72:	4631      	mov	r1, r6
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b8      	blx	r7
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d1be      	bne.n	80099fa <_printf_float+0x32a>
 8009a7c:	e689      	b.n	8009792 <_printf_float+0xc2>
 8009a7e:	9a05      	ldr	r2, [sp, #20]
 8009a80:	464b      	mov	r3, r9
 8009a82:	4442      	add	r2, r8
 8009a84:	4631      	mov	r1, r6
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b8      	blx	r7
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	d1c1      	bne.n	8009a12 <_printf_float+0x342>
 8009a8e:	e680      	b.n	8009792 <_printf_float+0xc2>
 8009a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a92:	2a01      	cmp	r2, #1
 8009a94:	dc01      	bgt.n	8009a9a <_printf_float+0x3ca>
 8009a96:	07db      	lsls	r3, r3, #31
 8009a98:	d538      	bpl.n	8009b0c <_printf_float+0x43c>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	4642      	mov	r2, r8
 8009a9e:	4631      	mov	r1, r6
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	47b8      	blx	r7
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	f43f ae74 	beq.w	8009792 <_printf_float+0xc2>
 8009aaa:	ee18 3a10 	vmov	r3, s16
 8009aae:	4652      	mov	r2, sl
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f43f ae6b 	beq.w	8009792 <_printf_float+0xc2>
 8009abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f7f7 f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ac8:	b9d8      	cbnz	r0, 8009b02 <_printf_float+0x432>
 8009aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009acc:	f108 0201 	add.w	r2, r8, #1
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	4631      	mov	r1, r6
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	47b8      	blx	r7
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d10e      	bne.n	8009afa <_printf_float+0x42a>
 8009adc:	e659      	b.n	8009792 <_printf_float+0xc2>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4652      	mov	r2, sl
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	47b8      	blx	r7
 8009ae8:	3001      	adds	r0, #1
 8009aea:	f43f ae52 	beq.w	8009792 <_printf_float+0xc2>
 8009aee:	f108 0801 	add.w	r8, r8, #1
 8009af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af4:	3b01      	subs	r3, #1
 8009af6:	4543      	cmp	r3, r8
 8009af8:	dcf1      	bgt.n	8009ade <_printf_float+0x40e>
 8009afa:	464b      	mov	r3, r9
 8009afc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b00:	e6dc      	b.n	80098bc <_printf_float+0x1ec>
 8009b02:	f04f 0800 	mov.w	r8, #0
 8009b06:	f104 0a1a 	add.w	sl, r4, #26
 8009b0a:	e7f2      	b.n	8009af2 <_printf_float+0x422>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	4642      	mov	r2, r8
 8009b10:	e7df      	b.n	8009ad2 <_printf_float+0x402>
 8009b12:	2301      	movs	r3, #1
 8009b14:	464a      	mov	r2, r9
 8009b16:	4631      	mov	r1, r6
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b8      	blx	r7
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f43f ae38 	beq.w	8009792 <_printf_float+0xc2>
 8009b22:	f108 0801 	add.w	r8, r8, #1
 8009b26:	68e3      	ldr	r3, [r4, #12]
 8009b28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b2a:	1a5b      	subs	r3, r3, r1
 8009b2c:	4543      	cmp	r3, r8
 8009b2e:	dcf0      	bgt.n	8009b12 <_printf_float+0x442>
 8009b30:	e6fa      	b.n	8009928 <_printf_float+0x258>
 8009b32:	f04f 0800 	mov.w	r8, #0
 8009b36:	f104 0919 	add.w	r9, r4, #25
 8009b3a:	e7f4      	b.n	8009b26 <_printf_float+0x456>

08009b3c <_printf_common>:
 8009b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	4616      	mov	r6, r2
 8009b42:	4699      	mov	r9, r3
 8009b44:	688a      	ldr	r2, [r1, #8]
 8009b46:	690b      	ldr	r3, [r1, #16]
 8009b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	bfb8      	it	lt
 8009b50:	4613      	movlt	r3, r2
 8009b52:	6033      	str	r3, [r6, #0]
 8009b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b58:	4607      	mov	r7, r0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	b10a      	cbz	r2, 8009b62 <_printf_common+0x26>
 8009b5e:	3301      	adds	r3, #1
 8009b60:	6033      	str	r3, [r6, #0]
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	0699      	lsls	r1, r3, #26
 8009b66:	bf42      	ittt	mi
 8009b68:	6833      	ldrmi	r3, [r6, #0]
 8009b6a:	3302      	addmi	r3, #2
 8009b6c:	6033      	strmi	r3, [r6, #0]
 8009b6e:	6825      	ldr	r5, [r4, #0]
 8009b70:	f015 0506 	ands.w	r5, r5, #6
 8009b74:	d106      	bne.n	8009b84 <_printf_common+0x48>
 8009b76:	f104 0a19 	add.w	sl, r4, #25
 8009b7a:	68e3      	ldr	r3, [r4, #12]
 8009b7c:	6832      	ldr	r2, [r6, #0]
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	42ab      	cmp	r3, r5
 8009b82:	dc26      	bgt.n	8009bd2 <_printf_common+0x96>
 8009b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b88:	1e13      	subs	r3, r2, #0
 8009b8a:	6822      	ldr	r2, [r4, #0]
 8009b8c:	bf18      	it	ne
 8009b8e:	2301      	movne	r3, #1
 8009b90:	0692      	lsls	r2, r2, #26
 8009b92:	d42b      	bmi.n	8009bec <_printf_common+0xb0>
 8009b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b98:	4649      	mov	r1, r9
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	47c0      	blx	r8
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d01e      	beq.n	8009be0 <_printf_common+0xa4>
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	68e5      	ldr	r5, [r4, #12]
 8009ba6:	6832      	ldr	r2, [r6, #0]
 8009ba8:	f003 0306 	and.w	r3, r3, #6
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	bf08      	it	eq
 8009bb0:	1aad      	subeq	r5, r5, r2
 8009bb2:	68a3      	ldr	r3, [r4, #8]
 8009bb4:	6922      	ldr	r2, [r4, #16]
 8009bb6:	bf0c      	ite	eq
 8009bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bbc:	2500      	movne	r5, #0
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	bfc4      	itt	gt
 8009bc2:	1a9b      	subgt	r3, r3, r2
 8009bc4:	18ed      	addgt	r5, r5, r3
 8009bc6:	2600      	movs	r6, #0
 8009bc8:	341a      	adds	r4, #26
 8009bca:	42b5      	cmp	r5, r6
 8009bcc:	d11a      	bne.n	8009c04 <_printf_common+0xc8>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	e008      	b.n	8009be4 <_printf_common+0xa8>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4652      	mov	r2, sl
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4638      	mov	r0, r7
 8009bda:	47c0      	blx	r8
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d103      	bne.n	8009be8 <_printf_common+0xac>
 8009be0:	f04f 30ff 	mov.w	r0, #4294967295
 8009be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be8:	3501      	adds	r5, #1
 8009bea:	e7c6      	b.n	8009b7a <_printf_common+0x3e>
 8009bec:	18e1      	adds	r1, r4, r3
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	2030      	movs	r0, #48	; 0x30
 8009bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bf6:	4422      	add	r2, r4
 8009bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c00:	3302      	adds	r3, #2
 8009c02:	e7c7      	b.n	8009b94 <_printf_common+0x58>
 8009c04:	2301      	movs	r3, #1
 8009c06:	4622      	mov	r2, r4
 8009c08:	4649      	mov	r1, r9
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	47c0      	blx	r8
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d0e6      	beq.n	8009be0 <_printf_common+0xa4>
 8009c12:	3601      	adds	r6, #1
 8009c14:	e7d9      	b.n	8009bca <_printf_common+0x8e>
	...

08009c18 <_printf_i>:
 8009c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	4691      	mov	r9, r2
 8009c20:	7e27      	ldrb	r7, [r4, #24]
 8009c22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c24:	2f78      	cmp	r7, #120	; 0x78
 8009c26:	4680      	mov	r8, r0
 8009c28:	469a      	mov	sl, r3
 8009c2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c2e:	d807      	bhi.n	8009c40 <_printf_i+0x28>
 8009c30:	2f62      	cmp	r7, #98	; 0x62
 8009c32:	d80a      	bhi.n	8009c4a <_printf_i+0x32>
 8009c34:	2f00      	cmp	r7, #0
 8009c36:	f000 80d8 	beq.w	8009dea <_printf_i+0x1d2>
 8009c3a:	2f58      	cmp	r7, #88	; 0x58
 8009c3c:	f000 80a3 	beq.w	8009d86 <_printf_i+0x16e>
 8009c40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c48:	e03a      	b.n	8009cc0 <_printf_i+0xa8>
 8009c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c4e:	2b15      	cmp	r3, #21
 8009c50:	d8f6      	bhi.n	8009c40 <_printf_i+0x28>
 8009c52:	a001      	add	r0, pc, #4	; (adr r0, 8009c58 <_printf_i+0x40>)
 8009c54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c58:	08009cb1 	.word	0x08009cb1
 8009c5c:	08009cc5 	.word	0x08009cc5
 8009c60:	08009c41 	.word	0x08009c41
 8009c64:	08009c41 	.word	0x08009c41
 8009c68:	08009c41 	.word	0x08009c41
 8009c6c:	08009c41 	.word	0x08009c41
 8009c70:	08009cc5 	.word	0x08009cc5
 8009c74:	08009c41 	.word	0x08009c41
 8009c78:	08009c41 	.word	0x08009c41
 8009c7c:	08009c41 	.word	0x08009c41
 8009c80:	08009c41 	.word	0x08009c41
 8009c84:	08009dd1 	.word	0x08009dd1
 8009c88:	08009cf5 	.word	0x08009cf5
 8009c8c:	08009db3 	.word	0x08009db3
 8009c90:	08009c41 	.word	0x08009c41
 8009c94:	08009c41 	.word	0x08009c41
 8009c98:	08009df3 	.word	0x08009df3
 8009c9c:	08009c41 	.word	0x08009c41
 8009ca0:	08009cf5 	.word	0x08009cf5
 8009ca4:	08009c41 	.word	0x08009c41
 8009ca8:	08009c41 	.word	0x08009c41
 8009cac:	08009dbb 	.word	0x08009dbb
 8009cb0:	680b      	ldr	r3, [r1, #0]
 8009cb2:	1d1a      	adds	r2, r3, #4
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	600a      	str	r2, [r1, #0]
 8009cb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e0a3      	b.n	8009e0c <_printf_i+0x1f4>
 8009cc4:	6825      	ldr	r5, [r4, #0]
 8009cc6:	6808      	ldr	r0, [r1, #0]
 8009cc8:	062e      	lsls	r6, r5, #24
 8009cca:	f100 0304 	add.w	r3, r0, #4
 8009cce:	d50a      	bpl.n	8009ce6 <_printf_i+0xce>
 8009cd0:	6805      	ldr	r5, [r0, #0]
 8009cd2:	600b      	str	r3, [r1, #0]
 8009cd4:	2d00      	cmp	r5, #0
 8009cd6:	da03      	bge.n	8009ce0 <_printf_i+0xc8>
 8009cd8:	232d      	movs	r3, #45	; 0x2d
 8009cda:	426d      	negs	r5, r5
 8009cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce0:	485e      	ldr	r0, [pc, #376]	; (8009e5c <_printf_i+0x244>)
 8009ce2:	230a      	movs	r3, #10
 8009ce4:	e019      	b.n	8009d1a <_printf_i+0x102>
 8009ce6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009cea:	6805      	ldr	r5, [r0, #0]
 8009cec:	600b      	str	r3, [r1, #0]
 8009cee:	bf18      	it	ne
 8009cf0:	b22d      	sxthne	r5, r5
 8009cf2:	e7ef      	b.n	8009cd4 <_printf_i+0xbc>
 8009cf4:	680b      	ldr	r3, [r1, #0]
 8009cf6:	6825      	ldr	r5, [r4, #0]
 8009cf8:	1d18      	adds	r0, r3, #4
 8009cfa:	6008      	str	r0, [r1, #0]
 8009cfc:	0628      	lsls	r0, r5, #24
 8009cfe:	d501      	bpl.n	8009d04 <_printf_i+0xec>
 8009d00:	681d      	ldr	r5, [r3, #0]
 8009d02:	e002      	b.n	8009d0a <_printf_i+0xf2>
 8009d04:	0669      	lsls	r1, r5, #25
 8009d06:	d5fb      	bpl.n	8009d00 <_printf_i+0xe8>
 8009d08:	881d      	ldrh	r5, [r3, #0]
 8009d0a:	4854      	ldr	r0, [pc, #336]	; (8009e5c <_printf_i+0x244>)
 8009d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8009d0e:	bf0c      	ite	eq
 8009d10:	2308      	moveq	r3, #8
 8009d12:	230a      	movne	r3, #10
 8009d14:	2100      	movs	r1, #0
 8009d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d1a:	6866      	ldr	r6, [r4, #4]
 8009d1c:	60a6      	str	r6, [r4, #8]
 8009d1e:	2e00      	cmp	r6, #0
 8009d20:	bfa2      	ittt	ge
 8009d22:	6821      	ldrge	r1, [r4, #0]
 8009d24:	f021 0104 	bicge.w	r1, r1, #4
 8009d28:	6021      	strge	r1, [r4, #0]
 8009d2a:	b90d      	cbnz	r5, 8009d30 <_printf_i+0x118>
 8009d2c:	2e00      	cmp	r6, #0
 8009d2e:	d04d      	beq.n	8009dcc <_printf_i+0x1b4>
 8009d30:	4616      	mov	r6, r2
 8009d32:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d36:	fb03 5711 	mls	r7, r3, r1, r5
 8009d3a:	5dc7      	ldrb	r7, [r0, r7]
 8009d3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d40:	462f      	mov	r7, r5
 8009d42:	42bb      	cmp	r3, r7
 8009d44:	460d      	mov	r5, r1
 8009d46:	d9f4      	bls.n	8009d32 <_printf_i+0x11a>
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d10b      	bne.n	8009d64 <_printf_i+0x14c>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	07df      	lsls	r7, r3, #31
 8009d50:	d508      	bpl.n	8009d64 <_printf_i+0x14c>
 8009d52:	6923      	ldr	r3, [r4, #16]
 8009d54:	6861      	ldr	r1, [r4, #4]
 8009d56:	4299      	cmp	r1, r3
 8009d58:	bfde      	ittt	le
 8009d5a:	2330      	movle	r3, #48	; 0x30
 8009d5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d64:	1b92      	subs	r2, r2, r6
 8009d66:	6122      	str	r2, [r4, #16]
 8009d68:	f8cd a000 	str.w	sl, [sp]
 8009d6c:	464b      	mov	r3, r9
 8009d6e:	aa03      	add	r2, sp, #12
 8009d70:	4621      	mov	r1, r4
 8009d72:	4640      	mov	r0, r8
 8009d74:	f7ff fee2 	bl	8009b3c <_printf_common>
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d14c      	bne.n	8009e16 <_printf_i+0x1fe>
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d80:	b004      	add	sp, #16
 8009d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d86:	4835      	ldr	r0, [pc, #212]	; (8009e5c <_printf_i+0x244>)
 8009d88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	680e      	ldr	r6, [r1, #0]
 8009d90:	061f      	lsls	r7, r3, #24
 8009d92:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d96:	600e      	str	r6, [r1, #0]
 8009d98:	d514      	bpl.n	8009dc4 <_printf_i+0x1ac>
 8009d9a:	07d9      	lsls	r1, r3, #31
 8009d9c:	bf44      	itt	mi
 8009d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8009da2:	6023      	strmi	r3, [r4, #0]
 8009da4:	b91d      	cbnz	r5, 8009dae <_printf_i+0x196>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	f023 0320 	bic.w	r3, r3, #32
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	2310      	movs	r3, #16
 8009db0:	e7b0      	b.n	8009d14 <_printf_i+0xfc>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	f043 0320 	orr.w	r3, r3, #32
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	2378      	movs	r3, #120	; 0x78
 8009dbc:	4828      	ldr	r0, [pc, #160]	; (8009e60 <_printf_i+0x248>)
 8009dbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dc2:	e7e3      	b.n	8009d8c <_printf_i+0x174>
 8009dc4:	065e      	lsls	r6, r3, #25
 8009dc6:	bf48      	it	mi
 8009dc8:	b2ad      	uxthmi	r5, r5
 8009dca:	e7e6      	b.n	8009d9a <_printf_i+0x182>
 8009dcc:	4616      	mov	r6, r2
 8009dce:	e7bb      	b.n	8009d48 <_printf_i+0x130>
 8009dd0:	680b      	ldr	r3, [r1, #0]
 8009dd2:	6826      	ldr	r6, [r4, #0]
 8009dd4:	6960      	ldr	r0, [r4, #20]
 8009dd6:	1d1d      	adds	r5, r3, #4
 8009dd8:	600d      	str	r5, [r1, #0]
 8009dda:	0635      	lsls	r5, r6, #24
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	d501      	bpl.n	8009de4 <_printf_i+0x1cc>
 8009de0:	6018      	str	r0, [r3, #0]
 8009de2:	e002      	b.n	8009dea <_printf_i+0x1d2>
 8009de4:	0671      	lsls	r1, r6, #25
 8009de6:	d5fb      	bpl.n	8009de0 <_printf_i+0x1c8>
 8009de8:	8018      	strh	r0, [r3, #0]
 8009dea:	2300      	movs	r3, #0
 8009dec:	6123      	str	r3, [r4, #16]
 8009dee:	4616      	mov	r6, r2
 8009df0:	e7ba      	b.n	8009d68 <_printf_i+0x150>
 8009df2:	680b      	ldr	r3, [r1, #0]
 8009df4:	1d1a      	adds	r2, r3, #4
 8009df6:	600a      	str	r2, [r1, #0]
 8009df8:	681e      	ldr	r6, [r3, #0]
 8009dfa:	6862      	ldr	r2, [r4, #4]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f7f6 f9ee 	bl	80001e0 <memchr>
 8009e04:	b108      	cbz	r0, 8009e0a <_printf_i+0x1f2>
 8009e06:	1b80      	subs	r0, r0, r6
 8009e08:	6060      	str	r0, [r4, #4]
 8009e0a:	6863      	ldr	r3, [r4, #4]
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e14:	e7a8      	b.n	8009d68 <_printf_i+0x150>
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	4632      	mov	r2, r6
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	47d0      	blx	sl
 8009e20:	3001      	adds	r0, #1
 8009e22:	d0ab      	beq.n	8009d7c <_printf_i+0x164>
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	079b      	lsls	r3, r3, #30
 8009e28:	d413      	bmi.n	8009e52 <_printf_i+0x23a>
 8009e2a:	68e0      	ldr	r0, [r4, #12]
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	4298      	cmp	r0, r3
 8009e30:	bfb8      	it	lt
 8009e32:	4618      	movlt	r0, r3
 8009e34:	e7a4      	b.n	8009d80 <_printf_i+0x168>
 8009e36:	2301      	movs	r3, #1
 8009e38:	4632      	mov	r2, r6
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	47d0      	blx	sl
 8009e40:	3001      	adds	r0, #1
 8009e42:	d09b      	beq.n	8009d7c <_printf_i+0x164>
 8009e44:	3501      	adds	r5, #1
 8009e46:	68e3      	ldr	r3, [r4, #12]
 8009e48:	9903      	ldr	r1, [sp, #12]
 8009e4a:	1a5b      	subs	r3, r3, r1
 8009e4c:	42ab      	cmp	r3, r5
 8009e4e:	dcf2      	bgt.n	8009e36 <_printf_i+0x21e>
 8009e50:	e7eb      	b.n	8009e2a <_printf_i+0x212>
 8009e52:	2500      	movs	r5, #0
 8009e54:	f104 0619 	add.w	r6, r4, #25
 8009e58:	e7f5      	b.n	8009e46 <_printf_i+0x22e>
 8009e5a:	bf00      	nop
 8009e5c:	0800bfae 	.word	0x0800bfae
 8009e60:	0800bfbf 	.word	0x0800bfbf

08009e64 <quorem>:
 8009e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	6903      	ldr	r3, [r0, #16]
 8009e6a:	690c      	ldr	r4, [r1, #16]
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	4607      	mov	r7, r0
 8009e70:	f2c0 8081 	blt.w	8009f76 <quorem+0x112>
 8009e74:	3c01      	subs	r4, #1
 8009e76:	f101 0814 	add.w	r8, r1, #20
 8009e7a:	f100 0514 	add.w	r5, r0, #20
 8009e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e98:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e9c:	d331      	bcc.n	8009f02 <quorem+0x9e>
 8009e9e:	f04f 0e00 	mov.w	lr, #0
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	46ac      	mov	ip, r5
 8009ea6:	46f2      	mov	sl, lr
 8009ea8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009eac:	b293      	uxth	r3, r2
 8009eae:	fb06 e303 	mla	r3, r6, r3, lr
 8009eb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	ebaa 0303 	sub.w	r3, sl, r3
 8009ebc:	0c12      	lsrs	r2, r2, #16
 8009ebe:	f8dc a000 	ldr.w	sl, [ip]
 8009ec2:	fb06 e202 	mla	r2, r6, r2, lr
 8009ec6:	fa13 f38a 	uxtah	r3, r3, sl
 8009eca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ece:	fa1f fa82 	uxth.w	sl, r2
 8009ed2:	f8dc 2000 	ldr.w	r2, [ip]
 8009ed6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009eda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ee4:	4581      	cmp	r9, r0
 8009ee6:	f84c 3b04 	str.w	r3, [ip], #4
 8009eea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009eee:	d2db      	bcs.n	8009ea8 <quorem+0x44>
 8009ef0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ef4:	b92b      	cbnz	r3, 8009f02 <quorem+0x9e>
 8009ef6:	9b01      	ldr	r3, [sp, #4]
 8009ef8:	3b04      	subs	r3, #4
 8009efa:	429d      	cmp	r5, r3
 8009efc:	461a      	mov	r2, r3
 8009efe:	d32e      	bcc.n	8009f5e <quorem+0xfa>
 8009f00:	613c      	str	r4, [r7, #16]
 8009f02:	4638      	mov	r0, r7
 8009f04:	f001 f8b2 	bl	800b06c <__mcmp>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	db24      	blt.n	8009f56 <quorem+0xf2>
 8009f0c:	3601      	adds	r6, #1
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f04f 0c00 	mov.w	ip, #0
 8009f14:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f18:	f8d0 e000 	ldr.w	lr, [r0]
 8009f1c:	b293      	uxth	r3, r2
 8009f1e:	ebac 0303 	sub.w	r3, ip, r3
 8009f22:	0c12      	lsrs	r2, r2, #16
 8009f24:	fa13 f38e 	uxtah	r3, r3, lr
 8009f28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f36:	45c1      	cmp	r9, r8
 8009f38:	f840 3b04 	str.w	r3, [r0], #4
 8009f3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f40:	d2e8      	bcs.n	8009f14 <quorem+0xb0>
 8009f42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f4a:	b922      	cbnz	r2, 8009f56 <quorem+0xf2>
 8009f4c:	3b04      	subs	r3, #4
 8009f4e:	429d      	cmp	r5, r3
 8009f50:	461a      	mov	r2, r3
 8009f52:	d30a      	bcc.n	8009f6a <quorem+0x106>
 8009f54:	613c      	str	r4, [r7, #16]
 8009f56:	4630      	mov	r0, r6
 8009f58:	b003      	add	sp, #12
 8009f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5e:	6812      	ldr	r2, [r2, #0]
 8009f60:	3b04      	subs	r3, #4
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	d1cc      	bne.n	8009f00 <quorem+0x9c>
 8009f66:	3c01      	subs	r4, #1
 8009f68:	e7c7      	b.n	8009efa <quorem+0x96>
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	3b04      	subs	r3, #4
 8009f6e:	2a00      	cmp	r2, #0
 8009f70:	d1f0      	bne.n	8009f54 <quorem+0xf0>
 8009f72:	3c01      	subs	r4, #1
 8009f74:	e7eb      	b.n	8009f4e <quorem+0xea>
 8009f76:	2000      	movs	r0, #0
 8009f78:	e7ee      	b.n	8009f58 <quorem+0xf4>
 8009f7a:	0000      	movs	r0, r0
 8009f7c:	0000      	movs	r0, r0
	...

08009f80 <_dtoa_r>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	ed2d 8b02 	vpush	{d8}
 8009f88:	ec57 6b10 	vmov	r6, r7, d0
 8009f8c:	b095      	sub	sp, #84	; 0x54
 8009f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f94:	9105      	str	r1, [sp, #20]
 8009f96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fa0:	b975      	cbnz	r5, 8009fc0 <_dtoa_r+0x40>
 8009fa2:	2010      	movs	r0, #16
 8009fa4:	f000 fddc 	bl	800ab60 <malloc>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	6260      	str	r0, [r4, #36]	; 0x24
 8009fac:	b920      	cbnz	r0, 8009fb8 <_dtoa_r+0x38>
 8009fae:	4bb2      	ldr	r3, [pc, #712]	; (800a278 <_dtoa_r+0x2f8>)
 8009fb0:	21ea      	movs	r1, #234	; 0xea
 8009fb2:	48b2      	ldr	r0, [pc, #712]	; (800a27c <_dtoa_r+0x2fc>)
 8009fb4:	f001 fa24 	bl	800b400 <__assert_func>
 8009fb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fbc:	6005      	str	r5, [r0, #0]
 8009fbe:	60c5      	str	r5, [r0, #12]
 8009fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fc2:	6819      	ldr	r1, [r3, #0]
 8009fc4:	b151      	cbz	r1, 8009fdc <_dtoa_r+0x5c>
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	604a      	str	r2, [r1, #4]
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4093      	lsls	r3, r2
 8009fce:	608b      	str	r3, [r1, #8]
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f000 fe0d 	bl	800abf0 <_Bfree>
 8009fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fd8:	2200      	movs	r2, #0
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	1e3b      	subs	r3, r7, #0
 8009fde:	bfb9      	ittee	lt
 8009fe0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fe4:	9303      	strlt	r3, [sp, #12]
 8009fe6:	2300      	movge	r3, #0
 8009fe8:	f8c8 3000 	strge.w	r3, [r8]
 8009fec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009ff0:	4ba3      	ldr	r3, [pc, #652]	; (800a280 <_dtoa_r+0x300>)
 8009ff2:	bfbc      	itt	lt
 8009ff4:	2201      	movlt	r2, #1
 8009ff6:	f8c8 2000 	strlt.w	r2, [r8]
 8009ffa:	ea33 0309 	bics.w	r3, r3, r9
 8009ffe:	d11b      	bne.n	800a038 <_dtoa_r+0xb8>
 800a000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a002:	f242 730f 	movw	r3, #9999	; 0x270f
 800a006:	6013      	str	r3, [r2, #0]
 800a008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a00c:	4333      	orrs	r3, r6
 800a00e:	f000 857a 	beq.w	800ab06 <_dtoa_r+0xb86>
 800a012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a014:	b963      	cbnz	r3, 800a030 <_dtoa_r+0xb0>
 800a016:	4b9b      	ldr	r3, [pc, #620]	; (800a284 <_dtoa_r+0x304>)
 800a018:	e024      	b.n	800a064 <_dtoa_r+0xe4>
 800a01a:	4b9b      	ldr	r3, [pc, #620]	; (800a288 <_dtoa_r+0x308>)
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	3308      	adds	r3, #8
 800a020:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	9800      	ldr	r0, [sp, #0]
 800a026:	b015      	add	sp, #84	; 0x54
 800a028:	ecbd 8b02 	vpop	{d8}
 800a02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a030:	4b94      	ldr	r3, [pc, #592]	; (800a284 <_dtoa_r+0x304>)
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	3303      	adds	r3, #3
 800a036:	e7f3      	b.n	800a020 <_dtoa_r+0xa0>
 800a038:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a03c:	2200      	movs	r2, #0
 800a03e:	ec51 0b17 	vmov	r0, r1, d7
 800a042:	2300      	movs	r3, #0
 800a044:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a048:	f7f6 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a04c:	4680      	mov	r8, r0
 800a04e:	b158      	cbz	r0, 800a068 <_dtoa_r+0xe8>
 800a050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a052:	2301      	movs	r3, #1
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 8551 	beq.w	800ab00 <_dtoa_r+0xb80>
 800a05e:	488b      	ldr	r0, [pc, #556]	; (800a28c <_dtoa_r+0x30c>)
 800a060:	6018      	str	r0, [r3, #0]
 800a062:	1e43      	subs	r3, r0, #1
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	e7dd      	b.n	800a024 <_dtoa_r+0xa4>
 800a068:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a06c:	aa12      	add	r2, sp, #72	; 0x48
 800a06e:	a913      	add	r1, sp, #76	; 0x4c
 800a070:	4620      	mov	r0, r4
 800a072:	f001 f89f 	bl	800b1b4 <__d2b>
 800a076:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a07a:	4683      	mov	fp, r0
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	d07c      	beq.n	800a17a <_dtoa_r+0x1fa>
 800a080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a082:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a08a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a08e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a092:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a09a:	4b7d      	ldr	r3, [pc, #500]	; (800a290 <_dtoa_r+0x310>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	4630      	mov	r0, r6
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	f7f6 f8f1 	bl	8000288 <__aeabi_dsub>
 800a0a6:	a36e      	add	r3, pc, #440	; (adr r3, 800a260 <_dtoa_r+0x2e0>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f7f6 faa4 	bl	80005f8 <__aeabi_dmul>
 800a0b0:	a36d      	add	r3, pc, #436	; (adr r3, 800a268 <_dtoa_r+0x2e8>)
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	f7f6 f8e9 	bl	800028c <__adddf3>
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	4628      	mov	r0, r5
 800a0be:	460f      	mov	r7, r1
 800a0c0:	f7f6 fa30 	bl	8000524 <__aeabi_i2d>
 800a0c4:	a36a      	add	r3, pc, #424	; (adr r3, 800a270 <_dtoa_r+0x2f0>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f7f6 fa95 	bl	80005f8 <__aeabi_dmul>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	f7f6 f8d9 	bl	800028c <__adddf3>
 800a0da:	4606      	mov	r6, r0
 800a0dc:	460f      	mov	r7, r1
 800a0de:	f7f6 fd3b 	bl	8000b58 <__aeabi_d2iz>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	4682      	mov	sl, r0
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	f7f6 fcf6 	bl	8000adc <__aeabi_dcmplt>
 800a0f0:	b148      	cbz	r0, 800a106 <_dtoa_r+0x186>
 800a0f2:	4650      	mov	r0, sl
 800a0f4:	f7f6 fa16 	bl	8000524 <__aeabi_i2d>
 800a0f8:	4632      	mov	r2, r6
 800a0fa:	463b      	mov	r3, r7
 800a0fc:	f7f6 fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a100:	b908      	cbnz	r0, 800a106 <_dtoa_r+0x186>
 800a102:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a106:	f1ba 0f16 	cmp.w	sl, #22
 800a10a:	d854      	bhi.n	800a1b6 <_dtoa_r+0x236>
 800a10c:	4b61      	ldr	r3, [pc, #388]	; (800a294 <_dtoa_r+0x314>)
 800a10e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a11a:	f7f6 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d04b      	beq.n	800a1ba <_dtoa_r+0x23a>
 800a122:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a126:	2300      	movs	r3, #0
 800a128:	930e      	str	r3, [sp, #56]	; 0x38
 800a12a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a12c:	1b5d      	subs	r5, r3, r5
 800a12e:	1e6b      	subs	r3, r5, #1
 800a130:	9304      	str	r3, [sp, #16]
 800a132:	bf43      	ittte	mi
 800a134:	2300      	movmi	r3, #0
 800a136:	f1c5 0801 	rsbmi	r8, r5, #1
 800a13a:	9304      	strmi	r3, [sp, #16]
 800a13c:	f04f 0800 	movpl.w	r8, #0
 800a140:	f1ba 0f00 	cmp.w	sl, #0
 800a144:	db3b      	blt.n	800a1be <_dtoa_r+0x23e>
 800a146:	9b04      	ldr	r3, [sp, #16]
 800a148:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a14c:	4453      	add	r3, sl
 800a14e:	9304      	str	r3, [sp, #16]
 800a150:	2300      	movs	r3, #0
 800a152:	9306      	str	r3, [sp, #24]
 800a154:	9b05      	ldr	r3, [sp, #20]
 800a156:	2b09      	cmp	r3, #9
 800a158:	d869      	bhi.n	800a22e <_dtoa_r+0x2ae>
 800a15a:	2b05      	cmp	r3, #5
 800a15c:	bfc4      	itt	gt
 800a15e:	3b04      	subgt	r3, #4
 800a160:	9305      	strgt	r3, [sp, #20]
 800a162:	9b05      	ldr	r3, [sp, #20]
 800a164:	f1a3 0302 	sub.w	r3, r3, #2
 800a168:	bfcc      	ite	gt
 800a16a:	2500      	movgt	r5, #0
 800a16c:	2501      	movle	r5, #1
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d869      	bhi.n	800a246 <_dtoa_r+0x2c6>
 800a172:	e8df f003 	tbb	[pc, r3]
 800a176:	4e2c      	.short	0x4e2c
 800a178:	5a4c      	.short	0x5a4c
 800a17a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a17e:	441d      	add	r5, r3
 800a180:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a184:	2b20      	cmp	r3, #32
 800a186:	bfc1      	itttt	gt
 800a188:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a18c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a190:	fa09 f303 	lslgt.w	r3, r9, r3
 800a194:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a198:	bfda      	itte	le
 800a19a:	f1c3 0320 	rsble	r3, r3, #32
 800a19e:	fa06 f003 	lslle.w	r0, r6, r3
 800a1a2:	4318      	orrgt	r0, r3
 800a1a4:	f7f6 f9ae 	bl	8000504 <__aeabi_ui2d>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a1b0:	3d01      	subs	r5, #1
 800a1b2:	9310      	str	r3, [sp, #64]	; 0x40
 800a1b4:	e771      	b.n	800a09a <_dtoa_r+0x11a>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e7b6      	b.n	800a128 <_dtoa_r+0x1a8>
 800a1ba:	900e      	str	r0, [sp, #56]	; 0x38
 800a1bc:	e7b5      	b.n	800a12a <_dtoa_r+0x1aa>
 800a1be:	f1ca 0300 	rsb	r3, sl, #0
 800a1c2:	9306      	str	r3, [sp, #24]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	eba8 080a 	sub.w	r8, r8, sl
 800a1ca:	930d      	str	r3, [sp, #52]	; 0x34
 800a1cc:	e7c2      	b.n	800a154 <_dtoa_r+0x1d4>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	9308      	str	r3, [sp, #32]
 800a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dc39      	bgt.n	800a24c <_dtoa_r+0x2cc>
 800a1d8:	f04f 0901 	mov.w	r9, #1
 800a1dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1e0:	464b      	mov	r3, r9
 800a1e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a1e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	6042      	str	r2, [r0, #4]
 800a1ec:	2204      	movs	r2, #4
 800a1ee:	f102 0614 	add.w	r6, r2, #20
 800a1f2:	429e      	cmp	r6, r3
 800a1f4:	6841      	ldr	r1, [r0, #4]
 800a1f6:	d92f      	bls.n	800a258 <_dtoa_r+0x2d8>
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 fcb9 	bl	800ab70 <_Balloc>
 800a1fe:	9000      	str	r0, [sp, #0]
 800a200:	2800      	cmp	r0, #0
 800a202:	d14b      	bne.n	800a29c <_dtoa_r+0x31c>
 800a204:	4b24      	ldr	r3, [pc, #144]	; (800a298 <_dtoa_r+0x318>)
 800a206:	4602      	mov	r2, r0
 800a208:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a20c:	e6d1      	b.n	8009fb2 <_dtoa_r+0x32>
 800a20e:	2301      	movs	r3, #1
 800a210:	e7de      	b.n	800a1d0 <_dtoa_r+0x250>
 800a212:	2300      	movs	r3, #0
 800a214:	9308      	str	r3, [sp, #32]
 800a216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a218:	eb0a 0903 	add.w	r9, sl, r3
 800a21c:	f109 0301 	add.w	r3, r9, #1
 800a220:	2b01      	cmp	r3, #1
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	bfb8      	it	lt
 800a226:	2301      	movlt	r3, #1
 800a228:	e7dd      	b.n	800a1e6 <_dtoa_r+0x266>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e7f2      	b.n	800a214 <_dtoa_r+0x294>
 800a22e:	2501      	movs	r5, #1
 800a230:	2300      	movs	r3, #0
 800a232:	9305      	str	r3, [sp, #20]
 800a234:	9508      	str	r5, [sp, #32]
 800a236:	f04f 39ff 	mov.w	r9, #4294967295
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a240:	2312      	movs	r3, #18
 800a242:	9209      	str	r2, [sp, #36]	; 0x24
 800a244:	e7cf      	b.n	800a1e6 <_dtoa_r+0x266>
 800a246:	2301      	movs	r3, #1
 800a248:	9308      	str	r3, [sp, #32]
 800a24a:	e7f4      	b.n	800a236 <_dtoa_r+0x2b6>
 800a24c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a250:	f8cd 9004 	str.w	r9, [sp, #4]
 800a254:	464b      	mov	r3, r9
 800a256:	e7c6      	b.n	800a1e6 <_dtoa_r+0x266>
 800a258:	3101      	adds	r1, #1
 800a25a:	6041      	str	r1, [r0, #4]
 800a25c:	0052      	lsls	r2, r2, #1
 800a25e:	e7c6      	b.n	800a1ee <_dtoa_r+0x26e>
 800a260:	636f4361 	.word	0x636f4361
 800a264:	3fd287a7 	.word	0x3fd287a7
 800a268:	8b60c8b3 	.word	0x8b60c8b3
 800a26c:	3fc68a28 	.word	0x3fc68a28
 800a270:	509f79fb 	.word	0x509f79fb
 800a274:	3fd34413 	.word	0x3fd34413
 800a278:	0800bfdd 	.word	0x0800bfdd
 800a27c:	0800bff4 	.word	0x0800bff4
 800a280:	7ff00000 	.word	0x7ff00000
 800a284:	0800bfd9 	.word	0x0800bfd9
 800a288:	0800bfd0 	.word	0x0800bfd0
 800a28c:	0800bfad 	.word	0x0800bfad
 800a290:	3ff80000 	.word	0x3ff80000
 800a294:	0800c0f0 	.word	0x0800c0f0
 800a298:	0800c053 	.word	0x0800c053
 800a29c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29e:	9a00      	ldr	r2, [sp, #0]
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	9b01      	ldr	r3, [sp, #4]
 800a2a4:	2b0e      	cmp	r3, #14
 800a2a6:	f200 80ad 	bhi.w	800a404 <_dtoa_r+0x484>
 800a2aa:	2d00      	cmp	r5, #0
 800a2ac:	f000 80aa 	beq.w	800a404 <_dtoa_r+0x484>
 800a2b0:	f1ba 0f00 	cmp.w	sl, #0
 800a2b4:	dd36      	ble.n	800a324 <_dtoa_r+0x3a4>
 800a2b6:	4ac3      	ldr	r2, [pc, #780]	; (800a5c4 <_dtoa_r+0x644>)
 800a2b8:	f00a 030f 	and.w	r3, sl, #15
 800a2bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2c0:	ed93 7b00 	vldr	d7, [r3]
 800a2c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a2c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a2cc:	eeb0 8a47 	vmov.f32	s16, s14
 800a2d0:	eef0 8a67 	vmov.f32	s17, s15
 800a2d4:	d016      	beq.n	800a304 <_dtoa_r+0x384>
 800a2d6:	4bbc      	ldr	r3, [pc, #752]	; (800a5c8 <_dtoa_r+0x648>)
 800a2d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2e0:	f7f6 fab4 	bl	800084c <__aeabi_ddiv>
 800a2e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2e8:	f007 070f 	and.w	r7, r7, #15
 800a2ec:	2503      	movs	r5, #3
 800a2ee:	4eb6      	ldr	r6, [pc, #728]	; (800a5c8 <_dtoa_r+0x648>)
 800a2f0:	b957      	cbnz	r7, 800a308 <_dtoa_r+0x388>
 800a2f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f6:	ec53 2b18 	vmov	r2, r3, d8
 800a2fa:	f7f6 faa7 	bl	800084c <__aeabi_ddiv>
 800a2fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a302:	e029      	b.n	800a358 <_dtoa_r+0x3d8>
 800a304:	2502      	movs	r5, #2
 800a306:	e7f2      	b.n	800a2ee <_dtoa_r+0x36e>
 800a308:	07f9      	lsls	r1, r7, #31
 800a30a:	d508      	bpl.n	800a31e <_dtoa_r+0x39e>
 800a30c:	ec51 0b18 	vmov	r0, r1, d8
 800a310:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a314:	f7f6 f970 	bl	80005f8 <__aeabi_dmul>
 800a318:	ec41 0b18 	vmov	d8, r0, r1
 800a31c:	3501      	adds	r5, #1
 800a31e:	107f      	asrs	r7, r7, #1
 800a320:	3608      	adds	r6, #8
 800a322:	e7e5      	b.n	800a2f0 <_dtoa_r+0x370>
 800a324:	f000 80a6 	beq.w	800a474 <_dtoa_r+0x4f4>
 800a328:	f1ca 0600 	rsb	r6, sl, #0
 800a32c:	4ba5      	ldr	r3, [pc, #660]	; (800a5c4 <_dtoa_r+0x644>)
 800a32e:	4fa6      	ldr	r7, [pc, #664]	; (800a5c8 <_dtoa_r+0x648>)
 800a330:	f006 020f 	and.w	r2, r6, #15
 800a334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a340:	f7f6 f95a 	bl	80005f8 <__aeabi_dmul>
 800a344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a348:	1136      	asrs	r6, r6, #4
 800a34a:	2300      	movs	r3, #0
 800a34c:	2502      	movs	r5, #2
 800a34e:	2e00      	cmp	r6, #0
 800a350:	f040 8085 	bne.w	800a45e <_dtoa_r+0x4de>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1d2      	bne.n	800a2fe <_dtoa_r+0x37e>
 800a358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 808c 	beq.w	800a478 <_dtoa_r+0x4f8>
 800a360:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a364:	4b99      	ldr	r3, [pc, #612]	; (800a5cc <_dtoa_r+0x64c>)
 800a366:	2200      	movs	r2, #0
 800a368:	4630      	mov	r0, r6
 800a36a:	4639      	mov	r1, r7
 800a36c:	f7f6 fbb6 	bl	8000adc <__aeabi_dcmplt>
 800a370:	2800      	cmp	r0, #0
 800a372:	f000 8081 	beq.w	800a478 <_dtoa_r+0x4f8>
 800a376:	9b01      	ldr	r3, [sp, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d07d      	beq.n	800a478 <_dtoa_r+0x4f8>
 800a37c:	f1b9 0f00 	cmp.w	r9, #0
 800a380:	dd3c      	ble.n	800a3fc <_dtoa_r+0x47c>
 800a382:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	2200      	movs	r2, #0
 800a38a:	4b91      	ldr	r3, [pc, #580]	; (800a5d0 <_dtoa_r+0x650>)
 800a38c:	4630      	mov	r0, r6
 800a38e:	4639      	mov	r1, r7
 800a390:	f7f6 f932 	bl	80005f8 <__aeabi_dmul>
 800a394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a398:	3501      	adds	r5, #1
 800a39a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a39e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f7f6 f8be 	bl	8000524 <__aeabi_i2d>
 800a3a8:	4632      	mov	r2, r6
 800a3aa:	463b      	mov	r3, r7
 800a3ac:	f7f6 f924 	bl	80005f8 <__aeabi_dmul>
 800a3b0:	4b88      	ldr	r3, [pc, #544]	; (800a5d4 <_dtoa_r+0x654>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f7f5 ff6a 	bl	800028c <__adddf3>
 800a3b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a3bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3c0:	9303      	str	r3, [sp, #12]
 800a3c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d15c      	bne.n	800a482 <_dtoa_r+0x502>
 800a3c8:	4b83      	ldr	r3, [pc, #524]	; (800a5d8 <_dtoa_r+0x658>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	f7f5 ff5a 	bl	8000288 <__aeabi_dsub>
 800a3d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3d8:	4606      	mov	r6, r0
 800a3da:	460f      	mov	r7, r1
 800a3dc:	f7f6 fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	f040 8296 	bne.w	800a912 <_dtoa_r+0x992>
 800a3e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3f0:	4639      	mov	r1, r7
 800a3f2:	f7f6 fb73 	bl	8000adc <__aeabi_dcmplt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f040 8288 	bne.w	800a90c <_dtoa_r+0x98c>
 800a3fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a400:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a406:	2b00      	cmp	r3, #0
 800a408:	f2c0 8158 	blt.w	800a6bc <_dtoa_r+0x73c>
 800a40c:	f1ba 0f0e 	cmp.w	sl, #14
 800a410:	f300 8154 	bgt.w	800a6bc <_dtoa_r+0x73c>
 800a414:	4b6b      	ldr	r3, [pc, #428]	; (800a5c4 <_dtoa_r+0x644>)
 800a416:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a41a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a420:	2b00      	cmp	r3, #0
 800a422:	f280 80e3 	bge.w	800a5ec <_dtoa_r+0x66c>
 800a426:	9b01      	ldr	r3, [sp, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f300 80df 	bgt.w	800a5ec <_dtoa_r+0x66c>
 800a42e:	f040 826d 	bne.w	800a90c <_dtoa_r+0x98c>
 800a432:	4b69      	ldr	r3, [pc, #420]	; (800a5d8 <_dtoa_r+0x658>)
 800a434:	2200      	movs	r2, #0
 800a436:	4640      	mov	r0, r8
 800a438:	4649      	mov	r1, r9
 800a43a:	f7f6 f8dd 	bl	80005f8 <__aeabi_dmul>
 800a43e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a442:	f7f6 fb5f 	bl	8000b04 <__aeabi_dcmpge>
 800a446:	9e01      	ldr	r6, [sp, #4]
 800a448:	4637      	mov	r7, r6
 800a44a:	2800      	cmp	r0, #0
 800a44c:	f040 8243 	bne.w	800a8d6 <_dtoa_r+0x956>
 800a450:	9d00      	ldr	r5, [sp, #0]
 800a452:	2331      	movs	r3, #49	; 0x31
 800a454:	f805 3b01 	strb.w	r3, [r5], #1
 800a458:	f10a 0a01 	add.w	sl, sl, #1
 800a45c:	e23f      	b.n	800a8de <_dtoa_r+0x95e>
 800a45e:	07f2      	lsls	r2, r6, #31
 800a460:	d505      	bpl.n	800a46e <_dtoa_r+0x4ee>
 800a462:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a466:	f7f6 f8c7 	bl	80005f8 <__aeabi_dmul>
 800a46a:	3501      	adds	r5, #1
 800a46c:	2301      	movs	r3, #1
 800a46e:	1076      	asrs	r6, r6, #1
 800a470:	3708      	adds	r7, #8
 800a472:	e76c      	b.n	800a34e <_dtoa_r+0x3ce>
 800a474:	2502      	movs	r5, #2
 800a476:	e76f      	b.n	800a358 <_dtoa_r+0x3d8>
 800a478:	9b01      	ldr	r3, [sp, #4]
 800a47a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a47e:	930c      	str	r3, [sp, #48]	; 0x30
 800a480:	e78d      	b.n	800a39e <_dtoa_r+0x41e>
 800a482:	9900      	ldr	r1, [sp, #0]
 800a484:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a488:	4b4e      	ldr	r3, [pc, #312]	; (800a5c4 <_dtoa_r+0x644>)
 800a48a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a48e:	4401      	add	r1, r0
 800a490:	9102      	str	r1, [sp, #8]
 800a492:	9908      	ldr	r1, [sp, #32]
 800a494:	eeb0 8a47 	vmov.f32	s16, s14
 800a498:	eef0 8a67 	vmov.f32	s17, s15
 800a49c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	d045      	beq.n	800a534 <_dtoa_r+0x5b4>
 800a4a8:	494c      	ldr	r1, [pc, #304]	; (800a5dc <_dtoa_r+0x65c>)
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	f7f6 f9ce 	bl	800084c <__aeabi_ddiv>
 800a4b0:	ec53 2b18 	vmov	r2, r3, d8
 800a4b4:	f7f5 fee8 	bl	8000288 <__aeabi_dsub>
 800a4b8:	9d00      	ldr	r5, [sp, #0]
 800a4ba:	ec41 0b18 	vmov	d8, r0, r1
 800a4be:	4639      	mov	r1, r7
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f7f6 fb49 	bl	8000b58 <__aeabi_d2iz>
 800a4c6:	900c      	str	r0, [sp, #48]	; 0x30
 800a4c8:	f7f6 f82c 	bl	8000524 <__aeabi_i2d>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f7f5 fed8 	bl	8000288 <__aeabi_dsub>
 800a4d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4da:	3330      	adds	r3, #48	; 0x30
 800a4dc:	f805 3b01 	strb.w	r3, [r5], #1
 800a4e0:	ec53 2b18 	vmov	r2, r3, d8
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	460f      	mov	r7, r1
 800a4e8:	f7f6 faf8 	bl	8000adc <__aeabi_dcmplt>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d165      	bne.n	800a5bc <_dtoa_r+0x63c>
 800a4f0:	4632      	mov	r2, r6
 800a4f2:	463b      	mov	r3, r7
 800a4f4:	4935      	ldr	r1, [pc, #212]	; (800a5cc <_dtoa_r+0x64c>)
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	f7f5 fec6 	bl	8000288 <__aeabi_dsub>
 800a4fc:	ec53 2b18 	vmov	r2, r3, d8
 800a500:	f7f6 faec 	bl	8000adc <__aeabi_dcmplt>
 800a504:	2800      	cmp	r0, #0
 800a506:	f040 80b9 	bne.w	800a67c <_dtoa_r+0x6fc>
 800a50a:	9b02      	ldr	r3, [sp, #8]
 800a50c:	429d      	cmp	r5, r3
 800a50e:	f43f af75 	beq.w	800a3fc <_dtoa_r+0x47c>
 800a512:	4b2f      	ldr	r3, [pc, #188]	; (800a5d0 <_dtoa_r+0x650>)
 800a514:	ec51 0b18 	vmov	r0, r1, d8
 800a518:	2200      	movs	r2, #0
 800a51a:	f7f6 f86d 	bl	80005f8 <__aeabi_dmul>
 800a51e:	4b2c      	ldr	r3, [pc, #176]	; (800a5d0 <_dtoa_r+0x650>)
 800a520:	ec41 0b18 	vmov	d8, r0, r1
 800a524:	2200      	movs	r2, #0
 800a526:	4630      	mov	r0, r6
 800a528:	4639      	mov	r1, r7
 800a52a:	f7f6 f865 	bl	80005f8 <__aeabi_dmul>
 800a52e:	4606      	mov	r6, r0
 800a530:	460f      	mov	r7, r1
 800a532:	e7c4      	b.n	800a4be <_dtoa_r+0x53e>
 800a534:	ec51 0b17 	vmov	r0, r1, d7
 800a538:	f7f6 f85e 	bl	80005f8 <__aeabi_dmul>
 800a53c:	9b02      	ldr	r3, [sp, #8]
 800a53e:	9d00      	ldr	r5, [sp, #0]
 800a540:	930c      	str	r3, [sp, #48]	; 0x30
 800a542:	ec41 0b18 	vmov	d8, r0, r1
 800a546:	4639      	mov	r1, r7
 800a548:	4630      	mov	r0, r6
 800a54a:	f7f6 fb05 	bl	8000b58 <__aeabi_d2iz>
 800a54e:	9011      	str	r0, [sp, #68]	; 0x44
 800a550:	f7f5 ffe8 	bl	8000524 <__aeabi_i2d>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f5 fe94 	bl	8000288 <__aeabi_dsub>
 800a560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a562:	3330      	adds	r3, #48	; 0x30
 800a564:	f805 3b01 	strb.w	r3, [r5], #1
 800a568:	9b02      	ldr	r3, [sp, #8]
 800a56a:	429d      	cmp	r5, r3
 800a56c:	4606      	mov	r6, r0
 800a56e:	460f      	mov	r7, r1
 800a570:	f04f 0200 	mov.w	r2, #0
 800a574:	d134      	bne.n	800a5e0 <_dtoa_r+0x660>
 800a576:	4b19      	ldr	r3, [pc, #100]	; (800a5dc <_dtoa_r+0x65c>)
 800a578:	ec51 0b18 	vmov	r0, r1, d8
 800a57c:	f7f5 fe86 	bl	800028c <__adddf3>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f7f6 fac6 	bl	8000b18 <__aeabi_dcmpgt>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d175      	bne.n	800a67c <_dtoa_r+0x6fc>
 800a590:	ec53 2b18 	vmov	r2, r3, d8
 800a594:	4911      	ldr	r1, [pc, #68]	; (800a5dc <_dtoa_r+0x65c>)
 800a596:	2000      	movs	r0, #0
 800a598:	f7f5 fe76 	bl	8000288 <__aeabi_dsub>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f6 fa9a 	bl	8000adc <__aeabi_dcmplt>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	f43f af27 	beq.w	800a3fc <_dtoa_r+0x47c>
 800a5ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5b0:	1e6b      	subs	r3, r5, #1
 800a5b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a5b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5b8:	2b30      	cmp	r3, #48	; 0x30
 800a5ba:	d0f8      	beq.n	800a5ae <_dtoa_r+0x62e>
 800a5bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a5c0:	e04a      	b.n	800a658 <_dtoa_r+0x6d8>
 800a5c2:	bf00      	nop
 800a5c4:	0800c0f0 	.word	0x0800c0f0
 800a5c8:	0800c0c8 	.word	0x0800c0c8
 800a5cc:	3ff00000 	.word	0x3ff00000
 800a5d0:	40240000 	.word	0x40240000
 800a5d4:	401c0000 	.word	0x401c0000
 800a5d8:	40140000 	.word	0x40140000
 800a5dc:	3fe00000 	.word	0x3fe00000
 800a5e0:	4baf      	ldr	r3, [pc, #700]	; (800a8a0 <_dtoa_r+0x920>)
 800a5e2:	f7f6 f809 	bl	80005f8 <__aeabi_dmul>
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	460f      	mov	r7, r1
 800a5ea:	e7ac      	b.n	800a546 <_dtoa_r+0x5c6>
 800a5ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5f0:	9d00      	ldr	r5, [sp, #0]
 800a5f2:	4642      	mov	r2, r8
 800a5f4:	464b      	mov	r3, r9
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	f7f6 f927 	bl	800084c <__aeabi_ddiv>
 800a5fe:	f7f6 faab 	bl	8000b58 <__aeabi_d2iz>
 800a602:	9002      	str	r0, [sp, #8]
 800a604:	f7f5 ff8e 	bl	8000524 <__aeabi_i2d>
 800a608:	4642      	mov	r2, r8
 800a60a:	464b      	mov	r3, r9
 800a60c:	f7f5 fff4 	bl	80005f8 <__aeabi_dmul>
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	4630      	mov	r0, r6
 800a616:	4639      	mov	r1, r7
 800a618:	f7f5 fe36 	bl	8000288 <__aeabi_dsub>
 800a61c:	9e02      	ldr	r6, [sp, #8]
 800a61e:	9f01      	ldr	r7, [sp, #4]
 800a620:	3630      	adds	r6, #48	; 0x30
 800a622:	f805 6b01 	strb.w	r6, [r5], #1
 800a626:	9e00      	ldr	r6, [sp, #0]
 800a628:	1bae      	subs	r6, r5, r6
 800a62a:	42b7      	cmp	r7, r6
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	d137      	bne.n	800a6a2 <_dtoa_r+0x722>
 800a632:	f7f5 fe2b 	bl	800028c <__adddf3>
 800a636:	4642      	mov	r2, r8
 800a638:	464b      	mov	r3, r9
 800a63a:	4606      	mov	r6, r0
 800a63c:	460f      	mov	r7, r1
 800a63e:	f7f6 fa6b 	bl	8000b18 <__aeabi_dcmpgt>
 800a642:	b9c8      	cbnz	r0, 800a678 <_dtoa_r+0x6f8>
 800a644:	4642      	mov	r2, r8
 800a646:	464b      	mov	r3, r9
 800a648:	4630      	mov	r0, r6
 800a64a:	4639      	mov	r1, r7
 800a64c:	f7f6 fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a650:	b110      	cbz	r0, 800a658 <_dtoa_r+0x6d8>
 800a652:	9b02      	ldr	r3, [sp, #8]
 800a654:	07d9      	lsls	r1, r3, #31
 800a656:	d40f      	bmi.n	800a678 <_dtoa_r+0x6f8>
 800a658:	4620      	mov	r0, r4
 800a65a:	4659      	mov	r1, fp
 800a65c:	f000 fac8 	bl	800abf0 <_Bfree>
 800a660:	2300      	movs	r3, #0
 800a662:	702b      	strb	r3, [r5, #0]
 800a664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a666:	f10a 0001 	add.w	r0, sl, #1
 800a66a:	6018      	str	r0, [r3, #0]
 800a66c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f43f acd8 	beq.w	800a024 <_dtoa_r+0xa4>
 800a674:	601d      	str	r5, [r3, #0]
 800a676:	e4d5      	b.n	800a024 <_dtoa_r+0xa4>
 800a678:	f8cd a01c 	str.w	sl, [sp, #28]
 800a67c:	462b      	mov	r3, r5
 800a67e:	461d      	mov	r5, r3
 800a680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a684:	2a39      	cmp	r2, #57	; 0x39
 800a686:	d108      	bne.n	800a69a <_dtoa_r+0x71a>
 800a688:	9a00      	ldr	r2, [sp, #0]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d1f7      	bne.n	800a67e <_dtoa_r+0x6fe>
 800a68e:	9a07      	ldr	r2, [sp, #28]
 800a690:	9900      	ldr	r1, [sp, #0]
 800a692:	3201      	adds	r2, #1
 800a694:	9207      	str	r2, [sp, #28]
 800a696:	2230      	movs	r2, #48	; 0x30
 800a698:	700a      	strb	r2, [r1, #0]
 800a69a:	781a      	ldrb	r2, [r3, #0]
 800a69c:	3201      	adds	r2, #1
 800a69e:	701a      	strb	r2, [r3, #0]
 800a6a0:	e78c      	b.n	800a5bc <_dtoa_r+0x63c>
 800a6a2:	4b7f      	ldr	r3, [pc, #508]	; (800a8a0 <_dtoa_r+0x920>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f7f5 ffa7 	bl	80005f8 <__aeabi_dmul>
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	460f      	mov	r7, r1
 800a6b2:	f7f6 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d09b      	beq.n	800a5f2 <_dtoa_r+0x672>
 800a6ba:	e7cd      	b.n	800a658 <_dtoa_r+0x6d8>
 800a6bc:	9a08      	ldr	r2, [sp, #32]
 800a6be:	2a00      	cmp	r2, #0
 800a6c0:	f000 80c4 	beq.w	800a84c <_dtoa_r+0x8cc>
 800a6c4:	9a05      	ldr	r2, [sp, #20]
 800a6c6:	2a01      	cmp	r2, #1
 800a6c8:	f300 80a8 	bgt.w	800a81c <_dtoa_r+0x89c>
 800a6cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	f000 80a0 	beq.w	800a814 <_dtoa_r+0x894>
 800a6d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6d8:	9e06      	ldr	r6, [sp, #24]
 800a6da:	4645      	mov	r5, r8
 800a6dc:	9a04      	ldr	r2, [sp, #16]
 800a6de:	2101      	movs	r1, #1
 800a6e0:	441a      	add	r2, r3
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	4498      	add	r8, r3
 800a6e6:	9204      	str	r2, [sp, #16]
 800a6e8:	f000 fb3e 	bl	800ad68 <__i2b>
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	2d00      	cmp	r5, #0
 800a6f0:	dd0b      	ble.n	800a70a <_dtoa_r+0x78a>
 800a6f2:	9b04      	ldr	r3, [sp, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	dd08      	ble.n	800a70a <_dtoa_r+0x78a>
 800a6f8:	42ab      	cmp	r3, r5
 800a6fa:	9a04      	ldr	r2, [sp, #16]
 800a6fc:	bfa8      	it	ge
 800a6fe:	462b      	movge	r3, r5
 800a700:	eba8 0803 	sub.w	r8, r8, r3
 800a704:	1aed      	subs	r5, r5, r3
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	9b06      	ldr	r3, [sp, #24]
 800a70c:	b1fb      	cbz	r3, 800a74e <_dtoa_r+0x7ce>
 800a70e:	9b08      	ldr	r3, [sp, #32]
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 809f 	beq.w	800a854 <_dtoa_r+0x8d4>
 800a716:	2e00      	cmp	r6, #0
 800a718:	dd11      	ble.n	800a73e <_dtoa_r+0x7be>
 800a71a:	4639      	mov	r1, r7
 800a71c:	4632      	mov	r2, r6
 800a71e:	4620      	mov	r0, r4
 800a720:	f000 fbde 	bl	800aee0 <__pow5mult>
 800a724:	465a      	mov	r2, fp
 800a726:	4601      	mov	r1, r0
 800a728:	4607      	mov	r7, r0
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 fb32 	bl	800ad94 <__multiply>
 800a730:	4659      	mov	r1, fp
 800a732:	9007      	str	r0, [sp, #28]
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fa5b 	bl	800abf0 <_Bfree>
 800a73a:	9b07      	ldr	r3, [sp, #28]
 800a73c:	469b      	mov	fp, r3
 800a73e:	9b06      	ldr	r3, [sp, #24]
 800a740:	1b9a      	subs	r2, r3, r6
 800a742:	d004      	beq.n	800a74e <_dtoa_r+0x7ce>
 800a744:	4659      	mov	r1, fp
 800a746:	4620      	mov	r0, r4
 800a748:	f000 fbca 	bl	800aee0 <__pow5mult>
 800a74c:	4683      	mov	fp, r0
 800a74e:	2101      	movs	r1, #1
 800a750:	4620      	mov	r0, r4
 800a752:	f000 fb09 	bl	800ad68 <__i2b>
 800a756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a758:	2b00      	cmp	r3, #0
 800a75a:	4606      	mov	r6, r0
 800a75c:	dd7c      	ble.n	800a858 <_dtoa_r+0x8d8>
 800a75e:	461a      	mov	r2, r3
 800a760:	4601      	mov	r1, r0
 800a762:	4620      	mov	r0, r4
 800a764:	f000 fbbc 	bl	800aee0 <__pow5mult>
 800a768:	9b05      	ldr	r3, [sp, #20]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	4606      	mov	r6, r0
 800a76e:	dd76      	ble.n	800a85e <_dtoa_r+0x8de>
 800a770:	2300      	movs	r3, #0
 800a772:	9306      	str	r3, [sp, #24]
 800a774:	6933      	ldr	r3, [r6, #16]
 800a776:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a77a:	6918      	ldr	r0, [r3, #16]
 800a77c:	f000 faa4 	bl	800acc8 <__hi0bits>
 800a780:	f1c0 0020 	rsb	r0, r0, #32
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	4418      	add	r0, r3
 800a788:	f010 001f 	ands.w	r0, r0, #31
 800a78c:	f000 8086 	beq.w	800a89c <_dtoa_r+0x91c>
 800a790:	f1c0 0320 	rsb	r3, r0, #32
 800a794:	2b04      	cmp	r3, #4
 800a796:	dd7f      	ble.n	800a898 <_dtoa_r+0x918>
 800a798:	f1c0 001c 	rsb	r0, r0, #28
 800a79c:	9b04      	ldr	r3, [sp, #16]
 800a79e:	4403      	add	r3, r0
 800a7a0:	4480      	add	r8, r0
 800a7a2:	4405      	add	r5, r0
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	f1b8 0f00 	cmp.w	r8, #0
 800a7aa:	dd05      	ble.n	800a7b8 <_dtoa_r+0x838>
 800a7ac:	4659      	mov	r1, fp
 800a7ae:	4642      	mov	r2, r8
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fbef 	bl	800af94 <__lshift>
 800a7b6:	4683      	mov	fp, r0
 800a7b8:	9b04      	ldr	r3, [sp, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	dd05      	ble.n	800a7ca <_dtoa_r+0x84a>
 800a7be:	4631      	mov	r1, r6
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 fbe6 	bl	800af94 <__lshift>
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d069      	beq.n	800a8a4 <_dtoa_r+0x924>
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	4658      	mov	r0, fp
 800a7d4:	f000 fc4a 	bl	800b06c <__mcmp>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	da63      	bge.n	800a8a4 <_dtoa_r+0x924>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4659      	mov	r1, fp
 800a7e0:	220a      	movs	r2, #10
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fa26 	bl	800ac34 <__multadd>
 800a7e8:	9b08      	ldr	r3, [sp, #32]
 800a7ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7ee:	4683      	mov	fp, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 818f 	beq.w	800ab14 <_dtoa_r+0xb94>
 800a7f6:	4639      	mov	r1, r7
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	220a      	movs	r2, #10
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f000 fa19 	bl	800ac34 <__multadd>
 800a802:	f1b9 0f00 	cmp.w	r9, #0
 800a806:	4607      	mov	r7, r0
 800a808:	f300 808e 	bgt.w	800a928 <_dtoa_r+0x9a8>
 800a80c:	9b05      	ldr	r3, [sp, #20]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	dc50      	bgt.n	800a8b4 <_dtoa_r+0x934>
 800a812:	e089      	b.n	800a928 <_dtoa_r+0x9a8>
 800a814:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a81a:	e75d      	b.n	800a6d8 <_dtoa_r+0x758>
 800a81c:	9b01      	ldr	r3, [sp, #4]
 800a81e:	1e5e      	subs	r6, r3, #1
 800a820:	9b06      	ldr	r3, [sp, #24]
 800a822:	42b3      	cmp	r3, r6
 800a824:	bfbf      	itttt	lt
 800a826:	9b06      	ldrlt	r3, [sp, #24]
 800a828:	9606      	strlt	r6, [sp, #24]
 800a82a:	1af2      	sublt	r2, r6, r3
 800a82c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a82e:	bfb6      	itet	lt
 800a830:	189b      	addlt	r3, r3, r2
 800a832:	1b9e      	subge	r6, r3, r6
 800a834:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a836:	9b01      	ldr	r3, [sp, #4]
 800a838:	bfb8      	it	lt
 800a83a:	2600      	movlt	r6, #0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bfb5      	itete	lt
 800a840:	eba8 0503 	sublt.w	r5, r8, r3
 800a844:	9b01      	ldrge	r3, [sp, #4]
 800a846:	2300      	movlt	r3, #0
 800a848:	4645      	movge	r5, r8
 800a84a:	e747      	b.n	800a6dc <_dtoa_r+0x75c>
 800a84c:	9e06      	ldr	r6, [sp, #24]
 800a84e:	9f08      	ldr	r7, [sp, #32]
 800a850:	4645      	mov	r5, r8
 800a852:	e74c      	b.n	800a6ee <_dtoa_r+0x76e>
 800a854:	9a06      	ldr	r2, [sp, #24]
 800a856:	e775      	b.n	800a744 <_dtoa_r+0x7c4>
 800a858:	9b05      	ldr	r3, [sp, #20]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	dc18      	bgt.n	800a890 <_dtoa_r+0x910>
 800a85e:	9b02      	ldr	r3, [sp, #8]
 800a860:	b9b3      	cbnz	r3, 800a890 <_dtoa_r+0x910>
 800a862:	9b03      	ldr	r3, [sp, #12]
 800a864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a868:	b9a3      	cbnz	r3, 800a894 <_dtoa_r+0x914>
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a870:	0d1b      	lsrs	r3, r3, #20
 800a872:	051b      	lsls	r3, r3, #20
 800a874:	b12b      	cbz	r3, 800a882 <_dtoa_r+0x902>
 800a876:	9b04      	ldr	r3, [sp, #16]
 800a878:	3301      	adds	r3, #1
 800a87a:	9304      	str	r3, [sp, #16]
 800a87c:	f108 0801 	add.w	r8, r8, #1
 800a880:	2301      	movs	r3, #1
 800a882:	9306      	str	r3, [sp, #24]
 800a884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a886:	2b00      	cmp	r3, #0
 800a888:	f47f af74 	bne.w	800a774 <_dtoa_r+0x7f4>
 800a88c:	2001      	movs	r0, #1
 800a88e:	e779      	b.n	800a784 <_dtoa_r+0x804>
 800a890:	2300      	movs	r3, #0
 800a892:	e7f6      	b.n	800a882 <_dtoa_r+0x902>
 800a894:	9b02      	ldr	r3, [sp, #8]
 800a896:	e7f4      	b.n	800a882 <_dtoa_r+0x902>
 800a898:	d085      	beq.n	800a7a6 <_dtoa_r+0x826>
 800a89a:	4618      	mov	r0, r3
 800a89c:	301c      	adds	r0, #28
 800a89e:	e77d      	b.n	800a79c <_dtoa_r+0x81c>
 800a8a0:	40240000 	.word	0x40240000
 800a8a4:	9b01      	ldr	r3, [sp, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dc38      	bgt.n	800a91c <_dtoa_r+0x99c>
 800a8aa:	9b05      	ldr	r3, [sp, #20]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	dd35      	ble.n	800a91c <_dtoa_r+0x99c>
 800a8b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a8b4:	f1b9 0f00 	cmp.w	r9, #0
 800a8b8:	d10d      	bne.n	800a8d6 <_dtoa_r+0x956>
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	464b      	mov	r3, r9
 800a8be:	2205      	movs	r2, #5
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f000 f9b7 	bl	800ac34 <__multadd>
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	4658      	mov	r0, fp
 800a8cc:	f000 fbce 	bl	800b06c <__mcmp>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	f73f adbd 	bgt.w	800a450 <_dtoa_r+0x4d0>
 800a8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d8:	9d00      	ldr	r5, [sp, #0]
 800a8da:	ea6f 0a03 	mvn.w	sl, r3
 800a8de:	f04f 0800 	mov.w	r8, #0
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 f983 	bl	800abf0 <_Bfree>
 800a8ea:	2f00      	cmp	r7, #0
 800a8ec:	f43f aeb4 	beq.w	800a658 <_dtoa_r+0x6d8>
 800a8f0:	f1b8 0f00 	cmp.w	r8, #0
 800a8f4:	d005      	beq.n	800a902 <_dtoa_r+0x982>
 800a8f6:	45b8      	cmp	r8, r7
 800a8f8:	d003      	beq.n	800a902 <_dtoa_r+0x982>
 800a8fa:	4641      	mov	r1, r8
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 f977 	bl	800abf0 <_Bfree>
 800a902:	4639      	mov	r1, r7
 800a904:	4620      	mov	r0, r4
 800a906:	f000 f973 	bl	800abf0 <_Bfree>
 800a90a:	e6a5      	b.n	800a658 <_dtoa_r+0x6d8>
 800a90c:	2600      	movs	r6, #0
 800a90e:	4637      	mov	r7, r6
 800a910:	e7e1      	b.n	800a8d6 <_dtoa_r+0x956>
 800a912:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a914:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a918:	4637      	mov	r7, r6
 800a91a:	e599      	b.n	800a450 <_dtoa_r+0x4d0>
 800a91c:	9b08      	ldr	r3, [sp, #32]
 800a91e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 80fd 	beq.w	800ab22 <_dtoa_r+0xba2>
 800a928:	2d00      	cmp	r5, #0
 800a92a:	dd05      	ble.n	800a938 <_dtoa_r+0x9b8>
 800a92c:	4639      	mov	r1, r7
 800a92e:	462a      	mov	r2, r5
 800a930:	4620      	mov	r0, r4
 800a932:	f000 fb2f 	bl	800af94 <__lshift>
 800a936:	4607      	mov	r7, r0
 800a938:	9b06      	ldr	r3, [sp, #24]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d05c      	beq.n	800a9f8 <_dtoa_r+0xa78>
 800a93e:	6879      	ldr	r1, [r7, #4]
 800a940:	4620      	mov	r0, r4
 800a942:	f000 f915 	bl	800ab70 <_Balloc>
 800a946:	4605      	mov	r5, r0
 800a948:	b928      	cbnz	r0, 800a956 <_dtoa_r+0x9d6>
 800a94a:	4b80      	ldr	r3, [pc, #512]	; (800ab4c <_dtoa_r+0xbcc>)
 800a94c:	4602      	mov	r2, r0
 800a94e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a952:	f7ff bb2e 	b.w	8009fb2 <_dtoa_r+0x32>
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	3202      	adds	r2, #2
 800a95a:	0092      	lsls	r2, r2, #2
 800a95c:	f107 010c 	add.w	r1, r7, #12
 800a960:	300c      	adds	r0, #12
 800a962:	f7fe fdff 	bl	8009564 <memcpy>
 800a966:	2201      	movs	r2, #1
 800a968:	4629      	mov	r1, r5
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 fb12 	bl	800af94 <__lshift>
 800a970:	9b00      	ldr	r3, [sp, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	9b00      	ldr	r3, [sp, #0]
 800a978:	444b      	add	r3, r9
 800a97a:	9307      	str	r3, [sp, #28]
 800a97c:	9b02      	ldr	r3, [sp, #8]
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	46b8      	mov	r8, r7
 800a984:	9306      	str	r3, [sp, #24]
 800a986:	4607      	mov	r7, r0
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	4631      	mov	r1, r6
 800a98c:	3b01      	subs	r3, #1
 800a98e:	4658      	mov	r0, fp
 800a990:	9302      	str	r3, [sp, #8]
 800a992:	f7ff fa67 	bl	8009e64 <quorem>
 800a996:	4603      	mov	r3, r0
 800a998:	3330      	adds	r3, #48	; 0x30
 800a99a:	9004      	str	r0, [sp, #16]
 800a99c:	4641      	mov	r1, r8
 800a99e:	4658      	mov	r0, fp
 800a9a0:	9308      	str	r3, [sp, #32]
 800a9a2:	f000 fb63 	bl	800b06c <__mcmp>
 800a9a6:	463a      	mov	r2, r7
 800a9a8:	4681      	mov	r9, r0
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 fb79 	bl	800b0a4 <__mdiff>
 800a9b2:	68c2      	ldr	r2, [r0, #12]
 800a9b4:	9b08      	ldr	r3, [sp, #32]
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	bb02      	cbnz	r2, 800a9fc <_dtoa_r+0xa7c>
 800a9ba:	4601      	mov	r1, r0
 800a9bc:	4658      	mov	r0, fp
 800a9be:	f000 fb55 	bl	800b06c <__mcmp>
 800a9c2:	9b08      	ldr	r3, [sp, #32]
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a9ce:	f000 f90f 	bl	800abf0 <_Bfree>
 800a9d2:	9b05      	ldr	r3, [sp, #20]
 800a9d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9d6:	9d01      	ldr	r5, [sp, #4]
 800a9d8:	ea43 0102 	orr.w	r1, r3, r2
 800a9dc:	9b06      	ldr	r3, [sp, #24]
 800a9de:	430b      	orrs	r3, r1
 800a9e0:	9b08      	ldr	r3, [sp, #32]
 800a9e2:	d10d      	bne.n	800aa00 <_dtoa_r+0xa80>
 800a9e4:	2b39      	cmp	r3, #57	; 0x39
 800a9e6:	d029      	beq.n	800aa3c <_dtoa_r+0xabc>
 800a9e8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ec:	dd01      	ble.n	800a9f2 <_dtoa_r+0xa72>
 800a9ee:	9b04      	ldr	r3, [sp, #16]
 800a9f0:	3331      	adds	r3, #49	; 0x31
 800a9f2:	9a02      	ldr	r2, [sp, #8]
 800a9f4:	7013      	strb	r3, [r2, #0]
 800a9f6:	e774      	b.n	800a8e2 <_dtoa_r+0x962>
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	e7b9      	b.n	800a970 <_dtoa_r+0x9f0>
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	e7e2      	b.n	800a9c6 <_dtoa_r+0xa46>
 800aa00:	f1b9 0f00 	cmp.w	r9, #0
 800aa04:	db06      	blt.n	800aa14 <_dtoa_r+0xa94>
 800aa06:	9905      	ldr	r1, [sp, #20]
 800aa08:	ea41 0909 	orr.w	r9, r1, r9
 800aa0c:	9906      	ldr	r1, [sp, #24]
 800aa0e:	ea59 0101 	orrs.w	r1, r9, r1
 800aa12:	d120      	bne.n	800aa56 <_dtoa_r+0xad6>
 800aa14:	2a00      	cmp	r2, #0
 800aa16:	ddec      	ble.n	800a9f2 <_dtoa_r+0xa72>
 800aa18:	4659      	mov	r1, fp
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	f000 fab8 	bl	800af94 <__lshift>
 800aa24:	4631      	mov	r1, r6
 800aa26:	4683      	mov	fp, r0
 800aa28:	f000 fb20 	bl	800b06c <__mcmp>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	dc02      	bgt.n	800aa38 <_dtoa_r+0xab8>
 800aa32:	d1de      	bne.n	800a9f2 <_dtoa_r+0xa72>
 800aa34:	07da      	lsls	r2, r3, #31
 800aa36:	d5dc      	bpl.n	800a9f2 <_dtoa_r+0xa72>
 800aa38:	2b39      	cmp	r3, #57	; 0x39
 800aa3a:	d1d8      	bne.n	800a9ee <_dtoa_r+0xa6e>
 800aa3c:	9a02      	ldr	r2, [sp, #8]
 800aa3e:	2339      	movs	r3, #57	; 0x39
 800aa40:	7013      	strb	r3, [r2, #0]
 800aa42:	462b      	mov	r3, r5
 800aa44:	461d      	mov	r5, r3
 800aa46:	3b01      	subs	r3, #1
 800aa48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa4c:	2a39      	cmp	r2, #57	; 0x39
 800aa4e:	d050      	beq.n	800aaf2 <_dtoa_r+0xb72>
 800aa50:	3201      	adds	r2, #1
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	e745      	b.n	800a8e2 <_dtoa_r+0x962>
 800aa56:	2a00      	cmp	r2, #0
 800aa58:	dd03      	ble.n	800aa62 <_dtoa_r+0xae2>
 800aa5a:	2b39      	cmp	r3, #57	; 0x39
 800aa5c:	d0ee      	beq.n	800aa3c <_dtoa_r+0xabc>
 800aa5e:	3301      	adds	r3, #1
 800aa60:	e7c7      	b.n	800a9f2 <_dtoa_r+0xa72>
 800aa62:	9a01      	ldr	r2, [sp, #4]
 800aa64:	9907      	ldr	r1, [sp, #28]
 800aa66:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa6a:	428a      	cmp	r2, r1
 800aa6c:	d02a      	beq.n	800aac4 <_dtoa_r+0xb44>
 800aa6e:	4659      	mov	r1, fp
 800aa70:	2300      	movs	r3, #0
 800aa72:	220a      	movs	r2, #10
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 f8dd 	bl	800ac34 <__multadd>
 800aa7a:	45b8      	cmp	r8, r7
 800aa7c:	4683      	mov	fp, r0
 800aa7e:	f04f 0300 	mov.w	r3, #0
 800aa82:	f04f 020a 	mov.w	r2, #10
 800aa86:	4641      	mov	r1, r8
 800aa88:	4620      	mov	r0, r4
 800aa8a:	d107      	bne.n	800aa9c <_dtoa_r+0xb1c>
 800aa8c:	f000 f8d2 	bl	800ac34 <__multadd>
 800aa90:	4680      	mov	r8, r0
 800aa92:	4607      	mov	r7, r0
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	3301      	adds	r3, #1
 800aa98:	9301      	str	r3, [sp, #4]
 800aa9a:	e775      	b.n	800a988 <_dtoa_r+0xa08>
 800aa9c:	f000 f8ca 	bl	800ac34 <__multadd>
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	4680      	mov	r8, r0
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	220a      	movs	r2, #10
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 f8c3 	bl	800ac34 <__multadd>
 800aaae:	4607      	mov	r7, r0
 800aab0:	e7f0      	b.n	800aa94 <_dtoa_r+0xb14>
 800aab2:	f1b9 0f00 	cmp.w	r9, #0
 800aab6:	9a00      	ldr	r2, [sp, #0]
 800aab8:	bfcc      	ite	gt
 800aaba:	464d      	movgt	r5, r9
 800aabc:	2501      	movle	r5, #1
 800aabe:	4415      	add	r5, r2
 800aac0:	f04f 0800 	mov.w	r8, #0
 800aac4:	4659      	mov	r1, fp
 800aac6:	2201      	movs	r2, #1
 800aac8:	4620      	mov	r0, r4
 800aaca:	9301      	str	r3, [sp, #4]
 800aacc:	f000 fa62 	bl	800af94 <__lshift>
 800aad0:	4631      	mov	r1, r6
 800aad2:	4683      	mov	fp, r0
 800aad4:	f000 faca 	bl	800b06c <__mcmp>
 800aad8:	2800      	cmp	r0, #0
 800aada:	dcb2      	bgt.n	800aa42 <_dtoa_r+0xac2>
 800aadc:	d102      	bne.n	800aae4 <_dtoa_r+0xb64>
 800aade:	9b01      	ldr	r3, [sp, #4]
 800aae0:	07db      	lsls	r3, r3, #31
 800aae2:	d4ae      	bmi.n	800aa42 <_dtoa_r+0xac2>
 800aae4:	462b      	mov	r3, r5
 800aae6:	461d      	mov	r5, r3
 800aae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaec:	2a30      	cmp	r2, #48	; 0x30
 800aaee:	d0fa      	beq.n	800aae6 <_dtoa_r+0xb66>
 800aaf0:	e6f7      	b.n	800a8e2 <_dtoa_r+0x962>
 800aaf2:	9a00      	ldr	r2, [sp, #0]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d1a5      	bne.n	800aa44 <_dtoa_r+0xac4>
 800aaf8:	f10a 0a01 	add.w	sl, sl, #1
 800aafc:	2331      	movs	r3, #49	; 0x31
 800aafe:	e779      	b.n	800a9f4 <_dtoa_r+0xa74>
 800ab00:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <_dtoa_r+0xbd0>)
 800ab02:	f7ff baaf 	b.w	800a064 <_dtoa_r+0xe4>
 800ab06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f47f aa86 	bne.w	800a01a <_dtoa_r+0x9a>
 800ab0e:	4b11      	ldr	r3, [pc, #68]	; (800ab54 <_dtoa_r+0xbd4>)
 800ab10:	f7ff baa8 	b.w	800a064 <_dtoa_r+0xe4>
 800ab14:	f1b9 0f00 	cmp.w	r9, #0
 800ab18:	dc03      	bgt.n	800ab22 <_dtoa_r+0xba2>
 800ab1a:	9b05      	ldr	r3, [sp, #20]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	f73f aec9 	bgt.w	800a8b4 <_dtoa_r+0x934>
 800ab22:	9d00      	ldr	r5, [sp, #0]
 800ab24:	4631      	mov	r1, r6
 800ab26:	4658      	mov	r0, fp
 800ab28:	f7ff f99c 	bl	8009e64 <quorem>
 800ab2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab30:	f805 3b01 	strb.w	r3, [r5], #1
 800ab34:	9a00      	ldr	r2, [sp, #0]
 800ab36:	1aaa      	subs	r2, r5, r2
 800ab38:	4591      	cmp	r9, r2
 800ab3a:	ddba      	ble.n	800aab2 <_dtoa_r+0xb32>
 800ab3c:	4659      	mov	r1, fp
 800ab3e:	2300      	movs	r3, #0
 800ab40:	220a      	movs	r2, #10
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 f876 	bl	800ac34 <__multadd>
 800ab48:	4683      	mov	fp, r0
 800ab4a:	e7eb      	b.n	800ab24 <_dtoa_r+0xba4>
 800ab4c:	0800c053 	.word	0x0800c053
 800ab50:	0800bfac 	.word	0x0800bfac
 800ab54:	0800bfd0 	.word	0x0800bfd0

0800ab58 <_localeconv_r>:
 800ab58:	4800      	ldr	r0, [pc, #0]	; (800ab5c <_localeconv_r+0x4>)
 800ab5a:	4770      	bx	lr
 800ab5c:	200002d4 	.word	0x200002d4

0800ab60 <malloc>:
 800ab60:	4b02      	ldr	r3, [pc, #8]	; (800ab6c <malloc+0xc>)
 800ab62:	4601      	mov	r1, r0
 800ab64:	6818      	ldr	r0, [r3, #0]
 800ab66:	f000 bbe1 	b.w	800b32c <_malloc_r>
 800ab6a:	bf00      	nop
 800ab6c:	20000180 	.word	0x20000180

0800ab70 <_Balloc>:
 800ab70:	b570      	push	{r4, r5, r6, lr}
 800ab72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab74:	4604      	mov	r4, r0
 800ab76:	460d      	mov	r5, r1
 800ab78:	b976      	cbnz	r6, 800ab98 <_Balloc+0x28>
 800ab7a:	2010      	movs	r0, #16
 800ab7c:	f7ff fff0 	bl	800ab60 <malloc>
 800ab80:	4602      	mov	r2, r0
 800ab82:	6260      	str	r0, [r4, #36]	; 0x24
 800ab84:	b920      	cbnz	r0, 800ab90 <_Balloc+0x20>
 800ab86:	4b18      	ldr	r3, [pc, #96]	; (800abe8 <_Balloc+0x78>)
 800ab88:	4818      	ldr	r0, [pc, #96]	; (800abec <_Balloc+0x7c>)
 800ab8a:	2166      	movs	r1, #102	; 0x66
 800ab8c:	f000 fc38 	bl	800b400 <__assert_func>
 800ab90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab94:	6006      	str	r6, [r0, #0]
 800ab96:	60c6      	str	r6, [r0, #12]
 800ab98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab9a:	68f3      	ldr	r3, [r6, #12]
 800ab9c:	b183      	cbz	r3, 800abc0 <_Balloc+0x50>
 800ab9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aba6:	b9b8      	cbnz	r0, 800abd8 <_Balloc+0x68>
 800aba8:	2101      	movs	r1, #1
 800abaa:	fa01 f605 	lsl.w	r6, r1, r5
 800abae:	1d72      	adds	r2, r6, #5
 800abb0:	0092      	lsls	r2, r2, #2
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 fb5a 	bl	800b26c <_calloc_r>
 800abb8:	b160      	cbz	r0, 800abd4 <_Balloc+0x64>
 800abba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abbe:	e00e      	b.n	800abde <_Balloc+0x6e>
 800abc0:	2221      	movs	r2, #33	; 0x21
 800abc2:	2104      	movs	r1, #4
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 fb51 	bl	800b26c <_calloc_r>
 800abca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abcc:	60f0      	str	r0, [r6, #12]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1e4      	bne.n	800ab9e <_Balloc+0x2e>
 800abd4:	2000      	movs	r0, #0
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
 800abd8:	6802      	ldr	r2, [r0, #0]
 800abda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abde:	2300      	movs	r3, #0
 800abe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abe4:	e7f7      	b.n	800abd6 <_Balloc+0x66>
 800abe6:	bf00      	nop
 800abe8:	0800bfdd 	.word	0x0800bfdd
 800abec:	0800c064 	.word	0x0800c064

0800abf0 <_Bfree>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abf4:	4605      	mov	r5, r0
 800abf6:	460c      	mov	r4, r1
 800abf8:	b976      	cbnz	r6, 800ac18 <_Bfree+0x28>
 800abfa:	2010      	movs	r0, #16
 800abfc:	f7ff ffb0 	bl	800ab60 <malloc>
 800ac00:	4602      	mov	r2, r0
 800ac02:	6268      	str	r0, [r5, #36]	; 0x24
 800ac04:	b920      	cbnz	r0, 800ac10 <_Bfree+0x20>
 800ac06:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <_Bfree+0x3c>)
 800ac08:	4809      	ldr	r0, [pc, #36]	; (800ac30 <_Bfree+0x40>)
 800ac0a:	218a      	movs	r1, #138	; 0x8a
 800ac0c:	f000 fbf8 	bl	800b400 <__assert_func>
 800ac10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac14:	6006      	str	r6, [r0, #0]
 800ac16:	60c6      	str	r6, [r0, #12]
 800ac18:	b13c      	cbz	r4, 800ac2a <_Bfree+0x3a>
 800ac1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac1c:	6862      	ldr	r2, [r4, #4]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac24:	6021      	str	r1, [r4, #0]
 800ac26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac2a:	bd70      	pop	{r4, r5, r6, pc}
 800ac2c:	0800bfdd 	.word	0x0800bfdd
 800ac30:	0800c064 	.word	0x0800c064

0800ac34 <__multadd>:
 800ac34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac38:	690e      	ldr	r6, [r1, #16]
 800ac3a:	4607      	mov	r7, r0
 800ac3c:	4698      	mov	r8, r3
 800ac3e:	460c      	mov	r4, r1
 800ac40:	f101 0014 	add.w	r0, r1, #20
 800ac44:	2300      	movs	r3, #0
 800ac46:	6805      	ldr	r5, [r0, #0]
 800ac48:	b2a9      	uxth	r1, r5
 800ac4a:	fb02 8101 	mla	r1, r2, r1, r8
 800ac4e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ac52:	0c2d      	lsrs	r5, r5, #16
 800ac54:	fb02 c505 	mla	r5, r2, r5, ip
 800ac58:	b289      	uxth	r1, r1
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ac60:	429e      	cmp	r6, r3
 800ac62:	f840 1b04 	str.w	r1, [r0], #4
 800ac66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ac6a:	dcec      	bgt.n	800ac46 <__multadd+0x12>
 800ac6c:	f1b8 0f00 	cmp.w	r8, #0
 800ac70:	d022      	beq.n	800acb8 <__multadd+0x84>
 800ac72:	68a3      	ldr	r3, [r4, #8]
 800ac74:	42b3      	cmp	r3, r6
 800ac76:	dc19      	bgt.n	800acac <__multadd+0x78>
 800ac78:	6861      	ldr	r1, [r4, #4]
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	3101      	adds	r1, #1
 800ac7e:	f7ff ff77 	bl	800ab70 <_Balloc>
 800ac82:	4605      	mov	r5, r0
 800ac84:	b928      	cbnz	r0, 800ac92 <__multadd+0x5e>
 800ac86:	4602      	mov	r2, r0
 800ac88:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <__multadd+0x8c>)
 800ac8a:	480e      	ldr	r0, [pc, #56]	; (800acc4 <__multadd+0x90>)
 800ac8c:	21b5      	movs	r1, #181	; 0xb5
 800ac8e:	f000 fbb7 	bl	800b400 <__assert_func>
 800ac92:	6922      	ldr	r2, [r4, #16]
 800ac94:	3202      	adds	r2, #2
 800ac96:	f104 010c 	add.w	r1, r4, #12
 800ac9a:	0092      	lsls	r2, r2, #2
 800ac9c:	300c      	adds	r0, #12
 800ac9e:	f7fe fc61 	bl	8009564 <memcpy>
 800aca2:	4621      	mov	r1, r4
 800aca4:	4638      	mov	r0, r7
 800aca6:	f7ff ffa3 	bl	800abf0 <_Bfree>
 800acaa:	462c      	mov	r4, r5
 800acac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800acb0:	3601      	adds	r6, #1
 800acb2:	f8c3 8014 	str.w	r8, [r3, #20]
 800acb6:	6126      	str	r6, [r4, #16]
 800acb8:	4620      	mov	r0, r4
 800acba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acbe:	bf00      	nop
 800acc0:	0800c053 	.word	0x0800c053
 800acc4:	0800c064 	.word	0x0800c064

0800acc8 <__hi0bits>:
 800acc8:	0c03      	lsrs	r3, r0, #16
 800acca:	041b      	lsls	r3, r3, #16
 800accc:	b9d3      	cbnz	r3, 800ad04 <__hi0bits+0x3c>
 800acce:	0400      	lsls	r0, r0, #16
 800acd0:	2310      	movs	r3, #16
 800acd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acd6:	bf04      	itt	eq
 800acd8:	0200      	lsleq	r0, r0, #8
 800acda:	3308      	addeq	r3, #8
 800acdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ace0:	bf04      	itt	eq
 800ace2:	0100      	lsleq	r0, r0, #4
 800ace4:	3304      	addeq	r3, #4
 800ace6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acea:	bf04      	itt	eq
 800acec:	0080      	lsleq	r0, r0, #2
 800acee:	3302      	addeq	r3, #2
 800acf0:	2800      	cmp	r0, #0
 800acf2:	db05      	blt.n	800ad00 <__hi0bits+0x38>
 800acf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800acf8:	f103 0301 	add.w	r3, r3, #1
 800acfc:	bf08      	it	eq
 800acfe:	2320      	moveq	r3, #32
 800ad00:	4618      	mov	r0, r3
 800ad02:	4770      	bx	lr
 800ad04:	2300      	movs	r3, #0
 800ad06:	e7e4      	b.n	800acd2 <__hi0bits+0xa>

0800ad08 <__lo0bits>:
 800ad08:	6803      	ldr	r3, [r0, #0]
 800ad0a:	f013 0207 	ands.w	r2, r3, #7
 800ad0e:	4601      	mov	r1, r0
 800ad10:	d00b      	beq.n	800ad2a <__lo0bits+0x22>
 800ad12:	07da      	lsls	r2, r3, #31
 800ad14:	d424      	bmi.n	800ad60 <__lo0bits+0x58>
 800ad16:	0798      	lsls	r0, r3, #30
 800ad18:	bf49      	itett	mi
 800ad1a:	085b      	lsrmi	r3, r3, #1
 800ad1c:	089b      	lsrpl	r3, r3, #2
 800ad1e:	2001      	movmi	r0, #1
 800ad20:	600b      	strmi	r3, [r1, #0]
 800ad22:	bf5c      	itt	pl
 800ad24:	600b      	strpl	r3, [r1, #0]
 800ad26:	2002      	movpl	r0, #2
 800ad28:	4770      	bx	lr
 800ad2a:	b298      	uxth	r0, r3
 800ad2c:	b9b0      	cbnz	r0, 800ad5c <__lo0bits+0x54>
 800ad2e:	0c1b      	lsrs	r3, r3, #16
 800ad30:	2010      	movs	r0, #16
 800ad32:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad36:	bf04      	itt	eq
 800ad38:	0a1b      	lsreq	r3, r3, #8
 800ad3a:	3008      	addeq	r0, #8
 800ad3c:	071a      	lsls	r2, r3, #28
 800ad3e:	bf04      	itt	eq
 800ad40:	091b      	lsreq	r3, r3, #4
 800ad42:	3004      	addeq	r0, #4
 800ad44:	079a      	lsls	r2, r3, #30
 800ad46:	bf04      	itt	eq
 800ad48:	089b      	lsreq	r3, r3, #2
 800ad4a:	3002      	addeq	r0, #2
 800ad4c:	07da      	lsls	r2, r3, #31
 800ad4e:	d403      	bmi.n	800ad58 <__lo0bits+0x50>
 800ad50:	085b      	lsrs	r3, r3, #1
 800ad52:	f100 0001 	add.w	r0, r0, #1
 800ad56:	d005      	beq.n	800ad64 <__lo0bits+0x5c>
 800ad58:	600b      	str	r3, [r1, #0]
 800ad5a:	4770      	bx	lr
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	e7e8      	b.n	800ad32 <__lo0bits+0x2a>
 800ad60:	2000      	movs	r0, #0
 800ad62:	4770      	bx	lr
 800ad64:	2020      	movs	r0, #32
 800ad66:	4770      	bx	lr

0800ad68 <__i2b>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	f7ff feff 	bl	800ab70 <_Balloc>
 800ad72:	4602      	mov	r2, r0
 800ad74:	b928      	cbnz	r0, 800ad82 <__i2b+0x1a>
 800ad76:	4b05      	ldr	r3, [pc, #20]	; (800ad8c <__i2b+0x24>)
 800ad78:	4805      	ldr	r0, [pc, #20]	; (800ad90 <__i2b+0x28>)
 800ad7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad7e:	f000 fb3f 	bl	800b400 <__assert_func>
 800ad82:	2301      	movs	r3, #1
 800ad84:	6144      	str	r4, [r0, #20]
 800ad86:	6103      	str	r3, [r0, #16]
 800ad88:	bd10      	pop	{r4, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0800c053 	.word	0x0800c053
 800ad90:	0800c064 	.word	0x0800c064

0800ad94 <__multiply>:
 800ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad98:	4614      	mov	r4, r2
 800ad9a:	690a      	ldr	r2, [r1, #16]
 800ad9c:	6923      	ldr	r3, [r4, #16]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	bfb8      	it	lt
 800ada2:	460b      	movlt	r3, r1
 800ada4:	460d      	mov	r5, r1
 800ada6:	bfbc      	itt	lt
 800ada8:	4625      	movlt	r5, r4
 800adaa:	461c      	movlt	r4, r3
 800adac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800adb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800adb4:	68ab      	ldr	r3, [r5, #8]
 800adb6:	6869      	ldr	r1, [r5, #4]
 800adb8:	eb0a 0709 	add.w	r7, sl, r9
 800adbc:	42bb      	cmp	r3, r7
 800adbe:	b085      	sub	sp, #20
 800adc0:	bfb8      	it	lt
 800adc2:	3101      	addlt	r1, #1
 800adc4:	f7ff fed4 	bl	800ab70 <_Balloc>
 800adc8:	b930      	cbnz	r0, 800add8 <__multiply+0x44>
 800adca:	4602      	mov	r2, r0
 800adcc:	4b42      	ldr	r3, [pc, #264]	; (800aed8 <__multiply+0x144>)
 800adce:	4843      	ldr	r0, [pc, #268]	; (800aedc <__multiply+0x148>)
 800add0:	f240 115d 	movw	r1, #349	; 0x15d
 800add4:	f000 fb14 	bl	800b400 <__assert_func>
 800add8:	f100 0614 	add.w	r6, r0, #20
 800addc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ade0:	4633      	mov	r3, r6
 800ade2:	2200      	movs	r2, #0
 800ade4:	4543      	cmp	r3, r8
 800ade6:	d31e      	bcc.n	800ae26 <__multiply+0x92>
 800ade8:	f105 0c14 	add.w	ip, r5, #20
 800adec:	f104 0314 	add.w	r3, r4, #20
 800adf0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800adf4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800adf8:	9202      	str	r2, [sp, #8]
 800adfa:	ebac 0205 	sub.w	r2, ip, r5
 800adfe:	3a15      	subs	r2, #21
 800ae00:	f022 0203 	bic.w	r2, r2, #3
 800ae04:	3204      	adds	r2, #4
 800ae06:	f105 0115 	add.w	r1, r5, #21
 800ae0a:	458c      	cmp	ip, r1
 800ae0c:	bf38      	it	cc
 800ae0e:	2204      	movcc	r2, #4
 800ae10:	9201      	str	r2, [sp, #4]
 800ae12:	9a02      	ldr	r2, [sp, #8]
 800ae14:	9303      	str	r3, [sp, #12]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d808      	bhi.n	800ae2c <__multiply+0x98>
 800ae1a:	2f00      	cmp	r7, #0
 800ae1c:	dc55      	bgt.n	800aeca <__multiply+0x136>
 800ae1e:	6107      	str	r7, [r0, #16]
 800ae20:	b005      	add	sp, #20
 800ae22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae26:	f843 2b04 	str.w	r2, [r3], #4
 800ae2a:	e7db      	b.n	800ade4 <__multiply+0x50>
 800ae2c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae30:	f1ba 0f00 	cmp.w	sl, #0
 800ae34:	d020      	beq.n	800ae78 <__multiply+0xe4>
 800ae36:	f105 0e14 	add.w	lr, r5, #20
 800ae3a:	46b1      	mov	r9, r6
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ae42:	f8d9 b000 	ldr.w	fp, [r9]
 800ae46:	b2a1      	uxth	r1, r4
 800ae48:	fa1f fb8b 	uxth.w	fp, fp
 800ae4c:	fb0a b101 	mla	r1, sl, r1, fp
 800ae50:	4411      	add	r1, r2
 800ae52:	f8d9 2000 	ldr.w	r2, [r9]
 800ae56:	0c24      	lsrs	r4, r4, #16
 800ae58:	0c12      	lsrs	r2, r2, #16
 800ae5a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ae5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ae62:	b289      	uxth	r1, r1
 800ae64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ae68:	45f4      	cmp	ip, lr
 800ae6a:	f849 1b04 	str.w	r1, [r9], #4
 800ae6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ae72:	d8e4      	bhi.n	800ae3e <__multiply+0xaa>
 800ae74:	9901      	ldr	r1, [sp, #4]
 800ae76:	5072      	str	r2, [r6, r1]
 800ae78:	9a03      	ldr	r2, [sp, #12]
 800ae7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae7e:	3304      	adds	r3, #4
 800ae80:	f1b9 0f00 	cmp.w	r9, #0
 800ae84:	d01f      	beq.n	800aec6 <__multiply+0x132>
 800ae86:	6834      	ldr	r4, [r6, #0]
 800ae88:	f105 0114 	add.w	r1, r5, #20
 800ae8c:	46b6      	mov	lr, r6
 800ae8e:	f04f 0a00 	mov.w	sl, #0
 800ae92:	880a      	ldrh	r2, [r1, #0]
 800ae94:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ae98:	fb09 b202 	mla	r2, r9, r2, fp
 800ae9c:	4492      	add	sl, r2
 800ae9e:	b2a4      	uxth	r4, r4
 800aea0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aea4:	f84e 4b04 	str.w	r4, [lr], #4
 800aea8:	f851 4b04 	ldr.w	r4, [r1], #4
 800aeac:	f8be 2000 	ldrh.w	r2, [lr]
 800aeb0:	0c24      	lsrs	r4, r4, #16
 800aeb2:	fb09 2404 	mla	r4, r9, r4, r2
 800aeb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aeba:	458c      	cmp	ip, r1
 800aebc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aec0:	d8e7      	bhi.n	800ae92 <__multiply+0xfe>
 800aec2:	9a01      	ldr	r2, [sp, #4]
 800aec4:	50b4      	str	r4, [r6, r2]
 800aec6:	3604      	adds	r6, #4
 800aec8:	e7a3      	b.n	800ae12 <__multiply+0x7e>
 800aeca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1a5      	bne.n	800ae1e <__multiply+0x8a>
 800aed2:	3f01      	subs	r7, #1
 800aed4:	e7a1      	b.n	800ae1a <__multiply+0x86>
 800aed6:	bf00      	nop
 800aed8:	0800c053 	.word	0x0800c053
 800aedc:	0800c064 	.word	0x0800c064

0800aee0 <__pow5mult>:
 800aee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee4:	4615      	mov	r5, r2
 800aee6:	f012 0203 	ands.w	r2, r2, #3
 800aeea:	4606      	mov	r6, r0
 800aeec:	460f      	mov	r7, r1
 800aeee:	d007      	beq.n	800af00 <__pow5mult+0x20>
 800aef0:	4c25      	ldr	r4, [pc, #148]	; (800af88 <__pow5mult+0xa8>)
 800aef2:	3a01      	subs	r2, #1
 800aef4:	2300      	movs	r3, #0
 800aef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aefa:	f7ff fe9b 	bl	800ac34 <__multadd>
 800aefe:	4607      	mov	r7, r0
 800af00:	10ad      	asrs	r5, r5, #2
 800af02:	d03d      	beq.n	800af80 <__pow5mult+0xa0>
 800af04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af06:	b97c      	cbnz	r4, 800af28 <__pow5mult+0x48>
 800af08:	2010      	movs	r0, #16
 800af0a:	f7ff fe29 	bl	800ab60 <malloc>
 800af0e:	4602      	mov	r2, r0
 800af10:	6270      	str	r0, [r6, #36]	; 0x24
 800af12:	b928      	cbnz	r0, 800af20 <__pow5mult+0x40>
 800af14:	4b1d      	ldr	r3, [pc, #116]	; (800af8c <__pow5mult+0xac>)
 800af16:	481e      	ldr	r0, [pc, #120]	; (800af90 <__pow5mult+0xb0>)
 800af18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af1c:	f000 fa70 	bl	800b400 <__assert_func>
 800af20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af24:	6004      	str	r4, [r0, #0]
 800af26:	60c4      	str	r4, [r0, #12]
 800af28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af30:	b94c      	cbnz	r4, 800af46 <__pow5mult+0x66>
 800af32:	f240 2171 	movw	r1, #625	; 0x271
 800af36:	4630      	mov	r0, r6
 800af38:	f7ff ff16 	bl	800ad68 <__i2b>
 800af3c:	2300      	movs	r3, #0
 800af3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af42:	4604      	mov	r4, r0
 800af44:	6003      	str	r3, [r0, #0]
 800af46:	f04f 0900 	mov.w	r9, #0
 800af4a:	07eb      	lsls	r3, r5, #31
 800af4c:	d50a      	bpl.n	800af64 <__pow5mult+0x84>
 800af4e:	4639      	mov	r1, r7
 800af50:	4622      	mov	r2, r4
 800af52:	4630      	mov	r0, r6
 800af54:	f7ff ff1e 	bl	800ad94 <__multiply>
 800af58:	4639      	mov	r1, r7
 800af5a:	4680      	mov	r8, r0
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7ff fe47 	bl	800abf0 <_Bfree>
 800af62:	4647      	mov	r7, r8
 800af64:	106d      	asrs	r5, r5, #1
 800af66:	d00b      	beq.n	800af80 <__pow5mult+0xa0>
 800af68:	6820      	ldr	r0, [r4, #0]
 800af6a:	b938      	cbnz	r0, 800af7c <__pow5mult+0x9c>
 800af6c:	4622      	mov	r2, r4
 800af6e:	4621      	mov	r1, r4
 800af70:	4630      	mov	r0, r6
 800af72:	f7ff ff0f 	bl	800ad94 <__multiply>
 800af76:	6020      	str	r0, [r4, #0]
 800af78:	f8c0 9000 	str.w	r9, [r0]
 800af7c:	4604      	mov	r4, r0
 800af7e:	e7e4      	b.n	800af4a <__pow5mult+0x6a>
 800af80:	4638      	mov	r0, r7
 800af82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af86:	bf00      	nop
 800af88:	0800c1b8 	.word	0x0800c1b8
 800af8c:	0800bfdd 	.word	0x0800bfdd
 800af90:	0800c064 	.word	0x0800c064

0800af94 <__lshift>:
 800af94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af98:	460c      	mov	r4, r1
 800af9a:	6849      	ldr	r1, [r1, #4]
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	4607      	mov	r7, r0
 800afa6:	4691      	mov	r9, r2
 800afa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afac:	f108 0601 	add.w	r6, r8, #1
 800afb0:	42b3      	cmp	r3, r6
 800afb2:	db0b      	blt.n	800afcc <__lshift+0x38>
 800afb4:	4638      	mov	r0, r7
 800afb6:	f7ff fddb 	bl	800ab70 <_Balloc>
 800afba:	4605      	mov	r5, r0
 800afbc:	b948      	cbnz	r0, 800afd2 <__lshift+0x3e>
 800afbe:	4602      	mov	r2, r0
 800afc0:	4b28      	ldr	r3, [pc, #160]	; (800b064 <__lshift+0xd0>)
 800afc2:	4829      	ldr	r0, [pc, #164]	; (800b068 <__lshift+0xd4>)
 800afc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afc8:	f000 fa1a 	bl	800b400 <__assert_func>
 800afcc:	3101      	adds	r1, #1
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	e7ee      	b.n	800afb0 <__lshift+0x1c>
 800afd2:	2300      	movs	r3, #0
 800afd4:	f100 0114 	add.w	r1, r0, #20
 800afd8:	f100 0210 	add.w	r2, r0, #16
 800afdc:	4618      	mov	r0, r3
 800afde:	4553      	cmp	r3, sl
 800afe0:	db33      	blt.n	800b04a <__lshift+0xb6>
 800afe2:	6920      	ldr	r0, [r4, #16]
 800afe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afe8:	f104 0314 	add.w	r3, r4, #20
 800afec:	f019 091f 	ands.w	r9, r9, #31
 800aff0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aff4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aff8:	d02b      	beq.n	800b052 <__lshift+0xbe>
 800affa:	f1c9 0e20 	rsb	lr, r9, #32
 800affe:	468a      	mov	sl, r1
 800b000:	2200      	movs	r2, #0
 800b002:	6818      	ldr	r0, [r3, #0]
 800b004:	fa00 f009 	lsl.w	r0, r0, r9
 800b008:	4302      	orrs	r2, r0
 800b00a:	f84a 2b04 	str.w	r2, [sl], #4
 800b00e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b012:	459c      	cmp	ip, r3
 800b014:	fa22 f20e 	lsr.w	r2, r2, lr
 800b018:	d8f3      	bhi.n	800b002 <__lshift+0x6e>
 800b01a:	ebac 0304 	sub.w	r3, ip, r4
 800b01e:	3b15      	subs	r3, #21
 800b020:	f023 0303 	bic.w	r3, r3, #3
 800b024:	3304      	adds	r3, #4
 800b026:	f104 0015 	add.w	r0, r4, #21
 800b02a:	4584      	cmp	ip, r0
 800b02c:	bf38      	it	cc
 800b02e:	2304      	movcc	r3, #4
 800b030:	50ca      	str	r2, [r1, r3]
 800b032:	b10a      	cbz	r2, 800b038 <__lshift+0xa4>
 800b034:	f108 0602 	add.w	r6, r8, #2
 800b038:	3e01      	subs	r6, #1
 800b03a:	4638      	mov	r0, r7
 800b03c:	612e      	str	r6, [r5, #16]
 800b03e:	4621      	mov	r1, r4
 800b040:	f7ff fdd6 	bl	800abf0 <_Bfree>
 800b044:	4628      	mov	r0, r5
 800b046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b04e:	3301      	adds	r3, #1
 800b050:	e7c5      	b.n	800afde <__lshift+0x4a>
 800b052:	3904      	subs	r1, #4
 800b054:	f853 2b04 	ldr.w	r2, [r3], #4
 800b058:	f841 2f04 	str.w	r2, [r1, #4]!
 800b05c:	459c      	cmp	ip, r3
 800b05e:	d8f9      	bhi.n	800b054 <__lshift+0xc0>
 800b060:	e7ea      	b.n	800b038 <__lshift+0xa4>
 800b062:	bf00      	nop
 800b064:	0800c053 	.word	0x0800c053
 800b068:	0800c064 	.word	0x0800c064

0800b06c <__mcmp>:
 800b06c:	b530      	push	{r4, r5, lr}
 800b06e:	6902      	ldr	r2, [r0, #16]
 800b070:	690c      	ldr	r4, [r1, #16]
 800b072:	1b12      	subs	r2, r2, r4
 800b074:	d10e      	bne.n	800b094 <__mcmp+0x28>
 800b076:	f100 0314 	add.w	r3, r0, #20
 800b07a:	3114      	adds	r1, #20
 800b07c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b080:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b084:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b088:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b08c:	42a5      	cmp	r5, r4
 800b08e:	d003      	beq.n	800b098 <__mcmp+0x2c>
 800b090:	d305      	bcc.n	800b09e <__mcmp+0x32>
 800b092:	2201      	movs	r2, #1
 800b094:	4610      	mov	r0, r2
 800b096:	bd30      	pop	{r4, r5, pc}
 800b098:	4283      	cmp	r3, r0
 800b09a:	d3f3      	bcc.n	800b084 <__mcmp+0x18>
 800b09c:	e7fa      	b.n	800b094 <__mcmp+0x28>
 800b09e:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a2:	e7f7      	b.n	800b094 <__mcmp+0x28>

0800b0a4 <__mdiff>:
 800b0a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	4617      	mov	r7, r2
 800b0b2:	f7ff ffdb 	bl	800b06c <__mcmp>
 800b0b6:	1e05      	subs	r5, r0, #0
 800b0b8:	d110      	bne.n	800b0dc <__mdiff+0x38>
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7ff fd57 	bl	800ab70 <_Balloc>
 800b0c2:	b930      	cbnz	r0, 800b0d2 <__mdiff+0x2e>
 800b0c4:	4b39      	ldr	r3, [pc, #228]	; (800b1ac <__mdiff+0x108>)
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	f240 2132 	movw	r1, #562	; 0x232
 800b0cc:	4838      	ldr	r0, [pc, #224]	; (800b1b0 <__mdiff+0x10c>)
 800b0ce:	f000 f997 	bl	800b400 <__assert_func>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	bfa4      	itt	ge
 800b0de:	463b      	movge	r3, r7
 800b0e0:	4627      	movge	r7, r4
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	bfa6      	itte	ge
 800b0e8:	461c      	movge	r4, r3
 800b0ea:	2500      	movge	r5, #0
 800b0ec:	2501      	movlt	r5, #1
 800b0ee:	f7ff fd3f 	bl	800ab70 <_Balloc>
 800b0f2:	b920      	cbnz	r0, 800b0fe <__mdiff+0x5a>
 800b0f4:	4b2d      	ldr	r3, [pc, #180]	; (800b1ac <__mdiff+0x108>)
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b0fc:	e7e6      	b.n	800b0cc <__mdiff+0x28>
 800b0fe:	693e      	ldr	r6, [r7, #16]
 800b100:	60c5      	str	r5, [r0, #12]
 800b102:	6925      	ldr	r5, [r4, #16]
 800b104:	f107 0114 	add.w	r1, r7, #20
 800b108:	f104 0914 	add.w	r9, r4, #20
 800b10c:	f100 0e14 	add.w	lr, r0, #20
 800b110:	f107 0210 	add.w	r2, r7, #16
 800b114:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b118:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b11c:	46f2      	mov	sl, lr
 800b11e:	2700      	movs	r7, #0
 800b120:	f859 3b04 	ldr.w	r3, [r9], #4
 800b124:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b128:	fa1f f883 	uxth.w	r8, r3
 800b12c:	fa17 f78b 	uxtah	r7, r7, fp
 800b130:	0c1b      	lsrs	r3, r3, #16
 800b132:	eba7 0808 	sub.w	r8, r7, r8
 800b136:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b13a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b13e:	fa1f f888 	uxth.w	r8, r8
 800b142:	141f      	asrs	r7, r3, #16
 800b144:	454d      	cmp	r5, r9
 800b146:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b14a:	f84a 3b04 	str.w	r3, [sl], #4
 800b14e:	d8e7      	bhi.n	800b120 <__mdiff+0x7c>
 800b150:	1b2b      	subs	r3, r5, r4
 800b152:	3b15      	subs	r3, #21
 800b154:	f023 0303 	bic.w	r3, r3, #3
 800b158:	3304      	adds	r3, #4
 800b15a:	3415      	adds	r4, #21
 800b15c:	42a5      	cmp	r5, r4
 800b15e:	bf38      	it	cc
 800b160:	2304      	movcc	r3, #4
 800b162:	4419      	add	r1, r3
 800b164:	4473      	add	r3, lr
 800b166:	469e      	mov	lr, r3
 800b168:	460d      	mov	r5, r1
 800b16a:	4565      	cmp	r5, ip
 800b16c:	d30e      	bcc.n	800b18c <__mdiff+0xe8>
 800b16e:	f10c 0203 	add.w	r2, ip, #3
 800b172:	1a52      	subs	r2, r2, r1
 800b174:	f022 0203 	bic.w	r2, r2, #3
 800b178:	3903      	subs	r1, #3
 800b17a:	458c      	cmp	ip, r1
 800b17c:	bf38      	it	cc
 800b17e:	2200      	movcc	r2, #0
 800b180:	441a      	add	r2, r3
 800b182:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b186:	b17b      	cbz	r3, 800b1a8 <__mdiff+0x104>
 800b188:	6106      	str	r6, [r0, #16]
 800b18a:	e7a5      	b.n	800b0d8 <__mdiff+0x34>
 800b18c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b190:	fa17 f488 	uxtah	r4, r7, r8
 800b194:	1422      	asrs	r2, r4, #16
 800b196:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b19a:	b2a4      	uxth	r4, r4
 800b19c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b1a0:	f84e 4b04 	str.w	r4, [lr], #4
 800b1a4:	1417      	asrs	r7, r2, #16
 800b1a6:	e7e0      	b.n	800b16a <__mdiff+0xc6>
 800b1a8:	3e01      	subs	r6, #1
 800b1aa:	e7ea      	b.n	800b182 <__mdiff+0xde>
 800b1ac:	0800c053 	.word	0x0800c053
 800b1b0:	0800c064 	.word	0x0800c064

0800b1b4 <__d2b>:
 800b1b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1b8:	4689      	mov	r9, r1
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	ec57 6b10 	vmov	r6, r7, d0
 800b1c0:	4690      	mov	r8, r2
 800b1c2:	f7ff fcd5 	bl	800ab70 <_Balloc>
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	b930      	cbnz	r0, 800b1d8 <__d2b+0x24>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	4b25      	ldr	r3, [pc, #148]	; (800b264 <__d2b+0xb0>)
 800b1ce:	4826      	ldr	r0, [pc, #152]	; (800b268 <__d2b+0xb4>)
 800b1d0:	f240 310a 	movw	r1, #778	; 0x30a
 800b1d4:	f000 f914 	bl	800b400 <__assert_func>
 800b1d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b1dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1e0:	bb35      	cbnz	r5, 800b230 <__d2b+0x7c>
 800b1e2:	2e00      	cmp	r6, #0
 800b1e4:	9301      	str	r3, [sp, #4]
 800b1e6:	d028      	beq.n	800b23a <__d2b+0x86>
 800b1e8:	4668      	mov	r0, sp
 800b1ea:	9600      	str	r6, [sp, #0]
 800b1ec:	f7ff fd8c 	bl	800ad08 <__lo0bits>
 800b1f0:	9900      	ldr	r1, [sp, #0]
 800b1f2:	b300      	cbz	r0, 800b236 <__d2b+0x82>
 800b1f4:	9a01      	ldr	r2, [sp, #4]
 800b1f6:	f1c0 0320 	rsb	r3, r0, #32
 800b1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fe:	430b      	orrs	r3, r1
 800b200:	40c2      	lsrs	r2, r0
 800b202:	6163      	str	r3, [r4, #20]
 800b204:	9201      	str	r2, [sp, #4]
 800b206:	9b01      	ldr	r3, [sp, #4]
 800b208:	61a3      	str	r3, [r4, #24]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	bf14      	ite	ne
 800b20e:	2202      	movne	r2, #2
 800b210:	2201      	moveq	r2, #1
 800b212:	6122      	str	r2, [r4, #16]
 800b214:	b1d5      	cbz	r5, 800b24c <__d2b+0x98>
 800b216:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b21a:	4405      	add	r5, r0
 800b21c:	f8c9 5000 	str.w	r5, [r9]
 800b220:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b224:	f8c8 0000 	str.w	r0, [r8]
 800b228:	4620      	mov	r0, r4
 800b22a:	b003      	add	sp, #12
 800b22c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b234:	e7d5      	b.n	800b1e2 <__d2b+0x2e>
 800b236:	6161      	str	r1, [r4, #20]
 800b238:	e7e5      	b.n	800b206 <__d2b+0x52>
 800b23a:	a801      	add	r0, sp, #4
 800b23c:	f7ff fd64 	bl	800ad08 <__lo0bits>
 800b240:	9b01      	ldr	r3, [sp, #4]
 800b242:	6163      	str	r3, [r4, #20]
 800b244:	2201      	movs	r2, #1
 800b246:	6122      	str	r2, [r4, #16]
 800b248:	3020      	adds	r0, #32
 800b24a:	e7e3      	b.n	800b214 <__d2b+0x60>
 800b24c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b250:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b254:	f8c9 0000 	str.w	r0, [r9]
 800b258:	6918      	ldr	r0, [r3, #16]
 800b25a:	f7ff fd35 	bl	800acc8 <__hi0bits>
 800b25e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b262:	e7df      	b.n	800b224 <__d2b+0x70>
 800b264:	0800c053 	.word	0x0800c053
 800b268:	0800c064 	.word	0x0800c064

0800b26c <_calloc_r>:
 800b26c:	b513      	push	{r0, r1, r4, lr}
 800b26e:	434a      	muls	r2, r1
 800b270:	4611      	mov	r1, r2
 800b272:	9201      	str	r2, [sp, #4]
 800b274:	f000 f85a 	bl	800b32c <_malloc_r>
 800b278:	4604      	mov	r4, r0
 800b27a:	b118      	cbz	r0, 800b284 <_calloc_r+0x18>
 800b27c:	9a01      	ldr	r2, [sp, #4]
 800b27e:	2100      	movs	r1, #0
 800b280:	f7fe f97e 	bl	8009580 <memset>
 800b284:	4620      	mov	r0, r4
 800b286:	b002      	add	sp, #8
 800b288:	bd10      	pop	{r4, pc}
	...

0800b28c <_free_r>:
 800b28c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b28e:	2900      	cmp	r1, #0
 800b290:	d048      	beq.n	800b324 <_free_r+0x98>
 800b292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b296:	9001      	str	r0, [sp, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f1a1 0404 	sub.w	r4, r1, #4
 800b29e:	bfb8      	it	lt
 800b2a0:	18e4      	addlt	r4, r4, r3
 800b2a2:	f000 f8ef 	bl	800b484 <__malloc_lock>
 800b2a6:	4a20      	ldr	r2, [pc, #128]	; (800b328 <_free_r+0x9c>)
 800b2a8:	9801      	ldr	r0, [sp, #4]
 800b2aa:	6813      	ldr	r3, [r2, #0]
 800b2ac:	4615      	mov	r5, r2
 800b2ae:	b933      	cbnz	r3, 800b2be <_free_r+0x32>
 800b2b0:	6063      	str	r3, [r4, #4]
 800b2b2:	6014      	str	r4, [r2, #0]
 800b2b4:	b003      	add	sp, #12
 800b2b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2ba:	f000 b8e9 	b.w	800b490 <__malloc_unlock>
 800b2be:	42a3      	cmp	r3, r4
 800b2c0:	d90b      	bls.n	800b2da <_free_r+0x4e>
 800b2c2:	6821      	ldr	r1, [r4, #0]
 800b2c4:	1862      	adds	r2, r4, r1
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	bf04      	itt	eq
 800b2ca:	681a      	ldreq	r2, [r3, #0]
 800b2cc:	685b      	ldreq	r3, [r3, #4]
 800b2ce:	6063      	str	r3, [r4, #4]
 800b2d0:	bf04      	itt	eq
 800b2d2:	1852      	addeq	r2, r2, r1
 800b2d4:	6022      	streq	r2, [r4, #0]
 800b2d6:	602c      	str	r4, [r5, #0]
 800b2d8:	e7ec      	b.n	800b2b4 <_free_r+0x28>
 800b2da:	461a      	mov	r2, r3
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	b10b      	cbz	r3, 800b2e4 <_free_r+0x58>
 800b2e0:	42a3      	cmp	r3, r4
 800b2e2:	d9fa      	bls.n	800b2da <_free_r+0x4e>
 800b2e4:	6811      	ldr	r1, [r2, #0]
 800b2e6:	1855      	adds	r5, r2, r1
 800b2e8:	42a5      	cmp	r5, r4
 800b2ea:	d10b      	bne.n	800b304 <_free_r+0x78>
 800b2ec:	6824      	ldr	r4, [r4, #0]
 800b2ee:	4421      	add	r1, r4
 800b2f0:	1854      	adds	r4, r2, r1
 800b2f2:	42a3      	cmp	r3, r4
 800b2f4:	6011      	str	r1, [r2, #0]
 800b2f6:	d1dd      	bne.n	800b2b4 <_free_r+0x28>
 800b2f8:	681c      	ldr	r4, [r3, #0]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	6053      	str	r3, [r2, #4]
 800b2fe:	4421      	add	r1, r4
 800b300:	6011      	str	r1, [r2, #0]
 800b302:	e7d7      	b.n	800b2b4 <_free_r+0x28>
 800b304:	d902      	bls.n	800b30c <_free_r+0x80>
 800b306:	230c      	movs	r3, #12
 800b308:	6003      	str	r3, [r0, #0]
 800b30a:	e7d3      	b.n	800b2b4 <_free_r+0x28>
 800b30c:	6825      	ldr	r5, [r4, #0]
 800b30e:	1961      	adds	r1, r4, r5
 800b310:	428b      	cmp	r3, r1
 800b312:	bf04      	itt	eq
 800b314:	6819      	ldreq	r1, [r3, #0]
 800b316:	685b      	ldreq	r3, [r3, #4]
 800b318:	6063      	str	r3, [r4, #4]
 800b31a:	bf04      	itt	eq
 800b31c:	1949      	addeq	r1, r1, r5
 800b31e:	6021      	streq	r1, [r4, #0]
 800b320:	6054      	str	r4, [r2, #4]
 800b322:	e7c7      	b.n	800b2b4 <_free_r+0x28>
 800b324:	b003      	add	sp, #12
 800b326:	bd30      	pop	{r4, r5, pc}
 800b328:	2000060c 	.word	0x2000060c

0800b32c <_malloc_r>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	1ccd      	adds	r5, r1, #3
 800b330:	f025 0503 	bic.w	r5, r5, #3
 800b334:	3508      	adds	r5, #8
 800b336:	2d0c      	cmp	r5, #12
 800b338:	bf38      	it	cc
 800b33a:	250c      	movcc	r5, #12
 800b33c:	2d00      	cmp	r5, #0
 800b33e:	4606      	mov	r6, r0
 800b340:	db01      	blt.n	800b346 <_malloc_r+0x1a>
 800b342:	42a9      	cmp	r1, r5
 800b344:	d903      	bls.n	800b34e <_malloc_r+0x22>
 800b346:	230c      	movs	r3, #12
 800b348:	6033      	str	r3, [r6, #0]
 800b34a:	2000      	movs	r0, #0
 800b34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b34e:	f000 f899 	bl	800b484 <__malloc_lock>
 800b352:	4921      	ldr	r1, [pc, #132]	; (800b3d8 <_malloc_r+0xac>)
 800b354:	680a      	ldr	r2, [r1, #0]
 800b356:	4614      	mov	r4, r2
 800b358:	b99c      	cbnz	r4, 800b382 <_malloc_r+0x56>
 800b35a:	4f20      	ldr	r7, [pc, #128]	; (800b3dc <_malloc_r+0xb0>)
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	b923      	cbnz	r3, 800b36a <_malloc_r+0x3e>
 800b360:	4621      	mov	r1, r4
 800b362:	4630      	mov	r0, r6
 800b364:	f000 f83c 	bl	800b3e0 <_sbrk_r>
 800b368:	6038      	str	r0, [r7, #0]
 800b36a:	4629      	mov	r1, r5
 800b36c:	4630      	mov	r0, r6
 800b36e:	f000 f837 	bl	800b3e0 <_sbrk_r>
 800b372:	1c43      	adds	r3, r0, #1
 800b374:	d123      	bne.n	800b3be <_malloc_r+0x92>
 800b376:	230c      	movs	r3, #12
 800b378:	6033      	str	r3, [r6, #0]
 800b37a:	4630      	mov	r0, r6
 800b37c:	f000 f888 	bl	800b490 <__malloc_unlock>
 800b380:	e7e3      	b.n	800b34a <_malloc_r+0x1e>
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	1b5b      	subs	r3, r3, r5
 800b386:	d417      	bmi.n	800b3b8 <_malloc_r+0x8c>
 800b388:	2b0b      	cmp	r3, #11
 800b38a:	d903      	bls.n	800b394 <_malloc_r+0x68>
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	441c      	add	r4, r3
 800b390:	6025      	str	r5, [r4, #0]
 800b392:	e004      	b.n	800b39e <_malloc_r+0x72>
 800b394:	6863      	ldr	r3, [r4, #4]
 800b396:	42a2      	cmp	r2, r4
 800b398:	bf0c      	ite	eq
 800b39a:	600b      	streq	r3, [r1, #0]
 800b39c:	6053      	strne	r3, [r2, #4]
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f000 f876 	bl	800b490 <__malloc_unlock>
 800b3a4:	f104 000b 	add.w	r0, r4, #11
 800b3a8:	1d23      	adds	r3, r4, #4
 800b3aa:	f020 0007 	bic.w	r0, r0, #7
 800b3ae:	1ac2      	subs	r2, r0, r3
 800b3b0:	d0cc      	beq.n	800b34c <_malloc_r+0x20>
 800b3b2:	1a1b      	subs	r3, r3, r0
 800b3b4:	50a3      	str	r3, [r4, r2]
 800b3b6:	e7c9      	b.n	800b34c <_malloc_r+0x20>
 800b3b8:	4622      	mov	r2, r4
 800b3ba:	6864      	ldr	r4, [r4, #4]
 800b3bc:	e7cc      	b.n	800b358 <_malloc_r+0x2c>
 800b3be:	1cc4      	adds	r4, r0, #3
 800b3c0:	f024 0403 	bic.w	r4, r4, #3
 800b3c4:	42a0      	cmp	r0, r4
 800b3c6:	d0e3      	beq.n	800b390 <_malloc_r+0x64>
 800b3c8:	1a21      	subs	r1, r4, r0
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f000 f808 	bl	800b3e0 <_sbrk_r>
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d1dd      	bne.n	800b390 <_malloc_r+0x64>
 800b3d4:	e7cf      	b.n	800b376 <_malloc_r+0x4a>
 800b3d6:	bf00      	nop
 800b3d8:	2000060c 	.word	0x2000060c
 800b3dc:	20000610 	.word	0x20000610

0800b3e0 <_sbrk_r>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	4d06      	ldr	r5, [pc, #24]	; (800b3fc <_sbrk_r+0x1c>)
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	4608      	mov	r0, r1
 800b3ea:	602b      	str	r3, [r5, #0]
 800b3ec:	f7f7 f8b4 	bl	8002558 <_sbrk>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d102      	bne.n	800b3fa <_sbrk_r+0x1a>
 800b3f4:	682b      	ldr	r3, [r5, #0]
 800b3f6:	b103      	cbz	r3, 800b3fa <_sbrk_r+0x1a>
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	20002188 	.word	0x20002188

0800b400 <__assert_func>:
 800b400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b402:	4614      	mov	r4, r2
 800b404:	461a      	mov	r2, r3
 800b406:	4b09      	ldr	r3, [pc, #36]	; (800b42c <__assert_func+0x2c>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4605      	mov	r5, r0
 800b40c:	68d8      	ldr	r0, [r3, #12]
 800b40e:	b14c      	cbz	r4, 800b424 <__assert_func+0x24>
 800b410:	4b07      	ldr	r3, [pc, #28]	; (800b430 <__assert_func+0x30>)
 800b412:	9100      	str	r1, [sp, #0]
 800b414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b418:	4906      	ldr	r1, [pc, #24]	; (800b434 <__assert_func+0x34>)
 800b41a:	462b      	mov	r3, r5
 800b41c:	f000 f80e 	bl	800b43c <fiprintf>
 800b420:	f000 fa64 	bl	800b8ec <abort>
 800b424:	4b04      	ldr	r3, [pc, #16]	; (800b438 <__assert_func+0x38>)
 800b426:	461c      	mov	r4, r3
 800b428:	e7f3      	b.n	800b412 <__assert_func+0x12>
 800b42a:	bf00      	nop
 800b42c:	20000180 	.word	0x20000180
 800b430:	0800c1c4 	.word	0x0800c1c4
 800b434:	0800c1d1 	.word	0x0800c1d1
 800b438:	0800c1ff 	.word	0x0800c1ff

0800b43c <fiprintf>:
 800b43c:	b40e      	push	{r1, r2, r3}
 800b43e:	b503      	push	{r0, r1, lr}
 800b440:	4601      	mov	r1, r0
 800b442:	ab03      	add	r3, sp, #12
 800b444:	4805      	ldr	r0, [pc, #20]	; (800b45c <fiprintf+0x20>)
 800b446:	f853 2b04 	ldr.w	r2, [r3], #4
 800b44a:	6800      	ldr	r0, [r0, #0]
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	f000 f84f 	bl	800b4f0 <_vfiprintf_r>
 800b452:	b002      	add	sp, #8
 800b454:	f85d eb04 	ldr.w	lr, [sp], #4
 800b458:	b003      	add	sp, #12
 800b45a:	4770      	bx	lr
 800b45c:	20000180 	.word	0x20000180

0800b460 <__ascii_mbtowc>:
 800b460:	b082      	sub	sp, #8
 800b462:	b901      	cbnz	r1, 800b466 <__ascii_mbtowc+0x6>
 800b464:	a901      	add	r1, sp, #4
 800b466:	b142      	cbz	r2, 800b47a <__ascii_mbtowc+0x1a>
 800b468:	b14b      	cbz	r3, 800b47e <__ascii_mbtowc+0x1e>
 800b46a:	7813      	ldrb	r3, [r2, #0]
 800b46c:	600b      	str	r3, [r1, #0]
 800b46e:	7812      	ldrb	r2, [r2, #0]
 800b470:	1e10      	subs	r0, r2, #0
 800b472:	bf18      	it	ne
 800b474:	2001      	movne	r0, #1
 800b476:	b002      	add	sp, #8
 800b478:	4770      	bx	lr
 800b47a:	4610      	mov	r0, r2
 800b47c:	e7fb      	b.n	800b476 <__ascii_mbtowc+0x16>
 800b47e:	f06f 0001 	mvn.w	r0, #1
 800b482:	e7f8      	b.n	800b476 <__ascii_mbtowc+0x16>

0800b484 <__malloc_lock>:
 800b484:	4801      	ldr	r0, [pc, #4]	; (800b48c <__malloc_lock+0x8>)
 800b486:	f000 bbf1 	b.w	800bc6c <__retarget_lock_acquire_recursive>
 800b48a:	bf00      	nop
 800b48c:	20002190 	.word	0x20002190

0800b490 <__malloc_unlock>:
 800b490:	4801      	ldr	r0, [pc, #4]	; (800b498 <__malloc_unlock+0x8>)
 800b492:	f000 bbec 	b.w	800bc6e <__retarget_lock_release_recursive>
 800b496:	bf00      	nop
 800b498:	20002190 	.word	0x20002190

0800b49c <__sfputc_r>:
 800b49c:	6893      	ldr	r3, [r2, #8]
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	b410      	push	{r4}
 800b4a4:	6093      	str	r3, [r2, #8]
 800b4a6:	da08      	bge.n	800b4ba <__sfputc_r+0x1e>
 800b4a8:	6994      	ldr	r4, [r2, #24]
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	db01      	blt.n	800b4b2 <__sfputc_r+0x16>
 800b4ae:	290a      	cmp	r1, #10
 800b4b0:	d103      	bne.n	800b4ba <__sfputc_r+0x1e>
 800b4b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4b6:	f000 b94b 	b.w	800b750 <__swbuf_r>
 800b4ba:	6813      	ldr	r3, [r2, #0]
 800b4bc:	1c58      	adds	r0, r3, #1
 800b4be:	6010      	str	r0, [r2, #0]
 800b4c0:	7019      	strb	r1, [r3, #0]
 800b4c2:	4608      	mov	r0, r1
 800b4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4c8:	4770      	bx	lr

0800b4ca <__sfputs_r>:
 800b4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4cc:	4606      	mov	r6, r0
 800b4ce:	460f      	mov	r7, r1
 800b4d0:	4614      	mov	r4, r2
 800b4d2:	18d5      	adds	r5, r2, r3
 800b4d4:	42ac      	cmp	r4, r5
 800b4d6:	d101      	bne.n	800b4dc <__sfputs_r+0x12>
 800b4d8:	2000      	movs	r0, #0
 800b4da:	e007      	b.n	800b4ec <__sfputs_r+0x22>
 800b4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e0:	463a      	mov	r2, r7
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7ff ffda 	bl	800b49c <__sfputc_r>
 800b4e8:	1c43      	adds	r3, r0, #1
 800b4ea:	d1f3      	bne.n	800b4d4 <__sfputs_r+0xa>
 800b4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4f0 <_vfiprintf_r>:
 800b4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f4:	460d      	mov	r5, r1
 800b4f6:	b09d      	sub	sp, #116	; 0x74
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	4698      	mov	r8, r3
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	b118      	cbz	r0, 800b508 <_vfiprintf_r+0x18>
 800b500:	6983      	ldr	r3, [r0, #24]
 800b502:	b90b      	cbnz	r3, 800b508 <_vfiprintf_r+0x18>
 800b504:	f000 fb14 	bl	800bb30 <__sinit>
 800b508:	4b89      	ldr	r3, [pc, #548]	; (800b730 <_vfiprintf_r+0x240>)
 800b50a:	429d      	cmp	r5, r3
 800b50c:	d11b      	bne.n	800b546 <_vfiprintf_r+0x56>
 800b50e:	6875      	ldr	r5, [r6, #4]
 800b510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b512:	07d9      	lsls	r1, r3, #31
 800b514:	d405      	bmi.n	800b522 <_vfiprintf_r+0x32>
 800b516:	89ab      	ldrh	r3, [r5, #12]
 800b518:	059a      	lsls	r2, r3, #22
 800b51a:	d402      	bmi.n	800b522 <_vfiprintf_r+0x32>
 800b51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b51e:	f000 fba5 	bl	800bc6c <__retarget_lock_acquire_recursive>
 800b522:	89ab      	ldrh	r3, [r5, #12]
 800b524:	071b      	lsls	r3, r3, #28
 800b526:	d501      	bpl.n	800b52c <_vfiprintf_r+0x3c>
 800b528:	692b      	ldr	r3, [r5, #16]
 800b52a:	b9eb      	cbnz	r3, 800b568 <_vfiprintf_r+0x78>
 800b52c:	4629      	mov	r1, r5
 800b52e:	4630      	mov	r0, r6
 800b530:	f000 f96e 	bl	800b810 <__swsetup_r>
 800b534:	b1c0      	cbz	r0, 800b568 <_vfiprintf_r+0x78>
 800b536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b538:	07dc      	lsls	r4, r3, #31
 800b53a:	d50e      	bpl.n	800b55a <_vfiprintf_r+0x6a>
 800b53c:	f04f 30ff 	mov.w	r0, #4294967295
 800b540:	b01d      	add	sp, #116	; 0x74
 800b542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b546:	4b7b      	ldr	r3, [pc, #492]	; (800b734 <_vfiprintf_r+0x244>)
 800b548:	429d      	cmp	r5, r3
 800b54a:	d101      	bne.n	800b550 <_vfiprintf_r+0x60>
 800b54c:	68b5      	ldr	r5, [r6, #8]
 800b54e:	e7df      	b.n	800b510 <_vfiprintf_r+0x20>
 800b550:	4b79      	ldr	r3, [pc, #484]	; (800b738 <_vfiprintf_r+0x248>)
 800b552:	429d      	cmp	r5, r3
 800b554:	bf08      	it	eq
 800b556:	68f5      	ldreq	r5, [r6, #12]
 800b558:	e7da      	b.n	800b510 <_vfiprintf_r+0x20>
 800b55a:	89ab      	ldrh	r3, [r5, #12]
 800b55c:	0598      	lsls	r0, r3, #22
 800b55e:	d4ed      	bmi.n	800b53c <_vfiprintf_r+0x4c>
 800b560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b562:	f000 fb84 	bl	800bc6e <__retarget_lock_release_recursive>
 800b566:	e7e9      	b.n	800b53c <_vfiprintf_r+0x4c>
 800b568:	2300      	movs	r3, #0
 800b56a:	9309      	str	r3, [sp, #36]	; 0x24
 800b56c:	2320      	movs	r3, #32
 800b56e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b572:	f8cd 800c 	str.w	r8, [sp, #12]
 800b576:	2330      	movs	r3, #48	; 0x30
 800b578:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b73c <_vfiprintf_r+0x24c>
 800b57c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b580:	f04f 0901 	mov.w	r9, #1
 800b584:	4623      	mov	r3, r4
 800b586:	469a      	mov	sl, r3
 800b588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b58c:	b10a      	cbz	r2, 800b592 <_vfiprintf_r+0xa2>
 800b58e:	2a25      	cmp	r2, #37	; 0x25
 800b590:	d1f9      	bne.n	800b586 <_vfiprintf_r+0x96>
 800b592:	ebba 0b04 	subs.w	fp, sl, r4
 800b596:	d00b      	beq.n	800b5b0 <_vfiprintf_r+0xc0>
 800b598:	465b      	mov	r3, fp
 800b59a:	4622      	mov	r2, r4
 800b59c:	4629      	mov	r1, r5
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f7ff ff93 	bl	800b4ca <__sfputs_r>
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	f000 80aa 	beq.w	800b6fe <_vfiprintf_r+0x20e>
 800b5aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ac:	445a      	add	r2, fp
 800b5ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 80a2 	beq.w	800b6fe <_vfiprintf_r+0x20e>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5c4:	f10a 0a01 	add.w	sl, sl, #1
 800b5c8:	9304      	str	r3, [sp, #16]
 800b5ca:	9307      	str	r3, [sp, #28]
 800b5cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b5d2:	4654      	mov	r4, sl
 800b5d4:	2205      	movs	r2, #5
 800b5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5da:	4858      	ldr	r0, [pc, #352]	; (800b73c <_vfiprintf_r+0x24c>)
 800b5dc:	f7f4 fe00 	bl	80001e0 <memchr>
 800b5e0:	9a04      	ldr	r2, [sp, #16]
 800b5e2:	b9d8      	cbnz	r0, 800b61c <_vfiprintf_r+0x12c>
 800b5e4:	06d1      	lsls	r1, r2, #27
 800b5e6:	bf44      	itt	mi
 800b5e8:	2320      	movmi	r3, #32
 800b5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ee:	0713      	lsls	r3, r2, #28
 800b5f0:	bf44      	itt	mi
 800b5f2:	232b      	movmi	r3, #43	; 0x2b
 800b5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b5fe:	d015      	beq.n	800b62c <_vfiprintf_r+0x13c>
 800b600:	9a07      	ldr	r2, [sp, #28]
 800b602:	4654      	mov	r4, sl
 800b604:	2000      	movs	r0, #0
 800b606:	f04f 0c0a 	mov.w	ip, #10
 800b60a:	4621      	mov	r1, r4
 800b60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b610:	3b30      	subs	r3, #48	; 0x30
 800b612:	2b09      	cmp	r3, #9
 800b614:	d94e      	bls.n	800b6b4 <_vfiprintf_r+0x1c4>
 800b616:	b1b0      	cbz	r0, 800b646 <_vfiprintf_r+0x156>
 800b618:	9207      	str	r2, [sp, #28]
 800b61a:	e014      	b.n	800b646 <_vfiprintf_r+0x156>
 800b61c:	eba0 0308 	sub.w	r3, r0, r8
 800b620:	fa09 f303 	lsl.w	r3, r9, r3
 800b624:	4313      	orrs	r3, r2
 800b626:	9304      	str	r3, [sp, #16]
 800b628:	46a2      	mov	sl, r4
 800b62a:	e7d2      	b.n	800b5d2 <_vfiprintf_r+0xe2>
 800b62c:	9b03      	ldr	r3, [sp, #12]
 800b62e:	1d19      	adds	r1, r3, #4
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	9103      	str	r1, [sp, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	bfbb      	ittet	lt
 800b638:	425b      	neglt	r3, r3
 800b63a:	f042 0202 	orrlt.w	r2, r2, #2
 800b63e:	9307      	strge	r3, [sp, #28]
 800b640:	9307      	strlt	r3, [sp, #28]
 800b642:	bfb8      	it	lt
 800b644:	9204      	strlt	r2, [sp, #16]
 800b646:	7823      	ldrb	r3, [r4, #0]
 800b648:	2b2e      	cmp	r3, #46	; 0x2e
 800b64a:	d10c      	bne.n	800b666 <_vfiprintf_r+0x176>
 800b64c:	7863      	ldrb	r3, [r4, #1]
 800b64e:	2b2a      	cmp	r3, #42	; 0x2a
 800b650:	d135      	bne.n	800b6be <_vfiprintf_r+0x1ce>
 800b652:	9b03      	ldr	r3, [sp, #12]
 800b654:	1d1a      	adds	r2, r3, #4
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	9203      	str	r2, [sp, #12]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	bfb8      	it	lt
 800b65e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b662:	3402      	adds	r4, #2
 800b664:	9305      	str	r3, [sp, #20]
 800b666:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b74c <_vfiprintf_r+0x25c>
 800b66a:	7821      	ldrb	r1, [r4, #0]
 800b66c:	2203      	movs	r2, #3
 800b66e:	4650      	mov	r0, sl
 800b670:	f7f4 fdb6 	bl	80001e0 <memchr>
 800b674:	b140      	cbz	r0, 800b688 <_vfiprintf_r+0x198>
 800b676:	2340      	movs	r3, #64	; 0x40
 800b678:	eba0 000a 	sub.w	r0, r0, sl
 800b67c:	fa03 f000 	lsl.w	r0, r3, r0
 800b680:	9b04      	ldr	r3, [sp, #16]
 800b682:	4303      	orrs	r3, r0
 800b684:	3401      	adds	r4, #1
 800b686:	9304      	str	r3, [sp, #16]
 800b688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68c:	482c      	ldr	r0, [pc, #176]	; (800b740 <_vfiprintf_r+0x250>)
 800b68e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b692:	2206      	movs	r2, #6
 800b694:	f7f4 fda4 	bl	80001e0 <memchr>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d03f      	beq.n	800b71c <_vfiprintf_r+0x22c>
 800b69c:	4b29      	ldr	r3, [pc, #164]	; (800b744 <_vfiprintf_r+0x254>)
 800b69e:	bb1b      	cbnz	r3, 800b6e8 <_vfiprintf_r+0x1f8>
 800b6a0:	9b03      	ldr	r3, [sp, #12]
 800b6a2:	3307      	adds	r3, #7
 800b6a4:	f023 0307 	bic.w	r3, r3, #7
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	9303      	str	r3, [sp, #12]
 800b6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ae:	443b      	add	r3, r7
 800b6b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b2:	e767      	b.n	800b584 <_vfiprintf_r+0x94>
 800b6b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	2001      	movs	r0, #1
 800b6bc:	e7a5      	b.n	800b60a <_vfiprintf_r+0x11a>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	3401      	adds	r4, #1
 800b6c2:	9305      	str	r3, [sp, #20]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	f04f 0c0a 	mov.w	ip, #10
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6d0:	3a30      	subs	r2, #48	; 0x30
 800b6d2:	2a09      	cmp	r2, #9
 800b6d4:	d903      	bls.n	800b6de <_vfiprintf_r+0x1ee>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d0c5      	beq.n	800b666 <_vfiprintf_r+0x176>
 800b6da:	9105      	str	r1, [sp, #20]
 800b6dc:	e7c3      	b.n	800b666 <_vfiprintf_r+0x176>
 800b6de:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e7f0      	b.n	800b6ca <_vfiprintf_r+0x1da>
 800b6e8:	ab03      	add	r3, sp, #12
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	462a      	mov	r2, r5
 800b6ee:	4b16      	ldr	r3, [pc, #88]	; (800b748 <_vfiprintf_r+0x258>)
 800b6f0:	a904      	add	r1, sp, #16
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f7fd ffec 	bl	80096d0 <_printf_float>
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	1c78      	adds	r0, r7, #1
 800b6fc:	d1d6      	bne.n	800b6ac <_vfiprintf_r+0x1bc>
 800b6fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b700:	07d9      	lsls	r1, r3, #31
 800b702:	d405      	bmi.n	800b710 <_vfiprintf_r+0x220>
 800b704:	89ab      	ldrh	r3, [r5, #12]
 800b706:	059a      	lsls	r2, r3, #22
 800b708:	d402      	bmi.n	800b710 <_vfiprintf_r+0x220>
 800b70a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b70c:	f000 faaf 	bl	800bc6e <__retarget_lock_release_recursive>
 800b710:	89ab      	ldrh	r3, [r5, #12]
 800b712:	065b      	lsls	r3, r3, #25
 800b714:	f53f af12 	bmi.w	800b53c <_vfiprintf_r+0x4c>
 800b718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b71a:	e711      	b.n	800b540 <_vfiprintf_r+0x50>
 800b71c:	ab03      	add	r3, sp, #12
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	462a      	mov	r2, r5
 800b722:	4b09      	ldr	r3, [pc, #36]	; (800b748 <_vfiprintf_r+0x258>)
 800b724:	a904      	add	r1, sp, #16
 800b726:	4630      	mov	r0, r6
 800b728:	f7fe fa76 	bl	8009c18 <_printf_i>
 800b72c:	e7e4      	b.n	800b6f8 <_vfiprintf_r+0x208>
 800b72e:	bf00      	nop
 800b730:	0800c33c 	.word	0x0800c33c
 800b734:	0800c35c 	.word	0x0800c35c
 800b738:	0800c31c 	.word	0x0800c31c
 800b73c:	0800c20a 	.word	0x0800c20a
 800b740:	0800c214 	.word	0x0800c214
 800b744:	080096d1 	.word	0x080096d1
 800b748:	0800b4cb 	.word	0x0800b4cb
 800b74c:	0800c210 	.word	0x0800c210

0800b750 <__swbuf_r>:
 800b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b752:	460e      	mov	r6, r1
 800b754:	4614      	mov	r4, r2
 800b756:	4605      	mov	r5, r0
 800b758:	b118      	cbz	r0, 800b762 <__swbuf_r+0x12>
 800b75a:	6983      	ldr	r3, [r0, #24]
 800b75c:	b90b      	cbnz	r3, 800b762 <__swbuf_r+0x12>
 800b75e:	f000 f9e7 	bl	800bb30 <__sinit>
 800b762:	4b21      	ldr	r3, [pc, #132]	; (800b7e8 <__swbuf_r+0x98>)
 800b764:	429c      	cmp	r4, r3
 800b766:	d12b      	bne.n	800b7c0 <__swbuf_r+0x70>
 800b768:	686c      	ldr	r4, [r5, #4]
 800b76a:	69a3      	ldr	r3, [r4, #24]
 800b76c:	60a3      	str	r3, [r4, #8]
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	071a      	lsls	r2, r3, #28
 800b772:	d52f      	bpl.n	800b7d4 <__swbuf_r+0x84>
 800b774:	6923      	ldr	r3, [r4, #16]
 800b776:	b36b      	cbz	r3, 800b7d4 <__swbuf_r+0x84>
 800b778:	6923      	ldr	r3, [r4, #16]
 800b77a:	6820      	ldr	r0, [r4, #0]
 800b77c:	1ac0      	subs	r0, r0, r3
 800b77e:	6963      	ldr	r3, [r4, #20]
 800b780:	b2f6      	uxtb	r6, r6
 800b782:	4283      	cmp	r3, r0
 800b784:	4637      	mov	r7, r6
 800b786:	dc04      	bgt.n	800b792 <__swbuf_r+0x42>
 800b788:	4621      	mov	r1, r4
 800b78a:	4628      	mov	r0, r5
 800b78c:	f000 f93c 	bl	800ba08 <_fflush_r>
 800b790:	bb30      	cbnz	r0, 800b7e0 <__swbuf_r+0x90>
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	3b01      	subs	r3, #1
 800b796:	60a3      	str	r3, [r4, #8]
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	1c5a      	adds	r2, r3, #1
 800b79c:	6022      	str	r2, [r4, #0]
 800b79e:	701e      	strb	r6, [r3, #0]
 800b7a0:	6963      	ldr	r3, [r4, #20]
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	4283      	cmp	r3, r0
 800b7a6:	d004      	beq.n	800b7b2 <__swbuf_r+0x62>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	07db      	lsls	r3, r3, #31
 800b7ac:	d506      	bpl.n	800b7bc <__swbuf_r+0x6c>
 800b7ae:	2e0a      	cmp	r6, #10
 800b7b0:	d104      	bne.n	800b7bc <__swbuf_r+0x6c>
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	f000 f927 	bl	800ba08 <_fflush_r>
 800b7ba:	b988      	cbnz	r0, 800b7e0 <__swbuf_r+0x90>
 800b7bc:	4638      	mov	r0, r7
 800b7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <__swbuf_r+0x9c>)
 800b7c2:	429c      	cmp	r4, r3
 800b7c4:	d101      	bne.n	800b7ca <__swbuf_r+0x7a>
 800b7c6:	68ac      	ldr	r4, [r5, #8]
 800b7c8:	e7cf      	b.n	800b76a <__swbuf_r+0x1a>
 800b7ca:	4b09      	ldr	r3, [pc, #36]	; (800b7f0 <__swbuf_r+0xa0>)
 800b7cc:	429c      	cmp	r4, r3
 800b7ce:	bf08      	it	eq
 800b7d0:	68ec      	ldreq	r4, [r5, #12]
 800b7d2:	e7ca      	b.n	800b76a <__swbuf_r+0x1a>
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	f000 f81a 	bl	800b810 <__swsetup_r>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d0cb      	beq.n	800b778 <__swbuf_r+0x28>
 800b7e0:	f04f 37ff 	mov.w	r7, #4294967295
 800b7e4:	e7ea      	b.n	800b7bc <__swbuf_r+0x6c>
 800b7e6:	bf00      	nop
 800b7e8:	0800c33c 	.word	0x0800c33c
 800b7ec:	0800c35c 	.word	0x0800c35c
 800b7f0:	0800c31c 	.word	0x0800c31c

0800b7f4 <__ascii_wctomb>:
 800b7f4:	b149      	cbz	r1, 800b80a <__ascii_wctomb+0x16>
 800b7f6:	2aff      	cmp	r2, #255	; 0xff
 800b7f8:	bf85      	ittet	hi
 800b7fa:	238a      	movhi	r3, #138	; 0x8a
 800b7fc:	6003      	strhi	r3, [r0, #0]
 800b7fe:	700a      	strbls	r2, [r1, #0]
 800b800:	f04f 30ff 	movhi.w	r0, #4294967295
 800b804:	bf98      	it	ls
 800b806:	2001      	movls	r0, #1
 800b808:	4770      	bx	lr
 800b80a:	4608      	mov	r0, r1
 800b80c:	4770      	bx	lr
	...

0800b810 <__swsetup_r>:
 800b810:	4b32      	ldr	r3, [pc, #200]	; (800b8dc <__swsetup_r+0xcc>)
 800b812:	b570      	push	{r4, r5, r6, lr}
 800b814:	681d      	ldr	r5, [r3, #0]
 800b816:	4606      	mov	r6, r0
 800b818:	460c      	mov	r4, r1
 800b81a:	b125      	cbz	r5, 800b826 <__swsetup_r+0x16>
 800b81c:	69ab      	ldr	r3, [r5, #24]
 800b81e:	b913      	cbnz	r3, 800b826 <__swsetup_r+0x16>
 800b820:	4628      	mov	r0, r5
 800b822:	f000 f985 	bl	800bb30 <__sinit>
 800b826:	4b2e      	ldr	r3, [pc, #184]	; (800b8e0 <__swsetup_r+0xd0>)
 800b828:	429c      	cmp	r4, r3
 800b82a:	d10f      	bne.n	800b84c <__swsetup_r+0x3c>
 800b82c:	686c      	ldr	r4, [r5, #4]
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b834:	0719      	lsls	r1, r3, #28
 800b836:	d42c      	bmi.n	800b892 <__swsetup_r+0x82>
 800b838:	06dd      	lsls	r5, r3, #27
 800b83a:	d411      	bmi.n	800b860 <__swsetup_r+0x50>
 800b83c:	2309      	movs	r3, #9
 800b83e:	6033      	str	r3, [r6, #0]
 800b840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b844:	81a3      	strh	r3, [r4, #12]
 800b846:	f04f 30ff 	mov.w	r0, #4294967295
 800b84a:	e03e      	b.n	800b8ca <__swsetup_r+0xba>
 800b84c:	4b25      	ldr	r3, [pc, #148]	; (800b8e4 <__swsetup_r+0xd4>)
 800b84e:	429c      	cmp	r4, r3
 800b850:	d101      	bne.n	800b856 <__swsetup_r+0x46>
 800b852:	68ac      	ldr	r4, [r5, #8]
 800b854:	e7eb      	b.n	800b82e <__swsetup_r+0x1e>
 800b856:	4b24      	ldr	r3, [pc, #144]	; (800b8e8 <__swsetup_r+0xd8>)
 800b858:	429c      	cmp	r4, r3
 800b85a:	bf08      	it	eq
 800b85c:	68ec      	ldreq	r4, [r5, #12]
 800b85e:	e7e6      	b.n	800b82e <__swsetup_r+0x1e>
 800b860:	0758      	lsls	r0, r3, #29
 800b862:	d512      	bpl.n	800b88a <__swsetup_r+0x7a>
 800b864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b866:	b141      	cbz	r1, 800b87a <__swsetup_r+0x6a>
 800b868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b86c:	4299      	cmp	r1, r3
 800b86e:	d002      	beq.n	800b876 <__swsetup_r+0x66>
 800b870:	4630      	mov	r0, r6
 800b872:	f7ff fd0b 	bl	800b28c <_free_r>
 800b876:	2300      	movs	r3, #0
 800b878:	6363      	str	r3, [r4, #52]	; 0x34
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b880:	81a3      	strh	r3, [r4, #12]
 800b882:	2300      	movs	r3, #0
 800b884:	6063      	str	r3, [r4, #4]
 800b886:	6923      	ldr	r3, [r4, #16]
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	f043 0308 	orr.w	r3, r3, #8
 800b890:	81a3      	strh	r3, [r4, #12]
 800b892:	6923      	ldr	r3, [r4, #16]
 800b894:	b94b      	cbnz	r3, 800b8aa <__swsetup_r+0x9a>
 800b896:	89a3      	ldrh	r3, [r4, #12]
 800b898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b89c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8a0:	d003      	beq.n	800b8aa <__swsetup_r+0x9a>
 800b8a2:	4621      	mov	r1, r4
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f000 fa07 	bl	800bcb8 <__smakebuf_r>
 800b8aa:	89a0      	ldrh	r0, [r4, #12]
 800b8ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8b0:	f010 0301 	ands.w	r3, r0, #1
 800b8b4:	d00a      	beq.n	800b8cc <__swsetup_r+0xbc>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60a3      	str	r3, [r4, #8]
 800b8ba:	6963      	ldr	r3, [r4, #20]
 800b8bc:	425b      	negs	r3, r3
 800b8be:	61a3      	str	r3, [r4, #24]
 800b8c0:	6923      	ldr	r3, [r4, #16]
 800b8c2:	b943      	cbnz	r3, 800b8d6 <__swsetup_r+0xc6>
 800b8c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8c8:	d1ba      	bne.n	800b840 <__swsetup_r+0x30>
 800b8ca:	bd70      	pop	{r4, r5, r6, pc}
 800b8cc:	0781      	lsls	r1, r0, #30
 800b8ce:	bf58      	it	pl
 800b8d0:	6963      	ldrpl	r3, [r4, #20]
 800b8d2:	60a3      	str	r3, [r4, #8]
 800b8d4:	e7f4      	b.n	800b8c0 <__swsetup_r+0xb0>
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e7f7      	b.n	800b8ca <__swsetup_r+0xba>
 800b8da:	bf00      	nop
 800b8dc:	20000180 	.word	0x20000180
 800b8e0:	0800c33c 	.word	0x0800c33c
 800b8e4:	0800c35c 	.word	0x0800c35c
 800b8e8:	0800c31c 	.word	0x0800c31c

0800b8ec <abort>:
 800b8ec:	b508      	push	{r3, lr}
 800b8ee:	2006      	movs	r0, #6
 800b8f0:	f000 fa4a 	bl	800bd88 <raise>
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	f7f6 fdb7 	bl	8002468 <_exit>
	...

0800b8fc <__sflush_r>:
 800b8fc:	898a      	ldrh	r2, [r1, #12]
 800b8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b902:	4605      	mov	r5, r0
 800b904:	0710      	lsls	r0, r2, #28
 800b906:	460c      	mov	r4, r1
 800b908:	d458      	bmi.n	800b9bc <__sflush_r+0xc0>
 800b90a:	684b      	ldr	r3, [r1, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	dc05      	bgt.n	800b91c <__sflush_r+0x20>
 800b910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b912:	2b00      	cmp	r3, #0
 800b914:	dc02      	bgt.n	800b91c <__sflush_r+0x20>
 800b916:	2000      	movs	r0, #0
 800b918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b91c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b91e:	2e00      	cmp	r6, #0
 800b920:	d0f9      	beq.n	800b916 <__sflush_r+0x1a>
 800b922:	2300      	movs	r3, #0
 800b924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b928:	682f      	ldr	r7, [r5, #0]
 800b92a:	602b      	str	r3, [r5, #0]
 800b92c:	d032      	beq.n	800b994 <__sflush_r+0x98>
 800b92e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	075a      	lsls	r2, r3, #29
 800b934:	d505      	bpl.n	800b942 <__sflush_r+0x46>
 800b936:	6863      	ldr	r3, [r4, #4]
 800b938:	1ac0      	subs	r0, r0, r3
 800b93a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b93c:	b10b      	cbz	r3, 800b942 <__sflush_r+0x46>
 800b93e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b940:	1ac0      	subs	r0, r0, r3
 800b942:	2300      	movs	r3, #0
 800b944:	4602      	mov	r2, r0
 800b946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b948:	6a21      	ldr	r1, [r4, #32]
 800b94a:	4628      	mov	r0, r5
 800b94c:	47b0      	blx	r6
 800b94e:	1c43      	adds	r3, r0, #1
 800b950:	89a3      	ldrh	r3, [r4, #12]
 800b952:	d106      	bne.n	800b962 <__sflush_r+0x66>
 800b954:	6829      	ldr	r1, [r5, #0]
 800b956:	291d      	cmp	r1, #29
 800b958:	d82c      	bhi.n	800b9b4 <__sflush_r+0xb8>
 800b95a:	4a2a      	ldr	r2, [pc, #168]	; (800ba04 <__sflush_r+0x108>)
 800b95c:	40ca      	lsrs	r2, r1
 800b95e:	07d6      	lsls	r6, r2, #31
 800b960:	d528      	bpl.n	800b9b4 <__sflush_r+0xb8>
 800b962:	2200      	movs	r2, #0
 800b964:	6062      	str	r2, [r4, #4]
 800b966:	04d9      	lsls	r1, r3, #19
 800b968:	6922      	ldr	r2, [r4, #16]
 800b96a:	6022      	str	r2, [r4, #0]
 800b96c:	d504      	bpl.n	800b978 <__sflush_r+0x7c>
 800b96e:	1c42      	adds	r2, r0, #1
 800b970:	d101      	bne.n	800b976 <__sflush_r+0x7a>
 800b972:	682b      	ldr	r3, [r5, #0]
 800b974:	b903      	cbnz	r3, 800b978 <__sflush_r+0x7c>
 800b976:	6560      	str	r0, [r4, #84]	; 0x54
 800b978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b97a:	602f      	str	r7, [r5, #0]
 800b97c:	2900      	cmp	r1, #0
 800b97e:	d0ca      	beq.n	800b916 <__sflush_r+0x1a>
 800b980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b984:	4299      	cmp	r1, r3
 800b986:	d002      	beq.n	800b98e <__sflush_r+0x92>
 800b988:	4628      	mov	r0, r5
 800b98a:	f7ff fc7f 	bl	800b28c <_free_r>
 800b98e:	2000      	movs	r0, #0
 800b990:	6360      	str	r0, [r4, #52]	; 0x34
 800b992:	e7c1      	b.n	800b918 <__sflush_r+0x1c>
 800b994:	6a21      	ldr	r1, [r4, #32]
 800b996:	2301      	movs	r3, #1
 800b998:	4628      	mov	r0, r5
 800b99a:	47b0      	blx	r6
 800b99c:	1c41      	adds	r1, r0, #1
 800b99e:	d1c7      	bne.n	800b930 <__sflush_r+0x34>
 800b9a0:	682b      	ldr	r3, [r5, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0c4      	beq.n	800b930 <__sflush_r+0x34>
 800b9a6:	2b1d      	cmp	r3, #29
 800b9a8:	d001      	beq.n	800b9ae <__sflush_r+0xb2>
 800b9aa:	2b16      	cmp	r3, #22
 800b9ac:	d101      	bne.n	800b9b2 <__sflush_r+0xb6>
 800b9ae:	602f      	str	r7, [r5, #0]
 800b9b0:	e7b1      	b.n	800b916 <__sflush_r+0x1a>
 800b9b2:	89a3      	ldrh	r3, [r4, #12]
 800b9b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9b8:	81a3      	strh	r3, [r4, #12]
 800b9ba:	e7ad      	b.n	800b918 <__sflush_r+0x1c>
 800b9bc:	690f      	ldr	r7, [r1, #16]
 800b9be:	2f00      	cmp	r7, #0
 800b9c0:	d0a9      	beq.n	800b916 <__sflush_r+0x1a>
 800b9c2:	0793      	lsls	r3, r2, #30
 800b9c4:	680e      	ldr	r6, [r1, #0]
 800b9c6:	bf08      	it	eq
 800b9c8:	694b      	ldreq	r3, [r1, #20]
 800b9ca:	600f      	str	r7, [r1, #0]
 800b9cc:	bf18      	it	ne
 800b9ce:	2300      	movne	r3, #0
 800b9d0:	eba6 0807 	sub.w	r8, r6, r7
 800b9d4:	608b      	str	r3, [r1, #8]
 800b9d6:	f1b8 0f00 	cmp.w	r8, #0
 800b9da:	dd9c      	ble.n	800b916 <__sflush_r+0x1a>
 800b9dc:	6a21      	ldr	r1, [r4, #32]
 800b9de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9e0:	4643      	mov	r3, r8
 800b9e2:	463a      	mov	r2, r7
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	47b0      	blx	r6
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	dc06      	bgt.n	800b9fa <__sflush_r+0xfe>
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f2:	81a3      	strh	r3, [r4, #12]
 800b9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f8:	e78e      	b.n	800b918 <__sflush_r+0x1c>
 800b9fa:	4407      	add	r7, r0
 800b9fc:	eba8 0800 	sub.w	r8, r8, r0
 800ba00:	e7e9      	b.n	800b9d6 <__sflush_r+0xda>
 800ba02:	bf00      	nop
 800ba04:	20400001 	.word	0x20400001

0800ba08 <_fflush_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	690b      	ldr	r3, [r1, #16]
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	b913      	cbnz	r3, 800ba18 <_fflush_r+0x10>
 800ba12:	2500      	movs	r5, #0
 800ba14:	4628      	mov	r0, r5
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	b118      	cbz	r0, 800ba22 <_fflush_r+0x1a>
 800ba1a:	6983      	ldr	r3, [r0, #24]
 800ba1c:	b90b      	cbnz	r3, 800ba22 <_fflush_r+0x1a>
 800ba1e:	f000 f887 	bl	800bb30 <__sinit>
 800ba22:	4b14      	ldr	r3, [pc, #80]	; (800ba74 <_fflush_r+0x6c>)
 800ba24:	429c      	cmp	r4, r3
 800ba26:	d11b      	bne.n	800ba60 <_fflush_r+0x58>
 800ba28:	686c      	ldr	r4, [r5, #4]
 800ba2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0ef      	beq.n	800ba12 <_fflush_r+0xa>
 800ba32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba34:	07d0      	lsls	r0, r2, #31
 800ba36:	d404      	bmi.n	800ba42 <_fflush_r+0x3a>
 800ba38:	0599      	lsls	r1, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_fflush_r+0x3a>
 800ba3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba3e:	f000 f915 	bl	800bc6c <__retarget_lock_acquire_recursive>
 800ba42:	4628      	mov	r0, r5
 800ba44:	4621      	mov	r1, r4
 800ba46:	f7ff ff59 	bl	800b8fc <__sflush_r>
 800ba4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba4c:	07da      	lsls	r2, r3, #31
 800ba4e:	4605      	mov	r5, r0
 800ba50:	d4e0      	bmi.n	800ba14 <_fflush_r+0xc>
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	059b      	lsls	r3, r3, #22
 800ba56:	d4dd      	bmi.n	800ba14 <_fflush_r+0xc>
 800ba58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba5a:	f000 f908 	bl	800bc6e <__retarget_lock_release_recursive>
 800ba5e:	e7d9      	b.n	800ba14 <_fflush_r+0xc>
 800ba60:	4b05      	ldr	r3, [pc, #20]	; (800ba78 <_fflush_r+0x70>)
 800ba62:	429c      	cmp	r4, r3
 800ba64:	d101      	bne.n	800ba6a <_fflush_r+0x62>
 800ba66:	68ac      	ldr	r4, [r5, #8]
 800ba68:	e7df      	b.n	800ba2a <_fflush_r+0x22>
 800ba6a:	4b04      	ldr	r3, [pc, #16]	; (800ba7c <_fflush_r+0x74>)
 800ba6c:	429c      	cmp	r4, r3
 800ba6e:	bf08      	it	eq
 800ba70:	68ec      	ldreq	r4, [r5, #12]
 800ba72:	e7da      	b.n	800ba2a <_fflush_r+0x22>
 800ba74:	0800c33c 	.word	0x0800c33c
 800ba78:	0800c35c 	.word	0x0800c35c
 800ba7c:	0800c31c 	.word	0x0800c31c

0800ba80 <std>:
 800ba80:	2300      	movs	r3, #0
 800ba82:	b510      	push	{r4, lr}
 800ba84:	4604      	mov	r4, r0
 800ba86:	e9c0 3300 	strd	r3, r3, [r0]
 800ba8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba8e:	6083      	str	r3, [r0, #8]
 800ba90:	8181      	strh	r1, [r0, #12]
 800ba92:	6643      	str	r3, [r0, #100]	; 0x64
 800ba94:	81c2      	strh	r2, [r0, #14]
 800ba96:	6183      	str	r3, [r0, #24]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	2208      	movs	r2, #8
 800ba9c:	305c      	adds	r0, #92	; 0x5c
 800ba9e:	f7fd fd6f 	bl	8009580 <memset>
 800baa2:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <std+0x38>)
 800baa4:	6263      	str	r3, [r4, #36]	; 0x24
 800baa6:	4b05      	ldr	r3, [pc, #20]	; (800babc <std+0x3c>)
 800baa8:	62a3      	str	r3, [r4, #40]	; 0x28
 800baaa:	4b05      	ldr	r3, [pc, #20]	; (800bac0 <std+0x40>)
 800baac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800baae:	4b05      	ldr	r3, [pc, #20]	; (800bac4 <std+0x44>)
 800bab0:	6224      	str	r4, [r4, #32]
 800bab2:	6323      	str	r3, [r4, #48]	; 0x30
 800bab4:	bd10      	pop	{r4, pc}
 800bab6:	bf00      	nop
 800bab8:	0800bdc1 	.word	0x0800bdc1
 800babc:	0800bde3 	.word	0x0800bde3
 800bac0:	0800be1b 	.word	0x0800be1b
 800bac4:	0800be3f 	.word	0x0800be3f

0800bac8 <_cleanup_r>:
 800bac8:	4901      	ldr	r1, [pc, #4]	; (800bad0 <_cleanup_r+0x8>)
 800baca:	f000 b8af 	b.w	800bc2c <_fwalk_reent>
 800bace:	bf00      	nop
 800bad0:	0800ba09 	.word	0x0800ba09

0800bad4 <__sfmoreglue>:
 800bad4:	b570      	push	{r4, r5, r6, lr}
 800bad6:	1e4a      	subs	r2, r1, #1
 800bad8:	2568      	movs	r5, #104	; 0x68
 800bada:	4355      	muls	r5, r2
 800badc:	460e      	mov	r6, r1
 800bade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bae2:	f7ff fc23 	bl	800b32c <_malloc_r>
 800bae6:	4604      	mov	r4, r0
 800bae8:	b140      	cbz	r0, 800bafc <__sfmoreglue+0x28>
 800baea:	2100      	movs	r1, #0
 800baec:	e9c0 1600 	strd	r1, r6, [r0]
 800baf0:	300c      	adds	r0, #12
 800baf2:	60a0      	str	r0, [r4, #8]
 800baf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800baf8:	f7fd fd42 	bl	8009580 <memset>
 800bafc:	4620      	mov	r0, r4
 800bafe:	bd70      	pop	{r4, r5, r6, pc}

0800bb00 <__sfp_lock_acquire>:
 800bb00:	4801      	ldr	r0, [pc, #4]	; (800bb08 <__sfp_lock_acquire+0x8>)
 800bb02:	f000 b8b3 	b.w	800bc6c <__retarget_lock_acquire_recursive>
 800bb06:	bf00      	nop
 800bb08:	20002194 	.word	0x20002194

0800bb0c <__sfp_lock_release>:
 800bb0c:	4801      	ldr	r0, [pc, #4]	; (800bb14 <__sfp_lock_release+0x8>)
 800bb0e:	f000 b8ae 	b.w	800bc6e <__retarget_lock_release_recursive>
 800bb12:	bf00      	nop
 800bb14:	20002194 	.word	0x20002194

0800bb18 <__sinit_lock_acquire>:
 800bb18:	4801      	ldr	r0, [pc, #4]	; (800bb20 <__sinit_lock_acquire+0x8>)
 800bb1a:	f000 b8a7 	b.w	800bc6c <__retarget_lock_acquire_recursive>
 800bb1e:	bf00      	nop
 800bb20:	2000218f 	.word	0x2000218f

0800bb24 <__sinit_lock_release>:
 800bb24:	4801      	ldr	r0, [pc, #4]	; (800bb2c <__sinit_lock_release+0x8>)
 800bb26:	f000 b8a2 	b.w	800bc6e <__retarget_lock_release_recursive>
 800bb2a:	bf00      	nop
 800bb2c:	2000218f 	.word	0x2000218f

0800bb30 <__sinit>:
 800bb30:	b510      	push	{r4, lr}
 800bb32:	4604      	mov	r4, r0
 800bb34:	f7ff fff0 	bl	800bb18 <__sinit_lock_acquire>
 800bb38:	69a3      	ldr	r3, [r4, #24]
 800bb3a:	b11b      	cbz	r3, 800bb44 <__sinit+0x14>
 800bb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb40:	f7ff bff0 	b.w	800bb24 <__sinit_lock_release>
 800bb44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb48:	6523      	str	r3, [r4, #80]	; 0x50
 800bb4a:	4b13      	ldr	r3, [pc, #76]	; (800bb98 <__sinit+0x68>)
 800bb4c:	4a13      	ldr	r2, [pc, #76]	; (800bb9c <__sinit+0x6c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb52:	42a3      	cmp	r3, r4
 800bb54:	bf04      	itt	eq
 800bb56:	2301      	moveq	r3, #1
 800bb58:	61a3      	streq	r3, [r4, #24]
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	f000 f820 	bl	800bba0 <__sfp>
 800bb60:	6060      	str	r0, [r4, #4]
 800bb62:	4620      	mov	r0, r4
 800bb64:	f000 f81c 	bl	800bba0 <__sfp>
 800bb68:	60a0      	str	r0, [r4, #8]
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f000 f818 	bl	800bba0 <__sfp>
 800bb70:	2200      	movs	r2, #0
 800bb72:	60e0      	str	r0, [r4, #12]
 800bb74:	2104      	movs	r1, #4
 800bb76:	6860      	ldr	r0, [r4, #4]
 800bb78:	f7ff ff82 	bl	800ba80 <std>
 800bb7c:	68a0      	ldr	r0, [r4, #8]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	2109      	movs	r1, #9
 800bb82:	f7ff ff7d 	bl	800ba80 <std>
 800bb86:	68e0      	ldr	r0, [r4, #12]
 800bb88:	2202      	movs	r2, #2
 800bb8a:	2112      	movs	r1, #18
 800bb8c:	f7ff ff78 	bl	800ba80 <std>
 800bb90:	2301      	movs	r3, #1
 800bb92:	61a3      	str	r3, [r4, #24]
 800bb94:	e7d2      	b.n	800bb3c <__sinit+0xc>
 800bb96:	bf00      	nop
 800bb98:	0800bf98 	.word	0x0800bf98
 800bb9c:	0800bac9 	.word	0x0800bac9

0800bba0 <__sfp>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	4607      	mov	r7, r0
 800bba4:	f7ff ffac 	bl	800bb00 <__sfp_lock_acquire>
 800bba8:	4b1e      	ldr	r3, [pc, #120]	; (800bc24 <__sfp+0x84>)
 800bbaa:	681e      	ldr	r6, [r3, #0]
 800bbac:	69b3      	ldr	r3, [r6, #24]
 800bbae:	b913      	cbnz	r3, 800bbb6 <__sfp+0x16>
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7ff ffbd 	bl	800bb30 <__sinit>
 800bbb6:	3648      	adds	r6, #72	; 0x48
 800bbb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	d503      	bpl.n	800bbc8 <__sfp+0x28>
 800bbc0:	6833      	ldr	r3, [r6, #0]
 800bbc2:	b30b      	cbz	r3, 800bc08 <__sfp+0x68>
 800bbc4:	6836      	ldr	r6, [r6, #0]
 800bbc6:	e7f7      	b.n	800bbb8 <__sfp+0x18>
 800bbc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bbcc:	b9d5      	cbnz	r5, 800bc04 <__sfp+0x64>
 800bbce:	4b16      	ldr	r3, [pc, #88]	; (800bc28 <__sfp+0x88>)
 800bbd0:	60e3      	str	r3, [r4, #12]
 800bbd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbd6:	6665      	str	r5, [r4, #100]	; 0x64
 800bbd8:	f000 f847 	bl	800bc6a <__retarget_lock_init_recursive>
 800bbdc:	f7ff ff96 	bl	800bb0c <__sfp_lock_release>
 800bbe0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbe4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbe8:	6025      	str	r5, [r4, #0]
 800bbea:	61a5      	str	r5, [r4, #24]
 800bbec:	2208      	movs	r2, #8
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbf4:	f7fd fcc4 	bl	8009580 <memset>
 800bbf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc00:	4620      	mov	r0, r4
 800bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc04:	3468      	adds	r4, #104	; 0x68
 800bc06:	e7d9      	b.n	800bbbc <__sfp+0x1c>
 800bc08:	2104      	movs	r1, #4
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7ff ff62 	bl	800bad4 <__sfmoreglue>
 800bc10:	4604      	mov	r4, r0
 800bc12:	6030      	str	r0, [r6, #0]
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d1d5      	bne.n	800bbc4 <__sfp+0x24>
 800bc18:	f7ff ff78 	bl	800bb0c <__sfp_lock_release>
 800bc1c:	230c      	movs	r3, #12
 800bc1e:	603b      	str	r3, [r7, #0]
 800bc20:	e7ee      	b.n	800bc00 <__sfp+0x60>
 800bc22:	bf00      	nop
 800bc24:	0800bf98 	.word	0x0800bf98
 800bc28:	ffff0001 	.word	0xffff0001

0800bc2c <_fwalk_reent>:
 800bc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc30:	4606      	mov	r6, r0
 800bc32:	4688      	mov	r8, r1
 800bc34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc38:	2700      	movs	r7, #0
 800bc3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc3e:	f1b9 0901 	subs.w	r9, r9, #1
 800bc42:	d505      	bpl.n	800bc50 <_fwalk_reent+0x24>
 800bc44:	6824      	ldr	r4, [r4, #0]
 800bc46:	2c00      	cmp	r4, #0
 800bc48:	d1f7      	bne.n	800bc3a <_fwalk_reent+0xe>
 800bc4a:	4638      	mov	r0, r7
 800bc4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc50:	89ab      	ldrh	r3, [r5, #12]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d907      	bls.n	800bc66 <_fwalk_reent+0x3a>
 800bc56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	d003      	beq.n	800bc66 <_fwalk_reent+0x3a>
 800bc5e:	4629      	mov	r1, r5
 800bc60:	4630      	mov	r0, r6
 800bc62:	47c0      	blx	r8
 800bc64:	4307      	orrs	r7, r0
 800bc66:	3568      	adds	r5, #104	; 0x68
 800bc68:	e7e9      	b.n	800bc3e <_fwalk_reent+0x12>

0800bc6a <__retarget_lock_init_recursive>:
 800bc6a:	4770      	bx	lr

0800bc6c <__retarget_lock_acquire_recursive>:
 800bc6c:	4770      	bx	lr

0800bc6e <__retarget_lock_release_recursive>:
 800bc6e:	4770      	bx	lr

0800bc70 <__swhatbuf_r>:
 800bc70:	b570      	push	{r4, r5, r6, lr}
 800bc72:	460e      	mov	r6, r1
 800bc74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc78:	2900      	cmp	r1, #0
 800bc7a:	b096      	sub	sp, #88	; 0x58
 800bc7c:	4614      	mov	r4, r2
 800bc7e:	461d      	mov	r5, r3
 800bc80:	da07      	bge.n	800bc92 <__swhatbuf_r+0x22>
 800bc82:	2300      	movs	r3, #0
 800bc84:	602b      	str	r3, [r5, #0]
 800bc86:	89b3      	ldrh	r3, [r6, #12]
 800bc88:	061a      	lsls	r2, r3, #24
 800bc8a:	d410      	bmi.n	800bcae <__swhatbuf_r+0x3e>
 800bc8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc90:	e00e      	b.n	800bcb0 <__swhatbuf_r+0x40>
 800bc92:	466a      	mov	r2, sp
 800bc94:	f000 f8fa 	bl	800be8c <_fstat_r>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	dbf2      	blt.n	800bc82 <__swhatbuf_r+0x12>
 800bc9c:	9a01      	ldr	r2, [sp, #4]
 800bc9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bca6:	425a      	negs	r2, r3
 800bca8:	415a      	adcs	r2, r3
 800bcaa:	602a      	str	r2, [r5, #0]
 800bcac:	e7ee      	b.n	800bc8c <__swhatbuf_r+0x1c>
 800bcae:	2340      	movs	r3, #64	; 0x40
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	6023      	str	r3, [r4, #0]
 800bcb4:	b016      	add	sp, #88	; 0x58
 800bcb6:	bd70      	pop	{r4, r5, r6, pc}

0800bcb8 <__smakebuf_r>:
 800bcb8:	898b      	ldrh	r3, [r1, #12]
 800bcba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcbc:	079d      	lsls	r5, r3, #30
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	d507      	bpl.n	800bcd4 <__smakebuf_r+0x1c>
 800bcc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	6123      	str	r3, [r4, #16]
 800bccc:	2301      	movs	r3, #1
 800bcce:	6163      	str	r3, [r4, #20]
 800bcd0:	b002      	add	sp, #8
 800bcd2:	bd70      	pop	{r4, r5, r6, pc}
 800bcd4:	ab01      	add	r3, sp, #4
 800bcd6:	466a      	mov	r2, sp
 800bcd8:	f7ff ffca 	bl	800bc70 <__swhatbuf_r>
 800bcdc:	9900      	ldr	r1, [sp, #0]
 800bcde:	4605      	mov	r5, r0
 800bce0:	4630      	mov	r0, r6
 800bce2:	f7ff fb23 	bl	800b32c <_malloc_r>
 800bce6:	b948      	cbnz	r0, 800bcfc <__smakebuf_r+0x44>
 800bce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcec:	059a      	lsls	r2, r3, #22
 800bcee:	d4ef      	bmi.n	800bcd0 <__smakebuf_r+0x18>
 800bcf0:	f023 0303 	bic.w	r3, r3, #3
 800bcf4:	f043 0302 	orr.w	r3, r3, #2
 800bcf8:	81a3      	strh	r3, [r4, #12]
 800bcfa:	e7e3      	b.n	800bcc4 <__smakebuf_r+0xc>
 800bcfc:	4b0d      	ldr	r3, [pc, #52]	; (800bd34 <__smakebuf_r+0x7c>)
 800bcfe:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	6020      	str	r0, [r4, #0]
 800bd04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd08:	81a3      	strh	r3, [r4, #12]
 800bd0a:	9b00      	ldr	r3, [sp, #0]
 800bd0c:	6163      	str	r3, [r4, #20]
 800bd0e:	9b01      	ldr	r3, [sp, #4]
 800bd10:	6120      	str	r0, [r4, #16]
 800bd12:	b15b      	cbz	r3, 800bd2c <__smakebuf_r+0x74>
 800bd14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd18:	4630      	mov	r0, r6
 800bd1a:	f000 f8c9 	bl	800beb0 <_isatty_r>
 800bd1e:	b128      	cbz	r0, 800bd2c <__smakebuf_r+0x74>
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	f023 0303 	bic.w	r3, r3, #3
 800bd26:	f043 0301 	orr.w	r3, r3, #1
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	89a0      	ldrh	r0, [r4, #12]
 800bd2e:	4305      	orrs	r5, r0
 800bd30:	81a5      	strh	r5, [r4, #12]
 800bd32:	e7cd      	b.n	800bcd0 <__smakebuf_r+0x18>
 800bd34:	0800bac9 	.word	0x0800bac9

0800bd38 <_raise_r>:
 800bd38:	291f      	cmp	r1, #31
 800bd3a:	b538      	push	{r3, r4, r5, lr}
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	460d      	mov	r5, r1
 800bd40:	d904      	bls.n	800bd4c <_raise_r+0x14>
 800bd42:	2316      	movs	r3, #22
 800bd44:	6003      	str	r3, [r0, #0]
 800bd46:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd4e:	b112      	cbz	r2, 800bd56 <_raise_r+0x1e>
 800bd50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd54:	b94b      	cbnz	r3, 800bd6a <_raise_r+0x32>
 800bd56:	4620      	mov	r0, r4
 800bd58:	f000 f830 	bl	800bdbc <_getpid_r>
 800bd5c:	462a      	mov	r2, r5
 800bd5e:	4601      	mov	r1, r0
 800bd60:	4620      	mov	r0, r4
 800bd62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd66:	f000 b817 	b.w	800bd98 <_kill_r>
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d00a      	beq.n	800bd84 <_raise_r+0x4c>
 800bd6e:	1c59      	adds	r1, r3, #1
 800bd70:	d103      	bne.n	800bd7a <_raise_r+0x42>
 800bd72:	2316      	movs	r3, #22
 800bd74:	6003      	str	r3, [r0, #0]
 800bd76:	2001      	movs	r0, #1
 800bd78:	e7e7      	b.n	800bd4a <_raise_r+0x12>
 800bd7a:	2400      	movs	r4, #0
 800bd7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd80:	4628      	mov	r0, r5
 800bd82:	4798      	blx	r3
 800bd84:	2000      	movs	r0, #0
 800bd86:	e7e0      	b.n	800bd4a <_raise_r+0x12>

0800bd88 <raise>:
 800bd88:	4b02      	ldr	r3, [pc, #8]	; (800bd94 <raise+0xc>)
 800bd8a:	4601      	mov	r1, r0
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	f7ff bfd3 	b.w	800bd38 <_raise_r>
 800bd92:	bf00      	nop
 800bd94:	20000180 	.word	0x20000180

0800bd98 <_kill_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d07      	ldr	r5, [pc, #28]	; (800bdb8 <_kill_r+0x20>)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4608      	mov	r0, r1
 800bda2:	4611      	mov	r1, r2
 800bda4:	602b      	str	r3, [r5, #0]
 800bda6:	f7f6 fb4f 	bl	8002448 <_kill>
 800bdaa:	1c43      	adds	r3, r0, #1
 800bdac:	d102      	bne.n	800bdb4 <_kill_r+0x1c>
 800bdae:	682b      	ldr	r3, [r5, #0]
 800bdb0:	b103      	cbz	r3, 800bdb4 <_kill_r+0x1c>
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	bd38      	pop	{r3, r4, r5, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20002188 	.word	0x20002188

0800bdbc <_getpid_r>:
 800bdbc:	f7f6 bb3c 	b.w	8002438 <_getpid>

0800bdc0 <__sread>:
 800bdc0:	b510      	push	{r4, lr}
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc8:	f000 f894 	bl	800bef4 <_read_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	bfab      	itete	ge
 800bdd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdd2:	89a3      	ldrhlt	r3, [r4, #12]
 800bdd4:	181b      	addge	r3, r3, r0
 800bdd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdda:	bfac      	ite	ge
 800bddc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdde:	81a3      	strhlt	r3, [r4, #12]
 800bde0:	bd10      	pop	{r4, pc}

0800bde2 <__swrite>:
 800bde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde6:	461f      	mov	r7, r3
 800bde8:	898b      	ldrh	r3, [r1, #12]
 800bdea:	05db      	lsls	r3, r3, #23
 800bdec:	4605      	mov	r5, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	d505      	bpl.n	800be00 <__swrite+0x1e>
 800bdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f000 f868 	bl	800bed0 <_lseek_r>
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be0a:	81a3      	strh	r3, [r4, #12]
 800be0c:	4632      	mov	r2, r6
 800be0e:	463b      	mov	r3, r7
 800be10:	4628      	mov	r0, r5
 800be12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be16:	f000 b817 	b.w	800be48 <_write_r>

0800be1a <__sseek>:
 800be1a:	b510      	push	{r4, lr}
 800be1c:	460c      	mov	r4, r1
 800be1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be22:	f000 f855 	bl	800bed0 <_lseek_r>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	bf15      	itete	ne
 800be2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800be2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be36:	81a3      	strheq	r3, [r4, #12]
 800be38:	bf18      	it	ne
 800be3a:	81a3      	strhne	r3, [r4, #12]
 800be3c:	bd10      	pop	{r4, pc}

0800be3e <__sclose>:
 800be3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be42:	f000 b813 	b.w	800be6c <_close_r>
	...

0800be48 <_write_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	4d07      	ldr	r5, [pc, #28]	; (800be68 <_write_r+0x20>)
 800be4c:	4604      	mov	r4, r0
 800be4e:	4608      	mov	r0, r1
 800be50:	4611      	mov	r1, r2
 800be52:	2200      	movs	r2, #0
 800be54:	602a      	str	r2, [r5, #0]
 800be56:	461a      	mov	r2, r3
 800be58:	f7f6 fb2d 	bl	80024b6 <_write>
 800be5c:	1c43      	adds	r3, r0, #1
 800be5e:	d102      	bne.n	800be66 <_write_r+0x1e>
 800be60:	682b      	ldr	r3, [r5, #0]
 800be62:	b103      	cbz	r3, 800be66 <_write_r+0x1e>
 800be64:	6023      	str	r3, [r4, #0]
 800be66:	bd38      	pop	{r3, r4, r5, pc}
 800be68:	20002188 	.word	0x20002188

0800be6c <_close_r>:
 800be6c:	b538      	push	{r3, r4, r5, lr}
 800be6e:	4d06      	ldr	r5, [pc, #24]	; (800be88 <_close_r+0x1c>)
 800be70:	2300      	movs	r3, #0
 800be72:	4604      	mov	r4, r0
 800be74:	4608      	mov	r0, r1
 800be76:	602b      	str	r3, [r5, #0]
 800be78:	f7f6 fb39 	bl	80024ee <_close>
 800be7c:	1c43      	adds	r3, r0, #1
 800be7e:	d102      	bne.n	800be86 <_close_r+0x1a>
 800be80:	682b      	ldr	r3, [r5, #0]
 800be82:	b103      	cbz	r3, 800be86 <_close_r+0x1a>
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	bd38      	pop	{r3, r4, r5, pc}
 800be88:	20002188 	.word	0x20002188

0800be8c <_fstat_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4d07      	ldr	r5, [pc, #28]	; (800beac <_fstat_r+0x20>)
 800be90:	2300      	movs	r3, #0
 800be92:	4604      	mov	r4, r0
 800be94:	4608      	mov	r0, r1
 800be96:	4611      	mov	r1, r2
 800be98:	602b      	str	r3, [r5, #0]
 800be9a:	f7f6 fb34 	bl	8002506 <_fstat>
 800be9e:	1c43      	adds	r3, r0, #1
 800bea0:	d102      	bne.n	800bea8 <_fstat_r+0x1c>
 800bea2:	682b      	ldr	r3, [r5, #0]
 800bea4:	b103      	cbz	r3, 800bea8 <_fstat_r+0x1c>
 800bea6:	6023      	str	r3, [r4, #0]
 800bea8:	bd38      	pop	{r3, r4, r5, pc}
 800beaa:	bf00      	nop
 800beac:	20002188 	.word	0x20002188

0800beb0 <_isatty_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4d06      	ldr	r5, [pc, #24]	; (800becc <_isatty_r+0x1c>)
 800beb4:	2300      	movs	r3, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	4608      	mov	r0, r1
 800beba:	602b      	str	r3, [r5, #0]
 800bebc:	f7f6 fb33 	bl	8002526 <_isatty>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d102      	bne.n	800beca <_isatty_r+0x1a>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	b103      	cbz	r3, 800beca <_isatty_r+0x1a>
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	20002188 	.word	0x20002188

0800bed0 <_lseek_r>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	4d07      	ldr	r5, [pc, #28]	; (800bef0 <_lseek_r+0x20>)
 800bed4:	4604      	mov	r4, r0
 800bed6:	4608      	mov	r0, r1
 800bed8:	4611      	mov	r1, r2
 800beda:	2200      	movs	r2, #0
 800bedc:	602a      	str	r2, [r5, #0]
 800bede:	461a      	mov	r2, r3
 800bee0:	f7f6 fb2c 	bl	800253c <_lseek>
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	d102      	bne.n	800beee <_lseek_r+0x1e>
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	b103      	cbz	r3, 800beee <_lseek_r+0x1e>
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	20002188 	.word	0x20002188

0800bef4 <_read_r>:
 800bef4:	b538      	push	{r3, r4, r5, lr}
 800bef6:	4d07      	ldr	r5, [pc, #28]	; (800bf14 <_read_r+0x20>)
 800bef8:	4604      	mov	r4, r0
 800befa:	4608      	mov	r0, r1
 800befc:	4611      	mov	r1, r2
 800befe:	2200      	movs	r2, #0
 800bf00:	602a      	str	r2, [r5, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	f7f6 faba 	bl	800247c <_read>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d102      	bne.n	800bf12 <_read_r+0x1e>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	b103      	cbz	r3, 800bf12 <_read_r+0x1e>
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	20002188 	.word	0x20002188

0800bf18 <_init>:
 800bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1a:	bf00      	nop
 800bf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf1e:	bc08      	pop	{r3}
 800bf20:	469e      	mov	lr, r3
 800bf22:	4770      	bx	lr

0800bf24 <_fini>:
 800bf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf26:	bf00      	nop
 800bf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf2a:	bc08      	pop	{r3}
 800bf2c:	469e      	mov	lr, r3
 800bf2e:	4770      	bx	lr
