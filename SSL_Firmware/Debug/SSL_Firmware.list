
SSL_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008398  08008398  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08008398  08008398  00018398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083a0  080083a0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080083a0  080083a0  000183a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083a8  080083a8  000183a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080083ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cc4  20000180  0800852c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e44  0800852c  00021e44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef9a  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405b  00000000  00000000  0003f14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  000431a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  000447b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002605a  00000000  00000000  00045c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c002  00000000  00000000  0006bc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3655  00000000  00000000  00087c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b2e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d10  00000000  00000000  0015b33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008320 	.word	0x08008320

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08008320 	.word	0x08008320

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <_ZN5MotorC1Eh>:
 *      Author: Moraes
 */

#include "Motor.hpp"

Motor::Motor (uint8_t motorId){
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	70fb      	strb	r3, [r7, #3]
	Pwm_Max = TIM8->ARR;
 80004cc:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <_ZN5MotorC1Eh+0xe0>)
 80004ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	619a      	str	r2, [r3, #24]
	switch(motorId){
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d859      	bhi.n	800058e <_ZN5MotorC1Eh+0xce>
 80004da:	a201      	add	r2, pc, #4	; (adr r2, 80004e0 <_ZN5MotorC1Eh+0x20>)
 80004dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e0:	080004f1 	.word	0x080004f1
 80004e4:	08000519 	.word	0x08000519
 80004e8:	0800053f 	.word	0x0800053f
 80004ec:	08000565 	.word	0x08000565
		case 0:
		{
			MAL_GPIO_Port = M0_MAL_GPIO_Port;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a2c      	ldr	r2, [pc, #176]	; (80005a4 <_ZN5MotorC1Eh+0xe4>)
 80004f4:	601a      	str	r2, [r3, #0]
			MBL_GPIO_Port = M0_MBL_GPIO_Port;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <_ZN5MotorC1Eh+0xe8>)
 80004fa:	605a      	str	r2, [r3, #4]
			MAL_Pin = M0_MAL_Pin;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	811a      	strh	r2, [r3, #8]
			MBL_Pin = M0_MBL_Pin;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000508:	815a      	strh	r2, [r3, #10]
			MAH_Pwm = &(TIM8->CCR4);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a27      	ldr	r2, [pc, #156]	; (80005ac <_ZN5MotorC1Eh+0xec>)
 800050e:	60da      	str	r2, [r3, #12]
			MBH_Pwm = &(TIM8->CCR2);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a27      	ldr	r2, [pc, #156]	; (80005b0 <_ZN5MotorC1Eh+0xf0>)
 8000514:	611a      	str	r2, [r3, #16]
			break;
 8000516:	e03b      	b.n	8000590 <_ZN5MotorC1Eh+0xd0>
		}
		case 1:
		{
			MAL_GPIO_Port = M1_MAL_GPIO_Port;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <_ZN5MotorC1Eh+0xf4>)
 800051c:	601a      	str	r2, [r3, #0]
			MBL_GPIO_Port = M1_MBL_GPIO_Port;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <_ZN5MotorC1Eh+0xf4>)
 8000522:	605a      	str	r2, [r3, #4]
			MAL_Pin = M1_MAL_Pin;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2240      	movs	r2, #64	; 0x40
 8000528:	811a      	strh	r2, [r3, #8]
			MBL_Pin = M1_MBL_Pin;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2210      	movs	r2, #16
 800052e:	815a      	strh	r2, [r3, #10]
			MAH_Pwm = &(TIM1->CCR1);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <_ZN5MotorC1Eh+0xf8>)
 8000534:	60da      	str	r2, [r3, #12]
			MBH_Pwm = &(TIM8->CCR3);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a20      	ldr	r2, [pc, #128]	; (80005bc <_ZN5MotorC1Eh+0xfc>)
 800053a:	611a      	str	r2, [r3, #16]
			break;
 800053c:	e028      	b.n	8000590 <_ZN5MotorC1Eh+0xd0>
		}

		case 2:
		{
			MAL_GPIO_Port = M2_MAL_GPIO_Port;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <_ZN5MotorC1Eh+0xe8>)
 8000542:	601a      	str	r2, [r3, #0]
			MBL_GPIO_Port = M2_MBL_GPIO_Port;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <_ZN5MotorC1Eh+0x100>)
 8000548:	605a      	str	r2, [r3, #4]
			MAL_Pin = M2_MAL_Pin;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2204      	movs	r2, #4
 800054e:	811a      	strh	r2, [r3, #8]
			MBL_Pin = M2_MBL_Pin;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2202      	movs	r2, #2
 8000554:	815a      	strh	r2, [r3, #10]
			MAH_Pwm = &(TIM8->CCR1);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a1a      	ldr	r2, [pc, #104]	; (80005c4 <_ZN5MotorC1Eh+0x104>)
 800055a:	60da      	str	r2, [r3, #12]
			MBH_Pwm = &(TIM1->CCR2);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a1a      	ldr	r2, [pc, #104]	; (80005c8 <_ZN5MotorC1Eh+0x108>)
 8000560:	611a      	str	r2, [r3, #16]
			break;
 8000562:	e015      	b.n	8000590 <_ZN5MotorC1Eh+0xd0>
		}
		case 3:
		{
			MAL_GPIO_Port = M3_MAL_GPIO_Port;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <_ZN5MotorC1Eh+0x100>)
 8000568:	601a      	str	r2, [r3, #0]
			MBL_GPIO_Port = M3_MBL_GPIO_Port;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <_ZN5MotorC1Eh+0x100>)
 800056e:	605a      	str	r2, [r3, #4]
			MAL_Pin = M3_MAL_Pin;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000576:	811a      	strh	r2, [r3, #8]
			MBL_Pin = M3_MBL_Pin;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800057e:	815a      	strh	r2, [r3, #10]
			MAH_Pwm = &(TIM1->CCR4);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <_ZN5MotorC1Eh+0x10c>)
 8000584:	60da      	str	r2, [r3, #12]
			MBH_Pwm = &(TIM1->CCR3);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <_ZN5MotorC1Eh+0x110>)
 800058a:	611a      	str	r2, [r3, #16]
			break;
 800058c:	e000      	b.n	8000590 <_ZN5MotorC1Eh+0xd0>
		}
		default:
			break;
 800058e:	bf00      	nop
	}
}
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40010400 	.word	0x40010400
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	40020800 	.word	0x40020800
 80005ac:	40010440 	.word	0x40010440
 80005b0:	40010438 	.word	0x40010438
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010034 	.word	0x40010034
 80005bc:	4001043c 	.word	0x4001043c
 80005c0:	40020400 	.word	0x40020400
 80005c4:	40010434 	.word	0x40010434
 80005c8:	40010038 	.word	0x40010038
 80005cc:	40010040 	.word	0x40010040
 80005d0:	4001003c 	.word	0x4001003c

080005d4 <_ZN5Motor8SetSpeedEl>:




void Motor::SetSpeed(int32_t spd){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	if(spd>0){
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	dd1c      	ble.n	800061e <_ZN5Motor8SetSpeedEl+0x4a>
		*MAH_Pwm = Pwm_Max - spd; //MAH
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6999      	ldr	r1, [r3, #24]
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	1a8a      	subs	r2, r1, r2
 80005f0:	601a      	str	r2, [r3, #0]
		*MBH_Pwm = Pwm_Max; //MBH
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	6992      	ldr	r2, [r2, #24]
 80005fa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(MAL_GPIO_Port, MAL_Pin, GPIO_PinState(RESET));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	891b      	ldrh	r3, [r3, #8]
 8000604:	2200      	movs	r2, #0
 8000606:	4619      	mov	r1, r3
 8000608:	f001 fac2 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MBL_GPIO_Port, MBL_Pin, GPIO_PinState(SET));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6858      	ldr	r0, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	895b      	ldrh	r3, [r3, #10]
 8000614:	2201      	movs	r2, #1
 8000616:	4619      	mov	r1, r3
 8000618:	f001 faba 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MAL_GPIO_Port, MAL_Pin, GPIO_PinState(SET));
		HAL_GPIO_WritePin(MBL_GPIO_Port, MBL_Pin, GPIO_PinState(SET));
	}


}
 800061c:	e039      	b.n	8000692 <_ZN5Motor8SetSpeedEl+0xbe>
	}else if(spd<0){
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	da1c      	bge.n	800065e <_ZN5Motor8SetSpeedEl+0x8a>
		*MAH_Pwm = Pwm_Max; //MAH
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	6992      	ldr	r2, [r2, #24]
 800062c:	601a      	str	r2, [r3, #0]
		*MBH_Pwm = Pwm_Max + spd; //MBH
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6999      	ldr	r1, [r3, #24]
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	440a      	add	r2, r1
 800063a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(MAL_GPIO_Port, MAL_Pin, GPIO_PinState(SET));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	891b      	ldrh	r3, [r3, #8]
 8000644:	2201      	movs	r2, #1
 8000646:	4619      	mov	r1, r3
 8000648:	f001 faa2 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MBL_GPIO_Port, MBL_Pin, GPIO_PinState(RESET));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6858      	ldr	r0, [r3, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	895b      	ldrh	r3, [r3, #10]
 8000654:	2200      	movs	r2, #0
 8000656:	4619      	mov	r1, r3
 8000658:	f001 fa9a 	bl	8001b90 <HAL_GPIO_WritePin>
}
 800065c:	e019      	b.n	8000692 <_ZN5Motor8SetSpeedEl+0xbe>
		*MAH_Pwm = Pwm_Max; //MAH
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	6992      	ldr	r2, [r2, #24]
 8000666:	601a      	str	r2, [r3, #0]
		*MBH_Pwm = Pwm_Max; //MBH
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	6992      	ldr	r2, [r2, #24]
 8000670:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(MAL_GPIO_Port, MAL_Pin, GPIO_PinState(SET));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	891b      	ldrh	r3, [r3, #8]
 800067a:	2201      	movs	r2, #1
 800067c:	4619      	mov	r1, r3
 800067e:	f001 fa87 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MBL_GPIO_Port, MBL_Pin, GPIO_PinState(SET));
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6858      	ldr	r0, [r3, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	895b      	ldrh	r3, [r3, #10]
 800068a:	2201      	movs	r2, #1
 800068c:	4619      	mov	r1, r3
 800068e:	f001 fa7f 	bl	8001b90 <HAL_GPIO_WritePin>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <_ZN5Motor10SetDribbleEl>:

void Motor::SetDribble(int32_t spd){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	//*DAH_Pwm = Pwm_Max - spd; //O drible só tem um pino
	TIM9->CCR1 = Pwm_Max - spd;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	699a      	ldr	r2, [r3, #24]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	4904      	ldr	r1, [pc, #16]	; (80006c0 <_ZN5Motor10SetDribbleEl+0x24>)
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	634b      	str	r3, [r1, #52]	; 0x34
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40014000 	.word	0x40014000

080006c4 <_ZN15sendUSBStruct_tC1Ev>:
	uint32_t sevSeg;
	uint32_t kickPow_s;
	uint32_t kickPow[2];
}*recvUSBStruct;

struct sendUSBStruct_t{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2204      	movs	r2, #4
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3304      	adds	r3, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <Start>:
struct usbStruct_t{
	int32_t val1;
	int32_t val2;
}usbStruct;

void Start(){
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b09f      	sub	sp, #124	; 0x7c
 80006f4:	af00      	add	r7, sp, #0
	Motor motor[4] = {Motor(0), Motor(1), Motor(2), Motor(3)};
 80006f6:	1d3c      	adds	r4, r7, #4
 80006f8:	2100      	movs	r1, #0
 80006fa:	4620      	mov	r0, r4
 80006fc:	f7ff fee0 	bl	80004c0 <_ZN5MotorC1Eh>
 8000700:	341c      	adds	r4, #28
 8000702:	2101      	movs	r1, #1
 8000704:	4620      	mov	r0, r4
 8000706:	f7ff fedb 	bl	80004c0 <_ZN5MotorC1Eh>
 800070a:	341c      	adds	r4, #28
 800070c:	2102      	movs	r1, #2
 800070e:	4620      	mov	r0, r4
 8000710:	f7ff fed6 	bl	80004c0 <_ZN5MotorC1Eh>
 8000714:	f104 031c 	add.w	r3, r4, #28
 8000718:	2103      	movs	r1, #3
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fed0 	bl	80004c0 <_ZN5MotorC1Eh>
	while(1){
		usbStruct.val1 = 100;
 8000720:	4b39      	ldr	r3, [pc, #228]	; (8000808 <Start+0x118>)
 8000722:	2264      	movs	r2, #100	; 0x64
 8000724:	601a      	str	r2, [r3, #0]
		usbStruct.val2 = 101;
 8000726:	4b38      	ldr	r3, [pc, #224]	; (8000808 <Start+0x118>)
 8000728:	2265      	movs	r2, #101	; 0x65
 800072a:	605a      	str	r2, [r3, #4]
		motor[0].SetDribble(recvUSBStruct->dribbleSpd);
 800072c:	4b37      	ldr	r3, [pc, #220]	; (800080c <Start+0x11c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ffb0 	bl	800069c <_ZN5Motor10SetDribbleEl>
		for(int i=0;i<4;i++){
 800073c:	2300      	movs	r3, #0
 800073e:	677b      	str	r3, [r7, #116]	; 0x74
 8000740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000742:	2b03      	cmp	r3, #3
 8000744:	dc13      	bgt.n	800076e <Start+0x7e>
			motor[i].SetSpeed(recvUSBStruct->motorSpd[i]);
 8000746:	1d39      	adds	r1, r7, #4
 8000748:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800074a:	4613      	mov	r3, r2
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	18c8      	adds	r0, r1, r3
 8000754:	4b2d      	ldr	r3, [pc, #180]	; (800080c <Start+0x11c>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	4619      	mov	r1, r3
 8000762:	f7ff ff37 	bl	80005d4 <_ZN5Motor8SetSpeedEl>
		for(int i=0;i<4;i++){
 8000766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000768:	3301      	adds	r3, #1
 800076a:	677b      	str	r3, [r7, #116]	; 0x74
 800076c:	e7e8      	b.n	8000740 <Start+0x50>
		}
		sendUSBStruct.button = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800076e:	2101      	movs	r1, #1
 8000770:	4827      	ldr	r0, [pc, #156]	; (8000810 <Start+0x120>)
 8000772:	f001 f9f5 	bl	8001b60 <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <Start+0x124>)
 800077c:	615a      	str	r2, [r3, #20]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PinState(recvUSBStruct->led & 1));
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <Start+0x11c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4821      	ldr	r0, [pc, #132]	; (8000818 <Start+0x128>)
 8000794:	f001 f9fc 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PinState(recvUSBStruct->led & 2));
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <Start+0x11c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ac:	481a      	ldr	r0, [pc, #104]	; (8000818 <Start+0x128>)
 80007ae:	f001 f9ef 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PinState(recvUSBStruct->led & 4));
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <Start+0x11c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	461a      	mov	r2, r3
 80007c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c6:	4814      	ldr	r0, [pc, #80]	; (8000818 <Start+0x128>)
 80007c8:	f001 f9e2 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PinState(recvUSBStruct->led & 8));
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <Start+0x11c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	f003 0308 	and.w	r3, r3, #8
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <Start+0x128>)
 80007e2:	f001 f9d5 	bl	8001b90 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fec6 	bl	8001578 <HAL_Delay>
		while(CDC_Transmit_FS((uint8_t*)&sendUSBStruct, 24) == USBD_BUSY);
 80007ec:	2118      	movs	r1, #24
 80007ee:	4809      	ldr	r0, [pc, #36]	; (8000814 <Start+0x124>)
 80007f0:	f007 f900 	bl	80079f4 <CDC_Transmit_FS>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	bf0c      	ite	eq
 80007fa:	2301      	moveq	r3, #1
 80007fc:	2300      	movne	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d08d      	beq.n	8000720 <Start+0x30>
 8000804:	e7f2      	b.n	80007ec <Start+0xfc>
 8000806:	bf00      	nop
 8000808:	200001b8 	.word	0x200001b8
 800080c:	2000019c 	.word	0x2000019c
 8000810:	40020000 	.word	0x40020000
 8000814:	200001a0 	.word	0x200001a0
 8000818:	40020c00 	.word	0x40020c00

0800081c <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d107      	bne.n	800083c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	4293      	cmp	r3, r2
 8000834:	d102      	bne.n	800083c <_Z41__static_initialization_and_destruction_0ii+0x20>
}sendUSBStruct;
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000838:	f7ff ff44 	bl	80006c4 <_ZN15sendUSBStruct_tC1Ev>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001a0 	.word	0x200001a0

08000848 <_GLOBAL__sub_I_recvUSBStruct>:
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
 800084c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff ffe3 	bl	800081c <_Z41__static_initialization_and_destruction_0ii>
 8000856:	bd80      	pop	{r7, pc}

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fe1a 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f848 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f000 faaa 	bl	8000dbc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000868:	f000 f8ae 	bl	80009c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800086c:	f000 f910 	bl	8000a90 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000870:	f006 fffe 	bl	8007870 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 8000874:	f000 f8d6 	bl	8000a24 <MX_SPI2_Init>
  MX_TIM8_Init();
 8000878:	f000 f9b2 	bl	8000be0 <MX_TIM8_Init>
  MX_TIM9_Init();
 800087c:	f000 fa58 	bl	8000d30 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000880:	4819      	ldr	r0, [pc, #100]	; (80008e8 <main+0x90>)
 8000882:	f003 fa6f 	bl	8003d64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 8000886:	2100      	movs	r1, #0
 8000888:	4817      	ldr	r0, [pc, #92]	; (80008e8 <main+0x90>)
 800088a:	f003 fb2b 	bl	8003ee4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_2);
 800088e:	2104      	movs	r1, #4
 8000890:	4815      	ldr	r0, [pc, #84]	; (80008e8 <main+0x90>)
 8000892:	f003 fb27 	bl	8003ee4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_3);
 8000896:	2108      	movs	r1, #8
 8000898:	4813      	ldr	r0, [pc, #76]	; (80008e8 <main+0x90>)
 800089a:	f003 fb23 	bl	8003ee4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_4);
 800089e:	210c      	movs	r1, #12
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <main+0x90>)
 80008a2:	f003 fb1f 	bl	8003ee4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 80008a6:	4811      	ldr	r0, [pc, #68]	; (80008ec <main+0x94>)
 80008a8:	f003 fa5c 	bl	8003d64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_1);
 80008ac:	2100      	movs	r1, #0
 80008ae:	480f      	ldr	r0, [pc, #60]	; (80008ec <main+0x94>)
 80008b0:	f003 fb18 	bl	8003ee4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_2);
 80008b4:	2104      	movs	r1, #4
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <main+0x94>)
 80008b8:	f003 fb14 	bl	8003ee4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_3);
 80008bc:	2108      	movs	r1, #8
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <main+0x94>)
 80008c0:	f003 fb10 	bl	8003ee4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8,TIM_CHANNEL_4);
 80008c4:	210c      	movs	r1, #12
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <main+0x94>)
 80008c8:	f003 fb0c 	bl	8003ee4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 80008cc:	4808      	ldr	r0, [pc, #32]	; (80008f0 <main+0x98>)
 80008ce:	f003 fa49 	bl	8003d64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim9,TIM_CHANNEL_1);
 80008d2:	2100      	movs	r1, #0
 80008d4:	4806      	ldr	r0, [pc, #24]	; (80008f0 <main+0x98>)
 80008d6:	f003 fb05 	bl	8003ee4 <HAL_TIM_PWM_Start_IT>
  TIM1->CCR4 = 65535;
  TIM8->CCR1 = 65535;
  TIM8->CCR2 = 65535;
  TIM8->CCR3 = 65535;
  TIM8->CCR4 = 65535;*/
  HAL_Delay(1000);
 80008da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008de:	f000 fe4b 	bl	8001578 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Start();
 80008e2:	f7ff ff05 	bl	80006f0 <Start>
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <main+0x8e>
 80008e8:	200004d8 	.word	0x200004d8
 80008ec:	2000043c 	.word	0x2000043c
 80008f0:	20000520 	.word	0x20000520

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f007 fd04 	bl	8008310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <SystemClock_Config+0xcc>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <SystemClock_Config+0xcc>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <SystemClock_Config+0xd0>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <SystemClock_Config+0xd0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000964:	2308      	movs	r3, #8
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000968:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096e:	2302      	movs	r3, #2
 8000970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000972:	2307      	movs	r3, #7
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	4618      	mov	r0, r3
 800097c:	f002 fbea 	bl	8003154 <HAL_RCC_OscConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000986:	f000 fb43 	bl	8001010 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000996:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800099a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2105      	movs	r1, #5
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fe4b 	bl	8003644 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009b4:	f000 fb2c 	bl	8001010 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	; 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <MX_I2C1_Init+0x54>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009d4:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x58>)
 80009d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_I2C1_Init+0x50>)
 8000a06:	f001 f8dd 	bl	8001bc4 <HAL_I2C_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a10:	f000 fafe 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000484 	.word	0x20000484
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	000186a0 	.word	0x000186a0

08000a24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a2a:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <MX_SPI2_Init+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a58:	2220      	movs	r2, #32
 8000a5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_SPI2_Init+0x64>)
 8000a76:	f002 ffcd 	bl	8003a14 <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a80:	f000 fac6 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200003e4 	.word	0x200003e4
 8000a8c:	40003800 	.word	0x40003800

08000a90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b092      	sub	sp, #72	; 0x48
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
 8000ab0:	615a      	str	r2, [r3, #20]
 8000ab2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f007 fc28 	bl	8008310 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac0:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000ac2:	4a46      	ldr	r2, [pc, #280]	; (8000bdc <MX_TIM1_Init+0x14c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ac6:	4b44      	ldr	r3, [pc, #272]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ad2:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b3f      	ldr	r3, [pc, #252]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aec:	483a      	ldr	r0, [pc, #232]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000aee:	f003 f9a9 	bl	8003e44 <HAL_TIM_PWM_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000af8:	f000 fa8a 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4833      	ldr	r0, [pc, #204]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000b0c:	f003 fe2c 	bl	8004768 <HAL_TIMEx_MasterConfigSynchronization>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b16:	f000 fa7b 	bl	8001010 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1a:	2360      	movs	r3, #96	; 0x60
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4826      	ldr	r0, [pc, #152]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000b40:	f003 fade 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000b4a:	f000 fa61 	bl	8001010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	2204      	movs	r2, #4
 8000b54:	4619      	mov	r1, r3
 8000b56:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000b58:	f003 fad2 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b62:	f000 fa55 	bl	8001010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481a      	ldr	r0, [pc, #104]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000b70:	f003 fac6 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000b7a:	f000 fa49 	bl	8001010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	220c      	movs	r2, #12
 8000b84:	4619      	mov	r1, r3
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000b88:	f003 faba 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000b92:	f000 fa3d 	bl	8001010 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000bba:	f003 fe51 	bl	8004860 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000bc4:	f000 fa24 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM1_Init+0x148>)
 8000bca:	f000 fb37 	bl	800123c <HAL_TIM_MspPostInit>

}
 8000bce:	bf00      	nop
 8000bd0:	3748      	adds	r7, #72	; 0x48
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200004d8 	.word	0x200004d8
 8000bdc:	40010000 	.word	0x40010000

08000be0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b092      	sub	sp, #72	; 0x48
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]
 8000c02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2220      	movs	r2, #32
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f007 fb80 	bl	8008310 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c10:	4b45      	ldr	r3, [pc, #276]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000c12:	4a46      	ldr	r2, [pc, #280]	; (8000d2c <MX_TIM8_Init+0x14c>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c16:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c22:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c28:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c30:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b3c      	ldr	r3, [pc, #240]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000c3c:	483a      	ldr	r0, [pc, #232]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000c3e:	f003 f901 	bl	8003e44 <HAL_TIM_PWM_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000c48:	f000 f9e2 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4833      	ldr	r0, [pc, #204]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000c5c:	f003 fd84 	bl	8004768 <HAL_TIMEx_MasterConfigSynchronization>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000c66:	f000 f9d3 	bl	8001010 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6a:	2360      	movs	r3, #96	; 0x60
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4826      	ldr	r0, [pc, #152]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000c90:	f003 fa36 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000c9a:	f000 f9b9 	bl	8001010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4820      	ldr	r0, [pc, #128]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000ca8:	f003 fa2a 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8000cb2:	f000 f9ad 	bl	8001010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481a      	ldr	r0, [pc, #104]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000cc0:	f003 fa1e 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8000cca:	f000 f9a1 	bl	8001010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4814      	ldr	r0, [pc, #80]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000cd8:	f003 fa12 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000ce2:	f000 f995 	bl	8001010 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000d0a:	f003 fda9 	bl	8004860 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8000d14:	f000 f97c 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_TIM8_Init+0x148>)
 8000d1a:	f000 fa8f 	bl	800123c <HAL_TIM_MspPostInit>

}
 8000d1e:	bf00      	nop
 8000d20:	3748      	adds	r7, #72	; 0x48
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000043c 	.word	0x2000043c
 8000d2c:	40010400 	.word	0x40010400

08000d30 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]
 8000d46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_TIM9_Init+0x84>)
 8000d4a:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <MX_TIM9_Init+0x88>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_TIM9_Init+0x84>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_TIM9_Init+0x84>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_TIM9_Init+0x84>)
 8000d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d60:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_TIM9_Init+0x84>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_TIM9_Init+0x84>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <MX_TIM9_Init+0x84>)
 8000d70:	f003 f868 	bl	8003e44 <HAL_TIM_PWM_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000d7a:	f000 f949 	bl	8001010 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7e:	2360      	movs	r3, #96	; 0x60
 8000d80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 65535;
 8000d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	4619      	mov	r1, r3
 8000d96:	4807      	ldr	r0, [pc, #28]	; (8000db4 <MX_TIM9_Init+0x84>)
 8000d98:	f003 f9b2 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8000da2:	f000 f935 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <MX_TIM9_Init+0x84>)
 8000da8:	f000 fa48 	bl	800123c <HAL_TIM_MspPostInit>

}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000520 	.word	0x20000520
 8000db8:	40014000 	.word	0x40014000

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	; 0x30
 8000dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	4b87      	ldr	r3, [pc, #540]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a86      	ldr	r2, [pc, #536]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b84      	ldr	r3, [pc, #528]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	4b80      	ldr	r3, [pc, #512]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a7f      	ldr	r2, [pc, #508]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b7d      	ldr	r3, [pc, #500]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b79      	ldr	r3, [pc, #484]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a78      	ldr	r2, [pc, #480]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b76      	ldr	r3, [pc, #472]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b72      	ldr	r3, [pc, #456]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a71      	ldr	r2, [pc, #452]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b6f      	ldr	r3, [pc, #444]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b6b      	ldr	r3, [pc, #428]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a6a      	ldr	r2, [pc, #424]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b68      	ldr	r3, [pc, #416]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b64      	ldr	r3, [pc, #400]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a63      	ldr	r2, [pc, #396]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b61      	ldr	r3, [pc, #388]	; (8000ff4 <MX_GPIO_Init+0x238>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|M1_MBL_Pin|M1_MAL_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2158      	movs	r1, #88	; 0x58
 8000e7e:	485e      	ldr	r0, [pc, #376]	; (8000ff8 <MX_GPIO_Init+0x23c>)
 8000e80:	f000 fe86 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M0_MBL_Pin|M2_MAL_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f242 0104 	movw	r1, #8196	; 0x2004
 8000e8a:	485c      	ldr	r0, [pc, #368]	; (8000ffc <MX_GPIO_Init+0x240>)
 8000e8c:	f000 fe80 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2101      	movs	r1, #1
 8000e94:	4859      	ldr	r0, [pc, #356]	; (8000ffc <MX_GPIO_Init+0x240>)
 8000e96:	f000 fe7b 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f641 0102 	movw	r1, #6146	; 0x1802
 8000ea0:	4857      	ldr	r0, [pc, #348]	; (8001000 <MX_GPIO_Init+0x244>)
 8000ea2:	f000 fe75 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f24f 0190 	movw	r1, #61584	; 0xf090
 8000eac:	4855      	ldr	r0, [pc, #340]	; (8001004 <MX_GPIO_Init+0x248>)
 8000eae:	f000 fe6f 	bl	8001b90 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|M0_MAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin M1_MBL_Pin M1_MAL_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|M1_MBL_Pin|M1_MAL_Pin;
 8000eb2:	2358      	movs	r3, #88	; 0x58
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	484b      	ldr	r0, [pc, #300]	; (8000ff8 <MX_GPIO_Init+0x23c>)
 8000eca:	f000 fcad 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_MBL_Pin OTG_FS_PowerSwitchOn_Pin M2_MAL_Pin */
  GPIO_InitStruct.Pin = M0_MBL_Pin|OTG_FS_PowerSwitchOn_Pin|M2_MAL_Pin;
 8000ece:	f242 0305 	movw	r3, #8197	; 0x2005
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4845      	ldr	r0, [pc, #276]	; (8000ffc <MX_GPIO_Init+0x240>)
 8000ee8:	f000 fc9e 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000eec:	2308      	movs	r3, #8
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efc:	2305      	movs	r3, #5
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	483d      	ldr	r0, [pc, #244]	; (8000ffc <MX_GPIO_Init+0x240>)
 8000f08:	f000 fc8e 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f10:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <MX_GPIO_Init+0x24c>)
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	483b      	ldr	r0, [pc, #236]	; (800100c <MX_GPIO_Init+0x250>)
 8000f20:	f000 fc82 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f24:	23e0      	movs	r3, #224	; 0xe0
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f34:	2305      	movs	r3, #5
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4833      	ldr	r0, [pc, #204]	; (800100c <MX_GPIO_Init+0x250>)
 8000f40:	f000 fc72 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_MBL_Pin M3_MBL_Pin M3_MAL_Pin */
  GPIO_InitStruct.Pin = M2_MBL_Pin|M3_MBL_Pin|M3_MAL_Pin;
 8000f44:	f641 0302 	movw	r3, #6146	; 0x1802
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4828      	ldr	r0, [pc, #160]	; (8001000 <MX_GPIO_Init+0x244>)
 8000f5e:	f000 fc63 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f62:	2304      	movs	r3, #4
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4822      	ldr	r0, [pc, #136]	; (8001000 <MX_GPIO_Init+0x244>)
 8000f76:	f000 fc57 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	481a      	ldr	r0, [pc, #104]	; (8001000 <MX_GPIO_Init+0x244>)
 8000f98:	f000 fc46 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin M0_MAL_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f9c:	f24f 0390 	movw	r3, #61584	; 0xf090
 8000fa0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|M0_MAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_GPIO_Init+0x248>)
 8000fb6:	f000 fc37 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_GPIO_Init+0x248>)
 8000fce:	f000 fc2b 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_GPIO_Init+0x24c>)
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_GPIO_Init+0x23c>)
 8000fe6:	f000 fc1f 	bl	8001828 <HAL_GPIO_Init>

}
 8000fea:	bf00      	nop
 8000fec:	3730      	adds	r7, #48	; 0x30
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020400 	.word	0x40020400
 8001004:	40020c00 	.word	0x40020c00
 8001008:	10120000 	.word	0x10120000
 800100c:	40020000 	.word	0x40020000

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <HAL_MspInit+0x4c>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_MspInit+0x4c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_MspInit+0x4c>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_MspInit+0x4c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800105e:	2007      	movs	r0, #7
 8001060:	f000 fb7e 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_I2C_MspInit+0x84>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12c      	bne.n	80010ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80010ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b4:	2312      	movs	r3, #18
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c0:	2304      	movs	r3, #4
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <HAL_I2C_MspInit+0x8c>)
 80010cc:	f000 fbac 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 80010da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_I2C_MspInit+0x88>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40005400 	.word	0x40005400
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020400 	.word	0x40020400

08001100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_SPI_MspInit+0x94>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d134      	bne.n	800118c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_SPI_MspInit+0x98>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_SPI_MspInit+0x98>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_SPI_MspInit+0x98>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_SPI_MspInit+0x98>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_SPI_MspInit+0x98>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_SPI_MspInit+0x98>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800115a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116c:	2305      	movs	r3, #5
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <HAL_SPI_MspInit+0x9c>)
 8001178:	f000 fb56 	bl	8001828 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2024      	movs	r0, #36	; 0x24
 8001182:	f000 faf8 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001186:	2024      	movs	r0, #36	; 0x24
 8001188:	f000 fb11 	bl	80017ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40003800 	.word	0x40003800
 8001198:	40023800 	.word	0x40023800
 800119c:	40020400 	.word	0x40020400

080011a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1f      	ldr	r2, [pc, #124]	; (800122c <HAL_TIM_PWM_MspInit+0x8c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10e      	bne.n	80011d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_TIM_PWM_MspInit+0x90>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_TIM_PWM_MspInit+0x90>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_TIM_PWM_MspInit+0x90>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80011ce:	e026      	b.n	800121e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_TIM_PWM_MspInit+0x94>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d10e      	bne.n	80011f8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_TIM_PWM_MspInit+0x90>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <HAL_TIM_PWM_MspInit+0x90>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_TIM_PWM_MspInit+0x90>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
}
 80011f6:	e012      	b.n	800121e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM9)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_TIM_PWM_MspInit+0x98>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10d      	bne.n	800121e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_TIM_PWM_MspInit+0x90>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_TIM_PWM_MspInit+0x90>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <HAL_TIM_PWM_MspInit+0x90>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	bf00      	nop
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40010000 	.word	0x40010000
 8001230:	40023800 	.word	0x40023800
 8001234:	40010400 	.word	0x40010400
 8001238:	40014000 	.word	0x40014000

0800123c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a46      	ldr	r2, [pc, #280]	; (8001374 <HAL_TIM_MspPostInit+0x138>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d13e      	bne.n	80012dc <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	4b45      	ldr	r3, [pc, #276]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a44      	ldr	r2, [pc, #272]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b42      	ldr	r3, [pc, #264]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a3d      	ldr	r2, [pc, #244]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M2_MBH_Pin|M3_MBH_Pin|M3_MAH_Pin;
 8001296:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4832      	ldr	r0, [pc, #200]	; (800137c <HAL_TIM_MspPostInit+0x140>)
 80012b4:	f000 fab8 	bl	8001828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1__MAH_Pin;
 80012b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1__MAH_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	482a      	ldr	r0, [pc, #168]	; (8001380 <HAL_TIM_MspPostInit+0x144>)
 80012d6:	f000 faa7 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80012da:	e047      	b.n	800136c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM8)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a28      	ldr	r2, [pc, #160]	; (8001384 <HAL_TIM_MspPostInit+0x148>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d11f      	bne.n	8001326 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a22      	ldr	r2, [pc, #136]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M2_MAH_Pin|M0_MBH_Pin|M1_MBH_Pin|M0_MAH_Pin;
 8001302:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001314:	2303      	movs	r3, #3
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	481a      	ldr	r0, [pc, #104]	; (8001388 <HAL_TIM_MspPostInit+0x14c>)
 8001320:	f000 fa82 	bl	8001828 <HAL_GPIO_Init>
}
 8001324:	e022      	b.n	800136c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM9)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <HAL_TIM_MspPostInit+0x150>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d11d      	bne.n	800136c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_TIM_MspPostInit+0x13c>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DAH_Pin;
 800134c:	2320      	movs	r3, #32
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800135c:	2303      	movs	r3, #3
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DAH_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_TIM_MspPostInit+0x140>)
 8001368:	f000 fa5e 	bl	8001828 <HAL_GPIO_Init>
}
 800136c:	bf00      	nop
 800136e:	3730      	adds	r7, #48	; 0x30
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40010000 	.word	0x40010000
 8001378:	40023800 	.word	0x40023800
 800137c:	40021000 	.word	0x40021000
 8001380:	40020000 	.word	0x40020000
 8001384:	40010400 	.word	0x40010400
 8001388:	40020800 	.word	0x40020800
 800138c:	40014000 	.word	0x40014000

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e4:	f000 f8a8 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <SPI2_IRQHandler+0x10>)
 80013f2:	f002 fb99 	bl	8003b28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200003e4 	.word	0x200003e4

08001400 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <OTG_FS_IRQHandler+0x10>)
 8001406:	f000 fe71 	bl	80020ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20001a3c 	.word	0x20001a3c

08001414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <SystemInit+0x28>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141e:	4a07      	ldr	r2, [pc, #28]	; (800143c <SystemInit+0x28>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <SystemInit+0x28>)
 800142a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800142e:	609a      	str	r2, [r3, #8]
#endif
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001444:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001446:	e003      	b.n	8001450 <LoopCopyDataInit>

08001448 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800144a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800144c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800144e:	3104      	adds	r1, #4

08001450 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001454:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001456:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001458:	d3f6      	bcc.n	8001448 <CopyDataInit>
  ldr  r2, =_sbss
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800145c:	e002      	b.n	8001464 <LoopFillZerobss>

0800145e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800145e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001460:	f842 3b04 	str.w	r3, [r2], #4

08001464 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001466:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001468:	d3f9      	bcc.n	800145e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800146a:	f7ff ffd3 	bl	8001414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146e:	f006 ff2b 	bl	80082c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff f9f1 	bl	8000858 <main>
  bx  lr    
 8001476:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001478:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800147c:	080083ac 	.word	0x080083ac
  ldr  r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001484:	20000180 	.word	0x20000180
  ldr  r2, =_sbss
 8001488:	20000180 	.word	0x20000180
  ldr  r3, = _ebss
 800148c:	20001e44 	.word	0x20001e44

08001490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <HAL_Init+0x40>)
 800149e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_Init+0x40>)
 80014aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_Init+0x40>)
 80014b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f94f 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f000 f808 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c8:	f7ff fdaa 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023c00 	.word	0x40023c00

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x54>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x58>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f967 	bl	80017ca <HAL_SYSTICK_Config>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00e      	b.n	8001524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d80a      	bhi.n	8001522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f000 f92f 	bl	8001776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_InitTick+0x5c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000
 8001530:	20000008 	.word	0x20000008
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	20000568 	.word	0x20000568

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000568 	.word	0x20000568

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff ffee 	bl	8001560 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffde 	bl	8001560 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <__NVIC_EnableIRQ+0x38>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff29 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff3e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff8e 	bl	80016b4 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff31 	bl	8001624 <__NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffa2 	bl	800171c <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d004      	beq.n	8001800 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e00c      	b.n	800181a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2205      	movs	r2, #5
 8001804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0201 	bic.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e16b      	b.n	8001b1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	429a      	cmp	r2, r3
 800185e:	f040 815a 	bne.w	8001b16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d005      	beq.n	800187a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001876:	2b02      	cmp	r3, #2
 8001878:	d130      	bne.n	80018dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0201 	and.w	r2, r3, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d017      	beq.n	8001918 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d123      	bne.n	800196c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	69b9      	ldr	r1, [r7, #24]
 8001968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80b4 	beq.w	8001b16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <HAL_GPIO_Init+0x30c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a5f      	ldr	r2, [pc, #380]	; (8001b34 <HAL_GPIO_Init+0x30c>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b5d      	ldr	r3, [pc, #372]	; (8001b34 <HAL_GPIO_Init+0x30c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ca:	4a5b      	ldr	r2, [pc, #364]	; (8001b38 <HAL_GPIO_Init+0x310>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <HAL_GPIO_Init+0x314>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d02b      	beq.n	8001a4e <HAL_GPIO_Init+0x226>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a51      	ldr	r2, [pc, #324]	; (8001b40 <HAL_GPIO_Init+0x318>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d025      	beq.n	8001a4a <HAL_GPIO_Init+0x222>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a50      	ldr	r2, [pc, #320]	; (8001b44 <HAL_GPIO_Init+0x31c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01f      	beq.n	8001a46 <HAL_GPIO_Init+0x21e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4f      	ldr	r2, [pc, #316]	; (8001b48 <HAL_GPIO_Init+0x320>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x21a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4e      	ldr	r2, [pc, #312]	; (8001b4c <HAL_GPIO_Init+0x324>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x216>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4d      	ldr	r2, [pc, #308]	; (8001b50 <HAL_GPIO_Init+0x328>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	; (8001b54 <HAL_GPIO_Init+0x32c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x20e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4b      	ldr	r2, [pc, #300]	; (8001b58 <HAL_GPIO_Init+0x330>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x20a>
 8001a2e:	2307      	movs	r3, #7
 8001a30:	e00e      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a32:	2308      	movs	r3, #8
 8001a34:	e00c      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e00a      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	e008      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a42:	2303      	movs	r3, #3
 8001a44:	e004      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e002      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	f002 0203 	and.w	r2, r2, #3
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a60:	4935      	ldr	r1, [pc, #212]	; (8001b38 <HAL_GPIO_Init+0x310>)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a92:	4a32      	ldr	r2, [pc, #200]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a98:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001abc:	4a27      	ldr	r2, [pc, #156]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b10:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b0f      	cmp	r3, #15
 8001b20:	f67f ae90 	bls.w	8001844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3724      	adds	r7, #36	; 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40013800 	.word	0x40013800
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40020400 	.word	0x40020400
 8001b44:	40020800 	.word	0x40020800
 8001b48:	40020c00 	.word	0x40020c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40021400 	.word	0x40021400
 8001b54:	40021800 	.word	0x40021800
 8001b58:	40021c00 	.word	0x40021c00
 8001b5c:	40013c00 	.word	0x40013c00

08001b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e001      	b.n	8001b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bac:	e003      	b.n	8001bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	619a      	str	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e12b      	b.n	8001e2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fa40 	bl	8001070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2224      	movs	r2, #36	; 0x24
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c28:	f001 fee0 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8001c2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a81      	ldr	r2, [pc, #516]	; (8001e38 <HAL_I2C_Init+0x274>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d807      	bhi.n	8001c48 <HAL_I2C_Init+0x84>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4a80      	ldr	r2, [pc, #512]	; (8001e3c <HAL_I2C_Init+0x278>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	bf94      	ite	ls
 8001c40:	2301      	movls	r3, #1
 8001c42:	2300      	movhi	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	e006      	b.n	8001c56 <HAL_I2C_Init+0x92>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4a7d      	ldr	r2, [pc, #500]	; (8001e40 <HAL_I2C_Init+0x27c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	bf94      	ite	ls
 8001c50:	2301      	movls	r3, #1
 8001c52:	2300      	movhi	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0e7      	b.n	8001e2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4a78      	ldr	r2, [pc, #480]	; (8001e44 <HAL_I2C_Init+0x280>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	0c9b      	lsrs	r3, r3, #18
 8001c68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a6a      	ldr	r2, [pc, #424]	; (8001e38 <HAL_I2C_Init+0x274>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d802      	bhi.n	8001c98 <HAL_I2C_Init+0xd4>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	3301      	adds	r3, #1
 8001c96:	e009      	b.n	8001cac <HAL_I2C_Init+0xe8>
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	4a69      	ldr	r2, [pc, #420]	; (8001e48 <HAL_I2C_Init+0x284>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	3301      	adds	r3, #1
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	495c      	ldr	r1, [pc, #368]	; (8001e38 <HAL_I2C_Init+0x274>)
 8001cc8:	428b      	cmp	r3, r1
 8001cca:	d819      	bhi.n	8001d00 <HAL_I2C_Init+0x13c>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1e59      	subs	r1, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cda:	1c59      	adds	r1, r3, #1
 8001cdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <HAL_I2C_Init+0x138>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1e59      	subs	r1, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfa:	e051      	b.n	8001da0 <HAL_I2C_Init+0x1dc>
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	e04f      	b.n	8001da0 <HAL_I2C_Init+0x1dc>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d111      	bne.n	8001d2c <HAL_I2C_Init+0x168>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1e58      	subs	r0, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6859      	ldr	r1, [r3, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	440b      	add	r3, r1
 8001d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	e012      	b.n	8001d52 <HAL_I2C_Init+0x18e>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e58      	subs	r0, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	0099      	lsls	r1, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2301      	moveq	r3, #1
 8001d4e:	2300      	movne	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Init+0x196>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e022      	b.n	8001da0 <HAL_I2C_Init+0x1dc>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10e      	bne.n	8001d80 <HAL_I2C_Init+0x1bc>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1e58      	subs	r0, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6859      	ldr	r1, [r3, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	440b      	add	r3, r1
 8001d70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7e:	e00f      	b.n	8001da0 <HAL_I2C_Init+0x1dc>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e58      	subs	r0, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	0099      	lsls	r1, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	6809      	ldr	r1, [r1, #0]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6911      	ldr	r1, [r2, #16]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68d2      	ldr	r2, [r2, #12]
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	000186a0 	.word	0x000186a0
 8001e3c:	001e847f 	.word	0x001e847f
 8001e40:	003d08ff 	.word	0x003d08ff
 8001e44:	431bde83 	.word	0x431bde83
 8001e48:	10624dd3 	.word	0x10624dd3

08001e4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4e:	b08f      	sub	sp, #60	; 0x3c
 8001e50:	af0a      	add	r7, sp, #40	; 0x28
 8001e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e10f      	b.n	800207e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d106      	bne.n	8001e7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f005 ff03 	bl	8007c84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2203      	movs	r2, #3
 8001e82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fe46 	bl	8004b2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	687e      	ldr	r6, [r7, #4]
 8001eaa:	466d      	mov	r5, sp
 8001eac:	f106 0410 	add.w	r4, r6, #16
 8001eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ebc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec0:	1d33      	adds	r3, r6, #4
 8001ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f002 fd1d 	bl	8004904 <USB_CoreInit>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0d0      	b.n	800207e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fe34 	bl	8004b50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e04a      	b.n	8001f84 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	333d      	adds	r3, #61	; 0x3d
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	333c      	adds	r3, #60	; 0x3c
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	b298      	uxth	r0, r3
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	3342      	adds	r3, #66	; 0x42
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	333f      	adds	r3, #63	; 0x3f
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	3344      	adds	r3, #68	; 0x44
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3348      	adds	r3, #72	; 0x48
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	3350      	adds	r3, #80	; 0x50
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	3301      	adds	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3af      	bcc.n	8001eee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e044      	b.n	800201e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	3301      	adds	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d3b5      	bcc.n	8001f94 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	687e      	ldr	r6, [r7, #4]
 8002030:	466d      	mov	r5, sp
 8002032:	f106 0410 	add.w	r4, r6, #16
 8002036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002042:	e885 0003 	stmia.w	r5, {r0, r1}
 8002046:	1d33      	adds	r3, r6, #4
 8002048:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204a:	6838      	ldr	r0, [r7, #0]
 800204c:	f002 fdaa 	bl	8004ba4 <USB_DevInit>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00d      	b.n	800207e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fdf2 	bl	8005c60 <USB_DevDisconnect>

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002086 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_PCD_Start+0x1c>
 800209e:	2302      	movs	r3, #2
 80020a0:	e020      	b.n	80020e4 <HAL_PCD_Start+0x5e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d109      	bne.n	80020c6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 fd1e 	bl	8004b0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 fda2 	bl	8005c1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b08d      	sub	sp, #52	; 0x34
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fe60 	bl	8005dc8 <USB_GetMode>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 839d 	bne.w	800284a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f003 fdc4 	bl	8005ca2 <USB_ReadInterrupts>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8393 	beq.w	8002848 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fdbb 	bl	8005ca2 <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d107      	bne.n	8002146 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f002 0202 	and.w	r2, r2, #2
 8002144:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f003 fda9 	bl	8005ca2 <USB_ReadInterrupts>
 8002150:	4603      	mov	r3, r0
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b10      	cmp	r3, #16
 8002158:	d161      	bne.n	800221e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0210 	bic.w	r2, r2, #16
 8002168:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f003 020f 	and.w	r2, r3, #15
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	3304      	adds	r3, #4
 8002188:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	0c5b      	lsrs	r3, r3, #17
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	2b02      	cmp	r3, #2
 8002194:	d124      	bne.n	80021e0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d035      	beq.n	800220e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	6a38      	ldr	r0, [r7, #32]
 80021b6:	f003 fc0f 	bl	80059d8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c6:	441a      	add	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	699a      	ldr	r2, [r3, #24]
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d8:	441a      	add	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	619a      	str	r2, [r3, #24]
 80021de:	e016      	b.n	800220e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	0c5b      	lsrs	r3, r3, #17
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	2b06      	cmp	r3, #6
 80021ea:	d110      	bne.n	800220e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021f2:	2208      	movs	r2, #8
 80021f4:	4619      	mov	r1, r3
 80021f6:	6a38      	ldr	r0, [r7, #32]
 80021f8:	f003 fbee 	bl	80059d8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002208:	441a      	add	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0210 	orr.w	r2, r2, #16
 800221c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fd3d 	bl	8005ca2 <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002232:	d16e      	bne.n	8002312 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fd43 	bl	8005cc8 <USB_ReadDevAllOutEpInterrupt>
 8002242:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002244:	e062      	b.n	800230c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d057      	beq.n	8002300 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fd68 	bl	8005d30 <USB_ReadDevOutEPInterrupt>
 8002260:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00c      	beq.n	8002286 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	4413      	add	r3, r2
 8002274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002278:	461a      	mov	r2, r3
 800227a:	2301      	movs	r3, #1
 800227c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800227e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fdb1 	bl	8002de8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00c      	beq.n	80022aa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	2308      	movs	r3, #8
 80022a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 feab 	bl	8003000 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c0:	461a      	mov	r2, r3
 80022c2:	2310      	movs	r3, #16
 80022c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	461a      	mov	r2, r3
 80022de:	2320      	movs	r3, #32
 80022e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f8:	461a      	mov	r2, r3
 80022fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	3301      	adds	r3, #1
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230e:	2b00      	cmp	r3, #0
 8002310:	d199      	bne.n	8002246 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fcc3 	bl	8005ca2 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002322:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002326:	f040 80c0 	bne.w	80024aa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f003 fce4 	bl	8005cfc <USB_ReadDevAllInEpInterrupt>
 8002334:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800233a:	e0b2      	b.n	80024a2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80a7 	beq.w	8002496 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f003 fd0a 	bl	8005d6c <USB_ReadDevInEPInterrupt>
 8002358:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d057      	beq.n	8002414 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	2201      	movs	r2, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43db      	mvns	r3, r3
 800237e:	69f9      	ldr	r1, [r7, #28]
 8002380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002384:	4013      	ands	r3, r2
 8002386:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002394:	461a      	mov	r2, r3
 8002396:	2301      	movs	r3, #1
 8002398:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d132      	bne.n	8002408 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3348      	adds	r3, #72	; 0x48
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4403      	add	r3, r0
 80023c2:	3344      	adds	r3, #68	; 0x44
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4419      	add	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4403      	add	r3, r0
 80023d6:	3348      	adds	r3, #72	; 0x48
 80023d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d113      	bne.n	8002408 <HAL_PCD_IRQHandler+0x31c>
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3350      	adds	r3, #80	; 0x50
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002400:	461a      	mov	r2, r3
 8002402:	2101      	movs	r1, #1
 8002404:	f003 fd12 	bl	8005e2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	b2db      	uxtb	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f005 fcc7 	bl	8007da2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800242a:	461a      	mov	r2, r3
 800242c:	2308      	movs	r3, #8
 800242e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002446:	461a      	mov	r2, r3
 8002448:	2310      	movs	r3, #16
 800244a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002462:	461a      	mov	r2, r3
 8002464:	2340      	movs	r3, #64	; 0x40
 8002466:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247e:	461a      	mov	r2, r3
 8002480:	2302      	movs	r3, #2
 8002482:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800248e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fc1b 	bl	8002ccc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	3301      	adds	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f47f af49 	bne.w	800233c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 fbf7 	bl	8005ca2 <USB_ReadInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024be:	d122      	bne.n	8002506 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024e6:	2100      	movs	r1, #0
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fe27 	bl	800313c <HAL_PCDEx_LPM_Callback>
 80024ee:	e002      	b.n	80024f6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f005 fccd 	bl	8007e90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fbc9 	bl	8005ca2 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251a:	d112      	bne.n	8002542 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d102      	bne.n	8002532 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f005 fc89 	bl	8007e44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002540:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fbab 	bl	8005ca2 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002556:	f040 80c7 	bne.w	80026e8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2110      	movs	r1, #16
 8002574:	4618      	mov	r0, r3
 8002576:	f002 fc79 	bl	8004e6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257a:	2300      	movs	r3, #0
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257e:	e056      	b.n	800262e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258c:	461a      	mov	r2, r3
 800258e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002592:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a4:	0151      	lsls	r1, r2, #5
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	440a      	add	r2, r1
 80025aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025b2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c4:	0151      	lsls	r1, r2, #5
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	440a      	add	r2, r1
 80025ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e0:	461a      	mov	r2, r3
 80025e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f8:	0151      	lsls	r1, r2, #5
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	440a      	add	r2, r1
 80025fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002602:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002606:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002618:	0151      	lsls	r1, r2, #5
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	440a      	add	r2, r1
 800261e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002622:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002626:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	3301      	adds	r3, #1
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002634:	429a      	cmp	r2, r3
 8002636:	d3a3      	bcc.n	8002580 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002646:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800264a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	2b00      	cmp	r3, #0
 8002652:	d016      	beq.n	8002682 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002664:	f043 030b 	orr.w	r3, r3, #11
 8002668:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800267a:	f043 030b 	orr.w	r3, r3, #11
 800267e:	6453      	str	r3, [r2, #68]	; 0x44
 8002680:	e015      	b.n	80026ae <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002690:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002694:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002698:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a8:	f043 030b 	orr.w	r3, r3, #11
 80026ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026d2:	461a      	mov	r2, r3
 80026d4:	f003 fbaa 	bl	8005e2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 fad8 	bl	8005ca2 <USB_ReadInterrupts>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fc:	d124      	bne.n	8002748 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f003 fb6e 	bl	8005de4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f002 fc0e 	bl	8004f2e <USB_GetDevSpeed>
 8002712:	4603      	mov	r3, r0
 8002714:	461a      	mov	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681c      	ldr	r4, [r3, #0]
 800271e:	f001 f959 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8002722:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	4620      	mov	r0, r4
 800272e:	f002 f94b 	bl	80049c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f005 fb5d 	bl	8007df2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002746:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f003 faa8 	bl	8005ca2 <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b08      	cmp	r3, #8
 800275a:	d10a      	bne.n	8002772 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f005 fb3a 	bl	8007dd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 0208 	and.w	r2, r2, #8
 8002770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 fa93 	bl	8005ca2 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002786:	d10f      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	b2db      	uxtb	r3, r3
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f005 fb9c 	bl	8007ed0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fa78 	bl	8005ca2 <USB_ReadInterrupts>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027bc:	d10f      	bne.n	80027de <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f005 fb6f 	bl	8007eac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 fa5d 	bl	8005ca2 <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f2:	d10a      	bne.n	800280a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f005 fb7d 	bl	8007ef4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 fa47 	bl	8005ca2 <USB_ReadInterrupts>
 8002814:	4603      	mov	r3, r0
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b04      	cmp	r3, #4
 800281c:	d115      	bne.n	800284a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f005 fb6d 	bl	8007f10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e000      	b.n	800284a <HAL_PCD_IRQHandler+0x75e>
      return;
 8002848:	bf00      	nop
    }
  }
}
 800284a:	3734      	adds	r7, #52	; 0x34
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}

08002850 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_PCD_SetAddress+0x1a>
 8002866:	2302      	movs	r3, #2
 8002868:	e013      	b.n	8002892 <HAL_PCD_SetAddress+0x42>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f003 f9a5 	bl	8005bd2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	4608      	mov	r0, r1
 80028a4:	4611      	mov	r1, r2
 80028a6:	461a      	mov	r2, r3
 80028a8:	4603      	mov	r3, r0
 80028aa:	70fb      	strb	r3, [r7, #3]
 80028ac:	460b      	mov	r3, r1
 80028ae:	803b      	strh	r3, [r7, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	da0f      	bge.n	80028e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	f003 020f 	and.w	r2, r3, #15
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	3338      	adds	r3, #56	; 0x38
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	3304      	adds	r3, #4
 80028d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	705a      	strb	r2, [r3, #1]
 80028de:	e00f      	b.n	8002900 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 020f 	and.w	r2, r3, #15
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	3304      	adds	r3, #4
 80028f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	b2da      	uxtb	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800290c:	883a      	ldrh	r2, [r7, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	78ba      	ldrb	r2, [r7, #2]
 8002916:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	785b      	ldrb	r3, [r3, #1]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d004      	beq.n	800292a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800292a:	78bb      	ldrb	r3, [r7, #2]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d102      	bne.n	8002936 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_PCD_EP_Open+0xaa>
 8002940:	2302      	movs	r3, #2
 8002942:	e00e      	b.n	8002962 <HAL_PCD_EP_Open+0xc8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	4618      	mov	r0, r3
 8002954:	f002 fb10 	bl	8004f78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002960:	7afb      	ldrb	r3, [r7, #11]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297a:	2b00      	cmp	r3, #0
 800297c:	da0f      	bge.n	800299e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	f003 020f 	and.w	r2, r3, #15
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	3338      	adds	r3, #56	; 0x38
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	3304      	adds	r3, #4
 8002994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	705a      	strb	r2, [r3, #1]
 800299c:	e00f      	b.n	80029be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	f003 020f 	and.w	r2, r3, #15
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	3304      	adds	r3, #4
 80029b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_PCD_EP_Close+0x6e>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e00e      	b.n	80029f6 <HAL_PCD_EP_Close+0x8c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 fb4e 	bl	8005088 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	3304      	adds	r3, #4
 8002a26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2200      	movs	r2, #0
 8002a38:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a40:	7afb      	ldrb	r3, [r7, #11]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a5a:	7afb      	ldrb	r3, [r7, #11]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6979      	ldr	r1, [r7, #20]
 8002a72:	f002 fe29 	bl	80056c8 <USB_EP0StartXfer>
 8002a76:	e008      	b.n	8002a8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	6979      	ldr	r1, [r7, #20]
 8002a86:	f002 fbdb 	bl	8005240 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	f003 020f 	and.w	r2, r3, #15
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad4:	7afb      	ldrb	r3, [r7, #11]
 8002ad6:	f003 020f 	and.w	r2, r3, #15
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	3338      	adds	r3, #56	; 0x38
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3304      	adds	r3, #4
 8002aea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2200      	movs	r2, #0
 8002afc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2201      	movs	r2, #1
 8002b02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b04:	7afb      	ldrb	r3, [r7, #11]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	6979      	ldr	r1, [r7, #20]
 8002b36:	f002 fdc7 	bl	80056c8 <USB_EP0StartXfer>
 8002b3a:	e008      	b.n	8002b4e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	6979      	ldr	r1, [r7, #20]
 8002b4a:	f002 fb79 	bl	8005240 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d901      	bls.n	8002b76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e050      	b.n	8002c18 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	da0f      	bge.n	8002b9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	3338      	adds	r3, #56	; 0x38
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	705a      	strb	r2, [r3, #1]
 8002b9c:	e00d      	b.n	8002bba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_PCD_EP_SetStall+0x82>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e01e      	b.n	8002c18 <HAL_PCD_EP_SetStall+0xc0>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68f9      	ldr	r1, [r7, #12]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 ff1e 	bl	8005a2a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	b2d9      	uxtb	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f003 f90f 	bl	8005e2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	f003 020f 	and.w	r2, r3, #15
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d901      	bls.n	8002c3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e042      	b.n	8002cc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da0f      	bge.n	8002c66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	f003 020f 	and.w	r2, r3, #15
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	3338      	adds	r3, #56	; 0x38
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	705a      	strb	r2, [r3, #1]
 8002c64:	e00f      	b.n	8002c86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	f003 020f 	and.w	r2, r3, #15
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_PCD_EP_ClrStall+0x86>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e00e      	b.n	8002cc4 <HAL_PCD_EP_ClrStall+0xa4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68f9      	ldr	r1, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 ff26 	bl	8005b06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	; 0x28
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	3338      	adds	r3, #56	; 0x38
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d901      	bls.n	8002d04 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e06c      	b.n	8002dde <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d902      	bls.n	8002d20 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	3303      	adds	r3, #3
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d28:	e02b      	b.n	8002d82 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d902      	bls.n	8002d46 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3303      	adds	r3, #3
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	68d9      	ldr	r1, [r3, #12]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4603      	mov	r3, r0
 8002d64:	6978      	ldr	r0, [r7, #20]
 8002d66:	f002 fe02 	bl	800596e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	441a      	add	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	441a      	add	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d809      	bhi.n	8002dac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d203      	bcs.n	8002dac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1be      	bne.n	8002d2a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d811      	bhi.n	8002ddc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	6939      	ldr	r1, [r7, #16]
 8002dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dd8:	4013      	ands	r3, r2
 8002dda:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	333c      	adds	r3, #60	; 0x3c
 8002e00:	3304      	adds	r3, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	f040 80a0 	bne.w	8002f60 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d015      	beq.n	8002e56 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a72      	ldr	r2, [pc, #456]	; (8002ff8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	f240 80dd 	bls.w	8002fee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80d7 	beq.w	8002fee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e52:	6093      	str	r3, [r2, #8]
 8002e54:	e0cb      	b.n	8002fee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2320      	movs	r3, #32
 8002e70:	6093      	str	r3, [r2, #8]
 8002e72:	e0bc      	b.n	8002fee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 80b7 	bne.w	8002fee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a5d      	ldr	r2, [pc, #372]	; (8002ff8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d90f      	bls.n	8002ea8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea4:	6093      	str	r3, [r2, #8]
 8002ea6:	e0a2      	b.n	8002fee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002eba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	0159      	lsls	r1, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002ece:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4403      	add	r3, r0
 8002ede:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ee2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ef6:	6819      	ldr	r1, [r3, #0]
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4403      	add	r3, r0
 8002f06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4419      	add	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4403      	add	r3, r0
 8002f1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f20:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d114      	bne.n	8002f52 <PCD_EP_OutXfrComplete_int+0x16a>
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d108      	bne.n	8002f52 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	f002 ff6d 	bl	8005e2c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	4619      	mov	r1, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f004 ff07 	bl	8007d6c <HAL_PCD_DataOutStageCallback>
 8002f5e:	e046      	b.n	8002fee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <PCD_EP_OutXfrComplete_int+0x214>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d124      	bne.n	8002fb2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f84:	6093      	str	r3, [r2, #8]
 8002f86:	e032      	b.n	8002fee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f004 fede 	bl	8007d6c <HAL_PCD_DataOutStageCallback>
 8002fb0:	e01d      	b.n	8002fee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d114      	bne.n	8002fe2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d108      	bne.n	8002fe2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2100      	movs	r1, #0
 8002fde:	f002 ff25 	bl	8005e2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f004 febf 	bl	8007d6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	4f54300a 	.word	0x4f54300a
 8002ffc:	4f54310a 	.word	0x4f54310a

08003000 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	333c      	adds	r3, #60	; 0x3c
 8003018:	3304      	adds	r3, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a15      	ldr	r2, [pc, #84]	; (8003088 <PCD_EP_OutSetupPacket_int+0x88>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d90e      	bls.n	8003054 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800303c:	2b00      	cmp	r3, #0
 800303e:	d009      	beq.n	8003054 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304c:	461a      	mov	r2, r3
 800304e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003052:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f004 fe77 	bl	8007d48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <PCD_EP_OutSetupPacket_int+0x88>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d90c      	bls.n	800307c <PCD_EP_OutSetupPacket_int+0x7c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d108      	bne.n	800307c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003074:	461a      	mov	r2, r3
 8003076:	2101      	movs	r1, #1
 8003078:	f002 fed8 	bl	8005e2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	4f54300a 	.word	0x4f54300a

0800308c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
 8003098:	4613      	mov	r3, r2
 800309a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d107      	bne.n	80030ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030aa:	883b      	ldrh	r3, [r7, #0]
 80030ac:	0419      	lsls	r1, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
 80030b8:	e028      	b.n	800310c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	4413      	add	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e00d      	b.n	80030ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	3340      	adds	r3, #64	; 0x40
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4413      	add	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	3301      	adds	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d3ec      	bcc.n	80030ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030f4:	883b      	ldrh	r3, [r7, #0]
 80030f6:	0418      	lsls	r0, r3, #16
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	3b01      	subs	r3, #1
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	4302      	orrs	r2, r0
 8003104:	3340      	adds	r3, #64	; 0x40
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	887a      	ldrh	r2, [r7, #2]
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e264      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d075      	beq.n	800325e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003172:	4ba3      	ldr	r3, [pc, #652]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b04      	cmp	r3, #4
 800317c:	d00c      	beq.n	8003198 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317e:	4ba0      	ldr	r3, [pc, #640]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003186:	2b08      	cmp	r3, #8
 8003188:	d112      	bne.n	80031b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4b9d      	ldr	r3, [pc, #628]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003196:	d10b      	bne.n	80031b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003198:	4b99      	ldr	r3, [pc, #612]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d05b      	beq.n	800325c <HAL_RCC_OscConfig+0x108>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d157      	bne.n	800325c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e23f      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d106      	bne.n	80031c8 <HAL_RCC_OscConfig+0x74>
 80031ba:	4b91      	ldr	r3, [pc, #580]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a90      	ldr	r2, [pc, #576]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e01d      	b.n	8003204 <HAL_RCC_OscConfig+0xb0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x98>
 80031d2:	4b8b      	ldr	r3, [pc, #556]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a8a      	ldr	r2, [pc, #552]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b88      	ldr	r3, [pc, #544]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a87      	ldr	r2, [pc, #540]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0xb0>
 80031ec:	4b84      	ldr	r3, [pc, #528]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a83      	ldr	r2, [pc, #524]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b81      	ldr	r3, [pc, #516]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a80      	ldr	r2, [pc, #512]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d013      	beq.n	8003234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe f9a8 	bl	8001560 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe f9a4 	bl	8001560 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e204      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b76      	ldr	r3, [pc, #472]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0xc0>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe f994 	bl	8001560 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800323c:	f7fe f990 	bl	8001560 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e1f0      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	4b6c      	ldr	r3, [pc, #432]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0xe8>
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d063      	beq.n	8003332 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326a:	4b65      	ldr	r3, [pc, #404]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003276:	4b62      	ldr	r3, [pc, #392]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800327e:	2b08      	cmp	r3, #8
 8003280:	d11c      	bne.n	80032bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003282:	4b5f      	ldr	r3, [pc, #380]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d116      	bne.n	80032bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	4b5c      	ldr	r3, [pc, #368]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_RCC_OscConfig+0x152>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e1c4      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a6:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4952      	ldr	r1, [pc, #328]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ba:	e03a      	b.n	8003332 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d020      	beq.n	8003306 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c4:	4b4f      	ldr	r3, [pc, #316]	; (8003404 <HAL_RCC_OscConfig+0x2b0>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe f949 	bl	8001560 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d2:	f7fe f945 	bl	8001560 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e1a5      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e4:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f0:	4b43      	ldr	r3, [pc, #268]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4940      	ldr	r1, [pc, #256]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
 8003304:	e015      	b.n	8003332 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003306:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <HAL_RCC_OscConfig+0x2b0>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe f928 	bl	8001560 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003314:	f7fe f924 	bl	8001560 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e184      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003326:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d030      	beq.n	80033a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <HAL_RCC_OscConfig+0x2b4>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe f908 	bl	8001560 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003354:	f7fe f904 	bl	8001560 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e164      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x200>
 8003372:	e015      	b.n	80033a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x2b4>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337a:	f7fe f8f1 	bl	8001560 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003382:	f7fe f8ed 	bl	8001560 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e14d      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 8003396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80a0 	beq.w	80034ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_OscConfig+0x2b8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d121      	bne.n	800342e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <HAL_RCC_OscConfig+0x2b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <HAL_RCC_OscConfig+0x2b8>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f6:	f7fe f8b3 	bl	8001560 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	e011      	b.n	8003422 <HAL_RCC_OscConfig+0x2ce>
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	42470000 	.word	0x42470000
 8003408:	42470e80 	.word	0x42470e80
 800340c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003410:	f7fe f8a6 	bl	8001560 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e106      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b85      	ldr	r3, [pc, #532]	; (8003638 <HAL_RCC_OscConfig+0x4e4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d106      	bne.n	8003444 <HAL_RCC_OscConfig+0x2f0>
 8003436:	4b81      	ldr	r3, [pc, #516]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a80      	ldr	r2, [pc, #512]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	e01c      	b.n	800347e <HAL_RCC_OscConfig+0x32a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d10c      	bne.n	8003466 <HAL_RCC_OscConfig+0x312>
 800344c:	4b7b      	ldr	r3, [pc, #492]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	4a7a      	ldr	r2, [pc, #488]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6713      	str	r3, [r2, #112]	; 0x70
 8003458:	4b78      	ldr	r3, [pc, #480]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4a77      	ldr	r2, [pc, #476]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6713      	str	r3, [r2, #112]	; 0x70
 8003464:	e00b      	b.n	800347e <HAL_RCC_OscConfig+0x32a>
 8003466:	4b75      	ldr	r3, [pc, #468]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	4a74      	ldr	r2, [pc, #464]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6713      	str	r3, [r2, #112]	; 0x70
 8003472:	4b72      	ldr	r3, [pc, #456]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4a71      	ldr	r2, [pc, #452]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d015      	beq.n	80034b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fe f86b 	bl	8001560 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe f867 	bl	8001560 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0c5      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	4b65      	ldr	r3, [pc, #404]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ee      	beq.n	800348e <HAL_RCC_OscConfig+0x33a>
 80034b0:	e014      	b.n	80034dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fe f855 	bl	8001560 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe f851 	bl	8001560 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0af      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d0:	4b5a      	ldr	r3, [pc, #360]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ee      	bne.n	80034ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b56      	ldr	r3, [pc, #344]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a55      	ldr	r2, [pc, #340]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 809b 	beq.w	800362e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034f8:	4b50      	ldr	r3, [pc, #320]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d05c      	beq.n	80035be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d141      	bne.n	8003590 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b4c      	ldr	r3, [pc, #304]	; (8003640 <HAL_RCC_OscConfig+0x4ec>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fe f825 	bl	8001560 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351a:	f7fe f821 	bl	8001560 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e081      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352c:	4b43      	ldr	r3, [pc, #268]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	019b      	lsls	r3, r3, #6
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	3b01      	subs	r3, #1
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	061b      	lsls	r3, r3, #24
 800355c:	4937      	ldr	r1, [pc, #220]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003562:	4b37      	ldr	r3, [pc, #220]	; (8003640 <HAL_RCC_OscConfig+0x4ec>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fd fffa 	bl	8001560 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003570:	f7fd fff6 	bl	8001560 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e056      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b2e      	ldr	r3, [pc, #184]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x41c>
 800358e:	e04e      	b.n	800362e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_RCC_OscConfig+0x4ec>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fd ffe3 	bl	8001560 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359e:	f7fd ffdf 	bl	8001560 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e03f      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b0:	4b22      	ldr	r3, [pc, #136]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x44a>
 80035bc:	e037      	b.n	800362e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e032      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035ca:	4b1c      	ldr	r3, [pc, #112]	; (800363c <HAL_RCC_OscConfig+0x4e8>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d028      	beq.n	800362a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d121      	bne.n	800362a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d11a      	bne.n	800362a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035fa:	4013      	ands	r3, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003600:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003602:	4293      	cmp	r3, r2
 8003604:	d111      	bne.n	800362a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	3b01      	subs	r3, #1
 8003614:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d107      	bne.n	800362a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40007000 	.word	0x40007000
 800363c:	40023800 	.word	0x40023800
 8003640:	42470060 	.word	0x42470060

08003644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0cc      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b68      	ldr	r3, [pc, #416]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d90c      	bls.n	8003680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b65      	ldr	r3, [pc, #404]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b63      	ldr	r3, [pc, #396]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0b8      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003698:	4b59      	ldr	r3, [pc, #356]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a58      	ldr	r2, [pc, #352]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b0:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a52      	ldr	r2, [pc, #328]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036bc:	4b50      	ldr	r3, [pc, #320]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	494d      	ldr	r1, [pc, #308]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d044      	beq.n	8003764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	4b47      	ldr	r3, [pc, #284]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d119      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e07f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d107      	bne.n	8003712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003702:	4b3f      	ldr	r3, [pc, #252]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003712:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e067      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003722:	4b37      	ldr	r3, [pc, #220]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 0203 	bic.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4934      	ldr	r1, [pc, #208]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	4313      	orrs	r3, r2
 8003732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003734:	f7fd ff14 	bl	8001560 <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	e00a      	b.n	8003752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373c:	f7fd ff10 	bl	8001560 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e04f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	4b2b      	ldr	r3, [pc, #172]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 020c 	and.w	r2, r3, #12
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	429a      	cmp	r2, r3
 8003762:	d1eb      	bne.n	800373c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d20c      	bcs.n	800378c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e032      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4916      	ldr	r1, [pc, #88]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037b6:	4b12      	ldr	r3, [pc, #72]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	490e      	ldr	r1, [pc, #56]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ca:	f000 f821 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 80037ce:	4602      	mov	r2, r0
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	490a      	ldr	r1, [pc, #40]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	5ccb      	ldrb	r3, [r1, r3]
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	4a09      	ldr	r2, [pc, #36]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fe74 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40023c00 	.word	0x40023c00
 8003800:	40023800 	.word	0x40023800
 8003804:	08008380 	.word	0x08008380
 8003808:	20000000 	.word	0x20000000
 800380c:	20000004 	.word	0x20000004

08003810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	2300      	movs	r3, #0
 8003822:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003828:	4b67      	ldr	r3, [pc, #412]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b08      	cmp	r3, #8
 8003832:	d00d      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x40>
 8003834:	2b08      	cmp	r3, #8
 8003836:	f200 80bd 	bhi.w	80039b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x34>
 800383e:	2b04      	cmp	r3, #4
 8003840:	d003      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x3a>
 8003842:	e0b7      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003844:	4b61      	ldr	r3, [pc, #388]	; (80039cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003846:	60bb      	str	r3, [r7, #8]
       break;
 8003848:	e0b7      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800384a:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800384c:	60bb      	str	r3, [r7, #8]
      break;
 800384e:	e0b4      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003850:	4b5d      	ldr	r3, [pc, #372]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003858:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800385a:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d04d      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003866:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	099b      	lsrs	r3, r3, #6
 800386c:	461a      	mov	r2, r3
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	ea02 0800 	and.w	r8, r2, r0
 800387e:	ea03 0901 	and.w	r9, r3, r1
 8003882:	4640      	mov	r0, r8
 8003884:	4649      	mov	r1, r9
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	014b      	lsls	r3, r1, #5
 8003890:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003894:	0142      	lsls	r2, r0, #5
 8003896:	4610      	mov	r0, r2
 8003898:	4619      	mov	r1, r3
 800389a:	ebb0 0008 	subs.w	r0, r0, r8
 800389e:	eb61 0109 	sbc.w	r1, r1, r9
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	018b      	lsls	r3, r1, #6
 80038ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038b0:	0182      	lsls	r2, r0, #6
 80038b2:	1a12      	subs	r2, r2, r0
 80038b4:	eb63 0301 	sbc.w	r3, r3, r1
 80038b8:	f04f 0000 	mov.w	r0, #0
 80038bc:	f04f 0100 	mov.w	r1, #0
 80038c0:	00d9      	lsls	r1, r3, #3
 80038c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038c6:	00d0      	lsls	r0, r2, #3
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	eb12 0208 	adds.w	r2, r2, r8
 80038d0:	eb43 0309 	adc.w	r3, r3, r9
 80038d4:	f04f 0000 	mov.w	r0, #0
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	0259      	lsls	r1, r3, #9
 80038de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038e2:	0250      	lsls	r0, r2, #9
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	f7fc fc68 	bl	80001c8 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4613      	mov	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e04a      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003902:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	461a      	mov	r2, r3
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	ea02 0400 	and.w	r4, r2, r0
 800391a:	ea03 0501 	and.w	r5, r3, r1
 800391e:	4620      	mov	r0, r4
 8003920:	4629      	mov	r1, r5
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	014b      	lsls	r3, r1, #5
 800392c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003930:	0142      	lsls	r2, r0, #5
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	1b00      	subs	r0, r0, r4
 8003938:	eb61 0105 	sbc.w	r1, r1, r5
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	018b      	lsls	r3, r1, #6
 8003946:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800394a:	0182      	lsls	r2, r0, #6
 800394c:	1a12      	subs	r2, r2, r0
 800394e:	eb63 0301 	sbc.w	r3, r3, r1
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f04f 0100 	mov.w	r1, #0
 800395a:	00d9      	lsls	r1, r3, #3
 800395c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003960:	00d0      	lsls	r0, r2, #3
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	1912      	adds	r2, r2, r4
 8003968:	eb45 0303 	adc.w	r3, r5, r3
 800396c:	f04f 0000 	mov.w	r0, #0
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	0299      	lsls	r1, r3, #10
 8003976:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800397a:	0290      	lsls	r0, r2, #10
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	461a      	mov	r2, r3
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	f7fc fc1c 	bl	80001c8 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4613      	mov	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	3301      	adds	r3, #1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	60bb      	str	r3, [r7, #8]
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039b6:	60bb      	str	r3, [r7, #8]
      break;
 80039b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ba:	68bb      	ldr	r3, [r7, #8]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	007a1200 	.word	0x007a1200

080039d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000000 	.word	0x20000000

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039f0:	f7ff fff0 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0a9b      	lsrs	r3, r3, #10
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4903      	ldr	r1, [pc, #12]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	08008390 	.word	0x08008390

08003a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e07b      	b.n	8003b1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d108      	bne.n	8003a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a36:	d009      	beq.n	8003a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	61da      	str	r2, [r3, #28]
 8003a3e:	e005      	b.n	8003a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd fb4a 	bl	8001100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	ea42 0103 	orr.w	r1, r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	f003 0104 	and.w	r1, r3, #4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f003 0210 	and.w	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10f      	bne.n	8003b6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
    return;
 8003b6a:	e0d7      	b.n	8003d1c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_SPI_IRQHandler+0x66>
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	09db      	lsrs	r3, r3, #7
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
    return;
 8003b8c:	e0c6      	b.n	8003d1c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10c      	bne.n	8003bb4 <HAL_SPI_IRQHandler+0x8c>
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80b4 	beq.w	8003d1c <HAL_SPI_IRQHandler+0x1f4>
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80ad 	beq.w	8003d1c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d023      	beq.n	8003c16 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d011      	beq.n	8003bfe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bde:	f043 0204 	orr.w	r2, r3, #4
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	e00b      	b.n	8003c16 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	693b      	ldr	r3, [r7, #16]
        return;
 8003c14:	e082      	b.n	8003d1c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d014      	beq.n	8003c4c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	f043 0201 	orr.w	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00c      	beq.n	8003c72 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	f043 0208 	orr.w	r2, r3, #8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d04f      	beq.n	8003d1a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c88:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <HAL_SPI_IRQHandler+0x17e>
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d034      	beq.n	8003d10 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0203 	bic.w	r2, r2, #3
 8003cb4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d011      	beq.n	8003ce2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <HAL_SPI_IRQHandler+0x1fc>)
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fd89 	bl	80017e2 <HAL_DMA_Abort_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d016      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cee:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <HAL_SPI_IRQHandler+0x1fc>)
 8003cf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fd73 	bl	80017e2 <HAL_DMA_Abort_IT>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d0e:	e003      	b.n	8003d18 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f809 	bl	8003d28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d16:	e000      	b.n	8003d1a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003d18:	bf00      	nop
    return;
 8003d1a:	bf00      	nop
  }
}
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	08003d3d 	.word	0x08003d3d

08003d28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff ffe6 	bl	8003d28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d001      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e04e      	b.n	8003e1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d022      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d01d      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <HAL_TIM_Base_Start_IT+0xc8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <HAL_TIM_Base_Start_IT+0xcc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d111      	bne.n	8003e08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d010      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e06:	e007      	b.n	8003e18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40000c00 	.word	0x40000c00
 8003e38:	40010400 	.word	0x40010400
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	40001800 	.word	0x40001800

08003e44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e041      	b.n	8003eda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd f998 	bl	80011a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f000 f9fa 	bl	800427c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_TIM_PWM_Start_IT+0x24>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e022      	b.n	8003f4e <HAL_TIM_PWM_Start_IT+0x6a>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d109      	bne.n	8003f22 <HAL_TIM_PWM_Start_IT+0x3e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	bf14      	ite	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	2300      	moveq	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	e015      	b.n	8003f4e <HAL_TIM_PWM_Start_IT+0x6a>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d109      	bne.n	8003f3c <HAL_TIM_PWM_Start_IT+0x58>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e008      	b.n	8003f4e <HAL_TIM_PWM_Start_IT+0x6a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0c2      	b.n	80040dc <HAL_TIM_PWM_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Start_IT+0x82>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f64:	e013      	b.n	8003f8e <HAL_TIM_PWM_Start_IT+0xaa>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_PWM_Start_IT+0x92>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f74:	e00b      	b.n	8003f8e <HAL_TIM_PWM_Start_IT+0xaa>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_PWM_Start_IT+0xa2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f84:	e003      	b.n	8003f8e <HAL_TIM_PWM_Start_IT+0xaa>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b0c      	cmp	r3, #12
 8003f92:	d841      	bhi.n	8004018 <HAL_TIM_PWM_Start_IT+0x134>
 8003f94:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <HAL_TIM_PWM_Start_IT+0xb8>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08003fd1 	.word	0x08003fd1
 8003fa0:	08004019 	.word	0x08004019
 8003fa4:	08004019 	.word	0x08004019
 8003fa8:	08004019 	.word	0x08004019
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08004019 	.word	0x08004019
 8003fb4:	08004019 	.word	0x08004019
 8003fb8:	08004019 	.word	0x08004019
 8003fbc:	08003ff5 	.word	0x08003ff5
 8003fc0:	08004019 	.word	0x08004019
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08004019 	.word	0x08004019
 8003fcc:	08004007 	.word	0x08004007
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0202 	orr.w	r2, r2, #2
 8003fde:	60da      	str	r2, [r3, #12]
      break;
 8003fe0:	e01b      	b.n	800401a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0204 	orr.w	r2, r2, #4
 8003ff0:	60da      	str	r2, [r3, #12]
      break;
 8003ff2:	e012      	b.n	800401a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0208 	orr.w	r2, r2, #8
 8004002:	60da      	str	r2, [r3, #12]
      break;
 8004004:	e009      	b.n	800401a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0210 	orr.w	r2, r2, #16
 8004014:	60da      	str	r2, [r3, #12]
      break;
 8004016:	e000      	b.n	800401a <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004018:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fb7a 	bl	800471c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2d      	ldr	r2, [pc, #180]	; (80040e4 <HAL_TIM_PWM_Start_IT+0x200>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <HAL_TIM_PWM_Start_IT+0x158>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2c      	ldr	r2, [pc, #176]	; (80040e8 <HAL_TIM_PWM_Start_IT+0x204>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d101      	bne.n	8004040 <HAL_TIM_PWM_Start_IT+0x15c>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <HAL_TIM_PWM_Start_IT+0x15e>
 8004040:	2300      	movs	r3, #0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <HAL_TIM_PWM_Start_IT+0x200>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d022      	beq.n	80040a6 <HAL_TIM_PWM_Start_IT+0x1c2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004068:	d01d      	beq.n	80040a6 <HAL_TIM_PWM_Start_IT+0x1c2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <HAL_TIM_PWM_Start_IT+0x208>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d018      	beq.n	80040a6 <HAL_TIM_PWM_Start_IT+0x1c2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_TIM_PWM_Start_IT+0x20c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_TIM_PWM_Start_IT+0x1c2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <HAL_TIM_PWM_Start_IT+0x210>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00e      	beq.n	80040a6 <HAL_TIM_PWM_Start_IT+0x1c2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <HAL_TIM_PWM_Start_IT+0x204>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d009      	beq.n	80040a6 <HAL_TIM_PWM_Start_IT+0x1c2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <HAL_TIM_PWM_Start_IT+0x214>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d004      	beq.n	80040a6 <HAL_TIM_PWM_Start_IT+0x1c2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a16      	ldr	r2, [pc, #88]	; (80040fc <HAL_TIM_PWM_Start_IT+0x218>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <HAL_TIM_PWM_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b06      	cmp	r3, #6
 80040b6:	d010      	beq.n	80040da <HAL_TIM_PWM_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	e007      	b.n	80040da <HAL_TIM_PWM_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40010400 	.word	0x40010400
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40001800 	.word	0x40001800

08004100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004116:	2302      	movs	r3, #2
 8004118:	e0ac      	b.n	8004274 <HAL_TIM_PWM_ConfigChannel+0x174>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	f200 809f 	bhi.w	8004268 <HAL_TIM_PWM_ConfigChannel+0x168>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004165 	.word	0x08004165
 8004134:	08004269 	.word	0x08004269
 8004138:	08004269 	.word	0x08004269
 800413c:	08004269 	.word	0x08004269
 8004140:	080041a5 	.word	0x080041a5
 8004144:	08004269 	.word	0x08004269
 8004148:	08004269 	.word	0x08004269
 800414c:	08004269 	.word	0x08004269
 8004150:	080041e7 	.word	0x080041e7
 8004154:	08004269 	.word	0x08004269
 8004158:	08004269 	.word	0x08004269
 800415c:	08004269 	.word	0x08004269
 8004160:	08004227 	.word	0x08004227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f926 	bl	80043bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0208 	orr.w	r2, r2, #8
 800417e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0204 	bic.w	r2, r2, #4
 800418e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6999      	ldr	r1, [r3, #24]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	619a      	str	r2, [r3, #24]
      break;
 80041a2:	e062      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f976 	bl	800449c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	021a      	lsls	r2, r3, #8
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	619a      	str	r2, [r3, #24]
      break;
 80041e4:	e041      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f9cb 	bl	8004588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0208 	orr.w	r2, r2, #8
 8004200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0204 	bic.w	r2, r2, #4
 8004210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69d9      	ldr	r1, [r3, #28]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	61da      	str	r2, [r3, #28]
      break;
 8004224:	e021      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fa1f 	bl	8004670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69d9      	ldr	r1, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	021a      	lsls	r2, r3, #8
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	61da      	str	r2, [r3, #28]
      break;
 8004266:	e000      	b.n	800426a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a40      	ldr	r2, [pc, #256]	; (8004390 <TIM_Base_SetConfig+0x114>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <TIM_Base_SetConfig+0x40>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429a:	d00f      	beq.n	80042bc <TIM_Base_SetConfig+0x40>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3d      	ldr	r2, [pc, #244]	; (8004394 <TIM_Base_SetConfig+0x118>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00b      	beq.n	80042bc <TIM_Base_SetConfig+0x40>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3c      	ldr	r2, [pc, #240]	; (8004398 <TIM_Base_SetConfig+0x11c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3b      	ldr	r2, [pc, #236]	; (800439c <TIM_Base_SetConfig+0x120>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_Base_SetConfig+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3a      	ldr	r2, [pc, #232]	; (80043a0 <TIM_Base_SetConfig+0x124>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d108      	bne.n	80042ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a2f      	ldr	r2, [pc, #188]	; (8004390 <TIM_Base_SetConfig+0x114>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d02b      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d027      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <TIM_Base_SetConfig+0x118>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d023      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2b      	ldr	r2, [pc, #172]	; (8004398 <TIM_Base_SetConfig+0x11c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01f      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2a      	ldr	r2, [pc, #168]	; (800439c <TIM_Base_SetConfig+0x120>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01b      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a29      	ldr	r2, [pc, #164]	; (80043a0 <TIM_Base_SetConfig+0x124>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d017      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a28      	ldr	r2, [pc, #160]	; (80043a4 <TIM_Base_SetConfig+0x128>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a27      	ldr	r2, [pc, #156]	; (80043a8 <TIM_Base_SetConfig+0x12c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00f      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a26      	ldr	r2, [pc, #152]	; (80043ac <TIM_Base_SetConfig+0x130>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00b      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <TIM_Base_SetConfig+0x134>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d007      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <TIM_Base_SetConfig+0x138>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a23      	ldr	r2, [pc, #140]	; (80043b8 <TIM_Base_SetConfig+0x13c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d108      	bne.n	8004340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <TIM_Base_SetConfig+0x114>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_Base_SetConfig+0xf8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a0c      	ldr	r2, [pc, #48]	; (80043a0 <TIM_Base_SetConfig+0x124>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d103      	bne.n	800437c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	615a      	str	r2, [r3, #20]
}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40010000 	.word	0x40010000
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40010400 	.word	0x40010400
 80043a4:	40014000 	.word	0x40014000
 80043a8:	40014400 	.word	0x40014400
 80043ac:	40014800 	.word	0x40014800
 80043b0:	40001800 	.word	0x40001800
 80043b4:	40001c00 	.word	0x40001c00
 80043b8:	40002000 	.word	0x40002000

080043bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f023 0201 	bic.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0303 	bic.w	r3, r3, #3
 80043f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f023 0302 	bic.w	r3, r3, #2
 8004404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a20      	ldr	r2, [pc, #128]	; (8004494 <TIM_OC1_SetConfig+0xd8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_OC1_SetConfig+0x64>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1f      	ldr	r2, [pc, #124]	; (8004498 <TIM_OC1_SetConfig+0xdc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d10c      	bne.n	800443a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0308 	bic.w	r3, r3, #8
 8004426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a15      	ldr	r2, [pc, #84]	; (8004494 <TIM_OC1_SetConfig+0xd8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d003      	beq.n	800444a <TIM_OC1_SetConfig+0x8e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a14      	ldr	r2, [pc, #80]	; (8004498 <TIM_OC1_SetConfig+0xdc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d111      	bne.n	800446e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	621a      	str	r2, [r3, #32]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40010000 	.word	0x40010000
 8004498:	40010400 	.word	0x40010400

0800449c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0210 	bic.w	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f023 0320 	bic.w	r3, r3, #32
 80044e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a22      	ldr	r2, [pc, #136]	; (8004580 <TIM_OC2_SetConfig+0xe4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_OC2_SetConfig+0x68>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a21      	ldr	r2, [pc, #132]	; (8004584 <TIM_OC2_SetConfig+0xe8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10d      	bne.n	8004520 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800450a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a17      	ldr	r2, [pc, #92]	; (8004580 <TIM_OC2_SetConfig+0xe4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d003      	beq.n	8004530 <TIM_OC2_SetConfig+0x94>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a16      	ldr	r2, [pc, #88]	; (8004584 <TIM_OC2_SetConfig+0xe8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d113      	bne.n	8004558 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800453e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40010000 	.word	0x40010000
 8004584:	40010400 	.word	0x40010400

08004588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0303 	bic.w	r3, r3, #3
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a21      	ldr	r2, [pc, #132]	; (8004668 <TIM_OC3_SetConfig+0xe0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_OC3_SetConfig+0x66>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a20      	ldr	r2, [pc, #128]	; (800466c <TIM_OC3_SetConfig+0xe4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d10d      	bne.n	800460a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a16      	ldr	r2, [pc, #88]	; (8004668 <TIM_OC3_SetConfig+0xe0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d003      	beq.n	800461a <TIM_OC3_SetConfig+0x92>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a15      	ldr	r2, [pc, #84]	; (800466c <TIM_OC3_SetConfig+0xe4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d113      	bne.n	8004642 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	621a      	str	r2, [r3, #32]
}
 800465c:	bf00      	nop
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40010000 	.word	0x40010000
 800466c:	40010400 	.word	0x40010400

08004670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	031b      	lsls	r3, r3, #12
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a12      	ldr	r2, [pc, #72]	; (8004714 <TIM_OC4_SetConfig+0xa4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_OC4_SetConfig+0x68>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a11      	ldr	r2, [pc, #68]	; (8004718 <TIM_OC4_SetConfig+0xa8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d109      	bne.n	80046ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	019b      	lsls	r3, r3, #6
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	621a      	str	r2, [r3, #32]
}
 8004706:	bf00      	nop
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40010000 	.word	0x40010000
 8004718:	40010400 	.word	0x40010400

0800471c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	2201      	movs	r2, #1
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1a      	ldr	r2, [r3, #32]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	43db      	mvns	r3, r3
 800473e:	401a      	ands	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	fa01 f303 	lsl.w	r3, r1, r3
 8004754:	431a      	orrs	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	621a      	str	r2, [r3, #32]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800477c:	2302      	movs	r3, #2
 800477e:	e05a      	b.n	8004836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a21      	ldr	r2, [pc, #132]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d022      	beq.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047cc:	d01d      	beq.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d018      	beq.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1b      	ldr	r2, [pc, #108]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a18      	ldr	r2, [pc, #96]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a17      	ldr	r2, [pc, #92]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a15      	ldr	r2, [pc, #84]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d10c      	bne.n	8004824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	4313      	orrs	r3, r2
 800481a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40010000 	.word	0x40010000
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800
 8004850:	40000c00 	.word	0x40000c00
 8004854:	40010400 	.word	0x40010400
 8004858:	40014000 	.word	0x40014000
 800485c:	40001800 	.word	0x40001800

08004860 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004878:	2302      	movs	r3, #2
 800487a:	e03d      	b.n	80048f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004904:	b084      	sub	sp, #16
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	f107 001c 	add.w	r0, r7, #28
 8004912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	2b01      	cmp	r3, #1
 800491a:	d122      	bne.n	8004962 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004946:	2b01      	cmp	r3, #1
 8004948:	d105      	bne.n	8004956 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f001 fac6 	bl	8005ee8 <USB_CoreReset>
 800495c:	4603      	mov	r3, r0
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e01a      	b.n	8004998 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 faba 	bl	8005ee8 <USB_CoreReset>
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	639a      	str	r2, [r3, #56]	; 0x38
 800498a:	e005      	b.n	8004998 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10b      	bne.n	80049b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f043 0206 	orr.w	r2, r3, #6
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f043 0220 	orr.w	r2, r3, #32
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049c2:	b004      	add	sp, #16
 80049c4:	4770      	bx	lr
	...

080049c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	4613      	mov	r3, r2
 80049d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d165      	bne.n	8004aa8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4a41      	ldr	r2, [pc, #260]	; (8004ae4 <USB_SetTurnaroundTime+0x11c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d906      	bls.n	80049f2 <USB_SetTurnaroundTime+0x2a>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4a40      	ldr	r2, [pc, #256]	; (8004ae8 <USB_SetTurnaroundTime+0x120>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d202      	bcs.n	80049f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049ec:	230f      	movs	r3, #15
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	e062      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4a3c      	ldr	r2, [pc, #240]	; (8004ae8 <USB_SetTurnaroundTime+0x120>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d306      	bcc.n	8004a08 <USB_SetTurnaroundTime+0x40>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4a3b      	ldr	r2, [pc, #236]	; (8004aec <USB_SetTurnaroundTime+0x124>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d202      	bcs.n	8004a08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a02:	230e      	movs	r3, #14
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e057      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4a38      	ldr	r2, [pc, #224]	; (8004aec <USB_SetTurnaroundTime+0x124>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d306      	bcc.n	8004a1e <USB_SetTurnaroundTime+0x56>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4a37      	ldr	r2, [pc, #220]	; (8004af0 <USB_SetTurnaroundTime+0x128>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d202      	bcs.n	8004a1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a18:	230d      	movs	r3, #13
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e04c      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4a33      	ldr	r2, [pc, #204]	; (8004af0 <USB_SetTurnaroundTime+0x128>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d306      	bcc.n	8004a34 <USB_SetTurnaroundTime+0x6c>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4a32      	ldr	r2, [pc, #200]	; (8004af4 <USB_SetTurnaroundTime+0x12c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d802      	bhi.n	8004a34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a2e:	230c      	movs	r3, #12
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	e041      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4a2f      	ldr	r2, [pc, #188]	; (8004af4 <USB_SetTurnaroundTime+0x12c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d906      	bls.n	8004a4a <USB_SetTurnaroundTime+0x82>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4a2e      	ldr	r2, [pc, #184]	; (8004af8 <USB_SetTurnaroundTime+0x130>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d802      	bhi.n	8004a4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a44:	230b      	movs	r3, #11
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	e036      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <USB_SetTurnaroundTime+0x130>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d906      	bls.n	8004a60 <USB_SetTurnaroundTime+0x98>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <USB_SetTurnaroundTime+0x134>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d802      	bhi.n	8004a60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	e02b      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4a26      	ldr	r2, [pc, #152]	; (8004afc <USB_SetTurnaroundTime+0x134>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d906      	bls.n	8004a76 <USB_SetTurnaroundTime+0xae>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4a25      	ldr	r2, [pc, #148]	; (8004b00 <USB_SetTurnaroundTime+0x138>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d202      	bcs.n	8004a76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a70:	2309      	movs	r3, #9
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e020      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <USB_SetTurnaroundTime+0x138>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d306      	bcc.n	8004a8c <USB_SetTurnaroundTime+0xc4>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <USB_SetTurnaroundTime+0x13c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d802      	bhi.n	8004a8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a86:	2308      	movs	r3, #8
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e015      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <USB_SetTurnaroundTime+0x13c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d906      	bls.n	8004aa2 <USB_SetTurnaroundTime+0xda>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <USB_SetTurnaroundTime+0x140>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d202      	bcs.n	8004aa2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a9c:	2307      	movs	r3, #7
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e00a      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004aa2:	2306      	movs	r3, #6
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	e007      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004aae:	2309      	movs	r3, #9
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e001      	b.n	8004ab8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ab4:	2309      	movs	r3, #9
 8004ab6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	029b      	lsls	r3, r3, #10
 8004acc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	00d8acbf 	.word	0x00d8acbf
 8004ae8:	00e4e1c0 	.word	0x00e4e1c0
 8004aec:	00f42400 	.word	0x00f42400
 8004af0:	01067380 	.word	0x01067380
 8004af4:	011a499f 	.word	0x011a499f
 8004af8:	01312cff 	.word	0x01312cff
 8004afc:	014ca43f 	.word	0x014ca43f
 8004b00:	016e3600 	.word	0x016e3600
 8004b04:	01a6ab1f 	.word	0x01a6ab1f
 8004b08:	01e84800 	.word	0x01e84800

08004b0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f043 0201 	orr.w	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d106      	bne.n	8004b7c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60da      	str	r2, [r3, #12]
 8004b7a:	e00b      	b.n	8004b94 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]
 8004b8e:	e001      	b.n	8004b94 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e003      	b.n	8004b9c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004b94:	2032      	movs	r0, #50	; 0x32
 8004b96:	f7fc fcef 	bl	8001578 <HAL_Delay>

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	e009      	b.n	8004bd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	3340      	adds	r3, #64	; 0x40
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b0e      	cmp	r3, #14
 8004bdc:	d9f2      	bls.n	8004bc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d11c      	bne.n	8004c1e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf2:	f043 0302 	orr.w	r3, r3, #2
 8004bf6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c1c:	e00b      	b.n	8004c36 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c48:	4619      	mov	r1, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c50:	461a      	mov	r2, r3
 8004c52:	680b      	ldr	r3, [r1, #0]
 8004c54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d10c      	bne.n	8004c76 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c62:	2100      	movs	r1, #0
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f949 	bl	8004efc <USB_SetDevSpeed>
 8004c6a:	e008      	b.n	8004c7e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f944 	bl	8004efc <USB_SetDevSpeed>
 8004c74:	e003      	b.n	8004c7e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c76:	2103      	movs	r1, #3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f93f 	bl	8004efc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c7e:	2110      	movs	r1, #16
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f8f3 	bl	8004e6c <USB_FlushTxFifo>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f911 	bl	8004eb8 <USB_FlushRxFifo>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	e043      	b.n	8004d52 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ce0:	d118      	bne.n	8004d14 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e013      	b.n	8004d26 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e008      	b.n	8004d26 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	461a      	mov	r2, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	461a      	mov	r2, r3
 8004d34:	2300      	movs	r3, #0
 8004d36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	461a      	mov	r2, r3
 8004d46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d3b7      	bcc.n	8004cca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	e043      	b.n	8004de8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d76:	d118      	bne.n	8004daa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	e013      	b.n	8004dbc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	461a      	mov	r2, r3
 8004da2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e008      	b.n	8004dbc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	461a      	mov	r2, r3
 8004db8:	2300      	movs	r3, #0
 8004dba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004de0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	3301      	adds	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d3b7      	bcc.n	8004d60 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d105      	bne.n	8004e24 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f043 0210 	orr.w	r2, r3, #16
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <USB_DevInit+0x2c4>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f043 0208 	orr.w	r2, r3, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d107      	bne.n	8004e58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e50:	f043 0304 	orr.w	r3, r3, #4
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e64:	b004      	add	sp, #16
 8004e66:	4770      	bx	lr
 8004e68:	803c3800 	.word	0x803c3800

08004e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	019b      	lsls	r3, r3, #6
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a09      	ldr	r2, [pc, #36]	; (8004eb4 <USB_FlushTxFifo+0x48>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e006      	b.n	8004ea6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d0f0      	beq.n	8004e86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	00030d40 	.word	0x00030d40

08004eb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <USB_FlushRxFifo+0x40>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e006      	b.n	8004eea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b10      	cmp	r3, #16
 8004ee6:	d0f0      	beq.n	8004eca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	00030d40 	.word	0x00030d40

08004efc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0306 	and.w	r3, r3, #6
 8004f46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]
 8004f52:	e00a      	b.n	8004f6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d002      	beq.n	8004f60 <USB_GetDevSpeed+0x32>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d102      	bne.n	8004f66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f60:	2302      	movs	r3, #2
 8004f62:	75fb      	strb	r3, [r7, #23]
 8004f64:	e001      	b.n	8004f6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f66:	230f      	movs	r3, #15
 8004f68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d13a      	bne.n	800500a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d155      	bne.n	8005078 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	78db      	ldrb	r3, [r3, #3]
 8004fe6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fe8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	059b      	lsls	r3, r3, #22
 8004fee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	e036      	b.n	8005078 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	2101      	movs	r1, #1
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005028:	4313      	orrs	r3, r2
 800502a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d11a      	bne.n	8005078 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	78db      	ldrb	r3, [r3, #3]
 800505c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800505e:	430b      	orrs	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800506e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d161      	bne.n	8005168 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ba:	d11f      	bne.n	80050fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	2101      	movs	r1, #1
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	b29b      	uxth	r3, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800511c:	4013      	ands	r3, r2
 800511e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	b29b      	uxth	r3, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005140:	4013      	ands	r3, r2
 8005142:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	0159      	lsls	r1, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	440b      	add	r3, r1
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	4619      	mov	r1, r3
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <USB_DeactivateEndpoint+0x1b0>)
 8005162:	4013      	ands	r3, r2
 8005164:	600b      	str	r3, [r1, #0]
 8005166:	e060      	b.n	800522a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800517a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517e:	d11f      	bne.n	80051c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800519e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	43db      	mvns	r3, r3
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e0:	4013      	ands	r3, r2
 80051e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	43db      	mvns	r3, r3
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005204:	4013      	ands	r3, r2
 8005206:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	0159      	lsls	r1, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	440b      	add	r3, r1
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	4619      	mov	r1, r3
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <USB_DeactivateEndpoint+0x1b4>)
 8005226:	4013      	ands	r3, r2
 8005228:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	ec337800 	.word	0xec337800
 800523c:	eff37800 	.word	0xeff37800

08005240 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	4613      	mov	r3, r2
 800524c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 815c 	bne.w	800551a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d132      	bne.n	80052d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005284:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005288:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800528c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c8:	0cdb      	lsrs	r3, r3, #19
 80052ca:	04db      	lsls	r3, r3, #19
 80052cc:	6113      	str	r3, [r2, #16]
 80052ce:	e074      	b.n	80053ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ea:	0cdb      	lsrs	r3, r3, #19
 80052ec:	04db      	lsls	r3, r3, #19
 80052ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800530e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6959      	ldr	r1, [r3, #20]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	440b      	add	r3, r1
 800532c:	1e59      	subs	r1, r3, #1
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	fbb1 f3f3 	udiv	r3, r1, r3
 8005336:	04d9      	lsls	r1, r3, #19
 8005338:	4b9d      	ldr	r3, [pc, #628]	; (80055b0 <USB_EPStartXfer+0x370>)
 800533a:	400b      	ands	r3, r1
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	0148      	lsls	r0, r1, #5
 8005340:	69f9      	ldr	r1, [r7, #28]
 8005342:	4401      	add	r1, r0
 8005344:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005348:	4313      	orrs	r3, r2
 800534a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005362:	69b9      	ldr	r1, [r7, #24]
 8005364:	0148      	lsls	r0, r1, #5
 8005366:	69f9      	ldr	r1, [r7, #28]
 8005368:	4401      	add	r1, r0
 800536a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800536e:	4313      	orrs	r3, r2
 8005370:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	78db      	ldrb	r3, [r3, #3]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d11f      	bne.n	80053ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	440a      	add	r2, r1
 8005390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005394:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005398:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d14b      	bne.n	8005458 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d009      	beq.n	80053dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d4:	461a      	mov	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	78db      	ldrb	r3, [r3, #3]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d128      	bne.n	8005436 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d110      	bne.n	8005416 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	0151      	lsls	r1, r2, #5
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	440a      	add	r2, r1
 800540a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	e00f      	b.n	8005436 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005434:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	440a      	add	r2, r1
 800544c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005450:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e12f      	b.n	80056b8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005476:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	78db      	ldrb	r3, [r3, #3]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d015      	beq.n	80054ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8117 	beq.w	80056b8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	2101      	movs	r1, #1
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	69f9      	ldr	r1, [r7, #28]
 80054a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a6:	4313      	orrs	r3, r2
 80054a8:	634b      	str	r3, [r1, #52]	; 0x34
 80054aa:	e105      	b.n	80056b8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d110      	bne.n	80054de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e00f      	b.n	80054fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	68d9      	ldr	r1, [r3, #12]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	b298      	uxth	r0, r3
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	4603      	mov	r3, r0
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fa2b 	bl	800596e <USB_WritePacket>
 8005518:	e0ce      	b.n	80056b8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	440a      	add	r2, r1
 8005530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005534:	0cdb      	lsrs	r3, r3, #19
 8005536:	04db      	lsls	r3, r3, #19
 8005538:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800555c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d126      	bne.n	80055b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800557c:	69b9      	ldr	r1, [r7, #24]
 800557e:	0148      	lsls	r0, r1, #5
 8005580:	69f9      	ldr	r1, [r7, #28]
 8005582:	4401      	add	r1, r0
 8005584:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005588:	4313      	orrs	r3, r2
 800558a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055aa:	6113      	str	r3, [r2, #16]
 80055ac:	e036      	b.n	800561c <USB_EPStartXfer+0x3dc>
 80055ae:	bf00      	nop
 80055b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	1e5a      	subs	r2, r3, #1
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	8afb      	ldrh	r3, [r7, #22]
 80055da:	04d9      	lsls	r1, r3, #19
 80055dc:	4b39      	ldr	r3, [pc, #228]	; (80056c4 <USB_EPStartXfer+0x484>)
 80055de:	400b      	ands	r3, r1
 80055e0:	69b9      	ldr	r1, [r7, #24]
 80055e2:	0148      	lsls	r0, r1, #5
 80055e4:	69f9      	ldr	r1, [r7, #28]
 80055e6:	4401      	add	r1, r0
 80055e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055ec:	4313      	orrs	r3, r2
 80055ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	8af9      	ldrh	r1, [r7, #22]
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	0148      	lsls	r0, r1, #5
 8005610:	69f9      	ldr	r1, [r7, #28]
 8005612:	4401      	add	r1, r0
 8005614:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005618:	4313      	orrs	r3, r2
 800561a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d10d      	bne.n	800563e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	68d9      	ldr	r1, [r3, #12]
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	460a      	mov	r2, r1
 800563c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	78db      	ldrb	r3, [r3, #3]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d128      	bne.n	8005698 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d110      	bne.n	8005678 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e00f      	b.n	8005698 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005696:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	1ff80000 	.word	0x1ff80000

080056c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	4613      	mov	r3, r2
 80056d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	f040 80cd 	bne.w	8005884 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d132      	bne.n	8005758 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005710:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005714:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005734:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005750:	0cdb      	lsrs	r3, r3, #19
 8005752:	04db      	lsls	r3, r3, #19
 8005754:	6113      	str	r3, [r2, #16]
 8005756:	e04e      	b.n	80057f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005772:	0cdb      	lsrs	r3, r3, #19
 8005774:	04db      	lsls	r3, r3, #19
 8005776:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005796:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800579a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d903      	bls.n	80057b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e6:	6939      	ldr	r1, [r7, #16]
 80057e8:	0148      	lsls	r0, r1, #5
 80057ea:	6979      	ldr	r1, [r7, #20]
 80057ec:	4401      	add	r1, r0
 80057ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057f2:	4313      	orrs	r3, r2
 80057f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d11e      	bne.n	800583a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	461a      	mov	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	440a      	add	r2, r1
 800582e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	e092      	b.n	8005960 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005854:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005858:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d07e      	beq.n	8005960 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	2101      	movs	r1, #1
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800587e:	4313      	orrs	r3, r2
 8005880:	634b      	str	r3, [r1, #52]	; 0x34
 8005882:	e06d      	b.n	8005960 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589e:	0cdb      	lsrs	r3, r3, #19
 80058a0:	04db      	lsls	r3, r3, #19
 80058a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590e:	6939      	ldr	r1, [r7, #16]
 8005910:	0148      	lsls	r0, r1, #5
 8005912:	6979      	ldr	r1, [r7, #20]
 8005914:	4401      	add	r1, r0
 8005916:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800591a:	4313      	orrs	r3, r2
 800591c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d10d      	bne.n	8005940 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	68d9      	ldr	r1, [r3, #12]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	460a      	mov	r2, r1
 800593e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800595a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800595e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800596e:	b480      	push	{r7}
 8005970:	b089      	sub	sp, #36	; 0x24
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	4611      	mov	r1, r2
 800597a:	461a      	mov	r2, r3
 800597c:	460b      	mov	r3, r1
 800597e:	71fb      	strb	r3, [r7, #7]
 8005980:	4613      	mov	r3, r2
 8005982:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800598c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11a      	bne.n	80059ca <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005994:	88bb      	ldrh	r3, [r7, #4]
 8005996:	3303      	adds	r3, #3
 8005998:	089b      	lsrs	r3, r3, #2
 800599a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800599c:	2300      	movs	r3, #0
 800599e:	61bb      	str	r3, [r7, #24]
 80059a0:	e00f      	b.n	80059c2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	031a      	lsls	r2, r3, #12
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ae:	461a      	mov	r2, r3
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	3304      	adds	r3, #4
 80059ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	3301      	adds	r3, #1
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3eb      	bcc.n	80059a2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3724      	adds	r7, #36	; 0x24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059d8:	b480      	push	{r7}
 80059da:	b089      	sub	sp, #36	; 0x24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	3303      	adds	r3, #3
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	e00b      	b.n	8005a14 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	3301      	adds	r3, #1
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d3ef      	bcc.n	80059fc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005a1c:	69fb      	ldr	r3, [r7, #28]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3724      	adds	r7, #36	; 0x24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d12c      	bne.n	8005aa0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	db12      	blt.n	8005a7e <USB_EPSetStall+0x54>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00f      	beq.n	8005a7e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a7c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e02b      	b.n	8005af8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	db12      	blt.n	8005ad8 <USB_EPSetStall+0xae>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00f      	beq.n	8005ad8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0151      	lsls	r1, r2, #5
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	440a      	add	r2, r1
 8005ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ad6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005af6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d128      	bne.n	8005b74 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	78db      	ldrb	r3, [r3, #3]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d003      	beq.n	8005b52 <USB_EPClearStall+0x4c>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	78db      	ldrb	r3, [r3, #3]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d138      	bne.n	8005bc4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	e027      	b.n	8005bc4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	78db      	ldrb	r3, [r3, #3]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d003      	beq.n	8005ba4 <USB_EPClearStall+0x9e>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	78db      	ldrb	r3, [r3, #3]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d10f      	bne.n	8005bc4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005bf4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c38:	f023 0303 	bic.w	r3, r3, #3
 8005c3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4c:	f023 0302 	bic.w	r3, r3, #2
 8005c50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c8e:	f043 0302 	orr.w	r3, r3, #2
 8005c92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cba:	68fb      	ldr	r3, [r7, #12]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	0c1b      	lsrs	r3, r3, #16
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	b29b      	uxth	r3, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9c:	01db      	lsls	r3, r3, #7
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4013      	ands	r3, r2
 8005db8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dba:	68bb      	ldr	r3, [r7, #8]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e02:	f023 0307 	bic.w	r3, r3, #7
 8005e06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
	...

08005e2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	460b      	mov	r3, r1
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	333c      	adds	r3, #60	; 0x3c
 8005e42:	3304      	adds	r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <USB_EP0_OutStart+0xb8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d90a      	bls.n	8005e66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e60:	d101      	bne.n	8005e66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e037      	b.n	8005ed6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	2300      	movs	r3, #0
 8005e70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e94:	f043 0318 	orr.w	r3, r3, #24
 8005e98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005eac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005eae:	7afb      	ldrb	r3, [r7, #11]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d10f      	bne.n	8005ed4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	461a      	mov	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ece:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ed2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	4f54300a 	.word	0x4f54300a

08005ee8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <USB_CoreReset+0x64>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e01b      	b.n	8005f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	daf2      	bge.n	8005ef4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f043 0201 	orr.w	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3301      	adds	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <USB_CoreReset+0x64>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d901      	bls.n	8005f30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e006      	b.n	8005f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d0f0      	beq.n	8005f1e <USB_CoreReset+0x36>

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	00030d40 	.word	0x00030d40

08005f50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f60:	f002 f96e 	bl	8008240 <USBD_static_malloc>
 8005f64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005f74:	2302      	movs	r3, #2
 8005f76:	e066      	b.n	8006046 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	7c1b      	ldrb	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d119      	bne.n	8005fbc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	2181      	movs	r1, #129	; 0x81
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f002 f832 	bl	8007ffa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f002 f828 	bl	8007ffa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2210      	movs	r2, #16
 8005fb6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005fba:	e016      	b.n	8005fea <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fbc:	2340      	movs	r3, #64	; 0x40
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	2181      	movs	r1, #129	; 0x81
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f002 f819 	bl	8007ffa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005fce:	2340      	movs	r3, #64	; 0x40
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f002 f810 	bl	8007ffa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fea:	2308      	movs	r3, #8
 8005fec:	2203      	movs	r2, #3
 8005fee:	2182      	movs	r1, #130	; 0x82
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f002 f802 	bl	8007ffa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	7c1b      	ldrb	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800602a:	2101      	movs	r1, #1
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f002 f8d3 	bl	80081d8 <USBD_LL_PrepareReceive>
 8006032:	e007      	b.n	8006044 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800603a:	2340      	movs	r3, #64	; 0x40
 800603c:	2101      	movs	r1, #1
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f002 f8ca 	bl	80081d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800605a:	2181      	movs	r1, #129	; 0x81
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 fff2 	bl	8008046 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006068:	2101      	movs	r1, #1
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f001 ffeb 	bl	8008046 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006078:	2182      	movs	r1, #130	; 0x82
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 ffe3 	bl	8008046 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00e      	beq.n	80060b8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 f8d6 	bl	800825c <USBD_static_free>
    pdev->pClassData = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e0af      	b.n	800624c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d03f      	beq.n	8006178 <USBD_CDC_Setup+0xb4>
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	f040 809f 	bne.w	800623c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	88db      	ldrh	r3, [r3, #6]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d02e      	beq.n	8006164 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	b25b      	sxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	da16      	bge.n	800613e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800611c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	88d2      	ldrh	r2, [r2, #6]
 8006122:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	88db      	ldrh	r3, [r3, #6]
 8006128:	2b07      	cmp	r3, #7
 800612a:	bf28      	it	cs
 800612c:	2307      	movcs	r3, #7
 800612e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	89fa      	ldrh	r2, [r7, #14]
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 fb19 	bl	800776e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800613c:	e085      	b.n	800624a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	785a      	ldrb	r2, [r3, #1]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	88db      	ldrh	r3, [r3, #6]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006154:	6939      	ldr	r1, [r7, #16]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	88db      	ldrh	r3, [r3, #6]
 800615a:	461a      	mov	r2, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fb32 	bl	80077c6 <USBD_CtlPrepareRx>
      break;
 8006162:	e072      	b.n	800624a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	7850      	ldrb	r0, [r2, #1]
 8006170:	2200      	movs	r2, #0
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	4798      	blx	r3
      break;
 8006176:	e068      	b.n	800624a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b0b      	cmp	r3, #11
 800617e:	d852      	bhi.n	8006226 <USBD_CDC_Setup+0x162>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <USBD_CDC_Setup+0xc4>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061b9 	.word	0x080061b9
 800618c:	08006235 	.word	0x08006235
 8006190:	08006227 	.word	0x08006227
 8006194:	08006227 	.word	0x08006227
 8006198:	08006227 	.word	0x08006227
 800619c:	08006227 	.word	0x08006227
 80061a0:	08006227 	.word	0x08006227
 80061a4:	08006227 	.word	0x08006227
 80061a8:	08006227 	.word	0x08006227
 80061ac:	08006227 	.word	0x08006227
 80061b0:	080061e3 	.word	0x080061e3
 80061b4:	0800620d 	.word	0x0800620d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d107      	bne.n	80061d4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061c4:	f107 030a 	add.w	r3, r7, #10
 80061c8:	2202      	movs	r2, #2
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 face 	bl	800776e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061d2:	e032      	b.n	800623a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 fa58 	bl	800768c <USBD_CtlError>
            ret = USBD_FAIL;
 80061dc:	2303      	movs	r3, #3
 80061de:	75fb      	strb	r3, [r7, #23]
          break;
 80061e0:	e02b      	b.n	800623a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d107      	bne.n	80061fe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061ee:	f107 030d 	add.w	r3, r7, #13
 80061f2:	2201      	movs	r2, #1
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 fab9 	bl	800776e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061fc:	e01d      	b.n	800623a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 fa43 	bl	800768c <USBD_CtlError>
            ret = USBD_FAIL;
 8006206:	2303      	movs	r3, #3
 8006208:	75fb      	strb	r3, [r7, #23]
          break;
 800620a:	e016      	b.n	800623a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b03      	cmp	r3, #3
 8006216:	d00f      	beq.n	8006238 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 fa36 	bl	800768c <USBD_CtlError>
            ret = USBD_FAIL;
 8006220:	2303      	movs	r3, #3
 8006222:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006224:	e008      	b.n	8006238 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fa2f 	bl	800768c <USBD_CtlError>
          ret = USBD_FAIL;
 800622e:	2303      	movs	r3, #3
 8006230:	75fb      	strb	r3, [r7, #23]
          break;
 8006232:	e002      	b.n	800623a <USBD_CDC_Setup+0x176>
          break;
 8006234:	bf00      	nop
 8006236:	e008      	b.n	800624a <USBD_CDC_Setup+0x186>
          break;
 8006238:	bf00      	nop
      }
      break;
 800623a:	e006      	b.n	800624a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fa24 	bl	800768c <USBD_CtlError>
      ret = USBD_FAIL;
 8006244:	2303      	movs	r3, #3
 8006246:	75fb      	strb	r3, [r7, #23]
      break;
 8006248:	bf00      	nop
  }

  return (uint8_t)ret;
 800624a:	7dfb      	ldrb	r3, [r7, #23]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006266:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006272:	2303      	movs	r3, #3
 8006274:	e04f      	b.n	8006316 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800627c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800627e:	78fa      	ldrb	r2, [r7, #3]
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	3318      	adds	r3, #24
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d029      	beq.n	80062e8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	3318      	adds	r3, #24
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	78f9      	ldrb	r1, [r7, #3]
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	460b      	mov	r3, r1
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	1a5b      	subs	r3, r3, r1
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4403      	add	r3, r0
 80062b4:	3344      	adds	r3, #68	; 0x44
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80062bc:	fb03 f301 	mul.w	r3, r3, r1
 80062c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d110      	bne.n	80062e8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	440b      	add	r3, r1
 80062d4:	3318      	adds	r3, #24
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062da:	78f9      	ldrb	r1, [r7, #3]
 80062dc:	2300      	movs	r3, #0
 80062de:	2200      	movs	r2, #0
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 ff58 	bl	8008196 <USBD_LL_Transmit>
 80062e6:	e015      	b.n	8006314 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006310:	78fa      	ldrb	r2, [r7, #3]
 8006312:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006330:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800633c:	2303      	movs	r3, #3
 800633e:	e015      	b.n	800636c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 ff68 	bl	800821a <USBD_LL_GetRxDataSize>
 800634a:	4602      	mov	r2, r0
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006366:	4611      	mov	r1, r2
 8006368:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006382:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800638a:	2303      	movs	r3, #3
 800638c:	e01b      	b.n	80063c6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d015      	beq.n	80063c4 <USBD_CDC_EP0_RxReady+0x50>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800639e:	2bff      	cmp	r3, #255	; 0xff
 80063a0:	d010      	beq.n	80063c4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80063b0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063b8:	b292      	uxth	r2, r2
 80063ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	22ff      	movs	r2, #255	; 0xff
 80063c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2243      	movs	r2, #67	; 0x43
 80063dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80063de:	4b03      	ldr	r3, [pc, #12]	; (80063ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20000094 	.word	0x20000094

080063f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2243      	movs	r2, #67	; 0x43
 80063fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80063fe:	4b03      	ldr	r3, [pc, #12]	; (800640c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	20000050 	.word	0x20000050

08006410 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2243      	movs	r2, #67	; 0x43
 800641c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800641e:	4b03      	ldr	r3, [pc, #12]	; (800642c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	200000d8 	.word	0x200000d8

08006430 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	220a      	movs	r2, #10
 800643c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800643e:	4b03      	ldr	r3, [pc, #12]	; (800644c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	2000000c 	.word	0x2000000c

08006450 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006460:	2303      	movs	r3, #3
 8006462:	e004      	b.n	800646e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800647a:	b480      	push	{r7}
 800647c:	b087      	sub	sp, #28
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006494:	2303      	movs	r3, #3
 8006496:	e008      	b.n	80064aa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e004      	b.n	80064dc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006506:	2303      	movs	r3, #3
 8006508:	e01a      	b.n	8006540 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006510:	2b00      	cmp	r3, #0
 8006512:	d114      	bne.n	800653e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2201      	movs	r2, #1
 8006518:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006532:	2181      	movs	r1, #129	; 0x81
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 fe2e 	bl	8008196 <USBD_LL_Transmit>

    ret = USBD_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800653e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006556:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006562:	2303      	movs	r3, #3
 8006564:	e016      	b.n	8006594 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	7c1b      	ldrb	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d109      	bne.n	8006582 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006578:	2101      	movs	r1, #1
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f001 fe2c 	bl	80081d8 <USBD_LL_PrepareReceive>
 8006580:	e007      	b.n	8006592 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006588:	2340      	movs	r3, #64	; 0x40
 800658a:	2101      	movs	r1, #1
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fe23 	bl	80081d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e01f      	b.n	80065f4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	79fa      	ldrb	r2, [r7, #7]
 80065e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f001 fc9f 	bl	8007f2c <USBD_LL_Init>
 80065ee:	4603      	mov	r3, r0
 80065f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006610:	2303      	movs	r3, #3
 8006612:	e016      	b.n	8006642 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00b      	beq.n	8006640 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	f107 020e 	add.w	r2, r7, #14
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
 8006638:	4602      	mov	r2, r0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 fcb6 	bl	8007fc4 <USBD_LL_Start>
 8006658:	4603      	mov	r3, r0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006684:	2303      	movs	r3, #3
 8006686:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	4611      	mov	r1, r2
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	4611      	mov	r1, r2
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
  }

  return USBD_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 ff90 	bl	8007618 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	2b02      	cmp	r3, #2
 800671a:	d01a      	beq.n	8006752 <USBD_LL_SetupStage+0x72>
 800671c:	2b02      	cmp	r3, #2
 800671e:	d822      	bhi.n	8006766 <USBD_LL_SetupStage+0x86>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <USBD_LL_SetupStage+0x4a>
 8006724:	2b01      	cmp	r3, #1
 8006726:	d00a      	beq.n	800673e <USBD_LL_SetupStage+0x5e>
 8006728:	e01d      	b.n	8006766 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa62 	bl	8006bfc <USBD_StdDevReq>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	e020      	b.n	8006780 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fac6 	bl	8006cd8 <USBD_StdItfReq>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
      break;
 8006750:	e016      	b.n	8006780 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fb05 	bl	8006d6a <USBD_StdEPReq>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]
      break;
 8006764:	e00c      	b.n	8006780 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800676c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006770:	b2db      	uxtb	r3, r3
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 fc85 	bl	8008084 <USBD_LL_StallEP>
 800677a:	4603      	mov	r3, r0
 800677c:	73fb      	strb	r3, [r7, #15]
      break;
 800677e:	bf00      	nop
  }

  return ret;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b086      	sub	sp, #24
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	460b      	mov	r3, r1
 8006794:	607a      	str	r2, [r7, #4]
 8006796:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006798:	7afb      	ldrb	r3, [r7, #11]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d138      	bne.n	8006810 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d14a      	bne.n	8006846 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d913      	bls.n	80067e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	1ad2      	subs	r2, r2, r3
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	4293      	cmp	r3, r2
 80067d4:	bf28      	it	cs
 80067d6:	4613      	movcs	r3, r2
 80067d8:	461a      	mov	r2, r3
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f001 f80f 	bl	8007800 <USBD_CtlContinueRx>
 80067e2:	e030      	b.n	8006846 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d10b      	bne.n	8006808 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f001 f80a 	bl	8007822 <USBD_CtlSendStatus>
 800680e:	e01a      	b.n	8006846 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b03      	cmp	r3, #3
 800681a:	d114      	bne.n	8006846 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00e      	beq.n	8006846 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	7afa      	ldrb	r2, [r7, #11]
 8006832:	4611      	mov	r1, r2
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	4798      	blx	r3
 8006838:	4603      	mov	r3, r0
 800683a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	e000      	b.n	8006848 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	460b      	mov	r3, r1
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800685e:	7afb      	ldrb	r3, [r7, #11]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d16b      	bne.n	800693c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3314      	adds	r3, #20
 8006868:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006870:	2b02      	cmp	r3, #2
 8006872:	d156      	bne.n	8006922 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	429a      	cmp	r2, r3
 800687e:	d914      	bls.n	80068aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	1ad2      	subs	r2, r2, r3
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	461a      	mov	r2, r3
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 ff84 	bl	80077a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800689c:	2300      	movs	r3, #0
 800689e:	2200      	movs	r2, #0
 80068a0:	2100      	movs	r1, #0
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f001 fc98 	bl	80081d8 <USBD_LL_PrepareReceive>
 80068a8:	e03b      	b.n	8006922 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d11c      	bne.n	80068f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068be:	429a      	cmp	r2, r3
 80068c0:	d316      	bcc.n	80068f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d20f      	bcs.n	80068f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068d0:	2200      	movs	r2, #0
 80068d2:	2100      	movs	r1, #0
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 ff65 	bl	80077a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068e2:	2300      	movs	r3, #0
 80068e4:	2200      	movs	r2, #0
 80068e6:	2100      	movs	r1, #0
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f001 fc75 	bl	80081d8 <USBD_LL_PrepareReceive>
 80068ee:	e018      	b.n	8006922 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d10b      	bne.n	8006914 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006914:	2180      	movs	r1, #128	; 0x80
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f001 fbb4 	bl	8008084 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 ff93 	bl	8007848 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006928:	2b01      	cmp	r3, #1
 800692a:	d122      	bne.n	8006972 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff fe98 	bl	8006662 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800693a:	e01a      	b.n	8006972 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b03      	cmp	r3, #3
 8006946:	d114      	bne.n	8006972 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00e      	beq.n	8006972 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	7afa      	ldrb	r2, [r7, #11]
 800695e:	4611      	mov	r1, r2
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	4798      	blx	r3
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	e000      	b.n	8006974 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e02f      	b.n	8006a10 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00f      	beq.n	80069da <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d009      	beq.n	80069da <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6852      	ldr	r2, [r2, #4]
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	4611      	mov	r1, r2
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069da:	2340      	movs	r3, #64	; 0x40
 80069dc:	2200      	movs	r2, #0
 80069de:	2100      	movs	r1, #0
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fb0a 	bl	8007ffa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2240      	movs	r2, #64	; 0x40
 80069f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069f6:	2340      	movs	r3, #64	; 0x40
 80069f8:	2200      	movs	r2, #0
 80069fa:	2180      	movs	r1, #128	; 0x80
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fafc 	bl	8007ffa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2240      	movs	r2, #64	; 0x40
 8006a0c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	78fa      	ldrb	r2, [r7, #3]
 8006a28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2204      	movs	r2, #4
 8006a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d106      	bne.n	8006a86 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e012      	b.n	8006ad0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d10b      	bne.n	8006ace <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e014      	b.n	8006b1c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d10d      	bne.n	8006b1a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	4611      	mov	r1, r2
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e014      	b.n	8006b68 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d10d      	bne.n	8006b66 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	78fa      	ldrb	r2, [r7, #3]
 8006b60:	4611      	mov	r1, r2
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6852      	ldr	r2, [r2, #4]
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	4611      	mov	r1, r2
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
  }

  return USBD_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b087      	sub	sp, #28
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bdc:	8a3b      	ldrh	r3, [r7, #16]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	b21a      	sxth	r2, r3
 8006be2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	b21b      	sxth	r3, r3
 8006bea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bec:	89fb      	ldrh	r3, [r7, #14]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
	...

08006bfc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d005      	beq.n	8006c22 <USBD_StdDevReq+0x26>
 8006c16:	2b40      	cmp	r3, #64	; 0x40
 8006c18:	d853      	bhi.n	8006cc2 <USBD_StdDevReq+0xc6>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <USBD_StdDevReq+0x3a>
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d14f      	bne.n	8006cc2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	4798      	blx	r3
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]
      break;
 8006c34:	e04a      	b.n	8006ccc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	785b      	ldrb	r3, [r3, #1]
 8006c3a:	2b09      	cmp	r3, #9
 8006c3c:	d83b      	bhi.n	8006cb6 <USBD_StdDevReq+0xba>
 8006c3e:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <USBD_StdDevReq+0x48>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c99 	.word	0x08006c99
 8006c48:	08006cad 	.word	0x08006cad
 8006c4c:	08006cb7 	.word	0x08006cb7
 8006c50:	08006ca3 	.word	0x08006ca3
 8006c54:	08006cb7 	.word	0x08006cb7
 8006c58:	08006c77 	.word	0x08006c77
 8006c5c:	08006c6d 	.word	0x08006c6d
 8006c60:	08006cb7 	.word	0x08006cb7
 8006c64:	08006c8f 	.word	0x08006c8f
 8006c68:	08006c81 	.word	0x08006c81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f9de 	bl	8007030 <USBD_GetDescriptor>
          break;
 8006c74:	e024      	b.n	8006cc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fb43 	bl	8007304 <USBD_SetAddress>
          break;
 8006c7e:	e01f      	b.n	8006cc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fb82 	bl	800738c <USBD_SetConfig>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]
          break;
 8006c8c:	e018      	b.n	8006cc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fc21 	bl	80074d8 <USBD_GetConfig>
          break;
 8006c96:	e013      	b.n	8006cc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fc52 	bl	8007544 <USBD_GetStatus>
          break;
 8006ca0:	e00e      	b.n	8006cc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fc81 	bl	80075ac <USBD_SetFeature>
          break;
 8006caa:	e009      	b.n	8006cc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fc90 	bl	80075d4 <USBD_ClrFeature>
          break;
 8006cb4:	e004      	b.n	8006cc0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fce7 	bl	800768c <USBD_CtlError>
          break;
 8006cbe:	bf00      	nop
      }
      break;
 8006cc0:	e004      	b.n	8006ccc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fce1 	bl	800768c <USBD_CtlError>
      break;
 8006cca:	bf00      	nop
  }

  return ret;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop

08006cd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d005      	beq.n	8006cfe <USBD_StdItfReq+0x26>
 8006cf2:	2b40      	cmp	r3, #64	; 0x40
 8006cf4:	d82f      	bhi.n	8006d56 <USBD_StdItfReq+0x7e>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <USBD_StdItfReq+0x26>
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d12b      	bne.n	8006d56 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d81d      	bhi.n	8006d48 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	889b      	ldrh	r3, [r3, #4]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d813      	bhi.n	8006d3e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	4798      	blx	r3
 8006d24:	4603      	mov	r3, r0
 8006d26:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	88db      	ldrh	r3, [r3, #6]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d110      	bne.n	8006d52 <USBD_StdItfReq+0x7a>
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10d      	bne.n	8006d52 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fd73 	bl	8007822 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d3c:	e009      	b.n	8006d52 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fca3 	bl	800768c <USBD_CtlError>
          break;
 8006d46:	e004      	b.n	8006d52 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fc9e 	bl	800768c <USBD_CtlError>
          break;
 8006d50:	e000      	b.n	8006d54 <USBD_StdItfReq+0x7c>
          break;
 8006d52:	bf00      	nop
      }
      break;
 8006d54:	e004      	b.n	8006d60 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fc97 	bl	800768c <USBD_CtlError>
      break;
 8006d5e:	bf00      	nop
  }

  return ret;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	889b      	ldrh	r3, [r3, #4]
 8006d7c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d86:	2b40      	cmp	r3, #64	; 0x40
 8006d88:	d007      	beq.n	8006d9a <USBD_StdEPReq+0x30>
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	f200 8145 	bhi.w	800701a <USBD_StdEPReq+0x2b0>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00c      	beq.n	8006dae <USBD_StdEPReq+0x44>
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	f040 8140 	bne.w	800701a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dac:	e13a      	b.n	8007024 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	785b      	ldrb	r3, [r3, #1]
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d007      	beq.n	8006dc6 <USBD_StdEPReq+0x5c>
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	f300 8129 	bgt.w	800700e <USBD_StdEPReq+0x2a4>
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d07f      	beq.n	8006ec0 <USBD_StdEPReq+0x156>
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d03c      	beq.n	8006e3e <USBD_StdEPReq+0xd4>
 8006dc4:	e123      	b.n	800700e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d002      	beq.n	8006dd8 <USBD_StdEPReq+0x6e>
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d016      	beq.n	8006e04 <USBD_StdEPReq+0x9a>
 8006dd6:	e02c      	b.n	8006e32 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00d      	beq.n	8006dfa <USBD_StdEPReq+0x90>
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	2b80      	cmp	r3, #128	; 0x80
 8006de2:	d00a      	beq.n	8006dfa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 f94b 	bl	8008084 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dee:	2180      	movs	r1, #128	; 0x80
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 f947 	bl	8008084 <USBD_LL_StallEP>
 8006df6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006df8:	e020      	b.n	8006e3c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fc45 	bl	800768c <USBD_CtlError>
              break;
 8006e02:	e01b      	b.n	8006e3c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	885b      	ldrh	r3, [r3, #2]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10e      	bne.n	8006e2a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <USBD_StdEPReq+0xc0>
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b80      	cmp	r3, #128	; 0x80
 8006e16:	d008      	beq.n	8006e2a <USBD_StdEPReq+0xc0>
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	88db      	ldrh	r3, [r3, #6]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d104      	bne.n	8006e2a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 f92d 	bl	8008084 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fcf9 	bl	8007822 <USBD_CtlSendStatus>

              break;
 8006e30:	e004      	b.n	8006e3c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fc29 	bl	800768c <USBD_CtlError>
              break;
 8006e3a:	bf00      	nop
          }
          break;
 8006e3c:	e0ec      	b.n	8007018 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d002      	beq.n	8006e50 <USBD_StdEPReq+0xe6>
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d016      	beq.n	8006e7c <USBD_StdEPReq+0x112>
 8006e4e:	e030      	b.n	8006eb2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00d      	beq.n	8006e72 <USBD_StdEPReq+0x108>
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	2b80      	cmp	r3, #128	; 0x80
 8006e5a:	d00a      	beq.n	8006e72 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 f90f 	bl	8008084 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e66:	2180      	movs	r1, #128	; 0x80
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 f90b 	bl	8008084 <USBD_LL_StallEP>
 8006e6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e70:	e025      	b.n	8006ebe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fc09 	bl	800768c <USBD_CtlError>
              break;
 8006e7a:	e020      	b.n	8006ebe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	885b      	ldrh	r3, [r3, #2]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d11b      	bne.n	8006ebc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 f915 	bl	80080c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fcc2 	bl	8007822 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
 8006eac:	4603      	mov	r3, r0
 8006eae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006eb0:	e004      	b.n	8006ebc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fbe9 	bl	800768c <USBD_CtlError>
              break;
 8006eba:	e000      	b.n	8006ebe <USBD_StdEPReq+0x154>
              break;
 8006ebc:	bf00      	nop
          }
          break;
 8006ebe:	e0ab      	b.n	8007018 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d002      	beq.n	8006ed2 <USBD_StdEPReq+0x168>
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d032      	beq.n	8006f36 <USBD_StdEPReq+0x1cc>
 8006ed0:	e097      	b.n	8007002 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d007      	beq.n	8006ee8 <USBD_StdEPReq+0x17e>
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b80      	cmp	r3, #128	; 0x80
 8006edc:	d004      	beq.n	8006ee8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fbd3 	bl	800768c <USBD_CtlError>
                break;
 8006ee6:	e091      	b.n	800700c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	da0b      	bge.n	8006f08 <USBD_StdEPReq+0x19e>
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
 8006ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	3310      	adds	r3, #16
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4413      	add	r3, r2
 8006f04:	3304      	adds	r3, #4
 8006f06:	e00b      	b.n	8006f20 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	3304      	adds	r3, #4
 8006f20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fc1d 	bl	800776e <USBD_CtlSendData>
              break;
 8006f34:	e06a      	b.n	800700c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	da11      	bge.n	8006f62 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	f003 020f 	and.w	r2, r3, #15
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	3324      	adds	r3, #36	; 0x24
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d117      	bne.n	8006f88 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fb96 	bl	800768c <USBD_CtlError>
                  break;
 8006f60:	e054      	b.n	800700c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	f003 020f 	and.w	r2, r3, #15
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fb83 	bl	800768c <USBD_CtlError>
                  break;
 8006f86:	e041      	b.n	800700c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	da0b      	bge.n	8006fa8 <USBD_StdEPReq+0x23e>
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	3310      	adds	r3, #16
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	e00b      	b.n	8006fc0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <USBD_StdEPReq+0x264>
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	2b80      	cmp	r3, #128	; 0x80
 8006fcc:	d103      	bne.n	8006fd6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e00e      	b.n	8006ff4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 f890 	bl	8008100 <USBD_LL_IsStallEP>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	e002      	b.n	8006ff4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fbb7 	bl	800776e <USBD_CtlSendData>
              break;
 8007000:	e004      	b.n	800700c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fb41 	bl	800768c <USBD_CtlError>
              break;
 800700a:	bf00      	nop
          }
          break;
 800700c:	e004      	b.n	8007018 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fb3b 	bl	800768c <USBD_CtlError>
          break;
 8007016:	bf00      	nop
      }
      break;
 8007018:	e004      	b.n	8007024 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fb35 	bl	800768c <USBD_CtlError>
      break;
 8007022:	bf00      	nop
  }

  return ret;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	885b      	ldrh	r3, [r3, #2]
 800704a:	0a1b      	lsrs	r3, r3, #8
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	2b06      	cmp	r3, #6
 8007052:	f200 8128 	bhi.w	80072a6 <USBD_GetDescriptor+0x276>
 8007056:	a201      	add	r2, pc, #4	; (adr r2, 800705c <USBD_GetDescriptor+0x2c>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	08007079 	.word	0x08007079
 8007060:	08007091 	.word	0x08007091
 8007064:	080070d1 	.word	0x080070d1
 8007068:	080072a7 	.word	0x080072a7
 800706c:	080072a7 	.word	0x080072a7
 8007070:	08007247 	.word	0x08007247
 8007074:	08007273 	.word	0x08007273
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	7c12      	ldrb	r2, [r2, #16]
 8007084:	f107 0108 	add.w	r1, r7, #8
 8007088:	4610      	mov	r0, r2
 800708a:	4798      	blx	r3
 800708c:	60f8      	str	r0, [r7, #12]
      break;
 800708e:	e112      	b.n	80072b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	7c1b      	ldrb	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10d      	bne.n	80070b4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	f107 0208 	add.w	r2, r7, #8
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	2202      	movs	r2, #2
 80070b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070b2:	e100      	b.n	80072b6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	f107 0208 	add.w	r2, r7, #8
 80070c0:	4610      	mov	r0, r2
 80070c2:	4798      	blx	r3
 80070c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	2202      	movs	r2, #2
 80070cc:	701a      	strb	r2, [r3, #0]
      break;
 80070ce:	e0f2      	b.n	80072b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	885b      	ldrh	r3, [r3, #2]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b05      	cmp	r3, #5
 80070d8:	f200 80ac 	bhi.w	8007234 <USBD_GetDescriptor+0x204>
 80070dc:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <USBD_GetDescriptor+0xb4>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	080070fd 	.word	0x080070fd
 80070e8:	08007131 	.word	0x08007131
 80070ec:	08007165 	.word	0x08007165
 80070f0:	08007199 	.word	0x08007199
 80070f4:	080071cd 	.word	0x080071cd
 80070f8:	08007201 	.word	0x08007201
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	7c12      	ldrb	r2, [r2, #16]
 8007114:	f107 0108 	add.w	r1, r7, #8
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711e:	e091      	b.n	8007244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fab2 	bl	800768c <USBD_CtlError>
            err++;
 8007128:	7afb      	ldrb	r3, [r7, #11]
 800712a:	3301      	adds	r3, #1
 800712c:	72fb      	strb	r3, [r7, #11]
          break;
 800712e:	e089      	b.n	8007244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	7c12      	ldrb	r2, [r2, #16]
 8007148:	f107 0108 	add.w	r1, r7, #8
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007152:	e077      	b.n	8007244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa98 	bl	800768c <USBD_CtlError>
            err++;
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	3301      	adds	r3, #1
 8007160:	72fb      	strb	r3, [r7, #11]
          break;
 8007162:	e06f      	b.n	8007244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	7c12      	ldrb	r2, [r2, #16]
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	4610      	mov	r0, r2
 8007182:	4798      	blx	r3
 8007184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007186:	e05d      	b.n	8007244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa7e 	bl	800768c <USBD_CtlError>
            err++;
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	3301      	adds	r3, #1
 8007194:	72fb      	strb	r3, [r7, #11]
          break;
 8007196:	e055      	b.n	8007244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00b      	beq.n	80071bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	7c12      	ldrb	r2, [r2, #16]
 80071b0:	f107 0108 	add.w	r1, r7, #8
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
 80071b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ba:	e043      	b.n	8007244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa64 	bl	800768c <USBD_CtlError>
            err++;
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	3301      	adds	r3, #1
 80071c8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ca:	e03b      	b.n	8007244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	7c12      	ldrb	r2, [r2, #16]
 80071e4:	f107 0108 	add.w	r1, r7, #8
 80071e8:	4610      	mov	r0, r2
 80071ea:	4798      	blx	r3
 80071ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ee:	e029      	b.n	8007244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa4a 	bl	800768c <USBD_CtlError>
            err++;
 80071f8:	7afb      	ldrb	r3, [r7, #11]
 80071fa:	3301      	adds	r3, #1
 80071fc:	72fb      	strb	r3, [r7, #11]
          break;
 80071fe:	e021      	b.n	8007244 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	7c12      	ldrb	r2, [r2, #16]
 8007218:	f107 0108 	add.w	r1, r7, #8
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
 8007220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007222:	e00f      	b.n	8007244 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa30 	bl	800768c <USBD_CtlError>
            err++;
 800722c:	7afb      	ldrb	r3, [r7, #11]
 800722e:	3301      	adds	r3, #1
 8007230:	72fb      	strb	r3, [r7, #11]
          break;
 8007232:	e007      	b.n	8007244 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa28 	bl	800768c <USBD_CtlError>
          err++;
 800723c:	7afb      	ldrb	r3, [r7, #11]
 800723e:	3301      	adds	r3, #1
 8007240:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007242:	bf00      	nop
      }
      break;
 8007244:	e037      	b.n	80072b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	7c1b      	ldrb	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007256:	f107 0208 	add.w	r2, r7, #8
 800725a:	4610      	mov	r0, r2
 800725c:	4798      	blx	r3
 800725e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007260:	e029      	b.n	80072b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fa11 	bl	800768c <USBD_CtlError>
        err++;
 800726a:	7afb      	ldrb	r3, [r7, #11]
 800726c:	3301      	adds	r3, #1
 800726e:	72fb      	strb	r3, [r7, #11]
      break;
 8007270:	e021      	b.n	80072b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	7c1b      	ldrb	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10d      	bne.n	8007296 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	f107 0208 	add.w	r2, r7, #8
 8007286:	4610      	mov	r0, r2
 8007288:	4798      	blx	r3
 800728a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	2207      	movs	r2, #7
 8007292:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007294:	e00f      	b.n	80072b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f9f7 	bl	800768c <USBD_CtlError>
        err++;
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	3301      	adds	r3, #1
 80072a2:	72fb      	strb	r3, [r7, #11]
      break;
 80072a4:	e007      	b.n	80072b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f9ef 	bl	800768c <USBD_CtlError>
      err++;
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	3301      	adds	r3, #1
 80072b2:	72fb      	strb	r3, [r7, #11]
      break;
 80072b4:	bf00      	nop
  }

  if (err != 0U)
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d11e      	bne.n	80072fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	88db      	ldrh	r3, [r3, #6]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d016      	beq.n	80072f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80072c4:	893b      	ldrh	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00e      	beq.n	80072e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	88da      	ldrh	r2, [r3, #6]
 80072ce:	893b      	ldrh	r3, [r7, #8]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	bf28      	it	cs
 80072d4:	4613      	movcs	r3, r2
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072da:	893b      	ldrh	r3, [r7, #8]
 80072dc:	461a      	mov	r2, r3
 80072de:	68f9      	ldr	r1, [r7, #12]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fa44 	bl	800776e <USBD_CtlSendData>
 80072e6:	e009      	b.n	80072fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f9ce 	bl	800768c <USBD_CtlError>
 80072f0:	e004      	b.n	80072fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa95 	bl	8007822 <USBD_CtlSendStatus>
 80072f8:	e000      	b.n	80072fc <USBD_GetDescriptor+0x2cc>
    return;
 80072fa:	bf00      	nop
  }
}
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop

08007304 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	889b      	ldrh	r3, [r3, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d131      	bne.n	800737a <USBD_SetAddress+0x76>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	88db      	ldrh	r3, [r3, #6]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d12d      	bne.n	800737a <USBD_SetAddress+0x76>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	885b      	ldrh	r3, [r3, #2]
 8007322:	2b7f      	cmp	r3, #127	; 0x7f
 8007324:	d829      	bhi.n	800737a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007330:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d104      	bne.n	8007348 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f9a3 	bl	800768c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007346:	e01d      	b.n	8007384 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	7bfa      	ldrb	r2, [r7, #15]
 800734c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 feff 	bl	8008158 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fa61 	bl	8007822 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2202      	movs	r2, #2
 800736a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800736e:	e009      	b.n	8007384 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007378:	e004      	b.n	8007384 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f985 	bl	800768c <USBD_CtlError>
  }
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	885b      	ldrh	r3, [r3, #2]
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	4b4c      	ldr	r3, [pc, #304]	; (80074d4 <USBD_SetConfig+0x148>)
 80073a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073a4:	4b4b      	ldr	r3, [pc, #300]	; (80074d4 <USBD_SetConfig+0x148>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d905      	bls.n	80073b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f96c 	bl	800768c <USBD_CtlError>
    return USBD_FAIL;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e088      	b.n	80074ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d002      	beq.n	80073ca <USBD_SetConfig+0x3e>
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d025      	beq.n	8007414 <USBD_SetConfig+0x88>
 80073c8:	e071      	b.n	80074ae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073ca:	4b42      	ldr	r3, [pc, #264]	; (80074d4 <USBD_SetConfig+0x148>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01c      	beq.n	800740c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80073d2:	4b40      	ldr	r3, [pc, #256]	; (80074d4 <USBD_SetConfig+0x148>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073dc:	4b3d      	ldr	r3, [pc, #244]	; (80074d4 <USBD_SetConfig+0x148>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff f948 	bl	8006678 <USBD_SetClassConfig>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d004      	beq.n	80073fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f949 	bl	800768c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073fa:	e065      	b.n	80074c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fa10 	bl	8007822 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2203      	movs	r2, #3
 8007406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800740a:	e05d      	b.n	80074c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fa08 	bl	8007822 <USBD_CtlSendStatus>
      break;
 8007412:	e059      	b.n	80074c8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007414:	4b2f      	ldr	r3, [pc, #188]	; (80074d4 <USBD_SetConfig+0x148>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d112      	bne.n	8007442 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007424:	4b2b      	ldr	r3, [pc, #172]	; (80074d4 <USBD_SetConfig+0x148>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800742e:	4b29      	ldr	r3, [pc, #164]	; (80074d4 <USBD_SetConfig+0x148>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff f93b 	bl	80066b0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f9f1 	bl	8007822 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007440:	e042      	b.n	80074c8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007442:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <USBD_SetConfig+0x148>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	429a      	cmp	r2, r3
 800744e:	d02a      	beq.n	80074a6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff f929 	bl	80066b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800745e:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <USBD_SetConfig+0x148>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007468:	4b1a      	ldr	r3, [pc, #104]	; (80074d4 <USBD_SetConfig+0x148>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff f902 	bl	8006678 <USBD_SetClassConfig>
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00f      	beq.n	800749e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f903 	bl	800768c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff f90e 	bl	80066b0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800749c:	e014      	b.n	80074c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f9bf 	bl	8007822 <USBD_CtlSendStatus>
      break;
 80074a4:	e010      	b.n	80074c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f9bb 	bl	8007822 <USBD_CtlSendStatus>
      break;
 80074ac:	e00c      	b.n	80074c8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f8eb 	bl	800768c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074b6:	4b07      	ldr	r3, [pc, #28]	; (80074d4 <USBD_SetConfig+0x148>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff f8f7 	bl	80066b0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074c2:	2303      	movs	r3, #3
 80074c4:	73fb      	strb	r3, [r7, #15]
      break;
 80074c6:	bf00      	nop
  }

  return ret;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200001c0 	.word	0x200001c0

080074d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	88db      	ldrh	r3, [r3, #6]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d004      	beq.n	80074f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f8cd 	bl	800768c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074f2:	e023      	b.n	800753c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	dc02      	bgt.n	8007506 <USBD_GetConfig+0x2e>
 8007500:	2b00      	cmp	r3, #0
 8007502:	dc03      	bgt.n	800750c <USBD_GetConfig+0x34>
 8007504:	e015      	b.n	8007532 <USBD_GetConfig+0x5a>
 8007506:	2b03      	cmp	r3, #3
 8007508:	d00b      	beq.n	8007522 <USBD_GetConfig+0x4a>
 800750a:	e012      	b.n	8007532 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3308      	adds	r3, #8
 8007516:	2201      	movs	r2, #1
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f927 	bl	800776e <USBD_CtlSendData>
        break;
 8007520:	e00c      	b.n	800753c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3304      	adds	r3, #4
 8007526:	2201      	movs	r2, #1
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f91f 	bl	800776e <USBD_CtlSendData>
        break;
 8007530:	e004      	b.n	800753c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f8a9 	bl	800768c <USBD_CtlError>
        break;
 800753a:	bf00      	nop
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007554:	b2db      	uxtb	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	2b02      	cmp	r3, #2
 800755a:	d81e      	bhi.n	800759a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	88db      	ldrh	r3, [r3, #6]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d004      	beq.n	800756e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f890 	bl	800768c <USBD_CtlError>
        break;
 800756c:	e01a      	b.n	80075a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f043 0202 	orr.w	r2, r3, #2
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	330c      	adds	r3, #12
 800758e:	2202      	movs	r2, #2
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f8eb 	bl	800776e <USBD_CtlSendData>
      break;
 8007598:	e004      	b.n	80075a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f875 	bl	800768c <USBD_CtlError>
      break;
 80075a2:	bf00      	nop
  }
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	885b      	ldrh	r3, [r3, #2]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d106      	bne.n	80075cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f92b 	bl	8007822 <USBD_CtlSendStatus>
  }
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d80b      	bhi.n	8007604 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	885b      	ldrh	r3, [r3, #2]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d10c      	bne.n	800760e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f910 	bl	8007822 <USBD_CtlSendStatus>
      }
      break;
 8007602:	e004      	b.n	800760e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f840 	bl	800768c <USBD_CtlError>
      break;
 800760c:	e000      	b.n	8007610 <USBD_ClrFeature+0x3c>
      break;
 800760e:	bf00      	nop
  }
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	781a      	ldrb	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3301      	adds	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	781a      	ldrb	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff fabb 	bl	8006bbe <SWAPBYTE>
 8007648:	4603      	mov	r3, r0
 800764a:	461a      	mov	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3301      	adds	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f7ff faae 	bl	8006bbe <SWAPBYTE>
 8007662:	4603      	mov	r3, r0
 8007664:	461a      	mov	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3301      	adds	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f7ff faa1 	bl	8006bbe <SWAPBYTE>
 800767c:	4603      	mov	r3, r0
 800767e:	461a      	mov	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	80da      	strh	r2, [r3, #6]
}
 8007684:	bf00      	nop
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007696:	2180      	movs	r1, #128	; 0x80
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fcf3 	bl	8008084 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800769e:	2100      	movs	r1, #0
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fcef 	bl	8008084 <USBD_LL_StallEP>
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b086      	sub	sp, #24
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d036      	beq.n	8007732 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076c8:	6938      	ldr	r0, [r7, #16]
 80076ca:	f000 f836 	bl	800773a <USBD_GetLen>
 80076ce:	4603      	mov	r3, r0
 80076d0:	3301      	adds	r3, #1
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	4413      	add	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	7812      	ldrb	r2, [r2, #0]
 80076e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	3301      	adds	r3, #1
 80076ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	4413      	add	r3, r2
 80076f4:	2203      	movs	r2, #3
 80076f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	3301      	adds	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076fe:	e013      	b.n	8007728 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4413      	add	r3, r2
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	7812      	ldrb	r2, [r2, #0]
 800770a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	3301      	adds	r3, #1
 8007710:	613b      	str	r3, [r7, #16]
    idx++;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	3301      	adds	r3, #1
 8007716:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
    idx++;
 8007722:	7dfb      	ldrb	r3, [r7, #23]
 8007724:	3301      	adds	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e7      	bne.n	8007700 <USBD_GetString+0x52>
 8007730:	e000      	b.n	8007734 <USBD_GetString+0x86>
    return;
 8007732:	bf00      	nop
  }
}
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800774a:	e005      	b.n	8007758 <USBD_GetLen+0x1e>
  {
    len++;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	3301      	adds	r3, #1
 8007750:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	3301      	adds	r3, #1
 8007756:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1f5      	bne.n	800774c <USBD_GetLen+0x12>
  }

  return len;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2202      	movs	r2, #2
 800777e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	2100      	movs	r1, #0
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 fcfe 	bl	8008196 <USBD_LL_Transmit>

  return USBD_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	2100      	movs	r1, #0
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fced 	bl	8008196 <USBD_LL_Transmit>

  return USBD_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2203      	movs	r2, #3
 80077d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	2100      	movs	r1, #0
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 fcf1 	bl	80081d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	2100      	movs	r1, #0
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fce0 	bl	80081d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2204      	movs	r2, #4
 800782e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007832:	2300      	movs	r3, #0
 8007834:	2200      	movs	r2, #0
 8007836:	2100      	movs	r1, #0
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fcac 	bl	8008196 <USBD_LL_Transmit>

  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2205      	movs	r2, #5
 8007854:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007858:	2300      	movs	r3, #0
 800785a:	2200      	movs	r2, #0
 800785c:	2100      	movs	r1, #0
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fcba 	bl	80081d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007874:	2200      	movs	r2, #0
 8007876:	4912      	ldr	r1, [pc, #72]	; (80078c0 <MX_USB_DEVICE_Init+0x50>)
 8007878:	4812      	ldr	r0, [pc, #72]	; (80078c4 <MX_USB_DEVICE_Init+0x54>)
 800787a:	f7fe fe8f 	bl	800659c <USBD_Init>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007884:	f7f9 fbc4 	bl	8001010 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007888:	490f      	ldr	r1, [pc, #60]	; (80078c8 <MX_USB_DEVICE_Init+0x58>)
 800788a:	480e      	ldr	r0, [pc, #56]	; (80078c4 <MX_USB_DEVICE_Init+0x54>)
 800788c:	f7fe feb6 	bl	80065fc <USBD_RegisterClass>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007896:	f7f9 fbbb 	bl	8001010 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800789a:	490c      	ldr	r1, [pc, #48]	; (80078cc <MX_USB_DEVICE_Init+0x5c>)
 800789c:	4809      	ldr	r0, [pc, #36]	; (80078c4 <MX_USB_DEVICE_Init+0x54>)
 800789e:	f7fe fdd7 	bl	8006450 <USBD_CDC_RegisterInterface>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078a8:	f7f9 fbb2 	bl	8001010 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078ac:	4805      	ldr	r0, [pc, #20]	; (80078c4 <MX_USB_DEVICE_Init+0x54>)
 80078ae:	f7fe fecc 	bl	800664a <USBD_Start>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078b8:	f7f9 fbaa 	bl	8001010 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078bc:	bf00      	nop
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000130 	.word	0x20000130
 80078c4:	2000056c 	.word	0x2000056c
 80078c8:	20000018 	.word	0x20000018
 80078cc:	2000011c 	.word	0x2000011c

080078d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078d4:	2200      	movs	r2, #0
 80078d6:	4905      	ldr	r1, [pc, #20]	; (80078ec <CDC_Init_FS+0x1c>)
 80078d8:	4805      	ldr	r0, [pc, #20]	; (80078f0 <CDC_Init_FS+0x20>)
 80078da:	f7fe fdce 	bl	800647a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078de:	4905      	ldr	r1, [pc, #20]	; (80078f4 <CDC_Init_FS+0x24>)
 80078e0:	4803      	ldr	r0, [pc, #12]	; (80078f0 <CDC_Init_FS+0x20>)
 80078e2:	f7fe fde8 	bl	80064b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	2000103c 	.word	0x2000103c
 80078f0:	2000056c 	.word	0x2000056c
 80078f4:	2000083c 	.word	0x2000083c

080078f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078fe:	4618      	mov	r0, r3
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	71fb      	strb	r3, [r7, #7]
 8007914:	4613      	mov	r3, r2
 8007916:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	2b23      	cmp	r3, #35	; 0x23
 800791c:	d84a      	bhi.n	80079b4 <CDC_Control_FS+0xac>
 800791e:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <CDC_Control_FS+0x1c>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	080079b5 	.word	0x080079b5
 8007928:	080079b5 	.word	0x080079b5
 800792c:	080079b5 	.word	0x080079b5
 8007930:	080079b5 	.word	0x080079b5
 8007934:	080079b5 	.word	0x080079b5
 8007938:	080079b5 	.word	0x080079b5
 800793c:	080079b5 	.word	0x080079b5
 8007940:	080079b5 	.word	0x080079b5
 8007944:	080079b5 	.word	0x080079b5
 8007948:	080079b5 	.word	0x080079b5
 800794c:	080079b5 	.word	0x080079b5
 8007950:	080079b5 	.word	0x080079b5
 8007954:	080079b5 	.word	0x080079b5
 8007958:	080079b5 	.word	0x080079b5
 800795c:	080079b5 	.word	0x080079b5
 8007960:	080079b5 	.word	0x080079b5
 8007964:	080079b5 	.word	0x080079b5
 8007968:	080079b5 	.word	0x080079b5
 800796c:	080079b5 	.word	0x080079b5
 8007970:	080079b5 	.word	0x080079b5
 8007974:	080079b5 	.word	0x080079b5
 8007978:	080079b5 	.word	0x080079b5
 800797c:	080079b5 	.word	0x080079b5
 8007980:	080079b5 	.word	0x080079b5
 8007984:	080079b5 	.word	0x080079b5
 8007988:	080079b5 	.word	0x080079b5
 800798c:	080079b5 	.word	0x080079b5
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079b5 	.word	0x080079b5
 8007998:	080079b5 	.word	0x080079b5
 800799c:	080079b5 	.word	0x080079b5
 80079a0:	080079b5 	.word	0x080079b5
 80079a4:	080079b5 	.word	0x080079b5
 80079a8:	080079b5 	.word	0x080079b5
 80079ac:	080079b5 	.word	0x080079b5
 80079b0:	080079b5 	.word	0x080079b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079b4:	bf00      	nop
  }

  return (USBD_OK);
 80079b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	4806      	ldr	r0, [pc, #24]	; (80079ec <CDC_Receive_FS+0x28>)
 80079d2:	f7fe fd70 	bl	80064b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079d6:	4805      	ldr	r0, [pc, #20]	; (80079ec <CDC_Receive_FS+0x28>)
 80079d8:	f7fe fdb6 	bl	8006548 <USBD_CDC_ReceivePacket>
  recvUSBStruct = (struct recvUSBStruct_t*)(Buf);
 80079dc:	4a04      	ldr	r2, [pc, #16]	; (80079f0 <CDC_Receive_FS+0x2c>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6013      	str	r3, [r2, #0]
  return (USBD_OK);
 80079e2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	2000056c 	.word	0x2000056c
 80079f0:	2000019c 	.word	0x2000019c

080079f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a04:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <CDC_Transmit_FS+0x48>)
 8007a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e00b      	b.n	8007a32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a1a:	887b      	ldrh	r3, [r7, #2]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4806      	ldr	r0, [pc, #24]	; (8007a3c <CDC_Transmit_FS+0x48>)
 8007a22:	f7fe fd2a 	bl	800647a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a26:	4805      	ldr	r0, [pc, #20]	; (8007a3c <CDC_Transmit_FS+0x48>)
 8007a28:	f7fe fd5e 	bl	80064e8 <USBD_CDC_TransmitPacket>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	2000056c 	.word	0x2000056c

08007a40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2212      	movs	r2, #18
 8007a74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a76:	4b03      	ldr	r3, [pc, #12]	; (8007a84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	2000014c 	.word	0x2000014c

08007a88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2204      	movs	r2, #4
 8007a98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a9a:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	20000160 	.word	0x20000160

08007aac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d105      	bne.n	8007aca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	4907      	ldr	r1, [pc, #28]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ac2:	4808      	ldr	r0, [pc, #32]	; (8007ae4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ac4:	f7ff fdf3 	bl	80076ae <USBD_GetString>
 8007ac8:	e004      	b.n	8007ad4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	4904      	ldr	r1, [pc, #16]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ace:	4805      	ldr	r0, [pc, #20]	; (8007ae4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ad0:	f7ff fded 	bl	80076ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ad4:	4b02      	ldr	r3, [pc, #8]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	2000183c 	.word	0x2000183c
 8007ae4:	08008338 	.word	0x08008338

08007ae8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	6039      	str	r1, [r7, #0]
 8007af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	4904      	ldr	r1, [pc, #16]	; (8007b08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007af8:	4804      	ldr	r0, [pc, #16]	; (8007b0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007afa:	f7ff fdd8 	bl	80076ae <USBD_GetString>
  return USBD_StrDesc;
 8007afe:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	2000183c 	.word	0x2000183c
 8007b0c:	08008350 	.word	0x08008350

08007b10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	6039      	str	r1, [r7, #0]
 8007b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	221a      	movs	r2, #26
 8007b20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b22:	f000 f843 	bl	8007bac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b26:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20000164 	.word	0x20000164

08007b34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d105      	bne.n	8007b52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4907      	ldr	r1, [pc, #28]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b4a:	4808      	ldr	r0, [pc, #32]	; (8007b6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b4c:	f7ff fdaf 	bl	80076ae <USBD_GetString>
 8007b50:	e004      	b.n	8007b5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4904      	ldr	r1, [pc, #16]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b56:	4805      	ldr	r0, [pc, #20]	; (8007b6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b58:	f7ff fda9 	bl	80076ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b5c:	4b02      	ldr	r3, [pc, #8]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	2000183c 	.word	0x2000183c
 8007b6c:	08008364 	.word	0x08008364

08007b70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d105      	bne.n	8007b8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	4907      	ldr	r1, [pc, #28]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b86:	4808      	ldr	r0, [pc, #32]	; (8007ba8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b88:	f7ff fd91 	bl	80076ae <USBD_GetString>
 8007b8c:	e004      	b.n	8007b98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	4904      	ldr	r1, [pc, #16]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b92:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b94:	f7ff fd8b 	bl	80076ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	2000183c 	.word	0x2000183c
 8007ba8:	08008370 	.word	0x08008370

08007bac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bb2:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <Get_SerialNum+0x44>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <Get_SerialNum+0x48>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bbe:	4b0e      	ldr	r3, [pc, #56]	; (8007bf8 <Get_SerialNum+0x4c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4413      	add	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	4909      	ldr	r1, [pc, #36]	; (8007bfc <Get_SerialNum+0x50>)
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f814 	bl	8007c04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bdc:	2204      	movs	r2, #4
 8007bde:	4908      	ldr	r1, [pc, #32]	; (8007c00 <Get_SerialNum+0x54>)
 8007be0:	68b8      	ldr	r0, [r7, #8]
 8007be2:	f000 f80f 	bl	8007c04 <IntToUnicode>
  }
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	1fff7a10 	.word	0x1fff7a10
 8007bf4:	1fff7a14 	.word	0x1fff7a14
 8007bf8:	1fff7a18 	.word	0x1fff7a18
 8007bfc:	20000166 	.word	0x20000166
 8007c00:	20000176 	.word	0x20000176

08007c04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c16:	2300      	movs	r3, #0
 8007c18:	75fb      	strb	r3, [r7, #23]
 8007c1a:	e027      	b.n	8007c6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	0f1b      	lsrs	r3, r3, #28
 8007c20:	2b09      	cmp	r3, #9
 8007c22:	d80b      	bhi.n	8007c3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	0f1b      	lsrs	r3, r3, #28
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	4619      	mov	r1, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	440b      	add	r3, r1
 8007c34:	3230      	adds	r2, #48	; 0x30
 8007c36:	b2d2      	uxtb	r2, r2
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	e00a      	b.n	8007c52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	0f1b      	lsrs	r3, r3, #28
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	4619      	mov	r1, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	440b      	add	r3, r1
 8007c4c:	3237      	adds	r2, #55	; 0x37
 8007c4e:	b2d2      	uxtb	r2, r2
 8007c50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	4413      	add	r3, r2
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
 8007c6c:	7dfa      	ldrb	r2, [r7, #23]
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d3d3      	bcc.n	8007c1c <IntToUnicode+0x18>
  }
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
	...

08007c84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08a      	sub	sp, #40	; 0x28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c8c:	f107 0314 	add.w	r3, r7, #20
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	605a      	str	r2, [r3, #4]
 8007c96:	609a      	str	r2, [r3, #8]
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ca4:	d147      	bne.n	8007d36 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	613b      	str	r3, [r7, #16]
 8007caa:	4b25      	ldr	r3, [pc, #148]	; (8007d40 <HAL_PCD_MspInit+0xbc>)
 8007cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cae:	4a24      	ldr	r2, [pc, #144]	; (8007d40 <HAL_PCD_MspInit+0xbc>)
 8007cb0:	f043 0301 	orr.w	r3, r3, #1
 8007cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8007cb6:	4b22      	ldr	r3, [pc, #136]	; (8007d40 <HAL_PCD_MspInit+0xbc>)
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	481b      	ldr	r0, [pc, #108]	; (8007d44 <HAL_PCD_MspInit+0xc0>)
 8007cd8:	f7f9 fda6 	bl	8001828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007cdc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cea:	2300      	movs	r3, #0
 8007cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cee:	230a      	movs	r3, #10
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cf2:	f107 0314 	add.w	r3, r7, #20
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4812      	ldr	r0, [pc, #72]	; (8007d44 <HAL_PCD_MspInit+0xc0>)
 8007cfa:	f7f9 fd95 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007cfe:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <HAL_PCD_MspInit+0xbc>)
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	4a0f      	ldr	r2, [pc, #60]	; (8007d40 <HAL_PCD_MspInit+0xbc>)
 8007d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d08:	6353      	str	r3, [r2, #52]	; 0x34
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <HAL_PCD_MspInit+0xbc>)
 8007d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d12:	4a0b      	ldr	r2, [pc, #44]	; (8007d40 <HAL_PCD_MspInit+0xbc>)
 8007d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d18:	6453      	str	r3, [r2, #68]	; 0x44
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <HAL_PCD_MspInit+0xbc>)
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d26:	2200      	movs	r2, #0
 8007d28:	2100      	movs	r1, #0
 8007d2a:	2043      	movs	r0, #67	; 0x43
 8007d2c:	f7f9 fd23 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d30:	2043      	movs	r0, #67	; 0x43
 8007d32:	f7f9 fd3c 	bl	80017ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d36:	bf00      	nop
 8007d38:	3728      	adds	r7, #40	; 0x28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40023800 	.word	0x40023800
 8007d44:	40020000 	.word	0x40020000

08007d48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f7fe fcbe 	bl	80066e0 <USBD_LL_SetupStage>
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007d7e:	78fa      	ldrb	r2, [r7, #3]
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	4619      	mov	r1, r3
 8007d96:	f7fe fcf8 	bl	800678a <USBD_LL_DataOutStage>
}
 8007d9a:	bf00      	nop
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007db4:	78fa      	ldrb	r2, [r7, #3]
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4613      	mov	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	440b      	add	r3, r1
 8007dc2:	3348      	adds	r3, #72	; 0x48
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	78fb      	ldrb	r3, [r7, #3]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	f7fe fd41 	bl	8006850 <USBD_LL_DataInStage>
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fe55 	bl	8006a94 <USBD_LL_SOF>
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d102      	bne.n	8007e0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
 8007e0a:	e008      	b.n	8007e1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d102      	bne.n	8007e1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007e14:	2301      	movs	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	e001      	b.n	8007e1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e1a:	f7f9 f8f9 	bl	8001010 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e24:	7bfa      	ldrb	r2, [r7, #15]
 8007e26:	4611      	mov	r1, r2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe fdf5 	bl	8006a18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fda1 	bl	800697c <USBD_LL_Reset>
}
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fe fdf0 	bl	8006a38 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e6a:	f043 0301 	orr.w	r3, r3, #1
 8007e6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e78:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <HAL_PCD_SuspendCallback+0x48>)
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	4a03      	ldr	r2, [pc, #12]	; (8007e8c <HAL_PCD_SuspendCallback+0x48>)
 8007e7e:	f043 0306 	orr.w	r3, r3, #6
 8007e82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fde0 	bl	8006a64 <USBD_LL_Resume>
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ebe:	78fa      	ldrb	r2, [r7, #3]
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fe2e 	bl	8006b24 <USBD_LL_IsoOUTIncomplete>
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ee2:	78fa      	ldrb	r2, [r7, #3]
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe fdf6 	bl	8006ad8 <USBD_LL_IsoINIncomplete>
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fe34 	bl	8006b70 <USBD_LL_DevConnected>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fe31 	bl	8006b86 <USBD_LL_DevDisconnected>
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d13c      	bne.n	8007fb6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f3c:	4a20      	ldr	r2, [pc, #128]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a1e      	ldr	r2, [pc, #120]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f4c:	4b1c      	ldr	r3, [pc, #112]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f54:	4b1a      	ldr	r3, [pc, #104]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f56:	2204      	movs	r2, #4
 8007f58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f5a:	4b19      	ldr	r3, [pc, #100]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f60:	4b17      	ldr	r3, [pc, #92]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f66:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f68:	2202      	movs	r2, #2
 8007f6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f6c:	4b14      	ldr	r3, [pc, #80]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f72:	4b13      	ldr	r3, [pc, #76]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f78:	4b11      	ldr	r3, [pc, #68]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007f7e:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f80:	2201      	movs	r2, #1
 8007f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f84:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f8a:	480d      	ldr	r0, [pc, #52]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f8c:	f7f9 ff5e 	bl	8001e4c <HAL_PCD_Init>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f96:	f7f9 f83b 	bl	8001010 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f9a:	2180      	movs	r1, #128	; 0x80
 8007f9c:	4808      	ldr	r0, [pc, #32]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007f9e:	f7fb f8bc 	bl	800311a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007fa2:	2240      	movs	r2, #64	; 0x40
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	4806      	ldr	r0, [pc, #24]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007fa8:	f7fb f870 	bl	800308c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fac:	2280      	movs	r2, #128	; 0x80
 8007fae:	2101      	movs	r1, #1
 8007fb0:	4803      	ldr	r0, [pc, #12]	; (8007fc0 <USBD_LL_Init+0x94>)
 8007fb2:	f7fb f86b 	bl	800308c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	20001a3c 	.word	0x20001a3c

08007fc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fa f853 	bl	8002086 <HAL_PCD_Start>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f942 	bl	8008270 <USBD_Get_USB_Status>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	461a      	mov	r2, r3
 8008008:	4603      	mov	r3, r0
 800800a:	70fb      	strb	r3, [r7, #3]
 800800c:	460b      	mov	r3, r1
 800800e:	70bb      	strb	r3, [r7, #2]
 8008010:	4613      	mov	r3, r2
 8008012:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008022:	78bb      	ldrb	r3, [r7, #2]
 8008024:	883a      	ldrh	r2, [r7, #0]
 8008026:	78f9      	ldrb	r1, [r7, #3]
 8008028:	f7fa fc37 	bl	800289a <HAL_PCD_EP_Open>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f91c 	bl	8008270 <USBD_Get_USB_Status>
 8008038:	4603      	mov	r3, r0
 800803a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803c:	7bbb      	ldrb	r3, [r7, #14]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	4611      	mov	r1, r2
 8008064:	4618      	mov	r0, r3
 8008066:	f7fa fc80 	bl	800296a <HAL_PCD_EP_Close>
 800806a:	4603      	mov	r3, r0
 800806c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	4618      	mov	r0, r3
 8008072:	f000 f8fd 	bl	8008270 <USBD_Get_USB_Status>
 8008076:	4603      	mov	r3, r0
 8008078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800807a:	7bbb      	ldrb	r3, [r7, #14]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800809e:	78fa      	ldrb	r2, [r7, #3]
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fa fd58 	bl	8002b58 <HAL_PCD_EP_SetStall>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f8de 	bl	8008270 <USBD_Get_USB_Status>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080dc:	78fa      	ldrb	r2, [r7, #3]
 80080de:	4611      	mov	r1, r2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fa fd9d 	bl	8002c20 <HAL_PCD_EP_ClrStall>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 f8bf 	bl	8008270 <USBD_Get_USB_Status>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008112:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008118:	2b00      	cmp	r3, #0
 800811a:	da0b      	bge.n	8008134 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008122:	68f9      	ldr	r1, [r7, #12]
 8008124:	4613      	mov	r3, r2
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	1a9b      	subs	r3, r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	333e      	adds	r3, #62	; 0x3e
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	e00b      	b.n	800814c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800813a:	68f9      	ldr	r1, [r7, #12]
 800813c:	4613      	mov	r3, r2
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	1a9b      	subs	r3, r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800814a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008172:	78fa      	ldrb	r2, [r7, #3]
 8008174:	4611      	mov	r1, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f7fa fb6a 	bl	8002850 <HAL_PCD_SetAddress>
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	4618      	mov	r0, r3
 8008184:	f000 f874 	bl	8008270 <USBD_Get_USB_Status>
 8008188:	4603      	mov	r3, r0
 800818a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800818c:	7bbb      	ldrb	r3, [r7, #14]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b086      	sub	sp, #24
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
 80081a2:	460b      	mov	r3, r1
 80081a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081b4:	7af9      	ldrb	r1, [r7, #11]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	f7fa fc83 	bl	8002ac4 <HAL_PCD_EP_Transmit>
 80081be:	4603      	mov	r3, r0
 80081c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 f853 	bl	8008270 <USBD_Get_USB_Status>
 80081ca:	4603      	mov	r3, r0
 80081cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	460b      	mov	r3, r1
 80081e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081f6:	7af9      	ldrb	r1, [r7, #11]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	f7fa fbff 	bl	80029fe <HAL_PCD_EP_Receive>
 8008200:	4603      	mov	r3, r0
 8008202:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f832 	bl	8008270 <USBD_Get_USB_Status>
 800820c:	4603      	mov	r3, r0
 800820e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008210:	7dbb      	ldrb	r3, [r7, #22]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800822c:	78fa      	ldrb	r2, [r7, #3]
 800822e:	4611      	mov	r1, r2
 8008230:	4618      	mov	r0, r3
 8008232:	f7fa fc2f 	bl	8002a94 <HAL_PCD_EP_GetRxCount>
 8008236:	4603      	mov	r3, r0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008248:	4b03      	ldr	r3, [pc, #12]	; (8008258 <USBD_static_malloc+0x18>)
}
 800824a:	4618      	mov	r0, r3
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	200001c4 	.word	0x200001c4

0800825c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]

}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	2b03      	cmp	r3, #3
 8008282:	d817      	bhi.n	80082b4 <USBD_Get_USB_Status+0x44>
 8008284:	a201      	add	r2, pc, #4	; (adr r2, 800828c <USBD_Get_USB_Status+0x1c>)
 8008286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828a:	bf00      	nop
 800828c:	0800829d 	.word	0x0800829d
 8008290:	080082a3 	.word	0x080082a3
 8008294:	080082a9 	.word	0x080082a9
 8008298:	080082af 	.word	0x080082af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]
    break;
 80082a0:	e00b      	b.n	80082ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082a2:	2303      	movs	r3, #3
 80082a4:	73fb      	strb	r3, [r7, #15]
    break;
 80082a6:	e008      	b.n	80082ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082a8:	2301      	movs	r3, #1
 80082aa:	73fb      	strb	r3, [r7, #15]
    break;
 80082ac:	e005      	b.n	80082ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082ae:	2303      	movs	r3, #3
 80082b0:	73fb      	strb	r3, [r7, #15]
    break;
 80082b2:	e002      	b.n	80082ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082b4:	2303      	movs	r3, #3
 80082b6:	73fb      	strb	r3, [r7, #15]
    break;
 80082b8:	bf00      	nop
  }
  return usb_status;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <__libc_init_array>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	4d0d      	ldr	r5, [pc, #52]	; (8008300 <__libc_init_array+0x38>)
 80082cc:	4c0d      	ldr	r4, [pc, #52]	; (8008304 <__libc_init_array+0x3c>)
 80082ce:	1b64      	subs	r4, r4, r5
 80082d0:	10a4      	asrs	r4, r4, #2
 80082d2:	2600      	movs	r6, #0
 80082d4:	42a6      	cmp	r6, r4
 80082d6:	d109      	bne.n	80082ec <__libc_init_array+0x24>
 80082d8:	4d0b      	ldr	r5, [pc, #44]	; (8008308 <__libc_init_array+0x40>)
 80082da:	4c0c      	ldr	r4, [pc, #48]	; (800830c <__libc_init_array+0x44>)
 80082dc:	f000 f820 	bl	8008320 <_init>
 80082e0:	1b64      	subs	r4, r4, r5
 80082e2:	10a4      	asrs	r4, r4, #2
 80082e4:	2600      	movs	r6, #0
 80082e6:	42a6      	cmp	r6, r4
 80082e8:	d105      	bne.n	80082f6 <__libc_init_array+0x2e>
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f0:	4798      	blx	r3
 80082f2:	3601      	adds	r6, #1
 80082f4:	e7ee      	b.n	80082d4 <__libc_init_array+0xc>
 80082f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fa:	4798      	blx	r3
 80082fc:	3601      	adds	r6, #1
 80082fe:	e7f2      	b.n	80082e6 <__libc_init_array+0x1e>
 8008300:	080083a0 	.word	0x080083a0
 8008304:	080083a0 	.word	0x080083a0
 8008308:	080083a0 	.word	0x080083a0
 800830c:	080083a8 	.word	0x080083a8

08008310 <memset>:
 8008310:	4402      	add	r2, r0
 8008312:	4603      	mov	r3, r0
 8008314:	4293      	cmp	r3, r2
 8008316:	d100      	bne.n	800831a <memset+0xa>
 8008318:	4770      	bx	lr
 800831a:	f803 1b01 	strb.w	r1, [r3], #1
 800831e:	e7f9      	b.n	8008314 <memset+0x4>

08008320 <_init>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr

0800832c <_fini>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr
