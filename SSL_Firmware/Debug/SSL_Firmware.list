
SSL_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b184  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800b318  0800b318  0001b318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5e8  0800b5e8  00020364  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5e8  0800b5e8  0001b5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5f0  0800b5f0  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5f4  0800b5f4  0001b5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800b5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae4  20000364  0800b95c  00020364  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e48  0800b95c  00021e48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dca4  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ce4  00000000  00000000  0003e038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001778  00000000  00000000  00041d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015d8  00000000  00000000  00043498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025869  00000000  00000000  00044a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015605  00000000  00000000  0006a2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2566  00000000  00000000  0007f8de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151e44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d1c  00000000  00000000  00151ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000364 	.word	0x20000364
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2fc 	.word	0x0800b2fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000368 	.word	0x20000368
 80001cc:	0800b2fc 	.word	0x0800b2fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_TIM_PeriodElapsedCallback>:
volatile uint32_t encVal = 0;
uint32_t encValTemp = 0;
uint8_t debug = 0;
uint8_t usbPackage[19] = "HELLO WORLD\n\r";
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	float angVel;

	encValTemp = encVal;
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a2f      	ldr	r2, [pc, #188]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f56:	6013      	str	r3, [r2, #0]
	encVal = htim1.Instance->CNT;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	4a2c      	ldr	r2, [pc, #176]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f60:	6013      	str	r3, [r2, #0]

	if (encVal < encValTemp)
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d218      	bcs.n	8000fa0 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		angVel = (60*6.28/32)*(encVal + 65535 - encValTemp);
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f7c:	33ff      	adds	r3, #255	; 0xff
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fac0 	bl	8000504 <__aeabi_ui2d>
 8000f84:	a320      	add	r3, pc, #128	; (adr r3, 8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff fb35 	bl	80005f8 <__aeabi_dmul>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460c      	mov	r4, r1
 8000f92:	4618      	mov	r0, r3
 8000f94:	4621      	mov	r1, r4
 8000f96:	f7ff fe07 	bl	8000ba8 <__aeabi_d2f>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e014      	b.n	8000fca <HAL_TIM_PeriodElapsedCallback+0x82>
	}
	else
	{
		angVel = (60*6.28/32)*(encVal - encValTemp);
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff faaa 	bl	8000504 <__aeabi_ui2d>
 8000fb0:	a315      	add	r3, pc, #84	; (adr r3, 8001008 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fb1f 	bl	80005f8 <__aeabi_dmul>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	460c      	mov	r4, r1
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	4621      	mov	r1, r4
 8000fc2:	f7ff fdf1 	bl	8000ba8 <__aeabi_d2f>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	60fb      	str	r3, [r7, #12]
	}

	sprintf(usbPackage, "%f\n\r", angVel);
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff fabc 	bl	8000548 <__aeabi_f2d>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	460c      	mov	r4, r1
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4910      	ldr	r1, [pc, #64]	; (800101c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000fdc:	f008 fe78 	bl	8009cd0 <siprintf>

	while(CDC_Transmit_FS(usbPackage, 19) == USBD_BUSY);
 8000fe0:	bf00      	nop
 8000fe2:	2113      	movs	r1, #19
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000fe6:	f007 fcc1 	bl	800896c <CDC_Transmit_FS>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d0f8      	beq.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x9a>
	debug++;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000ffa:	701a      	strb	r2, [r3, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bd90      	pop	{r4, r7, pc}
 8001004:	f3af 8000 	nop.w
 8001008:	cccccccd 	.word	0xcccccccd
 800100c:	40278ccc 	.word	0x40278ccc
 8001010:	20000380 	.word	0x20000380
 8001014:	20000384 	.word	0x20000384
 8001018:	20000448 	.word	0x20000448
 800101c:	0800b318 	.word	0x0800b318
 8001020:	20000000 	.word	0x20000000
 8001024:	20000388 	.word	0x20000388

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fdd8 	bl	8001be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f83c 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 fa2c 	bl	8001490 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001038:	f000 f8ba 	bl	80011b0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800103c:	f000 f8e6 	bl	800120c <MX_I2S3_Init>
  MX_SPI1_Init();
 8001040:	f000 f914 	bl	800126c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001044:	f000 f97e 	bl	8001344 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001048:	f007 fbd2 	bl	80087f0 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 800104c:	f000 f944 	bl	80012d8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001050:	f000 f9d0 	bl	80013f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001054:	213c      	movs	r1, #60	; 0x3c
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <main+0x70>)
 8001058:	f004 f889 	bl	800516e <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800105c:	480f      	ldr	r0, [pc, #60]	; (800109c <main+0x74>)
 800105e:	f003 ffd0 	bl	8005002 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(usbPackage, "%d\n\r", debug);
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <main+0x78>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	490e      	ldr	r1, [pc, #56]	; (80010a4 <main+0x7c>)
 800106a:	480f      	ldr	r0, [pc, #60]	; (80010a8 <main+0x80>)
 800106c:	f008 fe30 	bl	8009cd0 <siprintf>
	  while(CDC_Transmit_FS(usbPackage, 19) == USBD_BUSY);
 8001070:	bf00      	nop
 8001072:	2113      	movs	r1, #19
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <main+0x80>)
 8001076:	f007 fc79 	bl	800896c <CDC_Transmit_FS>
 800107a:	4603      	mov	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d0f8      	beq.n	8001072 <main+0x4a>
	  debug++;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <main+0x78>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <main+0x78>)
 800108a:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 800108c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001090:	f000 fe18 	bl	8001cc4 <HAL_Delay>
	  sprintf(usbPackage, "%d\n\r", debug);
 8001094:	e7e5      	b.n	8001062 <main+0x3a>
 8001096:	bf00      	nop
 8001098:	20000448 	.word	0x20000448
 800109c:	200004e0 	.word	0x200004e0
 80010a0:	20000388 	.word	0x20000388
 80010a4:	0800b320 	.word	0x0800b320
 80010a8:	20000000 	.word	0x20000000

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b098      	sub	sp, #96	; 0x60
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f008 f8eb 	bl	8009296 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <SystemClock_Config+0xfc>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <SystemClock_Config+0xfc>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <SystemClock_Config+0xfc>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <SystemClock_Config+0x100>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <SystemClock_Config+0x100>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <SystemClock_Config+0x100>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001116:	2301      	movs	r3, #1
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800111a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001120:	2302      	movs	r3, #2
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001124:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001128:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800112a:	2308      	movs	r3, #8
 800112c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800112e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001132:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001138:	2307      	movs	r3, #7
 800113a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001140:	4618      	mov	r0, r3
 8001142:	f003 f825 	bl	8004190 <HAL_RCC_OscConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800114c:	f000 fab2 	bl	80016b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001150:	230f      	movs	r3, #15
 8001152:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001154:	2302      	movs	r3, #2
 8001156:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800115c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	2105      	movs	r1, #5
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fa7e 	bl	8004670 <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800117a:	f000 fa9b 	bl	80016b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800117e:	2301      	movs	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001182:	23c0      	movs	r3, #192	; 0xc0
 8001184:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001186:	2302      	movs	r3, #2
 8001188:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fc4c 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800119a:	f000 fa8b 	bl	80016b4 <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3760      	adds	r7, #96	; 0x60
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_I2C1_Init+0x50>)
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <MX_I2C1_Init+0x54>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_I2C1_Init+0x50>)
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_I2C1_Init+0x58>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_I2C1_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_I2C1_Init+0x50>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_I2C1_Init+0x50>)
 80011ee:	f001 f873 	bl	80022d8 <HAL_I2C_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f8:	f000 fa5c 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200003f4 	.word	0x200003f4
 8001204:	40005400 	.word	0x40005400
 8001208:	000186a0 	.word	0x000186a0

0800120c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_I2S3_Init+0x54>)
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <MX_I2S3_Init+0x58>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2S3_Init+0x54>)
 8001218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_I2S3_Init+0x54>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2S3_Init+0x54>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <MX_I2S3_Init+0x54>)
 800122c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001230:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_I2S3_Init+0x54>)
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <MX_I2S3_Init+0x5c>)
 8001236:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2S3_Init+0x54>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_I2S3_Init+0x54>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2S3_Init+0x54>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_I2S3_Init+0x54>)
 800124c:	f001 f97c 	bl	8002548 <HAL_I2S_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001256:	f000 fa2d 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000520 	.word	0x20000520
 8001264:	40003c00 	.word	0x40003c00
 8001268:	00017700 	.word	0x00017700

0800126c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_SPI1_Init+0x64>)
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <MX_SPI1_Init+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_SPI1_Init+0x64>)
 8001278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800127c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_SPI1_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_SPI1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_SPI1_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_SPI1_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_SPI1_Init+0x64>)
 8001298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_SPI1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <MX_SPI1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_SPI1_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <MX_SPI1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_SPI1_Init+0x64>)
 80012b8:	220a      	movs	r2, #10
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_SPI1_Init+0x64>)
 80012be:	f003 fcf3 	bl	8004ca8 <HAL_SPI_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c8:	f000 f9f4 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000488 	.word	0x20000488
 80012d4:	40013000 	.word	0x40013000

080012d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_SPI2_Init+0x64>)
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <MX_SPI2_Init+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_SPI2_Init+0x64>)
 80012e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_SPI2_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_SPI2_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_SPI2_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_SPI2_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_SPI2_Init+0x64>)
 8001304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001308:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_SPI2_Init+0x64>)
 800130c:	2220      	movs	r2, #32
 800130e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_SPI2_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_SPI2_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_SPI2_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_SPI2_Init+0x64>)
 8001324:	220a      	movs	r2, #10
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_SPI2_Init+0x64>)
 800132a:	f003 fcbd 	bl	8004ca8 <HAL_SPI_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001334:	f000 f9be 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000039c 	.word	0x2000039c
 8001340:	40003800 	.word	0x40003800

08001344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f007 ff9f 	bl	8009296 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_TIM1_Init+0xa8>)
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <MX_TIM1_Init+0xac>)
 8001364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_TIM1_Init+0xa8>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_TIM1_Init+0xa8>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_TIM1_Init+0xa8>)
 8001374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_TIM1_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_TIM1_Init+0xa8>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_TIM1_Init+0xa8>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138c:	2303      	movs	r3, #3
 800138e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_TIM1_Init+0xa8>)
 80013b8:	f003 fe47 	bl	800504a <HAL_TIM_Encoder_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013c2:	f000 f977 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_TIM1_Init+0xa8>)
 80013d4:	f004 fa4a 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80013de:	f000 f969 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000448 	.word	0x20000448
 80013f0:	40010000 	.word	0x40010000

080013f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MX_TIM2_Init+0x98>)
 8001412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001416:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_TIM2_Init+0x98>)
 800141a:	f242 7210 	movw	r2, #10000	; 0x2710
 800141e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_TIM2_Init+0x98>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 28000;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_TIM2_Init+0x98>)
 8001428:	f646 5260 	movw	r2, #28000	; 0x6d60
 800142c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_TIM2_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_TIM2_Init+0x98>)
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <MX_TIM2_Init+0x98>)
 800143c:	f003 fdb6 	bl	8004fac <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001446:	f000 f935 	bl	80016b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	4619      	mov	r1, r3
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_TIM2_Init+0x98>)
 8001458:	f003 ffc8 	bl	80053ec <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001462:	f000 f927 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_TIM2_Init+0x98>)
 8001474:	f004 f9fa 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800147e:	f000 f919 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200004e0 	.word	0x200004e0

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	4b7b      	ldr	r3, [pc, #492]	; (8001698 <MX_GPIO_Init+0x208>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a7a      	ldr	r2, [pc, #488]	; (8001698 <MX_GPIO_Init+0x208>)
 80014b0:	f043 0310 	orr.w	r3, r3, #16
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b78      	ldr	r3, [pc, #480]	; (8001698 <MX_GPIO_Init+0x208>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	4b74      	ldr	r3, [pc, #464]	; (8001698 <MX_GPIO_Init+0x208>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a73      	ldr	r2, [pc, #460]	; (8001698 <MX_GPIO_Init+0x208>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b71      	ldr	r3, [pc, #452]	; (8001698 <MX_GPIO_Init+0x208>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b6d      	ldr	r3, [pc, #436]	; (8001698 <MX_GPIO_Init+0x208>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a6c      	ldr	r2, [pc, #432]	; (8001698 <MX_GPIO_Init+0x208>)
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <MX_GPIO_Init+0x208>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b66      	ldr	r3, [pc, #408]	; (8001698 <MX_GPIO_Init+0x208>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a65      	ldr	r2, [pc, #404]	; (8001698 <MX_GPIO_Init+0x208>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b63      	ldr	r3, [pc, #396]	; (8001698 <MX_GPIO_Init+0x208>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <MX_GPIO_Init+0x208>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a5e      	ldr	r2, [pc, #376]	; (8001698 <MX_GPIO_Init+0x208>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <MX_GPIO_Init+0x208>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b58      	ldr	r3, [pc, #352]	; (8001698 <MX_GPIO_Init+0x208>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a57      	ldr	r2, [pc, #348]	; (8001698 <MX_GPIO_Init+0x208>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b55      	ldr	r3, [pc, #340]	; (8001698 <MX_GPIO_Init+0x208>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2108      	movs	r1, #8
 8001552:	4852      	ldr	r0, [pc, #328]	; (800169c <MX_GPIO_Init+0x20c>)
 8001554:	f000 fea6 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2101      	movs	r1, #1
 800155c:	4850      	ldr	r0, [pc, #320]	; (80016a0 <MX_GPIO_Init+0x210>)
 800155e:	f000 fea1 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001568:	484e      	ldr	r0, [pc, #312]	; (80016a4 <MX_GPIO_Init+0x214>)
 800156a:	f000 fe9b 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800156e:	2200      	movs	r2, #0
 8001570:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001574:	484c      	ldr	r0, [pc, #304]	; (80016a8 <MX_GPIO_Init+0x218>)
 8001576:	f000 fe95 	bl	80022a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800157a:	2308      	movs	r3, #8
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4842      	ldr	r0, [pc, #264]	; (800169c <MX_GPIO_Init+0x20c>)
 8001592:	f000 fced 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	483c      	ldr	r0, [pc, #240]	; (80016a0 <MX_GPIO_Init+0x210>)
 80015ae:	f000 fcdf 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015b2:	2308      	movs	r3, #8
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015c2:	2305      	movs	r3, #5
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4834      	ldr	r0, [pc, #208]	; (80016a0 <MX_GPIO_Init+0x210>)
 80015ce:	f000 fccf 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <MX_GPIO_Init+0x21c>)
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4832      	ldr	r0, [pc, #200]	; (80016b0 <MX_GPIO_Init+0x220>)
 80015e6:	f000 fcc3 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015ea:	2304      	movs	r3, #4
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4829      	ldr	r0, [pc, #164]	; (80016a4 <MX_GPIO_Init+0x214>)
 80015fe:	f000 fcb7 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001614:	2305      	movs	r3, #5
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4821      	ldr	r0, [pc, #132]	; (80016a4 <MX_GPIO_Init+0x214>)
 8001620:	f000 fca6 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8001624:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	4819      	ldr	r0, [pc, #100]	; (80016a4 <MX_GPIO_Init+0x214>)
 800163e:	f000 fc97 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001642:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001646:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4813      	ldr	r0, [pc, #76]	; (80016a8 <MX_GPIO_Init+0x218>)
 800165c:	f000 fc88 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001660:	2320      	movs	r3, #32
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_GPIO_Init+0x218>)
 8001674:	f000 fc7c 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001678:	2302      	movs	r3, #2
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_GPIO_Init+0x21c>)
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4804      	ldr	r0, [pc, #16]	; (800169c <MX_GPIO_Init+0x20c>)
 800168c:	f000 fc70 	bl	8001f70 <HAL_GPIO_Init>

}
 8001690:	bf00      	nop
 8001692:	3730      	adds	r7, #48	; 0x30
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	40021000 	.word	0x40021000
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	10120000 	.word	0x10120000
 80016b0:	40020000 	.word	0x40020000

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001702:	2007      	movs	r0, #7
 8001704:	f000 fbd0 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_I2C_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12c      	bne.n	8001790 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_I2C_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_I2C_MspInit+0x88>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_I2C_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001752:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001758:	2312      	movs	r3, #18
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175c:	2301      	movs	r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001764:	2304      	movs	r3, #4
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	480c      	ldr	r0, [pc, #48]	; (80017a0 <HAL_I2C_MspInit+0x8c>)
 8001770:	f000 fbfe 	bl	8001f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_I2C_MspInit+0x88>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_I2C_MspInit+0x88>)
 800177e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_I2C_MspInit+0x88>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40005400 	.word	0x40005400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a28      	ldr	r2, [pc, #160]	; (8001864 <HAL_I2S_MspInit+0xc0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d14a      	bne.n	800185c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_I2S_MspInit+0xc4>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a26      	ldr	r2, [pc, #152]	; (8001868 <HAL_I2S_MspInit+0xc4>)
 80017d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_I2S_MspInit+0xc4>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_I2S_MspInit+0xc4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <HAL_I2S_MspInit+0xc4>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <HAL_I2S_MspInit+0xc4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_I2S_MspInit+0xc4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a18      	ldr	r2, [pc, #96]	; (8001868 <HAL_I2S_MspInit+0xc4>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <HAL_I2S_MspInit+0xc4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800181a:	2310      	movs	r3, #16
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800182a:	2306      	movs	r3, #6
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <HAL_I2S_MspInit+0xc8>)
 8001836:	f000 fb9b 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800183a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800184c:	2306      	movs	r3, #6
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <HAL_I2S_MspInit+0xcc>)
 8001858:	f000 fb8a 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40003c00 	.word	0x40003c00
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020800 	.word	0x40020800

08001874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	; 0x30
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a36      	ldr	r2, [pc, #216]	; (800196c <HAL_SPI_MspInit+0xf8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12c      	bne.n	80018f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a34      	ldr	r2, [pc, #208]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 80018a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018ce:	23e0      	movs	r3, #224	; 0xe0
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018de:	2305      	movs	r3, #5
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	4822      	ldr	r0, [pc, #136]	; (8001974 <HAL_SPI_MspInit+0x100>)
 80018ea:	f000 fb41 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018ee:	e039      	b.n	8001964 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a20      	ldr	r2, [pc, #128]	; (8001978 <HAL_SPI_MspInit+0x104>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d134      	bne.n	8001964 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a1b      	ldr	r2, [pc, #108]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_SPI_MspInit+0xfc>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001932:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001944:	2305      	movs	r3, #5
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	480b      	ldr	r0, [pc, #44]	; (800197c <HAL_SPI_MspInit+0x108>)
 8001950:	f000 fb0e 	bl	8001f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	2024      	movs	r0, #36	; 0x24
 800195a:	f000 fab0 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800195e:	2024      	movs	r0, #36	; 0x24
 8001960:	f000 fac9 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3730      	adds	r7, #48	; 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40013000 	.word	0x40013000
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000
 8001978:	40003800 	.word	0x40003800
 800197c:	40020400 	.word	0x40020400

08001980 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_TIM_Encoder_MspInit+0x84>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12c      	bne.n	80019fc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80019c8:	f043 0310 	orr.w	r3, r3, #16
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_TIM_Encoder_MspInit+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80019da:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <HAL_TIM_Encoder_MspInit+0x8c>)
 80019f8:	f000 faba 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40010000 	.word	0x40010000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a20:	d115      	bne.n	8001a4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_TIM_Base_MspInit+0x48>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <HAL_TIM_Base_MspInit+0x48>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_TIM_Base_MspInit+0x48>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	201c      	movs	r0, #28
 8001a44:	f000 fa3b 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a48:	201c      	movs	r0, #28
 8001a4a:	f000 fa54 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab0:	f000 f8e8 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM2_IRQHandler+0x10>)
 8001abe:	f003 fb8d 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200004e0 	.word	0x200004e0

08001acc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <SPI2_IRQHandler+0x10>)
 8001ad2:	f003 f94d 	bl	8004d70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000039c 	.word	0x2000039c

08001ae0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <OTG_FS_IRQHandler+0x10>)
 8001ae6:	f001 fb1f 	bl	8003128 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20001a3c 	.word	0x20001a3c

08001af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <_sbrk+0x5c>)
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <_sbrk+0x60>)
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <_sbrk+0x64>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <_sbrk+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d207      	bcs.n	8001b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b24:	f007 fb72 	bl	800920c <__errno>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e009      	b.n	8001b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <_sbrk+0x64>)
 8001b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20020000 	.word	0x20020000
 8001b54:	00000400 	.word	0x00000400
 8001b58:	2000038c 	.word	0x2000038c
 8001b5c:	20001e48 	.word	0x20001e48

08001b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <SystemInit+0x28>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6a:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <SystemInit+0x28>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <SystemInit+0x28>)
 8001b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b7a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b92:	e003      	b.n	8001b9c <LoopCopyDataInit>

08001b94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b9a:	3104      	adds	r1, #4

08001b9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ba0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ba2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ba4:	d3f6      	bcc.n	8001b94 <CopyDataInit>
  ldr  r2, =_sbss
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ba8:	e002      	b.n	8001bb0 <LoopFillZerobss>

08001baa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001baa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bac:	f842 3b04 	str.w	r3, [r2], #4

08001bb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bb4:	d3f9      	bcc.n	8001baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bb6:	f7ff ffd3 	bl	8001b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bba:	f007 fb2d 	bl	8009218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7ff fa33 	bl	8001028 <main>
  bx  lr    
 8001bc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bc8:	0800b5f8 	.word	0x0800b5f8
  ldr  r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bd0:	20000364 	.word	0x20000364
  ldr  r2, =_sbss
 8001bd4:	20000364 	.word	0x20000364
  ldr  r3, = _ebss
 8001bd8:	20001e48 	.word	0x20001e48

08001bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <HAL_Init+0x40>)
 8001bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_Init+0x40>)
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_Init+0x40>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f94d 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fd56 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f965 	bl	8001f12 <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f92d 	bl	8001ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000014 	.word	0x20000014
 8001c7c:	2000001c 	.word	0x2000001c
 8001c80:	20000018 	.word	0x20000018

08001c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	2000001c 	.word	0x2000001c
 8001ca8:	20000568 	.word	0x20000568

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000568 	.word	0x20000568

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_Delay+0x40>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000001c 	.word	0x2000001c

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	; (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e74:	d301      	bcc.n	8001e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00f      	b.n	8001e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <SysTick_Config+0x40>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e82:	210f      	movs	r1, #15
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f7ff ff8e 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x40>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff29 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff3e 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff8e 	bl	8001dfc <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5d 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff31 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ffa2 	bl	8001e64 <SysTick_Config>
 8001f20:	4603      	mov	r3, r0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d004      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e00c      	b.n	8001f62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2205      	movs	r2, #5
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e16b      	b.n	8002264 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	f040 815a 	bne.w	800225e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d00b      	beq.n	8001fca <HAL_GPIO_Init+0x5a>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d007      	beq.n	8001fca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fbe:	2b11      	cmp	r3, #17
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d130      	bne.n	800202c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 0201 	and.w	r2, r3, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0xfc>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b12      	cmp	r3, #18
 800206a:	d123      	bne.n	80020b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	08da      	lsrs	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3208      	adds	r2, #8
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80b4 	beq.w	800225e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b5f      	ldr	r3, [pc, #380]	; (8002278 <HAL_GPIO_Init+0x308>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a5e      	ldr	r2, [pc, #376]	; (8002278 <HAL_GPIO_Init+0x308>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b5c      	ldr	r3, [pc, #368]	; (8002278 <HAL_GPIO_Init+0x308>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002112:	4a5a      	ldr	r2, [pc, #360]	; (800227c <HAL_GPIO_Init+0x30c>)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a51      	ldr	r2, [pc, #324]	; (8002280 <HAL_GPIO_Init+0x310>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02b      	beq.n	8002196 <HAL_GPIO_Init+0x226>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a50      	ldr	r2, [pc, #320]	; (8002284 <HAL_GPIO_Init+0x314>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d025      	beq.n	8002192 <HAL_GPIO_Init+0x222>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4f      	ldr	r2, [pc, #316]	; (8002288 <HAL_GPIO_Init+0x318>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <HAL_GPIO_Init+0x21e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4e      	ldr	r2, [pc, #312]	; (800228c <HAL_GPIO_Init+0x31c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d019      	beq.n	800218a <HAL_GPIO_Init+0x21a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4d      	ldr	r2, [pc, #308]	; (8002290 <HAL_GPIO_Init+0x320>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0x216>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4c      	ldr	r2, [pc, #304]	; (8002294 <HAL_GPIO_Init+0x324>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00d      	beq.n	8002182 <HAL_GPIO_Init+0x212>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4b      	ldr	r2, [pc, #300]	; (8002298 <HAL_GPIO_Init+0x328>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0x20e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4a      	ldr	r2, [pc, #296]	; (800229c <HAL_GPIO_Init+0x32c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_GPIO_Init+0x20a>
 8002176:	2307      	movs	r3, #7
 8002178:	e00e      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800217a:	2308      	movs	r3, #8
 800217c:	e00c      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800217e:	2306      	movs	r3, #6
 8002180:	e00a      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002182:	2305      	movs	r3, #5
 8002184:	e008      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002186:	2304      	movs	r3, #4
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800218a:	2303      	movs	r3, #3
 800218c:	e004      	b.n	8002198 <HAL_GPIO_Init+0x228>
 800218e:	2302      	movs	r3, #2
 8002190:	e002      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_GPIO_Init+0x228>
 8002196:	2300      	movs	r3, #0
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	f002 0203 	and.w	r2, r2, #3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4093      	lsls	r3, r2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a8:	4934      	ldr	r1, [pc, #208]	; (800227c <HAL_GPIO_Init+0x30c>)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b6:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_GPIO_Init+0x330>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021da:	4a31      	ldr	r2, [pc, #196]	; (80022a0 <HAL_GPIO_Init+0x330>)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021e0:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_GPIO_Init+0x330>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002204:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <HAL_GPIO_Init+0x330>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220a:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_GPIO_Init+0x330>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222e:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <HAL_GPIO_Init+0x330>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_GPIO_Init+0x330>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_GPIO_Init+0x330>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3301      	adds	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	f67f ae90 	bls.w	8001f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800226c:	bf00      	nop
 800226e:	3724      	adds	r7, #36	; 0x24
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40023800 	.word	0x40023800
 800227c:	40013800 	.word	0x40013800
 8002280:	40020000 	.word	0x40020000
 8002284:	40020400 	.word	0x40020400
 8002288:	40020800 	.word	0x40020800
 800228c:	40020c00 	.word	0x40020c00
 8002290:	40021000 	.word	0x40021000
 8002294:	40021400 	.word	0x40021400
 8002298:	40021800 	.word	0x40021800
 800229c:	40021c00 	.word	0x40021c00
 80022a0:	40013c00 	.word	0x40013c00

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c0:	e003      	b.n	80022ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	041a      	lsls	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e11f      	b.n	800252a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff fa08 	bl	8001714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800232a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800233a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800233c:	f002 fb62 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 8002340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4a7b      	ldr	r2, [pc, #492]	; (8002534 <HAL_I2C_Init+0x25c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d807      	bhi.n	800235c <HAL_I2C_Init+0x84>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a7a      	ldr	r2, [pc, #488]	; (8002538 <HAL_I2C_Init+0x260>)
 8002350:	4293      	cmp	r3, r2
 8002352:	bf94      	ite	ls
 8002354:	2301      	movls	r3, #1
 8002356:	2300      	movhi	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	e006      	b.n	800236a <HAL_I2C_Init+0x92>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a77      	ldr	r2, [pc, #476]	; (800253c <HAL_I2C_Init+0x264>)
 8002360:	4293      	cmp	r3, r2
 8002362:	bf94      	ite	ls
 8002364:	2301      	movls	r3, #1
 8002366:	2300      	movhi	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0db      	b.n	800252a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4a72      	ldr	r2, [pc, #456]	; (8002540 <HAL_I2C_Init+0x268>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0c9b      	lsrs	r3, r3, #18
 800237c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a64      	ldr	r2, [pc, #400]	; (8002534 <HAL_I2C_Init+0x25c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d802      	bhi.n	80023ac <HAL_I2C_Init+0xd4>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3301      	adds	r3, #1
 80023aa:	e009      	b.n	80023c0 <HAL_I2C_Init+0xe8>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	4a63      	ldr	r2, [pc, #396]	; (8002544 <HAL_I2C_Init+0x26c>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	3301      	adds	r3, #1
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4956      	ldr	r1, [pc, #344]	; (8002534 <HAL_I2C_Init+0x25c>)
 80023dc:	428b      	cmp	r3, r1
 80023de:	d80d      	bhi.n	80023fc <HAL_I2C_Init+0x124>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1e59      	subs	r1, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	bf38      	it	cc
 80023f8:	2304      	movcc	r3, #4
 80023fa:	e04f      	b.n	800249c <HAL_I2C_Init+0x1c4>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d111      	bne.n	8002428 <HAL_I2C_Init+0x150>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1e58      	subs	r0, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e012      	b.n	800244e <HAL_I2C_Init+0x176>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	0099      	lsls	r1, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	fbb0 f3f3 	udiv	r3, r0, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Init+0x17e>
 8002452:	2301      	movs	r3, #1
 8002454:	e022      	b.n	800249c <HAL_I2C_Init+0x1c4>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10e      	bne.n	800247c <HAL_I2C_Init+0x1a4>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1e58      	subs	r0, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	440b      	add	r3, r1
 800246c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002470:	3301      	adds	r3, #1
 8002472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800247a:	e00f      	b.n	800249c <HAL_I2C_Init+0x1c4>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e58      	subs	r0, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	0099      	lsls	r1, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002492:	3301      	adds	r3, #1
 8002494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	6809      	ldr	r1, [r1, #0]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6911      	ldr	r1, [r2, #16]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68d2      	ldr	r2, [r2, #12]
 80024d6:	4311      	orrs	r1, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	430b      	orrs	r3, r1
 80024de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	000186a0 	.word	0x000186a0
 8002538:	001e847f 	.word	0x001e847f
 800253c:	003d08ff 	.word	0x003d08ff
 8002540:	431bde83 	.word	0x431bde83
 8002544:	10624dd3 	.word	0x10624dd3

08002548 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e128      	b.n	80027ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a90      	ldr	r2, [pc, #576]	; (80027b4 <HAL_I2S_Init+0x26c>)
 8002572:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff f915 	bl	80017a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2202      	movs	r2, #2
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002590:	f023 030f 	bic.w	r3, r3, #15
 8002594:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2202      	movs	r2, #2
 800259c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d060      	beq.n	8002668 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80025ae:	2310      	movs	r3, #16
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e001      	b.n	80025b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d802      	bhi.n	80025c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f002 fb12 	bl	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq>
 80025cc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d6:	d125      	bne.n	8002624 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d010      	beq.n	8002602 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	461a      	mov	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	3305      	adds	r3, #5
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	e01f      	b.n	8002642 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	fbb2 f2f3 	udiv	r2, r2, r3
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	461a      	mov	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	3305      	adds	r3, #5
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	e00e      	b.n	8002642 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fbb2 f2f3 	udiv	r2, r2, r3
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	461a      	mov	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	3305      	adds	r3, #5
 8002640:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4a5c      	ldr	r2, [pc, #368]	; (80027b8 <HAL_I2S_Init+0x270>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	08db      	lsrs	r3, r3, #3
 800264c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	e003      	b.n	8002670 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002668:	2302      	movs	r3, #2
 800266a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d902      	bls.n	800267c <HAL_I2S_Init+0x134>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2bff      	cmp	r3, #255	; 0xff
 800267a:	d907      	bls.n	800268c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f043 0210 	orr.w	r2, r3, #16
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e08f      	b.n	80027ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	ea42 0103 	orr.w	r1, r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	430a      	orrs	r2, r1
 800269e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026aa:	f023 030f 	bic.w	r3, r3, #15
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6851      	ldr	r1, [r2, #4]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6892      	ldr	r2, [r2, #8]
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	68d2      	ldr	r2, [r2, #12]
 80026bc:	4311      	orrs	r1, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6992      	ldr	r2, [r2, #24]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d161      	bne.n	800279c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a38      	ldr	r2, [pc, #224]	; (80027bc <HAL_I2S_Init+0x274>)
 80026dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a37      	ldr	r2, [pc, #220]	; (80027c0 <HAL_I2S_Init+0x278>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_I2S_Init+0x1a4>
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_I2S_Init+0x27c>)
 80026ea:	e001      	b.n	80026f0 <HAL_I2S_Init+0x1a8>
 80026ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	4932      	ldr	r1, [pc, #200]	; (80027c0 <HAL_I2S_Init+0x278>)
 80026f8:	428a      	cmp	r2, r1
 80026fa:	d101      	bne.n	8002700 <HAL_I2S_Init+0x1b8>
 80026fc:	4a31      	ldr	r2, [pc, #196]	; (80027c4 <HAL_I2S_Init+0x27c>)
 80026fe:	e001      	b.n	8002704 <HAL_I2S_Init+0x1bc>
 8002700:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002704:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002708:	f023 030f 	bic.w	r3, r3, #15
 800270c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <HAL_I2S_Init+0x278>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_I2S_Init+0x1d4>
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_I2S_Init+0x27c>)
 800271a:	e001      	b.n	8002720 <HAL_I2S_Init+0x1d8>
 800271c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002720:	2202      	movs	r2, #2
 8002722:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <HAL_I2S_Init+0x278>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_I2S_Init+0x1ea>
 800272e:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_I2S_Init+0x27c>)
 8002730:	e001      	b.n	8002736 <HAL_I2S_Init+0x1ee>
 8002732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002742:	d003      	beq.n	800274c <HAL_I2S_Init+0x204>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d103      	bne.n	8002754 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800274c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	e001      	b.n	8002758 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	b299      	uxth	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800276e:	4303      	orrs	r3, r0
 8002770:	b29b      	uxth	r3, r3
 8002772:	430b      	orrs	r3, r1
 8002774:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002776:	4313      	orrs	r3, r2
 8002778:	b29a      	uxth	r2, r3
 800277a:	897b      	ldrh	r3, [r7, #10]
 800277c:	4313      	orrs	r3, r2
 800277e:	b29b      	uxth	r3, r3
 8002780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002784:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <HAL_I2S_Init+0x278>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_I2S_Init+0x24c>
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_I2S_Init+0x27c>)
 8002792:	e001      	b.n	8002798 <HAL_I2S_Init+0x250>
 8002794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002798:	897a      	ldrh	r2, [r7, #10]
 800279a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	080028bf 	.word	0x080028bf
 80027b8:	cccccccd 	.word	0xcccccccd
 80027bc:	080029d5 	.word	0x080029d5
 80027c0:	40003800 	.word	0x40003800
 80027c4:	40003400 	.word	0x40003400

080027c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	1c9a      	adds	r2, r3, #2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10e      	bne.n	8002858 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002848:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffb8 	bl	80027c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	b292      	uxth	r2, r2
 8002874:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	1c9a      	adds	r2, r3, #2
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10e      	bne.n	80028b6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff93 	bl	80027dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d13a      	bne.n	8002950 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d109      	bne.n	80028f8 <I2S_IRQHandler+0x3a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b40      	cmp	r3, #64	; 0x40
 80028f0:	d102      	bne.n	80028f8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ffb4 	bl	8002860 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d126      	bne.n	8002950 <I2S_IRQHandler+0x92>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b20      	cmp	r3, #32
 800290e:	d11f      	bne.n	8002950 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800291e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ff50 	bl	80027f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b03      	cmp	r3, #3
 800295a:	d136      	bne.n	80029ca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d109      	bne.n	800297a <I2S_IRQHandler+0xbc>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d102      	bne.n	800297a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff45 	bl	8002804 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b08      	cmp	r3, #8
 8002982:	d122      	bne.n	80029ca <I2S_IRQHandler+0x10c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b20      	cmp	r3, #32
 8002990:	d11b      	bne.n	80029ca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029a0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f043 0204 	orr.w	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ff13 	bl	80027f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4aa2      	ldr	r2, [pc, #648]	; (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80029ee:	4ba2      	ldr	r3, [pc, #648]	; (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029f0:	e001      	b.n	80029f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80029f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a9b      	ldr	r2, [pc, #620]	; (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002a0c:	4b9a      	ldr	r3, [pc, #616]	; (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a0e:	e001      	b.n	8002a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a20:	d004      	beq.n	8002a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 8099 	bne.w	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d107      	bne.n	8002a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f925 	bl	8002c90 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d107      	bne.n	8002a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f9c8 	bl	8002df0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	d13a      	bne.n	8002ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d035      	beq.n	8002ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a7e      	ldr	r2, [pc, #504]	; (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002a7e:	4b7e      	ldr	r3, [pc, #504]	; (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a80:	e001      	b.n	8002a86 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002a82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4979      	ldr	r1, [pc, #484]	; (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a8e:	428b      	cmp	r3, r1
 8002a90:	d101      	bne.n	8002a96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002a92:	4b79      	ldr	r3, [pc, #484]	; (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a94:	e001      	b.n	8002a9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a9e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f043 0202 	orr.w	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fe88 	bl	80027f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	f040 80be 	bne.w	8002c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80b8 	beq.w	8002c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a59      	ldr	r2, [pc, #356]	; (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002b12:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b14:	e001      	b.n	8002b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002b16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4954      	ldr	r1, [pc, #336]	; (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b22:	428b      	cmp	r3, r1
 8002b24:	d101      	bne.n	8002b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002b26:	4b54      	ldr	r3, [pc, #336]	; (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b28:	e001      	b.n	8002b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002b2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b32:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f043 0204 	orr.w	r2, r3, #4
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff fe4a 	bl	80027f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b5c:	e084      	b.n	8002c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d107      	bne.n	8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8be 	bl	8002cf4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d107      	bne.n	8002b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8fd 	bl	8002d8c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d12f      	bne.n	8002bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d02a      	beq.n	8002bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bb4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a2e      	ldr	r2, [pc, #184]	; (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d101      	bne.n	8002bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bc2:	e001      	b.n	8002bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4929      	ldr	r1, [pc, #164]	; (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bd0:	428b      	cmp	r3, r1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002bd4:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bd6:	e001      	b.n	8002bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002bd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002be0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f043 0202 	orr.w	r2, r3, #2
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fdfa 	bl	80027f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d131      	bne.n	8002c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d02c      	beq.n	8002c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d101      	bne.n	8002c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c1c:	e001      	b.n	8002c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4912      	ldr	r1, [pc, #72]	; (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c2a:	428b      	cmp	r3, r1
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c30:	e001      	b.n	8002c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002c32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c4a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	f043 0204 	orr.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fdc5 	bl	80027f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c66:	e000      	b.n	8002c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c68:	bf00      	nop
}
 8002c6a:	bf00      	nop
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40003800 	.word	0x40003800
 8002c78:	40003400 	.word	0x40003400

08002c7c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	1c99      	adds	r1, r3, #2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6251      	str	r1, [r2, #36]	; 0x24
 8002ca2:	881a      	ldrh	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d113      	bne.n	8002cea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cd0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ffc9 	bl	8002c7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	1c99      	adds	r1, r3, #2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6251      	str	r1, [r2, #36]	; 0x24
 8002d06:	8819      	ldrh	r1, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <I2SEx_TxISR_I2SExt+0x90>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <I2SEx_TxISR_I2SExt+0x22>
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <I2SEx_TxISR_I2SExt+0x94>)
 8002d14:	e001      	b.n	8002d1a <I2SEx_TxISR_I2SExt+0x26>
 8002d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d1a:	460a      	mov	r2, r1
 8002d1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d121      	bne.n	8002d7a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <I2SEx_TxISR_I2SExt+0x90>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <I2SEx_TxISR_I2SExt+0x50>
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <I2SEx_TxISR_I2SExt+0x94>)
 8002d42:	e001      	b.n	8002d48 <I2SEx_TxISR_I2SExt+0x54>
 8002d44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	490d      	ldr	r1, [pc, #52]	; (8002d84 <I2SEx_TxISR_I2SExt+0x90>)
 8002d50:	428b      	cmp	r3, r1
 8002d52:	d101      	bne.n	8002d58 <I2SEx_TxISR_I2SExt+0x64>
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <I2SEx_TxISR_I2SExt+0x94>)
 8002d56:	e001      	b.n	8002d5c <I2SEx_TxISR_I2SExt+0x68>
 8002d58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d106      	bne.n	8002d7a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ff81 	bl	8002c7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40003800 	.word	0x40003800
 8002d88:	40003400 	.word	0x40003400

08002d8c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68d8      	ldr	r0, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	1c99      	adds	r1, r3, #2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002da4:	b282      	uxth	r2, r0
 8002da6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d113      	bne.n	8002de8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ff4a 	bl	8002c7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a20      	ldr	r2, [pc, #128]	; (8002e80 <I2SEx_RxISR_I2SExt+0x90>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <I2SEx_RxISR_I2SExt+0x16>
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <I2SEx_RxISR_I2SExt+0x94>)
 8002e04:	e001      	b.n	8002e0a <I2SEx_RxISR_I2SExt+0x1a>
 8002e06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e0a:	68d8      	ldr	r0, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	1c99      	adds	r1, r3, #2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002e16:	b282      	uxth	r2, r0
 8002e18:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d121      	bne.n	8002e76 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <I2SEx_RxISR_I2SExt+0x90>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d101      	bne.n	8002e40 <I2SEx_RxISR_I2SExt+0x50>
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <I2SEx_RxISR_I2SExt+0x94>)
 8002e3e:	e001      	b.n	8002e44 <I2SEx_RxISR_I2SExt+0x54>
 8002e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	490d      	ldr	r1, [pc, #52]	; (8002e80 <I2SEx_RxISR_I2SExt+0x90>)
 8002e4c:	428b      	cmp	r3, r1
 8002e4e:	d101      	bne.n	8002e54 <I2SEx_RxISR_I2SExt+0x64>
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <I2SEx_RxISR_I2SExt+0x94>)
 8002e52:	e001      	b.n	8002e58 <I2SEx_RxISR_I2SExt+0x68>
 8002e54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e5c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff03 	bl	8002c7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40003800 	.word	0x40003800
 8002e84:	40003400 	.word	0x40003400

08002e88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8a:	b08f      	sub	sp, #60	; 0x3c
 8002e8c:	af0a      	add	r7, sp, #40	; 0x28
 8002e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e10f      	b.n	80030ba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f005 fe9f 	bl	8008bf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f002 fe6c 	bl	8005bb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	687e      	ldr	r6, [r7, #4]
 8002ee6:	466d      	mov	r5, sp
 8002ee8:	f106 0410 	add.w	r4, r6, #16
 8002eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ef8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002efc:	1d33      	adds	r3, r6, #4
 8002efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f00:	6838      	ldr	r0, [r7, #0]
 8002f02:	f002 fd43 	bl	800598c <USB_CoreInit>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0d0      	b.n	80030ba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f002 fe5a 	bl	8005bd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	e04a      	b.n	8002fc0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	333d      	adds	r3, #61	; 0x3d
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f3e:	7bfa      	ldrb	r2, [r7, #15]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	333c      	adds	r3, #60	; 0x3c
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	b298      	uxth	r0, r3
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3342      	adds	r3, #66	; 0x42
 8002f66:	4602      	mov	r2, r0
 8002f68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	333f      	adds	r3, #63	; 0x3f
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3344      	adds	r3, #68	; 0x44
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3348      	adds	r3, #72	; 0x48
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3350      	adds	r3, #80	; 0x50
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d3af      	bcc.n	8002f2a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	e044      	b.n	800305a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003012:	7bfa      	ldrb	r2, [r7, #15]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	3301      	adds	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d3b5      	bcc.n	8002fd0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	687e      	ldr	r6, [r7, #4]
 800306c:	466d      	mov	r5, sp
 800306e:	f106 0410 	add.w	r4, r6, #16
 8003072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800307a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800307e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003082:	1d33      	adds	r3, r6, #4
 8003084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003086:	6838      	ldr	r0, [r7, #0]
 8003088:	f002 fdd0 	bl	8005c2c <USB_DevInit>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e00d      	b.n	80030ba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fe18 	bl	8006ce8 <USB_DevDisconnect>

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_PCD_Start+0x1c>
 80030da:	2302      	movs	r3, #2
 80030dc:	e020      	b.n	8003120 <HAL_PCD_Start+0x5e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d109      	bne.n	8003102 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d005      	beq.n	8003102 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f002 fd44 	bl	8005b94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f003 fdc8 	bl	8006ca6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b08d      	sub	sp, #52	; 0x34
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f003 fe86 	bl	8006e50 <USB_GetMode>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 839d 	bne.w	8003886 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fdea 	bl	8006d2a <USB_ReadInterrupts>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8393 	beq.w	8003884 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f003 fde1 	bl	8006d2a <USB_ReadInterrupts>
 8003168:	4603      	mov	r3, r0
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d107      	bne.n	8003182 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f002 0202 	and.w	r2, r2, #2
 8003180:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f003 fdcf 	bl	8006d2a <USB_ReadInterrupts>
 800318c:	4603      	mov	r3, r0
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b10      	cmp	r3, #16
 8003194:	d161      	bne.n	800325a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0210 	bic.w	r2, r2, #16
 80031a4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f003 020f 	and.w	r2, r3, #15
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	0c5b      	lsrs	r3, r3, #17
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d124      	bne.n	800321c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d035      	beq.n	800324a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	6a38      	ldr	r0, [r7, #32]
 80031f2:	f003 fc35 	bl	8006a60 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003202:	441a      	add	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003214:	441a      	add	r2, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	619a      	str	r2, [r3, #24]
 800321a:	e016      	b.n	800324a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	0c5b      	lsrs	r3, r3, #17
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	2b06      	cmp	r3, #6
 8003226:	d110      	bne.n	800324a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800322e:	2208      	movs	r2, #8
 8003230:	4619      	mov	r1, r3
 8003232:	6a38      	ldr	r0, [r7, #32]
 8003234:	f003 fc14 	bl	8006a60 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003244:	441a      	add	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0210 	orr.w	r2, r2, #16
 8003258:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fd63 	bl	8006d2a <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800326e:	d16e      	bne.n	800334e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f003 fd69 	bl	8006d50 <USB_ReadDevAllOutEpInterrupt>
 800327e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003280:	e062      	b.n	8003348 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d057      	beq.n	800333c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fd8e 	bl	8006db8 <USB_ReadDevOutEPInterrupt>
 800329c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00c      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b4:	461a      	mov	r2, r3
 80032b6:	2301      	movs	r3, #1
 80032b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fdb1 	bl	8003e24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00c      	beq.n	80032e6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d8:	461a      	mov	r2, r3
 80032da:	2308      	movs	r3, #8
 80032dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 feab 	bl	800403c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	2310      	movs	r3, #16
 8003300:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	2320      	movs	r3, #32
 800331c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800333a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	3301      	adds	r3, #1
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d199      	bne.n	8003282 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fce9 	bl	8006d2a <USB_ReadInterrupts>
 8003358:	4603      	mov	r3, r0
 800335a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800335e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003362:	f040 80c0 	bne.w	80034e6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f003 fd0a 	bl	8006d84 <USB_ReadDevAllInEpInterrupt>
 8003370:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003376:	e0b2      	b.n	80034de <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80a7 	beq.w	80034d2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fd30 	bl	8006df4 <USB_ReadDevInEPInterrupt>
 8003394:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d057      	beq.n	8003450 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	2201      	movs	r2, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69f9      	ldr	r1, [r7, #28]
 80033bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033c0:	4013      	ands	r3, r2
 80033c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d0:	461a      	mov	r2, r3
 80033d2:	2301      	movs	r3, #1
 80033d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d132      	bne.n	8003444 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	3348      	adds	r3, #72	; 0x48
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4403      	add	r3, r0
 80033fe:	3344      	adds	r3, #68	; 0x44
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4419      	add	r1, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4403      	add	r3, r0
 8003412:	3348      	adds	r3, #72	; 0x48
 8003414:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d113      	bne.n	8003444 <HAL_PCD_IRQHandler+0x31c>
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3350      	adds	r3, #80	; 0x50
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d108      	bne.n	8003444 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800343c:	461a      	mov	r2, r3
 800343e:	2101      	movs	r1, #1
 8003440:	f003 fd38 	bl	8006eb4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	b2db      	uxtb	r3, r3
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f005 fc63 	bl	8008d16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003466:	461a      	mov	r2, r3
 8003468:	2308      	movs	r3, #8
 800346a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003482:	461a      	mov	r2, r3
 8003484:	2310      	movs	r3, #16
 8003486:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349e:	461a      	mov	r2, r3
 80034a0:	2340      	movs	r3, #64	; 0x40
 80034a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ba:	461a      	mov	r2, r3
 80034bc:	2302      	movs	r3, #2
 80034be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fc1b 	bl	8003d08 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	3301      	adds	r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f af49 	bne.w	8003378 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f003 fc1d 	bl	8006d2a <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034fa:	d122      	bne.n	8003542 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003516:	2b01      	cmp	r3, #1
 8003518:	d108      	bne.n	800352c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003522:	2100      	movs	r1, #0
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fe27 	bl	8004178 <HAL_PCDEx_LPM_Callback>
 800352a:	e002      	b.n	8003532 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f005 fc69 	bl	8008e04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f003 fbef 	bl	8006d2a <USB_ReadInterrupts>
 800354c:	4603      	mov	r3, r0
 800354e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003556:	d112      	bne.n	800357e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d102      	bne.n	800356e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f005 fc25 	bl	8008db8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800357c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f003 fbd1 	bl	8006d2a <USB_ReadInterrupts>
 8003588:	4603      	mov	r3, r0
 800358a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	f040 80c7 	bne.w	8003724 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2110      	movs	r1, #16
 80035b0:	4618      	mov	r0, r3
 80035b2:	f002 fc9f 	bl	8005ef4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ba:	e056      	b.n	800366a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c8:	461a      	mov	r2, r3
 80035ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e0:	0151      	lsls	r1, r2, #5
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	440a      	add	r2, r1
 80035e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035ee:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003600:	0151      	lsls	r1, r2, #5
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	440a      	add	r2, r1
 8003606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800360a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800360e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361c:	461a      	mov	r2, r3
 800361e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003622:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800363e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003642:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	440a      	add	r2, r1
 800365a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800365e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003662:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	3301      	adds	r3, #1
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003670:	429a      	cmp	r2, r3
 8003672:	d3a3      	bcc.n	80035bc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003682:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003686:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	2b00      	cmp	r3, #0
 800368e:	d016      	beq.n	80036be <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a0:	f043 030b 	orr.w	r3, r3, #11
 80036a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b6:	f043 030b 	orr.w	r3, r3, #11
 80036ba:	6453      	str	r3, [r2, #68]	; 0x44
 80036bc:	e015      	b.n	80036ea <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036d0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036d4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e4:	f043 030b 	orr.w	r3, r3, #11
 80036e8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800370e:	461a      	mov	r2, r3
 8003710:	f003 fbd0 	bl	8006eb4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f003 fafe 	bl	8006d2a <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d124      	bne.n	8003784 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f003 fb94 	bl	8006e6c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f002 fc34 	bl	8005fb6 <USB_GetDevSpeed>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681c      	ldr	r4, [r3, #0]
 800375a:	f001 f947 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 800375e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	4620      	mov	r0, r4
 800376a:	f002 f971 	bl	8005a50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f005 faf9 	bl	8008d66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003782:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f003 face 	bl	8006d2a <USB_ReadInterrupts>
 800378e:	4603      	mov	r3, r0
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b08      	cmp	r3, #8
 8003796:	d10a      	bne.n	80037ae <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f005 fad6 	bl	8008d4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f002 0208 	and.w	r2, r2, #8
 80037ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f003 fab9 	bl	8006d2a <USB_ReadInterrupts>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037c2:	d10f      	bne.n	80037e4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f005 fb38 	bl	8008e44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f003 fa9e 	bl	8006d2a <USB_ReadInterrupts>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037f8:	d10f      	bne.n	800381a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	b2db      	uxtb	r3, r3
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f005 fb0b 	bl	8008e20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f003 fa83 	bl	8006d2a <USB_ReadInterrupts>
 8003824:	4603      	mov	r3, r0
 8003826:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382e:	d10a      	bne.n	8003846 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f005 fb19 	bl	8008e68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f003 fa6d 	bl	8006d2a <USB_ReadInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b04      	cmp	r3, #4
 8003858:	d115      	bne.n	8003886 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f005 fb09 	bl	8008e84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	e000      	b.n	8003886 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003884:	bf00      	nop
    }
  }
}
 8003886:	3734      	adds	r7, #52	; 0x34
 8003888:	46bd      	mov	sp, r7
 800388a:	bd90      	pop	{r4, r7, pc}

0800388c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_PCD_SetAddress+0x1a>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e013      	b.n	80038ce <HAL_PCD_SetAddress+0x42>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f003 f9cb 	bl	8006c5a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	4608      	mov	r0, r1
 80038e0:	4611      	mov	r1, r2
 80038e2:	461a      	mov	r2, r3
 80038e4:	4603      	mov	r3, r0
 80038e6:	70fb      	strb	r3, [r7, #3]
 80038e8:	460b      	mov	r3, r1
 80038ea:	803b      	strh	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	da0f      	bge.n	800391c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	f003 020f 	and.w	r2, r3, #15
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	3338      	adds	r3, #56	; 0x38
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	3304      	adds	r3, #4
 8003912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	705a      	strb	r2, [r3, #1]
 800391a:	e00f      	b.n	800393c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	f003 020f 	and.w	r2, r3, #15
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	3304      	adds	r3, #4
 8003934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003948:	883a      	ldrh	r2, [r7, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	78ba      	ldrb	r2, [r7, #2]
 8003952:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003966:	78bb      	ldrb	r3, [r7, #2]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d102      	bne.n	8003972 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_PCD_EP_Open+0xaa>
 800397c:	2302      	movs	r3, #2
 800397e:	e00e      	b.n	800399e <HAL_PCD_EP_Open+0xc8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68f9      	ldr	r1, [r7, #12]
 800398e:	4618      	mov	r0, r3
 8003990:	f002 fb36 	bl	8006000 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800399c:	7afb      	ldrb	r3, [r7, #11]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da0f      	bge.n	80039da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	3338      	adds	r3, #56	; 0x38
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	3304      	adds	r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	705a      	strb	r2, [r3, #1]
 80039d8:	e00f      	b.n	80039fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	f003 020f 	and.w	r2, r3, #15
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	3304      	adds	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_PCD_EP_Close+0x6e>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e00e      	b.n	8003a32 <HAL_PCD_EP_Close+0x8c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f002 fb74 	bl	8006110 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
 8003a46:	460b      	mov	r3, r1
 8003a48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4a:	7afb      	ldrb	r3, [r7, #11]
 8003a4c:	f003 020f 	and.w	r2, r3, #15
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2200      	movs	r2, #0
 8003a74:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d102      	bne.n	8003a96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6979      	ldr	r1, [r7, #20]
 8003aae:	f002 fe4f 	bl	8006750 <USB_EP0StartXfer>
 8003ab2:	e008      	b.n	8003ac6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6979      	ldr	r1, [r7, #20]
 8003ac2:	f002 fc01 	bl	80062c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	f003 020f 	and.w	r2, r3, #15
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b10:	7afb      	ldrb	r3, [r7, #11]
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	3338      	adds	r3, #56	; 0x38
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b40:	7afb      	ldrb	r3, [r7, #11]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d102      	bne.n	8003b5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b5a:	7afb      	ldrb	r3, [r7, #11]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6979      	ldr	r1, [r7, #20]
 8003b72:	f002 fded 	bl	8006750 <USB_EP0StartXfer>
 8003b76:	e008      	b.n	8003b8a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	6979      	ldr	r1, [r7, #20]
 8003b86:	f002 fb9f 	bl	80062c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	f003 020f 	and.w	r2, r3, #15
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d901      	bls.n	8003bb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e050      	b.n	8003c54 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da0f      	bge.n	8003bda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	3338      	adds	r3, #56	; 0x38
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	705a      	strb	r2, [r3, #1]
 8003bd8:	e00d      	b.n	8003bf6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4413      	add	r3, r2
 8003bec:	3304      	adds	r3, #4
 8003bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_PCD_EP_SetStall+0x82>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e01e      	b.n	8003c54 <HAL_PCD_EP_SetStall+0xc0>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f002 ff44 	bl	8006ab2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	b2d9      	uxtb	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c44:	461a      	mov	r2, r3
 8003c46:	f003 f935 	bl	8006eb4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 020f 	and.w	r2, r3, #15
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d901      	bls.n	8003c7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e042      	b.n	8003d00 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	da0f      	bge.n	8003ca2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	3338      	adds	r3, #56	; 0x38
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	3304      	adds	r3, #4
 8003c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	705a      	strb	r2, [r3, #1]
 8003ca0:	e00f      	b.n	8003cc2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3304      	adds	r3, #4
 8003cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_PCD_EP_ClrStall+0x86>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e00e      	b.n	8003d00 <HAL_PCD_EP_ClrStall+0xa4>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f002 ff4c 	bl	8006b8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	; 0x28
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	3338      	adds	r3, #56	; 0x38
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d901      	bls.n	8003d40 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e06c      	b.n	8003e1a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d902      	bls.n	8003d5c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	3303      	adds	r3, #3
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d64:	e02b      	b.n	8003dbe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d902      	bls.n	8003d82 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3303      	adds	r3, #3
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	68d9      	ldr	r1, [r3, #12]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	4603      	mov	r3, r0
 8003da0:	6978      	ldr	r0, [r7, #20]
 8003da2:	f002 fe28 	bl	80069f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	441a      	add	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d809      	bhi.n	8003de8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	699a      	ldr	r2, [r3, #24]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d203      	bcs.n	8003de8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1be      	bne.n	8003d66 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d811      	bhi.n	8003e18 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	6939      	ldr	r1, [r7, #16]
 8003e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e14:	4013      	ands	r3, r2
 8003e16:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	333c      	adds	r3, #60	; 0x3c
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	f040 80a0 	bne.w	8003f9c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d015      	beq.n	8003e92 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4a72      	ldr	r2, [pc, #456]	; (8004034 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	f240 80dd 	bls.w	800402a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80d7 	beq.w	800402a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	6093      	str	r3, [r2, #8]
 8003e90:	e0cb      	b.n	800402a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d009      	beq.n	8003eb0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	2320      	movs	r3, #32
 8003eac:	6093      	str	r3, [r2, #8]
 8003eae:	e0bc      	b.n	800402a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f040 80b7 	bne.w	800402a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a5d      	ldr	r2, [pc, #372]	; (8004034 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d90f      	bls.n	8003ee4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eda:	461a      	mov	r2, r3
 8003edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee0:	6093      	str	r3, [r2, #8]
 8003ee2:	e0a2      	b.n	800402a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ef6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	0159      	lsls	r1, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	440b      	add	r3, r1
 8003f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f0a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4403      	add	r3, r0
 8003f1a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f1e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4403      	add	r3, r0
 8003f42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4419      	add	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4403      	add	r3, r0
 8003f58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f5c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d114      	bne.n	8003f8e <PCD_EP_OutXfrComplete_int+0x16a>
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d108      	bne.n	8003f8e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f86:	461a      	mov	r2, r3
 8003f88:	2101      	movs	r1, #1
 8003f8a:	f002 ff93 	bl	8006eb4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f004 fea3 	bl	8008ce0 <HAL_PCD_DataOutStageCallback>
 8003f9a:	e046      	b.n	800402a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a26      	ldr	r2, [pc, #152]	; (8004038 <PCD_EP_OutXfrComplete_int+0x214>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d124      	bne.n	8003fee <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc0:	6093      	str	r3, [r2, #8]
 8003fc2:	e032      	b.n	800402a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2320      	movs	r3, #32
 8003fde:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f004 fe7a 	bl	8008ce0 <HAL_PCD_DataOutStageCallback>
 8003fec:	e01d      	b.n	800402a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d114      	bne.n	800401e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d108      	bne.n	800401e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004016:	461a      	mov	r2, r3
 8004018:	2100      	movs	r1, #0
 800401a:	f002 ff4b 	bl	8006eb4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f004 fe5b 	bl	8008ce0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	4f54300a 	.word	0x4f54300a
 8004038:	4f54310a 	.word	0x4f54310a

0800403c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	333c      	adds	r3, #60	; 0x3c
 8004054:	3304      	adds	r3, #4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d90e      	bls.n	8004090 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	461a      	mov	r2, r3
 800408a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800408e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f004 fe13 	bl	8008cbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d90c      	bls.n	80040b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d108      	bne.n	80040b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040b0:	461a      	mov	r2, r3
 80040b2:	2101      	movs	r1, #1
 80040b4:	f002 fefe 	bl	8006eb4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	4f54300a 	.word	0x4f54300a

080040c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	70fb      	strb	r3, [r7, #3]
 80040d4:	4613      	mov	r3, r2
 80040d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d107      	bne.n	80040f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040e6:	883b      	ldrh	r3, [r7, #0]
 80040e8:	0419      	lsls	r1, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
 80040f4:	e028      	b.n	8004148 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4413      	add	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]
 8004108:	e00d      	b.n	8004126 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	3340      	adds	r3, #64	; 0x40
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4413      	add	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	3301      	adds	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
 8004126:	7bfa      	ldrb	r2, [r7, #15]
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	3b01      	subs	r3, #1
 800412c:	429a      	cmp	r2, r3
 800412e:	d3ec      	bcc.n	800410a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004130:	883b      	ldrh	r3, [r7, #0]
 8004132:	0418      	lsls	r0, r3, #16
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6819      	ldr	r1, [r3, #0]
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	3b01      	subs	r3, #1
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	4302      	orrs	r2, r0
 8004140:	3340      	adds	r3, #64	; 0x40
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	887a      	ldrh	r2, [r7, #2]
 8004168:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e25b      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d075      	beq.n	800429a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ae:	4ba3      	ldr	r3, [pc, #652]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d00c      	beq.n	80041d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ba:	4ba0      	ldr	r3, [pc, #640]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d112      	bne.n	80041ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041c6:	4b9d      	ldr	r3, [pc, #628]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d2:	d10b      	bne.n	80041ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	4b99      	ldr	r3, [pc, #612]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d05b      	beq.n	8004298 <HAL_RCC_OscConfig+0x108>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d157      	bne.n	8004298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e236      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d106      	bne.n	8004204 <HAL_RCC_OscConfig+0x74>
 80041f6:	4b91      	ldr	r3, [pc, #580]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a90      	ldr	r2, [pc, #576]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e01d      	b.n	8004240 <HAL_RCC_OscConfig+0xb0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x98>
 800420e:	4b8b      	ldr	r3, [pc, #556]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a8a      	ldr	r2, [pc, #552]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b88      	ldr	r3, [pc, #544]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a87      	ldr	r2, [pc, #540]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0xb0>
 8004228:	4b84      	ldr	r3, [pc, #528]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a83      	ldr	r2, [pc, #524]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800422e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	4b81      	ldr	r3, [pc, #516]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a80      	ldr	r2, [pc, #512]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800423a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fd fd30 	bl	8001cac <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004250:	f7fd fd2c 	bl	8001cac <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1fb      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b76      	ldr	r3, [pc, #472]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0xc0>
 800426e:	e014      	b.n	800429a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fd fd1c 	bl	8001cac <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004278:	f7fd fd18 	bl	8001cac <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e1e7      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428a:	4b6c      	ldr	r3, [pc, #432]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0xe8>
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d063      	beq.n	800436e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042a6:	4b65      	ldr	r3, [pc, #404]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b62      	ldr	r3, [pc, #392]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d11c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042be:	4b5f      	ldr	r3, [pc, #380]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d116      	bne.n	80042f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	4b5c      	ldr	r3, [pc, #368]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_RCC_OscConfig+0x152>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e1bb      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e2:	4b56      	ldr	r3, [pc, #344]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4952      	ldr	r1, [pc, #328]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f6:	e03a      	b.n	800436e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004300:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <HAL_RCC_OscConfig+0x2b0>)
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7fd fcd1 	bl	8001cac <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800430e:	f7fd fccd 	bl	8001cac <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e19c      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004320:	4b46      	ldr	r3, [pc, #280]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432c:	4b43      	ldr	r3, [pc, #268]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4940      	ldr	r1, [pc, #256]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]
 8004340:	e015      	b.n	800436e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004342:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <HAL_RCC_OscConfig+0x2b0>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fcb0 	bl	8001cac <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004350:	f7fd fcac 	bl	8001cac <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e17b      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004362:	4b36      	ldr	r3, [pc, #216]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d030      	beq.n	80043dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004382:	4b30      	ldr	r3, [pc, #192]	; (8004444 <HAL_RCC_OscConfig+0x2b4>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004388:	f7fd fc90 	bl	8001cac <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004390:	f7fd fc8c 	bl	8001cac <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e15b      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a2:	4b26      	ldr	r3, [pc, #152]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x200>
 80043ae:	e015      	b.n	80043dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b0:	4b24      	ldr	r3, [pc, #144]	; (8004444 <HAL_RCC_OscConfig+0x2b4>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b6:	f7fd fc79 	bl	8001cac <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043be:	f7fd fc75 	bl	8001cac <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e144      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b1a      	ldr	r3, [pc, #104]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f0      	bne.n	80043be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80a0 	beq.w	800452a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b0f      	ldr	r3, [pc, #60]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	4a0e      	ldr	r2, [pc, #56]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	; 0x40
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <HAL_RCC_OscConfig+0x2ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_OscConfig+0x2b8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d121      	bne.n	800446a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_RCC_OscConfig+0x2b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a07      	ldr	r2, [pc, #28]	; (8004448 <HAL_RCC_OscConfig+0x2b8>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004432:	f7fd fc3b 	bl	8001cac <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	e011      	b.n	800445e <HAL_RCC_OscConfig+0x2ce>
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	42470000 	.word	0x42470000
 8004444:	42470e80 	.word	0x42470e80
 8004448:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444c:	f7fd fc2e 	bl	8001cac <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0fd      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445e:	4b81      	ldr	r3, [pc, #516]	; (8004664 <HAL_RCC_OscConfig+0x4d4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d106      	bne.n	8004480 <HAL_RCC_OscConfig+0x2f0>
 8004472:	4b7d      	ldr	r3, [pc, #500]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a7c      	ldr	r2, [pc, #496]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
 800447e:	e01c      	b.n	80044ba <HAL_RCC_OscConfig+0x32a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b05      	cmp	r3, #5
 8004486:	d10c      	bne.n	80044a2 <HAL_RCC_OscConfig+0x312>
 8004488:	4b77      	ldr	r3, [pc, #476]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	4a76      	ldr	r2, [pc, #472]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800448e:	f043 0304 	orr.w	r3, r3, #4
 8004492:	6713      	str	r3, [r2, #112]	; 0x70
 8004494:	4b74      	ldr	r3, [pc, #464]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a73      	ldr	r2, [pc, #460]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	e00b      	b.n	80044ba <HAL_RCC_OscConfig+0x32a>
 80044a2:	4b71      	ldr	r3, [pc, #452]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	4a70      	ldr	r2, [pc, #448]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6713      	str	r3, [r2, #112]	; 0x70
 80044ae:	4b6e      	ldr	r3, [pc, #440]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	4a6d      	ldr	r2, [pc, #436]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80044b4:	f023 0304 	bic.w	r3, r3, #4
 80044b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d015      	beq.n	80044ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fd fbf3 	bl	8001cac <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fd fbef 	bl	8001cac <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0bc      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e0:	4b61      	ldr	r3, [pc, #388]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ee      	beq.n	80044ca <HAL_RCC_OscConfig+0x33a>
 80044ec:	e014      	b.n	8004518 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ee:	f7fd fbdd 	bl	8001cac <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f4:	e00a      	b.n	800450c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7fd fbd9 	bl	8001cac <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	; 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0a6      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450c:	4b56      	ldr	r3, [pc, #344]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ee      	bne.n	80044f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	4b52      	ldr	r3, [pc, #328]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	4a51      	ldr	r2, [pc, #324]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8092 	beq.w	8004658 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004534:	4b4c      	ldr	r3, [pc, #304]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b08      	cmp	r3, #8
 800453e:	d05c      	beq.n	80045fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d141      	bne.n	80045cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004548:	4b48      	ldr	r3, [pc, #288]	; (800466c <HAL_RCC_OscConfig+0x4dc>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fd fbad 	bl	8001cac <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004556:	f7fd fba9 	bl	8001cac <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e078      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004568:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f0      	bne.n	8004556 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	019b      	lsls	r3, r3, #6
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	3b01      	subs	r3, #1
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	4933      	ldr	r1, [pc, #204]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 800459a:	4313      	orrs	r3, r2
 800459c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <HAL_RCC_OscConfig+0x4dc>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fd fb82 	bl	8001cac <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ac:	f7fd fb7e 	bl	8001cac <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e04d      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045be:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x41c>
 80045ca:	e045      	b.n	8004658 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <HAL_RCC_OscConfig+0x4dc>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d2:	f7fd fb6b 	bl	8001cac <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045da:	f7fd fb67 	bl	8001cac <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e036      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ec:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1f0      	bne.n	80045da <HAL_RCC_OscConfig+0x44a>
 80045f8:	e02e      	b.n	8004658 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e029      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004606:	4b18      	ldr	r3, [pc, #96]	; (8004668 <HAL_RCC_OscConfig+0x4d8>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	429a      	cmp	r2, r3
 8004618:	d11c      	bne.n	8004654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d115      	bne.n	8004654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800462e:	4013      	ands	r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004634:	4293      	cmp	r3, r2
 8004636:	d10d      	bne.n	8004654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d106      	bne.n	8004654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40007000 	.word	0x40007000
 8004668:	40023800 	.word	0x40023800
 800466c:	42470060 	.word	0x42470060

08004670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0cc      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004684:	4b68      	ldr	r3, [pc, #416]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d90c      	bls.n	80046ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b65      	ldr	r3, [pc, #404]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b63      	ldr	r3, [pc, #396]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0b8      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c4:	4b59      	ldr	r3, [pc, #356]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a58      	ldr	r2, [pc, #352]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046dc:	4b53      	ldr	r3, [pc, #332]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4a52      	ldr	r2, [pc, #328]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e8:	4b50      	ldr	r3, [pc, #320]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	494d      	ldr	r1, [pc, #308]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d044      	beq.n	8004790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d107      	bne.n	800471e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	4b47      	ldr	r3, [pc, #284]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d119      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e07f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d003      	beq.n	800472e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472a:	2b03      	cmp	r3, #3
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472e:	4b3f      	ldr	r3, [pc, #252]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e06f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473e:	4b3b      	ldr	r3, [pc, #236]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e067      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800474e:	4b37      	ldr	r3, [pc, #220]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f023 0203 	bic.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4934      	ldr	r1, [pc, #208]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004760:	f7fd faa4 	bl	8001cac <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	e00a      	b.n	800477e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004768:	f7fd faa0 	bl	8001cac <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e04f      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	4b2b      	ldr	r3, [pc, #172]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 020c 	and.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	429a      	cmp	r2, r3
 800478e:	d1eb      	bne.n	8004768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d20c      	bcs.n	80047b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b22      	ldr	r3, [pc, #136]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <HAL_RCC_ClockConfig+0x1b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e032      	b.n	800481e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4916      	ldr	r1, [pc, #88]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	490e      	ldr	r1, [pc, #56]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047f6:	f000 f821 	bl	800483c <HAL_RCC_GetSysClockFreq>
 80047fa:	4601      	mov	r1, r0
 80047fc:	4b0b      	ldr	r3, [pc, #44]	; (800482c <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <HAL_RCC_ClockConfig+0x1c0>)
 8004808:	5cd3      	ldrb	r3, [r2, r3]
 800480a:	fa21 f303 	lsr.w	r3, r1, r3
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004812:	4b09      	ldr	r3, [pc, #36]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd fa04 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023c00 	.word	0x40023c00
 800482c:	40023800 	.word	0x40023800
 8004830:	0800b370 	.word	0x0800b370
 8004834:	20000014 	.word	0x20000014
 8004838:	20000018 	.word	0x20000018

0800483c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800483c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	2300      	movs	r3, #0
 800484c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004852:	4b63      	ldr	r3, [pc, #396]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	2b04      	cmp	r3, #4
 800485c:	d007      	beq.n	800486e <HAL_RCC_GetSysClockFreq+0x32>
 800485e:	2b08      	cmp	r3, #8
 8004860:	d008      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0x38>
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 80b4 	bne.w	80049d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004868:	4b5e      	ldr	r3, [pc, #376]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800486a:	60bb      	str	r3, [r7, #8]
       break;
 800486c:	e0b3      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800486e:	4b5e      	ldr	r3, [pc, #376]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004870:	60bb      	str	r3, [r7, #8]
      break;
 8004872:	e0b0      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004874:	4b5a      	ldr	r3, [pc, #360]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800487c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800487e:	4b58      	ldr	r3, [pc, #352]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04a      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488a:	4b55      	ldr	r3, [pc, #340]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	f04f 0400 	mov.w	r4, #0
 8004894:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	ea03 0501 	and.w	r5, r3, r1
 80048a0:	ea04 0602 	and.w	r6, r4, r2
 80048a4:	4629      	mov	r1, r5
 80048a6:	4632      	mov	r2, r6
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	f04f 0400 	mov.w	r4, #0
 80048b0:	0154      	lsls	r4, r2, #5
 80048b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048b6:	014b      	lsls	r3, r1, #5
 80048b8:	4619      	mov	r1, r3
 80048ba:	4622      	mov	r2, r4
 80048bc:	1b49      	subs	r1, r1, r5
 80048be:	eb62 0206 	sbc.w	r2, r2, r6
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	f04f 0400 	mov.w	r4, #0
 80048ca:	0194      	lsls	r4, r2, #6
 80048cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048d0:	018b      	lsls	r3, r1, #6
 80048d2:	1a5b      	subs	r3, r3, r1
 80048d4:	eb64 0402 	sbc.w	r4, r4, r2
 80048d8:	f04f 0100 	mov.w	r1, #0
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	00e2      	lsls	r2, r4, #3
 80048e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048e6:	00d9      	lsls	r1, r3, #3
 80048e8:	460b      	mov	r3, r1
 80048ea:	4614      	mov	r4, r2
 80048ec:	195b      	adds	r3, r3, r5
 80048ee:	eb44 0406 	adc.w	r4, r4, r6
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	0262      	lsls	r2, r4, #9
 80048fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004900:	0259      	lsls	r1, r3, #9
 8004902:	460b      	mov	r3, r1
 8004904:	4614      	mov	r4, r2
 8004906:	4618      	mov	r0, r3
 8004908:	4621      	mov	r1, r4
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f04f 0400 	mov.w	r4, #0
 8004910:	461a      	mov	r2, r3
 8004912:	4623      	mov	r3, r4
 8004914:	f7fc f998 	bl	8000c48 <__aeabi_uldivmod>
 8004918:	4603      	mov	r3, r0
 800491a:	460c      	mov	r4, r1
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e049      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004920:	4b2f      	ldr	r3, [pc, #188]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	f04f 0400 	mov.w	r4, #0
 800492a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	ea03 0501 	and.w	r5, r3, r1
 8004936:	ea04 0602 	and.w	r6, r4, r2
 800493a:	4629      	mov	r1, r5
 800493c:	4632      	mov	r2, r6
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	f04f 0400 	mov.w	r4, #0
 8004946:	0154      	lsls	r4, r2, #5
 8004948:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800494c:	014b      	lsls	r3, r1, #5
 800494e:	4619      	mov	r1, r3
 8004950:	4622      	mov	r2, r4
 8004952:	1b49      	subs	r1, r1, r5
 8004954:	eb62 0206 	sbc.w	r2, r2, r6
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	f04f 0400 	mov.w	r4, #0
 8004960:	0194      	lsls	r4, r2, #6
 8004962:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004966:	018b      	lsls	r3, r1, #6
 8004968:	1a5b      	subs	r3, r3, r1
 800496a:	eb64 0402 	sbc.w	r4, r4, r2
 800496e:	f04f 0100 	mov.w	r1, #0
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	00e2      	lsls	r2, r4, #3
 8004978:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800497c:	00d9      	lsls	r1, r3, #3
 800497e:	460b      	mov	r3, r1
 8004980:	4614      	mov	r4, r2
 8004982:	195b      	adds	r3, r3, r5
 8004984:	eb44 0406 	adc.w	r4, r4, r6
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	02a2      	lsls	r2, r4, #10
 8004992:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004996:	0299      	lsls	r1, r3, #10
 8004998:	460b      	mov	r3, r1
 800499a:	4614      	mov	r4, r2
 800499c:	4618      	mov	r0, r3
 800499e:	4621      	mov	r1, r4
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f04f 0400 	mov.w	r4, #0
 80049a6:	461a      	mov	r2, r3
 80049a8:	4623      	mov	r3, r4
 80049aa:	f7fc f94d 	bl	8000c48 <__aeabi_uldivmod>
 80049ae:	4603      	mov	r3, r0
 80049b0:	460c      	mov	r4, r1
 80049b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b4:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	3301      	adds	r3, #1
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	60bb      	str	r3, [r7, #8]
      break;
 80049ce:	e002      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049d2:	60bb      	str	r3, [r7, #8]
      break;
 80049d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d6:	68bb      	ldr	r3, [r7, #8]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e0:	40023800 	.word	0x40023800
 80049e4:	00f42400 	.word	0x00f42400
 80049e8:	007a1200 	.word	0x007a1200

080049ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f0:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000014 	.word	0x20000014

08004a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a08:	f7ff fff0 	bl	80049ec <HAL_RCC_GetHCLKFreq>
 8004a0c:	4601      	mov	r1, r0
 8004a0e:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0a9b      	lsrs	r3, r3, #10
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4a03      	ldr	r2, [pc, #12]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1a:	5cd3      	ldrb	r3, [r2, r3]
 8004a1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40023800 	.word	0x40023800
 8004a28:	0800b380 	.word	0x0800b380

08004a2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d035      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a54:	4b62      	ldr	r3, [pc, #392]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a5a:	f7fd f927 	bl	8001cac <HAL_GetTick>
 8004a5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a62:	f7fd f923 	bl	8001cac <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e0b0      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a74:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	019a      	lsls	r2, r3, #6
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	071b      	lsls	r3, r3, #28
 8004a8c:	4955      	ldr	r1, [pc, #340]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a94:	4b52      	ldr	r3, [pc, #328]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9a:	f7fd f907 	bl	8001cac <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aa2:	f7fd f903 	bl	8001cac <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e090      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab4:	4b4b      	ldr	r3, [pc, #300]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8083 	beq.w	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4b44      	ldr	r3, [pc, #272]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	4a43      	ldr	r2, [pc, #268]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004adc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ade:	4b41      	ldr	r3, [pc, #260]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004aea:	4b3f      	ldr	r3, [pc, #252]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a3e      	ldr	r2, [pc, #248]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af6:	f7fd f8d9 	bl	8001cac <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004afe:	f7fd f8d5 	bl	8001cac <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e062      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b10:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b1c:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d02f      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d028      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b3a:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b44:	4b29      	ldr	r3, [pc, #164]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b4a:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b50:	4a24      	ldr	r2, [pc, #144]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b56:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d114      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fd f8a3 	bl	8001cac <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fd f89f 	bl	8001cac <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e02a      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ee      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b98:	d10d      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bae:	490d      	ldr	r1, [pc, #52]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	608b      	str	r3, [r1, #8]
 8004bb4:	e005      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bbc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bc0:	6093      	str	r3, [r2, #8]
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bce:	4905      	ldr	r1, [pc, #20]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	42470068 	.word	0x42470068
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40007000 	.word	0x40007000
 8004bec:	42470e40 	.word	0x42470e40

08004bf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d13d      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c16:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d12f      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c22:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c24:	617b      	str	r3, [r7, #20]
          break;
 8004c26:	e02f      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c28:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c34:	d108      	bne.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c36:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3e:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e007      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c72:	0f1b      	lsrs	r3, r3, #28
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7e:	617b      	str	r3, [r7, #20]
          break;
 8004c80:	e002      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
          break;
 8004c86:	bf00      	nop
        }
      }
      break;
 8004c88:	bf00      	nop
    }
  }
  return frequency;
 8004c8a:	697b      	ldr	r3, [r7, #20]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	00bb8000 	.word	0x00bb8000
 8004ca0:	007a1200 	.word	0x007a1200
 8004ca4:	00f42400 	.word	0x00f42400

08004ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e056      	b.n	8004d68 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fc fdcd 	bl	8001874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	ea42 0103 	orr.w	r1, r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	0c1b      	lsrs	r3, r3, #16
 8004d38:	f003 0104 	and.w	r1, r3, #4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	099b      	lsrs	r3, r3, #6
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10f      	bne.n	8004db4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	099b      	lsrs	r3, r3, #6
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
    return;
 8004db2:	e0d8      	b.n	8004f66 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_SPI_IRQHandler+0x66>
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	09db      	lsrs	r3, r3, #7
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d004      	beq.n	8004dd6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	4798      	blx	r3
    return;
 8004dd4:	e0c7      	b.n	8004f66 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10c      	bne.n	8004dfc <HAL_SPI_IRQHandler+0x8c>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	099b      	lsrs	r3, r3, #6
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	0a1b      	lsrs	r3, r3, #8
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 80b5 	beq.w	8004f66 <HAL_SPI_IRQHandler+0x1f6>
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80ae 	beq.w	8004f66 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	099b      	lsrs	r3, r3, #6
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d023      	beq.n	8004e5e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d011      	beq.n	8004e46 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	f043 0204 	orr.w	r2, r3, #4
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	e00b      	b.n	8004e5e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e46:	2300      	movs	r3, #0
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	693b      	ldr	r3, [r7, #16]
        return;
 8004e5c:	e083      	b.n	8004f66 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d014      	beq.n	8004e94 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	f043 0201 	orr.w	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00c      	beq.n	8004eba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	f043 0208 	orr.w	r2, r3, #8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004eac:	2300      	movs	r3, #0
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d050      	beq.n	8004f64 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ed0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d104      	bne.n	8004eee <HAL_SPI_IRQHandler+0x17e>
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d034      	beq.n	8004f58 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0203 	bic.w	r2, r2, #3
 8004efc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d011      	beq.n	8004f2a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0a:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_SPI_IRQHandler+0x1fc>)
 8004f0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fd f809 	bl	8001f2a <HAL_DMA_Abort_IT>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f36:	4a0d      	ldr	r2, [pc, #52]	; (8004f6c <HAL_SPI_IRQHandler+0x1fc>)
 8004f38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fc fff3 	bl	8001f2a <HAL_DMA_Abort_IT>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004f56:	e003      	b.n	8004f60 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f809 	bl	8004f70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f5e:	e000      	b.n	8004f62 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004f60:	bf00      	nop
    return;
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
  }
}
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	08004f85 	.word	0x08004f85

08004f70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f7ff ffe6 	bl	8004f70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e01d      	b.n	8004ffa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fc fd1c 	bl	8001a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f000 fade 	bl	80055ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0201 	orr.w	r2, r2, #1
 8005018:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b06      	cmp	r3, #6
 800502a:	d007      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e083      	b.n	8005166 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fc fc84 	bl	8001980 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800508e:	f023 0307 	bic.w	r3, r3, #7
 8005092:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3304      	adds	r3, #4
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f000 fa84 	bl	80055ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050cc:	f023 0303 	bic.w	r3, r3, #3
 80050d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	4313      	orrs	r3, r2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050ea:	f023 030c 	bic.w	r3, r3, #12
 80050ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	4313      	orrs	r3, r2
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	011a      	lsls	r2, r3, #4
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	031b      	lsls	r3, r3, #12
 800511a:	4313      	orrs	r3, r2
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005128:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005130:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	4313      	orrs	r3, r2
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <HAL_TIM_Encoder_Start+0x16>
 800517e:	2b04      	cmp	r3, #4
 8005180:	d008      	beq.n	8005194 <HAL_TIM_Encoder_Start+0x26>
 8005182:	e00f      	b.n	80051a4 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2201      	movs	r2, #1
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fb47 	bl	8005820 <TIM_CCxChannelCmd>
      break;
 8005192:	e016      	b.n	80051c2 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2201      	movs	r2, #1
 800519a:	2104      	movs	r1, #4
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fb3f 	bl	8005820 <TIM_CCxChannelCmd>
      break;
 80051a2:	e00e      	b.n	80051c2 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2201      	movs	r2, #1
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fb37 	bl	8005820 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	2104      	movs	r1, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fb30 	bl	8005820 <TIM_CCxChannelCmd>
      break;
 80051c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0202 	mvn.w	r2, #2
 8005208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f9a5 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f997 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f9a8 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b04      	cmp	r3, #4
 8005244:	d122      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d11b      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f97b 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f96d 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f97e 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b08      	cmp	r3, #8
 8005298:	d122      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d11b      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0208 	mvn.w	r2, #8
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2204      	movs	r2, #4
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f951 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f943 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f954 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d122      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d11b      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0210 	mvn.w	r2, #16
 8005304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2208      	movs	r2, #8
 800530a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f927 	bl	800556e <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f919 	bl	800555a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f92a 	bl	8005582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10e      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d107      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0201 	mvn.w	r2, #1
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fb fdf4 	bl	8000f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 faf6 	bl	8005978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f8ef 	bl	8005596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d10e      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d107      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0220 	mvn.w	r2, #32
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fac0 	bl	8005964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_TIM_ConfigClockSource+0x18>
 8005400:	2302      	movs	r3, #2
 8005402:	e0a6      	b.n	8005552 <HAL_TIM_ConfigClockSource+0x166>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800542a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d067      	beq.n	800550c <HAL_TIM_ConfigClockSource+0x120>
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	d80b      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x6c>
 8005440:	2b10      	cmp	r3, #16
 8005442:	d073      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x140>
 8005444:	2b10      	cmp	r3, #16
 8005446:	d802      	bhi.n	800544e <HAL_TIM_ConfigClockSource+0x62>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d06f      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800544c:	e078      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800544e:	2b20      	cmp	r3, #32
 8005450:	d06c      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x140>
 8005452:	2b30      	cmp	r3, #48	; 0x30
 8005454:	d06a      	beq.n	800552c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005456:	e073      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005458:	2b70      	cmp	r3, #112	; 0x70
 800545a:	d00d      	beq.n	8005478 <HAL_TIM_ConfigClockSource+0x8c>
 800545c:	2b70      	cmp	r3, #112	; 0x70
 800545e:	d804      	bhi.n	800546a <HAL_TIM_ConfigClockSource+0x7e>
 8005460:	2b50      	cmp	r3, #80	; 0x50
 8005462:	d033      	beq.n	80054cc <HAL_TIM_ConfigClockSource+0xe0>
 8005464:	2b60      	cmp	r3, #96	; 0x60
 8005466:	d041      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005468:	e06a      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800546a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546e:	d066      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x152>
 8005470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005474:	d017      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005476:	e063      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	6899      	ldr	r1, [r3, #8]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f000 f9aa 	bl	80057e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800549a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	609a      	str	r2, [r3, #8]
      break;
 80054a4:	e04c      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6899      	ldr	r1, [r3, #8]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f000 f993 	bl	80057e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c8:	609a      	str	r2, [r3, #8]
      break;
 80054ca:	e039      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	461a      	mov	r2, r3
 80054da:	f000 f907 	bl	80056ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2150      	movs	r1, #80	; 0x50
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 f960 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 80054ea:	e029      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	6859      	ldr	r1, [r3, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	461a      	mov	r2, r3
 80054fa:	f000 f926 	bl	800574a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2160      	movs	r1, #96	; 0x60
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f950 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 800550a:	e019      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	6859      	ldr	r1, [r3, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	461a      	mov	r2, r3
 800551a:	f000 f8e7 	bl	80056ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2140      	movs	r1, #64	; 0x40
 8005524:	4618      	mov	r0, r3
 8005526:	f000 f940 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 800552a:	e009      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4619      	mov	r1, r3
 8005536:	4610      	mov	r0, r2
 8005538:	f000 f937 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 800553c:	e000      	b.n	8005540 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800553e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a40      	ldr	r2, [pc, #256]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ca:	d00f      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a3d      	ldr	r2, [pc, #244]	; (80056c4 <TIM_Base_SetConfig+0x118>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00b      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3c      	ldr	r2, [pc, #240]	; (80056c8 <TIM_Base_SetConfig+0x11c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a3b      	ldr	r2, [pc, #236]	; (80056cc <TIM_Base_SetConfig+0x120>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3a      	ldr	r2, [pc, #232]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d108      	bne.n	80055fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d02b      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560c:	d027      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2c      	ldr	r2, [pc, #176]	; (80056c4 <TIM_Base_SetConfig+0x118>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d023      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <TIM_Base_SetConfig+0x11c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01f      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <TIM_Base_SetConfig+0x120>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01b      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a29      	ldr	r2, [pc, #164]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d017      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a28      	ldr	r2, [pc, #160]	; (80056d4 <TIM_Base_SetConfig+0x128>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a27      	ldr	r2, [pc, #156]	; (80056d8 <TIM_Base_SetConfig+0x12c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00f      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a26      	ldr	r2, [pc, #152]	; (80056dc <TIM_Base_SetConfig+0x130>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00b      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a25      	ldr	r2, [pc, #148]	; (80056e0 <TIM_Base_SetConfig+0x134>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a24      	ldr	r2, [pc, #144]	; (80056e4 <TIM_Base_SetConfig+0x138>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a23      	ldr	r2, [pc, #140]	; (80056e8 <TIM_Base_SetConfig+0x13c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a0c      	ldr	r2, [pc, #48]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d103      	bne.n	80056ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	615a      	str	r2, [r3, #20]
}
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40000400 	.word	0x40000400
 80056c8:	40000800 	.word	0x40000800
 80056cc:	40000c00 	.word	0x40000c00
 80056d0:	40010400 	.word	0x40010400
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800
 80056e0:	40001800 	.word	0x40001800
 80056e4:	40001c00 	.word	0x40001c00
 80056e8:	40002000 	.word	0x40002000

080056ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 030a 	bic.w	r3, r3, #10
 8005728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574a:	b480      	push	{r7}
 800574c:	b087      	sub	sp, #28
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0210 	bic.w	r2, r3, #16
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	031b      	lsls	r3, r3, #12
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005786:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f043 0307 	orr.w	r3, r3, #7
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	021a      	lsls	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	431a      	orrs	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2201      	movs	r2, #1
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1a      	ldr	r2, [r3, #32]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	43db      	mvns	r3, r3
 8005842:	401a      	ands	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	fa01 f303 	lsl.w	r3, r1, r3
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005880:	2302      	movs	r3, #2
 8005882:	e05a      	b.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a21      	ldr	r2, [pc, #132]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d022      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d01d      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1d      	ldr	r2, [pc, #116]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d018      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a18      	ldr	r2, [pc, #96]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a17      	ldr	r2, [pc, #92]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a15      	ldr	r2, [pc, #84]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10c      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	4313      	orrs	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	40000c00 	.word	0x40000c00
 8005958:	40010400 	.word	0x40010400
 800595c:	40014000 	.word	0x40014000
 8005960:	40001800 	.word	0x40001800

08005964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800598c:	b084      	sub	sp, #16
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	f107 001c 	add.w	r0, r7, #28
 800599a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d122      	bne.n	80059ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fac6 	bl	8006f70 <USB_CoreReset>
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]
 80059e8:	e01a      	b.n	8005a20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 faba 	bl	8006f70 <USB_CoreReset>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
 8005a12:	e005      	b.n	8005a20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d10b      	bne.n	8005a3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f043 0206 	orr.w	r2, r3, #6
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f043 0220 	orr.w	r2, r3, #32
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a4a:	b004      	add	sp, #16
 8005a4c:	4770      	bx	lr
	...

08005a50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d165      	bne.n	8005b30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4a41      	ldr	r2, [pc, #260]	; (8005b6c <USB_SetTurnaroundTime+0x11c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d906      	bls.n	8005a7a <USB_SetTurnaroundTime+0x2a>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4a40      	ldr	r2, [pc, #256]	; (8005b70 <USB_SetTurnaroundTime+0x120>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d802      	bhi.n	8005a7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a74:	230f      	movs	r3, #15
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e062      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4a3c      	ldr	r2, [pc, #240]	; (8005b70 <USB_SetTurnaroundTime+0x120>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d906      	bls.n	8005a90 <USB_SetTurnaroundTime+0x40>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4a3b      	ldr	r2, [pc, #236]	; (8005b74 <USB_SetTurnaroundTime+0x124>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d802      	bhi.n	8005a90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a8a:	230e      	movs	r3, #14
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e057      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4a38      	ldr	r2, [pc, #224]	; (8005b74 <USB_SetTurnaroundTime+0x124>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d906      	bls.n	8005aa6 <USB_SetTurnaroundTime+0x56>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4a37      	ldr	r2, [pc, #220]	; (8005b78 <USB_SetTurnaroundTime+0x128>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d802      	bhi.n	8005aa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005aa0:	230d      	movs	r3, #13
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e04c      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4a33      	ldr	r2, [pc, #204]	; (8005b78 <USB_SetTurnaroundTime+0x128>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d906      	bls.n	8005abc <USB_SetTurnaroundTime+0x6c>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4a32      	ldr	r2, [pc, #200]	; (8005b7c <USB_SetTurnaroundTime+0x12c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d802      	bhi.n	8005abc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e041      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4a2f      	ldr	r2, [pc, #188]	; (8005b7c <USB_SetTurnaroundTime+0x12c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d906      	bls.n	8005ad2 <USB_SetTurnaroundTime+0x82>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4a2e      	ldr	r2, [pc, #184]	; (8005b80 <USB_SetTurnaroundTime+0x130>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d802      	bhi.n	8005ad2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005acc:	230b      	movs	r3, #11
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e036      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <USB_SetTurnaroundTime+0x130>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d906      	bls.n	8005ae8 <USB_SetTurnaroundTime+0x98>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <USB_SetTurnaroundTime+0x134>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d802      	bhi.n	8005ae8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ae2:	230a      	movs	r3, #10
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e02b      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4a26      	ldr	r2, [pc, #152]	; (8005b84 <USB_SetTurnaroundTime+0x134>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d906      	bls.n	8005afe <USB_SetTurnaroundTime+0xae>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4a25      	ldr	r2, [pc, #148]	; (8005b88 <USB_SetTurnaroundTime+0x138>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d802      	bhi.n	8005afe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005af8:	2309      	movs	r3, #9
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e020      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4a21      	ldr	r2, [pc, #132]	; (8005b88 <USB_SetTurnaroundTime+0x138>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d906      	bls.n	8005b14 <USB_SetTurnaroundTime+0xc4>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4a20      	ldr	r2, [pc, #128]	; (8005b8c <USB_SetTurnaroundTime+0x13c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d802      	bhi.n	8005b14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b0e:	2308      	movs	r3, #8
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	e015      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4a1d      	ldr	r2, [pc, #116]	; (8005b8c <USB_SetTurnaroundTime+0x13c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d906      	bls.n	8005b2a <USB_SetTurnaroundTime+0xda>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4a1c      	ldr	r2, [pc, #112]	; (8005b90 <USB_SetTurnaroundTime+0x140>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d802      	bhi.n	8005b2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b24:	2307      	movs	r3, #7
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e00a      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b2a:	2306      	movs	r3, #6
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e007      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b36:	2309      	movs	r3, #9
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e001      	b.n	8005b40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b3c:	2309      	movs	r3, #9
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	029b      	lsls	r3, r3, #10
 8005b54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	00d8acbf 	.word	0x00d8acbf
 8005b70:	00e4e1bf 	.word	0x00e4e1bf
 8005b74:	00f423ff 	.word	0x00f423ff
 8005b78:	0106737f 	.word	0x0106737f
 8005b7c:	011a499f 	.word	0x011a499f
 8005b80:	01312cff 	.word	0x01312cff
 8005b84:	014ca43f 	.word	0x014ca43f
 8005b88:	016e35ff 	.word	0x016e35ff
 8005b8c:	01a6ab1f 	.word	0x01a6ab1f
 8005b90:	01e847ff 	.word	0x01e847ff

08005b94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f043 0201 	orr.w	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 0201 	bic.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d106      	bne.n	8005c04 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60da      	str	r2, [r3, #12]
 8005c02:	e00b      	b.n	8005c1c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	e001      	b.n	8005c1c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e003      	b.n	8005c24 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c1c:	2032      	movs	r0, #50	; 0x32
 8005c1e:	f7fc f851 	bl	8001cc4 <HAL_Delay>

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b086      	sub	sp, #24
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	e009      	b.n	8005c60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3340      	adds	r3, #64	; 0x40
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	2200      	movs	r2, #0
 8005c58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b0e      	cmp	r3, #14
 8005c64:	d9f2      	bls.n	8005c4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d11c      	bne.n	8005ca6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c7a:	f043 0302 	orr.w	r3, r3, #2
 8005c7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ca4:	e00b      	b.n	8005cbe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd8:	461a      	mov	r2, r3
 8005cda:	680b      	ldr	r3, [r1, #0]
 8005cdc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d10c      	bne.n	8005cfe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cea:	2100      	movs	r1, #0
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f949 	bl	8005f84 <USB_SetDevSpeed>
 8005cf2:	e008      	b.n	8005d06 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f944 	bl	8005f84 <USB_SetDevSpeed>
 8005cfc:	e003      	b.n	8005d06 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cfe:	2103      	movs	r1, #3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f93f 	bl	8005f84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d06:	2110      	movs	r1, #16
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f8f3 	bl	8005ef4 <USB_FlushTxFifo>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f911 	bl	8005f40 <USB_FlushRxFifo>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2e:	461a      	mov	r2, r3
 8005d30:	2300      	movs	r3, #0
 8005d32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	461a      	mov	r2, r3
 8005d48:	2300      	movs	r3, #0
 8005d4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	e043      	b.n	8005dda <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d68:	d118      	bne.n	8005d9c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	e013      	b.n	8005dae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d92:	461a      	mov	r2, r3
 8005d94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e008      	b.n	8005dae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	461a      	mov	r2, r3
 8005daa:	2300      	movs	r3, #0
 8005dac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d3b7      	bcc.n	8005d52 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	e043      	b.n	8005e70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dfe:	d118      	bne.n	8005e32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	461a      	mov	r2, r3
 8005e14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	e013      	b.n	8005e44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	e008      	b.n	8005e44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	461a      	mov	r2, r3
 8005e40:	2300      	movs	r3, #0
 8005e42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e50:	461a      	mov	r2, r3
 8005e52:	2300      	movs	r3, #0
 8005e54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	461a      	mov	r2, r3
 8005e64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d3b7      	bcc.n	8005de8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d105      	bne.n	8005eac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	f043 0210 	orr.w	r2, r3, #16
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <USB_DevInit+0x2c4>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f043 0208 	orr.w	r2, r3, #8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d107      	bne.n	8005ee0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed8:	f043 0304 	orr.w	r3, r3, #4
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eec:	b004      	add	sp, #16
 8005eee:	4770      	bx	lr
 8005ef0:	803c3800 	.word	0x803c3800

08005ef4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	019b      	lsls	r3, r3, #6
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3301      	adds	r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <USB_FlushTxFifo+0x48>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d901      	bls.n	8005f20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e006      	b.n	8005f2e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	d0f0      	beq.n	8005f0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	00030d40 	.word	0x00030d40

08005f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2210      	movs	r2, #16
 8005f50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <USB_FlushRxFifo+0x40>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d901      	bls.n	8005f64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e006      	b.n	8005f72 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	d0f0      	beq.n	8005f52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	00030d40 	.word	0x00030d40

08005f84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b087      	sub	sp, #28
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0306 	and.w	r3, r3, #6
 8005fce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]
 8005fda:	e00a      	b.n	8005ff2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d002      	beq.n	8005fe8 <USB_GetDevSpeed+0x32>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b06      	cmp	r3, #6
 8005fe6:	d102      	bne.n	8005fee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	75fb      	strb	r3, [r7, #23]
 8005fec:	e001      	b.n	8005ff2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005fee:	230f      	movs	r3, #15
 8005ff0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d13a      	bne.n	8006092 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	2101      	movs	r1, #1
 800602e:	fa01 f303 	lsl.w	r3, r1, r3
 8006032:	b29b      	uxth	r3, r3
 8006034:	68f9      	ldr	r1, [r7, #12]
 8006036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800603a:	4313      	orrs	r3, r2
 800603c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d155      	bne.n	8006100 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	78db      	ldrb	r3, [r3, #3]
 800606e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006070:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	059b      	lsls	r3, r3, #22
 8006076:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006078:	4313      	orrs	r3, r2
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	e036      	b.n	8006100 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006098:	69da      	ldr	r2, [r3, #28]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	2101      	movs	r1, #1
 80060a4:	fa01 f303 	lsl.w	r3, r1, r3
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060b0:	4313      	orrs	r3, r2
 80060b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d11a      	bne.n	8006100 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	78db      	ldrb	r3, [r3, #3]
 80060e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060e6:	430b      	orrs	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	0151      	lsls	r1, r2, #5
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	440a      	add	r2, r1
 80060f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
	...

08006110 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d161      	bne.n	80061f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800613e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006142:	d11f      	bne.n	8006184 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006162:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	440a      	add	r2, r1
 800617a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006182:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	b29b      	uxth	r3, r3
 800619c:	43db      	mvns	r3, r3
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a4:	4013      	ands	r3, r2
 80061a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	2101      	movs	r1, #1
 80061ba:	fa01 f303 	lsl.w	r3, r1, r3
 80061be:	b29b      	uxth	r3, r3
 80061c0:	43db      	mvns	r3, r3
 80061c2:	68f9      	ldr	r1, [r7, #12]
 80061c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061c8:	4013      	ands	r3, r2
 80061ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	0159      	lsls	r1, r3, #5
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	440b      	add	r3, r1
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	4619      	mov	r1, r3
 80061e8:	4b35      	ldr	r3, [pc, #212]	; (80062c0 <USB_DeactivateEndpoint+0x1b0>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	600b      	str	r3, [r1, #0]
 80061ee:	e060      	b.n	80062b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006206:	d11f      	bne.n	8006248 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	440a      	add	r2, r1
 800621e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006222:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006226:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	440a      	add	r2, r1
 800623e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006246:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f003 030f 	and.w	r3, r3, #15
 8006258:	2101      	movs	r1, #1
 800625a:	fa01 f303 	lsl.w	r3, r1, r3
 800625e:	041b      	lsls	r3, r3, #16
 8006260:	43db      	mvns	r3, r3
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006268:	4013      	ands	r3, r2
 800626a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	2101      	movs	r1, #1
 800627e:	fa01 f303 	lsl.w	r3, r1, r3
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	43db      	mvns	r3, r3
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800628c:	4013      	ands	r3, r2
 800628e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	0159      	lsls	r1, r3, #5
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	440b      	add	r3, r1
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	4619      	mov	r1, r3
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <USB_DeactivateEndpoint+0x1b4>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	ec337800 	.word	0xec337800
 80062c4:	eff37800 	.word	0xeff37800

080062c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	785b      	ldrb	r3, [r3, #1]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	f040 815c 	bne.w	80065a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d132      	bne.n	8006358 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006310:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006314:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006330:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006334:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	440a      	add	r2, r1
 800634c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006350:	0cdb      	lsrs	r3, r3, #19
 8006352:	04db      	lsls	r3, r3, #19
 8006354:	6113      	str	r3, [r2, #16]
 8006356:	e074      	b.n	8006442 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	440a      	add	r2, r1
 800636e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006372:	0cdb      	lsrs	r3, r3, #19
 8006374:	04db      	lsls	r3, r3, #19
 8006376:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006392:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006396:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800639a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6959      	ldr	r1, [r3, #20]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	440b      	add	r3, r1
 80063b4:	1e59      	subs	r1, r3, #1
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80063be:	04d9      	lsls	r1, r3, #19
 80063c0:	4b9d      	ldr	r3, [pc, #628]	; (8006638 <USB_EPStartXfer+0x370>)
 80063c2:	400b      	ands	r3, r1
 80063c4:	69b9      	ldr	r1, [r7, #24]
 80063c6:	0148      	lsls	r0, r1, #5
 80063c8:	69f9      	ldr	r1, [r7, #28]
 80063ca:	4401      	add	r1, r0
 80063cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063d0:	4313      	orrs	r3, r2
 80063d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ea:	69b9      	ldr	r1, [r7, #24]
 80063ec:	0148      	lsls	r0, r1, #5
 80063ee:	69f9      	ldr	r1, [r7, #28]
 80063f0:	4401      	add	r1, r0
 80063f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063f6:	4313      	orrs	r3, r2
 80063f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	78db      	ldrb	r3, [r3, #3]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d11f      	bne.n	8006442 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	440a      	add	r2, r1
 8006418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006420:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	0151      	lsls	r1, r2, #5
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	440a      	add	r2, r1
 8006438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800643c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006440:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d14b      	bne.n	80064e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	461a      	mov	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	78db      	ldrb	r3, [r3, #3]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d128      	bne.n	80064be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	d110      	bne.n	800649e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006496:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	e00f      	b.n	80064be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e12f      	b.n	8006740 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	78db      	ldrb	r3, [r3, #3]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d015      	beq.n	8006534 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8117 	beq.w	8006740 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	2101      	movs	r1, #1
 8006524:	fa01 f303 	lsl.w	r3, r1, r3
 8006528:	69f9      	ldr	r1, [r7, #28]
 800652a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800652e:	4313      	orrs	r3, r2
 8006530:	634b      	str	r3, [r1, #52]	; 0x34
 8006532:	e105      	b.n	8006740 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006540:	2b00      	cmp	r3, #0
 8006542:	d110      	bne.n	8006566 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	440a      	add	r2, r1
 800655a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	e00f      	b.n	8006586 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	440a      	add	r2, r1
 800657c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006584:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	68d9      	ldr	r1, [r3, #12]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	781a      	ldrb	r2, [r3, #0]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	b298      	uxth	r0, r3
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	4603      	mov	r3, r0
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fa2b 	bl	80069f6 <USB_WritePacket>
 80065a0:	e0ce      	b.n	8006740 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065bc:	0cdb      	lsrs	r3, r3, #19
 80065be:	04db      	lsls	r3, r3, #19
 80065c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d126      	bne.n	800663c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006604:	69b9      	ldr	r1, [r7, #24]
 8006606:	0148      	lsls	r0, r1, #5
 8006608:	69f9      	ldr	r1, [r7, #28]
 800660a:	4401      	add	r1, r0
 800660c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006610:	4313      	orrs	r3, r2
 8006612:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800662e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006632:	6113      	str	r3, [r2, #16]
 8006634:	e036      	b.n	80066a4 <USB_EPStartXfer+0x3dc>
 8006636:	bf00      	nop
 8006638:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	695a      	ldr	r2, [r3, #20]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	4413      	add	r3, r2
 8006646:	1e5a      	subs	r2, r3, #1
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006650:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	8afb      	ldrh	r3, [r7, #22]
 8006662:	04d9      	lsls	r1, r3, #19
 8006664:	4b39      	ldr	r3, [pc, #228]	; (800674c <USB_EPStartXfer+0x484>)
 8006666:	400b      	ands	r3, r1
 8006668:	69b9      	ldr	r1, [r7, #24]
 800666a:	0148      	lsls	r0, r1, #5
 800666c:	69f9      	ldr	r1, [r7, #28]
 800666e:	4401      	add	r1, r0
 8006670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006674:	4313      	orrs	r3, r2
 8006676:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006684:	691a      	ldr	r2, [r3, #16]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	8af9      	ldrh	r1, [r7, #22]
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006694:	69b9      	ldr	r1, [r7, #24]
 8006696:	0148      	lsls	r0, r1, #5
 8006698:	69f9      	ldr	r1, [r7, #28]
 800669a:	4401      	add	r1, r0
 800669c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066a0:	4313      	orrs	r3, r2
 80066a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d10d      	bne.n	80066c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	68d9      	ldr	r1, [r3, #12]
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	460a      	mov	r2, r1
 80066c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	78db      	ldrb	r3, [r3, #3]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d128      	bne.n	8006720 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d110      	bne.n	8006700 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e00f      	b.n	8006720 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800671e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800673a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800673e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3720      	adds	r7, #32
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	1ff80000 	.word	0x1ff80000

08006750 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b01      	cmp	r3, #1
 800676e:	f040 80cd 	bne.w	800690c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d132      	bne.n	80067e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	0151      	lsls	r1, r2, #5
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	440a      	add	r2, r1
 8006790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006794:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006798:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800679c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	0151      	lsls	r1, r2, #5
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	440a      	add	r2, r1
 80067b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d8:	0cdb      	lsrs	r3, r3, #19
 80067da:	04db      	lsls	r3, r3, #19
 80067dc:	6113      	str	r3, [r2, #16]
 80067de:	e04e      	b.n	800687e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fa:	0cdb      	lsrs	r3, r3, #19
 80067fc:	04db      	lsls	r3, r3, #19
 80067fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800681e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006822:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	695a      	ldr	r2, [r3, #20]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	429a      	cmp	r2, r3
 800682e:	d903      	bls.n	8006838 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800686e:	6939      	ldr	r1, [r7, #16]
 8006870:	0148      	lsls	r0, r1, #5
 8006872:	6979      	ldr	r1, [r7, #20]
 8006874:	4401      	add	r1, r0
 8006876:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800687a:	4313      	orrs	r3, r2
 800687c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d11e      	bne.n	80068c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006898:	461a      	mov	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	e092      	b.n	80069e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	0151      	lsls	r1, r2, #5
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	440a      	add	r2, r1
 80068d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d07e      	beq.n	80069e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	2101      	movs	r1, #1
 80068fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006900:	6979      	ldr	r1, [r7, #20]
 8006902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006906:	4313      	orrs	r3, r2
 8006908:	634b      	str	r3, [r1, #52]	; 0x34
 800690a:	e06d      	b.n	80069e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	440a      	add	r2, r1
 8006922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006926:	0cdb      	lsrs	r3, r3, #19
 8006928:	04db      	lsls	r3, r3, #19
 800692a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	440a      	add	r2, r1
 8006942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006946:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800694a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800694e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	440a      	add	r2, r1
 8006976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800697e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006996:	6939      	ldr	r1, [r7, #16]
 8006998:	0148      	lsls	r0, r1, #5
 800699a:	6979      	ldr	r1, [r7, #20]
 800699c:	4401      	add	r1, r0
 800699e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069a2:	4313      	orrs	r3, r2
 80069a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d10d      	bne.n	80069c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	68d9      	ldr	r1, [r3, #12]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c4:	460a      	mov	r2, r1
 80069c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b089      	sub	sp, #36	; 0x24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	4611      	mov	r1, r2
 8006a02:	461a      	mov	r2, r3
 8006a04:	460b      	mov	r3, r1
 8006a06:	71fb      	strb	r3, [r7, #7]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006a14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d11a      	bne.n	8006a52 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a1c:	88bb      	ldrh	r3, [r7, #4]
 8006a1e:	3303      	adds	r3, #3
 8006a20:	089b      	lsrs	r3, r3, #2
 8006a22:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	e00f      	b.n	8006a4a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	031a      	lsls	r2, r3, #12
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a36:	461a      	mov	r2, r3
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	3304      	adds	r3, #4
 8006a42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	3301      	adds	r3, #1
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d3eb      	bcc.n	8006a2a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3724      	adds	r7, #36	; 0x24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b089      	sub	sp, #36	; 0x24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	3303      	adds	r3, #3
 8006a7a:	089b      	lsrs	r3, r3, #2
 8006a7c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	e00b      	b.n	8006a9c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	3304      	adds	r3, #4
 8006a94:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	61bb      	str	r3, [r7, #24]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d3ef      	bcc.n	8006a84 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006aa4:	69fb      	ldr	r3, [r7, #28]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3724      	adds	r7, #36	; 0x24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	785b      	ldrb	r3, [r3, #1]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d12c      	bne.n	8006b28 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	db12      	blt.n	8006b06 <USB_EPSetStall+0x54>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00f      	beq.n	8006b06 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	0151      	lsls	r1, r2, #5
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	440a      	add	r2, r1
 8006afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b04:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	0151      	lsls	r1, r2, #5
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	440a      	add	r2, r1
 8006b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	e02b      	b.n	8006b80 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	db12      	blt.n	8006b60 <USB_EPSetStall+0xae>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b5e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d128      	bne.n	8006bfc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	78db      	ldrb	r3, [r3, #3]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d003      	beq.n	8006bda <USB_EPClearStall+0x4c>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	78db      	ldrb	r3, [r3, #3]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d138      	bne.n	8006c4c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e027      	b.n	8006c4c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	78db      	ldrb	r3, [r3, #3]
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d003      	beq.n	8006c2c <USB_EPClearStall+0x9e>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	78db      	ldrb	r3, [r3, #3]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d10f      	bne.n	8006c4c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c4a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	460b      	mov	r3, r1
 8006c64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c7c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	011b      	lsls	r3, r3, #4
 8006c8a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c8e:	68f9      	ldr	r1, [r7, #12]
 8006c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c94:	4313      	orrs	r3, r2
 8006c96:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cc0:	f023 0303 	bic.w	r3, r3, #3
 8006cc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cd4:	f023 0302 	bic.w	r3, r3, #2
 8006cd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d16:	f043 0302 	orr.w	r3, r3, #2
 8006d1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d42:	68fb      	ldr	r3, [r7, #12]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4013      	ands	r3, r2
 8006d72:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	0c1b      	lsrs	r3, r3, #16
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	4013      	ands	r3, r2
 8006da6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	b29b      	uxth	r3, r3
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006de6:	68bb      	ldr	r3, [r7, #8]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e16:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	01db      	lsls	r3, r3, #7
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e2e:	78fb      	ldrb	r3, [r7, #3]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e42:	68bb      	ldr	r3, [r7, #8]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ea2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
	...

08006eb4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	333c      	adds	r3, #60	; 0x3c
 8006eca:	3304      	adds	r3, #4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4a26      	ldr	r2, [pc, #152]	; (8006f6c <USB_EP0_OutStart+0xb8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d90a      	bls.n	8006eee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee8:	d101      	bne.n	8006eee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	e037      	b.n	8006f5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1c:	f043 0318 	orr.w	r3, r3, #24
 8006f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f36:	7afb      	ldrb	r3, [r7, #11]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d10f      	bne.n	8006f5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f56:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	4f54300a 	.word	0x4f54300a

08006f70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4a13      	ldr	r2, [pc, #76]	; (8006fd4 <USB_CoreReset+0x64>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d901      	bls.n	8006f8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e01b      	b.n	8006fc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	daf2      	bge.n	8006f7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f043 0201 	orr.w	r2, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <USB_CoreReset+0x64>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d901      	bls.n	8006fb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e006      	b.n	8006fc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d0f0      	beq.n	8006fa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	00030d40 	.word	0x00030d40

08006fd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fe4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006fe8:	f002 f93a 	bl	8009260 <malloc>
 8006fec:	4603      	mov	r3, r0
 8006fee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d105      	bne.n	8007002 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006ffe:	2302      	movs	r3, #2
 8007000:	e066      	b.n	80070d0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	7c1b      	ldrb	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d119      	bne.n	8007046 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007016:	2202      	movs	r2, #2
 8007018:	2181      	movs	r1, #129	; 0x81
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 ffa7 	bl	8008f6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800702a:	2202      	movs	r2, #2
 800702c:	2101      	movs	r1, #1
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 ff9d 	bl	8008f6e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2210      	movs	r2, #16
 8007040:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007044:	e016      	b.n	8007074 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007046:	2340      	movs	r3, #64	; 0x40
 8007048:	2202      	movs	r2, #2
 800704a:	2181      	movs	r1, #129	; 0x81
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 ff8e 	bl	8008f6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007058:	2340      	movs	r3, #64	; 0x40
 800705a:	2202      	movs	r2, #2
 800705c:	2101      	movs	r1, #1
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 ff85 	bl	8008f6e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2210      	movs	r2, #16
 8007070:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007074:	2308      	movs	r3, #8
 8007076:	2203      	movs	r2, #3
 8007078:	2182      	movs	r1, #130	; 0x82
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 ff77 	bl	8008f6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7c1b      	ldrb	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d109      	bne.n	80070be <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b4:	2101      	movs	r1, #1
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f002 f848 	bl	800914c <USBD_LL_PrepareReceive>
 80070bc:	e007      	b.n	80070ce <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070c4:	2340      	movs	r3, #64	; 0x40
 80070c6:	2101      	movs	r1, #1
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f002 f83f 	bl	800914c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80070e8:	2181      	movs	r1, #129	; 0x81
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 ff65 	bl	8008fba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80070f6:	2101      	movs	r1, #1
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 ff5e 	bl	8008fba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007106:	2182      	movs	r1, #130	; 0x82
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 ff56 	bl	8008fba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00e      	beq.n	8007146 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007138:	4618      	mov	r0, r3
 800713a:	f002 f899 	bl	8009270 <free>
    pdev->pClassData = NULL;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007160:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007176:	2b00      	cmp	r3, #0
 8007178:	d03a      	beq.n	80071f0 <USBD_CDC_Setup+0xa0>
 800717a:	2b20      	cmp	r3, #32
 800717c:	f040 8097 	bne.w	80072ae <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	88db      	ldrh	r3, [r3, #6]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d029      	beq.n	80071dc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	b25b      	sxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	da11      	bge.n	80071b6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800719e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	88d2      	ldrh	r2, [r2, #6]
 80071a4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80071a6:	6939      	ldr	r1, [r7, #16]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	88db      	ldrh	r3, [r3, #6]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 fa9d 	bl	80086ee <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80071b4:	e082      	b.n	80072bc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	785a      	ldrb	r2, [r3, #1]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	88db      	ldrh	r3, [r3, #6]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80071cc:	6939      	ldr	r1, [r7, #16]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	88db      	ldrh	r3, [r3, #6]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 fab6 	bl	8008746 <USBD_CtlPrepareRx>
    break;
 80071da:	e06f      	b.n	80072bc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	7850      	ldrb	r0, [r2, #1]
 80071e8:	2200      	movs	r2, #0
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	4798      	blx	r3
    break;
 80071ee:	e065      	b.n	80072bc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b0b      	cmp	r3, #11
 80071f6:	d84f      	bhi.n	8007298 <USBD_CDC_Setup+0x148>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <USBD_CDC_Setup+0xb0>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	08007231 	.word	0x08007231
 8007204:	080072a7 	.word	0x080072a7
 8007208:	08007299 	.word	0x08007299
 800720c:	08007299 	.word	0x08007299
 8007210:	08007299 	.word	0x08007299
 8007214:	08007299 	.word	0x08007299
 8007218:	08007299 	.word	0x08007299
 800721c:	08007299 	.word	0x08007299
 8007220:	08007299 	.word	0x08007299
 8007224:	08007299 	.word	0x08007299
 8007228:	08007259 	.word	0x08007259
 800722c:	08007281 	.word	0x08007281
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007236:	2b03      	cmp	r3, #3
 8007238:	d107      	bne.n	800724a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800723a:	f107 030c 	add.w	r3, r7, #12
 800723e:	2202      	movs	r2, #2
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 fa53 	bl	80086ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007248:	e030      	b.n	80072ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f9dd 	bl	800860c <USBD_CtlError>
        ret = USBD_FAIL;
 8007252:	2303      	movs	r3, #3
 8007254:	75fb      	strb	r3, [r7, #23]
      break;
 8007256:	e029      	b.n	80072ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725e:	2b03      	cmp	r3, #3
 8007260:	d107      	bne.n	8007272 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007262:	f107 030f 	add.w	r3, r7, #15
 8007266:	2201      	movs	r2, #1
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fa3f 	bl	80086ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007270:	e01c      	b.n	80072ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 f9c9 	bl	800860c <USBD_CtlError>
        ret = USBD_FAIL;
 800727a:	2303      	movs	r3, #3
 800727c:	75fb      	strb	r3, [r7, #23]
      break;
 800727e:	e015      	b.n	80072ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007286:	2b03      	cmp	r3, #3
 8007288:	d00f      	beq.n	80072aa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 f9bd 	bl	800860c <USBD_CtlError>
        ret = USBD_FAIL;
 8007292:	2303      	movs	r3, #3
 8007294:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007296:	e008      	b.n	80072aa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 f9b6 	bl	800860c <USBD_CtlError>
      ret = USBD_FAIL;
 80072a0:	2303      	movs	r3, #3
 80072a2:	75fb      	strb	r3, [r7, #23]
      break;
 80072a4:	e002      	b.n	80072ac <USBD_CDC_Setup+0x15c>
      break;
 80072a6:	bf00      	nop
 80072a8:	e008      	b.n	80072bc <USBD_CDC_Setup+0x16c>
      break;
 80072aa:	bf00      	nop
    }
    break;
 80072ac:	e006      	b.n	80072bc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f9ab 	bl	800860c <USBD_CtlError>
    ret = USBD_FAIL;
 80072b6:	2303      	movs	r3, #3
 80072b8:	75fb      	strb	r3, [r7, #23]
    break;
 80072ba:	bf00      	nop
  }

  return (uint8_t)ret;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop

080072c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e049      	b.n	800737e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80072f2:	78fa      	ldrb	r2, [r7, #3]
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	3318      	adds	r3, #24
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d029      	beq.n	800735c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	3318      	adds	r3, #24
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	78f9      	ldrb	r1, [r7, #3]
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	460b      	mov	r3, r1
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	1a5b      	subs	r3, r3, r1
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4403      	add	r3, r0
 8007328:	3344      	adds	r3, #68	; 0x44
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007330:	fb03 f301 	mul.w	r3, r3, r1
 8007334:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007336:	2b00      	cmp	r3, #0
 8007338:	d110      	bne.n	800735c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800733a:	78fa      	ldrb	r2, [r7, #3]
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	3318      	adds	r3, #24
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800734e:	78f9      	ldrb	r1, [r7, #3]
 8007350:	2300      	movs	r3, #0
 8007352:	2200      	movs	r2, #0
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 fed8 	bl	800910a <USBD_LL_Transmit>
 800735a:	e00f      	b.n	800737c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2200      	movs	r2, #0
 8007360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007378:	78fa      	ldrb	r2, [r7, #3]
 800737a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007398:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e015      	b.n	80073d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 feee 	bl	800918e <USBD_LL_GetRxDataSize>
 80073b2:	4602      	mov	r2, r0
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073ce:	4611      	mov	r1, r2
 80073d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d015      	beq.n	8007422 <USBD_CDC_EP0_RxReady+0x46>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073fc:	2bff      	cmp	r3, #255	; 0xff
 80073fe:	d010      	beq.n	8007422 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800740e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007416:	b292      	uxth	r2, r2
 8007418:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	22ff      	movs	r2, #255	; 0xff
 800741e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2243      	movs	r2, #67	; 0x43
 8007438:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800743a:	4b03      	ldr	r3, [pc, #12]	; (8007448 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	200000a8 	.word	0x200000a8

0800744c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2243      	movs	r2, #67	; 0x43
 8007458:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800745a:	4b03      	ldr	r3, [pc, #12]	; (8007468 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	20000064 	.word	0x20000064

0800746c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2243      	movs	r2, #67	; 0x43
 8007478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800747a:	4b03      	ldr	r3, [pc, #12]	; (8007488 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	200000ec 	.word	0x200000ec

0800748c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	220a      	movs	r2, #10
 8007498:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800749a:	4b03      	ldr	r3, [pc, #12]	; (80074a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	20000020 	.word	0x20000020

080074ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074bc:	2303      	movs	r3, #3
 80074be:	e004      	b.n	80074ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b087      	sub	sp, #28
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	371c      	adds	r7, #28
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007518:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800753e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007540:	2301      	movs	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800754e:	2303      	movs	r3, #3
 8007550:	e01a      	b.n	8007588 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007558:	2b00      	cmp	r3, #0
 800755a:	d114      	bne.n	8007586 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2201      	movs	r2, #1
 8007560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800757a:	2181      	movs	r1, #129	; 0x81
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 fdc4 	bl	800910a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800759e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e016      	b.n	80075dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	7c1b      	ldrb	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c0:	2101      	movs	r1, #1
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fdc2 	bl	800914c <USBD_LL_PrepareReceive>
 80075c8:	e007      	b.n	80075da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075d0:	2340      	movs	r3, #64	; 0x40
 80075d2:	2101      	movs	r1, #1
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 fdb9 	bl	800914c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	4613      	mov	r3, r2
 80075f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e025      	b.n	8007648 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	79fa      	ldrb	r2, [r7, #7]
 800763a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f001 fc2f 	bl	8008ea0 <USBD_LL_Init>
 8007642:	4603      	mov	r3, r0
 8007644:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007646:	7dfb      	ldrb	r3, [r7, #23]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007664:	2303      	movs	r3, #3
 8007666:	e010      	b.n	800768a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f107 020e 	add.w	r2, r7, #14
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
 8007680:	4602      	mov	r2, r0
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 fc4c 	bl	8008f38 <USBD_LL_Start>
 80076a0:	4603      	mov	r3, r0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	78fa      	ldrb	r2, [r7, #3]
 80076e4:	4611      	mov	r1, r2
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d007      	beq.n	800771e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	78fa      	ldrb	r2, [r7, #3]
 8007718:	4611      	mov	r1, r2
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	4798      	blx	r3
  }

  return USBD_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 ff2c 	bl	8008598 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800774e:	461a      	mov	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800775c:	f003 031f 	and.w	r3, r3, #31
 8007760:	2b01      	cmp	r3, #1
 8007762:	d00e      	beq.n	8007782 <USBD_LL_SetupStage+0x5a>
 8007764:	2b01      	cmp	r3, #1
 8007766:	d302      	bcc.n	800776e <USBD_LL_SetupStage+0x46>
 8007768:	2b02      	cmp	r3, #2
 800776a:	d014      	beq.n	8007796 <USBD_LL_SetupStage+0x6e>
 800776c:	e01d      	b.n	80077aa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa18 	bl	8007bac <USBD_StdDevReq>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
      break;
 8007780:	e020      	b.n	80077c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa7c 	bl	8007c88 <USBD_StdItfReq>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
      break;
 8007794:	e016      	b.n	80077c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fab8 	bl	8007d14 <USBD_StdEPReq>
 80077a4:	4603      	mov	r3, r0
 80077a6:	73fb      	strb	r3, [r7, #15]
      break;
 80077a8:	e00c      	b.n	80077c4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 fc1d 	bl	8008ff8 <USBD_LL_StallEP>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
      break;
 80077c2:	bf00      	nop
  }

  return ret;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b086      	sub	sp, #24
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	460b      	mov	r3, r1
 80077d8:	607a      	str	r2, [r7, #4]
 80077da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80077dc:	7afb      	ldrb	r3, [r7, #11]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d137      	bne.n	8007852 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d14a      	bne.n	800788a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d913      	bls.n	8007828 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	1ad2      	subs	r2, r2, r3
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	4293      	cmp	r3, r2
 8007818:	bf28      	it	cs
 800781a:	4613      	movcs	r3, r2
 800781c:	461a      	mov	r2, r3
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 ffad 	bl	8008780 <USBD_CtlContinueRx>
 8007826:	e030      	b.n	800788a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00a      	beq.n	800784a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800783a:	2b03      	cmp	r3, #3
 800783c:	d105      	bne.n	800784a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 ffa9 	bl	80087a2 <USBD_CtlSendStatus>
 8007850:	e01b      	b.n	800788a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d013      	beq.n	8007886 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007864:	2b03      	cmp	r3, #3
 8007866:	d10e      	bne.n	8007886 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	7afa      	ldrb	r2, [r7, #11]
 8007872:	4611      	mov	r1, r2
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	4798      	blx	r3
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	e002      	b.n	800788c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007886:	2303      	movs	r3, #3
 8007888:	e000      	b.n	800788c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	460b      	mov	r3, r1
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80078a2:	7afb      	ldrb	r3, [r7, #11]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d16a      	bne.n	800797e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3314      	adds	r3, #20
 80078ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d155      	bne.n	8007964 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d914      	bls.n	80078ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	1ad2      	subs	r2, r2, r3
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	461a      	mov	r2, r3
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 ff22 	bl	8008724 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e0:	2300      	movs	r3, #0
 80078e2:	2200      	movs	r2, #0
 80078e4:	2100      	movs	r1, #0
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f001 fc30 	bl	800914c <USBD_LL_PrepareReceive>
 80078ec:	e03a      	b.n	8007964 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d11c      	bne.n	8007934 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007902:	429a      	cmp	r2, r3
 8007904:	d316      	bcc.n	8007934 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007910:	429a      	cmp	r2, r3
 8007912:	d20f      	bcs.n	8007934 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007914:	2200      	movs	r2, #0
 8007916:	2100      	movs	r1, #0
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 ff03 	bl	8008724 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007926:	2300      	movs	r3, #0
 8007928:	2200      	movs	r2, #0
 800792a:	2100      	movs	r1, #0
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f001 fc0d 	bl	800914c <USBD_LL_PrepareReceive>
 8007932:	e017      	b.n	8007964 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007946:	2b03      	cmp	r3, #3
 8007948:	d105      	bne.n	8007956 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007956:	2180      	movs	r1, #128	; 0x80
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f001 fb4d 	bl	8008ff8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 ff32 	bl	80087c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800796a:	2b01      	cmp	r3, #1
 800796c:	d123      	bne.n	80079b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff fe9b 	bl	80076aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800797c:	e01b      	b.n	80079b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d013      	beq.n	80079b2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007990:	2b03      	cmp	r3, #3
 8007992:	d10e      	bne.n	80079b2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	7afa      	ldrb	r2, [r7, #11]
 800799e:	4611      	mov	r1, r2
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	4798      	blx	r3
 80079a4:	4603      	mov	r3, r0
 80079a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	e002      	b.n	80079b8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e000      	b.n	80079b8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6852      	ldr	r2, [r2, #4]
 80079fc:	b2d2      	uxtb	r2, r2
 80079fe:	4611      	mov	r1, r2
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a04:	2340      	movs	r3, #64	; 0x40
 8007a06:	2200      	movs	r2, #0
 8007a08:	2100      	movs	r1, #0
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 faaf 	bl	8008f6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2240      	movs	r2, #64	; 0x40
 8007a1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	2200      	movs	r2, #0
 8007a24:	2180      	movs	r1, #128	; 0x80
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 faa1 	bl	8008f6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2240      	movs	r2, #64	; 0x40
 8007a36:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2204      	movs	r2, #4
 8007a7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d105      	bne.n	8007aaa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d10b      	bne.n	8007ae2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d009      	beq.n	8007b64 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6852      	ldr	r2, [r2, #4]
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	4611      	mov	r1, r2
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
  }

  return USBD_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b087      	sub	sp, #28
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	3301      	adds	r3, #1
 8007b84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b8c:	8a3b      	ldrh	r3, [r7, #16]
 8007b8e:	021b      	lsls	r3, r3, #8
 8007b90:	b21a      	sxth	r2, r3
 8007b92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	b21b      	sxth	r3, r3
 8007b9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007b9c:	89fb      	ldrh	r3, [r7, #14]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
	...

08007bac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	d004      	beq.n	8007bd0 <USBD_StdDevReq+0x24>
 8007bc6:	2b40      	cmp	r3, #64	; 0x40
 8007bc8:	d002      	beq.n	8007bd0 <USBD_StdDevReq+0x24>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <USBD_StdDevReq+0x38>
 8007bce:	e050      	b.n	8007c72 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3
 8007bde:	4603      	mov	r3, r0
 8007be0:	73fb      	strb	r3, [r7, #15]
    break;
 8007be2:	e04b      	b.n	8007c7c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	2b09      	cmp	r3, #9
 8007bea:	d83c      	bhi.n	8007c66 <USBD_StdDevReq+0xba>
 8007bec:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <USBD_StdDevReq+0x48>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c49 	.word	0x08007c49
 8007bf8:	08007c5d 	.word	0x08007c5d
 8007bfc:	08007c67 	.word	0x08007c67
 8007c00:	08007c53 	.word	0x08007c53
 8007c04:	08007c67 	.word	0x08007c67
 8007c08:	08007c27 	.word	0x08007c27
 8007c0c:	08007c1d 	.word	0x08007c1d
 8007c10:	08007c67 	.word	0x08007c67
 8007c14:	08007c3f 	.word	0x08007c3f
 8007c18:	08007c31 	.word	0x08007c31
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f9ce 	bl	8007fc0 <USBD_GetDescriptor>
      break;
 8007c24:	e024      	b.n	8007c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fb33 	bl	8008294 <USBD_SetAddress>
      break;
 8007c2e:	e01f      	b.n	8007c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fb70 	bl	8008318 <USBD_SetConfig>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c3c:	e018      	b.n	8007c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fc0d 	bl	8008460 <USBD_GetConfig>
      break;
 8007c46:	e013      	b.n	8007c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fc3c 	bl	80084c8 <USBD_GetStatus>
      break;
 8007c50:	e00e      	b.n	8007c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fc6a 	bl	800852e <USBD_SetFeature>
      break;
 8007c5a:	e009      	b.n	8007c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fc79 	bl	8008556 <USBD_ClrFeature>
      break;
 8007c64:	e004      	b.n	8007c70 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fccf 	bl	800860c <USBD_CtlError>
      break;
 8007c6e:	bf00      	nop
    }
    break;
 8007c70:	e004      	b.n	8007c7c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fcc9 	bl	800860c <USBD_CtlError>
    break;
 8007c7a:	bf00      	nop
  }

  return ret;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop

08007c88 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d003      	beq.n	8007caa <USBD_StdItfReq+0x22>
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	d001      	beq.n	8007caa <USBD_StdItfReq+0x22>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d12a      	bne.n	8007d00 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d81d      	bhi.n	8007cf2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	889b      	ldrh	r3, [r3, #4]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d813      	bhi.n	8007ce8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	4798      	blx	r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	88db      	ldrh	r3, [r3, #6]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d110      	bne.n	8007cfc <USBD_StdItfReq+0x74>
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10d      	bne.n	8007cfc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fd5e 	bl	80087a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007ce6:	e009      	b.n	8007cfc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fc8e 	bl	800860c <USBD_CtlError>
      break;
 8007cf0:	e004      	b.n	8007cfc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fc89 	bl	800860c <USBD_CtlError>
      break;
 8007cfa:	e000      	b.n	8007cfe <USBD_StdItfReq+0x76>
      break;
 8007cfc:	bf00      	nop
    }
    break;
 8007cfe:	e004      	b.n	8007d0a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fc82 	bl	800860c <USBD_CtlError>
    break;
 8007d08:	bf00      	nop
  }

  return ret;
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	889b      	ldrh	r3, [r3, #4]
 8007d26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d004      	beq.n	8007d3e <USBD_StdEPReq+0x2a>
 8007d34:	2b40      	cmp	r3, #64	; 0x40
 8007d36:	d002      	beq.n	8007d3e <USBD_StdEPReq+0x2a>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <USBD_StdEPReq+0x3e>
 8007d3c:	e135      	b.n	8007faa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	4798      	blx	r3
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d50:	e130      	b.n	8007fb4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	785b      	ldrb	r3, [r3, #1]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d03e      	beq.n	8007dd8 <USBD_StdEPReq+0xc4>
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d002      	beq.n	8007d64 <USBD_StdEPReq+0x50>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d077      	beq.n	8007e52 <USBD_StdEPReq+0x13e>
 8007d62:	e11c      	b.n	8007f9e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d002      	beq.n	8007d74 <USBD_StdEPReq+0x60>
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d015      	beq.n	8007d9e <USBD_StdEPReq+0x8a>
 8007d72:	e02b      	b.n	8007dcc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00c      	beq.n	8007d94 <USBD_StdEPReq+0x80>
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	2b80      	cmp	r3, #128	; 0x80
 8007d7e:	d009      	beq.n	8007d94 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f937 	bl	8008ff8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d8a:	2180      	movs	r1, #128	; 0x80
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f933 	bl	8008ff8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007d92:	e020      	b.n	8007dd6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fc38 	bl	800860c <USBD_CtlError>
        break;
 8007d9c:	e01b      	b.n	8007dd6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	885b      	ldrh	r3, [r3, #2]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10e      	bne.n	8007dc4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <USBD_StdEPReq+0xb0>
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
 8007dae:	2b80      	cmp	r3, #128	; 0x80
 8007db0:	d008      	beq.n	8007dc4 <USBD_StdEPReq+0xb0>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	88db      	ldrh	r3, [r3, #6]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 f91a 	bl	8008ff8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fcec 	bl	80087a2 <USBD_CtlSendStatus>

        break;
 8007dca:	e004      	b.n	8007dd6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fc1c 	bl	800860c <USBD_CtlError>
        break;
 8007dd4:	bf00      	nop
      }
      break;
 8007dd6:	e0e7      	b.n	8007fa8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d002      	beq.n	8007de8 <USBD_StdEPReq+0xd4>
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d015      	beq.n	8007e12 <USBD_StdEPReq+0xfe>
 8007de6:	e02d      	b.n	8007e44 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00c      	beq.n	8007e08 <USBD_StdEPReq+0xf4>
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	d009      	beq.n	8007e08 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 f8fd 	bl	8008ff8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dfe:	2180      	movs	r1, #128	; 0x80
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 f8f9 	bl	8008ff8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007e06:	e023      	b.n	8007e50 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fbfe 	bl	800860c <USBD_CtlError>
        break;
 8007e10:	e01e      	b.n	8007e50 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	885b      	ldrh	r3, [r3, #2]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d119      	bne.n	8007e4e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f904 	bl	8009036 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fcb7 	bl	80087a2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
        }
        break;
 8007e42:	e004      	b.n	8007e4e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fbe0 	bl	800860c <USBD_CtlError>
        break;
 8007e4c:	e000      	b.n	8007e50 <USBD_StdEPReq+0x13c>
        break;
 8007e4e:	bf00      	nop
      }
      break;
 8007e50:	e0aa      	b.n	8007fa8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d002      	beq.n	8007e62 <USBD_StdEPReq+0x14e>
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d032      	beq.n	8007ec6 <USBD_StdEPReq+0x1b2>
 8007e60:	e097      	b.n	8007f92 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d007      	beq.n	8007e78 <USBD_StdEPReq+0x164>
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	2b80      	cmp	r3, #128	; 0x80
 8007e6c:	d004      	beq.n	8007e78 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fbcb 	bl	800860c <USBD_CtlError>
          break;
 8007e76:	e091      	b.n	8007f9c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	da0b      	bge.n	8007e98 <USBD_StdEPReq+0x184>
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	3310      	adds	r3, #16
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	4413      	add	r3, r2
 8007e94:	3304      	adds	r3, #4
 8007e96:	e00b      	b.n	8007eb0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	4413      	add	r3, r2
 8007eae:	3304      	adds	r3, #4
 8007eb0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fc15 	bl	80086ee <USBD_CtlSendData>
        break;
 8007ec4:	e06a      	b.n	8007f9c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007ec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	da11      	bge.n	8007ef2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	f003 020f 	and.w	r2, r3, #15
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	3324      	adds	r3, #36	; 0x24
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d117      	bne.n	8007f18 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fb8e 	bl	800860c <USBD_CtlError>
            break;
 8007ef0:	e054      	b.n	8007f9c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	f003 020f 	and.w	r2, r3, #15
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fb7b 	bl	800860c <USBD_CtlError>
            break;
 8007f16:	e041      	b.n	8007f9c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	da0b      	bge.n	8007f38 <USBD_StdEPReq+0x224>
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	3310      	adds	r3, #16
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	4413      	add	r3, r2
 8007f34:	3304      	adds	r3, #4
 8007f36:	e00b      	b.n	8007f50 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f3e:	4613      	mov	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3304      	adds	r3, #4
 8007f50:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <USBD_StdEPReq+0x24a>
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	2b80      	cmp	r3, #128	; 0x80
 8007f5c:	d103      	bne.n	8007f66 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	e00e      	b.n	8007f84 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f001 f882 	bl	8009074 <USBD_LL_IsStallEP>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	e002      	b.n	8007f84 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2202      	movs	r2, #2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fbaf 	bl	80086ee <USBD_CtlSendData>
          break;
 8007f90:	e004      	b.n	8007f9c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fb39 	bl	800860c <USBD_CtlError>
        break;
 8007f9a:	bf00      	nop
      }
      break;
 8007f9c:	e004      	b.n	8007fa8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fb33 	bl	800860c <USBD_CtlError>
      break;
 8007fa6:	bf00      	nop
    }
    break;
 8007fa8:	e004      	b.n	8007fb4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fb2d 	bl	800860c <USBD_CtlError>
    break;
 8007fb2:	bf00      	nop
  }

  return ret;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	2b06      	cmp	r3, #6
 8007fe2:	f200 8128 	bhi.w	8008236 <USBD_GetDescriptor+0x276>
 8007fe6:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <USBD_GetDescriptor+0x2c>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	08008021 	.word	0x08008021
 8007ff4:	08008061 	.word	0x08008061
 8007ff8:	08008237 	.word	0x08008237
 8007ffc:	08008237 	.word	0x08008237
 8008000:	080081d7 	.word	0x080081d7
 8008004:	08008203 	.word	0x08008203
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	7c12      	ldrb	r2, [r2, #16]
 8008014:	f107 0108 	add.w	r1, r7, #8
 8008018:	4610      	mov	r0, r2
 800801a:	4798      	blx	r3
 800801c:	60f8      	str	r0, [r7, #12]
    break;
 800801e:	e112      	b.n	8008246 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	7c1b      	ldrb	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10d      	bne.n	8008044 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008030:	f107 0208 	add.w	r2, r7, #8
 8008034:	4610      	mov	r0, r2
 8008036:	4798      	blx	r3
 8008038:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	2202      	movs	r2, #2
 8008040:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008042:	e100      	b.n	8008246 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	f107 0208 	add.w	r2, r7, #8
 8008050:	4610      	mov	r0, r2
 8008052:	4798      	blx	r3
 8008054:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	2202      	movs	r2, #2
 800805c:	701a      	strb	r2, [r3, #0]
    break;
 800805e:	e0f2      	b.n	8008246 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b05      	cmp	r3, #5
 8008068:	f200 80ac 	bhi.w	80081c4 <USBD_GetDescriptor+0x204>
 800806c:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <USBD_GetDescriptor+0xb4>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	0800808d 	.word	0x0800808d
 8008078:	080080c1 	.word	0x080080c1
 800807c:	080080f5 	.word	0x080080f5
 8008080:	08008129 	.word	0x08008129
 8008084:	0800815d 	.word	0x0800815d
 8008088:	08008191 	.word	0x08008191
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7c12      	ldrb	r2, [r2, #16]
 80080a4:	f107 0108 	add.w	r1, r7, #8
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080ae:	e091      	b.n	80081d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 faaa 	bl	800860c <USBD_CtlError>
        err++;
 80080b8:	7afb      	ldrb	r3, [r7, #11]
 80080ba:	3301      	adds	r3, #1
 80080bc:	72fb      	strb	r3, [r7, #11]
      break;
 80080be:	e089      	b.n	80081d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	7c12      	ldrb	r2, [r2, #16]
 80080d8:	f107 0108 	add.w	r1, r7, #8
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080e2:	e077      	b.n	80081d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa90 	bl	800860c <USBD_CtlError>
        err++;
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	3301      	adds	r3, #1
 80080f0:	72fb      	strb	r3, [r7, #11]
      break;
 80080f2:	e06f      	b.n	80081d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	7c12      	ldrb	r2, [r2, #16]
 800810c:	f107 0108 	add.w	r1, r7, #8
 8008110:	4610      	mov	r0, r2
 8008112:	4798      	blx	r3
 8008114:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008116:	e05d      	b.n	80081d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fa76 	bl	800860c <USBD_CtlError>
        err++;
 8008120:	7afb      	ldrb	r3, [r7, #11]
 8008122:	3301      	adds	r3, #1
 8008124:	72fb      	strb	r3, [r7, #11]
      break;
 8008126:	e055      	b.n	80081d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7c12      	ldrb	r2, [r2, #16]
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800814a:	e043      	b.n	80081d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa5c 	bl	800860c <USBD_CtlError>
        err++;
 8008154:	7afb      	ldrb	r3, [r7, #11]
 8008156:	3301      	adds	r3, #1
 8008158:	72fb      	strb	r3, [r7, #11]
      break;
 800815a:	e03b      	b.n	80081d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00b      	beq.n	8008180 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	7c12      	ldrb	r2, [r2, #16]
 8008174:	f107 0108 	add.w	r1, r7, #8
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
 800817c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800817e:	e029      	b.n	80081d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa42 	bl	800860c <USBD_CtlError>
        err++;
 8008188:	7afb      	ldrb	r3, [r7, #11]
 800818a:	3301      	adds	r3, #1
 800818c:	72fb      	strb	r3, [r7, #11]
      break;
 800818e:	e021      	b.n	80081d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	7c12      	ldrb	r2, [r2, #16]
 80081a8:	f107 0108 	add.w	r1, r7, #8
 80081ac:	4610      	mov	r0, r2
 80081ae:	4798      	blx	r3
 80081b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081b2:	e00f      	b.n	80081d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa28 	bl	800860c <USBD_CtlError>
        err++;
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	3301      	adds	r3, #1
 80081c0:	72fb      	strb	r3, [r7, #11]
      break;
 80081c2:	e007      	b.n	80081d4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa20 	bl	800860c <USBD_CtlError>
      err++;
 80081cc:	7afb      	ldrb	r3, [r7, #11]
 80081ce:	3301      	adds	r3, #1
 80081d0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80081d2:	bf00      	nop
    }
    break;
 80081d4:	e037      	b.n	8008246 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	7c1b      	ldrb	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e6:	f107 0208 	add.w	r2, r7, #8
 80081ea:	4610      	mov	r0, r2
 80081ec:	4798      	blx	r3
 80081ee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80081f0:	e029      	b.n	8008246 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fa09 	bl	800860c <USBD_CtlError>
      err++;
 80081fa:	7afb      	ldrb	r3, [r7, #11]
 80081fc:	3301      	adds	r3, #1
 80081fe:	72fb      	strb	r3, [r7, #11]
    break;
 8008200:	e021      	b.n	8008246 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	7c1b      	ldrb	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10d      	bne.n	8008226 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	f107 0208 	add.w	r2, r7, #8
 8008216:	4610      	mov	r0, r2
 8008218:	4798      	blx	r3
 800821a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3301      	adds	r3, #1
 8008220:	2207      	movs	r2, #7
 8008222:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008224:	e00f      	b.n	8008246 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f9ef 	bl	800860c <USBD_CtlError>
      err++;
 800822e:	7afb      	ldrb	r3, [r7, #11]
 8008230:	3301      	adds	r3, #1
 8008232:	72fb      	strb	r3, [r7, #11]
    break;
 8008234:	e007      	b.n	8008246 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f9e7 	bl	800860c <USBD_CtlError>
    err++;
 800823e:	7afb      	ldrb	r3, [r7, #11]
 8008240:	3301      	adds	r3, #1
 8008242:	72fb      	strb	r3, [r7, #11]
    break;
 8008244:	bf00      	nop
  }

  if (err != 0U)
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d11e      	bne.n	800828a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	88db      	ldrh	r3, [r3, #6]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d016      	beq.n	8008282 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008254:	893b      	ldrh	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00e      	beq.n	8008278 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	88da      	ldrh	r2, [r3, #6]
 800825e:	893b      	ldrh	r3, [r7, #8]
 8008260:	4293      	cmp	r3, r2
 8008262:	bf28      	it	cs
 8008264:	4613      	movcs	r3, r2
 8008266:	b29b      	uxth	r3, r3
 8008268:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800826a:	893b      	ldrh	r3, [r7, #8]
 800826c:	461a      	mov	r2, r3
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa3c 	bl	80086ee <USBD_CtlSendData>
 8008276:	e009      	b.n	800828c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f9c6 	bl	800860c <USBD_CtlError>
 8008280:	e004      	b.n	800828c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fa8d 	bl	80087a2 <USBD_CtlSendStatus>
 8008288:	e000      	b.n	800828c <USBD_GetDescriptor+0x2cc>
    return;
 800828a:	bf00      	nop
    }
  }
}
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop

08008294 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d130      	bne.n	8008308 <USBD_SetAddress+0x74>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	88db      	ldrh	r3, [r3, #6]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d12c      	bne.n	8008308 <USBD_SetAddress+0x74>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	885b      	ldrh	r3, [r3, #2]
 80082b2:	2b7f      	cmp	r3, #127	; 0x7f
 80082b4:	d828      	bhi.n	8008308 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	885b      	ldrh	r3, [r3, #2]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d104      	bne.n	80082d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f99c 	bl	800860c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d4:	e01c      	b.n	8008310 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7bfa      	ldrb	r2, [r7, #15]
 80082da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fef2 	bl	80090cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fa5a 	bl	80087a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d004      	beq.n	80082fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fc:	e008      	b.n	8008310 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008306:	e003      	b.n	8008310 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f97e 	bl	800860c <USBD_CtlError>
  }
}
 8008310:	bf00      	nop
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	885b      	ldrh	r3, [r3, #2]
 800832a:	b2da      	uxtb	r2, r3
 800832c:	4b4b      	ldr	r3, [pc, #300]	; (800845c <USBD_SetConfig+0x144>)
 800832e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008330:	4b4a      	ldr	r3, [pc, #296]	; (800845c <USBD_SetConfig+0x144>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d905      	bls.n	8008344 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f966 	bl	800860c <USBD_CtlError>
    return USBD_FAIL;
 8008340:	2303      	movs	r3, #3
 8008342:	e087      	b.n	8008454 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800834a:	2b02      	cmp	r3, #2
 800834c:	d002      	beq.n	8008354 <USBD_SetConfig+0x3c>
 800834e:	2b03      	cmp	r3, #3
 8008350:	d025      	beq.n	800839e <USBD_SetConfig+0x86>
 8008352:	e071      	b.n	8008438 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008354:	4b41      	ldr	r3, [pc, #260]	; (800845c <USBD_SetConfig+0x144>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01c      	beq.n	8008396 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800835c:	4b3f      	ldr	r3, [pc, #252]	; (800845c <USBD_SetConfig+0x144>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	461a      	mov	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008366:	4b3d      	ldr	r3, [pc, #244]	; (800845c <USBD_SetConfig+0x144>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff f9a7 	bl	80076c0 <USBD_SetClassConfig>
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d004      	beq.n	8008386 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f944 	bl	800860c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008384:	e065      	b.n	8008452 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fa0b 	bl	80087a2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2203      	movs	r2, #3
 8008390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008394:	e05d      	b.n	8008452 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa03 	bl	80087a2 <USBD_CtlSendStatus>
    break;
 800839c:	e059      	b.n	8008452 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800839e:	4b2f      	ldr	r3, [pc, #188]	; (800845c <USBD_SetConfig+0x144>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d112      	bne.n	80083cc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2202      	movs	r2, #2
 80083aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80083ae:	4b2b      	ldr	r3, [pc, #172]	; (800845c <USBD_SetConfig+0x144>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083b8:	4b28      	ldr	r3, [pc, #160]	; (800845c <USBD_SetConfig+0x144>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff f99a 	bl	80076f8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f9ec 	bl	80087a2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80083ca:	e042      	b.n	8008452 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80083cc:	4b23      	ldr	r3, [pc, #140]	; (800845c <USBD_SetConfig+0x144>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d02a      	beq.n	8008430 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff f988 	bl	80076f8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80083e8:	4b1c      	ldr	r3, [pc, #112]	; (800845c <USBD_SetConfig+0x144>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80083f2:	4b1a      	ldr	r3, [pc, #104]	; (800845c <USBD_SetConfig+0x144>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff f961 	bl	80076c0 <USBD_SetClassConfig>
 80083fe:	4603      	mov	r3, r0
 8008400:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00f      	beq.n	8008428 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f8fe 	bl	800860c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	b2db      	uxtb	r3, r3
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff f96d 	bl	80076f8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2202      	movs	r2, #2
 8008422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008426:	e014      	b.n	8008452 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f9ba 	bl	80087a2 <USBD_CtlSendStatus>
    break;
 800842e:	e010      	b.n	8008452 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f9b6 	bl	80087a2 <USBD_CtlSendStatus>
    break;
 8008436:	e00c      	b.n	8008452 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f8e6 	bl	800860c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008440:	4b06      	ldr	r3, [pc, #24]	; (800845c <USBD_SetConfig+0x144>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff f956 	bl	80076f8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800844c:	2303      	movs	r3, #3
 800844e:	73fb      	strb	r3, [r7, #15]
    break;
 8008450:	bf00      	nop
  }

  return ret;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000390 	.word	0x20000390

08008460 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88db      	ldrh	r3, [r3, #6]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d004      	beq.n	800847c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f8c9 	bl	800860c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800847a:	e021      	b.n	80084c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008482:	2b01      	cmp	r3, #1
 8008484:	db17      	blt.n	80084b6 <USBD_GetConfig+0x56>
 8008486:	2b02      	cmp	r3, #2
 8008488:	dd02      	ble.n	8008490 <USBD_GetConfig+0x30>
 800848a:	2b03      	cmp	r3, #3
 800848c:	d00b      	beq.n	80084a6 <USBD_GetConfig+0x46>
 800848e:	e012      	b.n	80084b6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3308      	adds	r3, #8
 800849a:	2201      	movs	r2, #1
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f925 	bl	80086ee <USBD_CtlSendData>
      break;
 80084a4:	e00c      	b.n	80084c0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	3304      	adds	r3, #4
 80084aa:	2201      	movs	r2, #1
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f91d 	bl	80086ee <USBD_CtlSendData>
      break;
 80084b4:	e004      	b.n	80084c0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f8a7 	bl	800860c <USBD_CtlError>
      break;
 80084be:	bf00      	nop
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d8:	3b01      	subs	r3, #1
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d81e      	bhi.n	800851c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	88db      	ldrh	r3, [r3, #6]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d004      	beq.n	80084f0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f88f 	bl	800860c <USBD_CtlError>
      break;
 80084ee:	e01a      	b.n	8008526 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d005      	beq.n	800850c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f043 0202 	orr.w	r2, r3, #2
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	330c      	adds	r3, #12
 8008510:	2202      	movs	r2, #2
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f8ea 	bl	80086ee <USBD_CtlSendData>
    break;
 800851a:	e004      	b.n	8008526 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f874 	bl	800860c <USBD_CtlError>
    break;
 8008524:	bf00      	nop
  }
}
 8008526:	bf00      	nop
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	885b      	ldrh	r3, [r3, #2]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d106      	bne.n	800854e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f92a 	bl	80087a2 <USBD_CtlSendStatus>
  }
}
 800854e:	bf00      	nop
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008566:	3b01      	subs	r3, #1
 8008568:	2b02      	cmp	r3, #2
 800856a:	d80b      	bhi.n	8008584 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	885b      	ldrh	r3, [r3, #2]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d10c      	bne.n	800858e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f910 	bl	80087a2 <USBD_CtlSendStatus>
      }
      break;
 8008582:	e004      	b.n	800858e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f840 	bl	800860c <USBD_CtlError>
      break;
 800858c:	e000      	b.n	8008590 <USBD_ClrFeature+0x3a>
      break;
 800858e:	bf00      	nop
  }
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3301      	adds	r3, #1
 80085c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7ff fad3 	bl	8007b6e <SWAPBYTE>
 80085c8:	4603      	mov	r3, r0
 80085ca:	461a      	mov	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3301      	adds	r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3301      	adds	r3, #1
 80085da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f7ff fac6 	bl	8007b6e <SWAPBYTE>
 80085e2:	4603      	mov	r3, r0
 80085e4:	461a      	mov	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	3301      	adds	r3, #1
 80085ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7ff fab9 	bl	8007b6e <SWAPBYTE>
 80085fc:	4603      	mov	r3, r0
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	80da      	strh	r2, [r3, #6]
}
 8008604:	bf00      	nop
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008616:	2180      	movs	r1, #128	; 0x80
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fced 	bl	8008ff8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800861e:	2100      	movs	r1, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fce9 	bl	8008ff8 <USBD_LL_StallEP>
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b086      	sub	sp, #24
 8008632:	af00      	add	r7, sp, #0
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d036      	beq.n	80086b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008648:	6938      	ldr	r0, [r7, #16]
 800864a:	f000 f836 	bl	80086ba <USBD_GetLen>
 800864e:	4603      	mov	r3, r0
 8008650:	3301      	adds	r3, #1
 8008652:	b29b      	uxth	r3, r3
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	b29a      	uxth	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	4413      	add	r3, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	7812      	ldrb	r2, [r2, #0]
 8008666:	701a      	strb	r2, [r3, #0]
  idx++;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	3301      	adds	r3, #1
 800866c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	4413      	add	r3, r2
 8008674:	2203      	movs	r2, #3
 8008676:	701a      	strb	r2, [r3, #0]
  idx++;
 8008678:	7dfb      	ldrb	r3, [r7, #23]
 800867a:	3301      	adds	r3, #1
 800867c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800867e:	e013      	b.n	80086a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	4413      	add	r3, r2
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	7812      	ldrb	r2, [r2, #0]
 800868a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	3301      	adds	r3, #1
 8008690:	613b      	str	r3, [r7, #16]
    idx++;
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	3301      	adds	r3, #1
 8008696:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	2200      	movs	r2, #0
 80086a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	3301      	adds	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e7      	bne.n	8008680 <USBD_GetString+0x52>
 80086b0:	e000      	b.n	80086b4 <USBD_GetString+0x86>
    return;
 80086b2:	bf00      	nop
  }
}
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80086ca:	e005      	b.n	80086d8 <USBD_GetLen+0x1e>
  {
    len++;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	3301      	adds	r3, #1
 80086d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3301      	adds	r3, #1
 80086d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1f5      	bne.n	80086cc <USBD_GetLen+0x12>
  }

  return len;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2202      	movs	r2, #2
 80086fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	2100      	movs	r1, #0
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 fcf8 	bl	800910a <USBD_LL_Transmit>

  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	2100      	movs	r1, #0
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 fce7 	bl	800910a <USBD_LL_Transmit>

  return USBD_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2203      	movs	r2, #3
 8008756:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	2100      	movs	r1, #0
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fceb 	bl	800914c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	2100      	movs	r1, #0
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 fcda 	bl	800914c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2204      	movs	r2, #4
 80087ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087b2:	2300      	movs	r3, #0
 80087b4:	2200      	movs	r2, #0
 80087b6:	2100      	movs	r1, #0
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fca6 	bl	800910a <USBD_LL_Transmit>

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2205      	movs	r2, #5
 80087d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087d8:	2300      	movs	r3, #0
 80087da:	2200      	movs	r2, #0
 80087dc:	2100      	movs	r1, #0
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fcb4 	bl	800914c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087f4:	2200      	movs	r2, #0
 80087f6:	4912      	ldr	r1, [pc, #72]	; (8008840 <MX_USB_DEVICE_Init+0x50>)
 80087f8:	4812      	ldr	r0, [pc, #72]	; (8008844 <MX_USB_DEVICE_Init+0x54>)
 80087fa:	f7fe fef3 	bl	80075e4 <USBD_Init>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008804:	f7f8 ff56 	bl	80016b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008808:	490f      	ldr	r1, [pc, #60]	; (8008848 <MX_USB_DEVICE_Init+0x58>)
 800880a:	480e      	ldr	r0, [pc, #56]	; (8008844 <MX_USB_DEVICE_Init+0x54>)
 800880c:	f7fe ff20 	bl	8007650 <USBD_RegisterClass>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008816:	f7f8 ff4d 	bl	80016b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800881a:	490c      	ldr	r1, [pc, #48]	; (800884c <MX_USB_DEVICE_Init+0x5c>)
 800881c:	4809      	ldr	r0, [pc, #36]	; (8008844 <MX_USB_DEVICE_Init+0x54>)
 800881e:	f7fe fe45 	bl	80074ac <USBD_CDC_RegisterInterface>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008828:	f7f8 ff44 	bl	80016b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800882c:	4805      	ldr	r0, [pc, #20]	; (8008844 <MX_USB_DEVICE_Init+0x54>)
 800882e:	f7fe ff30 	bl	8007692 <USBD_Start>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008838:	f7f8 ff3c 	bl	80016b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800883c:	bf00      	nop
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20000144 	.word	0x20000144
 8008844:	2000056c 	.word	0x2000056c
 8008848:	2000002c 	.word	0x2000002c
 800884c:	20000130 	.word	0x20000130

08008850 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008854:	2200      	movs	r2, #0
 8008856:	4905      	ldr	r1, [pc, #20]	; (800886c <CDC_Init_FS+0x1c>)
 8008858:	4805      	ldr	r0, [pc, #20]	; (8008870 <CDC_Init_FS+0x20>)
 800885a:	f7fe fe3c 	bl	80074d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800885e:	4905      	ldr	r1, [pc, #20]	; (8008874 <CDC_Init_FS+0x24>)
 8008860:	4803      	ldr	r0, [pc, #12]	; (8008870 <CDC_Init_FS+0x20>)
 8008862:	f7fe fe51 	bl	8007508 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008866:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008868:	4618      	mov	r0, r3
 800886a:	bd80      	pop	{r7, pc}
 800886c:	2000103c 	.word	0x2000103c
 8008870:	2000056c 	.word	0x2000056c
 8008874:	2000083c 	.word	0x2000083c

08008878 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800887c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800887e:	4618      	mov	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	71fb      	strb	r3, [r7, #7]
 8008894:	4613      	mov	r3, r2
 8008896:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	2b23      	cmp	r3, #35	; 0x23
 800889c:	d84a      	bhi.n	8008934 <CDC_Control_FS+0xac>
 800889e:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <CDC_Control_FS+0x1c>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	08008935 	.word	0x08008935
 80088a8:	08008935 	.word	0x08008935
 80088ac:	08008935 	.word	0x08008935
 80088b0:	08008935 	.word	0x08008935
 80088b4:	08008935 	.word	0x08008935
 80088b8:	08008935 	.word	0x08008935
 80088bc:	08008935 	.word	0x08008935
 80088c0:	08008935 	.word	0x08008935
 80088c4:	08008935 	.word	0x08008935
 80088c8:	08008935 	.word	0x08008935
 80088cc:	08008935 	.word	0x08008935
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008935 	.word	0x08008935
 80088d8:	08008935 	.word	0x08008935
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008935 	.word	0x08008935
 80088e4:	08008935 	.word	0x08008935
 80088e8:	08008935 	.word	0x08008935
 80088ec:	08008935 	.word	0x08008935
 80088f0:	08008935 	.word	0x08008935
 80088f4:	08008935 	.word	0x08008935
 80088f8:	08008935 	.word	0x08008935
 80088fc:	08008935 	.word	0x08008935
 8008900:	08008935 	.word	0x08008935
 8008904:	08008935 	.word	0x08008935
 8008908:	08008935 	.word	0x08008935
 800890c:	08008935 	.word	0x08008935
 8008910:	08008935 	.word	0x08008935
 8008914:	08008935 	.word	0x08008935
 8008918:	08008935 	.word	0x08008935
 800891c:	08008935 	.word	0x08008935
 8008920:	08008935 	.word	0x08008935
 8008924:	08008935 	.word	0x08008935
 8008928:	08008935 	.word	0x08008935
 800892c:	08008935 	.word	0x08008935
 8008930:	08008935 	.word	0x08008935
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008934:	bf00      	nop
  }

  return (USBD_OK);
 8008936:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4805      	ldr	r0, [pc, #20]	; (8008968 <CDC_Receive_FS+0x24>)
 8008952:	f7fe fdd9 	bl	8007508 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008956:	4804      	ldr	r0, [pc, #16]	; (8008968 <CDC_Receive_FS+0x24>)
 8008958:	f7fe fe1a 	bl	8007590 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800895c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	2000056c 	.word	0x2000056c

0800896c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800897c:	4b0d      	ldr	r3, [pc, #52]	; (80089b4 <CDC_Transmit_FS+0x48>)
 800897e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008982:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800898e:	2301      	movs	r3, #1
 8008990:	e00b      	b.n	80089aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008992:	887b      	ldrh	r3, [r7, #2]
 8008994:	461a      	mov	r2, r3
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	4806      	ldr	r0, [pc, #24]	; (80089b4 <CDC_Transmit_FS+0x48>)
 800899a:	f7fe fd9c 	bl	80074d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800899e:	4805      	ldr	r0, [pc, #20]	; (80089b4 <CDC_Transmit_FS+0x48>)
 80089a0:	f7fe fdc6 	bl	8007530 <USBD_CDC_TransmitPacket>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	2000056c 	.word	0x2000056c

080089b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80089ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
	...

080089dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2212      	movs	r2, #18
 80089ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089ee:	4b03      	ldr	r3, [pc, #12]	; (80089fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	20000160 	.word	0x20000160

08008a00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	6039      	str	r1, [r7, #0]
 8008a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2204      	movs	r2, #4
 8008a10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a12:	4b03      	ldr	r3, [pc, #12]	; (8008a20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	20000174 	.word	0x20000174

08008a24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d105      	bne.n	8008a42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	4907      	ldr	r1, [pc, #28]	; (8008a58 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a3a:	4808      	ldr	r0, [pc, #32]	; (8008a5c <USBD_FS_ProductStrDescriptor+0x38>)
 8008a3c:	f7ff fdf7 	bl	800862e <USBD_GetString>
 8008a40:	e004      	b.n	8008a4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	4904      	ldr	r1, [pc, #16]	; (8008a58 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a46:	4805      	ldr	r0, [pc, #20]	; (8008a5c <USBD_FS_ProductStrDescriptor+0x38>)
 8008a48:	f7ff fdf1 	bl	800862e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	2000183c 	.word	0x2000183c
 8008a5c:	0800b328 	.word	0x0800b328

08008a60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	4904      	ldr	r1, [pc, #16]	; (8008a80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a70:	4804      	ldr	r0, [pc, #16]	; (8008a84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a72:	f7ff fddc 	bl	800862e <USBD_GetString>
  return USBD_StrDesc;
 8008a76:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	2000183c 	.word	0x2000183c
 8008a84:	0800b340 	.word	0x0800b340

08008a88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	6039      	str	r1, [r7, #0]
 8008a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	221a      	movs	r2, #26
 8008a98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a9a:	f000 f843 	bl	8008b24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a9e:	4b02      	ldr	r3, [pc, #8]	; (8008aa8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20000178 	.word	0x20000178

08008aac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d105      	bne.n	8008aca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	4907      	ldr	r1, [pc, #28]	; (8008ae0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ac2:	4808      	ldr	r0, [pc, #32]	; (8008ae4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ac4:	f7ff fdb3 	bl	800862e <USBD_GetString>
 8008ac8:	e004      	b.n	8008ad4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	4904      	ldr	r1, [pc, #16]	; (8008ae0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ace:	4805      	ldr	r0, [pc, #20]	; (8008ae4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ad0:	f7ff fdad 	bl	800862e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ad4:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	2000183c 	.word	0x2000183c
 8008ae4:	0800b354 	.word	0x0800b354

08008ae8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d105      	bne.n	8008b06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	4907      	ldr	r1, [pc, #28]	; (8008b1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008afe:	4808      	ldr	r0, [pc, #32]	; (8008b20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b00:	f7ff fd95 	bl	800862e <USBD_GetString>
 8008b04:	e004      	b.n	8008b10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	4904      	ldr	r1, [pc, #16]	; (8008b1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b0a:	4805      	ldr	r0, [pc, #20]	; (8008b20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b0c:	f7ff fd8f 	bl	800862e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b10:	4b02      	ldr	r3, [pc, #8]	; (8008b1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	2000183c 	.word	0x2000183c
 8008b20:	0800b360 	.word	0x0800b360

08008b24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b2a:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <Get_SerialNum+0x44>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b30:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <Get_SerialNum+0x48>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b36:	4b0e      	ldr	r3, [pc, #56]	; (8008b70 <Get_SerialNum+0x4c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4413      	add	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b4a:	2208      	movs	r2, #8
 8008b4c:	4909      	ldr	r1, [pc, #36]	; (8008b74 <Get_SerialNum+0x50>)
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 f814 	bl	8008b7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b54:	2204      	movs	r2, #4
 8008b56:	4908      	ldr	r1, [pc, #32]	; (8008b78 <Get_SerialNum+0x54>)
 8008b58:	68b8      	ldr	r0, [r7, #8]
 8008b5a:	f000 f80f 	bl	8008b7c <IntToUnicode>
  }
}
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	1fff7a10 	.word	0x1fff7a10
 8008b6c:	1fff7a14 	.word	0x1fff7a14
 8008b70:	1fff7a18 	.word	0x1fff7a18
 8008b74:	2000017a 	.word	0x2000017a
 8008b78:	2000018a 	.word	0x2000018a

08008b7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75fb      	strb	r3, [r7, #23]
 8008b92:	e027      	b.n	8008be4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	0f1b      	lsrs	r3, r3, #28
 8008b98:	2b09      	cmp	r3, #9
 8008b9a:	d80b      	bhi.n	8008bb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	0f1b      	lsrs	r3, r3, #28
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	440b      	add	r3, r1
 8008bac:	3230      	adds	r2, #48	; 0x30
 8008bae:	b2d2      	uxtb	r2, r2
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e00a      	b.n	8008bca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	0f1b      	lsrs	r3, r3, #28
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	005b      	lsls	r3, r3, #1
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	440b      	add	r3, r1
 8008bc4:	3237      	adds	r2, #55	; 0x37
 8008bc6:	b2d2      	uxtb	r2, r2
 8008bc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	4413      	add	r3, r2
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	3301      	adds	r3, #1
 8008be2:	75fb      	strb	r3, [r7, #23]
 8008be4:	7dfa      	ldrb	r2, [r7, #23]
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d3d3      	bcc.n	8008b94 <IntToUnicode+0x18>
  }
}
 8008bec:	bf00      	nop
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08a      	sub	sp, #40	; 0x28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c00:	f107 0314 	add.w	r3, r7, #20
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	605a      	str	r2, [r3, #4]
 8008c0a:	609a      	str	r2, [r3, #8]
 8008c0c:	60da      	str	r2, [r3, #12]
 8008c0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c18:	d147      	bne.n	8008caa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	613b      	str	r3, [r7, #16]
 8008c1e:	4b25      	ldr	r3, [pc, #148]	; (8008cb4 <HAL_PCD_MspInit+0xbc>)
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	4a24      	ldr	r2, [pc, #144]	; (8008cb4 <HAL_PCD_MspInit+0xbc>)
 8008c24:	f043 0301 	orr.w	r3, r3, #1
 8008c28:	6313      	str	r3, [r2, #48]	; 0x30
 8008c2a:	4b22      	ldr	r3, [pc, #136]	; (8008cb4 <HAL_PCD_MspInit+0xbc>)
 8008c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	613b      	str	r3, [r7, #16]
 8008c34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c44:	f107 0314 	add.w	r3, r7, #20
 8008c48:	4619      	mov	r1, r3
 8008c4a:	481b      	ldr	r0, [pc, #108]	; (8008cb8 <HAL_PCD_MspInit+0xc0>)
 8008c4c:	f7f9 f990 	bl	8001f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c56:	2302      	movs	r3, #2
 8008c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c62:	230a      	movs	r3, #10
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c66:	f107 0314 	add.w	r3, r7, #20
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4812      	ldr	r0, [pc, #72]	; (8008cb8 <HAL_PCD_MspInit+0xc0>)
 8008c6e:	f7f9 f97f 	bl	8001f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c72:	4b10      	ldr	r3, [pc, #64]	; (8008cb4 <HAL_PCD_MspInit+0xbc>)
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	4a0f      	ldr	r2, [pc, #60]	; (8008cb4 <HAL_PCD_MspInit+0xbc>)
 8008c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7c:	6353      	str	r3, [r2, #52]	; 0x34
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	4b0c      	ldr	r3, [pc, #48]	; (8008cb4 <HAL_PCD_MspInit+0xbc>)
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	4a0b      	ldr	r2, [pc, #44]	; (8008cb4 <HAL_PCD_MspInit+0xbc>)
 8008c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <HAL_PCD_MspInit+0xbc>)
 8008c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	2043      	movs	r0, #67	; 0x43
 8008ca0:	f7f9 f90d 	bl	8001ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ca4:	2043      	movs	r0, #67	; 0x43
 8008ca6:	f7f9 f926 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008caa:	bf00      	nop
 8008cac:	3728      	adds	r7, #40	; 0x28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	40023800 	.word	0x40023800
 8008cb8:	40020000 	.word	0x40020000

08008cbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	f7fe fd28 	bl	8007728 <USBD_LL_SetupStage>
}
 8008cd8:	bf00      	nop
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008cf2:	78fa      	ldrb	r2, [r7, #3]
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	00db      	lsls	r3, r3, #3
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	440b      	add	r3, r1
 8008d00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	78fb      	ldrb	r3, [r7, #3]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f7fe fd60 	bl	80077ce <USBD_LL_DataOutStage>
}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008d28:	78fa      	ldrb	r2, [r7, #3]
 8008d2a:	6879      	ldr	r1, [r7, #4]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	00db      	lsls	r3, r3, #3
 8008d30:	1a9b      	subs	r3, r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	440b      	add	r3, r1
 8008d36:	3348      	adds	r3, #72	; 0x48
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f7fe fda9 	bl	8007894 <USBD_LL_DataInStage>
}
 8008d42:	bf00      	nop
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe fead 	bl	8007ab8 <USBD_LL_SOF>
}
 8008d5e:	bf00      	nop
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d102      	bne.n	8008d80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
 8008d7e:	e008      	b.n	8008d92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d102      	bne.n	8008d8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	73fb      	strb	r3, [r7, #15]
 8008d8c:	e001      	b.n	8008d92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008d8e:	f7f8 fc91 	bl	80016b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d98:	7bfa      	ldrb	r2, [r7, #15]
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe fe50 	bl	8007a42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe fe09 	bl	80079c0 <USBD_LL_Reset>
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fe4b 	bl	8007a62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	6812      	ldr	r2, [r2, #0]
 8008dda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008dde:	f043 0301 	orr.w	r3, r3, #1
 8008de2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d005      	beq.n	8008df8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008dec:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <HAL_PCD_SuspendCallback+0x48>)
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	4a03      	ldr	r2, [pc, #12]	; (8008e00 <HAL_PCD_SuspendCallback+0x48>)
 8008df2:	f043 0306 	orr.w	r3, r3, #6
 8008df6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	e000ed00 	.word	0xe000ed00

08008e04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fe3a 	bl	8007a8c <USBD_LL_Resume>
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e32:	78fa      	ldrb	r2, [r7, #3]
 8008e34:	4611      	mov	r1, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fe65 	bl	8007b06 <USBD_LL_IsoOUTIncomplete>
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fe46 	bl	8007aec <USBD_LL_IsoINIncomplete>
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe fe52 	bl	8007b20 <USBD_LL_DevConnected>
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fe4f 	bl	8007b36 <USBD_LL_DevDisconnected>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d13c      	bne.n	8008f2a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008eb0:	4a20      	ldr	r2, [pc, #128]	; (8008f34 <USBD_LL_Init+0x94>)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a1e      	ldr	r2, [pc, #120]	; (8008f34 <USBD_LL_Init+0x94>)
 8008ebc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ec0:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <USBD_LL_Init+0x94>)
 8008ec2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ec6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ec8:	4b1a      	ldr	r3, [pc, #104]	; (8008f34 <USBD_LL_Init+0x94>)
 8008eca:	2204      	movs	r2, #4
 8008ecc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ece:	4b19      	ldr	r3, [pc, #100]	; (8008f34 <USBD_LL_Init+0x94>)
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ed4:	4b17      	ldr	r3, [pc, #92]	; (8008f34 <USBD_LL_Init+0x94>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008eda:	4b16      	ldr	r3, [pc, #88]	; (8008f34 <USBD_LL_Init+0x94>)
 8008edc:	2202      	movs	r2, #2
 8008ede:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ee0:	4b14      	ldr	r3, [pc, #80]	; (8008f34 <USBD_LL_Init+0x94>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ee6:	4b13      	ldr	r3, [pc, #76]	; (8008f34 <USBD_LL_Init+0x94>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008eec:	4b11      	ldr	r3, [pc, #68]	; (8008f34 <USBD_LL_Init+0x94>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008ef2:	4b10      	ldr	r3, [pc, #64]	; (8008f34 <USBD_LL_Init+0x94>)
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ef8:	4b0e      	ldr	r3, [pc, #56]	; (8008f34 <USBD_LL_Init+0x94>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008efe:	480d      	ldr	r0, [pc, #52]	; (8008f34 <USBD_LL_Init+0x94>)
 8008f00:	f7f9 ffc2 	bl	8002e88 <HAL_PCD_Init>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f0a:	f7f8 fbd3 	bl	80016b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f0e:	2180      	movs	r1, #128	; 0x80
 8008f10:	4808      	ldr	r0, [pc, #32]	; (8008f34 <USBD_LL_Init+0x94>)
 8008f12:	f7fb f920 	bl	8004156 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f16:	2240      	movs	r2, #64	; 0x40
 8008f18:	2100      	movs	r1, #0
 8008f1a:	4806      	ldr	r0, [pc, #24]	; (8008f34 <USBD_LL_Init+0x94>)
 8008f1c:	f7fb f8d4 	bl	80040c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f20:	2280      	movs	r2, #128	; 0x80
 8008f22:	2101      	movs	r1, #1
 8008f24:	4803      	ldr	r0, [pc, #12]	; (8008f34 <USBD_LL_Init+0x94>)
 8008f26:	f7fb f8cf 	bl	80040c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20001a3c 	.word	0x20001a3c

08008f38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fa f8b7 	bl	80030c2 <HAL_PCD_Start>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 f92a 	bl	80091b4 <USBD_Get_USB_Status>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	4608      	mov	r0, r1
 8008f78:	4611      	mov	r1, r2
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	70fb      	strb	r3, [r7, #3]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70bb      	strb	r3, [r7, #2]
 8008f84:	4613      	mov	r3, r2
 8008f86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f96:	78bb      	ldrb	r3, [r7, #2]
 8008f98:	883a      	ldrh	r2, [r7, #0]
 8008f9a:	78f9      	ldrb	r1, [r7, #3]
 8008f9c:	f7fa fc9b 	bl	80038d6 <HAL_PCD_EP_Open>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f904 	bl	80091b4 <USBD_Get_USB_Status>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fd4:	78fa      	ldrb	r2, [r7, #3]
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fa fce4 	bl	80039a6 <HAL_PCD_EP_Close>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 f8e5 	bl	80091b4 <USBD_Get_USB_Status>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009012:	78fa      	ldrb	r2, [r7, #3]
 8009014:	4611      	mov	r1, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f7fa fdbc 	bl	8003b94 <HAL_PCD_EP_SetStall>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	4618      	mov	r0, r3
 8009024:	f000 f8c6 	bl	80091b4 <USBD_Get_USB_Status>
 8009028:	4603      	mov	r3, r0
 800902a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800902c:	7bbb      	ldrb	r3, [r7, #14]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009050:	78fa      	ldrb	r2, [r7, #3]
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f7fa fe01 	bl	8003c5c <HAL_PCD_EP_ClrStall>
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 f8a7 	bl	80091b4 <USBD_Get_USB_Status>
 8009066:	4603      	mov	r3, r0
 8009068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800906a:	7bbb      	ldrb	r3, [r7, #14]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009086:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800908c:	2b00      	cmp	r3, #0
 800908e:	da0b      	bge.n	80090a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	4613      	mov	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	333e      	adds	r3, #62	; 0x3e
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	e00b      	b.n	80090c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	4613      	mov	r3, r2
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	440b      	add	r3, r1
 80090ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090dc:	2300      	movs	r3, #0
 80090de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090e6:	78fa      	ldrb	r2, [r7, #3]
 80090e8:	4611      	mov	r1, r2
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fa fbce 	bl	800388c <HAL_PCD_SetAddress>
 80090f0:	4603      	mov	r3, r0
 80090f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f85c 	bl	80091b4 <USBD_Get_USB_Status>
 80090fc:	4603      	mov	r3, r0
 80090fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009100:	7bbb      	ldrb	r3, [r7, #14]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
 8009116:	460b      	mov	r3, r1
 8009118:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009128:	7af9      	ldrb	r1, [r7, #11]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	f7fa fce7 	bl	8003b00 <HAL_PCD_EP_Transmit>
 8009132:	4603      	mov	r3, r0
 8009134:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009136:	7dfb      	ldrb	r3, [r7, #23]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f83b 	bl	80091b4 <USBD_Get_USB_Status>
 800913e:	4603      	mov	r3, r0
 8009140:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009142:	7dbb      	ldrb	r3, [r7, #22]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	607a      	str	r2, [r7, #4]
 8009156:	603b      	str	r3, [r7, #0]
 8009158:	460b      	mov	r3, r1
 800915a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800916a:	7af9      	ldrb	r1, [r7, #11]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	f7fa fc63 	bl	8003a3a <HAL_PCD_EP_Receive>
 8009174:	4603      	mov	r3, r0
 8009176:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	4618      	mov	r0, r3
 800917c:	f000 f81a 	bl	80091b4 <USBD_Get_USB_Status>
 8009180:	4603      	mov	r3, r0
 8009182:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009184:	7dbb      	ldrb	r3, [r7, #22]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	460b      	mov	r3, r1
 8009198:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091a0:	78fa      	ldrb	r2, [r7, #3]
 80091a2:	4611      	mov	r1, r2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fa fc93 	bl	8003ad0 <HAL_PCD_EP_GetRxCount>
 80091aa:	4603      	mov	r3, r0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4603      	mov	r3, r0
 80091bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091c2:	79fb      	ldrb	r3, [r7, #7]
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d817      	bhi.n	80091f8 <USBD_Get_USB_Status+0x44>
 80091c8:	a201      	add	r2, pc, #4	; (adr r2, 80091d0 <USBD_Get_USB_Status+0x1c>)
 80091ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ce:	bf00      	nop
 80091d0:	080091e1 	.word	0x080091e1
 80091d4:	080091e7 	.word	0x080091e7
 80091d8:	080091ed 	.word	0x080091ed
 80091dc:	080091f3 	.word	0x080091f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73fb      	strb	r3, [r7, #15]
    break;
 80091e4:	e00b      	b.n	80091fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091e6:	2303      	movs	r3, #3
 80091e8:	73fb      	strb	r3, [r7, #15]
    break;
 80091ea:	e008      	b.n	80091fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091ec:	2301      	movs	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
    break;
 80091f0:	e005      	b.n	80091fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091f2:	2303      	movs	r3, #3
 80091f4:	73fb      	strb	r3, [r7, #15]
    break;
 80091f6:	e002      	b.n	80091fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091f8:	2303      	movs	r3, #3
 80091fa:	73fb      	strb	r3, [r7, #15]
    break;
 80091fc:	bf00      	nop
  }
  return usb_status;
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3714      	adds	r7, #20
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <__errno>:
 800920c:	4b01      	ldr	r3, [pc, #4]	; (8009214 <__errno+0x8>)
 800920e:	6818      	ldr	r0, [r3, #0]
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20000194 	.word	0x20000194

08009218 <__libc_init_array>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	4e0d      	ldr	r6, [pc, #52]	; (8009250 <__libc_init_array+0x38>)
 800921c:	4c0d      	ldr	r4, [pc, #52]	; (8009254 <__libc_init_array+0x3c>)
 800921e:	1ba4      	subs	r4, r4, r6
 8009220:	10a4      	asrs	r4, r4, #2
 8009222:	2500      	movs	r5, #0
 8009224:	42a5      	cmp	r5, r4
 8009226:	d109      	bne.n	800923c <__libc_init_array+0x24>
 8009228:	4e0b      	ldr	r6, [pc, #44]	; (8009258 <__libc_init_array+0x40>)
 800922a:	4c0c      	ldr	r4, [pc, #48]	; (800925c <__libc_init_array+0x44>)
 800922c:	f002 f866 	bl	800b2fc <_init>
 8009230:	1ba4      	subs	r4, r4, r6
 8009232:	10a4      	asrs	r4, r4, #2
 8009234:	2500      	movs	r5, #0
 8009236:	42a5      	cmp	r5, r4
 8009238:	d105      	bne.n	8009246 <__libc_init_array+0x2e>
 800923a:	bd70      	pop	{r4, r5, r6, pc}
 800923c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009240:	4798      	blx	r3
 8009242:	3501      	adds	r5, #1
 8009244:	e7ee      	b.n	8009224 <__libc_init_array+0xc>
 8009246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800924a:	4798      	blx	r3
 800924c:	3501      	adds	r5, #1
 800924e:	e7f2      	b.n	8009236 <__libc_init_array+0x1e>
 8009250:	0800b5f0 	.word	0x0800b5f0
 8009254:	0800b5f0 	.word	0x0800b5f0
 8009258:	0800b5f0 	.word	0x0800b5f0
 800925c:	0800b5f4 	.word	0x0800b5f4

08009260 <malloc>:
 8009260:	4b02      	ldr	r3, [pc, #8]	; (800926c <malloc+0xc>)
 8009262:	4601      	mov	r1, r0
 8009264:	6818      	ldr	r0, [r3, #0]
 8009266:	f000 b86d 	b.w	8009344 <_malloc_r>
 800926a:	bf00      	nop
 800926c:	20000194 	.word	0x20000194

08009270 <free>:
 8009270:	4b02      	ldr	r3, [pc, #8]	; (800927c <free+0xc>)
 8009272:	4601      	mov	r1, r0
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	f000 b817 	b.w	80092a8 <_free_r>
 800927a:	bf00      	nop
 800927c:	20000194 	.word	0x20000194

08009280 <memcpy>:
 8009280:	b510      	push	{r4, lr}
 8009282:	1e43      	subs	r3, r0, #1
 8009284:	440a      	add	r2, r1
 8009286:	4291      	cmp	r1, r2
 8009288:	d100      	bne.n	800928c <memcpy+0xc>
 800928a:	bd10      	pop	{r4, pc}
 800928c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009290:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009294:	e7f7      	b.n	8009286 <memcpy+0x6>

08009296 <memset>:
 8009296:	4402      	add	r2, r0
 8009298:	4603      	mov	r3, r0
 800929a:	4293      	cmp	r3, r2
 800929c:	d100      	bne.n	80092a0 <memset+0xa>
 800929e:	4770      	bx	lr
 80092a0:	f803 1b01 	strb.w	r1, [r3], #1
 80092a4:	e7f9      	b.n	800929a <memset+0x4>
	...

080092a8 <_free_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4605      	mov	r5, r0
 80092ac:	2900      	cmp	r1, #0
 80092ae:	d045      	beq.n	800933c <_free_r+0x94>
 80092b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092b4:	1f0c      	subs	r4, r1, #4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfb8      	it	lt
 80092ba:	18e4      	addlt	r4, r4, r3
 80092bc:	f001 fb7a 	bl	800a9b4 <__malloc_lock>
 80092c0:	4a1f      	ldr	r2, [pc, #124]	; (8009340 <_free_r+0x98>)
 80092c2:	6813      	ldr	r3, [r2, #0]
 80092c4:	4610      	mov	r0, r2
 80092c6:	b933      	cbnz	r3, 80092d6 <_free_r+0x2e>
 80092c8:	6063      	str	r3, [r4, #4]
 80092ca:	6014      	str	r4, [r2, #0]
 80092cc:	4628      	mov	r0, r5
 80092ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092d2:	f001 bb70 	b.w	800a9b6 <__malloc_unlock>
 80092d6:	42a3      	cmp	r3, r4
 80092d8:	d90c      	bls.n	80092f4 <_free_r+0x4c>
 80092da:	6821      	ldr	r1, [r4, #0]
 80092dc:	1862      	adds	r2, r4, r1
 80092de:	4293      	cmp	r3, r2
 80092e0:	bf04      	itt	eq
 80092e2:	681a      	ldreq	r2, [r3, #0]
 80092e4:	685b      	ldreq	r3, [r3, #4]
 80092e6:	6063      	str	r3, [r4, #4]
 80092e8:	bf04      	itt	eq
 80092ea:	1852      	addeq	r2, r2, r1
 80092ec:	6022      	streq	r2, [r4, #0]
 80092ee:	6004      	str	r4, [r0, #0]
 80092f0:	e7ec      	b.n	80092cc <_free_r+0x24>
 80092f2:	4613      	mov	r3, r2
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	b10a      	cbz	r2, 80092fc <_free_r+0x54>
 80092f8:	42a2      	cmp	r2, r4
 80092fa:	d9fa      	bls.n	80092f2 <_free_r+0x4a>
 80092fc:	6819      	ldr	r1, [r3, #0]
 80092fe:	1858      	adds	r0, r3, r1
 8009300:	42a0      	cmp	r0, r4
 8009302:	d10b      	bne.n	800931c <_free_r+0x74>
 8009304:	6820      	ldr	r0, [r4, #0]
 8009306:	4401      	add	r1, r0
 8009308:	1858      	adds	r0, r3, r1
 800930a:	4282      	cmp	r2, r0
 800930c:	6019      	str	r1, [r3, #0]
 800930e:	d1dd      	bne.n	80092cc <_free_r+0x24>
 8009310:	6810      	ldr	r0, [r2, #0]
 8009312:	6852      	ldr	r2, [r2, #4]
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	4401      	add	r1, r0
 8009318:	6019      	str	r1, [r3, #0]
 800931a:	e7d7      	b.n	80092cc <_free_r+0x24>
 800931c:	d902      	bls.n	8009324 <_free_r+0x7c>
 800931e:	230c      	movs	r3, #12
 8009320:	602b      	str	r3, [r5, #0]
 8009322:	e7d3      	b.n	80092cc <_free_r+0x24>
 8009324:	6820      	ldr	r0, [r4, #0]
 8009326:	1821      	adds	r1, r4, r0
 8009328:	428a      	cmp	r2, r1
 800932a:	bf04      	itt	eq
 800932c:	6811      	ldreq	r1, [r2, #0]
 800932e:	6852      	ldreq	r2, [r2, #4]
 8009330:	6062      	str	r2, [r4, #4]
 8009332:	bf04      	itt	eq
 8009334:	1809      	addeq	r1, r1, r0
 8009336:	6021      	streq	r1, [r4, #0]
 8009338:	605c      	str	r4, [r3, #4]
 800933a:	e7c7      	b.n	80092cc <_free_r+0x24>
 800933c:	bd38      	pop	{r3, r4, r5, pc}
 800933e:	bf00      	nop
 8009340:	20000394 	.word	0x20000394

08009344 <_malloc_r>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	1ccd      	adds	r5, r1, #3
 8009348:	f025 0503 	bic.w	r5, r5, #3
 800934c:	3508      	adds	r5, #8
 800934e:	2d0c      	cmp	r5, #12
 8009350:	bf38      	it	cc
 8009352:	250c      	movcc	r5, #12
 8009354:	2d00      	cmp	r5, #0
 8009356:	4606      	mov	r6, r0
 8009358:	db01      	blt.n	800935e <_malloc_r+0x1a>
 800935a:	42a9      	cmp	r1, r5
 800935c:	d903      	bls.n	8009366 <_malloc_r+0x22>
 800935e:	230c      	movs	r3, #12
 8009360:	6033      	str	r3, [r6, #0]
 8009362:	2000      	movs	r0, #0
 8009364:	bd70      	pop	{r4, r5, r6, pc}
 8009366:	f001 fb25 	bl	800a9b4 <__malloc_lock>
 800936a:	4a21      	ldr	r2, [pc, #132]	; (80093f0 <_malloc_r+0xac>)
 800936c:	6814      	ldr	r4, [r2, #0]
 800936e:	4621      	mov	r1, r4
 8009370:	b991      	cbnz	r1, 8009398 <_malloc_r+0x54>
 8009372:	4c20      	ldr	r4, [pc, #128]	; (80093f4 <_malloc_r+0xb0>)
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	b91b      	cbnz	r3, 8009380 <_malloc_r+0x3c>
 8009378:	4630      	mov	r0, r6
 800937a:	f000 fc99 	bl	8009cb0 <_sbrk_r>
 800937e:	6020      	str	r0, [r4, #0]
 8009380:	4629      	mov	r1, r5
 8009382:	4630      	mov	r0, r6
 8009384:	f000 fc94 	bl	8009cb0 <_sbrk_r>
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	d124      	bne.n	80093d6 <_malloc_r+0x92>
 800938c:	230c      	movs	r3, #12
 800938e:	6033      	str	r3, [r6, #0]
 8009390:	4630      	mov	r0, r6
 8009392:	f001 fb10 	bl	800a9b6 <__malloc_unlock>
 8009396:	e7e4      	b.n	8009362 <_malloc_r+0x1e>
 8009398:	680b      	ldr	r3, [r1, #0]
 800939a:	1b5b      	subs	r3, r3, r5
 800939c:	d418      	bmi.n	80093d0 <_malloc_r+0x8c>
 800939e:	2b0b      	cmp	r3, #11
 80093a0:	d90f      	bls.n	80093c2 <_malloc_r+0x7e>
 80093a2:	600b      	str	r3, [r1, #0]
 80093a4:	50cd      	str	r5, [r1, r3]
 80093a6:	18cc      	adds	r4, r1, r3
 80093a8:	4630      	mov	r0, r6
 80093aa:	f001 fb04 	bl	800a9b6 <__malloc_unlock>
 80093ae:	f104 000b 	add.w	r0, r4, #11
 80093b2:	1d23      	adds	r3, r4, #4
 80093b4:	f020 0007 	bic.w	r0, r0, #7
 80093b8:	1ac3      	subs	r3, r0, r3
 80093ba:	d0d3      	beq.n	8009364 <_malloc_r+0x20>
 80093bc:	425a      	negs	r2, r3
 80093be:	50e2      	str	r2, [r4, r3]
 80093c0:	e7d0      	b.n	8009364 <_malloc_r+0x20>
 80093c2:	428c      	cmp	r4, r1
 80093c4:	684b      	ldr	r3, [r1, #4]
 80093c6:	bf16      	itet	ne
 80093c8:	6063      	strne	r3, [r4, #4]
 80093ca:	6013      	streq	r3, [r2, #0]
 80093cc:	460c      	movne	r4, r1
 80093ce:	e7eb      	b.n	80093a8 <_malloc_r+0x64>
 80093d0:	460c      	mov	r4, r1
 80093d2:	6849      	ldr	r1, [r1, #4]
 80093d4:	e7cc      	b.n	8009370 <_malloc_r+0x2c>
 80093d6:	1cc4      	adds	r4, r0, #3
 80093d8:	f024 0403 	bic.w	r4, r4, #3
 80093dc:	42a0      	cmp	r0, r4
 80093de:	d005      	beq.n	80093ec <_malloc_r+0xa8>
 80093e0:	1a21      	subs	r1, r4, r0
 80093e2:	4630      	mov	r0, r6
 80093e4:	f000 fc64 	bl	8009cb0 <_sbrk_r>
 80093e8:	3001      	adds	r0, #1
 80093ea:	d0cf      	beq.n	800938c <_malloc_r+0x48>
 80093ec:	6025      	str	r5, [r4, #0]
 80093ee:	e7db      	b.n	80093a8 <_malloc_r+0x64>
 80093f0:	20000394 	.word	0x20000394
 80093f4:	20000398 	.word	0x20000398

080093f8 <__cvt>:
 80093f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	ec55 4b10 	vmov	r4, r5, d0
 8009400:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009402:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009406:	2d00      	cmp	r5, #0
 8009408:	460e      	mov	r6, r1
 800940a:	4691      	mov	r9, r2
 800940c:	4619      	mov	r1, r3
 800940e:	bfb8      	it	lt
 8009410:	4622      	movlt	r2, r4
 8009412:	462b      	mov	r3, r5
 8009414:	f027 0720 	bic.w	r7, r7, #32
 8009418:	bfbb      	ittet	lt
 800941a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800941e:	461d      	movlt	r5, r3
 8009420:	2300      	movge	r3, #0
 8009422:	232d      	movlt	r3, #45	; 0x2d
 8009424:	bfb8      	it	lt
 8009426:	4614      	movlt	r4, r2
 8009428:	2f46      	cmp	r7, #70	; 0x46
 800942a:	700b      	strb	r3, [r1, #0]
 800942c:	d004      	beq.n	8009438 <__cvt+0x40>
 800942e:	2f45      	cmp	r7, #69	; 0x45
 8009430:	d100      	bne.n	8009434 <__cvt+0x3c>
 8009432:	3601      	adds	r6, #1
 8009434:	2102      	movs	r1, #2
 8009436:	e000      	b.n	800943a <__cvt+0x42>
 8009438:	2103      	movs	r1, #3
 800943a:	ab03      	add	r3, sp, #12
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	ab02      	add	r3, sp, #8
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	4632      	mov	r2, r6
 8009444:	4653      	mov	r3, sl
 8009446:	ec45 4b10 	vmov	d0, r4, r5
 800944a:	f000 fced 	bl	8009e28 <_dtoa_r>
 800944e:	2f47      	cmp	r7, #71	; 0x47
 8009450:	4680      	mov	r8, r0
 8009452:	d102      	bne.n	800945a <__cvt+0x62>
 8009454:	f019 0f01 	tst.w	r9, #1
 8009458:	d026      	beq.n	80094a8 <__cvt+0xb0>
 800945a:	2f46      	cmp	r7, #70	; 0x46
 800945c:	eb08 0906 	add.w	r9, r8, r6
 8009460:	d111      	bne.n	8009486 <__cvt+0x8e>
 8009462:	f898 3000 	ldrb.w	r3, [r8]
 8009466:	2b30      	cmp	r3, #48	; 0x30
 8009468:	d10a      	bne.n	8009480 <__cvt+0x88>
 800946a:	2200      	movs	r2, #0
 800946c:	2300      	movs	r3, #0
 800946e:	4620      	mov	r0, r4
 8009470:	4629      	mov	r1, r5
 8009472:	f7f7 fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 8009476:	b918      	cbnz	r0, 8009480 <__cvt+0x88>
 8009478:	f1c6 0601 	rsb	r6, r6, #1
 800947c:	f8ca 6000 	str.w	r6, [sl]
 8009480:	f8da 3000 	ldr.w	r3, [sl]
 8009484:	4499      	add	r9, r3
 8009486:	2200      	movs	r2, #0
 8009488:	2300      	movs	r3, #0
 800948a:	4620      	mov	r0, r4
 800948c:	4629      	mov	r1, r5
 800948e:	f7f7 fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009492:	b938      	cbnz	r0, 80094a4 <__cvt+0xac>
 8009494:	2230      	movs	r2, #48	; 0x30
 8009496:	9b03      	ldr	r3, [sp, #12]
 8009498:	454b      	cmp	r3, r9
 800949a:	d205      	bcs.n	80094a8 <__cvt+0xb0>
 800949c:	1c59      	adds	r1, r3, #1
 800949e:	9103      	str	r1, [sp, #12]
 80094a0:	701a      	strb	r2, [r3, #0]
 80094a2:	e7f8      	b.n	8009496 <__cvt+0x9e>
 80094a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094ac:	eba3 0308 	sub.w	r3, r3, r8
 80094b0:	4640      	mov	r0, r8
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	b004      	add	sp, #16
 80094b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080094ba <__exponent>:
 80094ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094bc:	2900      	cmp	r1, #0
 80094be:	4604      	mov	r4, r0
 80094c0:	bfba      	itte	lt
 80094c2:	4249      	neglt	r1, r1
 80094c4:	232d      	movlt	r3, #45	; 0x2d
 80094c6:	232b      	movge	r3, #43	; 0x2b
 80094c8:	2909      	cmp	r1, #9
 80094ca:	f804 2b02 	strb.w	r2, [r4], #2
 80094ce:	7043      	strb	r3, [r0, #1]
 80094d0:	dd20      	ble.n	8009514 <__exponent+0x5a>
 80094d2:	f10d 0307 	add.w	r3, sp, #7
 80094d6:	461f      	mov	r7, r3
 80094d8:	260a      	movs	r6, #10
 80094da:	fb91 f5f6 	sdiv	r5, r1, r6
 80094de:	fb06 1115 	mls	r1, r6, r5, r1
 80094e2:	3130      	adds	r1, #48	; 0x30
 80094e4:	2d09      	cmp	r5, #9
 80094e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80094ea:	f103 32ff 	add.w	r2, r3, #4294967295
 80094ee:	4629      	mov	r1, r5
 80094f0:	dc09      	bgt.n	8009506 <__exponent+0x4c>
 80094f2:	3130      	adds	r1, #48	; 0x30
 80094f4:	3b02      	subs	r3, #2
 80094f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80094fa:	42bb      	cmp	r3, r7
 80094fc:	4622      	mov	r2, r4
 80094fe:	d304      	bcc.n	800950a <__exponent+0x50>
 8009500:	1a10      	subs	r0, r2, r0
 8009502:	b003      	add	sp, #12
 8009504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009506:	4613      	mov	r3, r2
 8009508:	e7e7      	b.n	80094da <__exponent+0x20>
 800950a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800950e:	f804 2b01 	strb.w	r2, [r4], #1
 8009512:	e7f2      	b.n	80094fa <__exponent+0x40>
 8009514:	2330      	movs	r3, #48	; 0x30
 8009516:	4419      	add	r1, r3
 8009518:	7083      	strb	r3, [r0, #2]
 800951a:	1d02      	adds	r2, r0, #4
 800951c:	70c1      	strb	r1, [r0, #3]
 800951e:	e7ef      	b.n	8009500 <__exponent+0x46>

08009520 <_printf_float>:
 8009520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	b08d      	sub	sp, #52	; 0x34
 8009526:	460c      	mov	r4, r1
 8009528:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800952c:	4616      	mov	r6, r2
 800952e:	461f      	mov	r7, r3
 8009530:	4605      	mov	r5, r0
 8009532:	f001 fa31 	bl	800a998 <_localeconv_r>
 8009536:	6803      	ldr	r3, [r0, #0]
 8009538:	9304      	str	r3, [sp, #16]
 800953a:	4618      	mov	r0, r3
 800953c:	f7f6 fe48 	bl	80001d0 <strlen>
 8009540:	2300      	movs	r3, #0
 8009542:	930a      	str	r3, [sp, #40]	; 0x28
 8009544:	f8d8 3000 	ldr.w	r3, [r8]
 8009548:	9005      	str	r0, [sp, #20]
 800954a:	3307      	adds	r3, #7
 800954c:	f023 0307 	bic.w	r3, r3, #7
 8009550:	f103 0208 	add.w	r2, r3, #8
 8009554:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009558:	f8d4 b000 	ldr.w	fp, [r4]
 800955c:	f8c8 2000 	str.w	r2, [r8]
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009568:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800956c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009570:	9307      	str	r3, [sp, #28]
 8009572:	f8cd 8018 	str.w	r8, [sp, #24]
 8009576:	f04f 32ff 	mov.w	r2, #4294967295
 800957a:	4ba7      	ldr	r3, [pc, #668]	; (8009818 <_printf_float+0x2f8>)
 800957c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009580:	f7f7 fad4 	bl	8000b2c <__aeabi_dcmpun>
 8009584:	bb70      	cbnz	r0, 80095e4 <_printf_float+0xc4>
 8009586:	f04f 32ff 	mov.w	r2, #4294967295
 800958a:	4ba3      	ldr	r3, [pc, #652]	; (8009818 <_printf_float+0x2f8>)
 800958c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009590:	f7f7 faae 	bl	8000af0 <__aeabi_dcmple>
 8009594:	bb30      	cbnz	r0, 80095e4 <_printf_float+0xc4>
 8009596:	2200      	movs	r2, #0
 8009598:	2300      	movs	r3, #0
 800959a:	4640      	mov	r0, r8
 800959c:	4649      	mov	r1, r9
 800959e:	f7f7 fa9d 	bl	8000adc <__aeabi_dcmplt>
 80095a2:	b110      	cbz	r0, 80095aa <_printf_float+0x8a>
 80095a4:	232d      	movs	r3, #45	; 0x2d
 80095a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095aa:	4a9c      	ldr	r2, [pc, #624]	; (800981c <_printf_float+0x2fc>)
 80095ac:	4b9c      	ldr	r3, [pc, #624]	; (8009820 <_printf_float+0x300>)
 80095ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80095b2:	bf8c      	ite	hi
 80095b4:	4690      	movhi	r8, r2
 80095b6:	4698      	movls	r8, r3
 80095b8:	2303      	movs	r3, #3
 80095ba:	f02b 0204 	bic.w	r2, fp, #4
 80095be:	6123      	str	r3, [r4, #16]
 80095c0:	6022      	str	r2, [r4, #0]
 80095c2:	f04f 0900 	mov.w	r9, #0
 80095c6:	9700      	str	r7, [sp, #0]
 80095c8:	4633      	mov	r3, r6
 80095ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80095cc:	4621      	mov	r1, r4
 80095ce:	4628      	mov	r0, r5
 80095d0:	f000 f9e6 	bl	80099a0 <_printf_common>
 80095d4:	3001      	adds	r0, #1
 80095d6:	f040 808d 	bne.w	80096f4 <_printf_float+0x1d4>
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	b00d      	add	sp, #52	; 0x34
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e4:	4642      	mov	r2, r8
 80095e6:	464b      	mov	r3, r9
 80095e8:	4640      	mov	r0, r8
 80095ea:	4649      	mov	r1, r9
 80095ec:	f7f7 fa9e 	bl	8000b2c <__aeabi_dcmpun>
 80095f0:	b110      	cbz	r0, 80095f8 <_printf_float+0xd8>
 80095f2:	4a8c      	ldr	r2, [pc, #560]	; (8009824 <_printf_float+0x304>)
 80095f4:	4b8c      	ldr	r3, [pc, #560]	; (8009828 <_printf_float+0x308>)
 80095f6:	e7da      	b.n	80095ae <_printf_float+0x8e>
 80095f8:	6861      	ldr	r1, [r4, #4]
 80095fa:	1c4b      	adds	r3, r1, #1
 80095fc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009600:	a80a      	add	r0, sp, #40	; 0x28
 8009602:	d13e      	bne.n	8009682 <_printf_float+0x162>
 8009604:	2306      	movs	r3, #6
 8009606:	6063      	str	r3, [r4, #4]
 8009608:	2300      	movs	r3, #0
 800960a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800960e:	ab09      	add	r3, sp, #36	; 0x24
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	ec49 8b10 	vmov	d0, r8, r9
 8009616:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800961a:	6022      	str	r2, [r4, #0]
 800961c:	f8cd a004 	str.w	sl, [sp, #4]
 8009620:	6861      	ldr	r1, [r4, #4]
 8009622:	4628      	mov	r0, r5
 8009624:	f7ff fee8 	bl	80093f8 <__cvt>
 8009628:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800962c:	2b47      	cmp	r3, #71	; 0x47
 800962e:	4680      	mov	r8, r0
 8009630:	d109      	bne.n	8009646 <_printf_float+0x126>
 8009632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009634:	1cd8      	adds	r0, r3, #3
 8009636:	db02      	blt.n	800963e <_printf_float+0x11e>
 8009638:	6862      	ldr	r2, [r4, #4]
 800963a:	4293      	cmp	r3, r2
 800963c:	dd47      	ble.n	80096ce <_printf_float+0x1ae>
 800963e:	f1aa 0a02 	sub.w	sl, sl, #2
 8009642:	fa5f fa8a 	uxtb.w	sl, sl
 8009646:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800964a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800964c:	d824      	bhi.n	8009698 <_printf_float+0x178>
 800964e:	3901      	subs	r1, #1
 8009650:	4652      	mov	r2, sl
 8009652:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009656:	9109      	str	r1, [sp, #36]	; 0x24
 8009658:	f7ff ff2f 	bl	80094ba <__exponent>
 800965c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800965e:	1813      	adds	r3, r2, r0
 8009660:	2a01      	cmp	r2, #1
 8009662:	4681      	mov	r9, r0
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	dc02      	bgt.n	800966e <_printf_float+0x14e>
 8009668:	6822      	ldr	r2, [r4, #0]
 800966a:	07d1      	lsls	r1, r2, #31
 800966c:	d501      	bpl.n	8009672 <_printf_float+0x152>
 800966e:	3301      	adds	r3, #1
 8009670:	6123      	str	r3, [r4, #16]
 8009672:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0a5      	beq.n	80095c6 <_printf_float+0xa6>
 800967a:	232d      	movs	r3, #45	; 0x2d
 800967c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009680:	e7a1      	b.n	80095c6 <_printf_float+0xa6>
 8009682:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009686:	f000 8177 	beq.w	8009978 <_printf_float+0x458>
 800968a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800968e:	d1bb      	bne.n	8009608 <_printf_float+0xe8>
 8009690:	2900      	cmp	r1, #0
 8009692:	d1b9      	bne.n	8009608 <_printf_float+0xe8>
 8009694:	2301      	movs	r3, #1
 8009696:	e7b6      	b.n	8009606 <_printf_float+0xe6>
 8009698:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800969c:	d119      	bne.n	80096d2 <_printf_float+0x1b2>
 800969e:	2900      	cmp	r1, #0
 80096a0:	6863      	ldr	r3, [r4, #4]
 80096a2:	dd0c      	ble.n	80096be <_printf_float+0x19e>
 80096a4:	6121      	str	r1, [r4, #16]
 80096a6:	b913      	cbnz	r3, 80096ae <_printf_float+0x18e>
 80096a8:	6822      	ldr	r2, [r4, #0]
 80096aa:	07d2      	lsls	r2, r2, #31
 80096ac:	d502      	bpl.n	80096b4 <_printf_float+0x194>
 80096ae:	3301      	adds	r3, #1
 80096b0:	440b      	add	r3, r1
 80096b2:	6123      	str	r3, [r4, #16]
 80096b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80096b8:	f04f 0900 	mov.w	r9, #0
 80096bc:	e7d9      	b.n	8009672 <_printf_float+0x152>
 80096be:	b913      	cbnz	r3, 80096c6 <_printf_float+0x1a6>
 80096c0:	6822      	ldr	r2, [r4, #0]
 80096c2:	07d0      	lsls	r0, r2, #31
 80096c4:	d501      	bpl.n	80096ca <_printf_float+0x1aa>
 80096c6:	3302      	adds	r3, #2
 80096c8:	e7f3      	b.n	80096b2 <_printf_float+0x192>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e7f1      	b.n	80096b2 <_printf_float+0x192>
 80096ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80096d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80096d6:	4293      	cmp	r3, r2
 80096d8:	db05      	blt.n	80096e6 <_printf_float+0x1c6>
 80096da:	6822      	ldr	r2, [r4, #0]
 80096dc:	6123      	str	r3, [r4, #16]
 80096de:	07d1      	lsls	r1, r2, #31
 80096e0:	d5e8      	bpl.n	80096b4 <_printf_float+0x194>
 80096e2:	3301      	adds	r3, #1
 80096e4:	e7e5      	b.n	80096b2 <_printf_float+0x192>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfd4      	ite	le
 80096ea:	f1c3 0302 	rsble	r3, r3, #2
 80096ee:	2301      	movgt	r3, #1
 80096f0:	4413      	add	r3, r2
 80096f2:	e7de      	b.n	80096b2 <_printf_float+0x192>
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	055a      	lsls	r2, r3, #21
 80096f8:	d407      	bmi.n	800970a <_printf_float+0x1ea>
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	4642      	mov	r2, r8
 80096fe:	4631      	mov	r1, r6
 8009700:	4628      	mov	r0, r5
 8009702:	47b8      	blx	r7
 8009704:	3001      	adds	r0, #1
 8009706:	d12b      	bne.n	8009760 <_printf_float+0x240>
 8009708:	e767      	b.n	80095da <_printf_float+0xba>
 800970a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800970e:	f240 80dc 	bls.w	80098ca <_printf_float+0x3aa>
 8009712:	2200      	movs	r2, #0
 8009714:	2300      	movs	r3, #0
 8009716:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800971a:	f7f7 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800971e:	2800      	cmp	r0, #0
 8009720:	d033      	beq.n	800978a <_printf_float+0x26a>
 8009722:	2301      	movs	r3, #1
 8009724:	4a41      	ldr	r2, [pc, #260]	; (800982c <_printf_float+0x30c>)
 8009726:	4631      	mov	r1, r6
 8009728:	4628      	mov	r0, r5
 800972a:	47b8      	blx	r7
 800972c:	3001      	adds	r0, #1
 800972e:	f43f af54 	beq.w	80095da <_printf_float+0xba>
 8009732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009736:	429a      	cmp	r2, r3
 8009738:	db02      	blt.n	8009740 <_printf_float+0x220>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	07d8      	lsls	r0, r3, #31
 800973e:	d50f      	bpl.n	8009760 <_printf_float+0x240>
 8009740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009744:	4631      	mov	r1, r6
 8009746:	4628      	mov	r0, r5
 8009748:	47b8      	blx	r7
 800974a:	3001      	adds	r0, #1
 800974c:	f43f af45 	beq.w	80095da <_printf_float+0xba>
 8009750:	f04f 0800 	mov.w	r8, #0
 8009754:	f104 091a 	add.w	r9, r4, #26
 8009758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800975a:	3b01      	subs	r3, #1
 800975c:	4543      	cmp	r3, r8
 800975e:	dc09      	bgt.n	8009774 <_printf_float+0x254>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	079b      	lsls	r3, r3, #30
 8009764:	f100 8103 	bmi.w	800996e <_printf_float+0x44e>
 8009768:	68e0      	ldr	r0, [r4, #12]
 800976a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800976c:	4298      	cmp	r0, r3
 800976e:	bfb8      	it	lt
 8009770:	4618      	movlt	r0, r3
 8009772:	e734      	b.n	80095de <_printf_float+0xbe>
 8009774:	2301      	movs	r3, #1
 8009776:	464a      	mov	r2, r9
 8009778:	4631      	mov	r1, r6
 800977a:	4628      	mov	r0, r5
 800977c:	47b8      	blx	r7
 800977e:	3001      	adds	r0, #1
 8009780:	f43f af2b 	beq.w	80095da <_printf_float+0xba>
 8009784:	f108 0801 	add.w	r8, r8, #1
 8009788:	e7e6      	b.n	8009758 <_printf_float+0x238>
 800978a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	dc2b      	bgt.n	80097e8 <_printf_float+0x2c8>
 8009790:	2301      	movs	r3, #1
 8009792:	4a26      	ldr	r2, [pc, #152]	; (800982c <_printf_float+0x30c>)
 8009794:	4631      	mov	r1, r6
 8009796:	4628      	mov	r0, r5
 8009798:	47b8      	blx	r7
 800979a:	3001      	adds	r0, #1
 800979c:	f43f af1d 	beq.w	80095da <_printf_float+0xba>
 80097a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a2:	b923      	cbnz	r3, 80097ae <_printf_float+0x28e>
 80097a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a6:	b913      	cbnz	r3, 80097ae <_printf_float+0x28e>
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	07d9      	lsls	r1, r3, #31
 80097ac:	d5d8      	bpl.n	8009760 <_printf_float+0x240>
 80097ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	f43f af0e 	beq.w	80095da <_printf_float+0xba>
 80097be:	f04f 0900 	mov.w	r9, #0
 80097c2:	f104 0a1a 	add.w	sl, r4, #26
 80097c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c8:	425b      	negs	r3, r3
 80097ca:	454b      	cmp	r3, r9
 80097cc:	dc01      	bgt.n	80097d2 <_printf_float+0x2b2>
 80097ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d0:	e794      	b.n	80096fc <_printf_float+0x1dc>
 80097d2:	2301      	movs	r3, #1
 80097d4:	4652      	mov	r2, sl
 80097d6:	4631      	mov	r1, r6
 80097d8:	4628      	mov	r0, r5
 80097da:	47b8      	blx	r7
 80097dc:	3001      	adds	r0, #1
 80097de:	f43f aefc 	beq.w	80095da <_printf_float+0xba>
 80097e2:	f109 0901 	add.w	r9, r9, #1
 80097e6:	e7ee      	b.n	80097c6 <_printf_float+0x2a6>
 80097e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097ec:	429a      	cmp	r2, r3
 80097ee:	bfa8      	it	ge
 80097f0:	461a      	movge	r2, r3
 80097f2:	2a00      	cmp	r2, #0
 80097f4:	4691      	mov	r9, r2
 80097f6:	dd07      	ble.n	8009808 <_printf_float+0x2e8>
 80097f8:	4613      	mov	r3, r2
 80097fa:	4631      	mov	r1, r6
 80097fc:	4642      	mov	r2, r8
 80097fe:	4628      	mov	r0, r5
 8009800:	47b8      	blx	r7
 8009802:	3001      	adds	r0, #1
 8009804:	f43f aee9 	beq.w	80095da <_printf_float+0xba>
 8009808:	f104 031a 	add.w	r3, r4, #26
 800980c:	f04f 0b00 	mov.w	fp, #0
 8009810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009814:	9306      	str	r3, [sp, #24]
 8009816:	e015      	b.n	8009844 <_printf_float+0x324>
 8009818:	7fefffff 	.word	0x7fefffff
 800981c:	0800b38c 	.word	0x0800b38c
 8009820:	0800b388 	.word	0x0800b388
 8009824:	0800b394 	.word	0x0800b394
 8009828:	0800b390 	.word	0x0800b390
 800982c:	0800b398 	.word	0x0800b398
 8009830:	2301      	movs	r3, #1
 8009832:	9a06      	ldr	r2, [sp, #24]
 8009834:	4631      	mov	r1, r6
 8009836:	4628      	mov	r0, r5
 8009838:	47b8      	blx	r7
 800983a:	3001      	adds	r0, #1
 800983c:	f43f aecd 	beq.w	80095da <_printf_float+0xba>
 8009840:	f10b 0b01 	add.w	fp, fp, #1
 8009844:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009848:	ebaa 0309 	sub.w	r3, sl, r9
 800984c:	455b      	cmp	r3, fp
 800984e:	dcef      	bgt.n	8009830 <_printf_float+0x310>
 8009850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009854:	429a      	cmp	r2, r3
 8009856:	44d0      	add	r8, sl
 8009858:	db15      	blt.n	8009886 <_printf_float+0x366>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	07da      	lsls	r2, r3, #31
 800985e:	d412      	bmi.n	8009886 <_printf_float+0x366>
 8009860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009862:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009864:	eba3 020a 	sub.w	r2, r3, sl
 8009868:	eba3 0a01 	sub.w	sl, r3, r1
 800986c:	4592      	cmp	sl, r2
 800986e:	bfa8      	it	ge
 8009870:	4692      	movge	sl, r2
 8009872:	f1ba 0f00 	cmp.w	sl, #0
 8009876:	dc0e      	bgt.n	8009896 <_printf_float+0x376>
 8009878:	f04f 0800 	mov.w	r8, #0
 800987c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009880:	f104 091a 	add.w	r9, r4, #26
 8009884:	e019      	b.n	80098ba <_printf_float+0x39a>
 8009886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	d1e5      	bne.n	8009860 <_printf_float+0x340>
 8009894:	e6a1      	b.n	80095da <_printf_float+0xba>
 8009896:	4653      	mov	r3, sl
 8009898:	4642      	mov	r2, r8
 800989a:	4631      	mov	r1, r6
 800989c:	4628      	mov	r0, r5
 800989e:	47b8      	blx	r7
 80098a0:	3001      	adds	r0, #1
 80098a2:	d1e9      	bne.n	8009878 <_printf_float+0x358>
 80098a4:	e699      	b.n	80095da <_printf_float+0xba>
 80098a6:	2301      	movs	r3, #1
 80098a8:	464a      	mov	r2, r9
 80098aa:	4631      	mov	r1, r6
 80098ac:	4628      	mov	r0, r5
 80098ae:	47b8      	blx	r7
 80098b0:	3001      	adds	r0, #1
 80098b2:	f43f ae92 	beq.w	80095da <_printf_float+0xba>
 80098b6:	f108 0801 	add.w	r8, r8, #1
 80098ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	eba3 030a 	sub.w	r3, r3, sl
 80098c4:	4543      	cmp	r3, r8
 80098c6:	dcee      	bgt.n	80098a6 <_printf_float+0x386>
 80098c8:	e74a      	b.n	8009760 <_printf_float+0x240>
 80098ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098cc:	2a01      	cmp	r2, #1
 80098ce:	dc01      	bgt.n	80098d4 <_printf_float+0x3b4>
 80098d0:	07db      	lsls	r3, r3, #31
 80098d2:	d53a      	bpl.n	800994a <_printf_float+0x42a>
 80098d4:	2301      	movs	r3, #1
 80098d6:	4642      	mov	r2, r8
 80098d8:	4631      	mov	r1, r6
 80098da:	4628      	mov	r0, r5
 80098dc:	47b8      	blx	r7
 80098de:	3001      	adds	r0, #1
 80098e0:	f43f ae7b 	beq.w	80095da <_printf_float+0xba>
 80098e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098e8:	4631      	mov	r1, r6
 80098ea:	4628      	mov	r0, r5
 80098ec:	47b8      	blx	r7
 80098ee:	3001      	adds	r0, #1
 80098f0:	f108 0801 	add.w	r8, r8, #1
 80098f4:	f43f ae71 	beq.w	80095da <_printf_float+0xba>
 80098f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fa:	2200      	movs	r2, #0
 80098fc:	f103 3aff 	add.w	sl, r3, #4294967295
 8009900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009904:	2300      	movs	r3, #0
 8009906:	f7f7 f8df 	bl	8000ac8 <__aeabi_dcmpeq>
 800990a:	b9c8      	cbnz	r0, 8009940 <_printf_float+0x420>
 800990c:	4653      	mov	r3, sl
 800990e:	4642      	mov	r2, r8
 8009910:	4631      	mov	r1, r6
 8009912:	4628      	mov	r0, r5
 8009914:	47b8      	blx	r7
 8009916:	3001      	adds	r0, #1
 8009918:	d10e      	bne.n	8009938 <_printf_float+0x418>
 800991a:	e65e      	b.n	80095da <_printf_float+0xba>
 800991c:	2301      	movs	r3, #1
 800991e:	4652      	mov	r2, sl
 8009920:	4631      	mov	r1, r6
 8009922:	4628      	mov	r0, r5
 8009924:	47b8      	blx	r7
 8009926:	3001      	adds	r0, #1
 8009928:	f43f ae57 	beq.w	80095da <_printf_float+0xba>
 800992c:	f108 0801 	add.w	r8, r8, #1
 8009930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009932:	3b01      	subs	r3, #1
 8009934:	4543      	cmp	r3, r8
 8009936:	dcf1      	bgt.n	800991c <_printf_float+0x3fc>
 8009938:	464b      	mov	r3, r9
 800993a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800993e:	e6de      	b.n	80096fe <_printf_float+0x1de>
 8009940:	f04f 0800 	mov.w	r8, #0
 8009944:	f104 0a1a 	add.w	sl, r4, #26
 8009948:	e7f2      	b.n	8009930 <_printf_float+0x410>
 800994a:	2301      	movs	r3, #1
 800994c:	e7df      	b.n	800990e <_printf_float+0x3ee>
 800994e:	2301      	movs	r3, #1
 8009950:	464a      	mov	r2, r9
 8009952:	4631      	mov	r1, r6
 8009954:	4628      	mov	r0, r5
 8009956:	47b8      	blx	r7
 8009958:	3001      	adds	r0, #1
 800995a:	f43f ae3e 	beq.w	80095da <_printf_float+0xba>
 800995e:	f108 0801 	add.w	r8, r8, #1
 8009962:	68e3      	ldr	r3, [r4, #12]
 8009964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009966:	1a9b      	subs	r3, r3, r2
 8009968:	4543      	cmp	r3, r8
 800996a:	dcf0      	bgt.n	800994e <_printf_float+0x42e>
 800996c:	e6fc      	b.n	8009768 <_printf_float+0x248>
 800996e:	f04f 0800 	mov.w	r8, #0
 8009972:	f104 0919 	add.w	r9, r4, #25
 8009976:	e7f4      	b.n	8009962 <_printf_float+0x442>
 8009978:	2900      	cmp	r1, #0
 800997a:	f43f ae8b 	beq.w	8009694 <_printf_float+0x174>
 800997e:	2300      	movs	r3, #0
 8009980:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009984:	ab09      	add	r3, sp, #36	; 0x24
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	ec49 8b10 	vmov	d0, r8, r9
 800998c:	6022      	str	r2, [r4, #0]
 800998e:	f8cd a004 	str.w	sl, [sp, #4]
 8009992:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009996:	4628      	mov	r0, r5
 8009998:	f7ff fd2e 	bl	80093f8 <__cvt>
 800999c:	4680      	mov	r8, r0
 800999e:	e648      	b.n	8009632 <_printf_float+0x112>

080099a0 <_printf_common>:
 80099a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a4:	4691      	mov	r9, r2
 80099a6:	461f      	mov	r7, r3
 80099a8:	688a      	ldr	r2, [r1, #8]
 80099aa:	690b      	ldr	r3, [r1, #16]
 80099ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099b0:	4293      	cmp	r3, r2
 80099b2:	bfb8      	it	lt
 80099b4:	4613      	movlt	r3, r2
 80099b6:	f8c9 3000 	str.w	r3, [r9]
 80099ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099be:	4606      	mov	r6, r0
 80099c0:	460c      	mov	r4, r1
 80099c2:	b112      	cbz	r2, 80099ca <_printf_common+0x2a>
 80099c4:	3301      	adds	r3, #1
 80099c6:	f8c9 3000 	str.w	r3, [r9]
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	0699      	lsls	r1, r3, #26
 80099ce:	bf42      	ittt	mi
 80099d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80099d4:	3302      	addmi	r3, #2
 80099d6:	f8c9 3000 	strmi.w	r3, [r9]
 80099da:	6825      	ldr	r5, [r4, #0]
 80099dc:	f015 0506 	ands.w	r5, r5, #6
 80099e0:	d107      	bne.n	80099f2 <_printf_common+0x52>
 80099e2:	f104 0a19 	add.w	sl, r4, #25
 80099e6:	68e3      	ldr	r3, [r4, #12]
 80099e8:	f8d9 2000 	ldr.w	r2, [r9]
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	42ab      	cmp	r3, r5
 80099f0:	dc28      	bgt.n	8009a44 <_printf_common+0xa4>
 80099f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	3300      	adds	r3, #0
 80099fa:	bf18      	it	ne
 80099fc:	2301      	movne	r3, #1
 80099fe:	0692      	lsls	r2, r2, #26
 8009a00:	d42d      	bmi.n	8009a5e <_printf_common+0xbe>
 8009a02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a06:	4639      	mov	r1, r7
 8009a08:	4630      	mov	r0, r6
 8009a0a:	47c0      	blx	r8
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d020      	beq.n	8009a52 <_printf_common+0xb2>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	68e5      	ldr	r5, [r4, #12]
 8009a14:	f8d9 2000 	ldr.w	r2, [r9]
 8009a18:	f003 0306 	and.w	r3, r3, #6
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	bf08      	it	eq
 8009a20:	1aad      	subeq	r5, r5, r2
 8009a22:	68a3      	ldr	r3, [r4, #8]
 8009a24:	6922      	ldr	r2, [r4, #16]
 8009a26:	bf0c      	ite	eq
 8009a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a2c:	2500      	movne	r5, #0
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	bfc4      	itt	gt
 8009a32:	1a9b      	subgt	r3, r3, r2
 8009a34:	18ed      	addgt	r5, r5, r3
 8009a36:	f04f 0900 	mov.w	r9, #0
 8009a3a:	341a      	adds	r4, #26
 8009a3c:	454d      	cmp	r5, r9
 8009a3e:	d11a      	bne.n	8009a76 <_printf_common+0xd6>
 8009a40:	2000      	movs	r0, #0
 8009a42:	e008      	b.n	8009a56 <_printf_common+0xb6>
 8009a44:	2301      	movs	r3, #1
 8009a46:	4652      	mov	r2, sl
 8009a48:	4639      	mov	r1, r7
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	47c0      	blx	r8
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d103      	bne.n	8009a5a <_printf_common+0xba>
 8009a52:	f04f 30ff 	mov.w	r0, #4294967295
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	3501      	adds	r5, #1
 8009a5c:	e7c3      	b.n	80099e6 <_printf_common+0x46>
 8009a5e:	18e1      	adds	r1, r4, r3
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	2030      	movs	r0, #48	; 0x30
 8009a64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a68:	4422      	add	r2, r4
 8009a6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a72:	3302      	adds	r3, #2
 8009a74:	e7c5      	b.n	8009a02 <_printf_common+0x62>
 8009a76:	2301      	movs	r3, #1
 8009a78:	4622      	mov	r2, r4
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	47c0      	blx	r8
 8009a80:	3001      	adds	r0, #1
 8009a82:	d0e6      	beq.n	8009a52 <_printf_common+0xb2>
 8009a84:	f109 0901 	add.w	r9, r9, #1
 8009a88:	e7d8      	b.n	8009a3c <_printf_common+0x9c>
	...

08009a8c <_printf_i>:
 8009a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009a94:	460c      	mov	r4, r1
 8009a96:	7e09      	ldrb	r1, [r1, #24]
 8009a98:	b085      	sub	sp, #20
 8009a9a:	296e      	cmp	r1, #110	; 0x6e
 8009a9c:	4617      	mov	r7, r2
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	4698      	mov	r8, r3
 8009aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aa4:	f000 80b3 	beq.w	8009c0e <_printf_i+0x182>
 8009aa8:	d822      	bhi.n	8009af0 <_printf_i+0x64>
 8009aaa:	2963      	cmp	r1, #99	; 0x63
 8009aac:	d036      	beq.n	8009b1c <_printf_i+0x90>
 8009aae:	d80a      	bhi.n	8009ac6 <_printf_i+0x3a>
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	f000 80b9 	beq.w	8009c28 <_printf_i+0x19c>
 8009ab6:	2958      	cmp	r1, #88	; 0x58
 8009ab8:	f000 8083 	beq.w	8009bc2 <_printf_i+0x136>
 8009abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ac0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009ac4:	e032      	b.n	8009b2c <_printf_i+0xa0>
 8009ac6:	2964      	cmp	r1, #100	; 0x64
 8009ac8:	d001      	beq.n	8009ace <_printf_i+0x42>
 8009aca:	2969      	cmp	r1, #105	; 0x69
 8009acc:	d1f6      	bne.n	8009abc <_printf_i+0x30>
 8009ace:	6820      	ldr	r0, [r4, #0]
 8009ad0:	6813      	ldr	r3, [r2, #0]
 8009ad2:	0605      	lsls	r5, r0, #24
 8009ad4:	f103 0104 	add.w	r1, r3, #4
 8009ad8:	d52a      	bpl.n	8009b30 <_printf_i+0xa4>
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6011      	str	r1, [r2, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	da03      	bge.n	8009aea <_printf_i+0x5e>
 8009ae2:	222d      	movs	r2, #45	; 0x2d
 8009ae4:	425b      	negs	r3, r3
 8009ae6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009aea:	486f      	ldr	r0, [pc, #444]	; (8009ca8 <_printf_i+0x21c>)
 8009aec:	220a      	movs	r2, #10
 8009aee:	e039      	b.n	8009b64 <_printf_i+0xd8>
 8009af0:	2973      	cmp	r1, #115	; 0x73
 8009af2:	f000 809d 	beq.w	8009c30 <_printf_i+0x1a4>
 8009af6:	d808      	bhi.n	8009b0a <_printf_i+0x7e>
 8009af8:	296f      	cmp	r1, #111	; 0x6f
 8009afa:	d020      	beq.n	8009b3e <_printf_i+0xb2>
 8009afc:	2970      	cmp	r1, #112	; 0x70
 8009afe:	d1dd      	bne.n	8009abc <_printf_i+0x30>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	f043 0320 	orr.w	r3, r3, #32
 8009b06:	6023      	str	r3, [r4, #0]
 8009b08:	e003      	b.n	8009b12 <_printf_i+0x86>
 8009b0a:	2975      	cmp	r1, #117	; 0x75
 8009b0c:	d017      	beq.n	8009b3e <_printf_i+0xb2>
 8009b0e:	2978      	cmp	r1, #120	; 0x78
 8009b10:	d1d4      	bne.n	8009abc <_printf_i+0x30>
 8009b12:	2378      	movs	r3, #120	; 0x78
 8009b14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b18:	4864      	ldr	r0, [pc, #400]	; (8009cac <_printf_i+0x220>)
 8009b1a:	e055      	b.n	8009bc8 <_printf_i+0x13c>
 8009b1c:	6813      	ldr	r3, [r2, #0]
 8009b1e:	1d19      	adds	r1, r3, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6011      	str	r1, [r2, #0]
 8009b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e08c      	b.n	8009c4a <_printf_i+0x1be>
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6011      	str	r1, [r2, #0]
 8009b34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b38:	bf18      	it	ne
 8009b3a:	b21b      	sxthne	r3, r3
 8009b3c:	e7cf      	b.n	8009ade <_printf_i+0x52>
 8009b3e:	6813      	ldr	r3, [r2, #0]
 8009b40:	6825      	ldr	r5, [r4, #0]
 8009b42:	1d18      	adds	r0, r3, #4
 8009b44:	6010      	str	r0, [r2, #0]
 8009b46:	0628      	lsls	r0, r5, #24
 8009b48:	d501      	bpl.n	8009b4e <_printf_i+0xc2>
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	e002      	b.n	8009b54 <_printf_i+0xc8>
 8009b4e:	0668      	lsls	r0, r5, #25
 8009b50:	d5fb      	bpl.n	8009b4a <_printf_i+0xbe>
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	4854      	ldr	r0, [pc, #336]	; (8009ca8 <_printf_i+0x21c>)
 8009b56:	296f      	cmp	r1, #111	; 0x6f
 8009b58:	bf14      	ite	ne
 8009b5a:	220a      	movne	r2, #10
 8009b5c:	2208      	moveq	r2, #8
 8009b5e:	2100      	movs	r1, #0
 8009b60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b64:	6865      	ldr	r5, [r4, #4]
 8009b66:	60a5      	str	r5, [r4, #8]
 8009b68:	2d00      	cmp	r5, #0
 8009b6a:	f2c0 8095 	blt.w	8009c98 <_printf_i+0x20c>
 8009b6e:	6821      	ldr	r1, [r4, #0]
 8009b70:	f021 0104 	bic.w	r1, r1, #4
 8009b74:	6021      	str	r1, [r4, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d13d      	bne.n	8009bf6 <_printf_i+0x16a>
 8009b7a:	2d00      	cmp	r5, #0
 8009b7c:	f040 808e 	bne.w	8009c9c <_printf_i+0x210>
 8009b80:	4665      	mov	r5, ip
 8009b82:	2a08      	cmp	r2, #8
 8009b84:	d10b      	bne.n	8009b9e <_printf_i+0x112>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	07db      	lsls	r3, r3, #31
 8009b8a:	d508      	bpl.n	8009b9e <_printf_i+0x112>
 8009b8c:	6923      	ldr	r3, [r4, #16]
 8009b8e:	6862      	ldr	r2, [r4, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	bfde      	ittt	le
 8009b94:	2330      	movle	r3, #48	; 0x30
 8009b96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b9e:	ebac 0305 	sub.w	r3, ip, r5
 8009ba2:	6123      	str	r3, [r4, #16]
 8009ba4:	f8cd 8000 	str.w	r8, [sp]
 8009ba8:	463b      	mov	r3, r7
 8009baa:	aa03      	add	r2, sp, #12
 8009bac:	4621      	mov	r1, r4
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f7ff fef6 	bl	80099a0 <_printf_common>
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	d14d      	bne.n	8009c54 <_printf_i+0x1c8>
 8009bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbc:	b005      	add	sp, #20
 8009bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc2:	4839      	ldr	r0, [pc, #228]	; (8009ca8 <_printf_i+0x21c>)
 8009bc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009bc8:	6813      	ldr	r3, [r2, #0]
 8009bca:	6821      	ldr	r1, [r4, #0]
 8009bcc:	1d1d      	adds	r5, r3, #4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6015      	str	r5, [r2, #0]
 8009bd2:	060a      	lsls	r2, r1, #24
 8009bd4:	d50b      	bpl.n	8009bee <_printf_i+0x162>
 8009bd6:	07ca      	lsls	r2, r1, #31
 8009bd8:	bf44      	itt	mi
 8009bda:	f041 0120 	orrmi.w	r1, r1, #32
 8009bde:	6021      	strmi	r1, [r4, #0]
 8009be0:	b91b      	cbnz	r3, 8009bea <_printf_i+0x15e>
 8009be2:	6822      	ldr	r2, [r4, #0]
 8009be4:	f022 0220 	bic.w	r2, r2, #32
 8009be8:	6022      	str	r2, [r4, #0]
 8009bea:	2210      	movs	r2, #16
 8009bec:	e7b7      	b.n	8009b5e <_printf_i+0xd2>
 8009bee:	064d      	lsls	r5, r1, #25
 8009bf0:	bf48      	it	mi
 8009bf2:	b29b      	uxthmi	r3, r3
 8009bf4:	e7ef      	b.n	8009bd6 <_printf_i+0x14a>
 8009bf6:	4665      	mov	r5, ip
 8009bf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bfc:	fb02 3311 	mls	r3, r2, r1, r3
 8009c00:	5cc3      	ldrb	r3, [r0, r3]
 8009c02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009c06:	460b      	mov	r3, r1
 8009c08:	2900      	cmp	r1, #0
 8009c0a:	d1f5      	bne.n	8009bf8 <_printf_i+0x16c>
 8009c0c:	e7b9      	b.n	8009b82 <_printf_i+0xf6>
 8009c0e:	6813      	ldr	r3, [r2, #0]
 8009c10:	6825      	ldr	r5, [r4, #0]
 8009c12:	6961      	ldr	r1, [r4, #20]
 8009c14:	1d18      	adds	r0, r3, #4
 8009c16:	6010      	str	r0, [r2, #0]
 8009c18:	0628      	lsls	r0, r5, #24
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	d501      	bpl.n	8009c22 <_printf_i+0x196>
 8009c1e:	6019      	str	r1, [r3, #0]
 8009c20:	e002      	b.n	8009c28 <_printf_i+0x19c>
 8009c22:	066a      	lsls	r2, r5, #25
 8009c24:	d5fb      	bpl.n	8009c1e <_printf_i+0x192>
 8009c26:	8019      	strh	r1, [r3, #0]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	6123      	str	r3, [r4, #16]
 8009c2c:	4665      	mov	r5, ip
 8009c2e:	e7b9      	b.n	8009ba4 <_printf_i+0x118>
 8009c30:	6813      	ldr	r3, [r2, #0]
 8009c32:	1d19      	adds	r1, r3, #4
 8009c34:	6011      	str	r1, [r2, #0]
 8009c36:	681d      	ldr	r5, [r3, #0]
 8009c38:	6862      	ldr	r2, [r4, #4]
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f7f6 facf 	bl	80001e0 <memchr>
 8009c42:	b108      	cbz	r0, 8009c48 <_printf_i+0x1bc>
 8009c44:	1b40      	subs	r0, r0, r5
 8009c46:	6060      	str	r0, [r4, #4]
 8009c48:	6863      	ldr	r3, [r4, #4]
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c52:	e7a7      	b.n	8009ba4 <_printf_i+0x118>
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	462a      	mov	r2, r5
 8009c58:	4639      	mov	r1, r7
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	47c0      	blx	r8
 8009c5e:	3001      	adds	r0, #1
 8009c60:	d0aa      	beq.n	8009bb8 <_printf_i+0x12c>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	079b      	lsls	r3, r3, #30
 8009c66:	d413      	bmi.n	8009c90 <_printf_i+0x204>
 8009c68:	68e0      	ldr	r0, [r4, #12]
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	4298      	cmp	r0, r3
 8009c6e:	bfb8      	it	lt
 8009c70:	4618      	movlt	r0, r3
 8009c72:	e7a3      	b.n	8009bbc <_printf_i+0x130>
 8009c74:	2301      	movs	r3, #1
 8009c76:	464a      	mov	r2, r9
 8009c78:	4639      	mov	r1, r7
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	47c0      	blx	r8
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d09a      	beq.n	8009bb8 <_printf_i+0x12c>
 8009c82:	3501      	adds	r5, #1
 8009c84:	68e3      	ldr	r3, [r4, #12]
 8009c86:	9a03      	ldr	r2, [sp, #12]
 8009c88:	1a9b      	subs	r3, r3, r2
 8009c8a:	42ab      	cmp	r3, r5
 8009c8c:	dcf2      	bgt.n	8009c74 <_printf_i+0x1e8>
 8009c8e:	e7eb      	b.n	8009c68 <_printf_i+0x1dc>
 8009c90:	2500      	movs	r5, #0
 8009c92:	f104 0919 	add.w	r9, r4, #25
 8009c96:	e7f5      	b.n	8009c84 <_printf_i+0x1f8>
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1ac      	bne.n	8009bf6 <_printf_i+0x16a>
 8009c9c:	7803      	ldrb	r3, [r0, #0]
 8009c9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ca2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ca6:	e76c      	b.n	8009b82 <_printf_i+0xf6>
 8009ca8:	0800b39a 	.word	0x0800b39a
 8009cac:	0800b3ab 	.word	0x0800b3ab

08009cb0 <_sbrk_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4c06      	ldr	r4, [pc, #24]	; (8009ccc <_sbrk_r+0x1c>)
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	4608      	mov	r0, r1
 8009cba:	6023      	str	r3, [r4, #0]
 8009cbc:	f7f7 ff1a 	bl	8001af4 <_sbrk>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d102      	bne.n	8009cca <_sbrk_r+0x1a>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	b103      	cbz	r3, 8009cca <_sbrk_r+0x1a>
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	20001e44 	.word	0x20001e44

08009cd0 <siprintf>:
 8009cd0:	b40e      	push	{r1, r2, r3}
 8009cd2:	b500      	push	{lr}
 8009cd4:	b09c      	sub	sp, #112	; 0x70
 8009cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8009cd8:	9002      	str	r0, [sp, #8]
 8009cda:	9006      	str	r0, [sp, #24]
 8009cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ce0:	4809      	ldr	r0, [pc, #36]	; (8009d08 <siprintf+0x38>)
 8009ce2:	9107      	str	r1, [sp, #28]
 8009ce4:	9104      	str	r1, [sp, #16]
 8009ce6:	4909      	ldr	r1, [pc, #36]	; (8009d0c <siprintf+0x3c>)
 8009ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cec:	9105      	str	r1, [sp, #20]
 8009cee:	6800      	ldr	r0, [r0, #0]
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	a902      	add	r1, sp, #8
 8009cf4:	f001 f9a4 	bl	800b040 <_svfiprintf_r>
 8009cf8:	9b02      	ldr	r3, [sp, #8]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	701a      	strb	r2, [r3, #0]
 8009cfe:	b01c      	add	sp, #112	; 0x70
 8009d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d04:	b003      	add	sp, #12
 8009d06:	4770      	bx	lr
 8009d08:	20000194 	.word	0x20000194
 8009d0c:	ffff0208 	.word	0xffff0208

08009d10 <quorem>:
 8009d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	6903      	ldr	r3, [r0, #16]
 8009d16:	690c      	ldr	r4, [r1, #16]
 8009d18:	42a3      	cmp	r3, r4
 8009d1a:	4680      	mov	r8, r0
 8009d1c:	f2c0 8082 	blt.w	8009e24 <quorem+0x114>
 8009d20:	3c01      	subs	r4, #1
 8009d22:	f101 0714 	add.w	r7, r1, #20
 8009d26:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009d2a:	f100 0614 	add.w	r6, r0, #20
 8009d2e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009d32:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009d36:	eb06 030c 	add.w	r3, r6, ip
 8009d3a:	3501      	adds	r5, #1
 8009d3c:	eb07 090c 	add.w	r9, r7, ip
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	fbb0 f5f5 	udiv	r5, r0, r5
 8009d46:	b395      	cbz	r5, 8009dae <quorem+0x9e>
 8009d48:	f04f 0a00 	mov.w	sl, #0
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	46b6      	mov	lr, r6
 8009d50:	46d3      	mov	fp, sl
 8009d52:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d56:	b293      	uxth	r3, r2
 8009d58:	fb05 a303 	mla	r3, r5, r3, sl
 8009d5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	ebab 0303 	sub.w	r3, fp, r3
 8009d66:	0c12      	lsrs	r2, r2, #16
 8009d68:	f8de b000 	ldr.w	fp, [lr]
 8009d6c:	fb05 a202 	mla	r2, r5, r2, sl
 8009d70:	fa13 f38b 	uxtah	r3, r3, fp
 8009d74:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009d78:	fa1f fb82 	uxth.w	fp, r2
 8009d7c:	f8de 2000 	ldr.w	r2, [lr]
 8009d80:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009d84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d8e:	4581      	cmp	r9, r0
 8009d90:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009d94:	f84e 3b04 	str.w	r3, [lr], #4
 8009d98:	d2db      	bcs.n	8009d52 <quorem+0x42>
 8009d9a:	f856 300c 	ldr.w	r3, [r6, ip]
 8009d9e:	b933      	cbnz	r3, 8009dae <quorem+0x9e>
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	3b04      	subs	r3, #4
 8009da4:	429e      	cmp	r6, r3
 8009da6:	461a      	mov	r2, r3
 8009da8:	d330      	bcc.n	8009e0c <quorem+0xfc>
 8009daa:	f8c8 4010 	str.w	r4, [r8, #16]
 8009dae:	4640      	mov	r0, r8
 8009db0:	f001 f818 	bl	800ade4 <__mcmp>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	db25      	blt.n	8009e04 <quorem+0xf4>
 8009db8:	3501      	adds	r5, #1
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f04f 0c00 	mov.w	ip, #0
 8009dc0:	f857 2b04 	ldr.w	r2, [r7], #4
 8009dc4:	f8d0 e000 	ldr.w	lr, [r0]
 8009dc8:	b293      	uxth	r3, r2
 8009dca:	ebac 0303 	sub.w	r3, ip, r3
 8009dce:	0c12      	lsrs	r2, r2, #16
 8009dd0:	fa13 f38e 	uxtah	r3, r3, lr
 8009dd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009de2:	45b9      	cmp	r9, r7
 8009de4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009de8:	f840 3b04 	str.w	r3, [r0], #4
 8009dec:	d2e8      	bcs.n	8009dc0 <quorem+0xb0>
 8009dee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009df2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009df6:	b92a      	cbnz	r2, 8009e04 <quorem+0xf4>
 8009df8:	3b04      	subs	r3, #4
 8009dfa:	429e      	cmp	r6, r3
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	d30b      	bcc.n	8009e18 <quorem+0x108>
 8009e00:	f8c8 4010 	str.w	r4, [r8, #16]
 8009e04:	4628      	mov	r0, r5
 8009e06:	b003      	add	sp, #12
 8009e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0c:	6812      	ldr	r2, [r2, #0]
 8009e0e:	3b04      	subs	r3, #4
 8009e10:	2a00      	cmp	r2, #0
 8009e12:	d1ca      	bne.n	8009daa <quorem+0x9a>
 8009e14:	3c01      	subs	r4, #1
 8009e16:	e7c5      	b.n	8009da4 <quorem+0x94>
 8009e18:	6812      	ldr	r2, [r2, #0]
 8009e1a:	3b04      	subs	r3, #4
 8009e1c:	2a00      	cmp	r2, #0
 8009e1e:	d1ef      	bne.n	8009e00 <quorem+0xf0>
 8009e20:	3c01      	subs	r4, #1
 8009e22:	e7ea      	b.n	8009dfa <quorem+0xea>
 8009e24:	2000      	movs	r0, #0
 8009e26:	e7ee      	b.n	8009e06 <quorem+0xf6>

08009e28 <_dtoa_r>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	ec57 6b10 	vmov	r6, r7, d0
 8009e30:	b097      	sub	sp, #92	; 0x5c
 8009e32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e34:	9106      	str	r1, [sp, #24]
 8009e36:	4604      	mov	r4, r0
 8009e38:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e3a:	9312      	str	r3, [sp, #72]	; 0x48
 8009e3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e40:	e9cd 6700 	strd	r6, r7, [sp]
 8009e44:	b93d      	cbnz	r5, 8009e56 <_dtoa_r+0x2e>
 8009e46:	2010      	movs	r0, #16
 8009e48:	f7ff fa0a 	bl	8009260 <malloc>
 8009e4c:	6260      	str	r0, [r4, #36]	; 0x24
 8009e4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e52:	6005      	str	r5, [r0, #0]
 8009e54:	60c5      	str	r5, [r0, #12]
 8009e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e58:	6819      	ldr	r1, [r3, #0]
 8009e5a:	b151      	cbz	r1, 8009e72 <_dtoa_r+0x4a>
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	604a      	str	r2, [r1, #4]
 8009e60:	2301      	movs	r3, #1
 8009e62:	4093      	lsls	r3, r2
 8009e64:	608b      	str	r3, [r1, #8]
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 fdda 	bl	800aa20 <_Bfree>
 8009e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	1e3b      	subs	r3, r7, #0
 8009e74:	bfbb      	ittet	lt
 8009e76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e7a:	9301      	strlt	r3, [sp, #4]
 8009e7c:	2300      	movge	r3, #0
 8009e7e:	2201      	movlt	r2, #1
 8009e80:	bfac      	ite	ge
 8009e82:	f8c8 3000 	strge.w	r3, [r8]
 8009e86:	f8c8 2000 	strlt.w	r2, [r8]
 8009e8a:	4baf      	ldr	r3, [pc, #700]	; (800a148 <_dtoa_r+0x320>)
 8009e8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e90:	ea33 0308 	bics.w	r3, r3, r8
 8009e94:	d114      	bne.n	8009ec0 <_dtoa_r+0x98>
 8009e96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e98:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	9b00      	ldr	r3, [sp, #0]
 8009ea0:	b923      	cbnz	r3, 8009eac <_dtoa_r+0x84>
 8009ea2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f000 8542 	beq.w	800a930 <_dtoa_r+0xb08>
 8009eac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a15c <_dtoa_r+0x334>
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 8544 	beq.w	800a940 <_dtoa_r+0xb18>
 8009eb8:	f10b 0303 	add.w	r3, fp, #3
 8009ebc:	f000 bd3e 	b.w	800a93c <_dtoa_r+0xb14>
 8009ec0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4630      	mov	r0, r6
 8009eca:	4639      	mov	r1, r7
 8009ecc:	f7f6 fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ed0:	4681      	mov	r9, r0
 8009ed2:	b168      	cbz	r0, 8009ef0 <_dtoa_r+0xc8>
 8009ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	6013      	str	r3, [r2, #0]
 8009eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 8524 	beq.w	800a92a <_dtoa_r+0xb02>
 8009ee2:	4b9a      	ldr	r3, [pc, #616]	; (800a14c <_dtoa_r+0x324>)
 8009ee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ee6:	f103 3bff 	add.w	fp, r3, #4294967295
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	f000 bd28 	b.w	800a940 <_dtoa_r+0xb18>
 8009ef0:	aa14      	add	r2, sp, #80	; 0x50
 8009ef2:	a915      	add	r1, sp, #84	; 0x54
 8009ef4:	ec47 6b10 	vmov	d0, r6, r7
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 ffea 	bl	800aed2 <__d2b>
 8009efe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f02:	9004      	str	r0, [sp, #16]
 8009f04:	2d00      	cmp	r5, #0
 8009f06:	d07c      	beq.n	800a002 <_dtoa_r+0x1da>
 8009f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009f10:	46b2      	mov	sl, r6
 8009f12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009f1e:	2200      	movs	r2, #0
 8009f20:	4b8b      	ldr	r3, [pc, #556]	; (800a150 <_dtoa_r+0x328>)
 8009f22:	4650      	mov	r0, sl
 8009f24:	4659      	mov	r1, fp
 8009f26:	f7f6 f9af 	bl	8000288 <__aeabi_dsub>
 8009f2a:	a381      	add	r3, pc, #516	; (adr r3, 800a130 <_dtoa_r+0x308>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f7f6 fb62 	bl	80005f8 <__aeabi_dmul>
 8009f34:	a380      	add	r3, pc, #512	; (adr r3, 800a138 <_dtoa_r+0x310>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f7f6 f9a7 	bl	800028c <__adddf3>
 8009f3e:	4606      	mov	r6, r0
 8009f40:	4628      	mov	r0, r5
 8009f42:	460f      	mov	r7, r1
 8009f44:	f7f6 faee 	bl	8000524 <__aeabi_i2d>
 8009f48:	a37d      	add	r3, pc, #500	; (adr r3, 800a140 <_dtoa_r+0x318>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f7f6 fb53 	bl	80005f8 <__aeabi_dmul>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	4630      	mov	r0, r6
 8009f58:	4639      	mov	r1, r7
 8009f5a:	f7f6 f997 	bl	800028c <__adddf3>
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460f      	mov	r7, r1
 8009f62:	f7f6 fdf9 	bl	8000b58 <__aeabi_d2iz>
 8009f66:	2200      	movs	r2, #0
 8009f68:	4682      	mov	sl, r0
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	4639      	mov	r1, r7
 8009f70:	f7f6 fdb4 	bl	8000adc <__aeabi_dcmplt>
 8009f74:	b148      	cbz	r0, 8009f8a <_dtoa_r+0x162>
 8009f76:	4650      	mov	r0, sl
 8009f78:	f7f6 fad4 	bl	8000524 <__aeabi_i2d>
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	463b      	mov	r3, r7
 8009f80:	f7f6 fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f84:	b908      	cbnz	r0, 8009f8a <_dtoa_r+0x162>
 8009f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f8a:	f1ba 0f16 	cmp.w	sl, #22
 8009f8e:	d859      	bhi.n	800a044 <_dtoa_r+0x21c>
 8009f90:	4970      	ldr	r1, [pc, #448]	; (800a154 <_dtoa_r+0x32c>)
 8009f92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f9e:	f7f6 fdbb 	bl	8000b18 <__aeabi_dcmpgt>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d050      	beq.n	800a048 <_dtoa_r+0x220>
 8009fa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009faa:	2300      	movs	r3, #0
 8009fac:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fb0:	1b5d      	subs	r5, r3, r5
 8009fb2:	f1b5 0801 	subs.w	r8, r5, #1
 8009fb6:	bf49      	itett	mi
 8009fb8:	f1c5 0301 	rsbmi	r3, r5, #1
 8009fbc:	2300      	movpl	r3, #0
 8009fbe:	9305      	strmi	r3, [sp, #20]
 8009fc0:	f04f 0800 	movmi.w	r8, #0
 8009fc4:	bf58      	it	pl
 8009fc6:	9305      	strpl	r3, [sp, #20]
 8009fc8:	f1ba 0f00 	cmp.w	sl, #0
 8009fcc:	db3e      	blt.n	800a04c <_dtoa_r+0x224>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	44d0      	add	r8, sl
 8009fd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009fd6:	9307      	str	r3, [sp, #28]
 8009fd8:	9b06      	ldr	r3, [sp, #24]
 8009fda:	2b09      	cmp	r3, #9
 8009fdc:	f200 8090 	bhi.w	800a100 <_dtoa_r+0x2d8>
 8009fe0:	2b05      	cmp	r3, #5
 8009fe2:	bfc4      	itt	gt
 8009fe4:	3b04      	subgt	r3, #4
 8009fe6:	9306      	strgt	r3, [sp, #24]
 8009fe8:	9b06      	ldr	r3, [sp, #24]
 8009fea:	f1a3 0302 	sub.w	r3, r3, #2
 8009fee:	bfcc      	ite	gt
 8009ff0:	2500      	movgt	r5, #0
 8009ff2:	2501      	movle	r5, #1
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	f200 808f 	bhi.w	800a118 <_dtoa_r+0x2f0>
 8009ffa:	e8df f003 	tbb	[pc, r3]
 8009ffe:	7f7d      	.short	0x7f7d
 800a000:	7131      	.short	0x7131
 800a002:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a006:	441d      	add	r5, r3
 800a008:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a00c:	2820      	cmp	r0, #32
 800a00e:	dd13      	ble.n	800a038 <_dtoa_r+0x210>
 800a010:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a014:	9b00      	ldr	r3, [sp, #0]
 800a016:	fa08 f800 	lsl.w	r8, r8, r0
 800a01a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a01e:	fa23 f000 	lsr.w	r0, r3, r0
 800a022:	ea48 0000 	orr.w	r0, r8, r0
 800a026:	f7f6 fa6d 	bl	8000504 <__aeabi_ui2d>
 800a02a:	2301      	movs	r3, #1
 800a02c:	4682      	mov	sl, r0
 800a02e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a032:	3d01      	subs	r5, #1
 800a034:	9313      	str	r3, [sp, #76]	; 0x4c
 800a036:	e772      	b.n	8009f1e <_dtoa_r+0xf6>
 800a038:	9b00      	ldr	r3, [sp, #0]
 800a03a:	f1c0 0020 	rsb	r0, r0, #32
 800a03e:	fa03 f000 	lsl.w	r0, r3, r0
 800a042:	e7f0      	b.n	800a026 <_dtoa_r+0x1fe>
 800a044:	2301      	movs	r3, #1
 800a046:	e7b1      	b.n	8009fac <_dtoa_r+0x184>
 800a048:	900f      	str	r0, [sp, #60]	; 0x3c
 800a04a:	e7b0      	b.n	8009fae <_dtoa_r+0x186>
 800a04c:	9b05      	ldr	r3, [sp, #20]
 800a04e:	eba3 030a 	sub.w	r3, r3, sl
 800a052:	9305      	str	r3, [sp, #20]
 800a054:	f1ca 0300 	rsb	r3, sl, #0
 800a058:	9307      	str	r3, [sp, #28]
 800a05a:	2300      	movs	r3, #0
 800a05c:	930e      	str	r3, [sp, #56]	; 0x38
 800a05e:	e7bb      	b.n	8009fd8 <_dtoa_r+0x1b0>
 800a060:	2301      	movs	r3, #1
 800a062:	930a      	str	r3, [sp, #40]	; 0x28
 800a064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a066:	2b00      	cmp	r3, #0
 800a068:	dd59      	ble.n	800a11e <_dtoa_r+0x2f6>
 800a06a:	9302      	str	r3, [sp, #8]
 800a06c:	4699      	mov	r9, r3
 800a06e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a070:	2200      	movs	r2, #0
 800a072:	6072      	str	r2, [r6, #4]
 800a074:	2204      	movs	r2, #4
 800a076:	f102 0014 	add.w	r0, r2, #20
 800a07a:	4298      	cmp	r0, r3
 800a07c:	6871      	ldr	r1, [r6, #4]
 800a07e:	d953      	bls.n	800a128 <_dtoa_r+0x300>
 800a080:	4620      	mov	r0, r4
 800a082:	f000 fc99 	bl	800a9b8 <_Balloc>
 800a086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a088:	6030      	str	r0, [r6, #0]
 800a08a:	f1b9 0f0e 	cmp.w	r9, #14
 800a08e:	f8d3 b000 	ldr.w	fp, [r3]
 800a092:	f200 80e6 	bhi.w	800a262 <_dtoa_r+0x43a>
 800a096:	2d00      	cmp	r5, #0
 800a098:	f000 80e3 	beq.w	800a262 <_dtoa_r+0x43a>
 800a09c:	ed9d 7b00 	vldr	d7, [sp]
 800a0a0:	f1ba 0f00 	cmp.w	sl, #0
 800a0a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a0a8:	dd74      	ble.n	800a194 <_dtoa_r+0x36c>
 800a0aa:	4a2a      	ldr	r2, [pc, #168]	; (800a154 <_dtoa_r+0x32c>)
 800a0ac:	f00a 030f 	and.w	r3, sl, #15
 800a0b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0b4:	ed93 7b00 	vldr	d7, [r3]
 800a0b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a0bc:	06f0      	lsls	r0, r6, #27
 800a0be:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a0c2:	d565      	bpl.n	800a190 <_dtoa_r+0x368>
 800a0c4:	4b24      	ldr	r3, [pc, #144]	; (800a158 <_dtoa_r+0x330>)
 800a0c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0ce:	f7f6 fbbd 	bl	800084c <__aeabi_ddiv>
 800a0d2:	e9cd 0100 	strd	r0, r1, [sp]
 800a0d6:	f006 060f 	and.w	r6, r6, #15
 800a0da:	2503      	movs	r5, #3
 800a0dc:	4f1e      	ldr	r7, [pc, #120]	; (800a158 <_dtoa_r+0x330>)
 800a0de:	e04c      	b.n	800a17a <_dtoa_r+0x352>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0e6:	4453      	add	r3, sl
 800a0e8:	f103 0901 	add.w	r9, r3, #1
 800a0ec:	9302      	str	r3, [sp, #8]
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	bfb8      	it	lt
 800a0f4:	2301      	movlt	r3, #1
 800a0f6:	e7ba      	b.n	800a06e <_dtoa_r+0x246>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	e7b2      	b.n	800a062 <_dtoa_r+0x23a>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	e7f0      	b.n	800a0e2 <_dtoa_r+0x2ba>
 800a100:	2501      	movs	r5, #1
 800a102:	2300      	movs	r3, #0
 800a104:	9306      	str	r3, [sp, #24]
 800a106:	950a      	str	r5, [sp, #40]	; 0x28
 800a108:	f04f 33ff 	mov.w	r3, #4294967295
 800a10c:	9302      	str	r3, [sp, #8]
 800a10e:	4699      	mov	r9, r3
 800a110:	2200      	movs	r2, #0
 800a112:	2312      	movs	r3, #18
 800a114:	920b      	str	r2, [sp, #44]	; 0x2c
 800a116:	e7aa      	b.n	800a06e <_dtoa_r+0x246>
 800a118:	2301      	movs	r3, #1
 800a11a:	930a      	str	r3, [sp, #40]	; 0x28
 800a11c:	e7f4      	b.n	800a108 <_dtoa_r+0x2e0>
 800a11e:	2301      	movs	r3, #1
 800a120:	9302      	str	r3, [sp, #8]
 800a122:	4699      	mov	r9, r3
 800a124:	461a      	mov	r2, r3
 800a126:	e7f5      	b.n	800a114 <_dtoa_r+0x2ec>
 800a128:	3101      	adds	r1, #1
 800a12a:	6071      	str	r1, [r6, #4]
 800a12c:	0052      	lsls	r2, r2, #1
 800a12e:	e7a2      	b.n	800a076 <_dtoa_r+0x24e>
 800a130:	636f4361 	.word	0x636f4361
 800a134:	3fd287a7 	.word	0x3fd287a7
 800a138:	8b60c8b3 	.word	0x8b60c8b3
 800a13c:	3fc68a28 	.word	0x3fc68a28
 800a140:	509f79fb 	.word	0x509f79fb
 800a144:	3fd34413 	.word	0x3fd34413
 800a148:	7ff00000 	.word	0x7ff00000
 800a14c:	0800b399 	.word	0x0800b399
 800a150:	3ff80000 	.word	0x3ff80000
 800a154:	0800b3f8 	.word	0x0800b3f8
 800a158:	0800b3d0 	.word	0x0800b3d0
 800a15c:	0800b3c5 	.word	0x0800b3c5
 800a160:	07f1      	lsls	r1, r6, #31
 800a162:	d508      	bpl.n	800a176 <_dtoa_r+0x34e>
 800a164:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a16c:	f7f6 fa44 	bl	80005f8 <__aeabi_dmul>
 800a170:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a174:	3501      	adds	r5, #1
 800a176:	1076      	asrs	r6, r6, #1
 800a178:	3708      	adds	r7, #8
 800a17a:	2e00      	cmp	r6, #0
 800a17c:	d1f0      	bne.n	800a160 <_dtoa_r+0x338>
 800a17e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a182:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a186:	f7f6 fb61 	bl	800084c <__aeabi_ddiv>
 800a18a:	e9cd 0100 	strd	r0, r1, [sp]
 800a18e:	e01a      	b.n	800a1c6 <_dtoa_r+0x39e>
 800a190:	2502      	movs	r5, #2
 800a192:	e7a3      	b.n	800a0dc <_dtoa_r+0x2b4>
 800a194:	f000 80a0 	beq.w	800a2d8 <_dtoa_r+0x4b0>
 800a198:	f1ca 0600 	rsb	r6, sl, #0
 800a19c:	4b9f      	ldr	r3, [pc, #636]	; (800a41c <_dtoa_r+0x5f4>)
 800a19e:	4fa0      	ldr	r7, [pc, #640]	; (800a420 <_dtoa_r+0x5f8>)
 800a1a0:	f006 020f 	and.w	r2, r6, #15
 800a1a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1b0:	f7f6 fa22 	bl	80005f8 <__aeabi_dmul>
 800a1b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a1b8:	1136      	asrs	r6, r6, #4
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2502      	movs	r5, #2
 800a1be:	2e00      	cmp	r6, #0
 800a1c0:	d17f      	bne.n	800a2c2 <_dtoa_r+0x49a>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1e1      	bne.n	800a18a <_dtoa_r+0x362>
 800a1c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f000 8087 	beq.w	800a2dc <_dtoa_r+0x4b4>
 800a1ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	4b93      	ldr	r3, [pc, #588]	; (800a424 <_dtoa_r+0x5fc>)
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	4639      	mov	r1, r7
 800a1da:	f7f6 fc7f 	bl	8000adc <__aeabi_dcmplt>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d07c      	beq.n	800a2dc <_dtoa_r+0x4b4>
 800a1e2:	f1b9 0f00 	cmp.w	r9, #0
 800a1e6:	d079      	beq.n	800a2dc <_dtoa_r+0x4b4>
 800a1e8:	9b02      	ldr	r3, [sp, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	dd35      	ble.n	800a25a <_dtoa_r+0x432>
 800a1ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a1f2:	9308      	str	r3, [sp, #32]
 800a1f4:	4639      	mov	r1, r7
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4b8b      	ldr	r3, [pc, #556]	; (800a428 <_dtoa_r+0x600>)
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7f6 f9fc 	bl	80005f8 <__aeabi_dmul>
 800a200:	e9cd 0100 	strd	r0, r1, [sp]
 800a204:	9f02      	ldr	r7, [sp, #8]
 800a206:	3501      	adds	r5, #1
 800a208:	4628      	mov	r0, r5
 800a20a:	f7f6 f98b 	bl	8000524 <__aeabi_i2d>
 800a20e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a212:	f7f6 f9f1 	bl	80005f8 <__aeabi_dmul>
 800a216:	2200      	movs	r2, #0
 800a218:	4b84      	ldr	r3, [pc, #528]	; (800a42c <_dtoa_r+0x604>)
 800a21a:	f7f6 f837 	bl	800028c <__adddf3>
 800a21e:	4605      	mov	r5, r0
 800a220:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a224:	2f00      	cmp	r7, #0
 800a226:	d15d      	bne.n	800a2e4 <_dtoa_r+0x4bc>
 800a228:	2200      	movs	r2, #0
 800a22a:	4b81      	ldr	r3, [pc, #516]	; (800a430 <_dtoa_r+0x608>)
 800a22c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a230:	f7f6 f82a 	bl	8000288 <__aeabi_dsub>
 800a234:	462a      	mov	r2, r5
 800a236:	4633      	mov	r3, r6
 800a238:	e9cd 0100 	strd	r0, r1, [sp]
 800a23c:	f7f6 fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 800a240:	2800      	cmp	r0, #0
 800a242:	f040 8288 	bne.w	800a756 <_dtoa_r+0x92e>
 800a246:	462a      	mov	r2, r5
 800a248:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a24c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a250:	f7f6 fc44 	bl	8000adc <__aeabi_dcmplt>
 800a254:	2800      	cmp	r0, #0
 800a256:	f040 827c 	bne.w	800a752 <_dtoa_r+0x92a>
 800a25a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a25e:	e9cd 2300 	strd	r2, r3, [sp]
 800a262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a264:	2b00      	cmp	r3, #0
 800a266:	f2c0 8150 	blt.w	800a50a <_dtoa_r+0x6e2>
 800a26a:	f1ba 0f0e 	cmp.w	sl, #14
 800a26e:	f300 814c 	bgt.w	800a50a <_dtoa_r+0x6e2>
 800a272:	4b6a      	ldr	r3, [pc, #424]	; (800a41c <_dtoa_r+0x5f4>)
 800a274:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a278:	ed93 7b00 	vldr	d7, [r3]
 800a27c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a284:	f280 80d8 	bge.w	800a438 <_dtoa_r+0x610>
 800a288:	f1b9 0f00 	cmp.w	r9, #0
 800a28c:	f300 80d4 	bgt.w	800a438 <_dtoa_r+0x610>
 800a290:	f040 825e 	bne.w	800a750 <_dtoa_r+0x928>
 800a294:	2200      	movs	r2, #0
 800a296:	4b66      	ldr	r3, [pc, #408]	; (800a430 <_dtoa_r+0x608>)
 800a298:	ec51 0b17 	vmov	r0, r1, d7
 800a29c:	f7f6 f9ac 	bl	80005f8 <__aeabi_dmul>
 800a2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2a4:	f7f6 fc2e 	bl	8000b04 <__aeabi_dcmpge>
 800a2a8:	464f      	mov	r7, r9
 800a2aa:	464e      	mov	r6, r9
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	f040 8234 	bne.w	800a71a <_dtoa_r+0x8f2>
 800a2b2:	2331      	movs	r3, #49	; 0x31
 800a2b4:	f10b 0501 	add.w	r5, fp, #1
 800a2b8:	f88b 3000 	strb.w	r3, [fp]
 800a2bc:	f10a 0a01 	add.w	sl, sl, #1
 800a2c0:	e22f      	b.n	800a722 <_dtoa_r+0x8fa>
 800a2c2:	07f2      	lsls	r2, r6, #31
 800a2c4:	d505      	bpl.n	800a2d2 <_dtoa_r+0x4aa>
 800a2c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ca:	f7f6 f995 	bl	80005f8 <__aeabi_dmul>
 800a2ce:	3501      	adds	r5, #1
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	1076      	asrs	r6, r6, #1
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	e772      	b.n	800a1be <_dtoa_r+0x396>
 800a2d8:	2502      	movs	r5, #2
 800a2da:	e774      	b.n	800a1c6 <_dtoa_r+0x39e>
 800a2dc:	f8cd a020 	str.w	sl, [sp, #32]
 800a2e0:	464f      	mov	r7, r9
 800a2e2:	e791      	b.n	800a208 <_dtoa_r+0x3e0>
 800a2e4:	4b4d      	ldr	r3, [pc, #308]	; (800a41c <_dtoa_r+0x5f4>)
 800a2e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d047      	beq.n	800a384 <_dtoa_r+0x55c>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	494e      	ldr	r1, [pc, #312]	; (800a434 <_dtoa_r+0x60c>)
 800a2fc:	f7f6 faa6 	bl	800084c <__aeabi_ddiv>
 800a300:	462a      	mov	r2, r5
 800a302:	4633      	mov	r3, r6
 800a304:	f7f5 ffc0 	bl	8000288 <__aeabi_dsub>
 800a308:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a30c:	465d      	mov	r5, fp
 800a30e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a312:	f7f6 fc21 	bl	8000b58 <__aeabi_d2iz>
 800a316:	4606      	mov	r6, r0
 800a318:	f7f6 f904 	bl	8000524 <__aeabi_i2d>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a324:	f7f5 ffb0 	bl	8000288 <__aeabi_dsub>
 800a328:	3630      	adds	r6, #48	; 0x30
 800a32a:	f805 6b01 	strb.w	r6, [r5], #1
 800a32e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a332:	e9cd 0100 	strd	r0, r1, [sp]
 800a336:	f7f6 fbd1 	bl	8000adc <__aeabi_dcmplt>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d163      	bne.n	800a406 <_dtoa_r+0x5de>
 800a33e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a342:	2000      	movs	r0, #0
 800a344:	4937      	ldr	r1, [pc, #220]	; (800a424 <_dtoa_r+0x5fc>)
 800a346:	f7f5 ff9f 	bl	8000288 <__aeabi_dsub>
 800a34a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a34e:	f7f6 fbc5 	bl	8000adc <__aeabi_dcmplt>
 800a352:	2800      	cmp	r0, #0
 800a354:	f040 80b7 	bne.w	800a4c6 <_dtoa_r+0x69e>
 800a358:	eba5 030b 	sub.w	r3, r5, fp
 800a35c:	429f      	cmp	r7, r3
 800a35e:	f77f af7c 	ble.w	800a25a <_dtoa_r+0x432>
 800a362:	2200      	movs	r2, #0
 800a364:	4b30      	ldr	r3, [pc, #192]	; (800a428 <_dtoa_r+0x600>)
 800a366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a36a:	f7f6 f945 	bl	80005f8 <__aeabi_dmul>
 800a36e:	2200      	movs	r2, #0
 800a370:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a374:	4b2c      	ldr	r3, [pc, #176]	; (800a428 <_dtoa_r+0x600>)
 800a376:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a37a:	f7f6 f93d 	bl	80005f8 <__aeabi_dmul>
 800a37e:	e9cd 0100 	strd	r0, r1, [sp]
 800a382:	e7c4      	b.n	800a30e <_dtoa_r+0x4e6>
 800a384:	462a      	mov	r2, r5
 800a386:	4633      	mov	r3, r6
 800a388:	f7f6 f936 	bl	80005f8 <__aeabi_dmul>
 800a38c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a390:	eb0b 0507 	add.w	r5, fp, r7
 800a394:	465e      	mov	r6, fp
 800a396:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a39a:	f7f6 fbdd 	bl	8000b58 <__aeabi_d2iz>
 800a39e:	4607      	mov	r7, r0
 800a3a0:	f7f6 f8c0 	bl	8000524 <__aeabi_i2d>
 800a3a4:	3730      	adds	r7, #48	; 0x30
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3ae:	f7f5 ff6b 	bl	8000288 <__aeabi_dsub>
 800a3b2:	f806 7b01 	strb.w	r7, [r6], #1
 800a3b6:	42ae      	cmp	r6, r5
 800a3b8:	e9cd 0100 	strd	r0, r1, [sp]
 800a3bc:	f04f 0200 	mov.w	r2, #0
 800a3c0:	d126      	bne.n	800a410 <_dtoa_r+0x5e8>
 800a3c2:	4b1c      	ldr	r3, [pc, #112]	; (800a434 <_dtoa_r+0x60c>)
 800a3c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3c8:	f7f5 ff60 	bl	800028c <__adddf3>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3d4:	f7f6 fba0 	bl	8000b18 <__aeabi_dcmpgt>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d174      	bne.n	800a4c6 <_dtoa_r+0x69e>
 800a3dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	4914      	ldr	r1, [pc, #80]	; (800a434 <_dtoa_r+0x60c>)
 800a3e4:	f7f5 ff50 	bl	8000288 <__aeabi_dsub>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3f0:	f7f6 fb74 	bl	8000adc <__aeabi_dcmplt>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f43f af30 	beq.w	800a25a <_dtoa_r+0x432>
 800a3fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3fe:	2b30      	cmp	r3, #48	; 0x30
 800a400:	f105 32ff 	add.w	r2, r5, #4294967295
 800a404:	d002      	beq.n	800a40c <_dtoa_r+0x5e4>
 800a406:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a40a:	e04a      	b.n	800a4a2 <_dtoa_r+0x67a>
 800a40c:	4615      	mov	r5, r2
 800a40e:	e7f4      	b.n	800a3fa <_dtoa_r+0x5d2>
 800a410:	4b05      	ldr	r3, [pc, #20]	; (800a428 <_dtoa_r+0x600>)
 800a412:	f7f6 f8f1 	bl	80005f8 <__aeabi_dmul>
 800a416:	e9cd 0100 	strd	r0, r1, [sp]
 800a41a:	e7bc      	b.n	800a396 <_dtoa_r+0x56e>
 800a41c:	0800b3f8 	.word	0x0800b3f8
 800a420:	0800b3d0 	.word	0x0800b3d0
 800a424:	3ff00000 	.word	0x3ff00000
 800a428:	40240000 	.word	0x40240000
 800a42c:	401c0000 	.word	0x401c0000
 800a430:	40140000 	.word	0x40140000
 800a434:	3fe00000 	.word	0x3fe00000
 800a438:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a43c:	465d      	mov	r5, fp
 800a43e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	f7f6 fa01 	bl	800084c <__aeabi_ddiv>
 800a44a:	f7f6 fb85 	bl	8000b58 <__aeabi_d2iz>
 800a44e:	4680      	mov	r8, r0
 800a450:	f7f6 f868 	bl	8000524 <__aeabi_i2d>
 800a454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a468:	f7f5 ff0e 	bl	8000288 <__aeabi_dsub>
 800a46c:	f805 6b01 	strb.w	r6, [r5], #1
 800a470:	eba5 060b 	sub.w	r6, r5, fp
 800a474:	45b1      	cmp	r9, r6
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	d139      	bne.n	800a4f0 <_dtoa_r+0x6c8>
 800a47c:	f7f5 ff06 	bl	800028c <__adddf3>
 800a480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a484:	4606      	mov	r6, r0
 800a486:	460f      	mov	r7, r1
 800a488:	f7f6 fb46 	bl	8000b18 <__aeabi_dcmpgt>
 800a48c:	b9c8      	cbnz	r0, 800a4c2 <_dtoa_r+0x69a>
 800a48e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a492:	4630      	mov	r0, r6
 800a494:	4639      	mov	r1, r7
 800a496:	f7f6 fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800a49a:	b110      	cbz	r0, 800a4a2 <_dtoa_r+0x67a>
 800a49c:	f018 0f01 	tst.w	r8, #1
 800a4a0:	d10f      	bne.n	800a4c2 <_dtoa_r+0x69a>
 800a4a2:	9904      	ldr	r1, [sp, #16]
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 fabb 	bl	800aa20 <_Bfree>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4ae:	702b      	strb	r3, [r5, #0]
 800a4b0:	f10a 0301 	add.w	r3, sl, #1
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 8241 	beq.w	800a940 <_dtoa_r+0xb18>
 800a4be:	601d      	str	r5, [r3, #0]
 800a4c0:	e23e      	b.n	800a940 <_dtoa_r+0xb18>
 800a4c2:	f8cd a020 	str.w	sl, [sp, #32]
 800a4c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4ca:	2a39      	cmp	r2, #57	; 0x39
 800a4cc:	f105 33ff 	add.w	r3, r5, #4294967295
 800a4d0:	d108      	bne.n	800a4e4 <_dtoa_r+0x6bc>
 800a4d2:	459b      	cmp	fp, r3
 800a4d4:	d10a      	bne.n	800a4ec <_dtoa_r+0x6c4>
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	9308      	str	r3, [sp, #32]
 800a4dc:	2330      	movs	r3, #48	; 0x30
 800a4de:	f88b 3000 	strb.w	r3, [fp]
 800a4e2:	465b      	mov	r3, fp
 800a4e4:	781a      	ldrb	r2, [r3, #0]
 800a4e6:	3201      	adds	r2, #1
 800a4e8:	701a      	strb	r2, [r3, #0]
 800a4ea:	e78c      	b.n	800a406 <_dtoa_r+0x5de>
 800a4ec:	461d      	mov	r5, r3
 800a4ee:	e7ea      	b.n	800a4c6 <_dtoa_r+0x69e>
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	4b9b      	ldr	r3, [pc, #620]	; (800a760 <_dtoa_r+0x938>)
 800a4f4:	f7f6 f880 	bl	80005f8 <__aeabi_dmul>
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	460f      	mov	r7, r1
 800a500:	f7f6 fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a504:	2800      	cmp	r0, #0
 800a506:	d09a      	beq.n	800a43e <_dtoa_r+0x616>
 800a508:	e7cb      	b.n	800a4a2 <_dtoa_r+0x67a>
 800a50a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a50c:	2a00      	cmp	r2, #0
 800a50e:	f000 808b 	beq.w	800a628 <_dtoa_r+0x800>
 800a512:	9a06      	ldr	r2, [sp, #24]
 800a514:	2a01      	cmp	r2, #1
 800a516:	dc6e      	bgt.n	800a5f6 <_dtoa_r+0x7ce>
 800a518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a51a:	2a00      	cmp	r2, #0
 800a51c:	d067      	beq.n	800a5ee <_dtoa_r+0x7c6>
 800a51e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a522:	9f07      	ldr	r7, [sp, #28]
 800a524:	9d05      	ldr	r5, [sp, #20]
 800a526:	9a05      	ldr	r2, [sp, #20]
 800a528:	2101      	movs	r1, #1
 800a52a:	441a      	add	r2, r3
 800a52c:	4620      	mov	r0, r4
 800a52e:	9205      	str	r2, [sp, #20]
 800a530:	4498      	add	r8, r3
 800a532:	f000 fb15 	bl	800ab60 <__i2b>
 800a536:	4606      	mov	r6, r0
 800a538:	2d00      	cmp	r5, #0
 800a53a:	dd0c      	ble.n	800a556 <_dtoa_r+0x72e>
 800a53c:	f1b8 0f00 	cmp.w	r8, #0
 800a540:	dd09      	ble.n	800a556 <_dtoa_r+0x72e>
 800a542:	4545      	cmp	r5, r8
 800a544:	9a05      	ldr	r2, [sp, #20]
 800a546:	462b      	mov	r3, r5
 800a548:	bfa8      	it	ge
 800a54a:	4643      	movge	r3, r8
 800a54c:	1ad2      	subs	r2, r2, r3
 800a54e:	9205      	str	r2, [sp, #20]
 800a550:	1aed      	subs	r5, r5, r3
 800a552:	eba8 0803 	sub.w	r8, r8, r3
 800a556:	9b07      	ldr	r3, [sp, #28]
 800a558:	b1eb      	cbz	r3, 800a596 <_dtoa_r+0x76e>
 800a55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d067      	beq.n	800a630 <_dtoa_r+0x808>
 800a560:	b18f      	cbz	r7, 800a586 <_dtoa_r+0x75e>
 800a562:	4631      	mov	r1, r6
 800a564:	463a      	mov	r2, r7
 800a566:	4620      	mov	r0, r4
 800a568:	f000 fb9a 	bl	800aca0 <__pow5mult>
 800a56c:	9a04      	ldr	r2, [sp, #16]
 800a56e:	4601      	mov	r1, r0
 800a570:	4606      	mov	r6, r0
 800a572:	4620      	mov	r0, r4
 800a574:	f000 fafd 	bl	800ab72 <__multiply>
 800a578:	9904      	ldr	r1, [sp, #16]
 800a57a:	9008      	str	r0, [sp, #32]
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 fa4f 	bl	800aa20 <_Bfree>
 800a582:	9b08      	ldr	r3, [sp, #32]
 800a584:	9304      	str	r3, [sp, #16]
 800a586:	9b07      	ldr	r3, [sp, #28]
 800a588:	1bda      	subs	r2, r3, r7
 800a58a:	d004      	beq.n	800a596 <_dtoa_r+0x76e>
 800a58c:	9904      	ldr	r1, [sp, #16]
 800a58e:	4620      	mov	r0, r4
 800a590:	f000 fb86 	bl	800aca0 <__pow5mult>
 800a594:	9004      	str	r0, [sp, #16]
 800a596:	2101      	movs	r1, #1
 800a598:	4620      	mov	r0, r4
 800a59a:	f000 fae1 	bl	800ab60 <__i2b>
 800a59e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 81d0 	beq.w	800a948 <_dtoa_r+0xb20>
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f000 fb77 	bl	800aca0 <__pow5mult>
 800a5b2:	9b06      	ldr	r3, [sp, #24]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	4607      	mov	r7, r0
 800a5b8:	dc40      	bgt.n	800a63c <_dtoa_r+0x814>
 800a5ba:	9b00      	ldr	r3, [sp, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d139      	bne.n	800a634 <_dtoa_r+0x80c>
 800a5c0:	9b01      	ldr	r3, [sp, #4]
 800a5c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d136      	bne.n	800a638 <_dtoa_r+0x810>
 800a5ca:	9b01      	ldr	r3, [sp, #4]
 800a5cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5d0:	0d1b      	lsrs	r3, r3, #20
 800a5d2:	051b      	lsls	r3, r3, #20
 800a5d4:	b12b      	cbz	r3, 800a5e2 <_dtoa_r+0x7ba>
 800a5d6:	9b05      	ldr	r3, [sp, #20]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	9305      	str	r3, [sp, #20]
 800a5dc:	f108 0801 	add.w	r8, r8, #1
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	9307      	str	r3, [sp, #28]
 800a5e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d12a      	bne.n	800a640 <_dtoa_r+0x818>
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	e030      	b.n	800a650 <_dtoa_r+0x828>
 800a5ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5f4:	e795      	b.n	800a522 <_dtoa_r+0x6fa>
 800a5f6:	9b07      	ldr	r3, [sp, #28]
 800a5f8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a5fc:	42bb      	cmp	r3, r7
 800a5fe:	bfbf      	itttt	lt
 800a600:	9b07      	ldrlt	r3, [sp, #28]
 800a602:	9707      	strlt	r7, [sp, #28]
 800a604:	1afa      	sublt	r2, r7, r3
 800a606:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a608:	bfbb      	ittet	lt
 800a60a:	189b      	addlt	r3, r3, r2
 800a60c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a60e:	1bdf      	subge	r7, r3, r7
 800a610:	2700      	movlt	r7, #0
 800a612:	f1b9 0f00 	cmp.w	r9, #0
 800a616:	bfb5      	itete	lt
 800a618:	9b05      	ldrlt	r3, [sp, #20]
 800a61a:	9d05      	ldrge	r5, [sp, #20]
 800a61c:	eba3 0509 	sublt.w	r5, r3, r9
 800a620:	464b      	movge	r3, r9
 800a622:	bfb8      	it	lt
 800a624:	2300      	movlt	r3, #0
 800a626:	e77e      	b.n	800a526 <_dtoa_r+0x6fe>
 800a628:	9f07      	ldr	r7, [sp, #28]
 800a62a:	9d05      	ldr	r5, [sp, #20]
 800a62c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a62e:	e783      	b.n	800a538 <_dtoa_r+0x710>
 800a630:	9a07      	ldr	r2, [sp, #28]
 800a632:	e7ab      	b.n	800a58c <_dtoa_r+0x764>
 800a634:	2300      	movs	r3, #0
 800a636:	e7d4      	b.n	800a5e2 <_dtoa_r+0x7ba>
 800a638:	9b00      	ldr	r3, [sp, #0]
 800a63a:	e7d2      	b.n	800a5e2 <_dtoa_r+0x7ba>
 800a63c:	2300      	movs	r3, #0
 800a63e:	9307      	str	r3, [sp, #28]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a646:	6918      	ldr	r0, [r3, #16]
 800a648:	f000 fa3c 	bl	800aac4 <__hi0bits>
 800a64c:	f1c0 0020 	rsb	r0, r0, #32
 800a650:	4440      	add	r0, r8
 800a652:	f010 001f 	ands.w	r0, r0, #31
 800a656:	d047      	beq.n	800a6e8 <_dtoa_r+0x8c0>
 800a658:	f1c0 0320 	rsb	r3, r0, #32
 800a65c:	2b04      	cmp	r3, #4
 800a65e:	dd3b      	ble.n	800a6d8 <_dtoa_r+0x8b0>
 800a660:	9b05      	ldr	r3, [sp, #20]
 800a662:	f1c0 001c 	rsb	r0, r0, #28
 800a666:	4403      	add	r3, r0
 800a668:	9305      	str	r3, [sp, #20]
 800a66a:	4405      	add	r5, r0
 800a66c:	4480      	add	r8, r0
 800a66e:	9b05      	ldr	r3, [sp, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	dd05      	ble.n	800a680 <_dtoa_r+0x858>
 800a674:	461a      	mov	r2, r3
 800a676:	9904      	ldr	r1, [sp, #16]
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 fb5f 	bl	800ad3c <__lshift>
 800a67e:	9004      	str	r0, [sp, #16]
 800a680:	f1b8 0f00 	cmp.w	r8, #0
 800a684:	dd05      	ble.n	800a692 <_dtoa_r+0x86a>
 800a686:	4639      	mov	r1, r7
 800a688:	4642      	mov	r2, r8
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 fb56 	bl	800ad3c <__lshift>
 800a690:	4607      	mov	r7, r0
 800a692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a694:	b353      	cbz	r3, 800a6ec <_dtoa_r+0x8c4>
 800a696:	4639      	mov	r1, r7
 800a698:	9804      	ldr	r0, [sp, #16]
 800a69a:	f000 fba3 	bl	800ade4 <__mcmp>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	da24      	bge.n	800a6ec <_dtoa_r+0x8c4>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	220a      	movs	r2, #10
 800a6a6:	9904      	ldr	r1, [sp, #16]
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 f9d0 	bl	800aa4e <__multadd>
 800a6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b0:	9004      	str	r0, [sp, #16]
 800a6b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 814d 	beq.w	800a956 <_dtoa_r+0xb2e>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	4631      	mov	r1, r6
 800a6c0:	220a      	movs	r2, #10
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f000 f9c3 	bl	800aa4e <__multadd>
 800a6c8:	9b02      	ldr	r3, [sp, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	dc4f      	bgt.n	800a770 <_dtoa_r+0x948>
 800a6d0:	9b06      	ldr	r3, [sp, #24]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	dd4c      	ble.n	800a770 <_dtoa_r+0x948>
 800a6d6:	e011      	b.n	800a6fc <_dtoa_r+0x8d4>
 800a6d8:	d0c9      	beq.n	800a66e <_dtoa_r+0x846>
 800a6da:	9a05      	ldr	r2, [sp, #20]
 800a6dc:	331c      	adds	r3, #28
 800a6de:	441a      	add	r2, r3
 800a6e0:	9205      	str	r2, [sp, #20]
 800a6e2:	441d      	add	r5, r3
 800a6e4:	4498      	add	r8, r3
 800a6e6:	e7c2      	b.n	800a66e <_dtoa_r+0x846>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	e7f6      	b.n	800a6da <_dtoa_r+0x8b2>
 800a6ec:	f1b9 0f00 	cmp.w	r9, #0
 800a6f0:	dc38      	bgt.n	800a764 <_dtoa_r+0x93c>
 800a6f2:	9b06      	ldr	r3, [sp, #24]
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	dd35      	ble.n	800a764 <_dtoa_r+0x93c>
 800a6f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a6fc:	9b02      	ldr	r3, [sp, #8]
 800a6fe:	b963      	cbnz	r3, 800a71a <_dtoa_r+0x8f2>
 800a700:	4639      	mov	r1, r7
 800a702:	2205      	movs	r2, #5
 800a704:	4620      	mov	r0, r4
 800a706:	f000 f9a2 	bl	800aa4e <__multadd>
 800a70a:	4601      	mov	r1, r0
 800a70c:	4607      	mov	r7, r0
 800a70e:	9804      	ldr	r0, [sp, #16]
 800a710:	f000 fb68 	bl	800ade4 <__mcmp>
 800a714:	2800      	cmp	r0, #0
 800a716:	f73f adcc 	bgt.w	800a2b2 <_dtoa_r+0x48a>
 800a71a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a71c:	465d      	mov	r5, fp
 800a71e:	ea6f 0a03 	mvn.w	sl, r3
 800a722:	f04f 0900 	mov.w	r9, #0
 800a726:	4639      	mov	r1, r7
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 f979 	bl	800aa20 <_Bfree>
 800a72e:	2e00      	cmp	r6, #0
 800a730:	f43f aeb7 	beq.w	800a4a2 <_dtoa_r+0x67a>
 800a734:	f1b9 0f00 	cmp.w	r9, #0
 800a738:	d005      	beq.n	800a746 <_dtoa_r+0x91e>
 800a73a:	45b1      	cmp	r9, r6
 800a73c:	d003      	beq.n	800a746 <_dtoa_r+0x91e>
 800a73e:	4649      	mov	r1, r9
 800a740:	4620      	mov	r0, r4
 800a742:	f000 f96d 	bl	800aa20 <_Bfree>
 800a746:	4631      	mov	r1, r6
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 f969 	bl	800aa20 <_Bfree>
 800a74e:	e6a8      	b.n	800a4a2 <_dtoa_r+0x67a>
 800a750:	2700      	movs	r7, #0
 800a752:	463e      	mov	r6, r7
 800a754:	e7e1      	b.n	800a71a <_dtoa_r+0x8f2>
 800a756:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a75a:	463e      	mov	r6, r7
 800a75c:	e5a9      	b.n	800a2b2 <_dtoa_r+0x48a>
 800a75e:	bf00      	nop
 800a760:	40240000 	.word	0x40240000
 800a764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a766:	f8cd 9008 	str.w	r9, [sp, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 80fa 	beq.w	800a964 <_dtoa_r+0xb3c>
 800a770:	2d00      	cmp	r5, #0
 800a772:	dd05      	ble.n	800a780 <_dtoa_r+0x958>
 800a774:	4631      	mov	r1, r6
 800a776:	462a      	mov	r2, r5
 800a778:	4620      	mov	r0, r4
 800a77a:	f000 fadf 	bl	800ad3c <__lshift>
 800a77e:	4606      	mov	r6, r0
 800a780:	9b07      	ldr	r3, [sp, #28]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d04c      	beq.n	800a820 <_dtoa_r+0x9f8>
 800a786:	6871      	ldr	r1, [r6, #4]
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 f915 	bl	800a9b8 <_Balloc>
 800a78e:	6932      	ldr	r2, [r6, #16]
 800a790:	3202      	adds	r2, #2
 800a792:	4605      	mov	r5, r0
 800a794:	0092      	lsls	r2, r2, #2
 800a796:	f106 010c 	add.w	r1, r6, #12
 800a79a:	300c      	adds	r0, #12
 800a79c:	f7fe fd70 	bl	8009280 <memcpy>
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f000 fac9 	bl	800ad3c <__lshift>
 800a7aa:	9b00      	ldr	r3, [sp, #0]
 800a7ac:	f8cd b014 	str.w	fp, [sp, #20]
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	46b1      	mov	r9, r6
 800a7b6:	9307      	str	r3, [sp, #28]
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	9804      	ldr	r0, [sp, #16]
 800a7be:	f7ff faa7 	bl	8009d10 <quorem>
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a7ca:	9804      	ldr	r0, [sp, #16]
 800a7cc:	f000 fb0a 	bl	800ade4 <__mcmp>
 800a7d0:	4632      	mov	r2, r6
 800a7d2:	9000      	str	r0, [sp, #0]
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 fb1e 	bl	800ae18 <__mdiff>
 800a7dc:	68c3      	ldr	r3, [r0, #12]
 800a7de:	4602      	mov	r2, r0
 800a7e0:	bb03      	cbnz	r3, 800a824 <_dtoa_r+0x9fc>
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	9008      	str	r0, [sp, #32]
 800a7e6:	9804      	ldr	r0, [sp, #16]
 800a7e8:	f000 fafc 	bl	800ade4 <__mcmp>
 800a7ec:	9a08      	ldr	r2, [sp, #32]
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	9308      	str	r3, [sp, #32]
 800a7f6:	f000 f913 	bl	800aa20 <_Bfree>
 800a7fa:	9b08      	ldr	r3, [sp, #32]
 800a7fc:	b9a3      	cbnz	r3, 800a828 <_dtoa_r+0xa00>
 800a7fe:	9a06      	ldr	r2, [sp, #24]
 800a800:	b992      	cbnz	r2, 800a828 <_dtoa_r+0xa00>
 800a802:	9a07      	ldr	r2, [sp, #28]
 800a804:	b982      	cbnz	r2, 800a828 <_dtoa_r+0xa00>
 800a806:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a80a:	d029      	beq.n	800a860 <_dtoa_r+0xa38>
 800a80c:	9b00      	ldr	r3, [sp, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dd01      	ble.n	800a816 <_dtoa_r+0x9ee>
 800a812:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a816:	9b05      	ldr	r3, [sp, #20]
 800a818:	1c5d      	adds	r5, r3, #1
 800a81a:	f883 8000 	strb.w	r8, [r3]
 800a81e:	e782      	b.n	800a726 <_dtoa_r+0x8fe>
 800a820:	4630      	mov	r0, r6
 800a822:	e7c2      	b.n	800a7aa <_dtoa_r+0x982>
 800a824:	2301      	movs	r3, #1
 800a826:	e7e3      	b.n	800a7f0 <_dtoa_r+0x9c8>
 800a828:	9a00      	ldr	r2, [sp, #0]
 800a82a:	2a00      	cmp	r2, #0
 800a82c:	db04      	blt.n	800a838 <_dtoa_r+0xa10>
 800a82e:	d125      	bne.n	800a87c <_dtoa_r+0xa54>
 800a830:	9a06      	ldr	r2, [sp, #24]
 800a832:	bb1a      	cbnz	r2, 800a87c <_dtoa_r+0xa54>
 800a834:	9a07      	ldr	r2, [sp, #28]
 800a836:	bb0a      	cbnz	r2, 800a87c <_dtoa_r+0xa54>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	ddec      	ble.n	800a816 <_dtoa_r+0x9ee>
 800a83c:	2201      	movs	r2, #1
 800a83e:	9904      	ldr	r1, [sp, #16]
 800a840:	4620      	mov	r0, r4
 800a842:	f000 fa7b 	bl	800ad3c <__lshift>
 800a846:	4639      	mov	r1, r7
 800a848:	9004      	str	r0, [sp, #16]
 800a84a:	f000 facb 	bl	800ade4 <__mcmp>
 800a84e:	2800      	cmp	r0, #0
 800a850:	dc03      	bgt.n	800a85a <_dtoa_r+0xa32>
 800a852:	d1e0      	bne.n	800a816 <_dtoa_r+0x9ee>
 800a854:	f018 0f01 	tst.w	r8, #1
 800a858:	d0dd      	beq.n	800a816 <_dtoa_r+0x9ee>
 800a85a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a85e:	d1d8      	bne.n	800a812 <_dtoa_r+0x9ea>
 800a860:	9b05      	ldr	r3, [sp, #20]
 800a862:	9a05      	ldr	r2, [sp, #20]
 800a864:	1c5d      	adds	r5, r3, #1
 800a866:	2339      	movs	r3, #57	; 0x39
 800a868:	7013      	strb	r3, [r2, #0]
 800a86a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a86e:	2b39      	cmp	r3, #57	; 0x39
 800a870:	f105 32ff 	add.w	r2, r5, #4294967295
 800a874:	d04f      	beq.n	800a916 <_dtoa_r+0xaee>
 800a876:	3301      	adds	r3, #1
 800a878:	7013      	strb	r3, [r2, #0]
 800a87a:	e754      	b.n	800a726 <_dtoa_r+0x8fe>
 800a87c:	9a05      	ldr	r2, [sp, #20]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f102 0501 	add.w	r5, r2, #1
 800a884:	dd06      	ble.n	800a894 <_dtoa_r+0xa6c>
 800a886:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a88a:	d0e9      	beq.n	800a860 <_dtoa_r+0xa38>
 800a88c:	f108 0801 	add.w	r8, r8, #1
 800a890:	9b05      	ldr	r3, [sp, #20]
 800a892:	e7c2      	b.n	800a81a <_dtoa_r+0x9f2>
 800a894:	9a02      	ldr	r2, [sp, #8]
 800a896:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a89a:	eba5 030b 	sub.w	r3, r5, fp
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d021      	beq.n	800a8e6 <_dtoa_r+0xabe>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	220a      	movs	r2, #10
 800a8a6:	9904      	ldr	r1, [sp, #16]
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 f8d0 	bl	800aa4e <__multadd>
 800a8ae:	45b1      	cmp	r9, r6
 800a8b0:	9004      	str	r0, [sp, #16]
 800a8b2:	f04f 0300 	mov.w	r3, #0
 800a8b6:	f04f 020a 	mov.w	r2, #10
 800a8ba:	4649      	mov	r1, r9
 800a8bc:	4620      	mov	r0, r4
 800a8be:	d105      	bne.n	800a8cc <_dtoa_r+0xaa4>
 800a8c0:	f000 f8c5 	bl	800aa4e <__multadd>
 800a8c4:	4681      	mov	r9, r0
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	9505      	str	r5, [sp, #20]
 800a8ca:	e776      	b.n	800a7ba <_dtoa_r+0x992>
 800a8cc:	f000 f8bf 	bl	800aa4e <__multadd>
 800a8d0:	4631      	mov	r1, r6
 800a8d2:	4681      	mov	r9, r0
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	220a      	movs	r2, #10
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 f8b8 	bl	800aa4e <__multadd>
 800a8de:	4606      	mov	r6, r0
 800a8e0:	e7f2      	b.n	800a8c8 <_dtoa_r+0xaa0>
 800a8e2:	f04f 0900 	mov.w	r9, #0
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	9904      	ldr	r1, [sp, #16]
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 fa26 	bl	800ad3c <__lshift>
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	9004      	str	r0, [sp, #16]
 800a8f4:	f000 fa76 	bl	800ade4 <__mcmp>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	dcb6      	bgt.n	800a86a <_dtoa_r+0xa42>
 800a8fc:	d102      	bne.n	800a904 <_dtoa_r+0xadc>
 800a8fe:	f018 0f01 	tst.w	r8, #1
 800a902:	d1b2      	bne.n	800a86a <_dtoa_r+0xa42>
 800a904:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a908:	2b30      	cmp	r3, #48	; 0x30
 800a90a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a90e:	f47f af0a 	bne.w	800a726 <_dtoa_r+0x8fe>
 800a912:	4615      	mov	r5, r2
 800a914:	e7f6      	b.n	800a904 <_dtoa_r+0xadc>
 800a916:	4593      	cmp	fp, r2
 800a918:	d105      	bne.n	800a926 <_dtoa_r+0xafe>
 800a91a:	2331      	movs	r3, #49	; 0x31
 800a91c:	f10a 0a01 	add.w	sl, sl, #1
 800a920:	f88b 3000 	strb.w	r3, [fp]
 800a924:	e6ff      	b.n	800a726 <_dtoa_r+0x8fe>
 800a926:	4615      	mov	r5, r2
 800a928:	e79f      	b.n	800a86a <_dtoa_r+0xa42>
 800a92a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a990 <_dtoa_r+0xb68>
 800a92e:	e007      	b.n	800a940 <_dtoa_r+0xb18>
 800a930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a932:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a994 <_dtoa_r+0xb6c>
 800a936:	b11b      	cbz	r3, 800a940 <_dtoa_r+0xb18>
 800a938:	f10b 0308 	add.w	r3, fp, #8
 800a93c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	4658      	mov	r0, fp
 800a942:	b017      	add	sp, #92	; 0x5c
 800a944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a948:	9b06      	ldr	r3, [sp, #24]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	f77f ae35 	ble.w	800a5ba <_dtoa_r+0x792>
 800a950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a952:	9307      	str	r3, [sp, #28]
 800a954:	e649      	b.n	800a5ea <_dtoa_r+0x7c2>
 800a956:	9b02      	ldr	r3, [sp, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	dc03      	bgt.n	800a964 <_dtoa_r+0xb3c>
 800a95c:	9b06      	ldr	r3, [sp, #24]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	f73f aecc 	bgt.w	800a6fc <_dtoa_r+0x8d4>
 800a964:	465d      	mov	r5, fp
 800a966:	4639      	mov	r1, r7
 800a968:	9804      	ldr	r0, [sp, #16]
 800a96a:	f7ff f9d1 	bl	8009d10 <quorem>
 800a96e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a972:	f805 8b01 	strb.w	r8, [r5], #1
 800a976:	9a02      	ldr	r2, [sp, #8]
 800a978:	eba5 030b 	sub.w	r3, r5, fp
 800a97c:	429a      	cmp	r2, r3
 800a97e:	ddb0      	ble.n	800a8e2 <_dtoa_r+0xaba>
 800a980:	2300      	movs	r3, #0
 800a982:	220a      	movs	r2, #10
 800a984:	9904      	ldr	r1, [sp, #16]
 800a986:	4620      	mov	r0, r4
 800a988:	f000 f861 	bl	800aa4e <__multadd>
 800a98c:	9004      	str	r0, [sp, #16]
 800a98e:	e7ea      	b.n	800a966 <_dtoa_r+0xb3e>
 800a990:	0800b398 	.word	0x0800b398
 800a994:	0800b3bc 	.word	0x0800b3bc

0800a998 <_localeconv_r>:
 800a998:	4b04      	ldr	r3, [pc, #16]	; (800a9ac <_localeconv_r+0x14>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6a18      	ldr	r0, [r3, #32]
 800a99e:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <_localeconv_r+0x18>)
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	bf08      	it	eq
 800a9a4:	4618      	moveq	r0, r3
 800a9a6:	30f0      	adds	r0, #240	; 0xf0
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	20000194 	.word	0x20000194
 800a9b0:	200001f8 	.word	0x200001f8

0800a9b4 <__malloc_lock>:
 800a9b4:	4770      	bx	lr

0800a9b6 <__malloc_unlock>:
 800a9b6:	4770      	bx	lr

0800a9b8 <_Balloc>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a9bc:	4604      	mov	r4, r0
 800a9be:	460e      	mov	r6, r1
 800a9c0:	b93d      	cbnz	r5, 800a9d2 <_Balloc+0x1a>
 800a9c2:	2010      	movs	r0, #16
 800a9c4:	f7fe fc4c 	bl	8009260 <malloc>
 800a9c8:	6260      	str	r0, [r4, #36]	; 0x24
 800a9ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9ce:	6005      	str	r5, [r0, #0]
 800a9d0:	60c5      	str	r5, [r0, #12]
 800a9d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a9d4:	68eb      	ldr	r3, [r5, #12]
 800a9d6:	b183      	cbz	r3, 800a9fa <_Balloc+0x42>
 800a9d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a9e0:	b9b8      	cbnz	r0, 800aa12 <_Balloc+0x5a>
 800a9e2:	2101      	movs	r1, #1
 800a9e4:	fa01 f506 	lsl.w	r5, r1, r6
 800a9e8:	1d6a      	adds	r2, r5, #5
 800a9ea:	0092      	lsls	r2, r2, #2
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f000 fabf 	bl	800af70 <_calloc_r>
 800a9f2:	b160      	cbz	r0, 800aa0e <_Balloc+0x56>
 800a9f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a9f8:	e00e      	b.n	800aa18 <_Balloc+0x60>
 800a9fa:	2221      	movs	r2, #33	; 0x21
 800a9fc:	2104      	movs	r1, #4
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f000 fab6 	bl	800af70 <_calloc_r>
 800aa04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa06:	60e8      	str	r0, [r5, #12]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1e4      	bne.n	800a9d8 <_Balloc+0x20>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	bd70      	pop	{r4, r5, r6, pc}
 800aa12:	6802      	ldr	r2, [r0, #0]
 800aa14:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa1e:	e7f7      	b.n	800aa10 <_Balloc+0x58>

0800aa20 <_Bfree>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aa24:	4606      	mov	r6, r0
 800aa26:	460d      	mov	r5, r1
 800aa28:	b93c      	cbnz	r4, 800aa3a <_Bfree+0x1a>
 800aa2a:	2010      	movs	r0, #16
 800aa2c:	f7fe fc18 	bl	8009260 <malloc>
 800aa30:	6270      	str	r0, [r6, #36]	; 0x24
 800aa32:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa36:	6004      	str	r4, [r0, #0]
 800aa38:	60c4      	str	r4, [r0, #12]
 800aa3a:	b13d      	cbz	r5, 800aa4c <_Bfree+0x2c>
 800aa3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aa3e:	686a      	ldr	r2, [r5, #4]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa46:	6029      	str	r1, [r5, #0]
 800aa48:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aa4c:	bd70      	pop	{r4, r5, r6, pc}

0800aa4e <__multadd>:
 800aa4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa52:	690d      	ldr	r5, [r1, #16]
 800aa54:	461f      	mov	r7, r3
 800aa56:	4606      	mov	r6, r0
 800aa58:	460c      	mov	r4, r1
 800aa5a:	f101 0c14 	add.w	ip, r1, #20
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f8dc 0000 	ldr.w	r0, [ip]
 800aa64:	b281      	uxth	r1, r0
 800aa66:	fb02 7101 	mla	r1, r2, r1, r7
 800aa6a:	0c0f      	lsrs	r7, r1, #16
 800aa6c:	0c00      	lsrs	r0, r0, #16
 800aa6e:	fb02 7000 	mla	r0, r2, r0, r7
 800aa72:	b289      	uxth	r1, r1
 800aa74:	3301      	adds	r3, #1
 800aa76:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800aa7a:	429d      	cmp	r5, r3
 800aa7c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800aa80:	f84c 1b04 	str.w	r1, [ip], #4
 800aa84:	dcec      	bgt.n	800aa60 <__multadd+0x12>
 800aa86:	b1d7      	cbz	r7, 800aabe <__multadd+0x70>
 800aa88:	68a3      	ldr	r3, [r4, #8]
 800aa8a:	42ab      	cmp	r3, r5
 800aa8c:	dc12      	bgt.n	800aab4 <__multadd+0x66>
 800aa8e:	6861      	ldr	r1, [r4, #4]
 800aa90:	4630      	mov	r0, r6
 800aa92:	3101      	adds	r1, #1
 800aa94:	f7ff ff90 	bl	800a9b8 <_Balloc>
 800aa98:	6922      	ldr	r2, [r4, #16]
 800aa9a:	3202      	adds	r2, #2
 800aa9c:	f104 010c 	add.w	r1, r4, #12
 800aaa0:	4680      	mov	r8, r0
 800aaa2:	0092      	lsls	r2, r2, #2
 800aaa4:	300c      	adds	r0, #12
 800aaa6:	f7fe fbeb 	bl	8009280 <memcpy>
 800aaaa:	4621      	mov	r1, r4
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7ff ffb7 	bl	800aa20 <_Bfree>
 800aab2:	4644      	mov	r4, r8
 800aab4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aab8:	3501      	adds	r5, #1
 800aaba:	615f      	str	r7, [r3, #20]
 800aabc:	6125      	str	r5, [r4, #16]
 800aabe:	4620      	mov	r0, r4
 800aac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aac4 <__hi0bits>:
 800aac4:	0c02      	lsrs	r2, r0, #16
 800aac6:	0412      	lsls	r2, r2, #16
 800aac8:	4603      	mov	r3, r0
 800aaca:	b9b2      	cbnz	r2, 800aafa <__hi0bits+0x36>
 800aacc:	0403      	lsls	r3, r0, #16
 800aace:	2010      	movs	r0, #16
 800aad0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aad4:	bf04      	itt	eq
 800aad6:	021b      	lsleq	r3, r3, #8
 800aad8:	3008      	addeq	r0, #8
 800aada:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aade:	bf04      	itt	eq
 800aae0:	011b      	lsleq	r3, r3, #4
 800aae2:	3004      	addeq	r0, #4
 800aae4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aae8:	bf04      	itt	eq
 800aaea:	009b      	lsleq	r3, r3, #2
 800aaec:	3002      	addeq	r0, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	db06      	blt.n	800ab00 <__hi0bits+0x3c>
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	d503      	bpl.n	800aafe <__hi0bits+0x3a>
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	4770      	bx	lr
 800aafa:	2000      	movs	r0, #0
 800aafc:	e7e8      	b.n	800aad0 <__hi0bits+0xc>
 800aafe:	2020      	movs	r0, #32
 800ab00:	4770      	bx	lr

0800ab02 <__lo0bits>:
 800ab02:	6803      	ldr	r3, [r0, #0]
 800ab04:	f013 0207 	ands.w	r2, r3, #7
 800ab08:	4601      	mov	r1, r0
 800ab0a:	d00b      	beq.n	800ab24 <__lo0bits+0x22>
 800ab0c:	07da      	lsls	r2, r3, #31
 800ab0e:	d423      	bmi.n	800ab58 <__lo0bits+0x56>
 800ab10:	0798      	lsls	r0, r3, #30
 800ab12:	bf49      	itett	mi
 800ab14:	085b      	lsrmi	r3, r3, #1
 800ab16:	089b      	lsrpl	r3, r3, #2
 800ab18:	2001      	movmi	r0, #1
 800ab1a:	600b      	strmi	r3, [r1, #0]
 800ab1c:	bf5c      	itt	pl
 800ab1e:	600b      	strpl	r3, [r1, #0]
 800ab20:	2002      	movpl	r0, #2
 800ab22:	4770      	bx	lr
 800ab24:	b298      	uxth	r0, r3
 800ab26:	b9a8      	cbnz	r0, 800ab54 <__lo0bits+0x52>
 800ab28:	0c1b      	lsrs	r3, r3, #16
 800ab2a:	2010      	movs	r0, #16
 800ab2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ab30:	bf04      	itt	eq
 800ab32:	0a1b      	lsreq	r3, r3, #8
 800ab34:	3008      	addeq	r0, #8
 800ab36:	071a      	lsls	r2, r3, #28
 800ab38:	bf04      	itt	eq
 800ab3a:	091b      	lsreq	r3, r3, #4
 800ab3c:	3004      	addeq	r0, #4
 800ab3e:	079a      	lsls	r2, r3, #30
 800ab40:	bf04      	itt	eq
 800ab42:	089b      	lsreq	r3, r3, #2
 800ab44:	3002      	addeq	r0, #2
 800ab46:	07da      	lsls	r2, r3, #31
 800ab48:	d402      	bmi.n	800ab50 <__lo0bits+0x4e>
 800ab4a:	085b      	lsrs	r3, r3, #1
 800ab4c:	d006      	beq.n	800ab5c <__lo0bits+0x5a>
 800ab4e:	3001      	adds	r0, #1
 800ab50:	600b      	str	r3, [r1, #0]
 800ab52:	4770      	bx	lr
 800ab54:	4610      	mov	r0, r2
 800ab56:	e7e9      	b.n	800ab2c <__lo0bits+0x2a>
 800ab58:	2000      	movs	r0, #0
 800ab5a:	4770      	bx	lr
 800ab5c:	2020      	movs	r0, #32
 800ab5e:	4770      	bx	lr

0800ab60 <__i2b>:
 800ab60:	b510      	push	{r4, lr}
 800ab62:	460c      	mov	r4, r1
 800ab64:	2101      	movs	r1, #1
 800ab66:	f7ff ff27 	bl	800a9b8 <_Balloc>
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	6144      	str	r4, [r0, #20]
 800ab6e:	6102      	str	r2, [r0, #16]
 800ab70:	bd10      	pop	{r4, pc}

0800ab72 <__multiply>:
 800ab72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab76:	4614      	mov	r4, r2
 800ab78:	690a      	ldr	r2, [r1, #16]
 800ab7a:	6923      	ldr	r3, [r4, #16]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	bfb8      	it	lt
 800ab80:	460b      	movlt	r3, r1
 800ab82:	4688      	mov	r8, r1
 800ab84:	bfbc      	itt	lt
 800ab86:	46a0      	movlt	r8, r4
 800ab88:	461c      	movlt	r4, r3
 800ab8a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ab92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab96:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab9a:	eb07 0609 	add.w	r6, r7, r9
 800ab9e:	42b3      	cmp	r3, r6
 800aba0:	bfb8      	it	lt
 800aba2:	3101      	addlt	r1, #1
 800aba4:	f7ff ff08 	bl	800a9b8 <_Balloc>
 800aba8:	f100 0514 	add.w	r5, r0, #20
 800abac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800abb0:	462b      	mov	r3, r5
 800abb2:	2200      	movs	r2, #0
 800abb4:	4573      	cmp	r3, lr
 800abb6:	d316      	bcc.n	800abe6 <__multiply+0x74>
 800abb8:	f104 0214 	add.w	r2, r4, #20
 800abbc:	f108 0114 	add.w	r1, r8, #20
 800abc0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800abc4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	9b00      	ldr	r3, [sp, #0]
 800abcc:	9201      	str	r2, [sp, #4]
 800abce:	4293      	cmp	r3, r2
 800abd0:	d80c      	bhi.n	800abec <__multiply+0x7a>
 800abd2:	2e00      	cmp	r6, #0
 800abd4:	dd03      	ble.n	800abde <__multiply+0x6c>
 800abd6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d05d      	beq.n	800ac9a <__multiply+0x128>
 800abde:	6106      	str	r6, [r0, #16]
 800abe0:	b003      	add	sp, #12
 800abe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe6:	f843 2b04 	str.w	r2, [r3], #4
 800abea:	e7e3      	b.n	800abb4 <__multiply+0x42>
 800abec:	f8b2 b000 	ldrh.w	fp, [r2]
 800abf0:	f1bb 0f00 	cmp.w	fp, #0
 800abf4:	d023      	beq.n	800ac3e <__multiply+0xcc>
 800abf6:	4689      	mov	r9, r1
 800abf8:	46ac      	mov	ip, r5
 800abfa:	f04f 0800 	mov.w	r8, #0
 800abfe:	f859 4b04 	ldr.w	r4, [r9], #4
 800ac02:	f8dc a000 	ldr.w	sl, [ip]
 800ac06:	b2a3      	uxth	r3, r4
 800ac08:	fa1f fa8a 	uxth.w	sl, sl
 800ac0c:	fb0b a303 	mla	r3, fp, r3, sl
 800ac10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ac14:	f8dc 4000 	ldr.w	r4, [ip]
 800ac18:	4443      	add	r3, r8
 800ac1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ac1e:	fb0b 840a 	mla	r4, fp, sl, r8
 800ac22:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ac26:	46e2      	mov	sl, ip
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ac2e:	454f      	cmp	r7, r9
 800ac30:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ac34:	f84a 3b04 	str.w	r3, [sl], #4
 800ac38:	d82b      	bhi.n	800ac92 <__multiply+0x120>
 800ac3a:	f8cc 8004 	str.w	r8, [ip, #4]
 800ac3e:	9b01      	ldr	r3, [sp, #4]
 800ac40:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ac44:	3204      	adds	r2, #4
 800ac46:	f1ba 0f00 	cmp.w	sl, #0
 800ac4a:	d020      	beq.n	800ac8e <__multiply+0x11c>
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	4689      	mov	r9, r1
 800ac50:	46a8      	mov	r8, r5
 800ac52:	f04f 0b00 	mov.w	fp, #0
 800ac56:	f8b9 c000 	ldrh.w	ip, [r9]
 800ac5a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ac5e:	fb0a 440c 	mla	r4, sl, ip, r4
 800ac62:	445c      	add	r4, fp
 800ac64:	46c4      	mov	ip, r8
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ac6c:	f84c 3b04 	str.w	r3, [ip], #4
 800ac70:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac74:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ac78:	0c1b      	lsrs	r3, r3, #16
 800ac7a:	fb0a b303 	mla	r3, sl, r3, fp
 800ac7e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ac82:	454f      	cmp	r7, r9
 800ac84:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ac88:	d805      	bhi.n	800ac96 <__multiply+0x124>
 800ac8a:	f8c8 3004 	str.w	r3, [r8, #4]
 800ac8e:	3504      	adds	r5, #4
 800ac90:	e79b      	b.n	800abca <__multiply+0x58>
 800ac92:	46d4      	mov	ip, sl
 800ac94:	e7b3      	b.n	800abfe <__multiply+0x8c>
 800ac96:	46e0      	mov	r8, ip
 800ac98:	e7dd      	b.n	800ac56 <__multiply+0xe4>
 800ac9a:	3e01      	subs	r6, #1
 800ac9c:	e799      	b.n	800abd2 <__multiply+0x60>
	...

0800aca0 <__pow5mult>:
 800aca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca4:	4615      	mov	r5, r2
 800aca6:	f012 0203 	ands.w	r2, r2, #3
 800acaa:	4606      	mov	r6, r0
 800acac:	460f      	mov	r7, r1
 800acae:	d007      	beq.n	800acc0 <__pow5mult+0x20>
 800acb0:	3a01      	subs	r2, #1
 800acb2:	4c21      	ldr	r4, [pc, #132]	; (800ad38 <__pow5mult+0x98>)
 800acb4:	2300      	movs	r3, #0
 800acb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acba:	f7ff fec8 	bl	800aa4e <__multadd>
 800acbe:	4607      	mov	r7, r0
 800acc0:	10ad      	asrs	r5, r5, #2
 800acc2:	d035      	beq.n	800ad30 <__pow5mult+0x90>
 800acc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acc6:	b93c      	cbnz	r4, 800acd8 <__pow5mult+0x38>
 800acc8:	2010      	movs	r0, #16
 800acca:	f7fe fac9 	bl	8009260 <malloc>
 800acce:	6270      	str	r0, [r6, #36]	; 0x24
 800acd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acd4:	6004      	str	r4, [r0, #0]
 800acd6:	60c4      	str	r4, [r0, #12]
 800acd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ace0:	b94c      	cbnz	r4, 800acf6 <__pow5mult+0x56>
 800ace2:	f240 2171 	movw	r1, #625	; 0x271
 800ace6:	4630      	mov	r0, r6
 800ace8:	f7ff ff3a 	bl	800ab60 <__i2b>
 800acec:	2300      	movs	r3, #0
 800acee:	f8c8 0008 	str.w	r0, [r8, #8]
 800acf2:	4604      	mov	r4, r0
 800acf4:	6003      	str	r3, [r0, #0]
 800acf6:	f04f 0800 	mov.w	r8, #0
 800acfa:	07eb      	lsls	r3, r5, #31
 800acfc:	d50a      	bpl.n	800ad14 <__pow5mult+0x74>
 800acfe:	4639      	mov	r1, r7
 800ad00:	4622      	mov	r2, r4
 800ad02:	4630      	mov	r0, r6
 800ad04:	f7ff ff35 	bl	800ab72 <__multiply>
 800ad08:	4639      	mov	r1, r7
 800ad0a:	4681      	mov	r9, r0
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f7ff fe87 	bl	800aa20 <_Bfree>
 800ad12:	464f      	mov	r7, r9
 800ad14:	106d      	asrs	r5, r5, #1
 800ad16:	d00b      	beq.n	800ad30 <__pow5mult+0x90>
 800ad18:	6820      	ldr	r0, [r4, #0]
 800ad1a:	b938      	cbnz	r0, 800ad2c <__pow5mult+0x8c>
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7ff ff26 	bl	800ab72 <__multiply>
 800ad26:	6020      	str	r0, [r4, #0]
 800ad28:	f8c0 8000 	str.w	r8, [r0]
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	e7e4      	b.n	800acfa <__pow5mult+0x5a>
 800ad30:	4638      	mov	r0, r7
 800ad32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad36:	bf00      	nop
 800ad38:	0800b4c0 	.word	0x0800b4c0

0800ad3c <__lshift>:
 800ad3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad40:	460c      	mov	r4, r1
 800ad42:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	6849      	ldr	r1, [r1, #4]
 800ad4a:	eb0a 0903 	add.w	r9, sl, r3
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	4607      	mov	r7, r0
 800ad52:	4616      	mov	r6, r2
 800ad54:	f109 0501 	add.w	r5, r9, #1
 800ad58:	42ab      	cmp	r3, r5
 800ad5a:	db32      	blt.n	800adc2 <__lshift+0x86>
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f7ff fe2b 	bl	800a9b8 <_Balloc>
 800ad62:	2300      	movs	r3, #0
 800ad64:	4680      	mov	r8, r0
 800ad66:	f100 0114 	add.w	r1, r0, #20
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	4553      	cmp	r3, sl
 800ad6e:	db2b      	blt.n	800adc8 <__lshift+0x8c>
 800ad70:	6920      	ldr	r0, [r4, #16]
 800ad72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad76:	f104 0314 	add.w	r3, r4, #20
 800ad7a:	f016 021f 	ands.w	r2, r6, #31
 800ad7e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad82:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad86:	d025      	beq.n	800add4 <__lshift+0x98>
 800ad88:	f1c2 0e20 	rsb	lr, r2, #32
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	681e      	ldr	r6, [r3, #0]
 800ad90:	468a      	mov	sl, r1
 800ad92:	4096      	lsls	r6, r2
 800ad94:	4330      	orrs	r0, r6
 800ad96:	f84a 0b04 	str.w	r0, [sl], #4
 800ad9a:	f853 0b04 	ldr.w	r0, [r3], #4
 800ad9e:	459c      	cmp	ip, r3
 800ada0:	fa20 f00e 	lsr.w	r0, r0, lr
 800ada4:	d814      	bhi.n	800add0 <__lshift+0x94>
 800ada6:	6048      	str	r0, [r1, #4]
 800ada8:	b108      	cbz	r0, 800adae <__lshift+0x72>
 800adaa:	f109 0502 	add.w	r5, r9, #2
 800adae:	3d01      	subs	r5, #1
 800adb0:	4638      	mov	r0, r7
 800adb2:	f8c8 5010 	str.w	r5, [r8, #16]
 800adb6:	4621      	mov	r1, r4
 800adb8:	f7ff fe32 	bl	800aa20 <_Bfree>
 800adbc:	4640      	mov	r0, r8
 800adbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc2:	3101      	adds	r1, #1
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	e7c7      	b.n	800ad58 <__lshift+0x1c>
 800adc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800adcc:	3301      	adds	r3, #1
 800adce:	e7cd      	b.n	800ad6c <__lshift+0x30>
 800add0:	4651      	mov	r1, sl
 800add2:	e7dc      	b.n	800ad8e <__lshift+0x52>
 800add4:	3904      	subs	r1, #4
 800add6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adda:	f841 2f04 	str.w	r2, [r1, #4]!
 800adde:	459c      	cmp	ip, r3
 800ade0:	d8f9      	bhi.n	800add6 <__lshift+0x9a>
 800ade2:	e7e4      	b.n	800adae <__lshift+0x72>

0800ade4 <__mcmp>:
 800ade4:	6903      	ldr	r3, [r0, #16]
 800ade6:	690a      	ldr	r2, [r1, #16]
 800ade8:	1a9b      	subs	r3, r3, r2
 800adea:	b530      	push	{r4, r5, lr}
 800adec:	d10c      	bne.n	800ae08 <__mcmp+0x24>
 800adee:	0092      	lsls	r2, r2, #2
 800adf0:	3014      	adds	r0, #20
 800adf2:	3114      	adds	r1, #20
 800adf4:	1884      	adds	r4, r0, r2
 800adf6:	4411      	add	r1, r2
 800adf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800adfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae00:	4295      	cmp	r5, r2
 800ae02:	d003      	beq.n	800ae0c <__mcmp+0x28>
 800ae04:	d305      	bcc.n	800ae12 <__mcmp+0x2e>
 800ae06:	2301      	movs	r3, #1
 800ae08:	4618      	mov	r0, r3
 800ae0a:	bd30      	pop	{r4, r5, pc}
 800ae0c:	42a0      	cmp	r0, r4
 800ae0e:	d3f3      	bcc.n	800adf8 <__mcmp+0x14>
 800ae10:	e7fa      	b.n	800ae08 <__mcmp+0x24>
 800ae12:	f04f 33ff 	mov.w	r3, #4294967295
 800ae16:	e7f7      	b.n	800ae08 <__mcmp+0x24>

0800ae18 <__mdiff>:
 800ae18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae1c:	460d      	mov	r5, r1
 800ae1e:	4607      	mov	r7, r0
 800ae20:	4611      	mov	r1, r2
 800ae22:	4628      	mov	r0, r5
 800ae24:	4614      	mov	r4, r2
 800ae26:	f7ff ffdd 	bl	800ade4 <__mcmp>
 800ae2a:	1e06      	subs	r6, r0, #0
 800ae2c:	d108      	bne.n	800ae40 <__mdiff+0x28>
 800ae2e:	4631      	mov	r1, r6
 800ae30:	4638      	mov	r0, r7
 800ae32:	f7ff fdc1 	bl	800a9b8 <_Balloc>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ae3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae40:	bfa4      	itt	ge
 800ae42:	4623      	movge	r3, r4
 800ae44:	462c      	movge	r4, r5
 800ae46:	4638      	mov	r0, r7
 800ae48:	6861      	ldr	r1, [r4, #4]
 800ae4a:	bfa6      	itte	ge
 800ae4c:	461d      	movge	r5, r3
 800ae4e:	2600      	movge	r6, #0
 800ae50:	2601      	movlt	r6, #1
 800ae52:	f7ff fdb1 	bl	800a9b8 <_Balloc>
 800ae56:	692b      	ldr	r3, [r5, #16]
 800ae58:	60c6      	str	r6, [r0, #12]
 800ae5a:	6926      	ldr	r6, [r4, #16]
 800ae5c:	f105 0914 	add.w	r9, r5, #20
 800ae60:	f104 0214 	add.w	r2, r4, #20
 800ae64:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ae68:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ae6c:	f100 0514 	add.w	r5, r0, #20
 800ae70:	f04f 0e00 	mov.w	lr, #0
 800ae74:	f852 ab04 	ldr.w	sl, [r2], #4
 800ae78:	f859 4b04 	ldr.w	r4, [r9], #4
 800ae7c:	fa1e f18a 	uxtah	r1, lr, sl
 800ae80:	b2a3      	uxth	r3, r4
 800ae82:	1ac9      	subs	r1, r1, r3
 800ae84:	0c23      	lsrs	r3, r4, #16
 800ae86:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ae8a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ae8e:	b289      	uxth	r1, r1
 800ae90:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ae94:	45c8      	cmp	r8, r9
 800ae96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ae9a:	4694      	mov	ip, r2
 800ae9c:	f845 3b04 	str.w	r3, [r5], #4
 800aea0:	d8e8      	bhi.n	800ae74 <__mdiff+0x5c>
 800aea2:	45bc      	cmp	ip, r7
 800aea4:	d304      	bcc.n	800aeb0 <__mdiff+0x98>
 800aea6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800aeaa:	b183      	cbz	r3, 800aece <__mdiff+0xb6>
 800aeac:	6106      	str	r6, [r0, #16]
 800aeae:	e7c5      	b.n	800ae3c <__mdiff+0x24>
 800aeb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aeb4:	fa1e f381 	uxtah	r3, lr, r1
 800aeb8:	141a      	asrs	r2, r3, #16
 800aeba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aec4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800aec8:	f845 3b04 	str.w	r3, [r5], #4
 800aecc:	e7e9      	b.n	800aea2 <__mdiff+0x8a>
 800aece:	3e01      	subs	r6, #1
 800aed0:	e7e9      	b.n	800aea6 <__mdiff+0x8e>

0800aed2 <__d2b>:
 800aed2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aed6:	460e      	mov	r6, r1
 800aed8:	2101      	movs	r1, #1
 800aeda:	ec59 8b10 	vmov	r8, r9, d0
 800aede:	4615      	mov	r5, r2
 800aee0:	f7ff fd6a 	bl	800a9b8 <_Balloc>
 800aee4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aee8:	4607      	mov	r7, r0
 800aeea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aeee:	bb34      	cbnz	r4, 800af3e <__d2b+0x6c>
 800aef0:	9301      	str	r3, [sp, #4]
 800aef2:	f1b8 0300 	subs.w	r3, r8, #0
 800aef6:	d027      	beq.n	800af48 <__d2b+0x76>
 800aef8:	a802      	add	r0, sp, #8
 800aefa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800aefe:	f7ff fe00 	bl	800ab02 <__lo0bits>
 800af02:	9900      	ldr	r1, [sp, #0]
 800af04:	b1f0      	cbz	r0, 800af44 <__d2b+0x72>
 800af06:	9a01      	ldr	r2, [sp, #4]
 800af08:	f1c0 0320 	rsb	r3, r0, #32
 800af0c:	fa02 f303 	lsl.w	r3, r2, r3
 800af10:	430b      	orrs	r3, r1
 800af12:	40c2      	lsrs	r2, r0
 800af14:	617b      	str	r3, [r7, #20]
 800af16:	9201      	str	r2, [sp, #4]
 800af18:	9b01      	ldr	r3, [sp, #4]
 800af1a:	61bb      	str	r3, [r7, #24]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	bf14      	ite	ne
 800af20:	2102      	movne	r1, #2
 800af22:	2101      	moveq	r1, #1
 800af24:	6139      	str	r1, [r7, #16]
 800af26:	b1c4      	cbz	r4, 800af5a <__d2b+0x88>
 800af28:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800af2c:	4404      	add	r4, r0
 800af2e:	6034      	str	r4, [r6, #0]
 800af30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af34:	6028      	str	r0, [r5, #0]
 800af36:	4638      	mov	r0, r7
 800af38:	b003      	add	sp, #12
 800af3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af42:	e7d5      	b.n	800aef0 <__d2b+0x1e>
 800af44:	6179      	str	r1, [r7, #20]
 800af46:	e7e7      	b.n	800af18 <__d2b+0x46>
 800af48:	a801      	add	r0, sp, #4
 800af4a:	f7ff fdda 	bl	800ab02 <__lo0bits>
 800af4e:	9b01      	ldr	r3, [sp, #4]
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	2101      	movs	r1, #1
 800af54:	6139      	str	r1, [r7, #16]
 800af56:	3020      	adds	r0, #32
 800af58:	e7e5      	b.n	800af26 <__d2b+0x54>
 800af5a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800af5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af62:	6030      	str	r0, [r6, #0]
 800af64:	6918      	ldr	r0, [r3, #16]
 800af66:	f7ff fdad 	bl	800aac4 <__hi0bits>
 800af6a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800af6e:	e7e1      	b.n	800af34 <__d2b+0x62>

0800af70 <_calloc_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	fb02 f401 	mul.w	r4, r2, r1
 800af76:	4621      	mov	r1, r4
 800af78:	f7fe f9e4 	bl	8009344 <_malloc_r>
 800af7c:	4605      	mov	r5, r0
 800af7e:	b118      	cbz	r0, 800af88 <_calloc_r+0x18>
 800af80:	4622      	mov	r2, r4
 800af82:	2100      	movs	r1, #0
 800af84:	f7fe f987 	bl	8009296 <memset>
 800af88:	4628      	mov	r0, r5
 800af8a:	bd38      	pop	{r3, r4, r5, pc}

0800af8c <__ssputs_r>:
 800af8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af90:	688e      	ldr	r6, [r1, #8]
 800af92:	429e      	cmp	r6, r3
 800af94:	4682      	mov	sl, r0
 800af96:	460c      	mov	r4, r1
 800af98:	4690      	mov	r8, r2
 800af9a:	4699      	mov	r9, r3
 800af9c:	d837      	bhi.n	800b00e <__ssputs_r+0x82>
 800af9e:	898a      	ldrh	r2, [r1, #12]
 800afa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800afa4:	d031      	beq.n	800b00a <__ssputs_r+0x7e>
 800afa6:	6825      	ldr	r5, [r4, #0]
 800afa8:	6909      	ldr	r1, [r1, #16]
 800afaa:	1a6f      	subs	r7, r5, r1
 800afac:	6965      	ldr	r5, [r4, #20]
 800afae:	2302      	movs	r3, #2
 800afb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afb4:	fb95 f5f3 	sdiv	r5, r5, r3
 800afb8:	f109 0301 	add.w	r3, r9, #1
 800afbc:	443b      	add	r3, r7
 800afbe:	429d      	cmp	r5, r3
 800afc0:	bf38      	it	cc
 800afc2:	461d      	movcc	r5, r3
 800afc4:	0553      	lsls	r3, r2, #21
 800afc6:	d530      	bpl.n	800b02a <__ssputs_r+0x9e>
 800afc8:	4629      	mov	r1, r5
 800afca:	f7fe f9bb 	bl	8009344 <_malloc_r>
 800afce:	4606      	mov	r6, r0
 800afd0:	b950      	cbnz	r0, 800afe8 <__ssputs_r+0x5c>
 800afd2:	230c      	movs	r3, #12
 800afd4:	f8ca 3000 	str.w	r3, [sl]
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	f04f 30ff 	mov.w	r0, #4294967295
 800afe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe8:	463a      	mov	r2, r7
 800afea:	6921      	ldr	r1, [r4, #16]
 800afec:	f7fe f948 	bl	8009280 <memcpy>
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800affa:	81a3      	strh	r3, [r4, #12]
 800affc:	6126      	str	r6, [r4, #16]
 800affe:	6165      	str	r5, [r4, #20]
 800b000:	443e      	add	r6, r7
 800b002:	1bed      	subs	r5, r5, r7
 800b004:	6026      	str	r6, [r4, #0]
 800b006:	60a5      	str	r5, [r4, #8]
 800b008:	464e      	mov	r6, r9
 800b00a:	454e      	cmp	r6, r9
 800b00c:	d900      	bls.n	800b010 <__ssputs_r+0x84>
 800b00e:	464e      	mov	r6, r9
 800b010:	4632      	mov	r2, r6
 800b012:	4641      	mov	r1, r8
 800b014:	6820      	ldr	r0, [r4, #0]
 800b016:	f000 f91d 	bl	800b254 <memmove>
 800b01a:	68a3      	ldr	r3, [r4, #8]
 800b01c:	1b9b      	subs	r3, r3, r6
 800b01e:	60a3      	str	r3, [r4, #8]
 800b020:	6823      	ldr	r3, [r4, #0]
 800b022:	441e      	add	r6, r3
 800b024:	6026      	str	r6, [r4, #0]
 800b026:	2000      	movs	r0, #0
 800b028:	e7dc      	b.n	800afe4 <__ssputs_r+0x58>
 800b02a:	462a      	mov	r2, r5
 800b02c:	f000 f92b 	bl	800b286 <_realloc_r>
 800b030:	4606      	mov	r6, r0
 800b032:	2800      	cmp	r0, #0
 800b034:	d1e2      	bne.n	800affc <__ssputs_r+0x70>
 800b036:	6921      	ldr	r1, [r4, #16]
 800b038:	4650      	mov	r0, sl
 800b03a:	f7fe f935 	bl	80092a8 <_free_r>
 800b03e:	e7c8      	b.n	800afd2 <__ssputs_r+0x46>

0800b040 <_svfiprintf_r>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	461d      	mov	r5, r3
 800b046:	898b      	ldrh	r3, [r1, #12]
 800b048:	061f      	lsls	r7, r3, #24
 800b04a:	b09d      	sub	sp, #116	; 0x74
 800b04c:	4680      	mov	r8, r0
 800b04e:	460c      	mov	r4, r1
 800b050:	4616      	mov	r6, r2
 800b052:	d50f      	bpl.n	800b074 <_svfiprintf_r+0x34>
 800b054:	690b      	ldr	r3, [r1, #16]
 800b056:	b96b      	cbnz	r3, 800b074 <_svfiprintf_r+0x34>
 800b058:	2140      	movs	r1, #64	; 0x40
 800b05a:	f7fe f973 	bl	8009344 <_malloc_r>
 800b05e:	6020      	str	r0, [r4, #0]
 800b060:	6120      	str	r0, [r4, #16]
 800b062:	b928      	cbnz	r0, 800b070 <_svfiprintf_r+0x30>
 800b064:	230c      	movs	r3, #12
 800b066:	f8c8 3000 	str.w	r3, [r8]
 800b06a:	f04f 30ff 	mov.w	r0, #4294967295
 800b06e:	e0c8      	b.n	800b202 <_svfiprintf_r+0x1c2>
 800b070:	2340      	movs	r3, #64	; 0x40
 800b072:	6163      	str	r3, [r4, #20]
 800b074:	2300      	movs	r3, #0
 800b076:	9309      	str	r3, [sp, #36]	; 0x24
 800b078:	2320      	movs	r3, #32
 800b07a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b07e:	2330      	movs	r3, #48	; 0x30
 800b080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b084:	9503      	str	r5, [sp, #12]
 800b086:	f04f 0b01 	mov.w	fp, #1
 800b08a:	4637      	mov	r7, r6
 800b08c:	463d      	mov	r5, r7
 800b08e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b092:	b10b      	cbz	r3, 800b098 <_svfiprintf_r+0x58>
 800b094:	2b25      	cmp	r3, #37	; 0x25
 800b096:	d13e      	bne.n	800b116 <_svfiprintf_r+0xd6>
 800b098:	ebb7 0a06 	subs.w	sl, r7, r6
 800b09c:	d00b      	beq.n	800b0b6 <_svfiprintf_r+0x76>
 800b09e:	4653      	mov	r3, sl
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	f7ff ff71 	bl	800af8c <__ssputs_r>
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	f000 80a4 	beq.w	800b1f8 <_svfiprintf_r+0x1b8>
 800b0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b2:	4453      	add	r3, sl
 800b0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0b6:	783b      	ldrb	r3, [r7, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f000 809d 	beq.w	800b1f8 <_svfiprintf_r+0x1b8>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0c8:	9304      	str	r3, [sp, #16]
 800b0ca:	9307      	str	r3, [sp, #28]
 800b0cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b0d2:	462f      	mov	r7, r5
 800b0d4:	2205      	movs	r2, #5
 800b0d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b0da:	4850      	ldr	r0, [pc, #320]	; (800b21c <_svfiprintf_r+0x1dc>)
 800b0dc:	f7f5 f880 	bl	80001e0 <memchr>
 800b0e0:	9b04      	ldr	r3, [sp, #16]
 800b0e2:	b9d0      	cbnz	r0, 800b11a <_svfiprintf_r+0xda>
 800b0e4:	06d9      	lsls	r1, r3, #27
 800b0e6:	bf44      	itt	mi
 800b0e8:	2220      	movmi	r2, #32
 800b0ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0ee:	071a      	lsls	r2, r3, #28
 800b0f0:	bf44      	itt	mi
 800b0f2:	222b      	movmi	r2, #43	; 0x2b
 800b0f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b0f8:	782a      	ldrb	r2, [r5, #0]
 800b0fa:	2a2a      	cmp	r2, #42	; 0x2a
 800b0fc:	d015      	beq.n	800b12a <_svfiprintf_r+0xea>
 800b0fe:	9a07      	ldr	r2, [sp, #28]
 800b100:	462f      	mov	r7, r5
 800b102:	2000      	movs	r0, #0
 800b104:	250a      	movs	r5, #10
 800b106:	4639      	mov	r1, r7
 800b108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b10c:	3b30      	subs	r3, #48	; 0x30
 800b10e:	2b09      	cmp	r3, #9
 800b110:	d94d      	bls.n	800b1ae <_svfiprintf_r+0x16e>
 800b112:	b1b8      	cbz	r0, 800b144 <_svfiprintf_r+0x104>
 800b114:	e00f      	b.n	800b136 <_svfiprintf_r+0xf6>
 800b116:	462f      	mov	r7, r5
 800b118:	e7b8      	b.n	800b08c <_svfiprintf_r+0x4c>
 800b11a:	4a40      	ldr	r2, [pc, #256]	; (800b21c <_svfiprintf_r+0x1dc>)
 800b11c:	1a80      	subs	r0, r0, r2
 800b11e:	fa0b f000 	lsl.w	r0, fp, r0
 800b122:	4318      	orrs	r0, r3
 800b124:	9004      	str	r0, [sp, #16]
 800b126:	463d      	mov	r5, r7
 800b128:	e7d3      	b.n	800b0d2 <_svfiprintf_r+0x92>
 800b12a:	9a03      	ldr	r2, [sp, #12]
 800b12c:	1d11      	adds	r1, r2, #4
 800b12e:	6812      	ldr	r2, [r2, #0]
 800b130:	9103      	str	r1, [sp, #12]
 800b132:	2a00      	cmp	r2, #0
 800b134:	db01      	blt.n	800b13a <_svfiprintf_r+0xfa>
 800b136:	9207      	str	r2, [sp, #28]
 800b138:	e004      	b.n	800b144 <_svfiprintf_r+0x104>
 800b13a:	4252      	negs	r2, r2
 800b13c:	f043 0302 	orr.w	r3, r3, #2
 800b140:	9207      	str	r2, [sp, #28]
 800b142:	9304      	str	r3, [sp, #16]
 800b144:	783b      	ldrb	r3, [r7, #0]
 800b146:	2b2e      	cmp	r3, #46	; 0x2e
 800b148:	d10c      	bne.n	800b164 <_svfiprintf_r+0x124>
 800b14a:	787b      	ldrb	r3, [r7, #1]
 800b14c:	2b2a      	cmp	r3, #42	; 0x2a
 800b14e:	d133      	bne.n	800b1b8 <_svfiprintf_r+0x178>
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	1d1a      	adds	r2, r3, #4
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	9203      	str	r2, [sp, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	bfb8      	it	lt
 800b15c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b160:	3702      	adds	r7, #2
 800b162:	9305      	str	r3, [sp, #20]
 800b164:	4d2e      	ldr	r5, [pc, #184]	; (800b220 <_svfiprintf_r+0x1e0>)
 800b166:	7839      	ldrb	r1, [r7, #0]
 800b168:	2203      	movs	r2, #3
 800b16a:	4628      	mov	r0, r5
 800b16c:	f7f5 f838 	bl	80001e0 <memchr>
 800b170:	b138      	cbz	r0, 800b182 <_svfiprintf_r+0x142>
 800b172:	2340      	movs	r3, #64	; 0x40
 800b174:	1b40      	subs	r0, r0, r5
 800b176:	fa03 f000 	lsl.w	r0, r3, r0
 800b17a:	9b04      	ldr	r3, [sp, #16]
 800b17c:	4303      	orrs	r3, r0
 800b17e:	3701      	adds	r7, #1
 800b180:	9304      	str	r3, [sp, #16]
 800b182:	7839      	ldrb	r1, [r7, #0]
 800b184:	4827      	ldr	r0, [pc, #156]	; (800b224 <_svfiprintf_r+0x1e4>)
 800b186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b18a:	2206      	movs	r2, #6
 800b18c:	1c7e      	adds	r6, r7, #1
 800b18e:	f7f5 f827 	bl	80001e0 <memchr>
 800b192:	2800      	cmp	r0, #0
 800b194:	d038      	beq.n	800b208 <_svfiprintf_r+0x1c8>
 800b196:	4b24      	ldr	r3, [pc, #144]	; (800b228 <_svfiprintf_r+0x1e8>)
 800b198:	bb13      	cbnz	r3, 800b1e0 <_svfiprintf_r+0x1a0>
 800b19a:	9b03      	ldr	r3, [sp, #12]
 800b19c:	3307      	adds	r3, #7
 800b19e:	f023 0307 	bic.w	r3, r3, #7
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	9303      	str	r3, [sp, #12]
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	444b      	add	r3, r9
 800b1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ac:	e76d      	b.n	800b08a <_svfiprintf_r+0x4a>
 800b1ae:	fb05 3202 	mla	r2, r5, r2, r3
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	460f      	mov	r7, r1
 800b1b6:	e7a6      	b.n	800b106 <_svfiprintf_r+0xc6>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	3701      	adds	r7, #1
 800b1bc:	9305      	str	r3, [sp, #20]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	250a      	movs	r5, #10
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1c8:	3a30      	subs	r2, #48	; 0x30
 800b1ca:	2a09      	cmp	r2, #9
 800b1cc:	d903      	bls.n	800b1d6 <_svfiprintf_r+0x196>
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0c8      	beq.n	800b164 <_svfiprintf_r+0x124>
 800b1d2:	9105      	str	r1, [sp, #20]
 800b1d4:	e7c6      	b.n	800b164 <_svfiprintf_r+0x124>
 800b1d6:	fb05 2101 	mla	r1, r5, r1, r2
 800b1da:	2301      	movs	r3, #1
 800b1dc:	4607      	mov	r7, r0
 800b1de:	e7f0      	b.n	800b1c2 <_svfiprintf_r+0x182>
 800b1e0:	ab03      	add	r3, sp, #12
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	4622      	mov	r2, r4
 800b1e6:	4b11      	ldr	r3, [pc, #68]	; (800b22c <_svfiprintf_r+0x1ec>)
 800b1e8:	a904      	add	r1, sp, #16
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	f7fe f998 	bl	8009520 <_printf_float>
 800b1f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b1f4:	4681      	mov	r9, r0
 800b1f6:	d1d6      	bne.n	800b1a6 <_svfiprintf_r+0x166>
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	065b      	lsls	r3, r3, #25
 800b1fc:	f53f af35 	bmi.w	800b06a <_svfiprintf_r+0x2a>
 800b200:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b202:	b01d      	add	sp, #116	; 0x74
 800b204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b208:	ab03      	add	r3, sp, #12
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	4622      	mov	r2, r4
 800b20e:	4b07      	ldr	r3, [pc, #28]	; (800b22c <_svfiprintf_r+0x1ec>)
 800b210:	a904      	add	r1, sp, #16
 800b212:	4640      	mov	r0, r8
 800b214:	f7fe fc3a 	bl	8009a8c <_printf_i>
 800b218:	e7ea      	b.n	800b1f0 <_svfiprintf_r+0x1b0>
 800b21a:	bf00      	nop
 800b21c:	0800b4cc 	.word	0x0800b4cc
 800b220:	0800b4d2 	.word	0x0800b4d2
 800b224:	0800b4d6 	.word	0x0800b4d6
 800b228:	08009521 	.word	0x08009521
 800b22c:	0800af8d 	.word	0x0800af8d

0800b230 <__ascii_mbtowc>:
 800b230:	b082      	sub	sp, #8
 800b232:	b901      	cbnz	r1, 800b236 <__ascii_mbtowc+0x6>
 800b234:	a901      	add	r1, sp, #4
 800b236:	b142      	cbz	r2, 800b24a <__ascii_mbtowc+0x1a>
 800b238:	b14b      	cbz	r3, 800b24e <__ascii_mbtowc+0x1e>
 800b23a:	7813      	ldrb	r3, [r2, #0]
 800b23c:	600b      	str	r3, [r1, #0]
 800b23e:	7812      	ldrb	r2, [r2, #0]
 800b240:	1c10      	adds	r0, r2, #0
 800b242:	bf18      	it	ne
 800b244:	2001      	movne	r0, #1
 800b246:	b002      	add	sp, #8
 800b248:	4770      	bx	lr
 800b24a:	4610      	mov	r0, r2
 800b24c:	e7fb      	b.n	800b246 <__ascii_mbtowc+0x16>
 800b24e:	f06f 0001 	mvn.w	r0, #1
 800b252:	e7f8      	b.n	800b246 <__ascii_mbtowc+0x16>

0800b254 <memmove>:
 800b254:	4288      	cmp	r0, r1
 800b256:	b510      	push	{r4, lr}
 800b258:	eb01 0302 	add.w	r3, r1, r2
 800b25c:	d807      	bhi.n	800b26e <memmove+0x1a>
 800b25e:	1e42      	subs	r2, r0, #1
 800b260:	4299      	cmp	r1, r3
 800b262:	d00a      	beq.n	800b27a <memmove+0x26>
 800b264:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b268:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b26c:	e7f8      	b.n	800b260 <memmove+0xc>
 800b26e:	4283      	cmp	r3, r0
 800b270:	d9f5      	bls.n	800b25e <memmove+0xa>
 800b272:	1881      	adds	r1, r0, r2
 800b274:	1ad2      	subs	r2, r2, r3
 800b276:	42d3      	cmn	r3, r2
 800b278:	d100      	bne.n	800b27c <memmove+0x28>
 800b27a:	bd10      	pop	{r4, pc}
 800b27c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b280:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b284:	e7f7      	b.n	800b276 <memmove+0x22>

0800b286 <_realloc_r>:
 800b286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b288:	4607      	mov	r7, r0
 800b28a:	4614      	mov	r4, r2
 800b28c:	460e      	mov	r6, r1
 800b28e:	b921      	cbnz	r1, 800b29a <_realloc_r+0x14>
 800b290:	4611      	mov	r1, r2
 800b292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b296:	f7fe b855 	b.w	8009344 <_malloc_r>
 800b29a:	b922      	cbnz	r2, 800b2a6 <_realloc_r+0x20>
 800b29c:	f7fe f804 	bl	80092a8 <_free_r>
 800b2a0:	4625      	mov	r5, r4
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a6:	f000 f821 	bl	800b2ec <_malloc_usable_size_r>
 800b2aa:	42a0      	cmp	r0, r4
 800b2ac:	d20f      	bcs.n	800b2ce <_realloc_r+0x48>
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f7fe f847 	bl	8009344 <_malloc_r>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d0f2      	beq.n	800b2a2 <_realloc_r+0x1c>
 800b2bc:	4631      	mov	r1, r6
 800b2be:	4622      	mov	r2, r4
 800b2c0:	f7fd ffde 	bl	8009280 <memcpy>
 800b2c4:	4631      	mov	r1, r6
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	f7fd ffee 	bl	80092a8 <_free_r>
 800b2cc:	e7e9      	b.n	800b2a2 <_realloc_r+0x1c>
 800b2ce:	4635      	mov	r5, r6
 800b2d0:	e7e7      	b.n	800b2a2 <_realloc_r+0x1c>

0800b2d2 <__ascii_wctomb>:
 800b2d2:	b149      	cbz	r1, 800b2e8 <__ascii_wctomb+0x16>
 800b2d4:	2aff      	cmp	r2, #255	; 0xff
 800b2d6:	bf85      	ittet	hi
 800b2d8:	238a      	movhi	r3, #138	; 0x8a
 800b2da:	6003      	strhi	r3, [r0, #0]
 800b2dc:	700a      	strbls	r2, [r1, #0]
 800b2de:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2e2:	bf98      	it	ls
 800b2e4:	2001      	movls	r0, #1
 800b2e6:	4770      	bx	lr
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	4770      	bx	lr

0800b2ec <_malloc_usable_size_r>:
 800b2ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2f0:	1f18      	subs	r0, r3, #4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	bfbc      	itt	lt
 800b2f6:	580b      	ldrlt	r3, [r1, r0]
 800b2f8:	18c0      	addlt	r0, r0, r3
 800b2fa:	4770      	bx	lr

0800b2fc <_init>:
 800b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fe:	bf00      	nop
 800b300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b302:	bc08      	pop	{r3}
 800b304:	469e      	mov	lr, r3
 800b306:	4770      	bx	lr

0800b308 <_fini>:
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30a:	bf00      	nop
 800b30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30e:	bc08      	pop	{r3}
 800b310:	469e      	mov	lr, r3
 800b312:	4770      	bx	lr
