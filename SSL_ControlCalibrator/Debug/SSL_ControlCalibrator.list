
SSL_ControlCalibrator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f43c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b74  0800f5d0  0800f5d0  0001f5d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010144  08010144  000302d0  2**0
                  CONTENTS
  4 .ARM          00000008  08010144  08010144  00020144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801014c  0801014c  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801014c  0801014c  0002014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08010154  08010154  00020154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0801015c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302d0  2**0
                  CONTENTS
 10 .bss          00002b6c  200002d0  200002d0  000302d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002e3c  20002e3c  000302d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d19f  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046fc  00000000  00000000  0004d49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  00051ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f0  00000000  00000000  00053360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028fd0  00000000  00000000  00054950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e505  00000000  00000000  0007d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5a1f  00000000  00000000  0009be25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00171844  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bf0  00000000  00000000  00171894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f5b4 	.word	0x0800f5b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800f5b4 	.word	0x0800f5b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_ZN8BTS7960BC1EPVmS1_S1_S1_P12GPIO_TypeDeftS3_t>:
 *      Author: Gabriel
 */

#include "BTS7960B.hpp"

BTS7960B::BTS7960B(__IO uint32_t* ina_ccr, __IO uint32_t* inb_ccr, __IO uint32_t* ina_arr, __IO uint32_t* inb_arr, GPIO_TypeDef* inha_gpio_port, uint16_t inha_gpio_pin, GPIO_TypeDef* inhb_gpio_port, uint16_t inhb_gpio_pin)
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
 : ina(ina_ccr), inb(inb_ccr), ina_max(ina_arr), inb_max(inb_arr), inha_port(inha_gpio_port), inha_pin(inha_gpio_pin), inhb_port(inhb_gpio_port), inhb_pin(inhb_gpio_pin){
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f947 	bl	800129c <_ZN5MotorC1Ev>
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <_ZN8BTS7960BC1EPVmS1_S1_S1_P12GPIO_TypeDeftS3_t+0x58>)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	635a      	str	r2, [r3, #52]	; 0x34
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	8c3a      	ldrh	r2, [r7, #32]
 8001036:	879a      	strh	r2, [r3, #60]	; 0x3c
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

}
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0800fc34 	.word	0x0800fc34

08001054 <_ZN8BTS7960B8setPowerEf>:

void BTS7960B::setPower(float power){
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	ed87 0a00 	vstr	s0, [r7]
	if(power >= 0 && power <= 1){
 8001060:	edd7 7a00 	vldr	s15, [r7]
 8001064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	db1f      	blt.n	80010ae <_ZN8BTS7960B8setPowerEf+0x5a>
 800106e:	edd7 7a00 	vldr	s15, [r7]
 8001072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d816      	bhi.n	80010ae <_ZN8BTS7960B8setPowerEf+0x5a>
		*ina = power*(*ina_max);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800108e:	edd7 7a00 	vldr	s15, [r7]
 8001092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109e:	ee17 2a90 	vmov	r2, s15
 80010a2:	601a      	str	r2, [r3, #0]
		*inb = 0;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
	}else if(power < 0 && power >= -1){
		*ina = 0;
		*inb = -power*(*inb_max);
	}
}
 80010ac:	e029      	b.n	8001102 <_ZN8BTS7960B8setPowerEf+0xae>
	}else if(power < 0 && power >= -1){
 80010ae:	edd7 7a00 	vldr	s15, [r7]
 80010b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	d400      	bmi.n	80010be <_ZN8BTS7960B8setPowerEf+0x6a>
}
 80010bc:	e021      	b.n	8001102 <_ZN8BTS7960B8setPowerEf+0xae>
	}else if(power < 0 && power >= -1){
 80010be:	edd7 7a00 	vldr	s15, [r7]
 80010c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80010c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	da00      	bge.n	80010d2 <_ZN8BTS7960B8setPowerEf+0x7e>
}
 80010d0:	e017      	b.n	8001102 <_ZN8BTS7960B8setPowerEf+0xae>
		*ina = 0;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
		*inb = -power*(*inb_max);
 80010da:	edd7 7a00 	vldr	s15, [r7]
 80010de:	eeb1 7a67 	vneg.f32	s14, s15
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fc:	ee17 2a90 	vmov	r2, s15
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZN8BTS7960B10setEnabledEb>:

void BTS7960B::setEnabled(bool enabled){
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
	if(enabled){
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d011      	beq.n	8001144 <_ZN8BTS7960B10setEnabledEb+0x36>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_SET);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001128:	2201      	movs	r2, #1
 800112a:	4619      	mov	r1, r3
 800112c:	f001 fddc 	bl	8002ce8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_SET);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800113a:	2201      	movs	r2, #1
 800113c:	4619      	mov	r1, r3
 800113e:	f001 fdd3 	bl	8002ce8 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_RESET);
	}
}
 8001142:	e010      	b.n	8001166 <_ZN8BTS7960B10setEnabledEb+0x58>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_RESET);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800114c:	2200      	movs	r2, #0
 800114e:	4619      	mov	r1, r3
 8001150:	f001 fdca 	bl	8002ce8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_RESET);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	f001 fdc1 	bl	8002ce8 <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <_ZN8BTS7960BD1Ev>:
#define SRC_COMPONENTS_BTS7960B_HPP_

#include "main.h"
#include "Motor.hpp"

class BTS7960B : public Motor{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_ZN8BTS7960BD1Ev+0x20>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f8af 	bl	80012e4 <_ZN5MotorD1Ev>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	0800fc34 	.word	0x0800fc34

08001194 <_ZN8BTS7960BD0Ev>:
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ffe7 	bl	8001170 <_ZN8BTS7960BD1Ev>
 80011a2:	2148      	movs	r1, #72	; 0x48
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f009 f91f 	bl	800a3e8 <_ZdlPvj>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZN7EncoderC1EPVmS1_m>:
 *      Author: Gabriel
 */

#include "Encoder.hpp"

Encoder::Encoder(__IO uint32_t* cnt, __IO uint32_t* arr, uint32_t countsPerRevolution) :
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
	cnt(cnt), arr(arr), countsPerRevolution(countsPerRevolution)
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <_ZN7EncoderC1EPVmS1_m+0x3c>)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	611a      	str	r2, [r3, #16]
{

}
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	0800fc48 	.word	0x0800fc48

080011f4 <_ZN7EncoderD1Ev>:

Encoder::~Encoder() {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <_ZN7EncoderD1Ev+0x1c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]

}
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	0800fc48 	.word	0x0800fc48

08001214 <_ZN7EncoderD0Ev>:
Encoder::~Encoder() {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
}
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ffe9 	bl	80011f4 <_ZN7EncoderD1Ev>
 8001222:	2114      	movs	r1, #20
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f009 f8df 	bl	800a3e8 <_ZdlPvj>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN7Encoder8getDeltaEv>:
uint32_t Encoder::getCount(){
	lastCount = *cnt;
	return lastCount;
}

int16_t Encoder::getDelta(){
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	int16_t delta =  *cnt - lastCount;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	b29b      	uxth	r3, r3
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	81fb      	strh	r3, [r7, #14]
	lastCount = *cnt;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60da      	str	r2, [r3, #12]
	return delta;
 800125a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_ZN7Encoder22getCountsPerRevolutionEv>:

uint32_t Encoder::getCountsPerRevolution(){
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	return countsPerRevolution;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_ZN5Motor8setPowerEf>:

class Motor {
public:
	Motor();
	virtual ~Motor();
	virtual void setPower(float power){}
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	ed87 0a00 	vstr	s0, [r7]
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include <cstdio>
#include "Definitions.hpp"

Motor::Motor() {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <_ZN5MotorC1Ev+0x44>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	0800fc58 	.word	0x0800fc58

080012e4 <_ZN5MotorD1Ev>:

Motor::~Motor() {
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <_ZN5MotorD1Ev+0x1c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	601a      	str	r2, [r3, #0]

}
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	0800fc58 	.word	0x0800fc58

08001304 <_ZN5MotorD0Ev>:
Motor::~Motor() {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
}
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ffe9 	bl	80012e4 <_ZN5MotorD1Ev>
 8001312:	2128      	movs	r1, #40	; 0x28
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f009 f867 	bl	800a3e8 <_ZdlPvj>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_ZN5Motor10setEncoderEP7Encoder>:

void Motor::setEncoder(Encoder* _encoder){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	encoder = _encoder;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	611a      	str	r2, [r3, #16]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_ZN5Motor20getCurrentRevPerTickEv>:

float Motor::getCurrentRevPerTick(){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
#endif
#ifdef CARENTE
	currentRevPerTick = (float)encoder->getDelta()/encoder->getCountsPerRevolution();
#endif
#endif
	return currentRevPerTick;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	ee07 3a90 	vmov	s15, r3
}
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <_ZN5Motor3pidEf>:

void Motor::pid(float inputRevPerTick){
 8001360:	b580      	push	{r7, lr}
 8001362:	ed2d 8b02 	vpush	{d8}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	ed87 0a00 	vstr	s0, [r7]
#if defined DEEPWEB || defined ROBO2023
	currentRevPerTick = -(float)encoder->getDelta()/encoder->getCountsPerRevolution();
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <_ZN7Encoder8getDeltaEv>
 800137a:	4603      	mov	r3, r0
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	eeb1 8a67 	vneg.f32	s16, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff6c 	bl	800126a <_ZN7Encoder22getCountsPerRevolutionEv>
 8001392:	ee07 0a90 	vmov	s15, r0
 8001396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800139a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
#endif
#ifdef CARENTE
	currentRevPerTick = (float)encoder->getDelta()/encoder->getCountsPerRevolution();
#endif
	lastError = error;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	621a      	str	r2, [r3, #32]
	error = inputRevPerTick - currentRevPerTick;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013b2:	ed97 7a00 	vldr	s14, [r7]
 80013b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	edc3 7a05 	vstr	s15, [r3, #20]
	derror = error - lastError;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	ed93 7a05 	vldr	s14, [r3, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80013cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edc3 7a07 	vstr	s15, [r3, #28]
	ierror += error;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edd3 7a05 	vldr	s15, [r3, #20]
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edc3 7a06 	vstr	s15, [r3, #24]
	if(ki*ierror > 1){		// Anti-windup (verificar possibilidades)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80013f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	dd0a      	ble.n	8001420 <_ZN5Motor3pidEf+0xc0>
		ierror = 1/ki;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001410:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edc3 7a06 	vstr	s15, [r3, #24]
 800141e:	e018      	b.n	8001452 <_ZN5Motor3pidEf+0xf2>
	}else if(ki*ierror < -1){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	ed93 7a02 	vldr	s14, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edd3 7a06 	vldr	s15, [r3, #24]
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	d509      	bpl.n	8001452 <_ZN5Motor3pidEf+0xf2>
		ierror = -1/ki;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	ed93 7a02 	vldr	s14, [r3, #8]
 8001444:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8001448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	edc3 7a06 	vstr	s15, [r3, #24]
	}
	float pid = kp*error + ki*ierror + kd*derror;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	ed93 7a01 	vldr	s14, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	edd3 7a05 	vldr	s15, [r3, #20]
 800145e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	edd3 6a02 	vldr	s13, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	edd3 7a06 	vldr	s15, [r3, #24]
 800146e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001472:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edd3 6a03 	vldr	s13, [r3, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148a:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pid > 1){		// Clamp
 800148e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	dd03      	ble.n	80014a8 <_ZN5Motor3pidEf+0x148>
		pid = 1;
 80014a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e00a      	b.n	80014be <_ZN5Motor3pidEf+0x15e>
	}else if(pid < -1){
 80014a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d501      	bpl.n	80014be <_ZN5Motor3pidEf+0x15e>
		pid = -1;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <_ZN5Motor3pidEf+0x17c>)
 80014bc:	60fb      	str	r3, [r7, #12]
	}
	setPower(pid);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3308      	adds	r3, #8
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	ed97 0a03 	vldr	s0, [r7, #12]
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	4798      	blx	r3
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	ecbd 8b02 	vpop	{d8}
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	bf800000 	.word	0xbf800000

080014e0 <_ZN5RobotC1Ev>:
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim3;

uint8_t buf[64];

Robot::Robot() {
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af06      	add	r7, sp, #24
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <_ZN5RobotC1Ev+0x84>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <_ZN5RobotC1Ev+0x88>)
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a1b      	ldr	r2, [pc, #108]	; (800156c <_ZN5RobotC1Ev+0x8c>)
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	687e      	ldr	r6, [r7, #4]
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <_ZN5RobotC1Ev+0x90>)
 8001506:	f106 0410 	add.w	r4, r6, #16
 800150a:	461d      	mov	r5, r3
 800150c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001510:	682b      	ldr	r3, [r5, #0]
 8001512:	8023      	strh	r3, [r4, #0]
 8001514:	f106 0322 	add.w	r3, r6, #34	; 0x22
 8001518:	f240 52ca 	movw	r2, #1482	; 0x5ca
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f008 ffae 	bl	800a480 <memset>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f603 30c8 	addw	r0, r3, #3016	; 0xbc8
 800152a:	2340      	movs	r3, #64	; 0x40
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <_ZN5RobotC1Ev+0x94>)
 800152e:	4912      	ldr	r1, [pc, #72]	; (8001578 <_ZN5RobotC1Ev+0x98>)
 8001530:	f7ff fe40 	bl	80011b4 <_ZN7EncoderC1EPVmS1_m>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f603 30dc 	addw	r0, r3, #3036	; 0xbdc
 800153a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153e:	9304      	str	r3, [sp, #16]
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <_ZN5RobotC1Ev+0x9c>)
 8001542:	9303      	str	r3, [sp, #12]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <_ZN5RobotC1Ev+0xa0>)
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <_ZN5RobotC1Ev+0xa4>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <_ZN5RobotC1Ev+0xa4>)
 8001552:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <_ZN5RobotC1Ev+0xa8>)
 8001554:	490d      	ldr	r1, [pc, #52]	; (800158c <_ZN5RobotC1Ev+0xac>)
 8001556:	f7ff fd4f 	bl	8000ff8 <_ZN8BTS7960BC1EPVmS1_S1_S1_P12GPIO_TypeDeftS3_t>

}
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	0800fc6c 	.word	0x0800fc6c
 8001568:	3ce56042 	.word	0x3ce56042
 800156c:	42c80000 	.word	0x42c80000
 8001570:	0800f5d0 	.word	0x0800f5d0
 8001574:	4000042c 	.word	0x4000042c
 8001578:	40000424 	.word	0x40000424
 800157c:	40020800 	.word	0x40020800
 8001580:	40020c00 	.word	0x40020c00
 8001584:	4001042c 	.word	0x4001042c
 8001588:	40010438 	.word	0x40010438
 800158c:	40010440 	.word	0x40010440

08001590 <_ZN5RobotD1Ev>:

Robot::~Robot() {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <_ZN5RobotD1Ev+0x30>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fde3 	bl	8001170 <_ZN8BTS7960BD1Ev>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fe1f 	bl	80011f4 <_ZN7EncoderD1Ev>

}
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	0800fc6c 	.word	0x0800fc6c

080015c4 <_ZN5RobotD0Ev>:
Robot::~Robot() {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
}
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffdf 	bl	8001590 <_ZN5RobotD1Ev>
 80015d2:	f640 4124 	movw	r1, #3108	; 0xc24
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f008 ff06 	bl	800a3e8 <_ZdlPvj>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_ZN5Robot11usbCallbackEPhPm>:

void Robot::usbCallback(uint8_t* Buf, uint32_t *Len){
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
	//HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxBuffer, 256);
	memcpy(rxBuffer, Buf, *Len);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f103 0010 	add.w	r0, r3, #16
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	f008 ff30 	bl	800a464 <memcpy>
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	0000      	movs	r0, r0
	...

08001610 <_ZN5Robot15controlCallbackEv>:

void Robot::controlCallback(){
 8001610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001614:	b08a      	sub	sp, #40	; 0x28
 8001616:	af06      	add	r7, sp, #24
 8001618:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800161a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161e:	485c      	ldr	r0, [pc, #368]	; (8001790 <_ZN5Robot15controlCallbackEv+0x180>)
 8001620:	f001 fb7b 	bl	8002d1a <HAL_GPIO_TogglePin>
	float desiredSpeed0;
	sscanf((char*)rxBuffer, "%f,%f", &desiredSpeed0);	// Desired speed in mm/s
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3310      	adds	r3, #16
 8001628:	f107 0208 	add.w	r2, r7, #8
 800162c:	4959      	ldr	r1, [pc, #356]	; (8001794 <_ZN5Robot15controlCallbackEv+0x184>)
 800162e:	4618      	mov	r0, r3
 8001630:	f009 febe 	bl	800b3b0 <siscanf>
	float convertedSpeed0 = desiredSpeed0*CONVERSION;	// Converted speed in rev/tick
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff86 	bl	8000548 <__aeabi_f2d>
 800163c:	4604      	mov	r4, r0
 800163e:	460d      	mov	r5, r1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff7f 	bl	8000548 <__aeabi_f2d>
 800164a:	4680      	mov	r8, r0
 800164c:	4689      	mov	r9, r1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	edd3 7a03 	vldr	s15, [r3, #12]
 8001654:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001658:	ee17 0a90 	vmov	r0, s15
 800165c:	f7fe ff74 	bl	8000548 <__aeabi_f2d>
 8001660:	a349      	add	r3, pc, #292	; (adr r3, 8001788 <_ZN5Robot15controlCallbackEv+0x178>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ffc7 	bl	80005f8 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4692      	mov	sl, r2
 8001670:	469b      	mov	fp, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff66 	bl	8000548 <__aeabi_f2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4650      	mov	r0, sl
 8001682:	4659      	mov	r1, fp
 8001684:	f7fe ffb8 	bl	80005f8 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4640      	mov	r0, r8
 800168e:	4649      	mov	r1, r9
 8001690:	f7ff f8dc 	bl	800084c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4620      	mov	r0, r4
 800169a:	4629      	mov	r1, r5
 800169c:	f7fe ffac 	bl	80005f8 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff fa9e 	bl	8000be8 <__aeabi_d2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]
#ifdef CONTROL_DISABLED
	motor0.setPower(desiredSpeed0);
#else
	motor0.pid(convertedSpeed0);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80016b6:	ed97 0a03 	vldr	s0, [r7, #12]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fe50 	bl	8001360 <_ZN5Motor3pidEf>
#endif
	sprintf((char*)buf, ">Speed:%+0.6e,%+0.6e,%+0.6e,%+0.6e",
			motor0.getCurrentRevPerTick()/CONVERSION,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fe3a 	bl	8001340 <_ZN5Motor20getCurrentRevPerTickEv>
 80016cc:	ee10 3a10 	vmov	r3, s0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff39 	bl	8000548 <__aeabi_f2d>
 80016d6:	4604      	mov	r4, r0
 80016d8:	460d      	mov	r5, r1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff32 	bl	8000548 <__aeabi_f2d>
 80016e4:	4680      	mov	r8, r0
 80016e6:	4689      	mov	r9, r1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80016ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016f2:	ee17 0a90 	vmov	r0, s15
 80016f6:	f7fe ff27 	bl	8000548 <__aeabi_f2d>
 80016fa:	a323      	add	r3, pc, #140	; (adr r3, 8001788 <_ZN5Robot15controlCallbackEv+0x178>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ff7a 	bl	80005f8 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4692      	mov	sl, r2
 800170a:	469b      	mov	fp, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff19 	bl	8000548 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4650      	mov	r0, sl
 800171c:	4659      	mov	r1, fp
 800171e:	f7fe ff6b 	bl	80005f8 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4640      	mov	r0, r8
 8001728:	4649      	mov	r1, r9
 800172a:	f7ff f88f 	bl	800084c <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
	sprintf((char*)buf, ">Speed:%+0.6e,%+0.6e,%+0.6e,%+0.6e",
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7ff f889 	bl	800084c <__aeabi_ddiv>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feff 	bl	8000548 <__aeabi_f2d>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	f04f 0000 	mov.w	r0, #0
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800175a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9cd 2300 	strd	r2, r3, [sp]
 800176a:	4622      	mov	r2, r4
 800176c:	462b      	mov	r3, r5
 800176e:	490a      	ldr	r1, [pc, #40]	; (8001798 <_ZN5Robot15controlCallbackEv+0x188>)
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <_ZN5Robot15controlCallbackEv+0x18c>)
 8001772:	f009 fdfd 	bl	800b370 <siprintf>
			0.,
			desiredSpeed0,
			0.);
	//HAL_UART_Transmit_DMA(&huart1, buf, 64);
	CDC_Transmit_FS(buf, 64);
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <_ZN5Robot15controlCallbackEv+0x18c>)
 800177a:	f008 f9cb 	bl	8009b14 <CDC_Transmit_FS>
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001788:	f01b866e 	.word	0xf01b866e
 800178c:	400921f9 	.word	0x400921f9
 8001790:	40020c00 	.word	0x40020c00
 8001794:	0800fbac 	.word	0x0800fbac
 8001798:	0800fbb4 	.word	0x0800fbb4
 800179c:	200002ec 	.word	0x200002ec

080017a0 <_ZN5Robot4initEv>:

void Robot::init(){
 80017a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	motor0.setEncoder(&encoder0);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f603 32dc 	addw	r2, r3, #3036	; 0xbdc
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f7ff fdb3 	bl	8001324 <_ZN5Motor10setEncoderEP7Encoder>
	motor0.kp = 0.44836/CONVERSION;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fec0 	bl	8000548 <__aeabi_f2d>
 80017c8:	4604      	mov	r4, r0
 80017ca:	460d      	mov	r5, r1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80017d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017d6:	ee17 0a90 	vmov	r0, s15
 80017da:	f7fe feb5 	bl	8000548 <__aeabi_f2d>
 80017de:	a36c      	add	r3, pc, #432	; (adr r3, 8001990 <_ZN5Robot4initEv+0x1f0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7fe ff08 	bl	80005f8 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4690      	mov	r8, r2
 80017ee:	4699      	mov	r9, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fea7 	bl	8000548 <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4640      	mov	r0, r8
 8001800:	4649      	mov	r1, r9
 8001802:	f7fe fef9 	bl	80005f8 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7ff f81d 	bl	800084c <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	a164      	add	r1, pc, #400	; (adr r1, 80019a8 <_ZN5Robot4initEv+0x208>)
 8001818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800181c:	f7ff f816 	bl	800084c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f9de 	bl	8000be8 <__aeabi_d2f>
 800182c:	4602      	mov	r2, r0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8001834:	601a      	str	r2, [r3, #0]
	motor0.ki = 16.64/(ticksPerSecond*CONVERSION);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe84 	bl	8000548 <__aeabi_f2d>
 8001840:	4604      	mov	r4, r0
 8001842:	460d      	mov	r5, r1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe7d 	bl	8000548 <__aeabi_f2d>
 800184e:	4680      	mov	r8, r0
 8001850:	4689      	mov	r9, r1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	edd3 7a03 	vldr	s15, [r3, #12]
 8001858:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800185c:	ee17 0a90 	vmov	r0, s15
 8001860:	f7fe fe72 	bl	8000548 <__aeabi_f2d>
 8001864:	a34a      	add	r3, pc, #296	; (adr r3, 8001990 <_ZN5Robot4initEv+0x1f0>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe fec5 	bl	80005f8 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4692      	mov	sl, r2
 8001874:	469b      	mov	fp, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe64 	bl	8000548 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4650      	mov	r0, sl
 8001886:	4659      	mov	r1, fp
 8001888:	f7fe feb6 	bl	80005f8 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4640      	mov	r0, r8
 8001892:	4649      	mov	r1, r9
 8001894:	f7fe ffda 	bl	800084c <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	a141      	add	r1, pc, #260	; (adr r1, 80019b0 <_ZN5Robot4initEv+0x210>)
 80018aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018ae:	f7fe ffcd 	bl	800084c <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f995 	bl	8000be8 <__aeabi_d2f>
 80018be:	4602      	mov	r2, r0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f603 33e4 	addw	r3, r3, #3044	; 0xbe4
 80018c6:	601a      	str	r2, [r3, #0]
	motor0.kd = 0*ticksPerSecond/CONVERSION;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ce:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001998 <_ZN5Robot4initEv+0x1f8>
 80018d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d6:	ee17 0a90 	vmov	r0, s15
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	4604      	mov	r4, r0
 80018e0:	460d      	mov	r5, r1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe2e 	bl	8000548 <__aeabi_f2d>
 80018ec:	4680      	mov	r8, r0
 80018ee:	4689      	mov	r9, r1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80018f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018fa:	ee17 0a90 	vmov	r0, s15
 80018fe:	f7fe fe23 	bl	8000548 <__aeabi_f2d>
 8001902:	a323      	add	r3, pc, #140	; (adr r3, 8001990 <_ZN5Robot4initEv+0x1f0>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe76 	bl	80005f8 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4692      	mov	sl, r2
 8001912:	469b      	mov	fp, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe15 	bl	8000548 <__aeabi_f2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4650      	mov	r0, sl
 8001924:	4659      	mov	r1, fp
 8001926:	f7fe fe67 	bl	80005f8 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4640      	mov	r0, r8
 8001930:	4649      	mov	r1, r9
 8001932:	f7fe ff8b 	bl	800084c <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4620      	mov	r0, r4
 800193c:	4629      	mov	r1, r5
 800193e:	f7fe ff85 	bl	800084c <__aeabi_ddiv>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f94d 	bl	8000be8 <__aeabi_d2f>
 800194e:	4602      	mov	r2, r0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8001956:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001958:	213c      	movs	r1, #60	; 0x3c
 800195a:	4810      	ldr	r0, [pc, #64]	; (800199c <_ZN5Robot4initEv+0x1fc>)
 800195c:	f003 fd6c 	bl	8005438 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001960:	2104      	movs	r1, #4
 8001962:	480f      	ldr	r0, [pc, #60]	; (80019a0 <_ZN5Robot4initEv+0x200>)
 8001964:	f003 fbec 	bl	8005140 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001968:	210c      	movs	r1, #12
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <_ZN5Robot4initEv+0x200>)
 800196c:	f003 fbe8 	bl	8005140 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <_ZN5Robot4initEv+0x204>)
 8001972:	f003 fb19 	bl	8004fa8 <HAL_TIM_Base_Start_IT>
	//HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxBuffer, 256);
	motor0.setEnabled(true);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fbc5 	bl	800110e <_ZN8BTS7960B10setEnabledEb>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800198e:	bf00      	nop
 8001990:	f01b866e 	.word	0xf01b866e
 8001994:	400921f9 	.word	0x400921f9
 8001998:	00000000 	.word	0x00000000
 800199c:	20000ffc 	.word	0x20000ffc
 80019a0:	20001164 	.word	0x20001164
 80019a4:	200010b0 	.word	0x200010b0
 80019a8:	2435696e 	.word	0x2435696e
 80019ac:	3fdcb1ee 	.word	0x3fdcb1ee
 80019b0:	0a3d70a4 	.word	0x0a3d70a4
 80019b4:	4030a3d7 	.word	0x4030a3d7

080019b8 <usbCallback>:

extern TIM_HandleTypeDef htim6;

Robot robot;

void usbCallback(uint8_t* Buf, uint32_t *Len){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	robot.usbCallback(Buf, Len);
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4803      	ldr	r0, [pc, #12]	; (80019d4 <usbCallback+0x1c>)
 80019c8:	f7ff fe0d 	bl	80015e6 <_ZN5Robot11usbCallbackEPhPm>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000032c 	.word	0x2000032c

080019d8 <_Z15controlCallbackP19__TIM_HandleTypeDef>:

void controlCallback(TIM_HandleTypeDef* htim){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	robot.controlCallback();
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <_Z15controlCallbackP19__TIM_HandleTypeDef+0x18>)
 80019e2:	f7ff fe15 	bl	8001610 <_ZN5Robot15controlCallbackEv>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000032c 	.word	0x2000032c

080019f4 <Start>:

void Start(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	htim6.PeriodElapsedCallback = controlCallback;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <Start+0x1c>)
 80019fa:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <Start+0x20>)
 80019fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	HAL_TIM_Base_Start_IT(&htim6);
 8001a00:	4803      	ldr	r0, [pc, #12]	; (8001a10 <Start+0x1c>)
 8001a02:	f003 fad1 	bl	8004fa8 <HAL_TIM_Base_Start_IT>
	robot.init();
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <Start+0x24>)
 8001a08:	f7ff feca 	bl	80017a0 <_ZN5Robot4initEv>
	while(true){
 8001a0c:	e7fe      	b.n	8001a0c <Start+0x18>
 8001a0e:	bf00      	nop
 8001a10:	200010b0 	.word	0x200010b0
 8001a14:	080019d9 	.word	0x080019d9
 8001a18:	2000032c 	.word	0x2000032c

08001a1c <_Z41__static_initialization_and_destruction_0ii>:

	}
}
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d102      	bne.n	8001a3c <_Z41__static_initialization_and_destruction_0ii+0x20>
Robot robot;
 8001a36:	4809      	ldr	r0, [pc, #36]	; (8001a5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a38:	f7ff fd52 	bl	80014e0 <_ZN5RobotC1Ev>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d102      	bne.n	8001a52 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a4e:	f7ff fd9f 	bl	8001590 <_ZN5RobotD1Ev>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000032c 	.word	0x2000032c

08001a60 <_GLOBAL__sub_I_robot>:
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f7ff ffd7 	bl	8001a1c <_Z41__static_initialization_and_destruction_0ii>
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_GLOBAL__sub_D_robot>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff ffcf 	bl	8001a1c <_Z41__static_initialization_and_destruction_0ii>
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a84:	f000 fdec 	bl	8002660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a88:	f000 f812 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8c:	f000 f9f8 	bl	8001e80 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a90:	f000 f878 	bl	8001b84 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a94:	f000 f8a4 	bl	8001be0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001a98:	f007 ff7a 	bl	8009990 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001a9c:	f000 f8d6 	bl	8001c4c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001aa0:	f000 f95e 	bl	8001d60 <MX_TIM8_Init>
  MX_TIM6_Init();
 8001aa4:	f000 f926 	bl	8001cf4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Start();
 8001aa8:	f7ff ffa4 	bl	80019f4 <Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <main+0x2c>
	...

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b094      	sub	sp, #80	; 0x50
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0320 	add.w	r3, r7, #32
 8001aba:	2230      	movs	r2, #48	; 0x30
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 fcde 	bl	800a480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <SystemClock_Config+0xcc>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <SystemClock_Config+0xcc>)
 8001ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <SystemClock_Config+0xcc>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af0:	2300      	movs	r3, #0
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <SystemClock_Config+0xd0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <SystemClock_Config+0xd0>)
 8001afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <SystemClock_Config+0xd0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b16:	2302      	movs	r3, #2
 8001b18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b20:	2308      	movs	r3, #8
 8001b22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fccc 	bl	80044d4 <HAL_RCC_OscConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b42:	f000 fac3 	bl	80020cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b46:	230f      	movs	r3, #15
 8001b48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2105      	movs	r1, #5
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 ff2d 	bl	80049c4 <HAL_RCC_ClockConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b70:	f000 faac 	bl	80020cc <Error_Handler>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3750      	adds	r7, #80	; 0x50
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000

08001b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <MX_I2C1_Init+0x54>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <MX_I2C1_Init+0x58>)
 8001b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bc2:	f001 f8c5 	bl	8002d50 <HAL_I2C_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bcc:	f000 fa7e 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000f50 	.word	0x20000f50
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <MX_SPI1_Init+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c32:	f003 f8d3 	bl	8004ddc <HAL_SPI_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c3c:	f000 fa46 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000fa4 	.word	0x20000fa4
 8001c48:	40013000 	.word	0x40013000

08001c4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f008 fc10 	bl	800a480 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <MX_TIM3_Init+0xa4>)
 8001c6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001cba:	f003 fb09 	bl	80052d0 <HAL_TIM_Encoder_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f000 fa02 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001cd6:	f004 f959 	bl	8005f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ce0:	f000 f9f4 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000ffc 	.word	0x20000ffc
 8001cf0:	40000400 	.word	0x40000400

08001cf4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d04:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <MX_TIM6_Init+0x68>)
 8001d06:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d0a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001d0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d18:	2263      	movs	r2, #99	; 0x63
 8001d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d24:	f003 f8e4 	bl	8004ef0 <HAL_TIM_Base_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d2e:	f000 f9cd 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d40:	f004 f924 	bl	8005f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d4a:	f000 f9bf 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200010b0 	.word	0x200010b0
 8001d5c:	40001000 	.word	0x40001000

08001d60 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b092      	sub	sp, #72	; 0x48
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
 8001d80:	615a      	str	r2, [r3, #20]
 8001d82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	2220      	movs	r2, #32
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f008 fb78 	bl	800a480 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d90:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001d92:	4a3a      	ldr	r2, [pc, #232]	; (8001e7c <MX_TIM8_Init+0x11c>)
 8001d94:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d96:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9c:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001da2:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001db0:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001dbc:	482e      	ldr	r0, [pc, #184]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001dbe:	f003 f963 	bl	8005088 <HAL_TIM_PWM_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001dc8:	f000 f980 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4827      	ldr	r0, [pc, #156]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001ddc:	f004 f8d6 	bl	8005f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001de6:	f000 f971 	bl	80020cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dea:	2360      	movs	r3, #96	; 0x60
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001df6:	2300      	movs	r3, #0
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	481a      	ldr	r0, [pc, #104]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001e10:	f003 fcc8 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001e1a:	f000 f957 	bl	80020cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	220c      	movs	r2, #12
 8001e24:	4619      	mov	r1, r3
 8001e26:	4814      	ldr	r0, [pc, #80]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001e28:	f003 fcbc 	bl	80057a4 <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001e32:	f000 f94b 	bl	80020cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4807      	ldr	r0, [pc, #28]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001e5a:	f004 f913 	bl	8006084 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001e64:	f000 f932 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001e6a:	f000 fa7f 	bl	800236c <HAL_TIM_MspPostInit>

}
 8001e6e:	bf00      	nop
 8001e70:	3748      	adds	r7, #72	; 0x48
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20001164 	.word	0x20001164
 8001e7c:	40010400 	.word	0x40010400

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	4b86      	ldr	r3, [pc, #536]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a85      	ldr	r2, [pc, #532]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b83      	ldr	r3, [pc, #524]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a7e      	ldr	r2, [pc, #504]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b7c      	ldr	r3, [pc, #496]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b78      	ldr	r3, [pc, #480]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a77      	ldr	r2, [pc, #476]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b71      	ldr	r3, [pc, #452]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a70      	ldr	r2, [pc, #448]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b6e      	ldr	r3, [pc, #440]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a62      	ldr	r2, [pc, #392]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2108      	movs	r1, #8
 8001f42:	485d      	ldr	r0, [pc, #372]	; (80020b8 <MX_GPIO_Init+0x238>)
 8001f44:	f000 fed0 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M0_MBL_GPIO_Port, M0_MBL_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f4e:	485b      	ldr	r0, [pc, #364]	; (80020bc <MX_GPIO_Init+0x23c>)
 8001f50:	f000 feca 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f54:	2201      	movs	r2, #1
 8001f56:	2101      	movs	r1, #1
 8001f58:	4858      	ldr	r0, [pc, #352]	; (80020bc <MX_GPIO_Init+0x23c>)
 8001f5a:	f000 fec5 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f24f 0190 	movw	r1, #61584	; 0xf090
 8001f64:	4856      	ldr	r0, [pc, #344]	; (80020c0 <MX_GPIO_Init+0x240>)
 8001f66:	f000 febf 	bl	8002ce8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|M0_MAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	484d      	ldr	r0, [pc, #308]	; (80020b8 <MX_GPIO_Init+0x238>)
 8001f82:	f000 fd15 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_MBL_Pin OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = M0_MBL_Pin|OTG_FS_PowerSwitchOn_Pin;
 8001f86:	f242 0301 	movw	r3, #8193	; 0x2001
 8001f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4847      	ldr	r0, [pc, #284]	; (80020bc <MX_GPIO_Init+0x23c>)
 8001fa0:	f000 fd06 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	483f      	ldr	r0, [pc, #252]	; (80020bc <MX_GPIO_Init+0x23c>)
 8001fc0:	f000 fcf6 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fc8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	483a      	ldr	r0, [pc, #232]	; (80020c4 <MX_GPIO_Init+0x244>)
 8001fda:	f000 fce9 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001fde:	2310      	movs	r3, #16
 8001fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fee:	2306      	movs	r3, #6
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4832      	ldr	r0, [pc, #200]	; (80020c4 <MX_GPIO_Init+0x244>)
 8001ffa:	f000 fcd9 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ffe:	2304      	movs	r3, #4
 8002000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	482d      	ldr	r0, [pc, #180]	; (80020c8 <MX_GPIO_Init+0x248>)
 8002012:	f000 fccd 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002028:	2305      	movs	r3, #5
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	4619      	mov	r1, r3
 8002032:	4825      	ldr	r0, [pc, #148]	; (80020c8 <MX_GPIO_Init+0x248>)
 8002034:	f000 fcbc 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin M0_MAL_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002038:	f24f 0390 	movw	r3, #61584	; 0xf090
 800203c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|M0_MAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203e:	2301      	movs	r3, #1
 8002040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	4619      	mov	r1, r3
 8002050:	481b      	ldr	r0, [pc, #108]	; (80020c0 <MX_GPIO_Init+0x240>)
 8002052:	f000 fcad 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8002056:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800205a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002068:	2306      	movs	r3, #6
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	4812      	ldr	r0, [pc, #72]	; (80020bc <MX_GPIO_Init+0x23c>)
 8002074:	f000 fc9c 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002078:	2320      	movs	r3, #32
 800207a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <MX_GPIO_Init+0x240>)
 800208c:	f000 fc90 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002090:	2302      	movs	r3, #2
 8002092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002094:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	4619      	mov	r1, r3
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <MX_GPIO_Init+0x238>)
 80020a6:	f000 fc83 	bl	80029b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020aa:	bf00      	nop
 80020ac:	3730      	adds	r7, #48	; 0x30
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40020800 	.word	0x40020800
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40020400 	.word	0x40020400

080020cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d0:	b672      	cpsid	i
}
 80020d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <Error_Handler+0x8>
	...

080020d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_MspInit+0x4c>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_MspInit+0x4c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_MspInit+0x4c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_MspInit+0x4c>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_MspInit+0x4c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002116:	2007      	movs	r0, #7
 8002118:	f000 fc08 	bl	800292c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800

08002128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a19      	ldr	r2, [pc, #100]	; (80021ac <HAL_I2C_MspInit+0x84>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d12c      	bne.n	80021a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002166:	f44f 7310 	mov.w	r3, #576	; 0x240
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800216c:	2312      	movs	r3, #18
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002170:	2301      	movs	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002178:	2304      	movs	r3, #4
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <HAL_I2C_MspInit+0x8c>)
 8002184:	f000 fc14 	bl	80029b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 8002192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021a4:	bf00      	nop
 80021a6:	3728      	adds	r7, #40	; 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40005400 	.word	0x40005400
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020400 	.word	0x40020400

080021b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_SPI_MspInit+0x84>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d12b      	bne.n	8002232 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a17      	ldr	r2, [pc, #92]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a10      	ldr	r2, [pc, #64]	; (8002240 <HAL_SPI_MspInit+0x88>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_SPI_MspInit+0x88>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002212:	23e0      	movs	r3, #224	; 0xe0
 8002214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002222:	2305      	movs	r3, #5
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	; (8002244 <HAL_SPI_MspInit+0x8c>)
 800222e:	f000 fbbf 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40013000 	.word	0x40013000
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000

08002248 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <HAL_TIM_Encoder_MspInit+0x84>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d12b      	bne.n	80022c2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x88>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x88>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022a2:	2330      	movs	r3, #48	; 0x30
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022b2:	2302      	movs	r3, #2
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022be:	f000 fb77 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022c2:	bf00      	nop
 80022c4:	3728      	adds	r7, #40	; 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020400 	.word	0x40020400

080022d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_TIM_Base_MspInit+0x48>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d115      	bne.n	8002316 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_TIM_Base_MspInit+0x4c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <HAL_TIM_Base_MspInit+0x4c>)
 80022f4:	f043 0310 	orr.w	r3, r3, #16
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_TIM_Base_MspInit+0x4c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2036      	movs	r0, #54	; 0x36
 800230c:	f000 fb19 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002310:	2036      	movs	r0, #54	; 0x36
 8002312:	f000 fb32 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40001000 	.word	0x40001000
 8002324:	40023800 	.word	0x40023800

08002328 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <HAL_TIM_PWM_MspInit+0x3c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10d      	bne.n	8002356 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_TIM_PWM_MspInit+0x40>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_TIM_PWM_MspInit+0x40>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <HAL_TIM_PWM_MspInit+0x40>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40010400 	.word	0x40010400
 8002368:	40023800 	.word	0x40023800

0800236c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <HAL_TIM_MspPostInit+0x68>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d11e      	bne.n	80023cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_TIM_MspPostInit+0x6c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_TIM_MspPostInit+0x6c>)
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_TIM_MspPostInit+0x6c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80023aa:	f44f 7320 	mov.w	r3, #640	; 0x280
 80023ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023bc:	2303      	movs	r3, #3
 80023be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4619      	mov	r1, r3
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <HAL_TIM_MspPostInit+0x70>)
 80023c8:	f000 faf2 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40010400 	.word	0x40010400
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020800 	.word	0x40020800

080023e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <NMI_Handler+0x4>

080023e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <MemManage_Handler+0x4>

080023f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <BusFault_Handler+0x4>

080023f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <UsageFault_Handler+0x4>

080023fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242c:	f000 f96a 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <TIM6_DAC_IRQHandler+0x10>)
 800243a:	f003 f88b 	bl	8005554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200010b0 	.word	0x200010b0

08002448 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <OTG_FS_IRQHandler+0x10>)
 800244e:	f000 ff13 	bl	8003278 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20002700 	.word	0x20002700

0800245c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return 1;
 8002460:	2301      	movs	r3, #1
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_kill>:

int _kill(int pid, int sig)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002476:	f007 ffbb 	bl	800a3f0 <__errno>
 800247a:	4603      	mov	r3, r0
 800247c:	2216      	movs	r2, #22
 800247e:	601a      	str	r2, [r3, #0]
  return -1;
 8002480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <_exit>:

void _exit (int status)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ffe7 	bl	800246c <_kill>
  while (1) {}    /* Make sure we hang here */
 800249e:	e7fe      	b.n	800249e <_exit+0x12>

080024a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	e00a      	b.n	80024c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024b2:	f3af 8000 	nop.w
 80024b6:	4601      	mov	r1, r0
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	60ba      	str	r2, [r7, #8]
 80024be:	b2ca      	uxtb	r2, r1
 80024c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3301      	adds	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	dbf0      	blt.n	80024b2 <_read+0x12>
  }

  return len;
 80024d0:	687b      	ldr	r3, [r7, #4]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	e009      	b.n	8002500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	60ba      	str	r2, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	dbf1      	blt.n	80024ec <_write+0x12>
  }
  return len;
 8002508:	687b      	ldr	r3, [r7, #4]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_close>:

int _close(int file)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800253a:	605a      	str	r2, [r3, #4]
  return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <_isatty>:

int _isatty(int file)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <_sbrk+0x5c>)
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <_sbrk+0x60>)
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <_sbrk+0x64>)
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <_sbrk+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d207      	bcs.n	80025bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025ac:	f007 ff20 	bl	800a3f0 <__errno>
 80025b0:	4603      	mov	r3, r0
 80025b2:	220c      	movs	r2, #12
 80025b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	e009      	b.n	80025d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <_sbrk+0x64>)
 80025cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20020000 	.word	0x20020000
 80025dc:	00000400 	.word	0x00000400
 80025e0:	20001218 	.word	0x20001218
 80025e4:	20002e40 	.word	0x20002e40

080025e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <SystemInit+0x20>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <SystemInit+0x20>)
 80025f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800260c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002612:	490e      	ldr	r1, [pc, #56]	; (800264c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002628:	4c0b      	ldr	r4, [pc, #44]	; (8002658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002636:	f7ff ffd7 	bl	80025e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800263a:	f007 fedf 	bl	800a3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263e:	f7ff fa1f 	bl	8001a80 <main>
  bx  lr    
 8002642:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800264c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8002650:	0801015c 	.word	0x0801015c
  ldr r2, =_sbss
 8002654:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002658:	20002e3c 	.word	0x20002e3c

0800265c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800265c:	e7fe      	b.n	800265c <ADC_IRQHandler>
	...

08002660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_Init+0x40>)
 800266a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_Init+0x40>)
 8002676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800267a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_Init+0x40>)
 8002682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002688:	2003      	movs	r0, #3
 800268a:	f000 f94f 	bl	800292c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268e:	2000      	movs	r0, #0
 8002690:	f000 f808 	bl	80026a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002694:	f7ff fd20 	bl	80020d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_InitTick+0x54>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_InitTick+0x58>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f967 	bl	8002996 <HAL_SYSTICK_Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00e      	b.n	80026f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d80a      	bhi.n	80026ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d8:	2200      	movs	r2, #0
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f000 f92f 	bl	8002942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e4:	4a06      	ldr	r2, [pc, #24]	; (8002700 <HAL_InitTick+0x5c>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000008 	.word	0x20000008
 8002700:	20000004 	.word	0x20000004

08002704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_IncTick+0x20>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_IncTick+0x24>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_IncTick+0x24>)
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000008 	.word	0x20000008
 8002728:	2000121c 	.word	0x2000121c

0800272c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return uwTick;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_GetTick+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2000121c 	.word	0x2000121c

08002744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff ffee 	bl	800272c <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d005      	beq.n	800276a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_Delay+0x44>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800276a:	bf00      	nop
 800276c:	f7ff ffde 	bl	800272c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d8f7      	bhi.n	800276c <HAL_Delay+0x28>
  {
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000008 	.word	0x20000008

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <__NVIC_EnableIRQ+0x38>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f8:	d301      	bcc.n	80028fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00f      	b.n	800291e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <SysTick_Config+0x40>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002906:	210f      	movs	r1, #15
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f7ff ff8e 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <SysTick_Config+0x40>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SysTick_Config+0x40>)
 8002918:	2207      	movs	r2, #7
 800291a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	e000e010 	.word	0xe000e010

0800292c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff29 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002954:	f7ff ff3e 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 8002958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff ff8e 	bl	8002880 <NVIC_EncodePriority>
 8002964:	4602      	mov	r2, r0
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff5d 	bl	800282c <__NVIC_SetPriority>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff31 	bl	80027f0 <__NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ffa2 	bl	80028e8 <SysTick_Config>
 80029a4:	4603      	mov	r3, r0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e16b      	b.n	8002ca4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 815a 	bne.w	8002c9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80b4 	beq.w	8002c9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b60      	ldr	r3, [pc, #384]	; (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a5f      	ldr	r2, [pc, #380]	; (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a5b      	ldr	r2, [pc, #364]	; (8002cc0 <HAL_GPIO_Init+0x310>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_GPIO_Init+0x314>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02b      	beq.n	8002bd6 <HAL_GPIO_Init+0x226>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a51      	ldr	r2, [pc, #324]	; (8002cc8 <HAL_GPIO_Init+0x318>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d025      	beq.n	8002bd2 <HAL_GPIO_Init+0x222>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a50      	ldr	r2, [pc, #320]	; (8002ccc <HAL_GPIO_Init+0x31c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <HAL_GPIO_Init+0x21e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4f      	ldr	r2, [pc, #316]	; (8002cd0 <HAL_GPIO_Init+0x320>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d019      	beq.n	8002bca <HAL_GPIO_Init+0x21a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4e      	ldr	r2, [pc, #312]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_GPIO_Init+0x216>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4d      	ldr	r2, [pc, #308]	; (8002cd8 <HAL_GPIO_Init+0x328>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_GPIO_Init+0x212>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4c      	ldr	r2, [pc, #304]	; (8002cdc <HAL_GPIO_Init+0x32c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <HAL_GPIO_Init+0x20e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4b      	ldr	r2, [pc, #300]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_Init+0x20a>
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	e00e      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	e00c      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	e00a      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	e008      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e006      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e004      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f002 0203 	and.w	r2, r2, #3
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	4093      	lsls	r3, r2
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be8:	4935      	ldr	r1, [pc, #212]	; (8002cc0 <HAL_GPIO_Init+0x310>)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c1a:	4a32      	ldr	r2, [pc, #200]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c44:	4a27      	ldr	r2, [pc, #156]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c98:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b0f      	cmp	r3, #15
 8002ca8:	f67f ae90 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	40020800 	.word	0x40020800
 8002cd0:	40020c00 	.word	0x40020c00
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40021400 	.word	0x40021400
 8002cdc:	40021800 	.word	0x40021800
 8002ce0:	40021c00 	.word	0x40021c00
 8002ce4:	40013c00 	.word	0x40013c00

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d2c:	887a      	ldrh	r2, [r7, #2]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4013      	ands	r3, r2
 8002d32:	041a      	lsls	r2, r3, #16
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	400b      	ands	r3, r1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	619a      	str	r2, [r3, #24]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e12b      	b.n	8002fba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff f9d6 	bl	8002128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2224      	movs	r2, #36	; 0x24
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002db4:	f001 fffe 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 8002db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a81      	ldr	r2, [pc, #516]	; (8002fc4 <HAL_I2C_Init+0x274>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d807      	bhi.n	8002dd4 <HAL_I2C_Init+0x84>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a80      	ldr	r2, [pc, #512]	; (8002fc8 <HAL_I2C_Init+0x278>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e006      	b.n	8002de2 <HAL_I2C_Init+0x92>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a7d      	ldr	r2, [pc, #500]	; (8002fcc <HAL_I2C_Init+0x27c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	bf94      	ite	ls
 8002ddc:	2301      	movls	r3, #1
 8002dde:	2300      	movhi	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0e7      	b.n	8002fba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4a78      	ldr	r2, [pc, #480]	; (8002fd0 <HAL_I2C_Init+0x280>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0c9b      	lsrs	r3, r3, #18
 8002df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a6a      	ldr	r2, [pc, #424]	; (8002fc4 <HAL_I2C_Init+0x274>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d802      	bhi.n	8002e24 <HAL_I2C_Init+0xd4>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	3301      	adds	r3, #1
 8002e22:	e009      	b.n	8002e38 <HAL_I2C_Init+0xe8>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	4a69      	ldr	r2, [pc, #420]	; (8002fd4 <HAL_I2C_Init+0x284>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	099b      	lsrs	r3, r3, #6
 8002e36:	3301      	adds	r3, #1
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	495c      	ldr	r1, [pc, #368]	; (8002fc4 <HAL_I2C_Init+0x274>)
 8002e54:	428b      	cmp	r3, r1
 8002e56:	d819      	bhi.n	8002e8c <HAL_I2C_Init+0x13c>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1e59      	subs	r1, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e66:	1c59      	adds	r1, r3, #1
 8002e68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e6c:	400b      	ands	r3, r1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_I2C_Init+0x138>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1e59      	subs	r1, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e80:	3301      	adds	r3, #1
 8002e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e86:	e051      	b.n	8002f2c <HAL_I2C_Init+0x1dc>
 8002e88:	2304      	movs	r3, #4
 8002e8a:	e04f      	b.n	8002f2c <HAL_I2C_Init+0x1dc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d111      	bne.n	8002eb8 <HAL_I2C_Init+0x168>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	440b      	add	r3, r1
 8002ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e012      	b.n	8002ede <HAL_I2C_Init+0x18e>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e58      	subs	r0, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	0099      	lsls	r1, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Init+0x196>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e022      	b.n	8002f2c <HAL_I2C_Init+0x1dc>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10e      	bne.n	8002f0c <HAL_I2C_Init+0x1bc>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1e58      	subs	r0, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	440b      	add	r3, r1
 8002efc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0a:	e00f      	b.n	8002f2c <HAL_I2C_Init+0x1dc>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1e58      	subs	r0, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	0099      	lsls	r1, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	6809      	ldr	r1, [r1, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69da      	ldr	r2, [r3, #28]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6911      	ldr	r1, [r2, #16]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	4311      	orrs	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	000186a0 	.word	0x000186a0
 8002fc8:	001e847f 	.word	0x001e847f
 8002fcc:	003d08ff 	.word	0x003d08ff
 8002fd0:	431bde83 	.word	0x431bde83
 8002fd4:	10624dd3 	.word	0x10624dd3

08002fd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fda:	b08f      	sub	sp, #60	; 0x3c
 8002fdc:	af0a      	add	r7, sp, #40	; 0x28
 8002fde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e10f      	b.n	800320a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f006 fecd 	bl	8009da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f003 f9b0 	bl	800638e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	687e      	ldr	r6, [r7, #4]
 8003036:	466d      	mov	r5, sp
 8003038:	f106 0410 	add.w	r4, r6, #16
 800303c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003044:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003048:	e885 0003 	stmia.w	r5, {r0, r1}
 800304c:	1d33      	adds	r3, r6, #4
 800304e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003050:	6838      	ldr	r0, [r7, #0]
 8003052:	f003 f887 	bl	8006164 <USB_CoreInit>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0d0      	b.n	800320a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f003 f99e 	bl	80063b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e04a      	b.n	8003110 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	333d      	adds	r3, #61	; 0x3d
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	333c      	adds	r3, #60	; 0x3c
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	b298      	uxth	r0, r3
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3344      	adds	r3, #68	; 0x44
 80030b6:	4602      	mov	r2, r0
 80030b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3340      	adds	r3, #64	; 0x40
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3348      	adds	r3, #72	; 0x48
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	334c      	adds	r3, #76	; 0x4c
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	3354      	adds	r3, #84	; 0x54
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	3301      	adds	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	429a      	cmp	r2, r3
 8003118:	d3af      	bcc.n	800307a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e044      	b.n	80031aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	3301      	adds	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3b5      	bcc.n	8003120 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	687e      	ldr	r6, [r7, #4]
 80031bc:	466d      	mov	r5, sp
 80031be:	f106 0410 	add.w	r4, r6, #16
 80031c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80031d2:	1d33      	adds	r3, r6, #4
 80031d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d6:	6838      	ldr	r0, [r7, #0]
 80031d8:	f003 f936 	bl	8006448 <USB_DevInit>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00d      	b.n	800320a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f004 fa85 	bl	8007712 <USB_DevDisconnect>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003212 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_PCD_Start+0x1c>
 800322a:	2302      	movs	r3, #2
 800322c:	e020      	b.n	8003270 <HAL_PCD_Start+0x5e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	2b01      	cmp	r3, #1
 800323c:	d109      	bne.n	8003252 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003242:	2b01      	cmp	r3, #1
 8003244:	d005      	beq.n	8003252 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f003 f888 	bl	800636c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f004 fa35 	bl	80076d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b08d      	sub	sp, #52	; 0x34
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f004 faf3 	bl	800787a <USB_GetMode>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 848a 	bne.w	8003bb0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f004 fa57 	bl	8007754 <USB_ReadInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8480 	beq.w	8003bae <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f004 fa44 	bl	8007754 <USB_ReadInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d107      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f002 0202 	and.w	r2, r2, #2
 80032e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f004 fa32 	bl	8007754 <USB_ReadInterrupts>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b10      	cmp	r3, #16
 80032f8:	d161      	bne.n	80033be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0210 	bic.w	r2, r2, #16
 8003308:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	3304      	adds	r3, #4
 8003328:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	0c5b      	lsrs	r3, r3, #17
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	2b02      	cmp	r3, #2
 8003334:	d124      	bne.n	8003380 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d035      	beq.n	80033ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800334c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003350:	b29b      	uxth	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	6a38      	ldr	r0, [r7, #32]
 8003356:	f004 f869 	bl	800742c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003366:	441a      	add	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	6a1a      	ldr	r2, [r3, #32]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003378:	441a      	add	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	621a      	str	r2, [r3, #32]
 800337e:	e016      	b.n	80033ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	0c5b      	lsrs	r3, r3, #17
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	2b06      	cmp	r3, #6
 800338a:	d110      	bne.n	80033ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003392:	2208      	movs	r2, #8
 8003394:	4619      	mov	r1, r3
 8003396:	6a38      	ldr	r0, [r7, #32]
 8003398:	f004 f848 	bl	800742c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	6a1a      	ldr	r2, [r3, #32]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a8:	441a      	add	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0210 	orr.w	r2, r2, #16
 80033bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 f9c6 	bl	8007754 <USB_ReadInterrupts>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033d2:	f040 80a7 	bne.w	8003524 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 f9cb 	bl	800777a <USB_ReadDevAllOutEpInterrupt>
 80033e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033e6:	e099      	b.n	800351c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 808e 	beq.w	8003510 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 f9ef 	bl	80077e2 <USB_ReadDevOutEPInterrupt>
 8003404:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00c      	beq.n	800342a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341c:	461a      	mov	r2, r3
 800341e:	2301      	movs	r3, #1
 8003420:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fec3 	bl	80041b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	461a      	mov	r2, r3
 8003442:	2308      	movs	r3, #8
 8003444:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003446:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 ff99 	bl	8004380 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003464:	461a      	mov	r2, r3
 8003466:	2310      	movs	r3, #16
 8003468:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d030      	beq.n	80034d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d109      	bne.n	8003494 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800348e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003492:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	3304      	adds	r3, #4
 80034a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	78db      	ldrb	r3, [r3, #3]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d108      	bne.n	80034c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f006 fd84 	bl	8009fcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d0:	461a      	mov	r2, r3
 80034d2:	2302      	movs	r3, #2
 80034d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	461a      	mov	r2, r3
 80034ee:	2320      	movs	r3, #32
 80034f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d009      	beq.n	8003510 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003508:	461a      	mov	r2, r3
 800350a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800350e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	3301      	adds	r3, #1
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	f47f af62 	bne.w	80033e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f004 f913 	bl	8007754 <USB_ReadInterrupts>
 800352e:	4603      	mov	r3, r0
 8003530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003534:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003538:	f040 80db 	bne.w	80036f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f004 f934 	bl	80077ae <USB_ReadDevAllInEpInterrupt>
 8003546:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800354c:	e0cd      	b.n	80036ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80c2 	beq.w	80036de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f004 f95a 	bl	800781e <USB_ReadDevInEPInterrupt>
 800356a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d057      	beq.n	8003626 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	2201      	movs	r2, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	43db      	mvns	r3, r3
 8003590:	69f9      	ldr	r1, [r7, #28]
 8003592:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003596:	4013      	ands	r3, r2
 8003598:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a6:	461a      	mov	r2, r3
 80035a8:	2301      	movs	r3, #1
 80035aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d132      	bne.n	800361a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	4613      	mov	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	334c      	adds	r3, #76	; 0x4c
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4403      	add	r3, r0
 80035d4:	3348      	adds	r3, #72	; 0x48
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4419      	add	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4403      	add	r3, r0
 80035e8:	334c      	adds	r3, #76	; 0x4c
 80035ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d113      	bne.n	800361a <HAL_PCD_IRQHandler+0x3a2>
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	3354      	adds	r3, #84	; 0x54
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d108      	bne.n	800361a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003612:	461a      	mov	r2, r3
 8003614:	2101      	movs	r1, #1
 8003616:	f004 f961 	bl	80078dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	b2db      	uxtb	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f006 fc4e 	bl	8009ec2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363c:	461a      	mov	r2, r3
 800363e:	2308      	movs	r3, #8
 8003640:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003658:	461a      	mov	r2, r3
 800365a:	2310      	movs	r3, #16
 800365c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	461a      	mov	r2, r3
 8003676:	2340      	movs	r3, #64	; 0x40
 8003678:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d023      	beq.n	80036cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003686:	6a38      	ldr	r0, [r7, #32]
 8003688:	f003 f842 	bl	8006710 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800368c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	3338      	adds	r3, #56	; 0x38
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	3304      	adds	r3, #4
 800369e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	78db      	ldrb	r3, [r3, #3]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d108      	bne.n	80036ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2200      	movs	r2, #0
 80036ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f006 fc9b 	bl	8009ff0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c6:	461a      	mov	r2, r3
 80036c8:	2302      	movs	r3, #2
 80036ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fcdb 	bl	8004094 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	3301      	adds	r3, #1
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f47f af2e 	bne.w	800354e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f004 f82c 	bl	8007754 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003706:	d122      	bne.n	800374e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003722:	2b01      	cmp	r3, #1
 8003724:	d108      	bne.n	8003738 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800372e:	2100      	movs	r1, #0
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fec3 	bl	80044bc <HAL_PCDEx_LPM_Callback>
 8003736:	e002      	b.n	800373e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f006 fc39 	bl	8009fb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800374c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f003 fffe 	bl	8007754 <USB_ReadInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003762:	d112      	bne.n	800378a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d102      	bne.n	800377a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f006 fbf5 	bl	8009f64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003788:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f003 ffe0 	bl	8007754 <USB_ReadInterrupts>
 8003794:	4603      	mov	r3, r0
 8003796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	f040 80b7 	bne.w	8003910 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2110      	movs	r1, #16
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 ffa7 	bl	8006710 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c6:	e046      	b.n	8003856 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d4:	461a      	mov	r2, r3
 80037d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ec:	0151      	lsls	r1, r2, #5
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	440a      	add	r2, r1
 80037f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003808:	461a      	mov	r2, r3
 800380a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800380e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	440a      	add	r2, r1
 8003826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800382a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800382e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003840:	0151      	lsls	r1, r2, #5
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	440a      	add	r2, r1
 8003846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800384a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800384e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	3301      	adds	r3, #1
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385c:	429a      	cmp	r2, r3
 800385e:	d3b3      	bcc.n	80037c8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003872:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	2b00      	cmp	r3, #0
 800387a:	d016      	beq.n	80038aa <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800388c:	f043 030b 	orr.w	r3, r3, #11
 8003890:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a2:	f043 030b 	orr.w	r3, r3, #11
 80038a6:	6453      	str	r3, [r2, #68]	; 0x44
 80038a8:	e015      	b.n	80038d6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038bc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d0:	f043 030b 	orr.w	r3, r3, #11
 80038d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038fa:	461a      	mov	r2, r3
 80038fc:	f003 ffee 	bl	80078dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800390e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f003 ff1d 	bl	8007754 <USB_ReadInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003924:	d124      	bne.n	8003970 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f003 ffb3 	bl	8007896 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f002 ff68 	bl	800680a <USB_GetDevSpeed>
 800393a:	4603      	mov	r3, r0
 800393c:	461a      	mov	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681c      	ldr	r4, [r3, #0]
 8003946:	f001 fa29 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 800394a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	4620      	mov	r0, r4
 8003956:	f002 fc67 	bl	8006228 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f006 fad9 	bl	8009f12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800396e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f003 feed 	bl	8007754 <USB_ReadInterrupts>
 800397a:	4603      	mov	r3, r0
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b08      	cmp	r3, #8
 8003982:	d10a      	bne.n	800399a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f006 fab6 	bl	8009ef6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f002 0208 	and.w	r2, r2, #8
 8003998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fed8 	bl	8007754 <USB_ReadInterrupts>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b80      	cmp	r3, #128	; 0x80
 80039ac:	d122      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ba:	2301      	movs	r3, #1
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
 80039be:	e014      	b.n	80039ea <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d105      	bne.n	80039e4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	4619      	mov	r1, r3
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fb27 	bl	8004032 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	3301      	adds	r3, #1
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3e5      	bcc.n	80039c0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 feab 	bl	8007754 <USB_ReadInterrupts>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a08:	d13b      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	e02b      	b.n	8003a68 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3340      	adds	r3, #64	; 0x40
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d115      	bne.n	8003a62 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	da12      	bge.n	8003a62 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	333f      	adds	r3, #63	; 0x3f
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fae8 	bl	8004032 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	3301      	adds	r3, #1
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d3ce      	bcc.n	8003a10 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f003 fe64 	bl	8007754 <USB_ReadInterrupts>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a96:	d155      	bne.n	8003b44 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a98:	2301      	movs	r3, #1
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	e045      	b.n	8003b2a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d12e      	bne.n	8003b24 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ac6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	da2b      	bge.n	8003b24 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003ad8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d121      	bne.n	8003b24 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b20:	6053      	str	r3, [r2, #4]
            break;
 8003b22:	e007      	b.n	8003b34 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	3301      	adds	r3, #1
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3b4      	bcc.n	8003a9e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f003 fe03 	bl	8007754 <USB_ReadInterrupts>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d10a      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f006 fa5a 	bl	800a014 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f003 fded 	bl	8007754 <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d115      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f006 fa4a 	bl	800a030 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	e000      	b.n	8003bb0 <HAL_PCD_IRQHandler+0x938>
      return;
 8003bae:	bf00      	nop
    }
  }
}
 8003bb0:	3734      	adds	r7, #52	; 0x34
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd90      	pop	{r4, r7, pc}

08003bb6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_PCD_SetAddress+0x1a>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e013      	b.n	8003bf8 <HAL_PCD_SetAddress+0x42>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 fd4b 	bl	8007684 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	70fb      	strb	r3, [r7, #3]
 8003c12:	460b      	mov	r3, r1
 8003c14:	803b      	strh	r3, [r7, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	da0f      	bge.n	8003c46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c26:	78fb      	ldrb	r3, [r7, #3]
 8003c28:	f003 020f 	and.w	r2, r3, #15
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	3338      	adds	r3, #56	; 0x38
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	705a      	strb	r2, [r3, #1]
 8003c44:	e00f      	b.n	8003c66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c72:	883a      	ldrh	r2, [r7, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	78ba      	ldrb	r2, [r7, #2]
 8003c7c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	785b      	ldrb	r3, [r3, #1]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c90:	78bb      	ldrb	r3, [r7, #2]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d102      	bne.n	8003c9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_PCD_EP_Open+0xaa>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e00e      	b.n	8003cc8 <HAL_PCD_EP_Open+0xc8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68f9      	ldr	r1, [r7, #12]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f002 fdcb 	bl	8006854 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003cc6:	7afb      	ldrb	r3, [r7, #11]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	da0f      	bge.n	8003d04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	f003 020f 	and.w	r2, r3, #15
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	3338      	adds	r3, #56	; 0x38
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	705a      	strb	r2, [r3, #1]
 8003d02:	e00f      	b.n	8003d24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	f003 020f 	and.w	r2, r3, #15
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_PCD_EP_Close+0x6e>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e00e      	b.n	8003d5c <HAL_PCD_EP_Close+0x8c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68f9      	ldr	r1, [r7, #12]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f002 fe09 	bl	8006964 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	460b      	mov	r3, r1
 8003d72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d74:	7afb      	ldrb	r3, [r7, #11]
 8003d76:	f003 020f 	and.w	r2, r3, #15
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4413      	add	r3, r2
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2200      	movs	r2, #0
 8003da4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da6:	7afb      	ldrb	r3, [r7, #11]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d102      	bne.n	8003dc0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dc0:	7afb      	ldrb	r3, [r7, #11]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6979      	ldr	r1, [r7, #20]
 8003dd8:	f003 f8e8 	bl	8006fac <USB_EP0StartXfer>
 8003ddc:	e008      	b.n	8003df0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	6979      	ldr	r1, [r7, #20]
 8003dec:	f002 fe96 	bl	8006b1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	f003 020f 	and.w	r2, r3, #15
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e1c:	681b      	ldr	r3, [r3, #0]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	460b      	mov	r3, r1
 8003e38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e3a:	7afb      	ldrb	r3, [r7, #11]
 8003e3c:	f003 020f 	and.w	r2, r3, #15
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	3338      	adds	r3, #56	; 0x38
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3304      	adds	r3, #4
 8003e50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2201      	movs	r2, #1
 8003e68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e84:	7afb      	ldrb	r3, [r7, #11]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	6979      	ldr	r1, [r7, #20]
 8003e9c:	f003 f886 	bl	8006fac <USB_EP0StartXfer>
 8003ea0:	e008      	b.n	8003eb4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	6979      	ldr	r1, [r7, #20]
 8003eb0:	f002 fe34 	bl	8006b1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	f003 020f 	and.w	r2, r3, #15
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d901      	bls.n	8003edc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e050      	b.n	8003f7e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da0f      	bge.n	8003f04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	f003 020f 	and.w	r2, r3, #15
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	3338      	adds	r3, #56	; 0x38
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3304      	adds	r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	705a      	strb	r2, [r3, #1]
 8003f02:	e00d      	b.n	8003f20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	3304      	adds	r3, #4
 8003f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_PCD_EP_SetStall+0x82>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e01e      	b.n	8003f7e <HAL_PCD_EP_SetStall+0xc0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68f9      	ldr	r1, [r7, #12]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f003 fac4 	bl	80074dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	b2d9      	uxtb	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f003 fcb4 	bl	80078dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	f003 020f 	and.w	r2, r3, #15
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d901      	bls.n	8003fa4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e042      	b.n	800402a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	da0f      	bge.n	8003fcc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	f003 020f 	and.w	r2, r3, #15
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	3338      	adds	r3, #56	; 0x38
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	705a      	strb	r2, [r3, #1]
 8003fca:	e00f      	b.n	8003fec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	f003 020f 	and.w	r2, r3, #15
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_PCD_EP_ClrStall+0x86>
 8004008:	2302      	movs	r3, #2
 800400a:	e00e      	b.n	800402a <HAL_PCD_EP_ClrStall+0xa4>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68f9      	ldr	r1, [r7, #12]
 800401a:	4618      	mov	r0, r3
 800401c:	f003 facc 	bl	80075b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800403e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004042:	2b00      	cmp	r3, #0
 8004044:	da0c      	bge.n	8004060 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	f003 020f 	and.w	r2, r3, #15
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	3338      	adds	r3, #56	; 0x38
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	3304      	adds	r3, #4
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	e00c      	b.n	800407a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	f003 020f 	and.w	r2, r3, #15
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	3304      	adds	r3, #4
 8004078:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	4618      	mov	r0, r3
 8004082:	f003 f8eb 	bl	800725c <USB_EPStopXfer>
 8004086:	4603      	mov	r3, r0
 8004088:	72fb      	strb	r3, [r7, #11]

  return ret;
 800408a:	7afb      	ldrb	r3, [r7, #11]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	3338      	adds	r3, #56	; 0x38
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d901      	bls.n	80040cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e06c      	b.n	80041a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d902      	bls.n	80040e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3303      	adds	r3, #3
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040f0:	e02b      	b.n	800414a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	429a      	cmp	r2, r3
 8004106:	d902      	bls.n	800410e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3303      	adds	r3, #3
 8004112:	089b      	lsrs	r3, r3, #2
 8004114:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6919      	ldr	r1, [r3, #16]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004126:	b2db      	uxtb	r3, r3
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	4603      	mov	r3, r0
 800412c:	6978      	ldr	r0, [r7, #20]
 800412e:	f003 f93f 	bl	80073b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	441a      	add	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1a      	ldr	r2, [r3, #32]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	441a      	add	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	b29b      	uxth	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	429a      	cmp	r2, r3
 800415e:	d809      	bhi.n	8004174 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1a      	ldr	r2, [r3, #32]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004168:	429a      	cmp	r2, r3
 800416a:	d203      	bcs.n	8004174 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1be      	bne.n	80040f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	699a      	ldr	r2, [r3, #24]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	429a      	cmp	r2, r3
 800417e:	d811      	bhi.n	80041a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	2201      	movs	r2, #1
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	43db      	mvns	r3, r3
 800419a:	6939      	ldr	r1, [r7, #16]
 800419c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041a0:	4013      	ands	r3, r2
 80041a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	333c      	adds	r3, #60	; 0x3c
 80041c8:	3304      	adds	r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d17b      	bne.n	80042de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4a61      	ldr	r2, [pc, #388]	; (8004378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	f240 80b9 	bls.w	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80b3 	beq.w	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	461a      	mov	r2, r3
 8004214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004218:	6093      	str	r3, [r2, #8]
 800421a:	e0a7      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	461a      	mov	r2, r3
 8004234:	2320      	movs	r3, #32
 8004236:	6093      	str	r3, [r2, #8]
 8004238:	e098      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 8093 	bne.w	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4a4b      	ldr	r2, [pc, #300]	; (8004378 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d90f      	bls.n	800426e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	461a      	mov	r2, r3
 8004266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426a:	6093      	str	r3, [r2, #8]
 800426c:	e07e      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	3304      	adds	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	0159      	lsls	r1, r3, #5
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	440b      	add	r3, r1
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429a:	1ad2      	subs	r2, r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d114      	bne.n	80042d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042b8:	461a      	mov	r2, r3
 80042ba:	2101      	movs	r1, #1
 80042bc:	f003 fb0e 	bl	80078dc <USB_EP0_OutStart>
 80042c0:	e006      	b.n	80042d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	441a      	add	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f005 fdd8 	bl	8009e8c <HAL_PCD_DataOutStageCallback>
 80042dc:	e046      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	4a26      	ldr	r2, [pc, #152]	; (800437c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d124      	bne.n	8004330 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	461a      	mov	r2, r3
 80042fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004302:	6093      	str	r3, [r2, #8]
 8004304:	e032      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	461a      	mov	r2, r3
 800431e:	2320      	movs	r3, #32
 8004320:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f005 fdaf 	bl	8009e8c <HAL_PCD_DataOutStageCallback>
 800432e:	e01d      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d114      	bne.n	8004360 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004358:	461a      	mov	r2, r3
 800435a:	2100      	movs	r1, #0
 800435c:	f003 fabe 	bl	80078dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f005 fd90 	bl	8009e8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	4f54300a 	.word	0x4f54300a
 800437c:	4f54310a 	.word	0x4f54310a

08004380 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	333c      	adds	r3, #60	; 0x3c
 8004398:	3304      	adds	r3, #4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <PCD_EP_OutSetupPacket_int+0x88>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d90e      	bls.n	80043d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043cc:	461a      	mov	r2, r3
 80043ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f005 fd47 	bl	8009e68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <PCD_EP_OutSetupPacket_int+0x88>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d90c      	bls.n	80043fc <PCD_EP_OutSetupPacket_int+0x7c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d108      	bne.n	80043fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043f4:	461a      	mov	r2, r3
 80043f6:	2101      	movs	r1, #1
 80043f8:	f003 fa70 	bl	80078dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	4f54300a 	.word	0x4f54300a

0800440c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	70fb      	strb	r3, [r7, #3]
 8004418:	4613      	mov	r3, r2
 800441a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800442a:	883b      	ldrh	r3, [r7, #0]
 800442c:	0419      	lsls	r1, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	430a      	orrs	r2, r1
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
 8004438:	e028      	b.n	800448c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	4413      	add	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e00d      	b.n	800446a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	3340      	adds	r3, #64	; 0x40
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	3301      	adds	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
 800446a:	7bfa      	ldrb	r2, [r7, #15]
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	3b01      	subs	r3, #1
 8004470:	429a      	cmp	r2, r3
 8004472:	d3ec      	bcc.n	800444e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004474:	883b      	ldrh	r3, [r7, #0]
 8004476:	0418      	lsls	r0, r3, #16
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6819      	ldr	r1, [r3, #0]
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	3b01      	subs	r3, #1
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	4302      	orrs	r2, r0
 8004484:	3340      	adds	r3, #64	; 0x40
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	887a      	ldrh	r2, [r7, #2]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e267      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d075      	beq.n	80045de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044f2:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d00c      	beq.n	8004518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fe:	4b85      	ldr	r3, [pc, #532]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004506:	2b08      	cmp	r3, #8
 8004508:	d112      	bne.n	8004530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450a:	4b82      	ldr	r3, [pc, #520]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004516:	d10b      	bne.n	8004530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	4b7e      	ldr	r3, [pc, #504]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d05b      	beq.n	80045dc <HAL_RCC_OscConfig+0x108>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d157      	bne.n	80045dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e242      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	d106      	bne.n	8004548 <HAL_RCC_OscConfig+0x74>
 800453a:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a75      	ldr	r2, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e01d      	b.n	8004584 <HAL_RCC_OscConfig+0xb0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0x98>
 8004552:	4b70      	ldr	r3, [pc, #448]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6f      	ldr	r2, [pc, #444]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b6d      	ldr	r3, [pc, #436]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6c      	ldr	r2, [pc, #432]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0xb0>
 800456c:	4b69      	ldr	r3, [pc, #420]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a68      	ldr	r2, [pc, #416]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b66      	ldr	r3, [pc, #408]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a65      	ldr	r2, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800457e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fe f8ce 	bl	800272c <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004594:	f7fe f8ca 	bl	800272c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e207      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0xc0>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fe f8ba 	bl	800272c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fe f8b6 	bl	800272c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1f3      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0xe8>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d063      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ea:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004602:	4b44      	ldr	r3, [pc, #272]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x152>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e1c7      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4937      	ldr	r1, [pc, #220]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004644:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCC_OscConfig+0x244>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fe f86f 	bl	800272c <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004652:	f7fe f86b 	bl	800272c <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1a8      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004670:	4b28      	ldr	r3, [pc, #160]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4925      	ldr	r1, [pc, #148]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <HAL_RCC_OscConfig+0x244>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fe f84e 	bl	800272c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004694:	f7fe f84a 	bl	800272c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e187      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d036      	beq.n	800472c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_RCC_OscConfig+0x248>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fe f82e 	bl	800272c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fe f82a 	bl	800272c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e167      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80046e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x200>
 80046f2:	e01b      	b.n	800472c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_RCC_OscConfig+0x248>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fa:	f7fe f817 	bl	800272c <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	e00e      	b.n	8004720 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004702:	f7fe f813 	bl	800272c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d907      	bls.n	8004720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e150      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
 8004714:	40023800 	.word	0x40023800
 8004718:	42470000 	.word	0x42470000
 800471c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004720:	4b88      	ldr	r3, [pc, #544]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ea      	bne.n	8004702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8097 	beq.w	8004868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473e:	4b81      	ldr	r3, [pc, #516]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	4b7d      	ldr	r3, [pc, #500]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a7c      	ldr	r2, [pc, #496]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b7a      	ldr	r3, [pc, #488]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476a:	4b77      	ldr	r3, [pc, #476]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004776:	4b74      	ldr	r3, [pc, #464]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a73      	ldr	r2, [pc, #460]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004782:	f7fd ffd3 	bl	800272c <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fd ffcf 	bl	800272c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e10c      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x2ea>
 80047b0:	4b64      	ldr	r3, [pc, #400]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a63      	ldr	r2, [pc, #396]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e01c      	b.n	80047f8 <HAL_RCC_OscConfig+0x324>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x30c>
 80047c6:	4b5f      	ldr	r3, [pc, #380]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a5e      	ldr	r2, [pc, #376]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047cc:	f043 0304 	orr.w	r3, r3, #4
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	4b5c      	ldr	r3, [pc, #368]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a5b      	ldr	r2, [pc, #364]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0x324>
 80047e0:	4b58      	ldr	r3, [pc, #352]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a57      	ldr	r2, [pc, #348]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	4b55      	ldr	r3, [pc, #340]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	4a54      	ldr	r2, [pc, #336]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047f2:	f023 0304 	bic.w	r3, r3, #4
 80047f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fd ff94 	bl	800272c <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fd ff90 	bl	800272c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0cb      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481e:	4b49      	ldr	r3, [pc, #292]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0ee      	beq.n	8004808 <HAL_RCC_OscConfig+0x334>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482c:	f7fd ff7e 	bl	800272c <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004832:	e00a      	b.n	800484a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fd ff7a 	bl	800272c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0b5      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484a:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ee      	bne.n	8004834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d105      	bne.n	8004868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485c:	4b39      	ldr	r3, [pc, #228]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	4a38      	ldr	r2, [pc, #224]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80a1 	beq.w	80049b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004872:	4b34      	ldr	r3, [pc, #208]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b08      	cmp	r3, #8
 800487c:	d05c      	beq.n	8004938 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d141      	bne.n	800490a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b31      	ldr	r3, [pc, #196]	; (800494c <HAL_RCC_OscConfig+0x478>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fd ff4e 	bl	800272c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004894:	f7fd ff4a 	bl	800272c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e087      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	019b      	lsls	r3, r3, #6
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	085b      	lsrs	r3, r3, #1
 80048ca:	3b01      	subs	r3, #1
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	491b      	ldr	r1, [pc, #108]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <HAL_RCC_OscConfig+0x478>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e2:	f7fd ff23 	bl	800272c <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fd ff1f 	bl	800272c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e05c      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x416>
 8004908:	e054      	b.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <HAL_RCC_OscConfig+0x478>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fd ff0c 	bl	800272c <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004918:	f7fd ff08 	bl	800272c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e045      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x444>
 8004936:	e03d      	b.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e038      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
 8004944:	40023800 	.word	0x40023800
 8004948:	40007000 	.word	0x40007000
 800494c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004950:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <HAL_RCC_OscConfig+0x4ec>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d028      	beq.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d121      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d11a      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004988:	4293      	cmp	r3, r2
 800498a:	d111      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	3b01      	subs	r3, #1
 800499a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800

080049c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0cc      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d8:	4b68      	ldr	r3, [pc, #416]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d90c      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b65      	ldr	r3, [pc, #404]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b63      	ldr	r3, [pc, #396]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0b8      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a18:	4b59      	ldr	r3, [pc, #356]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a58      	ldr	r2, [pc, #352]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a30:	4b53      	ldr	r3, [pc, #332]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4a52      	ldr	r2, [pc, #328]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a3c:	4b50      	ldr	r3, [pc, #320]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	494d      	ldr	r1, [pc, #308]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d044      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d119      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e07f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d003      	beq.n	8004a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d107      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a82:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a92:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e067      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa2:	4b37      	ldr	r3, [pc, #220]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 0203 	bic.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4934      	ldr	r1, [pc, #208]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab4:	f7fd fe3a 	bl	800272c <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fd fe36 	bl	800272c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e04f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad2:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 020c 	and.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d1eb      	bne.n	8004abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d20c      	bcs.n	8004b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e032      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4916      	ldr	r1, [pc, #88]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	490e      	ldr	r1, [pc, #56]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b4a:	f000 f821 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	490a      	ldr	r1, [pc, #40]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004b5c:	5ccb      	ldrb	r3, [r1, r3]
 8004b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fd fd9a 	bl	80026a4 <HAL_InitTick>

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023c00 	.word	0x40023c00
 8004b80:	40023800 	.word	0x40023800
 8004b84:	0800fc74 	.word	0x0800fc74
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	20000004 	.word	0x20000004

08004b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b094      	sub	sp, #80	; 0x50
 8004b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ba8:	4b79      	ldr	r3, [pc, #484]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	f200 80e1 	bhi.w	8004d7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x3a>
 8004bc2:	e0db      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc4:	4b73      	ldr	r3, [pc, #460]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bc8:	e0db      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bca:	4b73      	ldr	r3, [pc, #460]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bce:	e0d8      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd0:	4b6f      	ldr	r3, [pc, #444]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bda:	4b6d      	ldr	r3, [pc, #436]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d063      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be6:	4b6a      	ldr	r3, [pc, #424]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	2200      	movs	r2, #0
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c02:	4622      	mov	r2, r4
 8004c04:	462b      	mov	r3, r5
 8004c06:	f04f 0000 	mov.w	r0, #0
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	0159      	lsls	r1, r3, #5
 8004c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c14:	0150      	lsls	r0, r2, #5
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	1a51      	subs	r1, r2, r1
 8004c1e:	6139      	str	r1, [r7, #16]
 8004c20:	4629      	mov	r1, r5
 8004c22:	eb63 0301 	sbc.w	r3, r3, r1
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c34:	4659      	mov	r1, fp
 8004c36:	018b      	lsls	r3, r1, #6
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c3e:	4651      	mov	r1, sl
 8004c40:	018a      	lsls	r2, r1, #6
 8004c42:	4651      	mov	r1, sl
 8004c44:	ebb2 0801 	subs.w	r8, r2, r1
 8004c48:	4659      	mov	r1, fp
 8004c4a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c62:	4690      	mov	r8, r2
 8004c64:	4699      	mov	r9, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	eb18 0303 	adds.w	r3, r8, r3
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	462b      	mov	r3, r5
 8004c70:	eb49 0303 	adc.w	r3, r9, r3
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c82:	4629      	mov	r1, r5
 8004c84:	024b      	lsls	r3, r1, #9
 8004c86:	4621      	mov	r1, r4
 8004c88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	024a      	lsls	r2, r1, #9
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	2200      	movs	r2, #0
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ca0:	f7fb fff2 	bl	8000c88 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cac:	e058      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cae:	4b38      	ldr	r3, [pc, #224]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	4611      	mov	r1, r2
 8004cba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	f04f 0000 	mov.w	r0, #0
 8004cd0:	f04f 0100 	mov.w	r1, #0
 8004cd4:	0159      	lsls	r1, r3, #5
 8004cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cda:	0150      	lsls	r0, r2, #5
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d00:	ebb2 040a 	subs.w	r4, r2, sl
 8004d04:	eb63 050b 	sbc.w	r5, r3, fp
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	00eb      	lsls	r3, r5, #3
 8004d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d16:	00e2      	lsls	r2, r4, #3
 8004d18:	4614      	mov	r4, r2
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	4643      	mov	r3, r8
 8004d1e:	18e3      	adds	r3, r4, r3
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	464b      	mov	r3, r9
 8004d24:	eb45 0303 	adc.w	r3, r5, r3
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d36:	4629      	mov	r1, r5
 8004d38:	028b      	lsls	r3, r1, #10
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d40:	4621      	mov	r1, r4
 8004d42:	028a      	lsls	r2, r1, #10
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	61fa      	str	r2, [r7, #28]
 8004d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d54:	f7fb ff98 	bl	8000c88 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d7a:	e002      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3750      	adds	r7, #80	; 0x50
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800
 8004d94:	00f42400 	.word	0x00f42400
 8004d98:	007a1200 	.word	0x007a1200

08004d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004da2:	681b      	ldr	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000000 	.word	0x20000000

08004db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004db8:	f7ff fff0 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	0a9b      	lsrs	r3, r3, #10
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	4903      	ldr	r1, [pc, #12]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dca:	5ccb      	ldrb	r3, [r1, r3]
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	0800fc84 	.word	0x0800fc84

08004ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e07b      	b.n	8004ee6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfe:	d009      	beq.n	8004e14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	61da      	str	r2, [r3, #28]
 8004e06:	e005      	b.n	8004e14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fd f9c2 	bl	80021b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	ea42 0103 	orr.w	r1, r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	0c1b      	lsrs	r3, r3, #16
 8004eb2:	f003 0104 	and.w	r1, r3, #4
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	f003 0210 	and.w	r2, r3, #16
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e04c      	b.n	8004f9c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d111      	bne.n	8004f32 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 ffe0 	bl	8005edc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <HAL_TIM_Base_Init+0xb4>)
 8004f28:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2202      	movs	r2, #2
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f000 fd53 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	080022d9 	.word	0x080022d9

08004fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d001      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e04e      	b.n	800505e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a23      	ldr	r2, [pc, #140]	; (800506c <HAL_TIM_Base_Start_IT+0xc4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d022      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d01d      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d018      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d013      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1c      	ldr	r2, [pc, #112]	; (8005078 <HAL_TIM_Base_Start_IT+0xd0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1b      	ldr	r2, [pc, #108]	; (800507c <HAL_TIM_Base_Start_IT+0xd4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a19      	ldr	r2, [pc, #100]	; (8005080 <HAL_TIM_Base_Start_IT+0xd8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a18      	ldr	r2, [pc, #96]	; (8005084 <HAL_TIM_Base_Start_IT+0xdc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d111      	bne.n	800504c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d010      	beq.n	800505c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	e007      	b.n	800505c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40010400 	.word	0x40010400
 8005080:	40014000 	.word	0x40014000
 8005084:	40001800 	.word	0x40001800

08005088 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e04c      	b.n	8005134 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d111      	bne.n	80050ca <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 ff14 	bl	8005edc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_TIM_PWM_Init+0xb4>)
 80050c0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f000 fc87 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	08002329 	.word	0x08002329

08005140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d109      	bne.n	8005164 <HAL_TIM_PWM_Start+0x24>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	e022      	b.n	80051aa <HAL_TIM_PWM_Start+0x6a>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d109      	bne.n	800517e <HAL_TIM_PWM_Start+0x3e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b01      	cmp	r3, #1
 8005174:	bf14      	ite	ne
 8005176:	2301      	movne	r3, #1
 8005178:	2300      	moveq	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	e015      	b.n	80051aa <HAL_TIM_PWM_Start+0x6a>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d109      	bne.n	8005198 <HAL_TIM_PWM_Start+0x58>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	bf14      	ite	ne
 8005190:	2301      	movne	r3, #1
 8005192:	2300      	moveq	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	e008      	b.n	80051aa <HAL_TIM_PWM_Start+0x6a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e07c      	b.n	80052ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_PWM_Start+0x82>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c0:	e013      	b.n	80051ea <HAL_TIM_PWM_Start+0xaa>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_PWM_Start+0x92>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d0:	e00b      	b.n	80051ea <HAL_TIM_PWM_Start+0xaa>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0xa2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e0:	e003      	b.n	80051ea <HAL_TIM_PWM_Start+0xaa>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2201      	movs	r2, #1
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fe4c 	bl	8005e90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2d      	ldr	r2, [pc, #180]	; (80052b4 <HAL_TIM_PWM_Start+0x174>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_TIM_PWM_Start+0xcc>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2c      	ldr	r2, [pc, #176]	; (80052b8 <HAL_TIM_PWM_Start+0x178>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <HAL_TIM_PWM_Start+0xd0>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <HAL_TIM_PWM_Start+0xd2>
 8005210:	2300      	movs	r3, #0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005224:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a22      	ldr	r2, [pc, #136]	; (80052b4 <HAL_TIM_PWM_Start+0x174>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d022      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005238:	d01d      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1f      	ldr	r2, [pc, #124]	; (80052bc <HAL_TIM_PWM_Start+0x17c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d018      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1d      	ldr	r2, [pc, #116]	; (80052c0 <HAL_TIM_PWM_Start+0x180>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1c      	ldr	r2, [pc, #112]	; (80052c4 <HAL_TIM_PWM_Start+0x184>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a16      	ldr	r2, [pc, #88]	; (80052b8 <HAL_TIM_PWM_Start+0x178>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_TIM_PWM_Start+0x188>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_TIM_PWM_Start+0x136>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a16      	ldr	r2, [pc, #88]	; (80052cc <HAL_TIM_PWM_Start+0x18c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d111      	bne.n	800529a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b06      	cmp	r3, #6
 8005286:	d010      	beq.n	80052aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005298:	e007      	b.n	80052aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40010400 	.word	0x40010400
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40001800 	.word	0x40001800

080052d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e0a2      	b.n	800542a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d111      	bne.n	8005314 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fdef 	bl	8005edc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a4a      	ldr	r2, [pc, #296]	; (8005434 <HAL_TIM_Encoder_Init+0x164>)
 800530a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800532a:	f023 0307 	bic.w	r3, r3, #7
 800532e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fb58 	bl	80059f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005368:	f023 0303 	bic.w	r3, r3, #3
 800536c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	4313      	orrs	r3, r2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005386:	f023 030c 	bic.w	r3, r3, #12
 800538a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005392:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	4313      	orrs	r3, r2
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	011a      	lsls	r2, r3, #4
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	031b      	lsls	r3, r3, #12
 80053b6:	4313      	orrs	r3, r2
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	4313      	orrs	r3, r2
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	08002249 	.word	0x08002249

08005438 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005448:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005450:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005458:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005460:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d110      	bne.n	800548a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d102      	bne.n	8005474 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800546e:	7b7b      	ldrb	r3, [r7, #13]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d001      	beq.n	8005478 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e069      	b.n	800554c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005488:	e031      	b.n	80054ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b04      	cmp	r3, #4
 800548e:	d110      	bne.n	80054b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005490:	7bbb      	ldrb	r3, [r7, #14]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d102      	bne.n	800549c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005496:	7b3b      	ldrb	r3, [r7, #12]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d001      	beq.n	80054a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e055      	b.n	800554c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b0:	e01d      	b.n	80054ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d108      	bne.n	80054ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b8:	7bbb      	ldrb	r3, [r7, #14]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d105      	bne.n	80054ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054be:	7b7b      	ldrb	r3, [r7, #13]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d102      	bne.n	80054ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054c4:	7b3b      	ldrb	r3, [r7, #12]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d001      	beq.n	80054ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e03e      	b.n	800554c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_TIM_Encoder_Start+0xc4>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d008      	beq.n	800550c <HAL_TIM_Encoder_Start+0xd4>
 80054fa:	e00f      	b.n	800551c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2201      	movs	r2, #1
 8005502:	2100      	movs	r1, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fcc3 	bl	8005e90 <TIM_CCxChannelCmd>
      break;
 800550a:	e016      	b.n	800553a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2201      	movs	r2, #1
 8005512:	2104      	movs	r1, #4
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fcbb 	bl	8005e90 <TIM_CCxChannelCmd>
      break;
 800551a:	e00e      	b.n	800553a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2201      	movs	r2, #1
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fcb3 	bl	8005e90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2201      	movs	r2, #1
 8005530:	2104      	movs	r1, #4
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fcac 	bl	8005e90 <TIM_CCxChannelCmd>
      break;
 8005538:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d128      	bne.n	80055bc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b02      	cmp	r3, #2
 8005576:	d121      	bne.n	80055bc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0202 	mvn.w	r2, #2
 8005580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
 80055a0:	e009      	b.n	80055b6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d128      	bne.n	800561c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d121      	bne.n	800561c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0204 	mvn.w	r2, #4
 80055e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
 8005600:	e009      	b.n	8005616 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	d128      	bne.n	800567c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d121      	bne.n	800567c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0208 	mvn.w	r2, #8
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2204      	movs	r2, #4
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	4798      	blx	r3
 8005660:	e009      	b.n	8005676 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	2b10      	cmp	r3, #16
 8005688:	d128      	bne.n	80056dc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b10      	cmp	r3, #16
 8005696:	d121      	bne.n	80056dc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0210 	mvn.w	r2, #16
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2208      	movs	r2, #8
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	4798      	blx	r3
 80056c0:	e009      	b.n	80056d6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d110      	bne.n	800570c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d109      	bne.n	800570c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0201 	mvn.w	r2, #1
 8005700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	d110      	bne.n	800573c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005724:	2b80      	cmp	r3, #128	; 0x80
 8005726:	d109      	bne.n	800573c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d110      	bne.n	800576c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d109      	bne.n	800576c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b20      	cmp	r3, #32
 8005778:	d110      	bne.n	800579c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b20      	cmp	r3, #32
 8005786:	d109      	bne.n	800579c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0220 	mvn.w	r2, #32
 8005790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800579c:	bf00      	nop
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057be:	2302      	movs	r3, #2
 80057c0:	e0ae      	b.n	8005920 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	f200 809f 	bhi.w	8005910 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	0800580d 	.word	0x0800580d
 80057dc:	08005911 	.word	0x08005911
 80057e0:	08005911 	.word	0x08005911
 80057e4:	08005911 	.word	0x08005911
 80057e8:	0800584d 	.word	0x0800584d
 80057ec:	08005911 	.word	0x08005911
 80057f0:	08005911 	.word	0x08005911
 80057f4:	08005911 	.word	0x08005911
 80057f8:	0800588f 	.word	0x0800588f
 80057fc:	08005911 	.word	0x08005911
 8005800:	08005911 	.word	0x08005911
 8005804:	08005911 	.word	0x08005911
 8005808:	080058cf 	.word	0x080058cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f98c 	bl	8005b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0208 	orr.w	r2, r2, #8
 8005826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0204 	bic.w	r2, r2, #4
 8005836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6999      	ldr	r1, [r3, #24]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	619a      	str	r2, [r3, #24]
      break;
 800584a:	e064      	b.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f9dc 	bl	8005c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6999      	ldr	r1, [r3, #24]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	619a      	str	r2, [r3, #24]
      break;
 800588c:	e043      	b.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fa31 	bl	8005cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0208 	orr.w	r2, r2, #8
 80058a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0204 	bic.w	r2, r2, #4
 80058b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69d9      	ldr	r1, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	61da      	str	r2, [r3, #28]
      break;
 80058cc:	e023      	b.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fa85 	bl	8005de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69d9      	ldr	r1, [r3, #28]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	021a      	lsls	r2, r3, #8
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	61da      	str	r2, [r3, #28]
      break;
 800590e:	e002      	b.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	75fb      	strb	r3, [r7, #23]
      break;
 8005914:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800591e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a40      	ldr	r2, [pc, #256]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a3b      	ldr	r2, [pc, #236]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a3a      	ldr	r2, [pc, #232]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d108      	bne.n	8005a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2f      	ldr	r2, [pc, #188]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d02b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a50:	d027      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d023      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d017      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <TIM_Base_SetConfig+0x128>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a27      	ldr	r2, [pc, #156]	; (8005b1c <TIM_Base_SetConfig+0x12c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <TIM_Base_SetConfig+0x130>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <TIM_Base_SetConfig+0x134>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a24      	ldr	r2, [pc, #144]	; (8005b28 <TIM_Base_SetConfig+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a23      	ldr	r2, [pc, #140]	; (8005b2c <TIM_Base_SetConfig+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0xf8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	615a      	str	r2, [r3, #20]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800
 8005b10:	40000c00 	.word	0x40000c00
 8005b14:	40010400 	.word	0x40010400
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800
 8005b24:	40001800 	.word	0x40001800
 8005b28:	40001c00 	.word	0x40001c00
 8005b2c:	40002000 	.word	0x40002000

08005b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f023 0201 	bic.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f023 0302 	bic.w	r3, r3, #2
 8005b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a20      	ldr	r2, [pc, #128]	; (8005c08 <TIM_OC1_SetConfig+0xd8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_OC1_SetConfig+0x64>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a1f      	ldr	r2, [pc, #124]	; (8005c0c <TIM_OC1_SetConfig+0xdc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10c      	bne.n	8005bae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 0308 	bic.w	r3, r3, #8
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 0304 	bic.w	r3, r3, #4
 8005bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <TIM_OC1_SetConfig+0xd8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC1_SetConfig+0x8e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <TIM_OC1_SetConfig+0xdc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40010400 	.word	0x40010400

08005c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f023 0210 	bic.w	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0320 	bic.w	r3, r3, #32
 8005c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a22      	ldr	r2, [pc, #136]	; (8005cf4 <TIM_OC2_SetConfig+0xe4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_OC2_SetConfig+0x68>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <TIM_OC2_SetConfig+0xe8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d10d      	bne.n	8005c94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a17      	ldr	r2, [pc, #92]	; (8005cf4 <TIM_OC2_SetConfig+0xe4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_OC2_SetConfig+0x94>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <TIM_OC2_SetConfig+0xe8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d113      	bne.n	8005ccc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400

08005cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <TIM_OC3_SetConfig+0xe0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_OC3_SetConfig+0x66>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a20      	ldr	r2, [pc, #128]	; (8005de0 <TIM_OC3_SetConfig+0xe4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10d      	bne.n	8005d7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <TIM_OC3_SetConfig+0xe0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC3_SetConfig+0x92>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <TIM_OC3_SetConfig+0xe4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d113      	bne.n	8005db6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	621a      	str	r2, [r3, #32]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400

08005de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	031b      	lsls	r3, r3, #12
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a12      	ldr	r2, [pc, #72]	; (8005e88 <TIM_OC4_SetConfig+0xa4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_OC4_SetConfig+0x68>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a11      	ldr	r2, [pc, #68]	; (8005e8c <TIM_OC4_SetConfig+0xa8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d109      	bne.n	8005e60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	019b      	lsls	r3, r3, #6
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40010400 	.word	0x40010400

08005e90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a1a      	ldr	r2, [r3, #32]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a1a      	ldr	r2, [r3, #32]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f003 031f 	and.w	r3, r3, #31
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	621a      	str	r2, [r3, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a1c      	ldr	r2, [pc, #112]	; (8005f58 <TIM_ResetCallback+0x7c>)
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a1b      	ldr	r2, [pc, #108]	; (8005f5c <TIM_ResetCallback+0x80>)
 8005ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a1a      	ldr	r2, [pc, #104]	; (8005f60 <TIM_ResetCallback+0x84>)
 8005ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <TIM_ResetCallback+0x88>)
 8005f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <TIM_ResetCallback+0x8c>)
 8005f08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a17      	ldr	r2, [pc, #92]	; (8005f6c <TIM_ResetCallback+0x90>)
 8005f10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a16      	ldr	r2, [pc, #88]	; (8005f70 <TIM_ResetCallback+0x94>)
 8005f18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <TIM_ResetCallback+0x98>)
 8005f20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <TIM_ResetCallback+0x9c>)
 8005f28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <TIM_ResetCallback+0xa0>)
 8005f30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <TIM_ResetCallback+0xa4>)
 8005f38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a11      	ldr	r2, [pc, #68]	; (8005f84 <TIM_ResetCallback+0xa8>)
 8005f40:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a10      	ldr	r2, [pc, #64]	; (8005f88 <TIM_ResetCallback+0xac>)
 8005f48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	08005929 	.word	0x08005929
 8005f5c:	0800593d 	.word	0x0800593d
 8005f60:	080059b5 	.word	0x080059b5
 8005f64:	080059c9 	.word	0x080059c9
 8005f68:	08005965 	.word	0x08005965
 8005f6c:	08005979 	.word	0x08005979
 8005f70:	08005951 	.word	0x08005951
 8005f74:	0800598d 	.word	0x0800598d
 8005f78:	080059a1 	.word	0x080059a1
 8005f7c:	080059dd 	.word	0x080059dd
 8005f80:	08006129 	.word	0x08006129
 8005f84:	0800613d 	.word	0x0800613d
 8005f88:	08006151 	.word	0x08006151

08005f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e05a      	b.n	800605a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a21      	ldr	r2, [pc, #132]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d022      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff0:	d01d      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1d      	ldr	r2, [pc, #116]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d018      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1b      	ldr	r2, [pc, #108]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00e      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a18      	ldr	r2, [pc, #96]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d009      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a17      	ldr	r2, [pc, #92]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a15      	ldr	r2, [pc, #84]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d10c      	bne.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	4313      	orrs	r3, r2
 800603e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40010000 	.word	0x40010000
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	40000c00 	.word	0x40000c00
 8006078:	40010400 	.word	0x40010400
 800607c:	40014000 	.word	0x40014000
 8006080:	40001800 	.word	0x40001800

08006084 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800609c:	2302      	movs	r3, #2
 800609e:	e03d      	b.n	800611c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006164:	b084      	sub	sp, #16
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	f107 001c 	add.w	r0, r7, #28
 8006172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	2b01      	cmp	r3, #1
 800617a:	d122      	bne.n	80061c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d105      	bne.n	80061b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 fbee 	bl	8007998 <USB_CoreReset>
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	e01a      	b.n	80061f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 fbe2 	bl	8007998 <USB_CoreReset>
 80061d4:	4603      	mov	r3, r0
 80061d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
 80061ea:	e005      	b.n	80061f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d10b      	bne.n	8006216 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f043 0206 	orr.w	r2, r3, #6
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f043 0220 	orr.w	r2, r3, #32
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006222:	b004      	add	sp, #16
 8006224:	4770      	bx	lr
	...

08006228 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	4613      	mov	r3, r2
 8006234:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d165      	bne.n	8006308 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4a41      	ldr	r2, [pc, #260]	; (8006344 <USB_SetTurnaroundTime+0x11c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d906      	bls.n	8006252 <USB_SetTurnaroundTime+0x2a>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4a40      	ldr	r2, [pc, #256]	; (8006348 <USB_SetTurnaroundTime+0x120>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d202      	bcs.n	8006252 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800624c:	230f      	movs	r3, #15
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e062      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4a3c      	ldr	r2, [pc, #240]	; (8006348 <USB_SetTurnaroundTime+0x120>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d306      	bcc.n	8006268 <USB_SetTurnaroundTime+0x40>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	4a3b      	ldr	r2, [pc, #236]	; (800634c <USB_SetTurnaroundTime+0x124>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d202      	bcs.n	8006268 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006262:	230e      	movs	r3, #14
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	e057      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4a38      	ldr	r2, [pc, #224]	; (800634c <USB_SetTurnaroundTime+0x124>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d306      	bcc.n	800627e <USB_SetTurnaroundTime+0x56>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4a37      	ldr	r2, [pc, #220]	; (8006350 <USB_SetTurnaroundTime+0x128>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d202      	bcs.n	800627e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006278:	230d      	movs	r3, #13
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	e04c      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4a33      	ldr	r2, [pc, #204]	; (8006350 <USB_SetTurnaroundTime+0x128>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d306      	bcc.n	8006294 <USB_SetTurnaroundTime+0x6c>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4a32      	ldr	r2, [pc, #200]	; (8006354 <USB_SetTurnaroundTime+0x12c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d802      	bhi.n	8006294 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800628e:	230c      	movs	r3, #12
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	e041      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4a2f      	ldr	r2, [pc, #188]	; (8006354 <USB_SetTurnaroundTime+0x12c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d906      	bls.n	80062aa <USB_SetTurnaroundTime+0x82>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4a2e      	ldr	r2, [pc, #184]	; (8006358 <USB_SetTurnaroundTime+0x130>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d802      	bhi.n	80062aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062a4:	230b      	movs	r3, #11
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	e036      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4a2a      	ldr	r2, [pc, #168]	; (8006358 <USB_SetTurnaroundTime+0x130>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d906      	bls.n	80062c0 <USB_SetTurnaroundTime+0x98>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4a29      	ldr	r2, [pc, #164]	; (800635c <USB_SetTurnaroundTime+0x134>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d802      	bhi.n	80062c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062ba:	230a      	movs	r3, #10
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	e02b      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4a26      	ldr	r2, [pc, #152]	; (800635c <USB_SetTurnaroundTime+0x134>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d906      	bls.n	80062d6 <USB_SetTurnaroundTime+0xae>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4a25      	ldr	r2, [pc, #148]	; (8006360 <USB_SetTurnaroundTime+0x138>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d202      	bcs.n	80062d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062d0:	2309      	movs	r3, #9
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	e020      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4a21      	ldr	r2, [pc, #132]	; (8006360 <USB_SetTurnaroundTime+0x138>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d306      	bcc.n	80062ec <USB_SetTurnaroundTime+0xc4>
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4a20      	ldr	r2, [pc, #128]	; (8006364 <USB_SetTurnaroundTime+0x13c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d802      	bhi.n	80062ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062e6:	2308      	movs	r3, #8
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	e015      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <USB_SetTurnaroundTime+0x13c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d906      	bls.n	8006302 <USB_SetTurnaroundTime+0xda>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <USB_SetTurnaroundTime+0x140>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d202      	bcs.n	8006302 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062fc:	2307      	movs	r3, #7
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	e00a      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006302:	2306      	movs	r3, #6
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e007      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800630e:	2309      	movs	r3, #9
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	e001      	b.n	8006318 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006314:	2309      	movs	r3, #9
 8006316:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006330:	431a      	orrs	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	00d8acbf 	.word	0x00d8acbf
 8006348:	00e4e1c0 	.word	0x00e4e1c0
 800634c:	00f42400 	.word	0x00f42400
 8006350:	01067380 	.word	0x01067380
 8006354:	011a499f 	.word	0x011a499f
 8006358:	01312cff 	.word	0x01312cff
 800635c:	014ca43f 	.word	0x014ca43f
 8006360:	016e3600 	.word	0x016e3600
 8006364:	01a6ab1f 	.word	0x01a6ab1f
 8006368:	01e84800 	.word	0x01e84800

0800636c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f043 0201 	orr.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f023 0201 	bic.w	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d115      	bne.n	80063fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063de:	2001      	movs	r0, #1
 80063e0:	f7fc f9b0 	bl	8002744 <HAL_Delay>
      ms++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3301      	adds	r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 fa45 	bl	800787a <USB_GetMode>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d01e      	beq.n	8006434 <USB_SetCurrentMode+0x84>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b31      	cmp	r3, #49	; 0x31
 80063fa:	d9f0      	bls.n	80063de <USB_SetCurrentMode+0x2e>
 80063fc:	e01a      	b.n	8006434 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063fe:	78fb      	ldrb	r3, [r7, #3]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d115      	bne.n	8006430 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006410:	2001      	movs	r0, #1
 8006412:	f7fc f997 	bl	8002744 <HAL_Delay>
      ms++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3301      	adds	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 fa2c 	bl	800787a <USB_GetMode>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <USB_SetCurrentMode+0x84>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b31      	cmp	r3, #49	; 0x31
 800642c:	d9f0      	bls.n	8006410 <USB_SetCurrentMode+0x60>
 800642e:	e001      	b.n	8006434 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e005      	b.n	8006440 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b32      	cmp	r3, #50	; 0x32
 8006438:	d101      	bne.n	800643e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006448:	b084      	sub	sp, #16
 800644a:	b580      	push	{r7, lr}
 800644c:	b086      	sub	sp, #24
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	e009      	b.n	800647c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	3340      	adds	r3, #64	; 0x40
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	2200      	movs	r2, #0
 8006474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	3301      	adds	r3, #1
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b0e      	cmp	r3, #14
 8006480:	d9f2      	bls.n	8006468 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006484:	2b00      	cmp	r3, #0
 8006486:	d11c      	bne.n	80064c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006496:	f043 0302 	orr.w	r3, r3, #2
 800649a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	639a      	str	r2, [r3, #56]	; 0x38
 80064c0:	e00b      	b.n	80064da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064e0:	461a      	mov	r2, r3
 80064e2:	2300      	movs	r3, #0
 80064e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ec:	4619      	mov	r1, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f4:	461a      	mov	r2, r3
 80064f6:	680b      	ldr	r3, [r1, #0]
 80064f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10c      	bne.n	800651a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d104      	bne.n	8006510 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006506:	2100      	movs	r1, #0
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f965 	bl	80067d8 <USB_SetDevSpeed>
 800650e:	e008      	b.n	8006522 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006510:	2101      	movs	r1, #1
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f960 	bl	80067d8 <USB_SetDevSpeed>
 8006518:	e003      	b.n	8006522 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800651a:	2103      	movs	r1, #3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f95b 	bl	80067d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006522:	2110      	movs	r1, #16
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f8f3 	bl	8006710 <USB_FlushTxFifo>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f91f 	bl	8006778 <USB_FlushRxFifo>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	461a      	mov	r2, r3
 800654c:	2300      	movs	r3, #0
 800654e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	461a      	mov	r2, r3
 8006558:	2300      	movs	r3, #0
 800655a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006562:	461a      	mov	r2, r3
 8006564:	2300      	movs	r3, #0
 8006566:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	e043      	b.n	80065f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006584:	d118      	bne.n	80065b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006598:	461a      	mov	r2, r3
 800659a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	e013      	b.n	80065ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ae:	461a      	mov	r2, r3
 80065b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	e008      	b.n	80065ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	461a      	mov	r2, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d6:	461a      	mov	r2, r3
 80065d8:	2300      	movs	r3, #0
 80065da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e8:	461a      	mov	r2, r3
 80065ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	3301      	adds	r3, #1
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d3b7      	bcc.n	800656e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065fe:	2300      	movs	r3, #0
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	e043      	b.n	800668c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800661a:	d118      	bne.n	800664e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662e:	461a      	mov	r2, r3
 8006630:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e013      	b.n	8006660 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	461a      	mov	r2, r3
 8006646:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e008      	b.n	8006660 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	461a      	mov	r2, r3
 800665c:	2300      	movs	r3, #0
 800665e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666c:	461a      	mov	r2, r3
 800666e:	2300      	movs	r3, #0
 8006670:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667e:	461a      	mov	r2, r3
 8006680:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006684:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	429a      	cmp	r2, r3
 8006692:	d3b7      	bcc.n	8006604 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	f043 0210 	orr.w	r2, r3, #16
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	4b0f      	ldr	r3, [pc, #60]	; (800670c <USB_DevInit+0x2c4>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f043 0208 	orr.w	r2, r3, #8
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d107      	bne.n	80066fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f4:	f043 0304 	orr.w	r3, r3, #4
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006708:	b004      	add	sp, #16
 800670a:	4770      	bx	lr
 800670c:	803c3800 	.word	0x803c3800

08006710 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a13      	ldr	r2, [pc, #76]	; (8006774 <USB_FlushTxFifo+0x64>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d901      	bls.n	8006730 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e01b      	b.n	8006768 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	daf2      	bge.n	800671e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	019b      	lsls	r3, r3, #6
 8006740:	f043 0220 	orr.w	r2, r3, #32
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4a08      	ldr	r2, [pc, #32]	; (8006774 <USB_FlushTxFifo+0x64>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d901      	bls.n	800675a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e006      	b.n	8006768 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b20      	cmp	r3, #32
 8006764:	d0f0      	beq.n	8006748 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	00030d40 	.word	0x00030d40

08006778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a11      	ldr	r2, [pc, #68]	; (80067d4 <USB_FlushRxFifo+0x5c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d901      	bls.n	8006796 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e018      	b.n	80067c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	daf2      	bge.n	8006784 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2210      	movs	r2, #16
 80067a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3301      	adds	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <USB_FlushRxFifo+0x5c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d901      	bls.n	80067ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e006      	b.n	80067c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	2b10      	cmp	r3, #16
 80067c4:	d0f0      	beq.n	80067a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	00030d40 	.word	0x00030d40

080067d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	68f9      	ldr	r1, [r7, #12]
 80067f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067f8:	4313      	orrs	r3, r2
 80067fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800680a:	b480      	push	{r7}
 800680c:	b087      	sub	sp, #28
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 0306 	and.w	r3, r3, #6
 8006822:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800682a:	2300      	movs	r3, #0
 800682c:	75fb      	strb	r3, [r7, #23]
 800682e:	e00a      	b.n	8006846 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d002      	beq.n	800683c <USB_GetDevSpeed+0x32>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b06      	cmp	r3, #6
 800683a:	d102      	bne.n	8006842 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800683c:	2302      	movs	r3, #2
 800683e:	75fb      	strb	r3, [r7, #23]
 8006840:	e001      	b.n	8006846 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006842:	230f      	movs	r3, #15
 8006844:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
}
 8006848:	4618      	mov	r0, r3
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d13a      	bne.n	80068e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	2101      	movs	r1, #1
 8006882:	fa01 f303 	lsl.w	r3, r1, r3
 8006886:	b29b      	uxth	r3, r3
 8006888:	68f9      	ldr	r1, [r7, #12]
 800688a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800688e:	4313      	orrs	r3, r2
 8006890:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d155      	bne.n	8006954 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	791b      	ldrb	r3, [r3, #4]
 80068c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	059b      	lsls	r3, r3, #22
 80068ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068cc:	4313      	orrs	r3, r2
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	e036      	b.n	8006954 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ec:	69da      	ldr	r2, [r3, #28]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	2101      	movs	r1, #1
 80068f8:	fa01 f303 	lsl.w	r3, r1, r3
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006904:	4313      	orrs	r3, r2
 8006906:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d11a      	bne.n	8006954 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	791b      	ldrb	r3, [r3, #4]
 8006938:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800693a:	430b      	orrs	r3, r1
 800693c:	4313      	orrs	r3, r2
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800694e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006952:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d161      	bne.n	8006a44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006996:	d11f      	bne.n	80069d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f003 030f 	and.w	r3, r3, #15
 80069e8:	2101      	movs	r1, #1
 80069ea:	fa01 f303 	lsl.w	r3, r1, r3
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	43db      	mvns	r3, r3
 80069f2:	68f9      	ldr	r1, [r7, #12]
 80069f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069f8:	4013      	ands	r3, r2
 80069fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a02:	69da      	ldr	r2, [r3, #28]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	43db      	mvns	r3, r3
 8006a16:	68f9      	ldr	r1, [r7, #12]
 8006a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	0159      	lsls	r1, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	440b      	add	r3, r1
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4b35      	ldr	r3, [pc, #212]	; (8006b14 <USB_DeactivateEndpoint+0x1b0>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	600b      	str	r3, [r1, #0]
 8006a42:	e060      	b.n	8006b06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5a:	d11f      	bne.n	8006a9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	2101      	movs	r1, #1
 8006aae:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006abc:	4013      	ands	r3, r2
 8006abe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad6:	041b      	lsls	r3, r3, #16
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	0159      	lsls	r1, r3, #5
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	440b      	add	r3, r1
 8006afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afe:	4619      	mov	r1, r3
 8006b00:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <USB_DeactivateEndpoint+0x1b4>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	ec337800 	.word	0xec337800
 8006b18:	eff37800 	.word	0xeff37800

08006b1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08a      	sub	sp, #40	; 0x28
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	4613      	mov	r3, r2
 8006b28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	f040 815c 	bne.w	8006df6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d132      	bne.n	8006bac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	0151      	lsls	r1, r2, #5
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	440a      	add	r2, r1
 8006b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	0151      	lsls	r1, r2, #5
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	440a      	add	r2, r1
 8006b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	0151      	lsls	r1, r2, #5
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	440a      	add	r2, r1
 8006ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba4:	0cdb      	lsrs	r3, r3, #19
 8006ba6:	04db      	lsls	r3, r3, #19
 8006ba8:	6113      	str	r3, [r2, #16]
 8006baa:	e074      	b.n	8006c96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	0151      	lsls	r1, r2, #5
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc6:	0cdb      	lsrs	r3, r3, #19
 8006bc8:	04db      	lsls	r3, r3, #19
 8006bca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	0151      	lsls	r1, r2, #5
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	440a      	add	r2, r1
 8006be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	6999      	ldr	r1, [r3, #24]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	440b      	add	r3, r1
 8006c08:	1e59      	subs	r1, r3, #1
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c12:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c14:	4b9d      	ldr	r3, [pc, #628]	; (8006e8c <USB_EPStartXfer+0x370>)
 8006c16:	400b      	ands	r3, r1
 8006c18:	69b9      	ldr	r1, [r7, #24]
 8006c1a:	0148      	lsls	r0, r1, #5
 8006c1c:	69f9      	ldr	r1, [r7, #28]
 8006c1e:	4401      	add	r1, r0
 8006c20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c24:	4313      	orrs	r3, r2
 8006c26:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c3e:	69b9      	ldr	r1, [r7, #24]
 8006c40:	0148      	lsls	r0, r1, #5
 8006c42:	69f9      	ldr	r1, [r7, #28]
 8006c44:	4401      	add	r1, r0
 8006c46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	791b      	ldrb	r3, [r3, #4]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d11f      	bne.n	8006c96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	69fa      	ldr	r2, [r7, #28]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d14b      	bne.n	8006d34 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d009      	beq.n	8006cb8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	791b      	ldrb	r3, [r3, #4]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d128      	bne.n	8006d12 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d110      	bne.n	8006cf2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	0151      	lsls	r1, r2, #5
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	440a      	add	r2, r1
 8006ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	e00f      	b.n	8006d12 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d10:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	69fa      	ldr	r2, [r7, #28]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e133      	b.n	8006f9c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d52:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	791b      	ldrb	r3, [r3, #4]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d015      	beq.n	8006d88 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 811b 	beq.w	8006f9c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	2101      	movs	r1, #1
 8006d78:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7c:	69f9      	ldr	r1, [r7, #28]
 8006d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d82:	4313      	orrs	r3, r2
 8006d84:	634b      	str	r3, [r1, #52]	; 0x34
 8006d86:	e109      	b.n	8006f9c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d110      	bne.n	8006dba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	e00f      	b.n	8006dda <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	6919      	ldr	r1, [r3, #16]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	b298      	uxth	r0, r3
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	4603      	mov	r3, r0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fade 	bl	80073b0 <USB_WritePacket>
 8006df4:	e0d2      	b.n	8006f9c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e10:	0cdb      	lsrs	r3, r3, #19
 8006e12:	04db      	lsls	r3, r3, #19
 8006e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	69fa      	ldr	r2, [r7, #28]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d126      	bne.n	8006e90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e58:	69b9      	ldr	r1, [r7, #24]
 8006e5a:	0148      	lsls	r0, r1, #5
 8006e5c:	69f9      	ldr	r1, [r7, #28]
 8006e5e:	4401      	add	r1, r0
 8006e60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e64:	4313      	orrs	r3, r2
 8006e66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e86:	6113      	str	r3, [r2, #16]
 8006e88:	e03a      	b.n	8006f00 <USB_EPStartXfer+0x3e4>
 8006e8a:	bf00      	nop
 8006e8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	1e5a      	subs	r2, r3, #1
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	8afa      	ldrh	r2, [r7, #22]
 8006eac:	fb03 f202 	mul.w	r2, r3, r2
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	8afb      	ldrh	r3, [r7, #22]
 8006ec4:	04d9      	lsls	r1, r3, #19
 8006ec6:	4b38      	ldr	r3, [pc, #224]	; (8006fa8 <USB_EPStartXfer+0x48c>)
 8006ec8:	400b      	ands	r3, r1
 8006eca:	69b9      	ldr	r1, [r7, #24]
 8006ecc:	0148      	lsls	r0, r1, #5
 8006ece:	69f9      	ldr	r1, [r7, #28]
 8006ed0:	4401      	add	r1, r0
 8006ed2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef0:	69b9      	ldr	r1, [r7, #24]
 8006ef2:	0148      	lsls	r0, r1, #5
 8006ef4:	69f9      	ldr	r1, [r7, #28]
 8006ef6:	4401      	add	r1, r0
 8006ef8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006efc:	4313      	orrs	r3, r2
 8006efe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d10d      	bne.n	8006f22 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6919      	ldr	r1, [r3, #16]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1e:	460a      	mov	r2, r1
 8006f20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	791b      	ldrb	r3, [r3, #4]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d128      	bne.n	8006f7c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d110      	bne.n	8006f5c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	e00f      	b.n	8006f7c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	0151      	lsls	r1, r2, #5
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	440a      	add	r2, r1
 8006f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	0151      	lsls	r1, r2, #5
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	440a      	add	r2, r1
 8006f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	1ff80000 	.word	0x1ff80000

08006fac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	785b      	ldrb	r3, [r3, #1]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	f040 80ce 	bne.w	800716a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d132      	bne.n	800703c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	0151      	lsls	r1, r2, #5
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	440a      	add	r2, r1
 8006fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ff4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	0151      	lsls	r1, r2, #5
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	440a      	add	r2, r1
 8007030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007034:	0cdb      	lsrs	r3, r3, #19
 8007036:	04db      	lsls	r3, r3, #19
 8007038:	6113      	str	r3, [r2, #16]
 800703a:	e04e      	b.n	80070da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007056:	0cdb      	lsrs	r3, r3, #19
 8007058:	04db      	lsls	r3, r3, #19
 800705a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	440a      	add	r2, r1
 8007072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007076:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800707a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800707e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	699a      	ldr	r2, [r3, #24]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	429a      	cmp	r2, r3
 800708a:	d903      	bls.n	8007094 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	0151      	lsls	r1, r2, #5
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	440a      	add	r2, r1
 80070aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c0:	691a      	ldr	r2, [r3, #16]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ca:	6939      	ldr	r1, [r7, #16]
 80070cc:	0148      	lsls	r0, r1, #5
 80070ce:	6979      	ldr	r1, [r7, #20]
 80070d0:	4401      	add	r1, r0
 80070d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070d6:	4313      	orrs	r3, r2
 80070d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070da:	79fb      	ldrb	r3, [r7, #7]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d11e      	bne.n	800711e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d009      	beq.n	80070fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f4:	461a      	mov	r2, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	440a      	add	r2, r1
 8007112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007116:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	e097      	b.n	800724e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	440a      	add	r2, r1
 8007134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007138:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800713c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 8083 	beq.w	800724e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	2101      	movs	r1, #1
 800715a:	fa01 f303 	lsl.w	r3, r1, r3
 800715e:	6979      	ldr	r1, [r7, #20]
 8007160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007164:	4313      	orrs	r3, r2
 8007166:	634b      	str	r3, [r1, #52]	; 0x34
 8007168:	e071      	b.n	800724e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	440a      	add	r2, r1
 8007180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007184:	0cdb      	lsrs	r3, r3, #19
 8007186:	04db      	lsls	r3, r3, #19
 8007188:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071fc:	6939      	ldr	r1, [r7, #16]
 80071fe:	0148      	lsls	r0, r1, #5
 8007200:	6979      	ldr	r1, [r7, #20]
 8007202:	4401      	add	r1, r0
 8007204:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007208:	4313      	orrs	r3, r2
 800720a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d10d      	bne.n	800722e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d009      	beq.n	800722e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6919      	ldr	r1, [r3, #16]
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722a:	460a      	mov	r2, r1
 800722c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007248:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800724c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d14a      	bne.n	8007310 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800728e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007292:	f040 8086 	bne.w	80073a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	7812      	ldrb	r2, [r2, #0]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	7812      	ldrb	r2, [r2, #0]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d902      	bls.n	80072f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
          break;
 80072f2:	e056      	b.n	80073a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800730c:	d0e7      	beq.n	80072de <USB_EPStopXfer+0x82>
 800730e:	e048      	b.n	80073a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007328:	d13b      	bne.n	80073a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	7812      	ldrb	r2, [r2, #0]
 800733e:	0151      	lsls	r1, r2, #5
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	440a      	add	r2, r1
 8007344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007348:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800734c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	7812      	ldrb	r2, [r2, #0]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007370:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3301      	adds	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f242 7210 	movw	r2, #10000	; 0x2710
 800737e:	4293      	cmp	r3, r2
 8007380:	d902      	bls.n	8007388 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	75fb      	strb	r3, [r7, #23]
          break;
 8007386:	e00c      	b.n	80073a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800739c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073a0:	d0e7      	beq.n	8007372 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b089      	sub	sp, #36	; 0x24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4611      	mov	r1, r2
 80073bc:	461a      	mov	r2, r3
 80073be:	460b      	mov	r3, r1
 80073c0:	71fb      	strb	r3, [r7, #7]
 80073c2:	4613      	mov	r3, r2
 80073c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d123      	bne.n	800741e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073d6:	88bb      	ldrh	r3, [r7, #4]
 80073d8:	3303      	adds	r3, #3
 80073da:	089b      	lsrs	r3, r3, #2
 80073dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073de:	2300      	movs	r3, #0
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	e018      	b.n	8007416 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	031a      	lsls	r2, r3, #12
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f0:	461a      	mov	r2, r3
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	3301      	adds	r3, #1
 8007402:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	3301      	adds	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	3301      	adds	r3, #1
 800740e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	3301      	adds	r3, #1
 8007414:	61bb      	str	r3, [r7, #24]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	429a      	cmp	r2, r3
 800741c:	d3e2      	bcc.n	80073e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3724      	adds	r7, #36	; 0x24
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800742c:	b480      	push	{r7}
 800742e:	b08b      	sub	sp, #44	; 0x2c
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007442:	88fb      	ldrh	r3, [r7, #6]
 8007444:	089b      	lsrs	r3, r3, #2
 8007446:	b29b      	uxth	r3, r3
 8007448:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	f003 0303 	and.w	r3, r3, #3
 8007450:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007452:	2300      	movs	r3, #0
 8007454:	623b      	str	r3, [r7, #32]
 8007456:	e014      	b.n	8007482 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	601a      	str	r2, [r3, #0]
    pDest++;
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	3301      	adds	r3, #1
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	3301      	adds	r3, #1
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	3301      	adds	r3, #1
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	3301      	adds	r3, #1
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	3301      	adds	r3, #1
 8007480:	623b      	str	r3, [r7, #32]
 8007482:	6a3a      	ldr	r2, [r7, #32]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	429a      	cmp	r2, r3
 8007488:	d3e6      	bcc.n	8007458 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800748a:	8bfb      	ldrh	r3, [r7, #30]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01e      	beq.n	80074ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749a:	461a      	mov	r2, r3
 800749c:	f107 0310 	add.w	r3, r7, #16
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	fa22 f303 	lsr.w	r3, r2, r3
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	701a      	strb	r2, [r3, #0]
      i++;
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	3301      	adds	r3, #1
 80074ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	3301      	adds	r3, #1
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80074c2:	8bfb      	ldrh	r3, [r7, #30]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074c8:	8bfb      	ldrh	r3, [r7, #30]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1ea      	bne.n	80074a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	372c      	adds	r7, #44	; 0x2c
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d12c      	bne.n	8007552 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	db12      	blt.n	8007530 <USB_EPSetStall+0x54>
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00f      	beq.n	8007530 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	0151      	lsls	r1, r2, #5
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	440a      	add	r2, r1
 8007526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800752a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800752e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	440a      	add	r2, r1
 8007546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e02b      	b.n	80075aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	db12      	blt.n	800758a <USB_EPSetStall+0xae>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00f      	beq.n	800758a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007584:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007588:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d128      	bne.n	8007626 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	0151      	lsls	r1, r2, #5
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	440a      	add	r2, r1
 80075ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	791b      	ldrb	r3, [r3, #4]
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d003      	beq.n	8007604 <USB_EPClearStall+0x4c>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	791b      	ldrb	r3, [r3, #4]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d138      	bne.n	8007676 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	0151      	lsls	r1, r2, #5
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	440a      	add	r2, r1
 800761a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800761e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	e027      	b.n	8007676 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	0151      	lsls	r1, r2, #5
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	440a      	add	r2, r1
 800763c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007640:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007644:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	791b      	ldrb	r3, [r3, #4]
 800764a:	2b03      	cmp	r3, #3
 800764c:	d003      	beq.n	8007656 <USB_EPClearStall+0x9e>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	791b      	ldrb	r3, [r3, #4]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d10f      	bne.n	8007676 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	440a      	add	r2, r1
 800766c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007674:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076b8:	68f9      	ldr	r1, [r7, #12]
 80076ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076be:	4313      	orrs	r3, r2
 80076c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076ea:	f023 0303 	bic.w	r3, r3, #3
 80076ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076fe:	f023 0302 	bic.w	r3, r3, #2
 8007702:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800772c:	f023 0303 	bic.w	r3, r3, #3
 8007730:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007740:	f043 0302 	orr.w	r3, r3, #2
 8007744:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4013      	ands	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800776c:	68fb      	ldr	r3, [r7, #12]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800777a:	b480      	push	{r7}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	4013      	ands	r3, r2
 800779c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	0c1b      	lsrs	r3, r3, #16
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b085      	sub	sp, #20
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	4013      	ands	r3, r2
 80077d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	b29b      	uxth	r3, r3
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b085      	sub	sp, #20
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	4013      	ands	r3, r2
 800780e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007810:	68bb      	ldr	r3, [r7, #8]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800781e:	b480      	push	{r7}
 8007820:	b087      	sub	sp, #28
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	fa22 f303 	lsr.w	r3, r2, r3
 800784e:	01db      	lsls	r3, r3, #7
 8007850:	b2db      	uxtb	r3, r3
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4313      	orrs	r3, r2
 8007856:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	4013      	ands	r3, r2
 800786a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800786c:	68bb      	ldr	r3, [r7, #8]
}
 800786e:	4618      	mov	r0, r3
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f003 0301 	and.w	r3, r3, #1
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007896:	b480      	push	{r7}
 8007898:	b085      	sub	sp, #20
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078b4:	f023 0307 	bic.w	r3, r3, #7
 80078b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	460b      	mov	r3, r1
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	333c      	adds	r3, #60	; 0x3c
 80078f2:	3304      	adds	r3, #4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	4a26      	ldr	r2, [pc, #152]	; (8007994 <USB_EP0_OutStart+0xb8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d90a      	bls.n	8007916 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800790c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007910:	d101      	bne.n	8007916 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	e037      	b.n	8007986 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791c:	461a      	mov	r2, r3
 800791e:	2300      	movs	r3, #0
 8007920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007944:	f043 0318 	orr.w	r3, r3, #24
 8007948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007958:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800795c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800795e:	7afb      	ldrb	r3, [r7, #11]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d10f      	bne.n	8007984 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007982:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	4f54300a 	.word	0x4f54300a

08007998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3301      	adds	r3, #1
 80079a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4a13      	ldr	r2, [pc, #76]	; (80079fc <USB_CoreReset+0x64>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d901      	bls.n	80079b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e01b      	b.n	80079ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	daf2      	bge.n	80079a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f043 0201 	orr.w	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3301      	adds	r3, #1
 80079d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4a09      	ldr	r2, [pc, #36]	; (80079fc <USB_CoreReset+0x64>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d901      	bls.n	80079e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e006      	b.n	80079ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d0f0      	beq.n	80079ce <USB_CoreReset+0x36>

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	00030d40 	.word	0x00030d40

08007a00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a10:	f002 fca6 	bl	800a360 <USBD_static_malloc>
 8007a14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	32b0      	adds	r2, #176	; 0xb0
 8007a26:	2100      	movs	r1, #0
 8007a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e0d4      	b.n	8007bda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007a30:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007a34:	2100      	movs	r1, #0
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f002 fd22 	bl	800a480 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	32b0      	adds	r2, #176	; 0xb0
 8007a46:	68f9      	ldr	r1, [r7, #12]
 8007a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	32b0      	adds	r2, #176	; 0xb0
 8007a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7c1b      	ldrb	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d138      	bne.n	8007ada <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a68:	4b5e      	ldr	r3, [pc, #376]	; (8007be4 <USBD_CDC_Init+0x1e4>)
 8007a6a:	7819      	ldrb	r1, [r3, #0]
 8007a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a70:	2202      	movs	r2, #2
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f002 fb51 	bl	800a11a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a78:	4b5a      	ldr	r3, [pc, #360]	; (8007be4 <USBD_CDC_Init+0x1e4>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 020f 	and.w	r2, r3, #15
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	440b      	add	r3, r1
 8007a8c:	3324      	adds	r3, #36	; 0x24
 8007a8e:	2201      	movs	r2, #1
 8007a90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a92:	4b55      	ldr	r3, [pc, #340]	; (8007be8 <USBD_CDC_Init+0x1e8>)
 8007a94:	7819      	ldrb	r1, [r3, #0]
 8007a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f002 fb3c 	bl	800a11a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007aa2:	4b51      	ldr	r3, [pc, #324]	; (8007be8 <USBD_CDC_Init+0x1e8>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	f003 020f 	and.w	r2, r3, #15
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	440b      	add	r3, r1
 8007ab6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007aba:	2201      	movs	r2, #1
 8007abc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007abe:	4b4b      	ldr	r3, [pc, #300]	; (8007bec <USBD_CDC_Init+0x1ec>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f003 020f 	and.w	r2, r3, #15
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	3326      	adds	r3, #38	; 0x26
 8007ad4:	2210      	movs	r2, #16
 8007ad6:	801a      	strh	r2, [r3, #0]
 8007ad8:	e035      	b.n	8007b46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ada:	4b42      	ldr	r3, [pc, #264]	; (8007be4 <USBD_CDC_Init+0x1e4>)
 8007adc:	7819      	ldrb	r1, [r3, #0]
 8007ade:	2340      	movs	r3, #64	; 0x40
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f002 fb19 	bl	800a11a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ae8:	4b3e      	ldr	r3, [pc, #248]	; (8007be4 <USBD_CDC_Init+0x1e4>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	f003 020f 	and.w	r2, r3, #15
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	4613      	mov	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	440b      	add	r3, r1
 8007afc:	3324      	adds	r3, #36	; 0x24
 8007afe:	2201      	movs	r2, #1
 8007b00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b02:	4b39      	ldr	r3, [pc, #228]	; (8007be8 <USBD_CDC_Init+0x1e8>)
 8007b04:	7819      	ldrb	r1, [r3, #0]
 8007b06:	2340      	movs	r3, #64	; 0x40
 8007b08:	2202      	movs	r2, #2
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f002 fb05 	bl	800a11a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b10:	4b35      	ldr	r3, [pc, #212]	; (8007be8 <USBD_CDC_Init+0x1e8>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f003 020f 	and.w	r2, r3, #15
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	440b      	add	r3, r1
 8007b24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b28:	2201      	movs	r2, #1
 8007b2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b2c:	4b2f      	ldr	r3, [pc, #188]	; (8007bec <USBD_CDC_Init+0x1ec>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	f003 020f 	and.w	r2, r3, #15
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	4613      	mov	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4413      	add	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	440b      	add	r3, r1
 8007b40:	3326      	adds	r3, #38	; 0x26
 8007b42:	2210      	movs	r2, #16
 8007b44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b46:	4b29      	ldr	r3, [pc, #164]	; (8007bec <USBD_CDC_Init+0x1ec>)
 8007b48:	7819      	ldrb	r1, [r3, #0]
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	2203      	movs	r2, #3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f002 fae3 	bl	800a11a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b54:	4b25      	ldr	r3, [pc, #148]	; (8007bec <USBD_CDC_Init+0x1ec>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	f003 020f 	and.w	r2, r3, #15
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	440b      	add	r3, r1
 8007b68:	3324      	adds	r3, #36	; 0x24
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	33b0      	adds	r3, #176	; 0xb0
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e018      	b.n	8007bda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	7c1b      	ldrb	r3, [r3, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bb0:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <USBD_CDC_Init+0x1e8>)
 8007bb2:	7819      	ldrb	r1, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f002 fb9a 	bl	800a2f8 <USBD_LL_PrepareReceive>
 8007bc4:	e008      	b.n	8007bd8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bc6:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <USBD_CDC_Init+0x1e8>)
 8007bc8:	7819      	ldrb	r1, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f002 fb90 	bl	800a2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20000093 	.word	0x20000093
 8007be8:	20000094 	.word	0x20000094
 8007bec:	20000095 	.word	0x20000095

08007bf0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007bfc:	4b3a      	ldr	r3, [pc, #232]	; (8007ce8 <USBD_CDC_DeInit+0xf8>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f002 faaf 	bl	800a166 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c08:	4b37      	ldr	r3, [pc, #220]	; (8007ce8 <USBD_CDC_DeInit+0xf8>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3324      	adds	r3, #36	; 0x24
 8007c1e:	2200      	movs	r2, #0
 8007c20:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c22:	4b32      	ldr	r3, [pc, #200]	; (8007cec <USBD_CDC_DeInit+0xfc>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f002 fa9c 	bl	800a166 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c2e:	4b2f      	ldr	r3, [pc, #188]	; (8007cec <USBD_CDC_DeInit+0xfc>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f003 020f 	and.w	r2, r3, #15
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c46:	2200      	movs	r2, #0
 8007c48:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c4a:	4b29      	ldr	r3, [pc, #164]	; (8007cf0 <USBD_CDC_DeInit+0x100>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f002 fa88 	bl	800a166 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c56:	4b26      	ldr	r3, [pc, #152]	; (8007cf0 <USBD_CDC_DeInit+0x100>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f003 020f 	and.w	r2, r3, #15
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	440b      	add	r3, r1
 8007c6a:	3324      	adds	r3, #36	; 0x24
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c70:	4b1f      	ldr	r3, [pc, #124]	; (8007cf0 <USBD_CDC_DeInit+0x100>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	f003 020f 	and.w	r2, r3, #15
 8007c78:	6879      	ldr	r1, [r7, #4]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	440b      	add	r3, r1
 8007c84:	3326      	adds	r3, #38	; 0x26
 8007c86:	2200      	movs	r2, #0
 8007c88:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	32b0      	adds	r2, #176	; 0xb0
 8007c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d01f      	beq.n	8007cdc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	33b0      	adds	r3, #176	; 0xb0
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	32b0      	adds	r2, #176	; 0xb0
 8007cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f002 fb5c 	bl	800a37c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	32b0      	adds	r2, #176	; 0xb0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000093 	.word	0x20000093
 8007cec:	20000094 	.word	0x20000094
 8007cf0:	20000095 	.word	0x20000095

08007cf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	32b0      	adds	r2, #176	; 0xb0
 8007d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e0bf      	b.n	8007ea4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d050      	beq.n	8007dd2 <USBD_CDC_Setup+0xde>
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	f040 80af 	bne.w	8007e94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	88db      	ldrh	r3, [r3, #6]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d03a      	beq.n	8007db4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	b25b      	sxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	da1b      	bge.n	8007d80 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	33b0      	adds	r3, #176	; 0xb0
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	88d2      	ldrh	r2, [r2, #6]
 8007d64:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	88db      	ldrh	r3, [r3, #6]
 8007d6a:	2b07      	cmp	r3, #7
 8007d6c:	bf28      	it	cs
 8007d6e:	2307      	movcs	r3, #7
 8007d70:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	89fa      	ldrh	r2, [r7, #14]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fd89 	bl	8009890 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007d7e:	e090      	b.n	8007ea2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785a      	ldrb	r2, [r3, #1]
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88db      	ldrh	r3, [r3, #6]
 8007d8e:	2b3f      	cmp	r3, #63	; 0x3f
 8007d90:	d803      	bhi.n	8007d9a <USBD_CDC_Setup+0xa6>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	88db      	ldrh	r3, [r3, #6]
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	e000      	b.n	8007d9c <USBD_CDC_Setup+0xa8>
 8007d9a:	2240      	movs	r2, #64	; 0x40
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007da2:	6939      	ldr	r1, [r7, #16]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007daa:	461a      	mov	r2, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 fd9b 	bl	80098e8 <USBD_CtlPrepareRx>
      break;
 8007db2:	e076      	b.n	8007ea2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	33b0      	adds	r3, #176	; 0xb0
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	7850      	ldrb	r0, [r2, #1]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	4798      	blx	r3
      break;
 8007dd0:	e067      	b.n	8007ea2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	785b      	ldrb	r3, [r3, #1]
 8007dd6:	2b0b      	cmp	r3, #11
 8007dd8:	d851      	bhi.n	8007e7e <USBD_CDC_Setup+0x18a>
 8007dda:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <USBD_CDC_Setup+0xec>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007e11 	.word	0x08007e11
 8007de4:	08007e8d 	.word	0x08007e8d
 8007de8:	08007e7f 	.word	0x08007e7f
 8007dec:	08007e7f 	.word	0x08007e7f
 8007df0:	08007e7f 	.word	0x08007e7f
 8007df4:	08007e7f 	.word	0x08007e7f
 8007df8:	08007e7f 	.word	0x08007e7f
 8007dfc:	08007e7f 	.word	0x08007e7f
 8007e00:	08007e7f 	.word	0x08007e7f
 8007e04:	08007e7f 	.word	0x08007e7f
 8007e08:	08007e3b 	.word	0x08007e3b
 8007e0c:	08007e65 	.word	0x08007e65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d107      	bne.n	8007e2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e1c:	f107 030a 	add.w	r3, r7, #10
 8007e20:	2202      	movs	r2, #2
 8007e22:	4619      	mov	r1, r3
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fd33 	bl	8009890 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e2a:	e032      	b.n	8007e92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 fcbd 	bl	80097ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007e34:	2303      	movs	r3, #3
 8007e36:	75fb      	strb	r3, [r7, #23]
          break;
 8007e38:	e02b      	b.n	8007e92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d107      	bne.n	8007e56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e46:	f107 030d 	add.w	r3, r7, #13
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fd1e 	bl	8009890 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e54:	e01d      	b.n	8007e92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 fca8 	bl	80097ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	75fb      	strb	r3, [r7, #23]
          break;
 8007e62:	e016      	b.n	8007e92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d00f      	beq.n	8007e90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f001 fc9b 	bl	80097ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e7c:	e008      	b.n	8007e90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fc94 	bl	80097ae <USBD_CtlError>
          ret = USBD_FAIL;
 8007e86:	2303      	movs	r3, #3
 8007e88:	75fb      	strb	r3, [r7, #23]
          break;
 8007e8a:	e002      	b.n	8007e92 <USBD_CDC_Setup+0x19e>
          break;
 8007e8c:	bf00      	nop
 8007e8e:	e008      	b.n	8007ea2 <USBD_CDC_Setup+0x1ae>
          break;
 8007e90:	bf00      	nop
      }
      break;
 8007e92:	e006      	b.n	8007ea2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 fc89 	bl	80097ae <USBD_CtlError>
      ret = USBD_FAIL;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ebe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	32b0      	adds	r2, #176	; 0xb0
 8007eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e065      	b.n	8007fa2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	32b0      	adds	r2, #176	; 0xb0
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	f003 020f 	and.w	r2, r3, #15
 8007eec:	6879      	ldr	r1, [r7, #4]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	3318      	adds	r3, #24
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d02f      	beq.n	8007f60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	f003 020f 	and.w	r2, r3, #15
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	440b      	add	r3, r1
 8007f12:	3318      	adds	r3, #24
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	f003 010f 	and.w	r1, r3, #15
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	440b      	add	r3, r1
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4403      	add	r3, r0
 8007f28:	3348      	adds	r3, #72	; 0x48
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d112      	bne.n	8007f60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	3318      	adds	r3, #24
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f52:	78f9      	ldrb	r1, [r7, #3]
 8007f54:	2300      	movs	r3, #0
 8007f56:	2200      	movs	r2, #0
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f002 f9ac 	bl	800a2b6 <USBD_LL_Transmit>
 8007f5e:	e01f      	b.n	8007fa0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	33b0      	adds	r3, #176	; 0xb0
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d010      	beq.n	8007fa0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	33b0      	adds	r3, #176	; 0xb0
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f9c:	78fa      	ldrb	r2, [r7, #3]
 8007f9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	32b0      	adds	r2, #176	; 0xb0
 8007fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	32b0      	adds	r2, #176	; 0xb0
 8007fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e01a      	b.n	8008012 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f002 f9aa 	bl	800a33a <USBD_LL_GetRxDataSize>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	33b0      	adds	r3, #176	; 0xb0
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800800c:	4611      	mov	r1, r2
 800800e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	32b0      	adds	r2, #176	; 0xb0
 800802c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008030:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008038:	2303      	movs	r3, #3
 800803a:	e025      	b.n	8008088 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	33b0      	adds	r3, #176	; 0xb0
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01a      	beq.n	8008086 <USBD_CDC_EP0_RxReady+0x6c>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008056:	2bff      	cmp	r3, #255	; 0xff
 8008058:	d015      	beq.n	8008086 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	33b0      	adds	r3, #176	; 0xb0
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008072:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800807a:	b292      	uxth	r2, r2
 800807c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	22ff      	movs	r2, #255	; 0xff
 8008082:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008098:	2182      	movs	r1, #130	; 0x82
 800809a:	4818      	ldr	r0, [pc, #96]	; (80080fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800809c:	f000 fd4f 	bl	8008b3e <USBD_GetEpDesc>
 80080a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080a2:	2101      	movs	r1, #1
 80080a4:	4815      	ldr	r0, [pc, #84]	; (80080fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080a6:	f000 fd4a 	bl	8008b3e <USBD_GetEpDesc>
 80080aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080ac:	2181      	movs	r1, #129	; 0x81
 80080ae:	4813      	ldr	r0, [pc, #76]	; (80080fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080b0:	f000 fd45 	bl	8008b3e <USBD_GetEpDesc>
 80080b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2210      	movs	r2, #16
 80080c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d006      	beq.n	80080d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080d0:	711a      	strb	r2, [r3, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d006      	beq.n	80080ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080e4:	711a      	strb	r2, [r3, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2243      	movs	r2, #67	; 0x43
 80080ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080f0:	4b02      	ldr	r3, [pc, #8]	; (80080fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000050 	.word	0x20000050

08008100 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008108:	2182      	movs	r1, #130	; 0x82
 800810a:	4818      	ldr	r0, [pc, #96]	; (800816c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800810c:	f000 fd17 	bl	8008b3e <USBD_GetEpDesc>
 8008110:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008112:	2101      	movs	r1, #1
 8008114:	4815      	ldr	r0, [pc, #84]	; (800816c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008116:	f000 fd12 	bl	8008b3e <USBD_GetEpDesc>
 800811a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800811c:	2181      	movs	r1, #129	; 0x81
 800811e:	4813      	ldr	r0, [pc, #76]	; (800816c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008120:	f000 fd0d 	bl	8008b3e <USBD_GetEpDesc>
 8008124:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2210      	movs	r2, #16
 8008130:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d006      	beq.n	8008146 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	2200      	movs	r2, #0
 800813c:	711a      	strb	r2, [r3, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f042 0202 	orr.w	r2, r2, #2
 8008144:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d006      	beq.n	800815a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	711a      	strb	r2, [r3, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f042 0202 	orr.w	r2, r2, #2
 8008158:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2243      	movs	r2, #67	; 0x43
 800815e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000050 	.word	0x20000050

08008170 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008178:	2182      	movs	r1, #130	; 0x82
 800817a:	4818      	ldr	r0, [pc, #96]	; (80081dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800817c:	f000 fcdf 	bl	8008b3e <USBD_GetEpDesc>
 8008180:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008182:	2101      	movs	r1, #1
 8008184:	4815      	ldr	r0, [pc, #84]	; (80081dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008186:	f000 fcda 	bl	8008b3e <USBD_GetEpDesc>
 800818a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800818c:	2181      	movs	r1, #129	; 0x81
 800818e:	4813      	ldr	r0, [pc, #76]	; (80081dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008190:	f000 fcd5 	bl	8008b3e <USBD_GetEpDesc>
 8008194:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2210      	movs	r2, #16
 80081a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d006      	beq.n	80081b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081b0:	711a      	strb	r2, [r3, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d006      	beq.n	80081ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c4:	711a      	strb	r2, [r3, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2243      	movs	r2, #67	; 0x43
 80081ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081d0:	4b02      	ldr	r3, [pc, #8]	; (80081dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	20000050 	.word	0x20000050

080081e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	220a      	movs	r2, #10
 80081ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80081ee:	4b03      	ldr	r3, [pc, #12]	; (80081fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	2000000c 	.word	0x2000000c

08008200 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	e009      	b.n	8008228 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	33b0      	adds	r3, #176	; 0xb0
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	32b0      	adds	r2, #176	; 0xb0
 800824a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008256:	2303      	movs	r3, #3
 8008258:	e008      	b.n	800826c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	32b0      	adds	r2, #176	; 0xb0
 800828c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008290:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008298:	2303      	movs	r3, #3
 800829a:	e004      	b.n	80082a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
	...

080082b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	32b0      	adds	r2, #176	; 0xb0
 80082c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80082cc:	2301      	movs	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	32b0      	adds	r2, #176	; 0xb0
 80082da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e025      	b.n	8008332 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d11f      	bne.n	8008330 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80082f8:	4b10      	ldr	r3, [pc, #64]	; (800833c <USBD_CDC_TransmitPacket+0x88>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	f003 020f 	and.w	r2, r3, #15
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4613      	mov	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4403      	add	r3, r0
 8008312:	3318      	adds	r3, #24
 8008314:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <USBD_CDC_TransmitPacket+0x88>)
 8008318:	7819      	ldrb	r1, [r3, #0]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 ffc5 	bl	800a2b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20000093 	.word	0x20000093

08008340 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	32b0      	adds	r2, #176	; 0xb0
 8008352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008356:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	32b0      	adds	r2, #176	; 0xb0
 8008362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800836a:	2303      	movs	r3, #3
 800836c:	e018      	b.n	80083a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	7c1b      	ldrb	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008376:	4b0c      	ldr	r3, [pc, #48]	; (80083a8 <USBD_CDC_ReceivePacket+0x68>)
 8008378:	7819      	ldrb	r1, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 ffb7 	bl	800a2f8 <USBD_LL_PrepareReceive>
 800838a:	e008      	b.n	800839e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800838c:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <USBD_CDC_ReceivePacket+0x68>)
 800838e:	7819      	ldrb	r1, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008396:	2340      	movs	r3, #64	; 0x40
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 ffad 	bl	800a2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20000094 	.word	0x20000094

080083ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e01f      	b.n	8008404 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	79fa      	ldrb	r2, [r7, #7]
 80083f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f001 fe27 	bl	800a04c <USBD_LL_Init>
 80083fe:	4603      	mov	r3, r0
 8008400:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008420:	2303      	movs	r3, #3
 8008422:	e025      	b.n	8008470 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32ae      	adds	r2, #174	; 0xae
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00f      	beq.n	8008460 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	32ae      	adds	r2, #174	; 0xae
 800844a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	f107 020e 	add.w	r2, r7, #14
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	4602      	mov	r2, r0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 fe2f 	bl	800a0e4 <USBD_LL_Start>
 8008486:	4603      	mov	r3, r0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d009      	beq.n	80084d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	4611      	mov	r1, r2
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	4611      	mov	r1, r2
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008504:	2303      	movs	r3, #3
 8008506:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	4618      	mov	r0, r3
 8008526:	f001 f908 	bl	800973a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008538:	461a      	mov	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008546:	f003 031f 	and.w	r3, r3, #31
 800854a:	2b02      	cmp	r3, #2
 800854c:	d01a      	beq.n	8008584 <USBD_LL_SetupStage+0x72>
 800854e:	2b02      	cmp	r3, #2
 8008550:	d822      	bhi.n	8008598 <USBD_LL_SetupStage+0x86>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <USBD_LL_SetupStage+0x4a>
 8008556:	2b01      	cmp	r3, #1
 8008558:	d00a      	beq.n	8008570 <USBD_LL_SetupStage+0x5e>
 800855a:	e01d      	b.n	8008598 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fb5f 	bl	8008c28 <USBD_StdDevReq>
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]
      break;
 800856e:	e020      	b.n	80085b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fbc7 	bl	8008d0c <USBD_StdItfReq>
 800857e:	4603      	mov	r3, r0
 8008580:	73fb      	strb	r3, [r7, #15]
      break;
 8008582:	e016      	b.n	80085b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fc29 	bl	8008de4 <USBD_StdEPReq>
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]
      break;
 8008596:	e00c      	b.n	80085b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800859e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 fdfc 	bl	800a1a4 <USBD_LL_StallEP>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]
      break;
 80085b0:	bf00      	nop
  }

  return ret;
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	460b      	mov	r3, r1
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d16e      	bne.n	80086b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	f040 8098 	bne.w	8008718 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d913      	bls.n	800861c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	1ad2      	subs	r2, r2, r3
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	4293      	cmp	r3, r2
 800860c:	bf28      	it	cs
 800860e:	4613      	movcs	r3, r2
 8008610:	461a      	mov	r2, r3
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f001 f984 	bl	8009922 <USBD_CtlContinueRx>
 800861a:	e07d      	b.n	8008718 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008622:	f003 031f 	and.w	r3, r3, #31
 8008626:	2b02      	cmp	r3, #2
 8008628:	d014      	beq.n	8008654 <USBD_LL_DataOutStage+0x98>
 800862a:	2b02      	cmp	r3, #2
 800862c:	d81d      	bhi.n	800866a <USBD_LL_DataOutStage+0xae>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <USBD_LL_DataOutStage+0x7c>
 8008632:	2b01      	cmp	r3, #1
 8008634:	d003      	beq.n	800863e <USBD_LL_DataOutStage+0x82>
 8008636:	e018      	b.n	800866a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	75bb      	strb	r3, [r7, #22]
            break;
 800863c:	e018      	b.n	8008670 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008644:	b2db      	uxtb	r3, r3
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 fa5e 	bl	8008b0a <USBD_CoreFindIF>
 800864e:	4603      	mov	r3, r0
 8008650:	75bb      	strb	r3, [r7, #22]
            break;
 8008652:	e00d      	b.n	8008670 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800865a:	b2db      	uxtb	r3, r3
 800865c:	4619      	mov	r1, r3
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 fa60 	bl	8008b24 <USBD_CoreFindEP>
 8008664:	4603      	mov	r3, r0
 8008666:	75bb      	strb	r3, [r7, #22]
            break;
 8008668:	e002      	b.n	8008670 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	75bb      	strb	r3, [r7, #22]
            break;
 800866e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008670:	7dbb      	ldrb	r3, [r7, #22]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d119      	bne.n	80086aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b03      	cmp	r3, #3
 8008680:	d113      	bne.n	80086aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008682:	7dba      	ldrb	r2, [r7, #22]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	32ae      	adds	r2, #174	; 0xae
 8008688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00b      	beq.n	80086aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008692:	7dba      	ldrb	r2, [r7, #22]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800869a:	7dba      	ldrb	r2, [r7, #22]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	32ae      	adds	r2, #174	; 0xae
 80086a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f001 f94a 	bl	8009944 <USBD_CtlSendStatus>
 80086b0:	e032      	b.n	8008718 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80086b2:	7afb      	ldrb	r3, [r7, #11]
 80086b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	4619      	mov	r1, r3
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 fa31 	bl	8008b24 <USBD_CoreFindEP>
 80086c2:	4603      	mov	r3, r0
 80086c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086c6:	7dbb      	ldrb	r3, [r7, #22]
 80086c8:	2bff      	cmp	r3, #255	; 0xff
 80086ca:	d025      	beq.n	8008718 <USBD_LL_DataOutStage+0x15c>
 80086cc:	7dbb      	ldrb	r3, [r7, #22]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d122      	bne.n	8008718 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d117      	bne.n	800870e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80086de:	7dba      	ldrb	r2, [r7, #22]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	32ae      	adds	r2, #174	; 0xae
 80086e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00f      	beq.n	800870e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80086ee:	7dba      	ldrb	r2, [r7, #22]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80086f6:	7dba      	ldrb	r2, [r7, #22]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	32ae      	adds	r2, #174	; 0xae
 80086fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	7afa      	ldrb	r2, [r7, #11]
 8008704:	4611      	mov	r1, r2
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	4798      	blx	r3
 800870a:	4603      	mov	r3, r0
 800870c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	e000      	b.n	800871a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b086      	sub	sp, #24
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	460b      	mov	r3, r1
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008730:	7afb      	ldrb	r3, [r7, #11]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d16f      	bne.n	8008816 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3314      	adds	r3, #20
 800873a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008742:	2b02      	cmp	r3, #2
 8008744:	d15a      	bne.n	80087fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	429a      	cmp	r2, r3
 8008750:	d914      	bls.n	800877c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	689a      	ldr	r2, [r3, #8]
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	1ad2      	subs	r2, r2, r3
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	461a      	mov	r2, r3
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f001 f8ac 	bl	80098c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800876e:	2300      	movs	r3, #0
 8008770:	2200      	movs	r2, #0
 8008772:	2100      	movs	r1, #0
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f001 fdbf 	bl	800a2f8 <USBD_LL_PrepareReceive>
 800877a:	e03f      	b.n	80087fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	429a      	cmp	r2, r3
 8008786:	d11c      	bne.n	80087c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008790:	429a      	cmp	r2, r3
 8008792:	d316      	bcc.n	80087c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800879e:	429a      	cmp	r2, r3
 80087a0:	d20f      	bcs.n	80087c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f001 f88d 	bl	80098c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087b4:	2300      	movs	r3, #0
 80087b6:	2200      	movs	r2, #0
 80087b8:	2100      	movs	r1, #0
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f001 fd9c 	bl	800a2f8 <USBD_LL_PrepareReceive>
 80087c0:	e01c      	b.n	80087fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d10f      	bne.n	80087ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d009      	beq.n	80087ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087ee:	2180      	movs	r1, #128	; 0x80
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f001 fcd7 	bl	800a1a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f001 f8b7 	bl	800996a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d03a      	beq.n	800887c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff fe42 	bl	8008490 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008814:	e032      	b.n	800887c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008816:	7afb      	ldrb	r3, [r7, #11]
 8008818:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800881c:	b2db      	uxtb	r3, r3
 800881e:	4619      	mov	r1, r3
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 f97f 	bl	8008b24 <USBD_CoreFindEP>
 8008826:	4603      	mov	r3, r0
 8008828:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	2bff      	cmp	r3, #255	; 0xff
 800882e:	d025      	beq.n	800887c <USBD_LL_DataInStage+0x15a>
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d122      	bne.n	800887c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b03      	cmp	r3, #3
 8008840:	d11c      	bne.n	800887c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008842:	7dfa      	ldrb	r2, [r7, #23]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	32ae      	adds	r2, #174	; 0xae
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d014      	beq.n	800887c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008852:	7dfa      	ldrb	r2, [r7, #23]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800885a:	7dfa      	ldrb	r2, [r7, #23]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	32ae      	adds	r2, #174	; 0xae
 8008860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	7afa      	ldrb	r2, [r7, #11]
 8008868:	4611      	mov	r1, r2
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	4798      	blx	r3
 800886e:	4603      	mov	r3, r0
 8008870:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008872:	7dbb      	ldrb	r3, [r7, #22]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008878:	7dbb      	ldrb	r3, [r7, #22]
 800887a:	e000      	b.n	800887e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d014      	beq.n	80088ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00e      	beq.n	80088ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	6852      	ldr	r2, [r2, #4]
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	4611      	mov	r1, r2
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	4798      	blx	r3
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80088e8:	2303      	movs	r3, #3
 80088ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088ec:	2340      	movs	r3, #64	; 0x40
 80088ee:	2200      	movs	r2, #0
 80088f0:	2100      	movs	r1, #0
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 fc11 	bl	800a11a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2240      	movs	r2, #64	; 0x40
 8008904:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008908:	2340      	movs	r3, #64	; 0x40
 800890a:	2200      	movs	r2, #0
 800890c:	2180      	movs	r1, #128	; 0x80
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 fc03 	bl	800a11a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2240      	movs	r2, #64	; 0x40
 800891e:	621a      	str	r2, [r3, #32]

  return ret;
 8008920:	7bfb      	ldrb	r3, [r7, #15]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008958:	b2da      	uxtb	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2204      	movs	r2, #4
 8008964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b04      	cmp	r3, #4
 8008988:	d106      	bne.n	8008998 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008990:	b2da      	uxtb	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d110      	bne.n	80089dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	460b      	mov	r3, r1
 80089f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	32ae      	adds	r2, #174	; 0xae
 80089fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e01c      	b.n	8008a42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d115      	bne.n	8008a40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	32ae      	adds	r2, #174	; 0xae
 8008a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	32ae      	adds	r2, #174	; 0xae
 8008a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	32ae      	adds	r2, #174	; 0xae
 8008a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e01c      	b.n	8008aa6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d115      	bne.n	8008aa4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	32ae      	adds	r2, #174	; 0xae
 8008a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	32ae      	adds	r2, #174	; 0xae
 8008a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	78fa      	ldrb	r2, [r7, #3]
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00e      	beq.n	8008b00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6852      	ldr	r2, [r2, #4]
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	4611      	mov	r1, r2
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008afc:	2303      	movs	r3, #3
 8008afe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d920      	bls.n	8008ba8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008b6e:	e013      	b.n	8008b98 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008b70:	f107 030a 	add.w	r3, r7, #10
 8008b74:	4619      	mov	r1, r3
 8008b76:	6978      	ldr	r0, [r7, #20]
 8008b78:	f000 f81b 	bl	8008bb2 <USBD_GetNextDesc>
 8008b7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	785b      	ldrb	r3, [r3, #1]
 8008b82:	2b05      	cmp	r3, #5
 8008b84:	d108      	bne.n	8008b98 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	789b      	ldrb	r3, [r3, #2]
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d008      	beq.n	8008ba6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	885b      	ldrh	r3, [r3, #2]
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	897b      	ldrh	r3, [r7, #10]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d8e5      	bhi.n	8008b70 <USBD_GetEpDesc+0x32>
 8008ba4:	e000      	b.n	8008ba8 <USBD_GetEpDesc+0x6a>
          break;
 8008ba6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008ba8:	693b      	ldr	r3, [r7, #16]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b085      	sub	sp, #20
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	881a      	ldrh	r2, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	4413      	add	r3, r2
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4413      	add	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bde:	68fb      	ldr	r3, [r7, #12]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	3301      	adds	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c0a:	8a3b      	ldrh	r3, [r7, #16]
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	b21a      	sxth	r2, r3
 8008c10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	b21b      	sxth	r3, r3
 8008c18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c1a:	89fb      	ldrh	r3, [r7, #14]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	371c      	adds	r7, #28
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c3e:	2b40      	cmp	r3, #64	; 0x40
 8008c40:	d005      	beq.n	8008c4e <USBD_StdDevReq+0x26>
 8008c42:	2b40      	cmp	r3, #64	; 0x40
 8008c44:	d857      	bhi.n	8008cf6 <USBD_StdDevReq+0xce>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00f      	beq.n	8008c6a <USBD_StdDevReq+0x42>
 8008c4a:	2b20      	cmp	r3, #32
 8008c4c:	d153      	bne.n	8008cf6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	32ae      	adds	r2, #174	; 0xae
 8008c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	4798      	blx	r3
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
      break;
 8008c68:	e04a      	b.n	8008d00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	2b09      	cmp	r3, #9
 8008c70:	d83b      	bhi.n	8008cea <USBD_StdDevReq+0xc2>
 8008c72:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <USBD_StdDevReq+0x50>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008ccd 	.word	0x08008ccd
 8008c7c:	08008ce1 	.word	0x08008ce1
 8008c80:	08008ceb 	.word	0x08008ceb
 8008c84:	08008cd7 	.word	0x08008cd7
 8008c88:	08008ceb 	.word	0x08008ceb
 8008c8c:	08008cab 	.word	0x08008cab
 8008c90:	08008ca1 	.word	0x08008ca1
 8008c94:	08008ceb 	.word	0x08008ceb
 8008c98:	08008cc3 	.word	0x08008cc3
 8008c9c:	08008cb5 	.word	0x08008cb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fa3c 	bl	8009120 <USBD_GetDescriptor>
          break;
 8008ca8:	e024      	b.n	8008cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fba1 	bl	80093f4 <USBD_SetAddress>
          break;
 8008cb2:	e01f      	b.n	8008cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fbe0 	bl	800947c <USBD_SetConfig>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]
          break;
 8008cc0:	e018      	b.n	8008cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fc83 	bl	80095d0 <USBD_GetConfig>
          break;
 8008cca:	e013      	b.n	8008cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fcb4 	bl	800963c <USBD_GetStatus>
          break;
 8008cd4:	e00e      	b.n	8008cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fce3 	bl	80096a4 <USBD_SetFeature>
          break;
 8008cde:	e009      	b.n	8008cf4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fd07 	bl	80096f6 <USBD_ClrFeature>
          break;
 8008ce8:	e004      	b.n	8008cf4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fd5e 	bl	80097ae <USBD_CtlError>
          break;
 8008cf2:	bf00      	nop
      }
      break;
 8008cf4:	e004      	b.n	8008d00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fd58 	bl	80097ae <USBD_CtlError>
      break;
 8008cfe:	bf00      	nop
  }

  return ret;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop

08008d0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d005      	beq.n	8008d32 <USBD_StdItfReq+0x26>
 8008d26:	2b40      	cmp	r3, #64	; 0x40
 8008d28:	d852      	bhi.n	8008dd0 <USBD_StdItfReq+0xc4>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <USBD_StdItfReq+0x26>
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d14e      	bne.n	8008dd0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d840      	bhi.n	8008dc2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	889b      	ldrh	r3, [r3, #4]
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d836      	bhi.n	8008db8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	889b      	ldrh	r3, [r3, #4]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff fed9 	bl	8008b0a <USBD_CoreFindIF>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	2bff      	cmp	r3, #255	; 0xff
 8008d60:	d01d      	beq.n	8008d9e <USBD_StdItfReq+0x92>
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d11a      	bne.n	8008d9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008d68:	7bba      	ldrb	r2, [r7, #14]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	32ae      	adds	r2, #174	; 0xae
 8008d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00f      	beq.n	8008d98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008d78:	7bba      	ldrb	r2, [r7, #14]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d80:	7bba      	ldrb	r2, [r7, #14]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	32ae      	adds	r2, #174	; 0xae
 8008d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	4798      	blx	r3
 8008d92:	4603      	mov	r3, r0
 8008d94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d96:	e004      	b.n	8008da2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d9c:	e001      	b.n	8008da2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	88db      	ldrh	r3, [r3, #6]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d110      	bne.n	8008dcc <USBD_StdItfReq+0xc0>
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10d      	bne.n	8008dcc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fdc7 	bl	8009944 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008db6:	e009      	b.n	8008dcc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fcf7 	bl	80097ae <USBD_CtlError>
          break;
 8008dc0:	e004      	b.n	8008dcc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fcf2 	bl	80097ae <USBD_CtlError>
          break;
 8008dca:	e000      	b.n	8008dce <USBD_StdItfReq+0xc2>
          break;
 8008dcc:	bf00      	nop
      }
      break;
 8008dce:	e004      	b.n	8008dda <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fceb 	bl	80097ae <USBD_CtlError>
      break;
 8008dd8:	bf00      	nop
  }

  return ret;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	889b      	ldrh	r3, [r3, #4]
 8008df6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e00:	2b40      	cmp	r3, #64	; 0x40
 8008e02:	d007      	beq.n	8008e14 <USBD_StdEPReq+0x30>
 8008e04:	2b40      	cmp	r3, #64	; 0x40
 8008e06:	f200 817f 	bhi.w	8009108 <USBD_StdEPReq+0x324>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d02a      	beq.n	8008e64 <USBD_StdEPReq+0x80>
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	f040 817a 	bne.w	8009108 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff fe83 	bl	8008b24 <USBD_CoreFindEP>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e22:	7b7b      	ldrb	r3, [r7, #13]
 8008e24:	2bff      	cmp	r3, #255	; 0xff
 8008e26:	f000 8174 	beq.w	8009112 <USBD_StdEPReq+0x32e>
 8008e2a:	7b7b      	ldrb	r3, [r7, #13]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f040 8170 	bne.w	8009112 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008e32:	7b7a      	ldrb	r2, [r7, #13]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008e3a:	7b7a      	ldrb	r2, [r7, #13]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	32ae      	adds	r2, #174	; 0xae
 8008e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 8163 	beq.w	8009112 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008e4c:	7b7a      	ldrb	r2, [r7, #13]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	32ae      	adds	r2, #174	; 0xae
 8008e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	4798      	blx	r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e62:	e156      	b.n	8009112 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b03      	cmp	r3, #3
 8008e6a:	d008      	beq.n	8008e7e <USBD_StdEPReq+0x9a>
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	f300 8145 	bgt.w	80090fc <USBD_StdEPReq+0x318>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 809b 	beq.w	8008fae <USBD_StdEPReq+0x1ca>
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d03c      	beq.n	8008ef6 <USBD_StdEPReq+0x112>
 8008e7c:	e13e      	b.n	80090fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d002      	beq.n	8008e90 <USBD_StdEPReq+0xac>
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d016      	beq.n	8008ebc <USBD_StdEPReq+0xd8>
 8008e8e:	e02c      	b.n	8008eea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00d      	beq.n	8008eb2 <USBD_StdEPReq+0xce>
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	2b80      	cmp	r3, #128	; 0x80
 8008e9a:	d00a      	beq.n	8008eb2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 f97f 	bl	800a1a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ea6:	2180      	movs	r1, #128	; 0x80
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 f97b 	bl	800a1a4 <USBD_LL_StallEP>
 8008eae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008eb0:	e020      	b.n	8008ef4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fc7a 	bl	80097ae <USBD_CtlError>
              break;
 8008eba:	e01b      	b.n	8008ef4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	885b      	ldrh	r3, [r3, #2]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10e      	bne.n	8008ee2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00b      	beq.n	8008ee2 <USBD_StdEPReq+0xfe>
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	2b80      	cmp	r3, #128	; 0x80
 8008ece:	d008      	beq.n	8008ee2 <USBD_StdEPReq+0xfe>
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	88db      	ldrh	r3, [r3, #6]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d104      	bne.n	8008ee2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f001 f961 	bl	800a1a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fd2e 	bl	8009944 <USBD_CtlSendStatus>

              break;
 8008ee8:	e004      	b.n	8008ef4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fc5e 	bl	80097ae <USBD_CtlError>
              break;
 8008ef2:	bf00      	nop
          }
          break;
 8008ef4:	e107      	b.n	8009106 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d002      	beq.n	8008f08 <USBD_StdEPReq+0x124>
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d016      	beq.n	8008f34 <USBD_StdEPReq+0x150>
 8008f06:	e04b      	b.n	8008fa0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00d      	beq.n	8008f2a <USBD_StdEPReq+0x146>
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
 8008f10:	2b80      	cmp	r3, #128	; 0x80
 8008f12:	d00a      	beq.n	8008f2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 f943 	bl	800a1a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f1e:	2180      	movs	r1, #128	; 0x80
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 f93f 	bl	800a1a4 <USBD_LL_StallEP>
 8008f26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f28:	e040      	b.n	8008fac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fc3e 	bl	80097ae <USBD_CtlError>
              break;
 8008f32:	e03b      	b.n	8008fac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	885b      	ldrh	r3, [r3, #2]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d136      	bne.n	8008faa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d004      	beq.n	8008f50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 f949 	bl	800a1e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fcf7 	bl	8009944 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff fde2 	bl	8008b24 <USBD_CoreFindEP>
 8008f60:	4603      	mov	r3, r0
 8008f62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f64:	7b7b      	ldrb	r3, [r7, #13]
 8008f66:	2bff      	cmp	r3, #255	; 0xff
 8008f68:	d01f      	beq.n	8008faa <USBD_StdEPReq+0x1c6>
 8008f6a:	7b7b      	ldrb	r3, [r7, #13]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d11c      	bne.n	8008faa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008f70:	7b7a      	ldrb	r2, [r7, #13]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008f78:	7b7a      	ldrb	r2, [r7, #13]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	32ae      	adds	r2, #174	; 0xae
 8008f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d010      	beq.n	8008faa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f88:	7b7a      	ldrb	r2, [r7, #13]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	32ae      	adds	r2, #174	; 0xae
 8008f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	4798      	blx	r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f9e:	e004      	b.n	8008faa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fc03 	bl	80097ae <USBD_CtlError>
              break;
 8008fa8:	e000      	b.n	8008fac <USBD_StdEPReq+0x1c8>
              break;
 8008faa:	bf00      	nop
          }
          break;
 8008fac:	e0ab      	b.n	8009106 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d002      	beq.n	8008fc0 <USBD_StdEPReq+0x1dc>
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d032      	beq.n	8009024 <USBD_StdEPReq+0x240>
 8008fbe:	e097      	b.n	80090f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d007      	beq.n	8008fd6 <USBD_StdEPReq+0x1f2>
 8008fc6:	7bbb      	ldrb	r3, [r7, #14]
 8008fc8:	2b80      	cmp	r3, #128	; 0x80
 8008fca:	d004      	beq.n	8008fd6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fbed 	bl	80097ae <USBD_CtlError>
                break;
 8008fd4:	e091      	b.n	80090fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	da0b      	bge.n	8008ff6 <USBD_StdEPReq+0x212>
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
 8008fe0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	3310      	adds	r3, #16
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	e00b      	b.n	800900e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	4413      	add	r3, r2
 800900c:	3304      	adds	r3, #4
 800900e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2202      	movs	r2, #2
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fc37 	bl	8009890 <USBD_CtlSendData>
              break;
 8009022:	e06a      	b.n	80090fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009028:	2b00      	cmp	r3, #0
 800902a:	da11      	bge.n	8009050 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	f003 020f 	and.w	r2, r3, #15
 8009032:	6879      	ldr	r1, [r7, #4]
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	3324      	adds	r3, #36	; 0x24
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d117      	bne.n	8009076 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fbb0 	bl	80097ae <USBD_CtlError>
                  break;
 800904e:	e054      	b.n	80090fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	f003 020f 	and.w	r2, r3, #15
 8009056:	6879      	ldr	r1, [r7, #4]
 8009058:	4613      	mov	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	440b      	add	r3, r1
 8009062:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fb9d 	bl	80097ae <USBD_CtlError>
                  break;
 8009074:	e041      	b.n	80090fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800907a:	2b00      	cmp	r3, #0
 800907c:	da0b      	bge.n	8009096 <USBD_StdEPReq+0x2b2>
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	3310      	adds	r3, #16
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	4413      	add	r3, r2
 8009092:	3304      	adds	r3, #4
 8009094:	e00b      	b.n	80090ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	4413      	add	r3, r2
 80090ac:	3304      	adds	r3, #4
 80090ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <USBD_StdEPReq+0x2d8>
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	2b80      	cmp	r3, #128	; 0x80
 80090ba:	d103      	bne.n	80090c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	e00e      	b.n	80090e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80090c4:	7bbb      	ldrb	r3, [r7, #14]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 f8a9 	bl	800a220 <USBD_LL_IsStallEP>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2201      	movs	r2, #1
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	e002      	b.n	80090e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2200      	movs	r2, #0
 80090e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2202      	movs	r2, #2
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fbd1 	bl	8009890 <USBD_CtlSendData>
              break;
 80090ee:	e004      	b.n	80090fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fb5b 	bl	80097ae <USBD_CtlError>
              break;
 80090f8:	bf00      	nop
          }
          break;
 80090fa:	e004      	b.n	8009106 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fb55 	bl	80097ae <USBD_CtlError>
          break;
 8009104:	bf00      	nop
      }
      break;
 8009106:	e005      	b.n	8009114 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fb4f 	bl	80097ae <USBD_CtlError>
      break;
 8009110:	e000      	b.n	8009114 <USBD_StdEPReq+0x330>
      break;
 8009112:	bf00      	nop
  }

  return ret;
 8009114:	7bfb      	ldrb	r3, [r7, #15]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	885b      	ldrh	r3, [r3, #2]
 800913a:	0a1b      	lsrs	r3, r3, #8
 800913c:	b29b      	uxth	r3, r3
 800913e:	3b01      	subs	r3, #1
 8009140:	2b06      	cmp	r3, #6
 8009142:	f200 8128 	bhi.w	8009396 <USBD_GetDescriptor+0x276>
 8009146:	a201      	add	r2, pc, #4	; (adr r2, 800914c <USBD_GetDescriptor+0x2c>)
 8009148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914c:	08009169 	.word	0x08009169
 8009150:	08009181 	.word	0x08009181
 8009154:	080091c1 	.word	0x080091c1
 8009158:	08009397 	.word	0x08009397
 800915c:	08009397 	.word	0x08009397
 8009160:	08009337 	.word	0x08009337
 8009164:	08009363 	.word	0x08009363
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	7c12      	ldrb	r2, [r2, #16]
 8009174:	f107 0108 	add.w	r1, r7, #8
 8009178:	4610      	mov	r0, r2
 800917a:	4798      	blx	r3
 800917c:	60f8      	str	r0, [r7, #12]
      break;
 800917e:	e112      	b.n	80093a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7c1b      	ldrb	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10d      	bne.n	80091a4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009190:	f107 0208 	add.w	r2, r7, #8
 8009194:	4610      	mov	r0, r2
 8009196:	4798      	blx	r3
 8009198:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3301      	adds	r3, #1
 800919e:	2202      	movs	r2, #2
 80091a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091a2:	e100      	b.n	80093a6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ac:	f107 0208 	add.w	r2, r7, #8
 80091b0:	4610      	mov	r0, r2
 80091b2:	4798      	blx	r3
 80091b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3301      	adds	r3, #1
 80091ba:	2202      	movs	r2, #2
 80091bc:	701a      	strb	r2, [r3, #0]
      break;
 80091be:	e0f2      	b.n	80093a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	885b      	ldrh	r3, [r3, #2]
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b05      	cmp	r3, #5
 80091c8:	f200 80ac 	bhi.w	8009324 <USBD_GetDescriptor+0x204>
 80091cc:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <USBD_GetDescriptor+0xb4>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	080091ed 	.word	0x080091ed
 80091d8:	08009221 	.word	0x08009221
 80091dc:	08009255 	.word	0x08009255
 80091e0:	08009289 	.word	0x08009289
 80091e4:	080092bd 	.word	0x080092bd
 80091e8:	080092f1 	.word	0x080092f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7c12      	ldrb	r2, [r2, #16]
 8009204:	f107 0108 	add.w	r1, r7, #8
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
 800920c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800920e:	e091      	b.n	8009334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 facb 	bl	80097ae <USBD_CtlError>
            err++;
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	3301      	adds	r3, #1
 800921c:	72fb      	strb	r3, [r7, #11]
          break;
 800921e:	e089      	b.n	8009334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	7c12      	ldrb	r2, [r2, #16]
 8009238:	f107 0108 	add.w	r1, r7, #8
 800923c:	4610      	mov	r0, r2
 800923e:	4798      	blx	r3
 8009240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009242:	e077      	b.n	8009334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fab1 	bl	80097ae <USBD_CtlError>
            err++;
 800924c:	7afb      	ldrb	r3, [r7, #11]
 800924e:	3301      	adds	r3, #1
 8009250:	72fb      	strb	r3, [r7, #11]
          break;
 8009252:	e06f      	b.n	8009334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	7c12      	ldrb	r2, [r2, #16]
 800926c:	f107 0108 	add.w	r1, r7, #8
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
 8009274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009276:	e05d      	b.n	8009334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fa97 	bl	80097ae <USBD_CtlError>
            err++;
 8009280:	7afb      	ldrb	r3, [r7, #11]
 8009282:	3301      	adds	r3, #1
 8009284:	72fb      	strb	r3, [r7, #11]
          break;
 8009286:	e055      	b.n	8009334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00b      	beq.n	80092ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	7c12      	ldrb	r2, [r2, #16]
 80092a0:	f107 0108 	add.w	r1, r7, #8
 80092a4:	4610      	mov	r0, r2
 80092a6:	4798      	blx	r3
 80092a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092aa:	e043      	b.n	8009334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa7d 	bl	80097ae <USBD_CtlError>
            err++;
 80092b4:	7afb      	ldrb	r3, [r7, #11]
 80092b6:	3301      	adds	r3, #1
 80092b8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ba:	e03b      	b.n	8009334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ce:	695b      	ldr	r3, [r3, #20]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	7c12      	ldrb	r2, [r2, #16]
 80092d4:	f107 0108 	add.w	r1, r7, #8
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
 80092dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092de:	e029      	b.n	8009334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fa63 	bl	80097ae <USBD_CtlError>
            err++;
 80092e8:	7afb      	ldrb	r3, [r7, #11]
 80092ea:	3301      	adds	r3, #1
 80092ec:	72fb      	strb	r3, [r7, #11]
          break;
 80092ee:	e021      	b.n	8009334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	7c12      	ldrb	r2, [r2, #16]
 8009308:	f107 0108 	add.w	r1, r7, #8
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009312:	e00f      	b.n	8009334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fa49 	bl	80097ae <USBD_CtlError>
            err++;
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	3301      	adds	r3, #1
 8009320:	72fb      	strb	r3, [r7, #11]
          break;
 8009322:	e007      	b.n	8009334 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa41 	bl	80097ae <USBD_CtlError>
          err++;
 800932c:	7afb      	ldrb	r3, [r7, #11]
 800932e:	3301      	adds	r3, #1
 8009330:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009332:	bf00      	nop
      }
      break;
 8009334:	e037      	b.n	80093a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7c1b      	ldrb	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d109      	bne.n	8009352 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009346:	f107 0208 	add.w	r2, r7, #8
 800934a:	4610      	mov	r0, r2
 800934c:	4798      	blx	r3
 800934e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009350:	e029      	b.n	80093a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fa2a 	bl	80097ae <USBD_CtlError>
        err++;
 800935a:	7afb      	ldrb	r3, [r7, #11]
 800935c:	3301      	adds	r3, #1
 800935e:	72fb      	strb	r3, [r7, #11]
      break;
 8009360:	e021      	b.n	80093a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	7c1b      	ldrb	r3, [r3, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10d      	bne.n	8009386 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009372:	f107 0208 	add.w	r2, r7, #8
 8009376:	4610      	mov	r0, r2
 8009378:	4798      	blx	r3
 800937a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3301      	adds	r3, #1
 8009380:	2207      	movs	r2, #7
 8009382:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009384:	e00f      	b.n	80093a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa10 	bl	80097ae <USBD_CtlError>
        err++;
 800938e:	7afb      	ldrb	r3, [r7, #11]
 8009390:	3301      	adds	r3, #1
 8009392:	72fb      	strb	r3, [r7, #11]
      break;
 8009394:	e007      	b.n	80093a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fa08 	bl	80097ae <USBD_CtlError>
      err++;
 800939e:	7afb      	ldrb	r3, [r7, #11]
 80093a0:	3301      	adds	r3, #1
 80093a2:	72fb      	strb	r3, [r7, #11]
      break;
 80093a4:	bf00      	nop
  }

  if (err != 0U)
 80093a6:	7afb      	ldrb	r3, [r7, #11]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d11e      	bne.n	80093ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	88db      	ldrh	r3, [r3, #6]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d016      	beq.n	80093e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80093b4:	893b      	ldrh	r3, [r7, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00e      	beq.n	80093d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	88da      	ldrh	r2, [r3, #6]
 80093be:	893b      	ldrh	r3, [r7, #8]
 80093c0:	4293      	cmp	r3, r2
 80093c2:	bf28      	it	cs
 80093c4:	4613      	movcs	r3, r2
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093ca:	893b      	ldrh	r3, [r7, #8]
 80093cc:	461a      	mov	r2, r3
 80093ce:	68f9      	ldr	r1, [r7, #12]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fa5d 	bl	8009890 <USBD_CtlSendData>
 80093d6:	e009      	b.n	80093ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f9e7 	bl	80097ae <USBD_CtlError>
 80093e0:	e004      	b.n	80093ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 faae 	bl	8009944 <USBD_CtlSendStatus>
 80093e8:	e000      	b.n	80093ec <USBD_GetDescriptor+0x2cc>
    return;
 80093ea:	bf00      	nop
  }
}
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop

080093f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	889b      	ldrh	r3, [r3, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d131      	bne.n	800946a <USBD_SetAddress+0x76>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	88db      	ldrh	r3, [r3, #6]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d12d      	bne.n	800946a <USBD_SetAddress+0x76>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	885b      	ldrh	r3, [r3, #2]
 8009412:	2b7f      	cmp	r3, #127	; 0x7f
 8009414:	d829      	bhi.n	800946a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	885b      	ldrh	r3, [r3, #2]
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009420:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b03      	cmp	r3, #3
 800942c:	d104      	bne.n	8009438 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f9bc 	bl	80097ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009436:	e01d      	b.n	8009474 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	7bfa      	ldrb	r2, [r7, #15]
 800943c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 ff17 	bl	800a278 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fa7a 	bl	8009944 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d004      	beq.n	8009460 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2202      	movs	r2, #2
 800945a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800945e:	e009      	b.n	8009474 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009468:	e004      	b.n	8009474 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f99e 	bl	80097ae <USBD_CtlError>
  }
}
 8009472:	bf00      	nop
 8009474:	bf00      	nop
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	885b      	ldrh	r3, [r3, #2]
 800948e:	b2da      	uxtb	r2, r3
 8009490:	4b4e      	ldr	r3, [pc, #312]	; (80095cc <USBD_SetConfig+0x150>)
 8009492:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009494:	4b4d      	ldr	r3, [pc, #308]	; (80095cc <USBD_SetConfig+0x150>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d905      	bls.n	80094a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f985 	bl	80097ae <USBD_CtlError>
    return USBD_FAIL;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e08c      	b.n	80095c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d002      	beq.n	80094ba <USBD_SetConfig+0x3e>
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d029      	beq.n	800950c <USBD_SetConfig+0x90>
 80094b8:	e075      	b.n	80095a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80094ba:	4b44      	ldr	r3, [pc, #272]	; (80095cc <USBD_SetConfig+0x150>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d020      	beq.n	8009504 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80094c2:	4b42      	ldr	r3, [pc, #264]	; (80095cc <USBD_SetConfig+0x150>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094cc:	4b3f      	ldr	r3, [pc, #252]	; (80095cc <USBD_SetConfig+0x150>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7fe ffe7 	bl	80084a6 <USBD_SetClassConfig>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d008      	beq.n	80094f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f962 	bl	80097ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2202      	movs	r2, #2
 80094ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094f2:	e065      	b.n	80095c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fa25 	bl	8009944 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2203      	movs	r2, #3
 80094fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009502:	e05d      	b.n	80095c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fa1d 	bl	8009944 <USBD_CtlSendStatus>
      break;
 800950a:	e059      	b.n	80095c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800950c:	4b2f      	ldr	r3, [pc, #188]	; (80095cc <USBD_SetConfig+0x150>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d112      	bne.n	800953a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800951c:	4b2b      	ldr	r3, [pc, #172]	; (80095cc <USBD_SetConfig+0x150>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	461a      	mov	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009526:	4b29      	ldr	r3, [pc, #164]	; (80095cc <USBD_SetConfig+0x150>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7fe ffd6 	bl	80084de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fa06 	bl	8009944 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009538:	e042      	b.n	80095c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800953a:	4b24      	ldr	r3, [pc, #144]	; (80095cc <USBD_SetConfig+0x150>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	461a      	mov	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	429a      	cmp	r2, r3
 8009546:	d02a      	beq.n	800959e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7fe ffc4 	bl	80084de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009556:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <USBD_SetConfig+0x150>)
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009560:	4b1a      	ldr	r3, [pc, #104]	; (80095cc <USBD_SetConfig+0x150>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7fe ff9d 	bl	80084a6 <USBD_SetClassConfig>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00f      	beq.n	8009596 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f918 	bl	80097ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7fe ffa9 	bl	80084de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009594:	e014      	b.n	80095c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f9d4 	bl	8009944 <USBD_CtlSendStatus>
      break;
 800959c:	e010      	b.n	80095c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f9d0 	bl	8009944 <USBD_CtlSendStatus>
      break;
 80095a4:	e00c      	b.n	80095c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f900 	bl	80097ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095ae:	4b07      	ldr	r3, [pc, #28]	; (80095cc <USBD_SetConfig+0x150>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7fe ff92 	bl	80084de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80095ba:	2303      	movs	r3, #3
 80095bc:	73fb      	strb	r3, [r7, #15]
      break;
 80095be:	bf00      	nop
  }

  return ret;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20001220 	.word	0x20001220

080095d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	88db      	ldrh	r3, [r3, #6]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d004      	beq.n	80095ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f8e2 	bl	80097ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095ea:	e023      	b.n	8009634 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	dc02      	bgt.n	80095fe <USBD_GetConfig+0x2e>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	dc03      	bgt.n	8009604 <USBD_GetConfig+0x34>
 80095fc:	e015      	b.n	800962a <USBD_GetConfig+0x5a>
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d00b      	beq.n	800961a <USBD_GetConfig+0x4a>
 8009602:	e012      	b.n	800962a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3308      	adds	r3, #8
 800960e:	2201      	movs	r2, #1
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f93c 	bl	8009890 <USBD_CtlSendData>
        break;
 8009618:	e00c      	b.n	8009634 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3304      	adds	r3, #4
 800961e:	2201      	movs	r2, #1
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f934 	bl	8009890 <USBD_CtlSendData>
        break;
 8009628:	e004      	b.n	8009634 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f8be 	bl	80097ae <USBD_CtlError>
        break;
 8009632:	bf00      	nop
}
 8009634:	bf00      	nop
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800964c:	b2db      	uxtb	r3, r3
 800964e:	3b01      	subs	r3, #1
 8009650:	2b02      	cmp	r3, #2
 8009652:	d81e      	bhi.n	8009692 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	88db      	ldrh	r3, [r3, #6]
 8009658:	2b02      	cmp	r3, #2
 800965a:	d004      	beq.n	8009666 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f8a5 	bl	80097ae <USBD_CtlError>
        break;
 8009664:	e01a      	b.n	800969c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f043 0202 	orr.w	r2, r3, #2
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	330c      	adds	r3, #12
 8009686:	2202      	movs	r2, #2
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f900 	bl	8009890 <USBD_CtlSendData>
      break;
 8009690:	e004      	b.n	800969c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f88a 	bl	80097ae <USBD_CtlError>
      break;
 800969a:	bf00      	nop
  }
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	885b      	ldrh	r3, [r3, #2]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d107      	bne.n	80096c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f940 	bl	8009944 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80096c4:	e013      	b.n	80096ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	885b      	ldrh	r3, [r3, #2]
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d10b      	bne.n	80096e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	889b      	ldrh	r3, [r3, #4]
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f930 	bl	8009944 <USBD_CtlSendStatus>
}
 80096e4:	e003      	b.n	80096ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f860 	bl	80097ae <USBD_CtlError>
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009706:	b2db      	uxtb	r3, r3
 8009708:	3b01      	subs	r3, #1
 800970a:	2b02      	cmp	r3, #2
 800970c:	d80b      	bhi.n	8009726 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	885b      	ldrh	r3, [r3, #2]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d10c      	bne.n	8009730 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f910 	bl	8009944 <USBD_CtlSendStatus>
      }
      break;
 8009724:	e004      	b.n	8009730 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f840 	bl	80097ae <USBD_CtlError>
      break;
 800972e:	e000      	b.n	8009732 <USBD_ClrFeature+0x3c>
      break;
 8009730:	bf00      	nop
  }
}
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	781a      	ldrb	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3301      	adds	r3, #1
 8009754:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	781a      	ldrb	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f7ff fa41 	bl	8008bec <SWAPBYTE>
 800976a:	4603      	mov	r3, r0
 800976c:	461a      	mov	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3301      	adds	r3, #1
 8009776:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3301      	adds	r3, #1
 800977c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7ff fa34 	bl	8008bec <SWAPBYTE>
 8009784:	4603      	mov	r3, r0
 8009786:	461a      	mov	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3301      	adds	r3, #1
 8009790:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3301      	adds	r3, #1
 8009796:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fa27 	bl	8008bec <SWAPBYTE>
 800979e:	4603      	mov	r3, r0
 80097a0:	461a      	mov	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	80da      	strh	r2, [r3, #6]
}
 80097a6:	bf00      	nop
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80097b8:	2180      	movs	r1, #128	; 0x80
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fcf2 	bl	800a1a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80097c0:	2100      	movs	r1, #0
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fcee 	bl	800a1a4 <USBD_LL_StallEP>
}
 80097c8:	bf00      	nop
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d036      	beq.n	8009854 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80097ea:	6938      	ldr	r0, [r7, #16]
 80097ec:	f000 f836 	bl	800985c <USBD_GetLen>
 80097f0:	4603      	mov	r3, r0
 80097f2:	3301      	adds	r3, #1
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	005b      	lsls	r3, r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	4413      	add	r3, r2
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	7812      	ldrb	r2, [r2, #0]
 8009808:	701a      	strb	r2, [r3, #0]
  idx++;
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	3301      	adds	r3, #1
 800980e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	4413      	add	r3, r2
 8009816:	2203      	movs	r2, #3
 8009818:	701a      	strb	r2, [r3, #0]
  idx++;
 800981a:	7dfb      	ldrb	r3, [r7, #23]
 800981c:	3301      	adds	r3, #1
 800981e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009820:	e013      	b.n	800984a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009822:	7dfb      	ldrb	r3, [r7, #23]
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	4413      	add	r3, r2
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	7812      	ldrb	r2, [r2, #0]
 800982c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	3301      	adds	r3, #1
 8009832:	613b      	str	r3, [r7, #16]
    idx++;
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	3301      	adds	r3, #1
 8009838:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	4413      	add	r3, r2
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]
    idx++;
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	3301      	adds	r3, #1
 8009848:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1e7      	bne.n	8009822 <USBD_GetString+0x52>
 8009852:	e000      	b.n	8009856 <USBD_GetString+0x86>
    return;
 8009854:	bf00      	nop
  }
}
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800986c:	e005      	b.n	800987a <USBD_GetLen+0x1e>
  {
    len++;
 800986e:	7bfb      	ldrb	r3, [r7, #15]
 8009870:	3301      	adds	r3, #1
 8009872:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	3301      	adds	r3, #1
 8009878:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1f5      	bne.n	800986e <USBD_GetLen+0x12>
  }

  return len;
 8009882:	7bfb      	ldrb	r3, [r7, #15]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2202      	movs	r2, #2
 80098a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	2100      	movs	r1, #0
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f000 fcfd 	bl	800a2b6 <USBD_LL_Transmit>

  return USBD_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	2100      	movs	r1, #0
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fcec 	bl	800a2b6 <USBD_LL_Transmit>

  return USBD_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2203      	movs	r2, #3
 80098f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	2100      	movs	r1, #0
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f000 fcf0 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b084      	sub	sp, #16
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	2100      	movs	r1, #0
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fcdf 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2204      	movs	r2, #4
 8009950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009954:	2300      	movs	r3, #0
 8009956:	2200      	movs	r2, #0
 8009958:	2100      	movs	r1, #0
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fcab 	bl	800a2b6 <USBD_LL_Transmit>

  return USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2205      	movs	r2, #5
 8009976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800997a:	2300      	movs	r3, #0
 800997c:	2200      	movs	r2, #0
 800997e:	2100      	movs	r1, #0
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fcb9 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009994:	2200      	movs	r2, #0
 8009996:	4912      	ldr	r1, [pc, #72]	; (80099e0 <MX_USB_DEVICE_Init+0x50>)
 8009998:	4812      	ldr	r0, [pc, #72]	; (80099e4 <MX_USB_DEVICE_Init+0x54>)
 800999a:	f7fe fd07 	bl	80083ac <USBD_Init>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099a4:	f7f8 fb92 	bl	80020cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099a8:	490f      	ldr	r1, [pc, #60]	; (80099e8 <MX_USB_DEVICE_Init+0x58>)
 80099aa:	480e      	ldr	r0, [pc, #56]	; (80099e4 <MX_USB_DEVICE_Init+0x54>)
 80099ac:	f7fe fd2e 	bl	800840c <USBD_RegisterClass>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099b6:	f7f8 fb89 	bl	80020cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099ba:	490c      	ldr	r1, [pc, #48]	; (80099ec <MX_USB_DEVICE_Init+0x5c>)
 80099bc:	4809      	ldr	r0, [pc, #36]	; (80099e4 <MX_USB_DEVICE_Init+0x54>)
 80099be:	f7fe fc1f 	bl	8008200 <USBD_CDC_RegisterInterface>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099c8:	f7f8 fb80 	bl	80020cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099cc:	4805      	ldr	r0, [pc, #20]	; (80099e4 <MX_USB_DEVICE_Init+0x54>)
 80099ce:	f7fe fd53 	bl	8008478 <USBD_Start>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099d8:	f7f8 fb78 	bl	80020cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099dc:	bf00      	nop
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	200000ac 	.word	0x200000ac
 80099e4:	20001224 	.word	0x20001224
 80099e8:	20000018 	.word	0x20000018
 80099ec:	20000098 	.word	0x20000098

080099f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099f4:	2200      	movs	r2, #0
 80099f6:	4905      	ldr	r1, [pc, #20]	; (8009a0c <CDC_Init_FS+0x1c>)
 80099f8:	4805      	ldr	r0, [pc, #20]	; (8009a10 <CDC_Init_FS+0x20>)
 80099fa:	f7fe fc1b 	bl	8008234 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099fe:	4905      	ldr	r1, [pc, #20]	; (8009a14 <CDC_Init_FS+0x24>)
 8009a00:	4803      	ldr	r0, [pc, #12]	; (8009a10 <CDC_Init_FS+0x20>)
 8009a02:	f7fe fc39 	bl	8008278 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20001d00 	.word	0x20001d00
 8009a10:	20001224 	.word	0x20001224
 8009a14:	20001500 	.word	0x20001500

08009a18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	6039      	str	r1, [r7, #0]
 8009a32:	71fb      	strb	r3, [r7, #7]
 8009a34:	4613      	mov	r3, r2
 8009a36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	2b23      	cmp	r3, #35	; 0x23
 8009a3c:	d84a      	bhi.n	8009ad4 <CDC_Control_FS+0xac>
 8009a3e:	a201      	add	r2, pc, #4	; (adr r2, 8009a44 <CDC_Control_FS+0x1c>)
 8009a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a44:	08009ad5 	.word	0x08009ad5
 8009a48:	08009ad5 	.word	0x08009ad5
 8009a4c:	08009ad5 	.word	0x08009ad5
 8009a50:	08009ad5 	.word	0x08009ad5
 8009a54:	08009ad5 	.word	0x08009ad5
 8009a58:	08009ad5 	.word	0x08009ad5
 8009a5c:	08009ad5 	.word	0x08009ad5
 8009a60:	08009ad5 	.word	0x08009ad5
 8009a64:	08009ad5 	.word	0x08009ad5
 8009a68:	08009ad5 	.word	0x08009ad5
 8009a6c:	08009ad5 	.word	0x08009ad5
 8009a70:	08009ad5 	.word	0x08009ad5
 8009a74:	08009ad5 	.word	0x08009ad5
 8009a78:	08009ad5 	.word	0x08009ad5
 8009a7c:	08009ad5 	.word	0x08009ad5
 8009a80:	08009ad5 	.word	0x08009ad5
 8009a84:	08009ad5 	.word	0x08009ad5
 8009a88:	08009ad5 	.word	0x08009ad5
 8009a8c:	08009ad5 	.word	0x08009ad5
 8009a90:	08009ad5 	.word	0x08009ad5
 8009a94:	08009ad5 	.word	0x08009ad5
 8009a98:	08009ad5 	.word	0x08009ad5
 8009a9c:	08009ad5 	.word	0x08009ad5
 8009aa0:	08009ad5 	.word	0x08009ad5
 8009aa4:	08009ad5 	.word	0x08009ad5
 8009aa8:	08009ad5 	.word	0x08009ad5
 8009aac:	08009ad5 	.word	0x08009ad5
 8009ab0:	08009ad5 	.word	0x08009ad5
 8009ab4:	08009ad5 	.word	0x08009ad5
 8009ab8:	08009ad5 	.word	0x08009ad5
 8009abc:	08009ad5 	.word	0x08009ad5
 8009ac0:	08009ad5 	.word	0x08009ad5
 8009ac4:	08009ad5 	.word	0x08009ad5
 8009ac8:	08009ad5 	.word	0x08009ad5
 8009acc:	08009ad5 	.word	0x08009ad5
 8009ad0:	08009ad5 	.word	0x08009ad5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ad4:	bf00      	nop
  }

  return (USBD_OK);
 8009ad6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4807      	ldr	r0, [pc, #28]	; (8009b10 <CDC_Receive_FS+0x2c>)
 8009af2:	f7fe fbc1 	bl	8008278 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009af6:	4806      	ldr	r0, [pc, #24]	; (8009b10 <CDC_Receive_FS+0x2c>)
 8009af8:	f7fe fc22 	bl	8008340 <USBD_CDC_ReceivePacket>
  usbCallback(Buf, Len);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7f7 ff5a 	bl	80019b8 <usbCallback>
  return (USBD_OK);
 8009b04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20001224 	.word	0x20001224

08009b14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b24:	4b0d      	ldr	r3, [pc, #52]	; (8009b5c <CDC_Transmit_FS+0x48>)
 8009b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e00b      	b.n	8009b52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b3a:	887b      	ldrh	r3, [r7, #2]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	4806      	ldr	r0, [pc, #24]	; (8009b5c <CDC_Transmit_FS+0x48>)
 8009b42:	f7fe fb77 	bl	8008234 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b46:	4805      	ldr	r0, [pc, #20]	; (8009b5c <CDC_Transmit_FS+0x48>)
 8009b48:	f7fe fbb4 	bl	80082b4 <USBD_CDC_TransmitPacket>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20001224 	.word	0x20001224

08009b60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
	...

08009b84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2212      	movs	r2, #18
 8009b94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b96:	4b03      	ldr	r3, [pc, #12]	; (8009ba4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr
 8009ba4:	200000c8 	.word	0x200000c8

08009ba8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	6039      	str	r1, [r7, #0]
 8009bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2204      	movs	r2, #4
 8009bb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bba:	4b03      	ldr	r3, [pc, #12]	; (8009bc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	200000dc 	.word	0x200000dc

08009bcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	6039      	str	r1, [r7, #0]
 8009bd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bd8:	79fb      	ldrb	r3, [r7, #7]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d105      	bne.n	8009bea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	4907      	ldr	r1, [pc, #28]	; (8009c00 <USBD_FS_ProductStrDescriptor+0x34>)
 8009be2:	4808      	ldr	r0, [pc, #32]	; (8009c04 <USBD_FS_ProductStrDescriptor+0x38>)
 8009be4:	f7ff fdf4 	bl	80097d0 <USBD_GetString>
 8009be8:	e004      	b.n	8009bf4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	4904      	ldr	r1, [pc, #16]	; (8009c00 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bee:	4805      	ldr	r0, [pc, #20]	; (8009c04 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bf0:	f7ff fdee 	bl	80097d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bf4:	4b02      	ldr	r3, [pc, #8]	; (8009c00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	20002500 	.word	0x20002500
 8009c04:	0800fbd8 	.word	0x0800fbd8

08009c08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	6039      	str	r1, [r7, #0]
 8009c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	4904      	ldr	r1, [pc, #16]	; (8009c28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c18:	4804      	ldr	r0, [pc, #16]	; (8009c2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c1a:	f7ff fdd9 	bl	80097d0 <USBD_GetString>
  return USBD_StrDesc;
 8009c1e:	4b02      	ldr	r3, [pc, #8]	; (8009c28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	20002500 	.word	0x20002500
 8009c2c:	0800fbf0 	.word	0x0800fbf0

08009c30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	221a      	movs	r2, #26
 8009c40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c42:	f000 f843 	bl	8009ccc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c46:	4b02      	ldr	r3, [pc, #8]	; (8009c50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	200000e0 	.word	0x200000e0

08009c54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d105      	bne.n	8009c72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	4907      	ldr	r1, [pc, #28]	; (8009c88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c6a:	4808      	ldr	r0, [pc, #32]	; (8009c8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c6c:	f7ff fdb0 	bl	80097d0 <USBD_GetString>
 8009c70:	e004      	b.n	8009c7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	4904      	ldr	r1, [pc, #16]	; (8009c88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c76:	4805      	ldr	r0, [pc, #20]	; (8009c8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c78:	f7ff fdaa 	bl	80097d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c7c:	4b02      	ldr	r3, [pc, #8]	; (8009c88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20002500 	.word	0x20002500
 8009c8c:	0800fc04 	.word	0x0800fc04

08009c90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	6039      	str	r1, [r7, #0]
 8009c9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c9c:	79fb      	ldrb	r3, [r7, #7]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d105      	bne.n	8009cae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	4907      	ldr	r1, [pc, #28]	; (8009cc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ca6:	4808      	ldr	r0, [pc, #32]	; (8009cc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ca8:	f7ff fd92 	bl	80097d0 <USBD_GetString>
 8009cac:	e004      	b.n	8009cb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	4904      	ldr	r1, [pc, #16]	; (8009cc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cb2:	4805      	ldr	r0, [pc, #20]	; (8009cc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cb4:	f7ff fd8c 	bl	80097d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cb8:	4b02      	ldr	r3, [pc, #8]	; (8009cc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20002500 	.word	0x20002500
 8009cc8:	0800fc10 	.word	0x0800fc10

08009ccc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cd2:	4b0f      	ldr	r3, [pc, #60]	; (8009d10 <Get_SerialNum+0x44>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cd8:	4b0e      	ldr	r3, [pc, #56]	; (8009d14 <Get_SerialNum+0x48>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cde:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <Get_SerialNum+0x4c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4413      	add	r3, r2
 8009cea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d009      	beq.n	8009d06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cf2:	2208      	movs	r2, #8
 8009cf4:	4909      	ldr	r1, [pc, #36]	; (8009d1c <Get_SerialNum+0x50>)
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 f814 	bl	8009d24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cfc:	2204      	movs	r2, #4
 8009cfe:	4908      	ldr	r1, [pc, #32]	; (8009d20 <Get_SerialNum+0x54>)
 8009d00:	68b8      	ldr	r0, [r7, #8]
 8009d02:	f000 f80f 	bl	8009d24 <IntToUnicode>
  }
}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	1fff7a10 	.word	0x1fff7a10
 8009d14:	1fff7a14 	.word	0x1fff7a14
 8009d18:	1fff7a18 	.word	0x1fff7a18
 8009d1c:	200000e2 	.word	0x200000e2
 8009d20:	200000f2 	.word	0x200000f2

08009d24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b087      	sub	sp, #28
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d36:	2300      	movs	r3, #0
 8009d38:	75fb      	strb	r3, [r7, #23]
 8009d3a:	e027      	b.n	8009d8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	0f1b      	lsrs	r3, r3, #28
 8009d40:	2b09      	cmp	r3, #9
 8009d42:	d80b      	bhi.n	8009d5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	0f1b      	lsrs	r3, r3, #28
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	4619      	mov	r1, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	440b      	add	r3, r1
 8009d54:	3230      	adds	r2, #48	; 0x30
 8009d56:	b2d2      	uxtb	r2, r2
 8009d58:	701a      	strb	r2, [r3, #0]
 8009d5a:	e00a      	b.n	8009d72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	0f1b      	lsrs	r3, r3, #28
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	4619      	mov	r1, r3
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	440b      	add	r3, r1
 8009d6c:	3237      	adds	r2, #55	; 0x37
 8009d6e:	b2d2      	uxtb	r2, r2
 8009d70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	011b      	lsls	r3, r3, #4
 8009d76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
 8009d7a:	005b      	lsls	r3, r3, #1
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	4413      	add	r3, r2
 8009d82:	2200      	movs	r2, #0
 8009d84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	75fb      	strb	r3, [r7, #23]
 8009d8c:	7dfa      	ldrb	r2, [r7, #23]
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d3d3      	bcc.n	8009d3c <IntToUnicode+0x18>
  }
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop
 8009d98:	371c      	adds	r7, #28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
	...

08009da4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08a      	sub	sp, #40	; 0x28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dac:	f107 0314 	add.w	r3, r7, #20
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	605a      	str	r2, [r3, #4]
 8009db6:	609a      	str	r2, [r3, #8]
 8009db8:	60da      	str	r2, [r3, #12]
 8009dba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dc4:	d147      	bne.n	8009e56 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	613b      	str	r3, [r7, #16]
 8009dca:	4b25      	ldr	r3, [pc, #148]	; (8009e60 <HAL_PCD_MspInit+0xbc>)
 8009dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dce:	4a24      	ldr	r2, [pc, #144]	; (8009e60 <HAL_PCD_MspInit+0xbc>)
 8009dd0:	f043 0301 	orr.w	r3, r3, #1
 8009dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8009dd6:	4b22      	ldr	r3, [pc, #136]	; (8009e60 <HAL_PCD_MspInit+0xbc>)
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	613b      	str	r3, [r7, #16]
 8009de0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009de8:	2300      	movs	r3, #0
 8009dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dec:	2300      	movs	r3, #0
 8009dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009df0:	f107 0314 	add.w	r3, r7, #20
 8009df4:	4619      	mov	r1, r3
 8009df6:	481b      	ldr	r0, [pc, #108]	; (8009e64 <HAL_PCD_MspInit+0xc0>)
 8009df8:	f7f8 fdda 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009dfc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e02:	2302      	movs	r3, #2
 8009e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e0e:	230a      	movs	r3, #10
 8009e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e12:	f107 0314 	add.w	r3, r7, #20
 8009e16:	4619      	mov	r1, r3
 8009e18:	4812      	ldr	r0, [pc, #72]	; (8009e64 <HAL_PCD_MspInit+0xc0>)
 8009e1a:	f7f8 fdc9 	bl	80029b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e1e:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <HAL_PCD_MspInit+0xbc>)
 8009e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e22:	4a0f      	ldr	r2, [pc, #60]	; (8009e60 <HAL_PCD_MspInit+0xbc>)
 8009e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e28:	6353      	str	r3, [r2, #52]	; 0x34
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	4b0c      	ldr	r3, [pc, #48]	; (8009e60 <HAL_PCD_MspInit+0xbc>)
 8009e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e32:	4a0b      	ldr	r2, [pc, #44]	; (8009e60 <HAL_PCD_MspInit+0xbc>)
 8009e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e38:	6453      	str	r3, [r2, #68]	; 0x44
 8009e3a:	4b09      	ldr	r3, [pc, #36]	; (8009e60 <HAL_PCD_MspInit+0xbc>)
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e46:	2200      	movs	r2, #0
 8009e48:	2100      	movs	r1, #0
 8009e4a:	2043      	movs	r0, #67	; 0x43
 8009e4c:	f7f8 fd79 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e50:	2043      	movs	r0, #67	; 0x43
 8009e52:	f7f8 fd92 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e56:	bf00      	nop
 8009e58:	3728      	adds	r7, #40	; 0x28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	40023800 	.word	0x40023800
 8009e64:	40020000 	.word	0x40020000

08009e68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7fe fb47 	bl	8008512 <USBD_LL_SetupStage>
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e9e:	78fa      	ldrb	r2, [r7, #3]
 8009ea0:	6879      	ldr	r1, [r7, #4]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	00db      	lsls	r3, r3, #3
 8009ea6:	4413      	add	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	440b      	add	r3, r1
 8009eac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	78fb      	ldrb	r3, [r7, #3]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	f7fe fb81 	bl	80085bc <USBD_LL_DataOutStage>
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009ed4:	78fa      	ldrb	r2, [r7, #3]
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	00db      	lsls	r3, r3, #3
 8009edc:	4413      	add	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	334c      	adds	r3, #76	; 0x4c
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	78fb      	ldrb	r3, [r7, #3]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	f7fe fc1a 	bl	8008722 <USBD_LL_DataInStage>
}
 8009eee:	bf00      	nop
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe fd4e 	bl	80089a6 <USBD_LL_SOF>
}
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d102      	bne.n	8009f2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
 8009f2a:	e008      	b.n	8009f3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d102      	bne.n	8009f3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009f34:	2301      	movs	r3, #1
 8009f36:	73fb      	strb	r3, [r7, #15]
 8009f38:	e001      	b.n	8009f3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009f3a:	f7f8 f8c7 	bl	80020cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f44:	7bfa      	ldrb	r2, [r7, #15]
 8009f46:	4611      	mov	r1, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fe fcee 	bl	800892a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe fc96 	bl	8008886 <USBD_LL_Reset>
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fce9 	bl	800894a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6812      	ldr	r2, [r2, #0]
 8009f86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f8a:	f043 0301 	orr.w	r3, r3, #1
 8009f8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a1b      	ldr	r3, [r3, #32]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f98:	4b04      	ldr	r3, [pc, #16]	; (8009fac <HAL_PCD_SuspendCallback+0x48>)
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	4a03      	ldr	r2, [pc, #12]	; (8009fac <HAL_PCD_SuspendCallback+0x48>)
 8009f9e:	f043 0306 	orr.w	r3, r3, #6
 8009fa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	e000ed00 	.word	0xe000ed00

08009fb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fcd9 	bl	8008976 <USBD_LL_Resume>
}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fde:	78fa      	ldrb	r2, [r7, #3]
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fe fd31 	bl	8008a4a <USBD_LL_IsoOUTIncomplete>
}
 8009fe8:	bf00      	nop
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a002:	78fa      	ldrb	r2, [r7, #3]
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe fced 	bl	80089e6 <USBD_LL_IsoINIncomplete>
}
 800a00c:	bf00      	nop
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe fd43 	bl	8008aae <USBD_LL_DevConnected>
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fd40 	bl	8008ac4 <USBD_LL_DevDisconnected>
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d13c      	bne.n	800a0d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a05c:	4a20      	ldr	r2, [pc, #128]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a1e      	ldr	r2, [pc, #120]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a068:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a06c:	4b1c      	ldr	r3, [pc, #112]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a06e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a072:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a074:	4b1a      	ldr	r3, [pc, #104]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a076:	2204      	movs	r2, #4
 800a078:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a07a:	4b19      	ldr	r3, [pc, #100]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a07c:	2202      	movs	r2, #2
 800a07e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a080:	4b17      	ldr	r3, [pc, #92]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a082:	2200      	movs	r2, #0
 800a084:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a086:	4b16      	ldr	r3, [pc, #88]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a088:	2202      	movs	r2, #2
 800a08a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a08c:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a08e:	2200      	movs	r2, #0
 800a090:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a092:	4b13      	ldr	r3, [pc, #76]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a094:	2200      	movs	r2, #0
 800a096:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a098:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a09e:	4b10      	ldr	r3, [pc, #64]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a0aa:	480d      	ldr	r0, [pc, #52]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0ac:	f7f8 ff94 	bl	8002fd8 <HAL_PCD_Init>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a0b6:	f7f8 f809 	bl	80020cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a0ba:	2180      	movs	r1, #128	; 0x80
 800a0bc:	4808      	ldr	r0, [pc, #32]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0be:	f7fa f9ec 	bl	800449a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a0c2:	2240      	movs	r2, #64	; 0x40
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4806      	ldr	r0, [pc, #24]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0c8:	f7fa f9a0 	bl	800440c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a0cc:	2280      	movs	r2, #128	; 0x80
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	4803      	ldr	r0, [pc, #12]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0d2:	f7fa f99b 	bl	800440c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	20002700 	.word	0x20002700

0800a0e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7f9 f889 	bl	8003212 <HAL_PCD_Start>
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 f942 	bl	800a390 <USBD_Get_USB_Status>
 800a10c:	4603      	mov	r3, r0
 800a10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a110:	7bbb      	ldrb	r3, [r7, #14]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	4608      	mov	r0, r1
 800a124:	4611      	mov	r1, r2
 800a126:	461a      	mov	r2, r3
 800a128:	4603      	mov	r3, r0
 800a12a:	70fb      	strb	r3, [r7, #3]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70bb      	strb	r3, [r7, #2]
 800a130:	4613      	mov	r3, r2
 800a132:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a138:	2300      	movs	r3, #0
 800a13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a142:	78bb      	ldrb	r3, [r7, #2]
 800a144:	883a      	ldrh	r2, [r7, #0]
 800a146:	78f9      	ldrb	r1, [r7, #3]
 800a148:	f7f9 fd5a 	bl	8003c00 <HAL_PCD_EP_Open>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	4618      	mov	r0, r3
 800a154:	f000 f91c 	bl	800a390 <USBD_Get_USB_Status>
 800a158:	4603      	mov	r3, r0
 800a15a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	460b      	mov	r3, r1
 800a170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a180:	78fa      	ldrb	r2, [r7, #3]
 800a182:	4611      	mov	r1, r2
 800a184:	4618      	mov	r0, r3
 800a186:	f7f9 fda3 	bl	8003cd0 <HAL_PCD_EP_Close>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
 800a190:	4618      	mov	r0, r3
 800a192:	f000 f8fd 	bl	800a390 <USBD_Get_USB_Status>
 800a196:	4603      	mov	r3, r0
 800a198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1be:	78fa      	ldrb	r2, [r7, #3]
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7f9 fe7b 	bl	8003ebe <HAL_PCD_EP_SetStall>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 f8de 	bl	800a390 <USBD_Get_USB_Status>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1fc:	78fa      	ldrb	r2, [r7, #3]
 800a1fe:	4611      	mov	r1, r2
 800a200:	4618      	mov	r0, r3
 800a202:	f7f9 fec0 	bl	8003f86 <HAL_PCD_EP_ClrStall>
 800a206:	4603      	mov	r3, r0
 800a208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 f8bf 	bl	800a390 <USBD_Get_USB_Status>
 800a212:	4603      	mov	r3, r0
 800a214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a216:	7bbb      	ldrb	r3, [r7, #14]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a232:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da0b      	bge.n	800a254 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a242:	68f9      	ldr	r1, [r7, #12]
 800a244:	4613      	mov	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	440b      	add	r3, r1
 800a24e:	333e      	adds	r3, #62	; 0x3e
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	e00b      	b.n	800a26c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	4613      	mov	r3, r2
 800a25e:	00db      	lsls	r3, r3, #3
 800a260:	4413      	add	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	440b      	add	r3, r1
 800a266:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a26a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a292:	78fa      	ldrb	r2, [r7, #3]
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f7f9 fc8d 	bl	8003bb6 <HAL_PCD_SetAddress>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f874 	bl	800a390 <USBD_Get_USB_Status>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b086      	sub	sp, #24
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2d4:	7af9      	ldrb	r1, [r7, #11]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	f7f9 fda6 	bl	8003e2a <HAL_PCD_EP_Transmit>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f853 	bl	800a390 <USBD_Get_USB_Status>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	607a      	str	r2, [r7, #4]
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	460b      	mov	r3, r1
 800a306:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a316:	7af9      	ldrb	r1, [r7, #11]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	f7f9 fd22 	bl	8003d64 <HAL_PCD_EP_Receive>
 800a320:	4603      	mov	r3, r0
 800a322:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a324:	7dfb      	ldrb	r3, [r7, #23]
 800a326:	4618      	mov	r0, r3
 800a328:	f000 f832 	bl	800a390 <USBD_Get_USB_Status>
 800a32c:	4603      	mov	r3, r0
 800a32e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a330:	7dbb      	ldrb	r3, [r7, #22]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b082      	sub	sp, #8
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	460b      	mov	r3, r1
 800a344:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a34c:	78fa      	ldrb	r2, [r7, #3]
 800a34e:	4611      	mov	r1, r2
 800a350:	4618      	mov	r0, r3
 800a352:	f7f9 fd52 	bl	8003dfa <HAL_PCD_EP_GetRxCount>
 800a356:	4603      	mov	r3, r0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a368:	4b03      	ldr	r3, [pc, #12]	; (800a378 <USBD_static_malloc+0x18>)
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	20002c0c 	.word	0x20002c0c

0800a37c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]

}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d817      	bhi.n	800a3d4 <USBD_Get_USB_Status+0x44>
 800a3a4:	a201      	add	r2, pc, #4	; (adr r2, 800a3ac <USBD_Get_USB_Status+0x1c>)
 800a3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3aa:	bf00      	nop
 800a3ac:	0800a3bd 	.word	0x0800a3bd
 800a3b0:	0800a3c3 	.word	0x0800a3c3
 800a3b4:	0800a3c9 	.word	0x0800a3c9
 800a3b8:	0800a3cf 	.word	0x0800a3cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c0:	e00b      	b.n	800a3da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c6:	e008      	b.n	800a3da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a3cc:	e005      	b.n	800a3da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d2:	e002      	b.n	800a3da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d8:	bf00      	nop
  }
  return usb_status;
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <_ZdlPvj>:
 800a3e8:	f000 b800 	b.w	800a3ec <_ZdlPv>

0800a3ec <_ZdlPv>:
 800a3ec:	f000 b832 	b.w	800a454 <free>

0800a3f0 <__errno>:
 800a3f0:	4b01      	ldr	r3, [pc, #4]	; (800a3f8 <__errno+0x8>)
 800a3f2:	6818      	ldr	r0, [r3, #0]
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	200000fc 	.word	0x200000fc

0800a3fc <__libc_init_array>:
 800a3fc:	b570      	push	{r4, r5, r6, lr}
 800a3fe:	4d0d      	ldr	r5, [pc, #52]	; (800a434 <__libc_init_array+0x38>)
 800a400:	4c0d      	ldr	r4, [pc, #52]	; (800a438 <__libc_init_array+0x3c>)
 800a402:	1b64      	subs	r4, r4, r5
 800a404:	10a4      	asrs	r4, r4, #2
 800a406:	2600      	movs	r6, #0
 800a408:	42a6      	cmp	r6, r4
 800a40a:	d109      	bne.n	800a420 <__libc_init_array+0x24>
 800a40c:	4d0b      	ldr	r5, [pc, #44]	; (800a43c <__libc_init_array+0x40>)
 800a40e:	4c0c      	ldr	r4, [pc, #48]	; (800a440 <__libc_init_array+0x44>)
 800a410:	f005 f8d0 	bl	800f5b4 <_init>
 800a414:	1b64      	subs	r4, r4, r5
 800a416:	10a4      	asrs	r4, r4, #2
 800a418:	2600      	movs	r6, #0
 800a41a:	42a6      	cmp	r6, r4
 800a41c:	d105      	bne.n	800a42a <__libc_init_array+0x2e>
 800a41e:	bd70      	pop	{r4, r5, r6, pc}
 800a420:	f855 3b04 	ldr.w	r3, [r5], #4
 800a424:	4798      	blx	r3
 800a426:	3601      	adds	r6, #1
 800a428:	e7ee      	b.n	800a408 <__libc_init_array+0xc>
 800a42a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42e:	4798      	blx	r3
 800a430:	3601      	adds	r6, #1
 800a432:	e7f2      	b.n	800a41a <__libc_init_array+0x1e>
 800a434:	0801014c 	.word	0x0801014c
 800a438:	0801014c 	.word	0x0801014c
 800a43c:	0801014c 	.word	0x0801014c
 800a440:	08010154 	.word	0x08010154

0800a444 <malloc>:
 800a444:	4b02      	ldr	r3, [pc, #8]	; (800a450 <malloc+0xc>)
 800a446:	4601      	mov	r1, r0
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	f000 b88d 	b.w	800a568 <_malloc_r>
 800a44e:	bf00      	nop
 800a450:	200000fc 	.word	0x200000fc

0800a454 <free>:
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <free+0xc>)
 800a456:	4601      	mov	r1, r0
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f000 b819 	b.w	800a490 <_free_r>
 800a45e:	bf00      	nop
 800a460:	200000fc 	.word	0x200000fc

0800a464 <memcpy>:
 800a464:	440a      	add	r2, r1
 800a466:	4291      	cmp	r1, r2
 800a468:	f100 33ff 	add.w	r3, r0, #4294967295
 800a46c:	d100      	bne.n	800a470 <memcpy+0xc>
 800a46e:	4770      	bx	lr
 800a470:	b510      	push	{r4, lr}
 800a472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a47a:	4291      	cmp	r1, r2
 800a47c:	d1f9      	bne.n	800a472 <memcpy+0xe>
 800a47e:	bd10      	pop	{r4, pc}

0800a480 <memset>:
 800a480:	4402      	add	r2, r0
 800a482:	4603      	mov	r3, r0
 800a484:	4293      	cmp	r3, r2
 800a486:	d100      	bne.n	800a48a <memset+0xa>
 800a488:	4770      	bx	lr
 800a48a:	f803 1b01 	strb.w	r1, [r3], #1
 800a48e:	e7f9      	b.n	800a484 <memset+0x4>

0800a490 <_free_r>:
 800a490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a492:	2900      	cmp	r1, #0
 800a494:	d044      	beq.n	800a520 <_free_r+0x90>
 800a496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a49a:	9001      	str	r0, [sp, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f1a1 0404 	sub.w	r4, r1, #4
 800a4a2:	bfb8      	it	lt
 800a4a4:	18e4      	addlt	r4, r4, r3
 800a4a6:	f003 f8d9 	bl	800d65c <__malloc_lock>
 800a4aa:	4a1e      	ldr	r2, [pc, #120]	; (800a524 <_free_r+0x94>)
 800a4ac:	9801      	ldr	r0, [sp, #4]
 800a4ae:	6813      	ldr	r3, [r2, #0]
 800a4b0:	b933      	cbnz	r3, 800a4c0 <_free_r+0x30>
 800a4b2:	6063      	str	r3, [r4, #4]
 800a4b4:	6014      	str	r4, [r2, #0]
 800a4b6:	b003      	add	sp, #12
 800a4b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4bc:	f003 b8d4 	b.w	800d668 <__malloc_unlock>
 800a4c0:	42a3      	cmp	r3, r4
 800a4c2:	d908      	bls.n	800a4d6 <_free_r+0x46>
 800a4c4:	6825      	ldr	r5, [r4, #0]
 800a4c6:	1961      	adds	r1, r4, r5
 800a4c8:	428b      	cmp	r3, r1
 800a4ca:	bf01      	itttt	eq
 800a4cc:	6819      	ldreq	r1, [r3, #0]
 800a4ce:	685b      	ldreq	r3, [r3, #4]
 800a4d0:	1949      	addeq	r1, r1, r5
 800a4d2:	6021      	streq	r1, [r4, #0]
 800a4d4:	e7ed      	b.n	800a4b2 <_free_r+0x22>
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	b10b      	cbz	r3, 800a4e0 <_free_r+0x50>
 800a4dc:	42a3      	cmp	r3, r4
 800a4de:	d9fa      	bls.n	800a4d6 <_free_r+0x46>
 800a4e0:	6811      	ldr	r1, [r2, #0]
 800a4e2:	1855      	adds	r5, r2, r1
 800a4e4:	42a5      	cmp	r5, r4
 800a4e6:	d10b      	bne.n	800a500 <_free_r+0x70>
 800a4e8:	6824      	ldr	r4, [r4, #0]
 800a4ea:	4421      	add	r1, r4
 800a4ec:	1854      	adds	r4, r2, r1
 800a4ee:	42a3      	cmp	r3, r4
 800a4f0:	6011      	str	r1, [r2, #0]
 800a4f2:	d1e0      	bne.n	800a4b6 <_free_r+0x26>
 800a4f4:	681c      	ldr	r4, [r3, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	6053      	str	r3, [r2, #4]
 800a4fa:	4421      	add	r1, r4
 800a4fc:	6011      	str	r1, [r2, #0]
 800a4fe:	e7da      	b.n	800a4b6 <_free_r+0x26>
 800a500:	d902      	bls.n	800a508 <_free_r+0x78>
 800a502:	230c      	movs	r3, #12
 800a504:	6003      	str	r3, [r0, #0]
 800a506:	e7d6      	b.n	800a4b6 <_free_r+0x26>
 800a508:	6825      	ldr	r5, [r4, #0]
 800a50a:	1961      	adds	r1, r4, r5
 800a50c:	428b      	cmp	r3, r1
 800a50e:	bf04      	itt	eq
 800a510:	6819      	ldreq	r1, [r3, #0]
 800a512:	685b      	ldreq	r3, [r3, #4]
 800a514:	6063      	str	r3, [r4, #4]
 800a516:	bf04      	itt	eq
 800a518:	1949      	addeq	r1, r1, r5
 800a51a:	6021      	streq	r1, [r4, #0]
 800a51c:	6054      	str	r4, [r2, #4]
 800a51e:	e7ca      	b.n	800a4b6 <_free_r+0x26>
 800a520:	b003      	add	sp, #12
 800a522:	bd30      	pop	{r4, r5, pc}
 800a524:	20002e2c 	.word	0x20002e2c

0800a528 <sbrk_aligned>:
 800a528:	b570      	push	{r4, r5, r6, lr}
 800a52a:	4e0e      	ldr	r6, [pc, #56]	; (800a564 <sbrk_aligned+0x3c>)
 800a52c:	460c      	mov	r4, r1
 800a52e:	6831      	ldr	r1, [r6, #0]
 800a530:	4605      	mov	r5, r0
 800a532:	b911      	cbnz	r1, 800a53a <sbrk_aligned+0x12>
 800a534:	f000 ff06 	bl	800b344 <_sbrk_r>
 800a538:	6030      	str	r0, [r6, #0]
 800a53a:	4621      	mov	r1, r4
 800a53c:	4628      	mov	r0, r5
 800a53e:	f000 ff01 	bl	800b344 <_sbrk_r>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	d00a      	beq.n	800a55c <sbrk_aligned+0x34>
 800a546:	1cc4      	adds	r4, r0, #3
 800a548:	f024 0403 	bic.w	r4, r4, #3
 800a54c:	42a0      	cmp	r0, r4
 800a54e:	d007      	beq.n	800a560 <sbrk_aligned+0x38>
 800a550:	1a21      	subs	r1, r4, r0
 800a552:	4628      	mov	r0, r5
 800a554:	f000 fef6 	bl	800b344 <_sbrk_r>
 800a558:	3001      	adds	r0, #1
 800a55a:	d101      	bne.n	800a560 <sbrk_aligned+0x38>
 800a55c:	f04f 34ff 	mov.w	r4, #4294967295
 800a560:	4620      	mov	r0, r4
 800a562:	bd70      	pop	{r4, r5, r6, pc}
 800a564:	20002e30 	.word	0x20002e30

0800a568 <_malloc_r>:
 800a568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56c:	1ccd      	adds	r5, r1, #3
 800a56e:	f025 0503 	bic.w	r5, r5, #3
 800a572:	3508      	adds	r5, #8
 800a574:	2d0c      	cmp	r5, #12
 800a576:	bf38      	it	cc
 800a578:	250c      	movcc	r5, #12
 800a57a:	2d00      	cmp	r5, #0
 800a57c:	4607      	mov	r7, r0
 800a57e:	db01      	blt.n	800a584 <_malloc_r+0x1c>
 800a580:	42a9      	cmp	r1, r5
 800a582:	d905      	bls.n	800a590 <_malloc_r+0x28>
 800a584:	230c      	movs	r3, #12
 800a586:	603b      	str	r3, [r7, #0]
 800a588:	2600      	movs	r6, #0
 800a58a:	4630      	mov	r0, r6
 800a58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a590:	4e2e      	ldr	r6, [pc, #184]	; (800a64c <_malloc_r+0xe4>)
 800a592:	f003 f863 	bl	800d65c <__malloc_lock>
 800a596:	6833      	ldr	r3, [r6, #0]
 800a598:	461c      	mov	r4, r3
 800a59a:	bb34      	cbnz	r4, 800a5ea <_malloc_r+0x82>
 800a59c:	4629      	mov	r1, r5
 800a59e:	4638      	mov	r0, r7
 800a5a0:	f7ff ffc2 	bl	800a528 <sbrk_aligned>
 800a5a4:	1c43      	adds	r3, r0, #1
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	d14d      	bne.n	800a646 <_malloc_r+0xde>
 800a5aa:	6834      	ldr	r4, [r6, #0]
 800a5ac:	4626      	mov	r6, r4
 800a5ae:	2e00      	cmp	r6, #0
 800a5b0:	d140      	bne.n	800a634 <_malloc_r+0xcc>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	4631      	mov	r1, r6
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	eb04 0803 	add.w	r8, r4, r3
 800a5bc:	f000 fec2 	bl	800b344 <_sbrk_r>
 800a5c0:	4580      	cmp	r8, r0
 800a5c2:	d13a      	bne.n	800a63a <_malloc_r+0xd2>
 800a5c4:	6821      	ldr	r1, [r4, #0]
 800a5c6:	3503      	adds	r5, #3
 800a5c8:	1a6d      	subs	r5, r5, r1
 800a5ca:	f025 0503 	bic.w	r5, r5, #3
 800a5ce:	3508      	adds	r5, #8
 800a5d0:	2d0c      	cmp	r5, #12
 800a5d2:	bf38      	it	cc
 800a5d4:	250c      	movcc	r5, #12
 800a5d6:	4629      	mov	r1, r5
 800a5d8:	4638      	mov	r0, r7
 800a5da:	f7ff ffa5 	bl	800a528 <sbrk_aligned>
 800a5de:	3001      	adds	r0, #1
 800a5e0:	d02b      	beq.n	800a63a <_malloc_r+0xd2>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	442b      	add	r3, r5
 800a5e6:	6023      	str	r3, [r4, #0]
 800a5e8:	e00e      	b.n	800a608 <_malloc_r+0xa0>
 800a5ea:	6822      	ldr	r2, [r4, #0]
 800a5ec:	1b52      	subs	r2, r2, r5
 800a5ee:	d41e      	bmi.n	800a62e <_malloc_r+0xc6>
 800a5f0:	2a0b      	cmp	r2, #11
 800a5f2:	d916      	bls.n	800a622 <_malloc_r+0xba>
 800a5f4:	1961      	adds	r1, r4, r5
 800a5f6:	42a3      	cmp	r3, r4
 800a5f8:	6025      	str	r5, [r4, #0]
 800a5fa:	bf18      	it	ne
 800a5fc:	6059      	strne	r1, [r3, #4]
 800a5fe:	6863      	ldr	r3, [r4, #4]
 800a600:	bf08      	it	eq
 800a602:	6031      	streq	r1, [r6, #0]
 800a604:	5162      	str	r2, [r4, r5]
 800a606:	604b      	str	r3, [r1, #4]
 800a608:	4638      	mov	r0, r7
 800a60a:	f104 060b 	add.w	r6, r4, #11
 800a60e:	f003 f82b 	bl	800d668 <__malloc_unlock>
 800a612:	f026 0607 	bic.w	r6, r6, #7
 800a616:	1d23      	adds	r3, r4, #4
 800a618:	1af2      	subs	r2, r6, r3
 800a61a:	d0b6      	beq.n	800a58a <_malloc_r+0x22>
 800a61c:	1b9b      	subs	r3, r3, r6
 800a61e:	50a3      	str	r3, [r4, r2]
 800a620:	e7b3      	b.n	800a58a <_malloc_r+0x22>
 800a622:	6862      	ldr	r2, [r4, #4]
 800a624:	42a3      	cmp	r3, r4
 800a626:	bf0c      	ite	eq
 800a628:	6032      	streq	r2, [r6, #0]
 800a62a:	605a      	strne	r2, [r3, #4]
 800a62c:	e7ec      	b.n	800a608 <_malloc_r+0xa0>
 800a62e:	4623      	mov	r3, r4
 800a630:	6864      	ldr	r4, [r4, #4]
 800a632:	e7b2      	b.n	800a59a <_malloc_r+0x32>
 800a634:	4634      	mov	r4, r6
 800a636:	6876      	ldr	r6, [r6, #4]
 800a638:	e7b9      	b.n	800a5ae <_malloc_r+0x46>
 800a63a:	230c      	movs	r3, #12
 800a63c:	603b      	str	r3, [r7, #0]
 800a63e:	4638      	mov	r0, r7
 800a640:	f003 f812 	bl	800d668 <__malloc_unlock>
 800a644:	e7a1      	b.n	800a58a <_malloc_r+0x22>
 800a646:	6025      	str	r5, [r4, #0]
 800a648:	e7de      	b.n	800a608 <_malloc_r+0xa0>
 800a64a:	bf00      	nop
 800a64c:	20002e2c 	.word	0x20002e2c

0800a650 <__cvt>:
 800a650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a654:	ec55 4b10 	vmov	r4, r5, d0
 800a658:	2d00      	cmp	r5, #0
 800a65a:	460e      	mov	r6, r1
 800a65c:	4619      	mov	r1, r3
 800a65e:	462b      	mov	r3, r5
 800a660:	bfbb      	ittet	lt
 800a662:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a666:	461d      	movlt	r5, r3
 800a668:	2300      	movge	r3, #0
 800a66a:	232d      	movlt	r3, #45	; 0x2d
 800a66c:	700b      	strb	r3, [r1, #0]
 800a66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a670:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a674:	4691      	mov	r9, r2
 800a676:	f023 0820 	bic.w	r8, r3, #32
 800a67a:	bfbc      	itt	lt
 800a67c:	4622      	movlt	r2, r4
 800a67e:	4614      	movlt	r4, r2
 800a680:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a684:	d005      	beq.n	800a692 <__cvt+0x42>
 800a686:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a68a:	d100      	bne.n	800a68e <__cvt+0x3e>
 800a68c:	3601      	adds	r6, #1
 800a68e:	2102      	movs	r1, #2
 800a690:	e000      	b.n	800a694 <__cvt+0x44>
 800a692:	2103      	movs	r1, #3
 800a694:	ab03      	add	r3, sp, #12
 800a696:	9301      	str	r3, [sp, #4]
 800a698:	ab02      	add	r3, sp, #8
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	ec45 4b10 	vmov	d0, r4, r5
 800a6a0:	4653      	mov	r3, sl
 800a6a2:	4632      	mov	r2, r6
 800a6a4:	f001 fe54 	bl	800c350 <_dtoa_r>
 800a6a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	d102      	bne.n	800a6b6 <__cvt+0x66>
 800a6b0:	f019 0f01 	tst.w	r9, #1
 800a6b4:	d022      	beq.n	800a6fc <__cvt+0xac>
 800a6b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6ba:	eb07 0906 	add.w	r9, r7, r6
 800a6be:	d110      	bne.n	800a6e2 <__cvt+0x92>
 800a6c0:	783b      	ldrb	r3, [r7, #0]
 800a6c2:	2b30      	cmp	r3, #48	; 0x30
 800a6c4:	d10a      	bne.n	800a6dc <__cvt+0x8c>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	f7f6 f9fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6d2:	b918      	cbnz	r0, 800a6dc <__cvt+0x8c>
 800a6d4:	f1c6 0601 	rsb	r6, r6, #1
 800a6d8:	f8ca 6000 	str.w	r6, [sl]
 800a6dc:	f8da 3000 	ldr.w	r3, [sl]
 800a6e0:	4499      	add	r9, r3
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	f7f6 f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6ee:	b108      	cbz	r0, 800a6f4 <__cvt+0xa4>
 800a6f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6f4:	2230      	movs	r2, #48	; 0x30
 800a6f6:	9b03      	ldr	r3, [sp, #12]
 800a6f8:	454b      	cmp	r3, r9
 800a6fa:	d307      	bcc.n	800a70c <__cvt+0xbc>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a700:	1bdb      	subs	r3, r3, r7
 800a702:	4638      	mov	r0, r7
 800a704:	6013      	str	r3, [r2, #0]
 800a706:	b004      	add	sp, #16
 800a708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70c:	1c59      	adds	r1, r3, #1
 800a70e:	9103      	str	r1, [sp, #12]
 800a710:	701a      	strb	r2, [r3, #0]
 800a712:	e7f0      	b.n	800a6f6 <__cvt+0xa6>

0800a714 <__exponent>:
 800a714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a716:	4603      	mov	r3, r0
 800a718:	2900      	cmp	r1, #0
 800a71a:	bfb8      	it	lt
 800a71c:	4249      	neglt	r1, r1
 800a71e:	f803 2b02 	strb.w	r2, [r3], #2
 800a722:	bfb4      	ite	lt
 800a724:	222d      	movlt	r2, #45	; 0x2d
 800a726:	222b      	movge	r2, #43	; 0x2b
 800a728:	2909      	cmp	r1, #9
 800a72a:	7042      	strb	r2, [r0, #1]
 800a72c:	dd2a      	ble.n	800a784 <__exponent+0x70>
 800a72e:	f10d 0407 	add.w	r4, sp, #7
 800a732:	46a4      	mov	ip, r4
 800a734:	270a      	movs	r7, #10
 800a736:	46a6      	mov	lr, r4
 800a738:	460a      	mov	r2, r1
 800a73a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a73e:	fb07 1516 	mls	r5, r7, r6, r1
 800a742:	3530      	adds	r5, #48	; 0x30
 800a744:	2a63      	cmp	r2, #99	; 0x63
 800a746:	f104 34ff 	add.w	r4, r4, #4294967295
 800a74a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a74e:	4631      	mov	r1, r6
 800a750:	dcf1      	bgt.n	800a736 <__exponent+0x22>
 800a752:	3130      	adds	r1, #48	; 0x30
 800a754:	f1ae 0502 	sub.w	r5, lr, #2
 800a758:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a75c:	1c44      	adds	r4, r0, #1
 800a75e:	4629      	mov	r1, r5
 800a760:	4561      	cmp	r1, ip
 800a762:	d30a      	bcc.n	800a77a <__exponent+0x66>
 800a764:	f10d 0209 	add.w	r2, sp, #9
 800a768:	eba2 020e 	sub.w	r2, r2, lr
 800a76c:	4565      	cmp	r5, ip
 800a76e:	bf88      	it	hi
 800a770:	2200      	movhi	r2, #0
 800a772:	4413      	add	r3, r2
 800a774:	1a18      	subs	r0, r3, r0
 800a776:	b003      	add	sp, #12
 800a778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a77e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a782:	e7ed      	b.n	800a760 <__exponent+0x4c>
 800a784:	2330      	movs	r3, #48	; 0x30
 800a786:	3130      	adds	r1, #48	; 0x30
 800a788:	7083      	strb	r3, [r0, #2]
 800a78a:	70c1      	strb	r1, [r0, #3]
 800a78c:	1d03      	adds	r3, r0, #4
 800a78e:	e7f1      	b.n	800a774 <__exponent+0x60>

0800a790 <_printf_float>:
 800a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	ed2d 8b02 	vpush	{d8}
 800a798:	b08d      	sub	sp, #52	; 0x34
 800a79a:	460c      	mov	r4, r1
 800a79c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a7a0:	4616      	mov	r6, r2
 800a7a2:	461f      	mov	r7, r3
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	f002 ff31 	bl	800d60c <_localeconv_r>
 800a7aa:	f8d0 a000 	ldr.w	sl, [r0]
 800a7ae:	4650      	mov	r0, sl
 800a7b0:	f7f5 fd0e 	bl	80001d0 <strlen>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	9305      	str	r3, [sp, #20]
 800a7bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a7c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a7c4:	3307      	adds	r3, #7
 800a7c6:	f023 0307 	bic.w	r3, r3, #7
 800a7ca:	f103 0208 	add.w	r2, r3, #8
 800a7ce:	f8c8 2000 	str.w	r2, [r8]
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a7da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a7de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7e2:	9307      	str	r3, [sp, #28]
 800a7e4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7e8:	ee08 0a10 	vmov	s16, r0
 800a7ec:	4b9f      	ldr	r3, [pc, #636]	; (800aa6c <_printf_float+0x2dc>)
 800a7ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f6:	f7f6 f999 	bl	8000b2c <__aeabi_dcmpun>
 800a7fa:	bb88      	cbnz	r0, 800a860 <_printf_float+0xd0>
 800a7fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a800:	4b9a      	ldr	r3, [pc, #616]	; (800aa6c <_printf_float+0x2dc>)
 800a802:	f04f 32ff 	mov.w	r2, #4294967295
 800a806:	f7f6 f973 	bl	8000af0 <__aeabi_dcmple>
 800a80a:	bb48      	cbnz	r0, 800a860 <_printf_float+0xd0>
 800a80c:	2200      	movs	r2, #0
 800a80e:	2300      	movs	r3, #0
 800a810:	4640      	mov	r0, r8
 800a812:	4649      	mov	r1, r9
 800a814:	f7f6 f962 	bl	8000adc <__aeabi_dcmplt>
 800a818:	b110      	cbz	r0, 800a820 <_printf_float+0x90>
 800a81a:	232d      	movs	r3, #45	; 0x2d
 800a81c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a820:	4b93      	ldr	r3, [pc, #588]	; (800aa70 <_printf_float+0x2e0>)
 800a822:	4894      	ldr	r0, [pc, #592]	; (800aa74 <_printf_float+0x2e4>)
 800a824:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a828:	bf94      	ite	ls
 800a82a:	4698      	movls	r8, r3
 800a82c:	4680      	movhi	r8, r0
 800a82e:	2303      	movs	r3, #3
 800a830:	6123      	str	r3, [r4, #16]
 800a832:	9b05      	ldr	r3, [sp, #20]
 800a834:	f023 0204 	bic.w	r2, r3, #4
 800a838:	6022      	str	r2, [r4, #0]
 800a83a:	f04f 0900 	mov.w	r9, #0
 800a83e:	9700      	str	r7, [sp, #0]
 800a840:	4633      	mov	r3, r6
 800a842:	aa0b      	add	r2, sp, #44	; 0x2c
 800a844:	4621      	mov	r1, r4
 800a846:	4628      	mov	r0, r5
 800a848:	f000 f9d8 	bl	800abfc <_printf_common>
 800a84c:	3001      	adds	r0, #1
 800a84e:	f040 8090 	bne.w	800a972 <_printf_float+0x1e2>
 800a852:	f04f 30ff 	mov.w	r0, #4294967295
 800a856:	b00d      	add	sp, #52	; 0x34
 800a858:	ecbd 8b02 	vpop	{d8}
 800a85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a860:	4642      	mov	r2, r8
 800a862:	464b      	mov	r3, r9
 800a864:	4640      	mov	r0, r8
 800a866:	4649      	mov	r1, r9
 800a868:	f7f6 f960 	bl	8000b2c <__aeabi_dcmpun>
 800a86c:	b140      	cbz	r0, 800a880 <_printf_float+0xf0>
 800a86e:	464b      	mov	r3, r9
 800a870:	2b00      	cmp	r3, #0
 800a872:	bfbc      	itt	lt
 800a874:	232d      	movlt	r3, #45	; 0x2d
 800a876:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a87a:	487f      	ldr	r0, [pc, #508]	; (800aa78 <_printf_float+0x2e8>)
 800a87c:	4b7f      	ldr	r3, [pc, #508]	; (800aa7c <_printf_float+0x2ec>)
 800a87e:	e7d1      	b.n	800a824 <_printf_float+0x94>
 800a880:	6863      	ldr	r3, [r4, #4]
 800a882:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a886:	9206      	str	r2, [sp, #24]
 800a888:	1c5a      	adds	r2, r3, #1
 800a88a:	d13f      	bne.n	800a90c <_printf_float+0x17c>
 800a88c:	2306      	movs	r3, #6
 800a88e:	6063      	str	r3, [r4, #4]
 800a890:	9b05      	ldr	r3, [sp, #20]
 800a892:	6861      	ldr	r1, [r4, #4]
 800a894:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a898:	2300      	movs	r3, #0
 800a89a:	9303      	str	r3, [sp, #12]
 800a89c:	ab0a      	add	r3, sp, #40	; 0x28
 800a89e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a8a2:	ab09      	add	r3, sp, #36	; 0x24
 800a8a4:	ec49 8b10 	vmov	d0, r8, r9
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	6022      	str	r2, [r4, #0]
 800a8ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	f7ff fecd 	bl	800a650 <__cvt>
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ba:	2b47      	cmp	r3, #71	; 0x47
 800a8bc:	4680      	mov	r8, r0
 800a8be:	d108      	bne.n	800a8d2 <_printf_float+0x142>
 800a8c0:	1cc8      	adds	r0, r1, #3
 800a8c2:	db02      	blt.n	800a8ca <_printf_float+0x13a>
 800a8c4:	6863      	ldr	r3, [r4, #4]
 800a8c6:	4299      	cmp	r1, r3
 800a8c8:	dd41      	ble.n	800a94e <_printf_float+0x1be>
 800a8ca:	f1ab 0b02 	sub.w	fp, fp, #2
 800a8ce:	fa5f fb8b 	uxtb.w	fp, fp
 800a8d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8d6:	d820      	bhi.n	800a91a <_printf_float+0x18a>
 800a8d8:	3901      	subs	r1, #1
 800a8da:	465a      	mov	r2, fp
 800a8dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8e0:	9109      	str	r1, [sp, #36]	; 0x24
 800a8e2:	f7ff ff17 	bl	800a714 <__exponent>
 800a8e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8e8:	1813      	adds	r3, r2, r0
 800a8ea:	2a01      	cmp	r2, #1
 800a8ec:	4681      	mov	r9, r0
 800a8ee:	6123      	str	r3, [r4, #16]
 800a8f0:	dc02      	bgt.n	800a8f8 <_printf_float+0x168>
 800a8f2:	6822      	ldr	r2, [r4, #0]
 800a8f4:	07d2      	lsls	r2, r2, #31
 800a8f6:	d501      	bpl.n	800a8fc <_printf_float+0x16c>
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	6123      	str	r3, [r4, #16]
 800a8fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a900:	2b00      	cmp	r3, #0
 800a902:	d09c      	beq.n	800a83e <_printf_float+0xae>
 800a904:	232d      	movs	r3, #45	; 0x2d
 800a906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a90a:	e798      	b.n	800a83e <_printf_float+0xae>
 800a90c:	9a06      	ldr	r2, [sp, #24]
 800a90e:	2a47      	cmp	r2, #71	; 0x47
 800a910:	d1be      	bne.n	800a890 <_printf_float+0x100>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1bc      	bne.n	800a890 <_printf_float+0x100>
 800a916:	2301      	movs	r3, #1
 800a918:	e7b9      	b.n	800a88e <_printf_float+0xfe>
 800a91a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a91e:	d118      	bne.n	800a952 <_printf_float+0x1c2>
 800a920:	2900      	cmp	r1, #0
 800a922:	6863      	ldr	r3, [r4, #4]
 800a924:	dd0b      	ble.n	800a93e <_printf_float+0x1ae>
 800a926:	6121      	str	r1, [r4, #16]
 800a928:	b913      	cbnz	r3, 800a930 <_printf_float+0x1a0>
 800a92a:	6822      	ldr	r2, [r4, #0]
 800a92c:	07d0      	lsls	r0, r2, #31
 800a92e:	d502      	bpl.n	800a936 <_printf_float+0x1a6>
 800a930:	3301      	adds	r3, #1
 800a932:	440b      	add	r3, r1
 800a934:	6123      	str	r3, [r4, #16]
 800a936:	65a1      	str	r1, [r4, #88]	; 0x58
 800a938:	f04f 0900 	mov.w	r9, #0
 800a93c:	e7de      	b.n	800a8fc <_printf_float+0x16c>
 800a93e:	b913      	cbnz	r3, 800a946 <_printf_float+0x1b6>
 800a940:	6822      	ldr	r2, [r4, #0]
 800a942:	07d2      	lsls	r2, r2, #31
 800a944:	d501      	bpl.n	800a94a <_printf_float+0x1ba>
 800a946:	3302      	adds	r3, #2
 800a948:	e7f4      	b.n	800a934 <_printf_float+0x1a4>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e7f2      	b.n	800a934 <_printf_float+0x1a4>
 800a94e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a954:	4299      	cmp	r1, r3
 800a956:	db05      	blt.n	800a964 <_printf_float+0x1d4>
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	6121      	str	r1, [r4, #16]
 800a95c:	07d8      	lsls	r0, r3, #31
 800a95e:	d5ea      	bpl.n	800a936 <_printf_float+0x1a6>
 800a960:	1c4b      	adds	r3, r1, #1
 800a962:	e7e7      	b.n	800a934 <_printf_float+0x1a4>
 800a964:	2900      	cmp	r1, #0
 800a966:	bfd4      	ite	le
 800a968:	f1c1 0202 	rsble	r2, r1, #2
 800a96c:	2201      	movgt	r2, #1
 800a96e:	4413      	add	r3, r2
 800a970:	e7e0      	b.n	800a934 <_printf_float+0x1a4>
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	055a      	lsls	r2, r3, #21
 800a976:	d407      	bmi.n	800a988 <_printf_float+0x1f8>
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	4642      	mov	r2, r8
 800a97c:	4631      	mov	r1, r6
 800a97e:	4628      	mov	r0, r5
 800a980:	47b8      	blx	r7
 800a982:	3001      	adds	r0, #1
 800a984:	d12c      	bne.n	800a9e0 <_printf_float+0x250>
 800a986:	e764      	b.n	800a852 <_printf_float+0xc2>
 800a988:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a98c:	f240 80e0 	bls.w	800ab50 <_printf_float+0x3c0>
 800a990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a994:	2200      	movs	r2, #0
 800a996:	2300      	movs	r3, #0
 800a998:	f7f6 f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d034      	beq.n	800aa0a <_printf_float+0x27a>
 800a9a0:	4a37      	ldr	r2, [pc, #220]	; (800aa80 <_printf_float+0x2f0>)
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	47b8      	blx	r7
 800a9aa:	3001      	adds	r0, #1
 800a9ac:	f43f af51 	beq.w	800a852 <_printf_float+0xc2>
 800a9b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	db02      	blt.n	800a9be <_printf_float+0x22e>
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	07d8      	lsls	r0, r3, #31
 800a9bc:	d510      	bpl.n	800a9e0 <_printf_float+0x250>
 800a9be:	ee18 3a10 	vmov	r3, s16
 800a9c2:	4652      	mov	r2, sl
 800a9c4:	4631      	mov	r1, r6
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	47b8      	blx	r7
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	f43f af41 	beq.w	800a852 <_printf_float+0xc2>
 800a9d0:	f04f 0800 	mov.w	r8, #0
 800a9d4:	f104 091a 	add.w	r9, r4, #26
 800a9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	4543      	cmp	r3, r8
 800a9de:	dc09      	bgt.n	800a9f4 <_printf_float+0x264>
 800a9e0:	6823      	ldr	r3, [r4, #0]
 800a9e2:	079b      	lsls	r3, r3, #30
 800a9e4:	f100 8105 	bmi.w	800abf2 <_printf_float+0x462>
 800a9e8:	68e0      	ldr	r0, [r4, #12]
 800a9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ec:	4298      	cmp	r0, r3
 800a9ee:	bfb8      	it	lt
 800a9f0:	4618      	movlt	r0, r3
 800a9f2:	e730      	b.n	800a856 <_printf_float+0xc6>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	464a      	mov	r2, r9
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	47b8      	blx	r7
 800a9fe:	3001      	adds	r0, #1
 800aa00:	f43f af27 	beq.w	800a852 <_printf_float+0xc2>
 800aa04:	f108 0801 	add.w	r8, r8, #1
 800aa08:	e7e6      	b.n	800a9d8 <_printf_float+0x248>
 800aa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dc39      	bgt.n	800aa84 <_printf_float+0x2f4>
 800aa10:	4a1b      	ldr	r2, [pc, #108]	; (800aa80 <_printf_float+0x2f0>)
 800aa12:	2301      	movs	r3, #1
 800aa14:	4631      	mov	r1, r6
 800aa16:	4628      	mov	r0, r5
 800aa18:	47b8      	blx	r7
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	f43f af19 	beq.w	800a852 <_printf_float+0xc2>
 800aa20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa24:	4313      	orrs	r3, r2
 800aa26:	d102      	bne.n	800aa2e <_printf_float+0x29e>
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	07d9      	lsls	r1, r3, #31
 800aa2c:	d5d8      	bpl.n	800a9e0 <_printf_float+0x250>
 800aa2e:	ee18 3a10 	vmov	r3, s16
 800aa32:	4652      	mov	r2, sl
 800aa34:	4631      	mov	r1, r6
 800aa36:	4628      	mov	r0, r5
 800aa38:	47b8      	blx	r7
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	f43f af09 	beq.w	800a852 <_printf_float+0xc2>
 800aa40:	f04f 0900 	mov.w	r9, #0
 800aa44:	f104 0a1a 	add.w	sl, r4, #26
 800aa48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4a:	425b      	negs	r3, r3
 800aa4c:	454b      	cmp	r3, r9
 800aa4e:	dc01      	bgt.n	800aa54 <_printf_float+0x2c4>
 800aa50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa52:	e792      	b.n	800a97a <_printf_float+0x1ea>
 800aa54:	2301      	movs	r3, #1
 800aa56:	4652      	mov	r2, sl
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	47b8      	blx	r7
 800aa5e:	3001      	adds	r0, #1
 800aa60:	f43f aef7 	beq.w	800a852 <_printf_float+0xc2>
 800aa64:	f109 0901 	add.w	r9, r9, #1
 800aa68:	e7ee      	b.n	800aa48 <_printf_float+0x2b8>
 800aa6a:	bf00      	nop
 800aa6c:	7fefffff 	.word	0x7fefffff
 800aa70:	0800fc90 	.word	0x0800fc90
 800aa74:	0800fc94 	.word	0x0800fc94
 800aa78:	0800fc9c 	.word	0x0800fc9c
 800aa7c:	0800fc98 	.word	0x0800fc98
 800aa80:	08010091 	.word	0x08010091
 800aa84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	bfa8      	it	ge
 800aa8c:	461a      	movge	r2, r3
 800aa8e:	2a00      	cmp	r2, #0
 800aa90:	4691      	mov	r9, r2
 800aa92:	dc37      	bgt.n	800ab04 <_printf_float+0x374>
 800aa94:	f04f 0b00 	mov.w	fp, #0
 800aa98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa9c:	f104 021a 	add.w	r2, r4, #26
 800aaa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aaa2:	9305      	str	r3, [sp, #20]
 800aaa4:	eba3 0309 	sub.w	r3, r3, r9
 800aaa8:	455b      	cmp	r3, fp
 800aaaa:	dc33      	bgt.n	800ab14 <_printf_float+0x384>
 800aaac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aab0:	429a      	cmp	r2, r3
 800aab2:	db3b      	blt.n	800ab2c <_printf_float+0x39c>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	07da      	lsls	r2, r3, #31
 800aab8:	d438      	bmi.n	800ab2c <_printf_float+0x39c>
 800aaba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aabc:	9a05      	ldr	r2, [sp, #20]
 800aabe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aac0:	1a9a      	subs	r2, r3, r2
 800aac2:	eba3 0901 	sub.w	r9, r3, r1
 800aac6:	4591      	cmp	r9, r2
 800aac8:	bfa8      	it	ge
 800aaca:	4691      	movge	r9, r2
 800aacc:	f1b9 0f00 	cmp.w	r9, #0
 800aad0:	dc35      	bgt.n	800ab3e <_printf_float+0x3ae>
 800aad2:	f04f 0800 	mov.w	r8, #0
 800aad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aada:	f104 0a1a 	add.w	sl, r4, #26
 800aade:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aae2:	1a9b      	subs	r3, r3, r2
 800aae4:	eba3 0309 	sub.w	r3, r3, r9
 800aae8:	4543      	cmp	r3, r8
 800aaea:	f77f af79 	ble.w	800a9e0 <_printf_float+0x250>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	4652      	mov	r2, sl
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	47b8      	blx	r7
 800aaf8:	3001      	adds	r0, #1
 800aafa:	f43f aeaa 	beq.w	800a852 <_printf_float+0xc2>
 800aafe:	f108 0801 	add.w	r8, r8, #1
 800ab02:	e7ec      	b.n	800aade <_printf_float+0x34e>
 800ab04:	4613      	mov	r3, r2
 800ab06:	4631      	mov	r1, r6
 800ab08:	4642      	mov	r2, r8
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	47b8      	blx	r7
 800ab0e:	3001      	adds	r0, #1
 800ab10:	d1c0      	bne.n	800aa94 <_printf_float+0x304>
 800ab12:	e69e      	b.n	800a852 <_printf_float+0xc2>
 800ab14:	2301      	movs	r3, #1
 800ab16:	4631      	mov	r1, r6
 800ab18:	4628      	mov	r0, r5
 800ab1a:	9205      	str	r2, [sp, #20]
 800ab1c:	47b8      	blx	r7
 800ab1e:	3001      	adds	r0, #1
 800ab20:	f43f ae97 	beq.w	800a852 <_printf_float+0xc2>
 800ab24:	9a05      	ldr	r2, [sp, #20]
 800ab26:	f10b 0b01 	add.w	fp, fp, #1
 800ab2a:	e7b9      	b.n	800aaa0 <_printf_float+0x310>
 800ab2c:	ee18 3a10 	vmov	r3, s16
 800ab30:	4652      	mov	r2, sl
 800ab32:	4631      	mov	r1, r6
 800ab34:	4628      	mov	r0, r5
 800ab36:	47b8      	blx	r7
 800ab38:	3001      	adds	r0, #1
 800ab3a:	d1be      	bne.n	800aaba <_printf_float+0x32a>
 800ab3c:	e689      	b.n	800a852 <_printf_float+0xc2>
 800ab3e:	9a05      	ldr	r2, [sp, #20]
 800ab40:	464b      	mov	r3, r9
 800ab42:	4442      	add	r2, r8
 800ab44:	4631      	mov	r1, r6
 800ab46:	4628      	mov	r0, r5
 800ab48:	47b8      	blx	r7
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d1c1      	bne.n	800aad2 <_printf_float+0x342>
 800ab4e:	e680      	b.n	800a852 <_printf_float+0xc2>
 800ab50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab52:	2a01      	cmp	r2, #1
 800ab54:	dc01      	bgt.n	800ab5a <_printf_float+0x3ca>
 800ab56:	07db      	lsls	r3, r3, #31
 800ab58:	d538      	bpl.n	800abcc <_printf_float+0x43c>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4642      	mov	r2, r8
 800ab5e:	4631      	mov	r1, r6
 800ab60:	4628      	mov	r0, r5
 800ab62:	47b8      	blx	r7
 800ab64:	3001      	adds	r0, #1
 800ab66:	f43f ae74 	beq.w	800a852 <_printf_float+0xc2>
 800ab6a:	ee18 3a10 	vmov	r3, s16
 800ab6e:	4652      	mov	r2, sl
 800ab70:	4631      	mov	r1, r6
 800ab72:	4628      	mov	r0, r5
 800ab74:	47b8      	blx	r7
 800ab76:	3001      	adds	r0, #1
 800ab78:	f43f ae6b 	beq.w	800a852 <_printf_float+0xc2>
 800ab7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab80:	2200      	movs	r2, #0
 800ab82:	2300      	movs	r3, #0
 800ab84:	f7f5 ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab88:	b9d8      	cbnz	r0, 800abc2 <_printf_float+0x432>
 800ab8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8c:	f108 0201 	add.w	r2, r8, #1
 800ab90:	3b01      	subs	r3, #1
 800ab92:	4631      	mov	r1, r6
 800ab94:	4628      	mov	r0, r5
 800ab96:	47b8      	blx	r7
 800ab98:	3001      	adds	r0, #1
 800ab9a:	d10e      	bne.n	800abba <_printf_float+0x42a>
 800ab9c:	e659      	b.n	800a852 <_printf_float+0xc2>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4652      	mov	r2, sl
 800aba2:	4631      	mov	r1, r6
 800aba4:	4628      	mov	r0, r5
 800aba6:	47b8      	blx	r7
 800aba8:	3001      	adds	r0, #1
 800abaa:	f43f ae52 	beq.w	800a852 <_printf_float+0xc2>
 800abae:	f108 0801 	add.w	r8, r8, #1
 800abb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb4:	3b01      	subs	r3, #1
 800abb6:	4543      	cmp	r3, r8
 800abb8:	dcf1      	bgt.n	800ab9e <_printf_float+0x40e>
 800abba:	464b      	mov	r3, r9
 800abbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800abc0:	e6dc      	b.n	800a97c <_printf_float+0x1ec>
 800abc2:	f04f 0800 	mov.w	r8, #0
 800abc6:	f104 0a1a 	add.w	sl, r4, #26
 800abca:	e7f2      	b.n	800abb2 <_printf_float+0x422>
 800abcc:	2301      	movs	r3, #1
 800abce:	4642      	mov	r2, r8
 800abd0:	e7df      	b.n	800ab92 <_printf_float+0x402>
 800abd2:	2301      	movs	r3, #1
 800abd4:	464a      	mov	r2, r9
 800abd6:	4631      	mov	r1, r6
 800abd8:	4628      	mov	r0, r5
 800abda:	47b8      	blx	r7
 800abdc:	3001      	adds	r0, #1
 800abde:	f43f ae38 	beq.w	800a852 <_printf_float+0xc2>
 800abe2:	f108 0801 	add.w	r8, r8, #1
 800abe6:	68e3      	ldr	r3, [r4, #12]
 800abe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abea:	1a5b      	subs	r3, r3, r1
 800abec:	4543      	cmp	r3, r8
 800abee:	dcf0      	bgt.n	800abd2 <_printf_float+0x442>
 800abf0:	e6fa      	b.n	800a9e8 <_printf_float+0x258>
 800abf2:	f04f 0800 	mov.w	r8, #0
 800abf6:	f104 0919 	add.w	r9, r4, #25
 800abfa:	e7f4      	b.n	800abe6 <_printf_float+0x456>

0800abfc <_printf_common>:
 800abfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac00:	4616      	mov	r6, r2
 800ac02:	4699      	mov	r9, r3
 800ac04:	688a      	ldr	r2, [r1, #8]
 800ac06:	690b      	ldr	r3, [r1, #16]
 800ac08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	bfb8      	it	lt
 800ac10:	4613      	movlt	r3, r2
 800ac12:	6033      	str	r3, [r6, #0]
 800ac14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac18:	4607      	mov	r7, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	b10a      	cbz	r2, 800ac22 <_printf_common+0x26>
 800ac1e:	3301      	adds	r3, #1
 800ac20:	6033      	str	r3, [r6, #0]
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	0699      	lsls	r1, r3, #26
 800ac26:	bf42      	ittt	mi
 800ac28:	6833      	ldrmi	r3, [r6, #0]
 800ac2a:	3302      	addmi	r3, #2
 800ac2c:	6033      	strmi	r3, [r6, #0]
 800ac2e:	6825      	ldr	r5, [r4, #0]
 800ac30:	f015 0506 	ands.w	r5, r5, #6
 800ac34:	d106      	bne.n	800ac44 <_printf_common+0x48>
 800ac36:	f104 0a19 	add.w	sl, r4, #25
 800ac3a:	68e3      	ldr	r3, [r4, #12]
 800ac3c:	6832      	ldr	r2, [r6, #0]
 800ac3e:	1a9b      	subs	r3, r3, r2
 800ac40:	42ab      	cmp	r3, r5
 800ac42:	dc26      	bgt.n	800ac92 <_printf_common+0x96>
 800ac44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac48:	1e13      	subs	r3, r2, #0
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	bf18      	it	ne
 800ac4e:	2301      	movne	r3, #1
 800ac50:	0692      	lsls	r2, r2, #26
 800ac52:	d42b      	bmi.n	800acac <_printf_common+0xb0>
 800ac54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac58:	4649      	mov	r1, r9
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	47c0      	blx	r8
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d01e      	beq.n	800aca0 <_printf_common+0xa4>
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	68e5      	ldr	r5, [r4, #12]
 800ac66:	6832      	ldr	r2, [r6, #0]
 800ac68:	f003 0306 	and.w	r3, r3, #6
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	bf08      	it	eq
 800ac70:	1aad      	subeq	r5, r5, r2
 800ac72:	68a3      	ldr	r3, [r4, #8]
 800ac74:	6922      	ldr	r2, [r4, #16]
 800ac76:	bf0c      	ite	eq
 800ac78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac7c:	2500      	movne	r5, #0
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	bfc4      	itt	gt
 800ac82:	1a9b      	subgt	r3, r3, r2
 800ac84:	18ed      	addgt	r5, r5, r3
 800ac86:	2600      	movs	r6, #0
 800ac88:	341a      	adds	r4, #26
 800ac8a:	42b5      	cmp	r5, r6
 800ac8c:	d11a      	bne.n	800acc4 <_printf_common+0xc8>
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e008      	b.n	800aca4 <_printf_common+0xa8>
 800ac92:	2301      	movs	r3, #1
 800ac94:	4652      	mov	r2, sl
 800ac96:	4649      	mov	r1, r9
 800ac98:	4638      	mov	r0, r7
 800ac9a:	47c0      	blx	r8
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	d103      	bne.n	800aca8 <_printf_common+0xac>
 800aca0:	f04f 30ff 	mov.w	r0, #4294967295
 800aca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca8:	3501      	adds	r5, #1
 800acaa:	e7c6      	b.n	800ac3a <_printf_common+0x3e>
 800acac:	18e1      	adds	r1, r4, r3
 800acae:	1c5a      	adds	r2, r3, #1
 800acb0:	2030      	movs	r0, #48	; 0x30
 800acb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acb6:	4422      	add	r2, r4
 800acb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acc0:	3302      	adds	r3, #2
 800acc2:	e7c7      	b.n	800ac54 <_printf_common+0x58>
 800acc4:	2301      	movs	r3, #1
 800acc6:	4622      	mov	r2, r4
 800acc8:	4649      	mov	r1, r9
 800acca:	4638      	mov	r0, r7
 800accc:	47c0      	blx	r8
 800acce:	3001      	adds	r0, #1
 800acd0:	d0e6      	beq.n	800aca0 <_printf_common+0xa4>
 800acd2:	3601      	adds	r6, #1
 800acd4:	e7d9      	b.n	800ac8a <_printf_common+0x8e>
	...

0800acd8 <_printf_i>:
 800acd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acdc:	7e0f      	ldrb	r7, [r1, #24]
 800acde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ace0:	2f78      	cmp	r7, #120	; 0x78
 800ace2:	4691      	mov	r9, r2
 800ace4:	4680      	mov	r8, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	469a      	mov	sl, r3
 800acea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acee:	d807      	bhi.n	800ad00 <_printf_i+0x28>
 800acf0:	2f62      	cmp	r7, #98	; 0x62
 800acf2:	d80a      	bhi.n	800ad0a <_printf_i+0x32>
 800acf4:	2f00      	cmp	r7, #0
 800acf6:	f000 80d8 	beq.w	800aeaa <_printf_i+0x1d2>
 800acfa:	2f58      	cmp	r7, #88	; 0x58
 800acfc:	f000 80a3 	beq.w	800ae46 <_printf_i+0x16e>
 800ad00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad08:	e03a      	b.n	800ad80 <_printf_i+0xa8>
 800ad0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad0e:	2b15      	cmp	r3, #21
 800ad10:	d8f6      	bhi.n	800ad00 <_printf_i+0x28>
 800ad12:	a101      	add	r1, pc, #4	; (adr r1, 800ad18 <_printf_i+0x40>)
 800ad14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad18:	0800ad71 	.word	0x0800ad71
 800ad1c:	0800ad85 	.word	0x0800ad85
 800ad20:	0800ad01 	.word	0x0800ad01
 800ad24:	0800ad01 	.word	0x0800ad01
 800ad28:	0800ad01 	.word	0x0800ad01
 800ad2c:	0800ad01 	.word	0x0800ad01
 800ad30:	0800ad85 	.word	0x0800ad85
 800ad34:	0800ad01 	.word	0x0800ad01
 800ad38:	0800ad01 	.word	0x0800ad01
 800ad3c:	0800ad01 	.word	0x0800ad01
 800ad40:	0800ad01 	.word	0x0800ad01
 800ad44:	0800ae91 	.word	0x0800ae91
 800ad48:	0800adb5 	.word	0x0800adb5
 800ad4c:	0800ae73 	.word	0x0800ae73
 800ad50:	0800ad01 	.word	0x0800ad01
 800ad54:	0800ad01 	.word	0x0800ad01
 800ad58:	0800aeb3 	.word	0x0800aeb3
 800ad5c:	0800ad01 	.word	0x0800ad01
 800ad60:	0800adb5 	.word	0x0800adb5
 800ad64:	0800ad01 	.word	0x0800ad01
 800ad68:	0800ad01 	.word	0x0800ad01
 800ad6c:	0800ae7b 	.word	0x0800ae7b
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	1d1a      	adds	r2, r3, #4
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	602a      	str	r2, [r5, #0]
 800ad78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad80:	2301      	movs	r3, #1
 800ad82:	e0a3      	b.n	800aecc <_printf_i+0x1f4>
 800ad84:	6820      	ldr	r0, [r4, #0]
 800ad86:	6829      	ldr	r1, [r5, #0]
 800ad88:	0606      	lsls	r6, r0, #24
 800ad8a:	f101 0304 	add.w	r3, r1, #4
 800ad8e:	d50a      	bpl.n	800ada6 <_printf_i+0xce>
 800ad90:	680e      	ldr	r6, [r1, #0]
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	2e00      	cmp	r6, #0
 800ad96:	da03      	bge.n	800ada0 <_printf_i+0xc8>
 800ad98:	232d      	movs	r3, #45	; 0x2d
 800ad9a:	4276      	negs	r6, r6
 800ad9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ada0:	485e      	ldr	r0, [pc, #376]	; (800af1c <_printf_i+0x244>)
 800ada2:	230a      	movs	r3, #10
 800ada4:	e019      	b.n	800adda <_printf_i+0x102>
 800ada6:	680e      	ldr	r6, [r1, #0]
 800ada8:	602b      	str	r3, [r5, #0]
 800adaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800adae:	bf18      	it	ne
 800adb0:	b236      	sxthne	r6, r6
 800adb2:	e7ef      	b.n	800ad94 <_printf_i+0xbc>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	6820      	ldr	r0, [r4, #0]
 800adb8:	1d19      	adds	r1, r3, #4
 800adba:	6029      	str	r1, [r5, #0]
 800adbc:	0601      	lsls	r1, r0, #24
 800adbe:	d501      	bpl.n	800adc4 <_printf_i+0xec>
 800adc0:	681e      	ldr	r6, [r3, #0]
 800adc2:	e002      	b.n	800adca <_printf_i+0xf2>
 800adc4:	0646      	lsls	r6, r0, #25
 800adc6:	d5fb      	bpl.n	800adc0 <_printf_i+0xe8>
 800adc8:	881e      	ldrh	r6, [r3, #0]
 800adca:	4854      	ldr	r0, [pc, #336]	; (800af1c <_printf_i+0x244>)
 800adcc:	2f6f      	cmp	r7, #111	; 0x6f
 800adce:	bf0c      	ite	eq
 800add0:	2308      	moveq	r3, #8
 800add2:	230a      	movne	r3, #10
 800add4:	2100      	movs	r1, #0
 800add6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adda:	6865      	ldr	r5, [r4, #4]
 800addc:	60a5      	str	r5, [r4, #8]
 800adde:	2d00      	cmp	r5, #0
 800ade0:	bfa2      	ittt	ge
 800ade2:	6821      	ldrge	r1, [r4, #0]
 800ade4:	f021 0104 	bicge.w	r1, r1, #4
 800ade8:	6021      	strge	r1, [r4, #0]
 800adea:	b90e      	cbnz	r6, 800adf0 <_printf_i+0x118>
 800adec:	2d00      	cmp	r5, #0
 800adee:	d04d      	beq.n	800ae8c <_printf_i+0x1b4>
 800adf0:	4615      	mov	r5, r2
 800adf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800adf6:	fb03 6711 	mls	r7, r3, r1, r6
 800adfa:	5dc7      	ldrb	r7, [r0, r7]
 800adfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae00:	4637      	mov	r7, r6
 800ae02:	42bb      	cmp	r3, r7
 800ae04:	460e      	mov	r6, r1
 800ae06:	d9f4      	bls.n	800adf2 <_printf_i+0x11a>
 800ae08:	2b08      	cmp	r3, #8
 800ae0a:	d10b      	bne.n	800ae24 <_printf_i+0x14c>
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	07de      	lsls	r6, r3, #31
 800ae10:	d508      	bpl.n	800ae24 <_printf_i+0x14c>
 800ae12:	6923      	ldr	r3, [r4, #16]
 800ae14:	6861      	ldr	r1, [r4, #4]
 800ae16:	4299      	cmp	r1, r3
 800ae18:	bfde      	ittt	le
 800ae1a:	2330      	movle	r3, #48	; 0x30
 800ae1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae24:	1b52      	subs	r2, r2, r5
 800ae26:	6122      	str	r2, [r4, #16]
 800ae28:	f8cd a000 	str.w	sl, [sp]
 800ae2c:	464b      	mov	r3, r9
 800ae2e:	aa03      	add	r2, sp, #12
 800ae30:	4621      	mov	r1, r4
 800ae32:	4640      	mov	r0, r8
 800ae34:	f7ff fee2 	bl	800abfc <_printf_common>
 800ae38:	3001      	adds	r0, #1
 800ae3a:	d14c      	bne.n	800aed6 <_printf_i+0x1fe>
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae40:	b004      	add	sp, #16
 800ae42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae46:	4835      	ldr	r0, [pc, #212]	; (800af1c <_printf_i+0x244>)
 800ae48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae4c:	6829      	ldr	r1, [r5, #0]
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae54:	6029      	str	r1, [r5, #0]
 800ae56:	061d      	lsls	r5, r3, #24
 800ae58:	d514      	bpl.n	800ae84 <_printf_i+0x1ac>
 800ae5a:	07df      	lsls	r7, r3, #31
 800ae5c:	bf44      	itt	mi
 800ae5e:	f043 0320 	orrmi.w	r3, r3, #32
 800ae62:	6023      	strmi	r3, [r4, #0]
 800ae64:	b91e      	cbnz	r6, 800ae6e <_printf_i+0x196>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	f023 0320 	bic.w	r3, r3, #32
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	2310      	movs	r3, #16
 800ae70:	e7b0      	b.n	800add4 <_printf_i+0xfc>
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	f043 0320 	orr.w	r3, r3, #32
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	2378      	movs	r3, #120	; 0x78
 800ae7c:	4828      	ldr	r0, [pc, #160]	; (800af20 <_printf_i+0x248>)
 800ae7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae82:	e7e3      	b.n	800ae4c <_printf_i+0x174>
 800ae84:	0659      	lsls	r1, r3, #25
 800ae86:	bf48      	it	mi
 800ae88:	b2b6      	uxthmi	r6, r6
 800ae8a:	e7e6      	b.n	800ae5a <_printf_i+0x182>
 800ae8c:	4615      	mov	r5, r2
 800ae8e:	e7bb      	b.n	800ae08 <_printf_i+0x130>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	6826      	ldr	r6, [r4, #0]
 800ae94:	6961      	ldr	r1, [r4, #20]
 800ae96:	1d18      	adds	r0, r3, #4
 800ae98:	6028      	str	r0, [r5, #0]
 800ae9a:	0635      	lsls	r5, r6, #24
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	d501      	bpl.n	800aea4 <_printf_i+0x1cc>
 800aea0:	6019      	str	r1, [r3, #0]
 800aea2:	e002      	b.n	800aeaa <_printf_i+0x1d2>
 800aea4:	0670      	lsls	r0, r6, #25
 800aea6:	d5fb      	bpl.n	800aea0 <_printf_i+0x1c8>
 800aea8:	8019      	strh	r1, [r3, #0]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6123      	str	r3, [r4, #16]
 800aeae:	4615      	mov	r5, r2
 800aeb0:	e7ba      	b.n	800ae28 <_printf_i+0x150>
 800aeb2:	682b      	ldr	r3, [r5, #0]
 800aeb4:	1d1a      	adds	r2, r3, #4
 800aeb6:	602a      	str	r2, [r5, #0]
 800aeb8:	681d      	ldr	r5, [r3, #0]
 800aeba:	6862      	ldr	r2, [r4, #4]
 800aebc:	2100      	movs	r1, #0
 800aebe:	4628      	mov	r0, r5
 800aec0:	f7f5 f98e 	bl	80001e0 <memchr>
 800aec4:	b108      	cbz	r0, 800aeca <_printf_i+0x1f2>
 800aec6:	1b40      	subs	r0, r0, r5
 800aec8:	6060      	str	r0, [r4, #4]
 800aeca:	6863      	ldr	r3, [r4, #4]
 800aecc:	6123      	str	r3, [r4, #16]
 800aece:	2300      	movs	r3, #0
 800aed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aed4:	e7a8      	b.n	800ae28 <_printf_i+0x150>
 800aed6:	6923      	ldr	r3, [r4, #16]
 800aed8:	462a      	mov	r2, r5
 800aeda:	4649      	mov	r1, r9
 800aedc:	4640      	mov	r0, r8
 800aede:	47d0      	blx	sl
 800aee0:	3001      	adds	r0, #1
 800aee2:	d0ab      	beq.n	800ae3c <_printf_i+0x164>
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	079b      	lsls	r3, r3, #30
 800aee8:	d413      	bmi.n	800af12 <_printf_i+0x23a>
 800aeea:	68e0      	ldr	r0, [r4, #12]
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	4298      	cmp	r0, r3
 800aef0:	bfb8      	it	lt
 800aef2:	4618      	movlt	r0, r3
 800aef4:	e7a4      	b.n	800ae40 <_printf_i+0x168>
 800aef6:	2301      	movs	r3, #1
 800aef8:	4632      	mov	r2, r6
 800aefa:	4649      	mov	r1, r9
 800aefc:	4640      	mov	r0, r8
 800aefe:	47d0      	blx	sl
 800af00:	3001      	adds	r0, #1
 800af02:	d09b      	beq.n	800ae3c <_printf_i+0x164>
 800af04:	3501      	adds	r5, #1
 800af06:	68e3      	ldr	r3, [r4, #12]
 800af08:	9903      	ldr	r1, [sp, #12]
 800af0a:	1a5b      	subs	r3, r3, r1
 800af0c:	42ab      	cmp	r3, r5
 800af0e:	dcf2      	bgt.n	800aef6 <_printf_i+0x21e>
 800af10:	e7eb      	b.n	800aeea <_printf_i+0x212>
 800af12:	2500      	movs	r5, #0
 800af14:	f104 0619 	add.w	r6, r4, #25
 800af18:	e7f5      	b.n	800af06 <_printf_i+0x22e>
 800af1a:	bf00      	nop
 800af1c:	0800fca0 	.word	0x0800fca0
 800af20:	0800fcb1 	.word	0x0800fcb1

0800af24 <_scanf_float>:
 800af24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af28:	b087      	sub	sp, #28
 800af2a:	4617      	mov	r7, r2
 800af2c:	9303      	str	r3, [sp, #12]
 800af2e:	688b      	ldr	r3, [r1, #8]
 800af30:	1e5a      	subs	r2, r3, #1
 800af32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800af36:	bf83      	ittte	hi
 800af38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800af3c:	195b      	addhi	r3, r3, r5
 800af3e:	9302      	strhi	r3, [sp, #8]
 800af40:	2300      	movls	r3, #0
 800af42:	bf86      	itte	hi
 800af44:	f240 135d 	movwhi	r3, #349	; 0x15d
 800af48:	608b      	strhi	r3, [r1, #8]
 800af4a:	9302      	strls	r3, [sp, #8]
 800af4c:	680b      	ldr	r3, [r1, #0]
 800af4e:	468b      	mov	fp, r1
 800af50:	2500      	movs	r5, #0
 800af52:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800af56:	f84b 3b1c 	str.w	r3, [fp], #28
 800af5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af5e:	4680      	mov	r8, r0
 800af60:	460c      	mov	r4, r1
 800af62:	465e      	mov	r6, fp
 800af64:	46aa      	mov	sl, r5
 800af66:	46a9      	mov	r9, r5
 800af68:	9501      	str	r5, [sp, #4]
 800af6a:	68a2      	ldr	r2, [r4, #8]
 800af6c:	b152      	cbz	r2, 800af84 <_scanf_float+0x60>
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2b4e      	cmp	r3, #78	; 0x4e
 800af74:	d864      	bhi.n	800b040 <_scanf_float+0x11c>
 800af76:	2b40      	cmp	r3, #64	; 0x40
 800af78:	d83c      	bhi.n	800aff4 <_scanf_float+0xd0>
 800af7a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800af7e:	b2c8      	uxtb	r0, r1
 800af80:	280e      	cmp	r0, #14
 800af82:	d93a      	bls.n	800affa <_scanf_float+0xd6>
 800af84:	f1b9 0f00 	cmp.w	r9, #0
 800af88:	d003      	beq.n	800af92 <_scanf_float+0x6e>
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af96:	f1ba 0f01 	cmp.w	sl, #1
 800af9a:	f200 8113 	bhi.w	800b1c4 <_scanf_float+0x2a0>
 800af9e:	455e      	cmp	r6, fp
 800afa0:	f200 8105 	bhi.w	800b1ae <_scanf_float+0x28a>
 800afa4:	2501      	movs	r5, #1
 800afa6:	4628      	mov	r0, r5
 800afa8:	b007      	add	sp, #28
 800afaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800afb2:	2a0d      	cmp	r2, #13
 800afb4:	d8e6      	bhi.n	800af84 <_scanf_float+0x60>
 800afb6:	a101      	add	r1, pc, #4	; (adr r1, 800afbc <_scanf_float+0x98>)
 800afb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800afbc:	0800b0fb 	.word	0x0800b0fb
 800afc0:	0800af85 	.word	0x0800af85
 800afc4:	0800af85 	.word	0x0800af85
 800afc8:	0800af85 	.word	0x0800af85
 800afcc:	0800b15b 	.word	0x0800b15b
 800afd0:	0800b133 	.word	0x0800b133
 800afd4:	0800af85 	.word	0x0800af85
 800afd8:	0800af85 	.word	0x0800af85
 800afdc:	0800b109 	.word	0x0800b109
 800afe0:	0800af85 	.word	0x0800af85
 800afe4:	0800af85 	.word	0x0800af85
 800afe8:	0800af85 	.word	0x0800af85
 800afec:	0800af85 	.word	0x0800af85
 800aff0:	0800b0c1 	.word	0x0800b0c1
 800aff4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aff8:	e7db      	b.n	800afb2 <_scanf_float+0x8e>
 800affa:	290e      	cmp	r1, #14
 800affc:	d8c2      	bhi.n	800af84 <_scanf_float+0x60>
 800affe:	a001      	add	r0, pc, #4	; (adr r0, 800b004 <_scanf_float+0xe0>)
 800b000:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b004:	0800b0b3 	.word	0x0800b0b3
 800b008:	0800af85 	.word	0x0800af85
 800b00c:	0800b0b3 	.word	0x0800b0b3
 800b010:	0800b147 	.word	0x0800b147
 800b014:	0800af85 	.word	0x0800af85
 800b018:	0800b061 	.word	0x0800b061
 800b01c:	0800b09d 	.word	0x0800b09d
 800b020:	0800b09d 	.word	0x0800b09d
 800b024:	0800b09d 	.word	0x0800b09d
 800b028:	0800b09d 	.word	0x0800b09d
 800b02c:	0800b09d 	.word	0x0800b09d
 800b030:	0800b09d 	.word	0x0800b09d
 800b034:	0800b09d 	.word	0x0800b09d
 800b038:	0800b09d 	.word	0x0800b09d
 800b03c:	0800b09d 	.word	0x0800b09d
 800b040:	2b6e      	cmp	r3, #110	; 0x6e
 800b042:	d809      	bhi.n	800b058 <_scanf_float+0x134>
 800b044:	2b60      	cmp	r3, #96	; 0x60
 800b046:	d8b2      	bhi.n	800afae <_scanf_float+0x8a>
 800b048:	2b54      	cmp	r3, #84	; 0x54
 800b04a:	d077      	beq.n	800b13c <_scanf_float+0x218>
 800b04c:	2b59      	cmp	r3, #89	; 0x59
 800b04e:	d199      	bne.n	800af84 <_scanf_float+0x60>
 800b050:	2d07      	cmp	r5, #7
 800b052:	d197      	bne.n	800af84 <_scanf_float+0x60>
 800b054:	2508      	movs	r5, #8
 800b056:	e029      	b.n	800b0ac <_scanf_float+0x188>
 800b058:	2b74      	cmp	r3, #116	; 0x74
 800b05a:	d06f      	beq.n	800b13c <_scanf_float+0x218>
 800b05c:	2b79      	cmp	r3, #121	; 0x79
 800b05e:	e7f6      	b.n	800b04e <_scanf_float+0x12a>
 800b060:	6821      	ldr	r1, [r4, #0]
 800b062:	05c8      	lsls	r0, r1, #23
 800b064:	d51a      	bpl.n	800b09c <_scanf_float+0x178>
 800b066:	9b02      	ldr	r3, [sp, #8]
 800b068:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b06c:	6021      	str	r1, [r4, #0]
 800b06e:	f109 0901 	add.w	r9, r9, #1
 800b072:	b11b      	cbz	r3, 800b07c <_scanf_float+0x158>
 800b074:	3b01      	subs	r3, #1
 800b076:	3201      	adds	r2, #1
 800b078:	9302      	str	r3, [sp, #8]
 800b07a:	60a2      	str	r2, [r4, #8]
 800b07c:	68a3      	ldr	r3, [r4, #8]
 800b07e:	3b01      	subs	r3, #1
 800b080:	60a3      	str	r3, [r4, #8]
 800b082:	6923      	ldr	r3, [r4, #16]
 800b084:	3301      	adds	r3, #1
 800b086:	6123      	str	r3, [r4, #16]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	607b      	str	r3, [r7, #4]
 800b090:	f340 8084 	ble.w	800b19c <_scanf_float+0x278>
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	3301      	adds	r3, #1
 800b098:	603b      	str	r3, [r7, #0]
 800b09a:	e766      	b.n	800af6a <_scanf_float+0x46>
 800b09c:	eb1a 0f05 	cmn.w	sl, r5
 800b0a0:	f47f af70 	bne.w	800af84 <_scanf_float+0x60>
 800b0a4:	6822      	ldr	r2, [r4, #0]
 800b0a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b0aa:	6022      	str	r2, [r4, #0]
 800b0ac:	f806 3b01 	strb.w	r3, [r6], #1
 800b0b0:	e7e4      	b.n	800b07c <_scanf_float+0x158>
 800b0b2:	6822      	ldr	r2, [r4, #0]
 800b0b4:	0610      	lsls	r0, r2, #24
 800b0b6:	f57f af65 	bpl.w	800af84 <_scanf_float+0x60>
 800b0ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0be:	e7f4      	b.n	800b0aa <_scanf_float+0x186>
 800b0c0:	f1ba 0f00 	cmp.w	sl, #0
 800b0c4:	d10e      	bne.n	800b0e4 <_scanf_float+0x1c0>
 800b0c6:	f1b9 0f00 	cmp.w	r9, #0
 800b0ca:	d10e      	bne.n	800b0ea <_scanf_float+0x1c6>
 800b0cc:	6822      	ldr	r2, [r4, #0]
 800b0ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b0d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b0d6:	d108      	bne.n	800b0ea <_scanf_float+0x1c6>
 800b0d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b0dc:	6022      	str	r2, [r4, #0]
 800b0de:	f04f 0a01 	mov.w	sl, #1
 800b0e2:	e7e3      	b.n	800b0ac <_scanf_float+0x188>
 800b0e4:	f1ba 0f02 	cmp.w	sl, #2
 800b0e8:	d055      	beq.n	800b196 <_scanf_float+0x272>
 800b0ea:	2d01      	cmp	r5, #1
 800b0ec:	d002      	beq.n	800b0f4 <_scanf_float+0x1d0>
 800b0ee:	2d04      	cmp	r5, #4
 800b0f0:	f47f af48 	bne.w	800af84 <_scanf_float+0x60>
 800b0f4:	3501      	adds	r5, #1
 800b0f6:	b2ed      	uxtb	r5, r5
 800b0f8:	e7d8      	b.n	800b0ac <_scanf_float+0x188>
 800b0fa:	f1ba 0f01 	cmp.w	sl, #1
 800b0fe:	f47f af41 	bne.w	800af84 <_scanf_float+0x60>
 800b102:	f04f 0a02 	mov.w	sl, #2
 800b106:	e7d1      	b.n	800b0ac <_scanf_float+0x188>
 800b108:	b97d      	cbnz	r5, 800b12a <_scanf_float+0x206>
 800b10a:	f1b9 0f00 	cmp.w	r9, #0
 800b10e:	f47f af3c 	bne.w	800af8a <_scanf_float+0x66>
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b118:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b11c:	f47f af39 	bne.w	800af92 <_scanf_float+0x6e>
 800b120:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b124:	6022      	str	r2, [r4, #0]
 800b126:	2501      	movs	r5, #1
 800b128:	e7c0      	b.n	800b0ac <_scanf_float+0x188>
 800b12a:	2d03      	cmp	r5, #3
 800b12c:	d0e2      	beq.n	800b0f4 <_scanf_float+0x1d0>
 800b12e:	2d05      	cmp	r5, #5
 800b130:	e7de      	b.n	800b0f0 <_scanf_float+0x1cc>
 800b132:	2d02      	cmp	r5, #2
 800b134:	f47f af26 	bne.w	800af84 <_scanf_float+0x60>
 800b138:	2503      	movs	r5, #3
 800b13a:	e7b7      	b.n	800b0ac <_scanf_float+0x188>
 800b13c:	2d06      	cmp	r5, #6
 800b13e:	f47f af21 	bne.w	800af84 <_scanf_float+0x60>
 800b142:	2507      	movs	r5, #7
 800b144:	e7b2      	b.n	800b0ac <_scanf_float+0x188>
 800b146:	6822      	ldr	r2, [r4, #0]
 800b148:	0591      	lsls	r1, r2, #22
 800b14a:	f57f af1b 	bpl.w	800af84 <_scanf_float+0x60>
 800b14e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b152:	6022      	str	r2, [r4, #0]
 800b154:	f8cd 9004 	str.w	r9, [sp, #4]
 800b158:	e7a8      	b.n	800b0ac <_scanf_float+0x188>
 800b15a:	6822      	ldr	r2, [r4, #0]
 800b15c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b160:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b164:	d006      	beq.n	800b174 <_scanf_float+0x250>
 800b166:	0550      	lsls	r0, r2, #21
 800b168:	f57f af0c 	bpl.w	800af84 <_scanf_float+0x60>
 800b16c:	f1b9 0f00 	cmp.w	r9, #0
 800b170:	f43f af0f 	beq.w	800af92 <_scanf_float+0x6e>
 800b174:	0591      	lsls	r1, r2, #22
 800b176:	bf58      	it	pl
 800b178:	9901      	ldrpl	r1, [sp, #4]
 800b17a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b17e:	bf58      	it	pl
 800b180:	eba9 0101 	subpl.w	r1, r9, r1
 800b184:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b188:	bf58      	it	pl
 800b18a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b18e:	6022      	str	r2, [r4, #0]
 800b190:	f04f 0900 	mov.w	r9, #0
 800b194:	e78a      	b.n	800b0ac <_scanf_float+0x188>
 800b196:	f04f 0a03 	mov.w	sl, #3
 800b19a:	e787      	b.n	800b0ac <_scanf_float+0x188>
 800b19c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4798      	blx	r3
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f43f aedf 	beq.w	800af6a <_scanf_float+0x46>
 800b1ac:	e6ea      	b.n	800af84 <_scanf_float+0x60>
 800b1ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1b6:	463a      	mov	r2, r7
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	4798      	blx	r3
 800b1bc:	6923      	ldr	r3, [r4, #16]
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	e6ec      	b.n	800af9e <_scanf_float+0x7a>
 800b1c4:	1e6b      	subs	r3, r5, #1
 800b1c6:	2b06      	cmp	r3, #6
 800b1c8:	d825      	bhi.n	800b216 <_scanf_float+0x2f2>
 800b1ca:	2d02      	cmp	r5, #2
 800b1cc:	d836      	bhi.n	800b23c <_scanf_float+0x318>
 800b1ce:	455e      	cmp	r6, fp
 800b1d0:	f67f aee8 	bls.w	800afa4 <_scanf_float+0x80>
 800b1d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1dc:	463a      	mov	r2, r7
 800b1de:	4640      	mov	r0, r8
 800b1e0:	4798      	blx	r3
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	6123      	str	r3, [r4, #16]
 800b1e8:	e7f1      	b.n	800b1ce <_scanf_float+0x2aa>
 800b1ea:	9802      	ldr	r0, [sp, #8]
 800b1ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b1f4:	9002      	str	r0, [sp, #8]
 800b1f6:	463a      	mov	r2, r7
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	4798      	blx	r3
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	6123      	str	r3, [r4, #16]
 800b202:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b206:	fa5f fa8a 	uxtb.w	sl, sl
 800b20a:	f1ba 0f02 	cmp.w	sl, #2
 800b20e:	d1ec      	bne.n	800b1ea <_scanf_float+0x2c6>
 800b210:	3d03      	subs	r5, #3
 800b212:	b2ed      	uxtb	r5, r5
 800b214:	1b76      	subs	r6, r6, r5
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	05da      	lsls	r2, r3, #23
 800b21a:	d52f      	bpl.n	800b27c <_scanf_float+0x358>
 800b21c:	055b      	lsls	r3, r3, #21
 800b21e:	d510      	bpl.n	800b242 <_scanf_float+0x31e>
 800b220:	455e      	cmp	r6, fp
 800b222:	f67f aebf 	bls.w	800afa4 <_scanf_float+0x80>
 800b226:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b22a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b22e:	463a      	mov	r2, r7
 800b230:	4640      	mov	r0, r8
 800b232:	4798      	blx	r3
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	3b01      	subs	r3, #1
 800b238:	6123      	str	r3, [r4, #16]
 800b23a:	e7f1      	b.n	800b220 <_scanf_float+0x2fc>
 800b23c:	46aa      	mov	sl, r5
 800b23e:	9602      	str	r6, [sp, #8]
 800b240:	e7df      	b.n	800b202 <_scanf_float+0x2de>
 800b242:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b246:	6923      	ldr	r3, [r4, #16]
 800b248:	2965      	cmp	r1, #101	; 0x65
 800b24a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b24e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b252:	6123      	str	r3, [r4, #16]
 800b254:	d00c      	beq.n	800b270 <_scanf_float+0x34c>
 800b256:	2945      	cmp	r1, #69	; 0x45
 800b258:	d00a      	beq.n	800b270 <_scanf_float+0x34c>
 800b25a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b25e:	463a      	mov	r2, r7
 800b260:	4640      	mov	r0, r8
 800b262:	4798      	blx	r3
 800b264:	6923      	ldr	r3, [r4, #16]
 800b266:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b26a:	3b01      	subs	r3, #1
 800b26c:	1eb5      	subs	r5, r6, #2
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b274:	463a      	mov	r2, r7
 800b276:	4640      	mov	r0, r8
 800b278:	4798      	blx	r3
 800b27a:	462e      	mov	r6, r5
 800b27c:	6825      	ldr	r5, [r4, #0]
 800b27e:	f015 0510 	ands.w	r5, r5, #16
 800b282:	d159      	bne.n	800b338 <_scanf_float+0x414>
 800b284:	7035      	strb	r5, [r6, #0]
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b28c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b290:	d11b      	bne.n	800b2ca <_scanf_float+0x3a6>
 800b292:	9b01      	ldr	r3, [sp, #4]
 800b294:	454b      	cmp	r3, r9
 800b296:	eba3 0209 	sub.w	r2, r3, r9
 800b29a:	d123      	bne.n	800b2e4 <_scanf_float+0x3c0>
 800b29c:	2200      	movs	r2, #0
 800b29e:	4659      	mov	r1, fp
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	f000 ff1b 	bl	800c0dc <_strtod_r>
 800b2a6:	6822      	ldr	r2, [r4, #0]
 800b2a8:	9b03      	ldr	r3, [sp, #12]
 800b2aa:	f012 0f02 	tst.w	r2, #2
 800b2ae:	ec57 6b10 	vmov	r6, r7, d0
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	d021      	beq.n	800b2fa <_scanf_float+0x3d6>
 800b2b6:	9903      	ldr	r1, [sp, #12]
 800b2b8:	1d1a      	adds	r2, r3, #4
 800b2ba:	600a      	str	r2, [r1, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	e9c3 6700 	strd	r6, r7, [r3]
 800b2c2:	68e3      	ldr	r3, [r4, #12]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	60e3      	str	r3, [r4, #12]
 800b2c8:	e66d      	b.n	800afa6 <_scanf_float+0x82>
 800b2ca:	9b04      	ldr	r3, [sp, #16]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d0e5      	beq.n	800b29c <_scanf_float+0x378>
 800b2d0:	9905      	ldr	r1, [sp, #20]
 800b2d2:	230a      	movs	r3, #10
 800b2d4:	462a      	mov	r2, r5
 800b2d6:	3101      	adds	r1, #1
 800b2d8:	4640      	mov	r0, r8
 800b2da:	f000 ff87 	bl	800c1ec <_strtol_r>
 800b2de:	9b04      	ldr	r3, [sp, #16]
 800b2e0:	9e05      	ldr	r6, [sp, #20]
 800b2e2:	1ac2      	subs	r2, r0, r3
 800b2e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b2e8:	429e      	cmp	r6, r3
 800b2ea:	bf28      	it	cs
 800b2ec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b2f0:	4912      	ldr	r1, [pc, #72]	; (800b33c <_scanf_float+0x418>)
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	f000 f83c 	bl	800b370 <siprintf>
 800b2f8:	e7d0      	b.n	800b29c <_scanf_float+0x378>
 800b2fa:	9903      	ldr	r1, [sp, #12]
 800b2fc:	f012 0f04 	tst.w	r2, #4
 800b300:	f103 0204 	add.w	r2, r3, #4
 800b304:	600a      	str	r2, [r1, #0]
 800b306:	d1d9      	bne.n	800b2bc <_scanf_float+0x398>
 800b308:	f8d3 8000 	ldr.w	r8, [r3]
 800b30c:	ee10 2a10 	vmov	r2, s0
 800b310:	ee10 0a10 	vmov	r0, s0
 800b314:	463b      	mov	r3, r7
 800b316:	4639      	mov	r1, r7
 800b318:	f7f5 fc08 	bl	8000b2c <__aeabi_dcmpun>
 800b31c:	b128      	cbz	r0, 800b32a <_scanf_float+0x406>
 800b31e:	4808      	ldr	r0, [pc, #32]	; (800b340 <_scanf_float+0x41c>)
 800b320:	f000 f820 	bl	800b364 <nanf>
 800b324:	ed88 0a00 	vstr	s0, [r8]
 800b328:	e7cb      	b.n	800b2c2 <_scanf_float+0x39e>
 800b32a:	4630      	mov	r0, r6
 800b32c:	4639      	mov	r1, r7
 800b32e:	f7f5 fc5b 	bl	8000be8 <__aeabi_d2f>
 800b332:	f8c8 0000 	str.w	r0, [r8]
 800b336:	e7c4      	b.n	800b2c2 <_scanf_float+0x39e>
 800b338:	2500      	movs	r5, #0
 800b33a:	e634      	b.n	800afa6 <_scanf_float+0x82>
 800b33c:	0800fcc2 	.word	0x0800fcc2
 800b340:	080100e3 	.word	0x080100e3

0800b344 <_sbrk_r>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4d06      	ldr	r5, [pc, #24]	; (800b360 <_sbrk_r+0x1c>)
 800b348:	2300      	movs	r3, #0
 800b34a:	4604      	mov	r4, r0
 800b34c:	4608      	mov	r0, r1
 800b34e:	602b      	str	r3, [r5, #0]
 800b350:	f7f7 f914 	bl	800257c <_sbrk>
 800b354:	1c43      	adds	r3, r0, #1
 800b356:	d102      	bne.n	800b35e <_sbrk_r+0x1a>
 800b358:	682b      	ldr	r3, [r5, #0]
 800b35a:	b103      	cbz	r3, 800b35e <_sbrk_r+0x1a>
 800b35c:	6023      	str	r3, [r4, #0]
 800b35e:	bd38      	pop	{r3, r4, r5, pc}
 800b360:	20002e34 	.word	0x20002e34

0800b364 <nanf>:
 800b364:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b36c <nanf+0x8>
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	7fc00000 	.word	0x7fc00000

0800b370 <siprintf>:
 800b370:	b40e      	push	{r1, r2, r3}
 800b372:	b500      	push	{lr}
 800b374:	b09c      	sub	sp, #112	; 0x70
 800b376:	ab1d      	add	r3, sp, #116	; 0x74
 800b378:	9002      	str	r0, [sp, #8]
 800b37a:	9006      	str	r0, [sp, #24]
 800b37c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b380:	4809      	ldr	r0, [pc, #36]	; (800b3a8 <siprintf+0x38>)
 800b382:	9107      	str	r1, [sp, #28]
 800b384:	9104      	str	r1, [sp, #16]
 800b386:	4909      	ldr	r1, [pc, #36]	; (800b3ac <siprintf+0x3c>)
 800b388:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38c:	9105      	str	r1, [sp, #20]
 800b38e:	6800      	ldr	r0, [r0, #0]
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	a902      	add	r1, sp, #8
 800b394:	f002 fea0 	bl	800e0d8 <_svfiprintf_r>
 800b398:	9b02      	ldr	r3, [sp, #8]
 800b39a:	2200      	movs	r2, #0
 800b39c:	701a      	strb	r2, [r3, #0]
 800b39e:	b01c      	add	sp, #112	; 0x70
 800b3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3a4:	b003      	add	sp, #12
 800b3a6:	4770      	bx	lr
 800b3a8:	200000fc 	.word	0x200000fc
 800b3ac:	ffff0208 	.word	0xffff0208

0800b3b0 <siscanf>:
 800b3b0:	b40e      	push	{r1, r2, r3}
 800b3b2:	b510      	push	{r4, lr}
 800b3b4:	b09f      	sub	sp, #124	; 0x7c
 800b3b6:	ac21      	add	r4, sp, #132	; 0x84
 800b3b8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b3bc:	f854 2b04 	ldr.w	r2, [r4], #4
 800b3c0:	9201      	str	r2, [sp, #4]
 800b3c2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b3c6:	9004      	str	r0, [sp, #16]
 800b3c8:	9008      	str	r0, [sp, #32]
 800b3ca:	f7f4 ff01 	bl	80001d0 <strlen>
 800b3ce:	4b0c      	ldr	r3, [pc, #48]	; (800b400 <siscanf+0x50>)
 800b3d0:	9005      	str	r0, [sp, #20]
 800b3d2:	9009      	str	r0, [sp, #36]	; 0x24
 800b3d4:	930d      	str	r3, [sp, #52]	; 0x34
 800b3d6:	480b      	ldr	r0, [pc, #44]	; (800b404 <siscanf+0x54>)
 800b3d8:	9a01      	ldr	r2, [sp, #4]
 800b3da:	6800      	ldr	r0, [r0, #0]
 800b3dc:	9403      	str	r4, [sp, #12]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9311      	str	r3, [sp, #68]	; 0x44
 800b3e2:	9316      	str	r3, [sp, #88]	; 0x58
 800b3e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b3ec:	a904      	add	r1, sp, #16
 800b3ee:	4623      	mov	r3, r4
 800b3f0:	f002 ffcc 	bl	800e38c <__ssvfiscanf_r>
 800b3f4:	b01f      	add	sp, #124	; 0x7c
 800b3f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3fa:	b003      	add	sp, #12
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	0800b42b 	.word	0x0800b42b
 800b404:	200000fc 	.word	0x200000fc

0800b408 <__sread>:
 800b408:	b510      	push	{r4, lr}
 800b40a:	460c      	mov	r4, r1
 800b40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b410:	f003 fa86 	bl	800e920 <_read_r>
 800b414:	2800      	cmp	r0, #0
 800b416:	bfab      	itete	ge
 800b418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b41a:	89a3      	ldrhlt	r3, [r4, #12]
 800b41c:	181b      	addge	r3, r3, r0
 800b41e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b422:	bfac      	ite	ge
 800b424:	6563      	strge	r3, [r4, #84]	; 0x54
 800b426:	81a3      	strhlt	r3, [r4, #12]
 800b428:	bd10      	pop	{r4, pc}

0800b42a <__seofread>:
 800b42a:	2000      	movs	r0, #0
 800b42c:	4770      	bx	lr

0800b42e <__swrite>:
 800b42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b432:	461f      	mov	r7, r3
 800b434:	898b      	ldrh	r3, [r1, #12]
 800b436:	05db      	lsls	r3, r3, #23
 800b438:	4605      	mov	r5, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	4616      	mov	r6, r2
 800b43e:	d505      	bpl.n	800b44c <__swrite+0x1e>
 800b440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b444:	2302      	movs	r3, #2
 800b446:	2200      	movs	r2, #0
 800b448:	f002 f8e4 	bl	800d614 <_lseek_r>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b456:	81a3      	strh	r3, [r4, #12]
 800b458:	4632      	mov	r2, r6
 800b45a:	463b      	mov	r3, r7
 800b45c:	4628      	mov	r0, r5
 800b45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b462:	f000 bec5 	b.w	800c1f0 <_write_r>

0800b466 <__sseek>:
 800b466:	b510      	push	{r4, lr}
 800b468:	460c      	mov	r4, r1
 800b46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46e:	f002 f8d1 	bl	800d614 <_lseek_r>
 800b472:	1c43      	adds	r3, r0, #1
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	bf15      	itete	ne
 800b478:	6560      	strne	r0, [r4, #84]	; 0x54
 800b47a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b47e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b482:	81a3      	strheq	r3, [r4, #12]
 800b484:	bf18      	it	ne
 800b486:	81a3      	strhne	r3, [r4, #12]
 800b488:	bd10      	pop	{r4, pc}

0800b48a <__sclose>:
 800b48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b48e:	f000 bec1 	b.w	800c214 <_close_r>

0800b492 <sulp>:
 800b492:	b570      	push	{r4, r5, r6, lr}
 800b494:	4604      	mov	r4, r0
 800b496:	460d      	mov	r5, r1
 800b498:	ec45 4b10 	vmov	d0, r4, r5
 800b49c:	4616      	mov	r6, r2
 800b49e:	f002 fc5b 	bl	800dd58 <__ulp>
 800b4a2:	ec51 0b10 	vmov	r0, r1, d0
 800b4a6:	b17e      	cbz	r6, 800b4c8 <sulp+0x36>
 800b4a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b4ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dd09      	ble.n	800b4c8 <sulp+0x36>
 800b4b4:	051b      	lsls	r3, r3, #20
 800b4b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b4ba:	2400      	movs	r4, #0
 800b4bc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b4c0:	4622      	mov	r2, r4
 800b4c2:	462b      	mov	r3, r5
 800b4c4:	f7f5 f898 	bl	80005f8 <__aeabi_dmul>
 800b4c8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ca:	0000      	movs	r0, r0
 800b4cc:	0000      	movs	r0, r0
	...

0800b4d0 <_strtod_l>:
 800b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d4:	ed2d 8b02 	vpush	{d8}
 800b4d8:	b09d      	sub	sp, #116	; 0x74
 800b4da:	461f      	mov	r7, r3
 800b4dc:	2300      	movs	r3, #0
 800b4de:	9318      	str	r3, [sp, #96]	; 0x60
 800b4e0:	4ba2      	ldr	r3, [pc, #648]	; (800b76c <_strtod_l+0x29c>)
 800b4e2:	9213      	str	r2, [sp, #76]	; 0x4c
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	9305      	str	r3, [sp, #20]
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	4688      	mov	r8, r1
 800b4ee:	f7f4 fe6f 	bl	80001d0 <strlen>
 800b4f2:	f04f 0a00 	mov.w	sl, #0
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	f04f 0b00 	mov.w	fp, #0
 800b4fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b502:	781a      	ldrb	r2, [r3, #0]
 800b504:	2a2b      	cmp	r2, #43	; 0x2b
 800b506:	d04e      	beq.n	800b5a6 <_strtod_l+0xd6>
 800b508:	d83b      	bhi.n	800b582 <_strtod_l+0xb2>
 800b50a:	2a0d      	cmp	r2, #13
 800b50c:	d834      	bhi.n	800b578 <_strtod_l+0xa8>
 800b50e:	2a08      	cmp	r2, #8
 800b510:	d834      	bhi.n	800b57c <_strtod_l+0xac>
 800b512:	2a00      	cmp	r2, #0
 800b514:	d03e      	beq.n	800b594 <_strtod_l+0xc4>
 800b516:	2300      	movs	r3, #0
 800b518:	930a      	str	r3, [sp, #40]	; 0x28
 800b51a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b51c:	7833      	ldrb	r3, [r6, #0]
 800b51e:	2b30      	cmp	r3, #48	; 0x30
 800b520:	f040 80b0 	bne.w	800b684 <_strtod_l+0x1b4>
 800b524:	7873      	ldrb	r3, [r6, #1]
 800b526:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b52a:	2b58      	cmp	r3, #88	; 0x58
 800b52c:	d168      	bne.n	800b600 <_strtod_l+0x130>
 800b52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	ab18      	add	r3, sp, #96	; 0x60
 800b534:	9702      	str	r7, [sp, #8]
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	4a8d      	ldr	r2, [pc, #564]	; (800b770 <_strtod_l+0x2a0>)
 800b53a:	ab19      	add	r3, sp, #100	; 0x64
 800b53c:	a917      	add	r1, sp, #92	; 0x5c
 800b53e:	4620      	mov	r0, r4
 800b540:	f001 fd5c 	bl	800cffc <__gethex>
 800b544:	f010 0707 	ands.w	r7, r0, #7
 800b548:	4605      	mov	r5, r0
 800b54a:	d005      	beq.n	800b558 <_strtod_l+0x88>
 800b54c:	2f06      	cmp	r7, #6
 800b54e:	d12c      	bne.n	800b5aa <_strtod_l+0xda>
 800b550:	3601      	adds	r6, #1
 800b552:	2300      	movs	r3, #0
 800b554:	9617      	str	r6, [sp, #92]	; 0x5c
 800b556:	930a      	str	r3, [sp, #40]	; 0x28
 800b558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f040 8590 	bne.w	800c080 <_strtod_l+0xbb0>
 800b560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b562:	b1eb      	cbz	r3, 800b5a0 <_strtod_l+0xd0>
 800b564:	4652      	mov	r2, sl
 800b566:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b56a:	ec43 2b10 	vmov	d0, r2, r3
 800b56e:	b01d      	add	sp, #116	; 0x74
 800b570:	ecbd 8b02 	vpop	{d8}
 800b574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b578:	2a20      	cmp	r2, #32
 800b57a:	d1cc      	bne.n	800b516 <_strtod_l+0x46>
 800b57c:	3301      	adds	r3, #1
 800b57e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b580:	e7be      	b.n	800b500 <_strtod_l+0x30>
 800b582:	2a2d      	cmp	r2, #45	; 0x2d
 800b584:	d1c7      	bne.n	800b516 <_strtod_l+0x46>
 800b586:	2201      	movs	r2, #1
 800b588:	920a      	str	r2, [sp, #40]	; 0x28
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b58e:	785b      	ldrb	r3, [r3, #1]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1c2      	bne.n	800b51a <_strtod_l+0x4a>
 800b594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b596:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f040 856e 	bne.w	800c07c <_strtod_l+0xbac>
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	465b      	mov	r3, fp
 800b5a4:	e7e1      	b.n	800b56a <_strtod_l+0x9a>
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	e7ee      	b.n	800b588 <_strtod_l+0xb8>
 800b5aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b5ac:	b13a      	cbz	r2, 800b5be <_strtod_l+0xee>
 800b5ae:	2135      	movs	r1, #53	; 0x35
 800b5b0:	a81a      	add	r0, sp, #104	; 0x68
 800b5b2:	f002 fcdc 	bl	800df6e <__copybits>
 800b5b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f002 f89b 	bl	800d6f4 <_Bfree>
 800b5be:	3f01      	subs	r7, #1
 800b5c0:	2f04      	cmp	r7, #4
 800b5c2:	d806      	bhi.n	800b5d2 <_strtod_l+0x102>
 800b5c4:	e8df f007 	tbb	[pc, r7]
 800b5c8:	1714030a 	.word	0x1714030a
 800b5cc:	0a          	.byte	0x0a
 800b5cd:	00          	.byte	0x00
 800b5ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b5d2:	0728      	lsls	r0, r5, #28
 800b5d4:	d5c0      	bpl.n	800b558 <_strtod_l+0x88>
 800b5d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b5da:	e7bd      	b.n	800b558 <_strtod_l+0x88>
 800b5dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b5e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b5e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b5e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b5ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b5ee:	e7f0      	b.n	800b5d2 <_strtod_l+0x102>
 800b5f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b774 <_strtod_l+0x2a4>
 800b5f4:	e7ed      	b.n	800b5d2 <_strtod_l+0x102>
 800b5f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b5fa:	f04f 3aff 	mov.w	sl, #4294967295
 800b5fe:	e7e8      	b.n	800b5d2 <_strtod_l+0x102>
 800b600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	9217      	str	r2, [sp, #92]	; 0x5c
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	2b30      	cmp	r3, #48	; 0x30
 800b60a:	d0f9      	beq.n	800b600 <_strtod_l+0x130>
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d0a3      	beq.n	800b558 <_strtod_l+0x88>
 800b610:	2301      	movs	r3, #1
 800b612:	f04f 0900 	mov.w	r9, #0
 800b616:	9304      	str	r3, [sp, #16]
 800b618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b61a:	9308      	str	r3, [sp, #32]
 800b61c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b620:	464f      	mov	r7, r9
 800b622:	220a      	movs	r2, #10
 800b624:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b626:	7806      	ldrb	r6, [r0, #0]
 800b628:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b62c:	b2d9      	uxtb	r1, r3
 800b62e:	2909      	cmp	r1, #9
 800b630:	d92a      	bls.n	800b688 <_strtod_l+0x1b8>
 800b632:	9905      	ldr	r1, [sp, #20]
 800b634:	462a      	mov	r2, r5
 800b636:	f003 f9c7 	bl	800e9c8 <strncmp>
 800b63a:	b398      	cbz	r0, 800b6a4 <_strtod_l+0x1d4>
 800b63c:	2000      	movs	r0, #0
 800b63e:	4632      	mov	r2, r6
 800b640:	463d      	mov	r5, r7
 800b642:	9005      	str	r0, [sp, #20]
 800b644:	4603      	mov	r3, r0
 800b646:	2a65      	cmp	r2, #101	; 0x65
 800b648:	d001      	beq.n	800b64e <_strtod_l+0x17e>
 800b64a:	2a45      	cmp	r2, #69	; 0x45
 800b64c:	d118      	bne.n	800b680 <_strtod_l+0x1b0>
 800b64e:	b91d      	cbnz	r5, 800b658 <_strtod_l+0x188>
 800b650:	9a04      	ldr	r2, [sp, #16]
 800b652:	4302      	orrs	r2, r0
 800b654:	d09e      	beq.n	800b594 <_strtod_l+0xc4>
 800b656:	2500      	movs	r5, #0
 800b658:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b65c:	f108 0201 	add.w	r2, r8, #1
 800b660:	9217      	str	r2, [sp, #92]	; 0x5c
 800b662:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b666:	2a2b      	cmp	r2, #43	; 0x2b
 800b668:	d075      	beq.n	800b756 <_strtod_l+0x286>
 800b66a:	2a2d      	cmp	r2, #45	; 0x2d
 800b66c:	d07b      	beq.n	800b766 <_strtod_l+0x296>
 800b66e:	f04f 0c00 	mov.w	ip, #0
 800b672:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b676:	2909      	cmp	r1, #9
 800b678:	f240 8082 	bls.w	800b780 <_strtod_l+0x2b0>
 800b67c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b680:	2600      	movs	r6, #0
 800b682:	e09d      	b.n	800b7c0 <_strtod_l+0x2f0>
 800b684:	2300      	movs	r3, #0
 800b686:	e7c4      	b.n	800b612 <_strtod_l+0x142>
 800b688:	2f08      	cmp	r7, #8
 800b68a:	bfd8      	it	le
 800b68c:	9907      	ldrle	r1, [sp, #28]
 800b68e:	f100 0001 	add.w	r0, r0, #1
 800b692:	bfda      	itte	le
 800b694:	fb02 3301 	mlale	r3, r2, r1, r3
 800b698:	9307      	strle	r3, [sp, #28]
 800b69a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b69e:	3701      	adds	r7, #1
 800b6a0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b6a2:	e7bf      	b.n	800b624 <_strtod_l+0x154>
 800b6a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6a6:	195a      	adds	r2, r3, r5
 800b6a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6aa:	5d5a      	ldrb	r2, [r3, r5]
 800b6ac:	2f00      	cmp	r7, #0
 800b6ae:	d037      	beq.n	800b720 <_strtod_l+0x250>
 800b6b0:	9005      	str	r0, [sp, #20]
 800b6b2:	463d      	mov	r5, r7
 800b6b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b6b8:	2b09      	cmp	r3, #9
 800b6ba:	d912      	bls.n	800b6e2 <_strtod_l+0x212>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e7c2      	b.n	800b646 <_strtod_l+0x176>
 800b6c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6c2:	1c5a      	adds	r2, r3, #1
 800b6c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6c6:	785a      	ldrb	r2, [r3, #1]
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	2a30      	cmp	r2, #48	; 0x30
 800b6cc:	d0f8      	beq.n	800b6c0 <_strtod_l+0x1f0>
 800b6ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b6d2:	2b08      	cmp	r3, #8
 800b6d4:	f200 84d9 	bhi.w	800c08a <_strtod_l+0xbba>
 800b6d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6da:	9005      	str	r0, [sp, #20]
 800b6dc:	2000      	movs	r0, #0
 800b6de:	9308      	str	r3, [sp, #32]
 800b6e0:	4605      	mov	r5, r0
 800b6e2:	3a30      	subs	r2, #48	; 0x30
 800b6e4:	f100 0301 	add.w	r3, r0, #1
 800b6e8:	d014      	beq.n	800b714 <_strtod_l+0x244>
 800b6ea:	9905      	ldr	r1, [sp, #20]
 800b6ec:	4419      	add	r1, r3
 800b6ee:	9105      	str	r1, [sp, #20]
 800b6f0:	462b      	mov	r3, r5
 800b6f2:	eb00 0e05 	add.w	lr, r0, r5
 800b6f6:	210a      	movs	r1, #10
 800b6f8:	4573      	cmp	r3, lr
 800b6fa:	d113      	bne.n	800b724 <_strtod_l+0x254>
 800b6fc:	182b      	adds	r3, r5, r0
 800b6fe:	2b08      	cmp	r3, #8
 800b700:	f105 0501 	add.w	r5, r5, #1
 800b704:	4405      	add	r5, r0
 800b706:	dc1c      	bgt.n	800b742 <_strtod_l+0x272>
 800b708:	9907      	ldr	r1, [sp, #28]
 800b70a:	230a      	movs	r3, #10
 800b70c:	fb03 2301 	mla	r3, r3, r1, r2
 800b710:	9307      	str	r3, [sp, #28]
 800b712:	2300      	movs	r3, #0
 800b714:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b716:	1c51      	adds	r1, r2, #1
 800b718:	9117      	str	r1, [sp, #92]	; 0x5c
 800b71a:	7852      	ldrb	r2, [r2, #1]
 800b71c:	4618      	mov	r0, r3
 800b71e:	e7c9      	b.n	800b6b4 <_strtod_l+0x1e4>
 800b720:	4638      	mov	r0, r7
 800b722:	e7d2      	b.n	800b6ca <_strtod_l+0x1fa>
 800b724:	2b08      	cmp	r3, #8
 800b726:	dc04      	bgt.n	800b732 <_strtod_l+0x262>
 800b728:	9e07      	ldr	r6, [sp, #28]
 800b72a:	434e      	muls	r6, r1
 800b72c:	9607      	str	r6, [sp, #28]
 800b72e:	3301      	adds	r3, #1
 800b730:	e7e2      	b.n	800b6f8 <_strtod_l+0x228>
 800b732:	f103 0c01 	add.w	ip, r3, #1
 800b736:	f1bc 0f10 	cmp.w	ip, #16
 800b73a:	bfd8      	it	le
 800b73c:	fb01 f909 	mulle.w	r9, r1, r9
 800b740:	e7f5      	b.n	800b72e <_strtod_l+0x25e>
 800b742:	2d10      	cmp	r5, #16
 800b744:	bfdc      	itt	le
 800b746:	230a      	movle	r3, #10
 800b748:	fb03 2909 	mlale	r9, r3, r9, r2
 800b74c:	e7e1      	b.n	800b712 <_strtod_l+0x242>
 800b74e:	2300      	movs	r3, #0
 800b750:	9305      	str	r3, [sp, #20]
 800b752:	2301      	movs	r3, #1
 800b754:	e77c      	b.n	800b650 <_strtod_l+0x180>
 800b756:	f04f 0c00 	mov.w	ip, #0
 800b75a:	f108 0202 	add.w	r2, r8, #2
 800b75e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b760:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b764:	e785      	b.n	800b672 <_strtod_l+0x1a2>
 800b766:	f04f 0c01 	mov.w	ip, #1
 800b76a:	e7f6      	b.n	800b75a <_strtod_l+0x28a>
 800b76c:	0800ff10 	.word	0x0800ff10
 800b770:	0800fcc8 	.word	0x0800fcc8
 800b774:	7ff00000 	.word	0x7ff00000
 800b778:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b77a:	1c51      	adds	r1, r2, #1
 800b77c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b77e:	7852      	ldrb	r2, [r2, #1]
 800b780:	2a30      	cmp	r2, #48	; 0x30
 800b782:	d0f9      	beq.n	800b778 <_strtod_l+0x2a8>
 800b784:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b788:	2908      	cmp	r1, #8
 800b78a:	f63f af79 	bhi.w	800b680 <_strtod_l+0x1b0>
 800b78e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b792:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b794:	9206      	str	r2, [sp, #24]
 800b796:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b798:	1c51      	adds	r1, r2, #1
 800b79a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b79c:	7852      	ldrb	r2, [r2, #1]
 800b79e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b7a2:	2e09      	cmp	r6, #9
 800b7a4:	d937      	bls.n	800b816 <_strtod_l+0x346>
 800b7a6:	9e06      	ldr	r6, [sp, #24]
 800b7a8:	1b89      	subs	r1, r1, r6
 800b7aa:	2908      	cmp	r1, #8
 800b7ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b7b0:	dc02      	bgt.n	800b7b8 <_strtod_l+0x2e8>
 800b7b2:	4576      	cmp	r6, lr
 800b7b4:	bfa8      	it	ge
 800b7b6:	4676      	movge	r6, lr
 800b7b8:	f1bc 0f00 	cmp.w	ip, #0
 800b7bc:	d000      	beq.n	800b7c0 <_strtod_l+0x2f0>
 800b7be:	4276      	negs	r6, r6
 800b7c0:	2d00      	cmp	r5, #0
 800b7c2:	d14d      	bne.n	800b860 <_strtod_l+0x390>
 800b7c4:	9904      	ldr	r1, [sp, #16]
 800b7c6:	4301      	orrs	r1, r0
 800b7c8:	f47f aec6 	bne.w	800b558 <_strtod_l+0x88>
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f47f aee1 	bne.w	800b594 <_strtod_l+0xc4>
 800b7d2:	2a69      	cmp	r2, #105	; 0x69
 800b7d4:	d027      	beq.n	800b826 <_strtod_l+0x356>
 800b7d6:	dc24      	bgt.n	800b822 <_strtod_l+0x352>
 800b7d8:	2a49      	cmp	r2, #73	; 0x49
 800b7da:	d024      	beq.n	800b826 <_strtod_l+0x356>
 800b7dc:	2a4e      	cmp	r2, #78	; 0x4e
 800b7de:	f47f aed9 	bne.w	800b594 <_strtod_l+0xc4>
 800b7e2:	499f      	ldr	r1, [pc, #636]	; (800ba60 <_strtod_l+0x590>)
 800b7e4:	a817      	add	r0, sp, #92	; 0x5c
 800b7e6:	f001 fe61 	bl	800d4ac <__match>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	f43f aed2 	beq.w	800b594 <_strtod_l+0xc4>
 800b7f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b28      	cmp	r3, #40	; 0x28
 800b7f6:	d12d      	bne.n	800b854 <_strtod_l+0x384>
 800b7f8:	499a      	ldr	r1, [pc, #616]	; (800ba64 <_strtod_l+0x594>)
 800b7fa:	aa1a      	add	r2, sp, #104	; 0x68
 800b7fc:	a817      	add	r0, sp, #92	; 0x5c
 800b7fe:	f001 fe69 	bl	800d4d4 <__hexnan>
 800b802:	2805      	cmp	r0, #5
 800b804:	d126      	bne.n	800b854 <_strtod_l+0x384>
 800b806:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b808:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b80c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b810:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b814:	e6a0      	b.n	800b558 <_strtod_l+0x88>
 800b816:	210a      	movs	r1, #10
 800b818:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b81c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b820:	e7b9      	b.n	800b796 <_strtod_l+0x2c6>
 800b822:	2a6e      	cmp	r2, #110	; 0x6e
 800b824:	e7db      	b.n	800b7de <_strtod_l+0x30e>
 800b826:	4990      	ldr	r1, [pc, #576]	; (800ba68 <_strtod_l+0x598>)
 800b828:	a817      	add	r0, sp, #92	; 0x5c
 800b82a:	f001 fe3f 	bl	800d4ac <__match>
 800b82e:	2800      	cmp	r0, #0
 800b830:	f43f aeb0 	beq.w	800b594 <_strtod_l+0xc4>
 800b834:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b836:	498d      	ldr	r1, [pc, #564]	; (800ba6c <_strtod_l+0x59c>)
 800b838:	3b01      	subs	r3, #1
 800b83a:	a817      	add	r0, sp, #92	; 0x5c
 800b83c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b83e:	f001 fe35 	bl	800d4ac <__match>
 800b842:	b910      	cbnz	r0, 800b84a <_strtod_l+0x37a>
 800b844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b846:	3301      	adds	r3, #1
 800b848:	9317      	str	r3, [sp, #92]	; 0x5c
 800b84a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ba7c <_strtod_l+0x5ac>
 800b84e:	f04f 0a00 	mov.w	sl, #0
 800b852:	e681      	b.n	800b558 <_strtod_l+0x88>
 800b854:	4886      	ldr	r0, [pc, #536]	; (800ba70 <_strtod_l+0x5a0>)
 800b856:	f003 f877 	bl	800e948 <nan>
 800b85a:	ec5b ab10 	vmov	sl, fp, d0
 800b85e:	e67b      	b.n	800b558 <_strtod_l+0x88>
 800b860:	9b05      	ldr	r3, [sp, #20]
 800b862:	9807      	ldr	r0, [sp, #28]
 800b864:	1af3      	subs	r3, r6, r3
 800b866:	2f00      	cmp	r7, #0
 800b868:	bf08      	it	eq
 800b86a:	462f      	moveq	r7, r5
 800b86c:	2d10      	cmp	r5, #16
 800b86e:	9306      	str	r3, [sp, #24]
 800b870:	46a8      	mov	r8, r5
 800b872:	bfa8      	it	ge
 800b874:	f04f 0810 	movge.w	r8, #16
 800b878:	f7f4 fe44 	bl	8000504 <__aeabi_ui2d>
 800b87c:	2d09      	cmp	r5, #9
 800b87e:	4682      	mov	sl, r0
 800b880:	468b      	mov	fp, r1
 800b882:	dd13      	ble.n	800b8ac <_strtod_l+0x3dc>
 800b884:	4b7b      	ldr	r3, [pc, #492]	; (800ba74 <_strtod_l+0x5a4>)
 800b886:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b88a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b88e:	f7f4 feb3 	bl	80005f8 <__aeabi_dmul>
 800b892:	4682      	mov	sl, r0
 800b894:	4648      	mov	r0, r9
 800b896:	468b      	mov	fp, r1
 800b898:	f7f4 fe34 	bl	8000504 <__aeabi_ui2d>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4650      	mov	r0, sl
 800b8a2:	4659      	mov	r1, fp
 800b8a4:	f7f4 fcf2 	bl	800028c <__adddf3>
 800b8a8:	4682      	mov	sl, r0
 800b8aa:	468b      	mov	fp, r1
 800b8ac:	2d0f      	cmp	r5, #15
 800b8ae:	dc38      	bgt.n	800b922 <_strtod_l+0x452>
 800b8b0:	9b06      	ldr	r3, [sp, #24]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f43f ae50 	beq.w	800b558 <_strtod_l+0x88>
 800b8b8:	dd24      	ble.n	800b904 <_strtod_l+0x434>
 800b8ba:	2b16      	cmp	r3, #22
 800b8bc:	dc0b      	bgt.n	800b8d6 <_strtod_l+0x406>
 800b8be:	496d      	ldr	r1, [pc, #436]	; (800ba74 <_strtod_l+0x5a4>)
 800b8c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8c8:	4652      	mov	r2, sl
 800b8ca:	465b      	mov	r3, fp
 800b8cc:	f7f4 fe94 	bl	80005f8 <__aeabi_dmul>
 800b8d0:	4682      	mov	sl, r0
 800b8d2:	468b      	mov	fp, r1
 800b8d4:	e640      	b.n	800b558 <_strtod_l+0x88>
 800b8d6:	9a06      	ldr	r2, [sp, #24]
 800b8d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	db20      	blt.n	800b922 <_strtod_l+0x452>
 800b8e0:	4c64      	ldr	r4, [pc, #400]	; (800ba74 <_strtod_l+0x5a4>)
 800b8e2:	f1c5 050f 	rsb	r5, r5, #15
 800b8e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b8ea:	4652      	mov	r2, sl
 800b8ec:	465b      	mov	r3, fp
 800b8ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8f2:	f7f4 fe81 	bl	80005f8 <__aeabi_dmul>
 800b8f6:	9b06      	ldr	r3, [sp, #24]
 800b8f8:	1b5d      	subs	r5, r3, r5
 800b8fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b8fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b902:	e7e3      	b.n	800b8cc <_strtod_l+0x3fc>
 800b904:	9b06      	ldr	r3, [sp, #24]
 800b906:	3316      	adds	r3, #22
 800b908:	db0b      	blt.n	800b922 <_strtod_l+0x452>
 800b90a:	9b05      	ldr	r3, [sp, #20]
 800b90c:	1b9e      	subs	r6, r3, r6
 800b90e:	4b59      	ldr	r3, [pc, #356]	; (800ba74 <_strtod_l+0x5a4>)
 800b910:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b914:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b918:	4650      	mov	r0, sl
 800b91a:	4659      	mov	r1, fp
 800b91c:	f7f4 ff96 	bl	800084c <__aeabi_ddiv>
 800b920:	e7d6      	b.n	800b8d0 <_strtod_l+0x400>
 800b922:	9b06      	ldr	r3, [sp, #24]
 800b924:	eba5 0808 	sub.w	r8, r5, r8
 800b928:	4498      	add	r8, r3
 800b92a:	f1b8 0f00 	cmp.w	r8, #0
 800b92e:	dd74      	ble.n	800ba1a <_strtod_l+0x54a>
 800b930:	f018 030f 	ands.w	r3, r8, #15
 800b934:	d00a      	beq.n	800b94c <_strtod_l+0x47c>
 800b936:	494f      	ldr	r1, [pc, #316]	; (800ba74 <_strtod_l+0x5a4>)
 800b938:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b93c:	4652      	mov	r2, sl
 800b93e:	465b      	mov	r3, fp
 800b940:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b944:	f7f4 fe58 	bl	80005f8 <__aeabi_dmul>
 800b948:	4682      	mov	sl, r0
 800b94a:	468b      	mov	fp, r1
 800b94c:	f038 080f 	bics.w	r8, r8, #15
 800b950:	d04f      	beq.n	800b9f2 <_strtod_l+0x522>
 800b952:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b956:	dd22      	ble.n	800b99e <_strtod_l+0x4ce>
 800b958:	2500      	movs	r5, #0
 800b95a:	462e      	mov	r6, r5
 800b95c:	9507      	str	r5, [sp, #28]
 800b95e:	9505      	str	r5, [sp, #20]
 800b960:	2322      	movs	r3, #34	; 0x22
 800b962:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ba7c <_strtod_l+0x5ac>
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	f04f 0a00 	mov.w	sl, #0
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f43f adf2 	beq.w	800b558 <_strtod_l+0x88>
 800b974:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b976:	4620      	mov	r0, r4
 800b978:	f001 febc 	bl	800d6f4 <_Bfree>
 800b97c:	9905      	ldr	r1, [sp, #20]
 800b97e:	4620      	mov	r0, r4
 800b980:	f001 feb8 	bl	800d6f4 <_Bfree>
 800b984:	4631      	mov	r1, r6
 800b986:	4620      	mov	r0, r4
 800b988:	f001 feb4 	bl	800d6f4 <_Bfree>
 800b98c:	9907      	ldr	r1, [sp, #28]
 800b98e:	4620      	mov	r0, r4
 800b990:	f001 feb0 	bl	800d6f4 <_Bfree>
 800b994:	4629      	mov	r1, r5
 800b996:	4620      	mov	r0, r4
 800b998:	f001 feac 	bl	800d6f4 <_Bfree>
 800b99c:	e5dc      	b.n	800b558 <_strtod_l+0x88>
 800b99e:	4b36      	ldr	r3, [pc, #216]	; (800ba78 <_strtod_l+0x5a8>)
 800b9a0:	9304      	str	r3, [sp, #16]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b9a8:	4650      	mov	r0, sl
 800b9aa:	4659      	mov	r1, fp
 800b9ac:	4699      	mov	r9, r3
 800b9ae:	f1b8 0f01 	cmp.w	r8, #1
 800b9b2:	dc21      	bgt.n	800b9f8 <_strtod_l+0x528>
 800b9b4:	b10b      	cbz	r3, 800b9ba <_strtod_l+0x4ea>
 800b9b6:	4682      	mov	sl, r0
 800b9b8:	468b      	mov	fp, r1
 800b9ba:	4b2f      	ldr	r3, [pc, #188]	; (800ba78 <_strtod_l+0x5a8>)
 800b9bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b9c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b9c4:	4652      	mov	r2, sl
 800b9c6:	465b      	mov	r3, fp
 800b9c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b9cc:	f7f4 fe14 	bl	80005f8 <__aeabi_dmul>
 800b9d0:	4b2a      	ldr	r3, [pc, #168]	; (800ba7c <_strtod_l+0x5ac>)
 800b9d2:	460a      	mov	r2, r1
 800b9d4:	400b      	ands	r3, r1
 800b9d6:	492a      	ldr	r1, [pc, #168]	; (800ba80 <_strtod_l+0x5b0>)
 800b9d8:	428b      	cmp	r3, r1
 800b9da:	4682      	mov	sl, r0
 800b9dc:	d8bc      	bhi.n	800b958 <_strtod_l+0x488>
 800b9de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b9e2:	428b      	cmp	r3, r1
 800b9e4:	bf86      	itte	hi
 800b9e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ba84 <_strtod_l+0x5b4>
 800b9ea:	f04f 3aff 	movhi.w	sl, #4294967295
 800b9ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	9304      	str	r3, [sp, #16]
 800b9f6:	e084      	b.n	800bb02 <_strtod_l+0x632>
 800b9f8:	f018 0f01 	tst.w	r8, #1
 800b9fc:	d005      	beq.n	800ba0a <_strtod_l+0x53a>
 800b9fe:	9b04      	ldr	r3, [sp, #16]
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	f7f4 fdf8 	bl	80005f8 <__aeabi_dmul>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	9a04      	ldr	r2, [sp, #16]
 800ba0c:	3208      	adds	r2, #8
 800ba0e:	f109 0901 	add.w	r9, r9, #1
 800ba12:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ba16:	9204      	str	r2, [sp, #16]
 800ba18:	e7c9      	b.n	800b9ae <_strtod_l+0x4de>
 800ba1a:	d0ea      	beq.n	800b9f2 <_strtod_l+0x522>
 800ba1c:	f1c8 0800 	rsb	r8, r8, #0
 800ba20:	f018 020f 	ands.w	r2, r8, #15
 800ba24:	d00a      	beq.n	800ba3c <_strtod_l+0x56c>
 800ba26:	4b13      	ldr	r3, [pc, #76]	; (800ba74 <_strtod_l+0x5a4>)
 800ba28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba2c:	4650      	mov	r0, sl
 800ba2e:	4659      	mov	r1, fp
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	f7f4 ff0a 	bl	800084c <__aeabi_ddiv>
 800ba38:	4682      	mov	sl, r0
 800ba3a:	468b      	mov	fp, r1
 800ba3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ba40:	d0d7      	beq.n	800b9f2 <_strtod_l+0x522>
 800ba42:	f1b8 0f1f 	cmp.w	r8, #31
 800ba46:	dd1f      	ble.n	800ba88 <_strtod_l+0x5b8>
 800ba48:	2500      	movs	r5, #0
 800ba4a:	462e      	mov	r6, r5
 800ba4c:	9507      	str	r5, [sp, #28]
 800ba4e:	9505      	str	r5, [sp, #20]
 800ba50:	2322      	movs	r3, #34	; 0x22
 800ba52:	f04f 0a00 	mov.w	sl, #0
 800ba56:	f04f 0b00 	mov.w	fp, #0
 800ba5a:	6023      	str	r3, [r4, #0]
 800ba5c:	e786      	b.n	800b96c <_strtod_l+0x49c>
 800ba5e:	bf00      	nop
 800ba60:	0800fc9d 	.word	0x0800fc9d
 800ba64:	0800fcdc 	.word	0x0800fcdc
 800ba68:	0800fc95 	.word	0x0800fc95
 800ba6c:	0800fe1c 	.word	0x0800fe1c
 800ba70:	080100e3 	.word	0x080100e3
 800ba74:	0800ffa8 	.word	0x0800ffa8
 800ba78:	0800ff80 	.word	0x0800ff80
 800ba7c:	7ff00000 	.word	0x7ff00000
 800ba80:	7ca00000 	.word	0x7ca00000
 800ba84:	7fefffff 	.word	0x7fefffff
 800ba88:	f018 0310 	ands.w	r3, r8, #16
 800ba8c:	bf18      	it	ne
 800ba8e:	236a      	movne	r3, #106	; 0x6a
 800ba90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800be40 <_strtod_l+0x970>
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	4650      	mov	r0, sl
 800ba98:	4659      	mov	r1, fp
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	f018 0f01 	tst.w	r8, #1
 800baa0:	d004      	beq.n	800baac <_strtod_l+0x5dc>
 800baa2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800baa6:	f7f4 fda7 	bl	80005f8 <__aeabi_dmul>
 800baaa:	2301      	movs	r3, #1
 800baac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bab0:	f109 0908 	add.w	r9, r9, #8
 800bab4:	d1f2      	bne.n	800ba9c <_strtod_l+0x5cc>
 800bab6:	b10b      	cbz	r3, 800babc <_strtod_l+0x5ec>
 800bab8:	4682      	mov	sl, r0
 800baba:	468b      	mov	fp, r1
 800babc:	9b04      	ldr	r3, [sp, #16]
 800babe:	b1c3      	cbz	r3, 800baf2 <_strtod_l+0x622>
 800bac0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bac4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bac8:	2b00      	cmp	r3, #0
 800baca:	4659      	mov	r1, fp
 800bacc:	dd11      	ble.n	800baf2 <_strtod_l+0x622>
 800bace:	2b1f      	cmp	r3, #31
 800bad0:	f340 8124 	ble.w	800bd1c <_strtod_l+0x84c>
 800bad4:	2b34      	cmp	r3, #52	; 0x34
 800bad6:	bfde      	ittt	le
 800bad8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800badc:	f04f 33ff 	movle.w	r3, #4294967295
 800bae0:	fa03 f202 	lslle.w	r2, r3, r2
 800bae4:	f04f 0a00 	mov.w	sl, #0
 800bae8:	bfcc      	ite	gt
 800baea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800baee:	ea02 0b01 	andle.w	fp, r2, r1
 800baf2:	2200      	movs	r2, #0
 800baf4:	2300      	movs	r3, #0
 800baf6:	4650      	mov	r0, sl
 800baf8:	4659      	mov	r1, fp
 800bafa:	f7f4 ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d1a2      	bne.n	800ba48 <_strtod_l+0x578>
 800bb02:	9b07      	ldr	r3, [sp, #28]
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	9908      	ldr	r1, [sp, #32]
 800bb08:	462b      	mov	r3, r5
 800bb0a:	463a      	mov	r2, r7
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f001 fe59 	bl	800d7c4 <__s2b>
 800bb12:	9007      	str	r0, [sp, #28]
 800bb14:	2800      	cmp	r0, #0
 800bb16:	f43f af1f 	beq.w	800b958 <_strtod_l+0x488>
 800bb1a:	9b05      	ldr	r3, [sp, #20]
 800bb1c:	1b9e      	subs	r6, r3, r6
 800bb1e:	9b06      	ldr	r3, [sp, #24]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	bfb4      	ite	lt
 800bb24:	4633      	movlt	r3, r6
 800bb26:	2300      	movge	r3, #0
 800bb28:	930c      	str	r3, [sp, #48]	; 0x30
 800bb2a:	9b06      	ldr	r3, [sp, #24]
 800bb2c:	2500      	movs	r5, #0
 800bb2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bb32:	9312      	str	r3, [sp, #72]	; 0x48
 800bb34:	462e      	mov	r6, r5
 800bb36:	9b07      	ldr	r3, [sp, #28]
 800bb38:	4620      	mov	r0, r4
 800bb3a:	6859      	ldr	r1, [r3, #4]
 800bb3c:	f001 fd9a 	bl	800d674 <_Balloc>
 800bb40:	9005      	str	r0, [sp, #20]
 800bb42:	2800      	cmp	r0, #0
 800bb44:	f43f af0c 	beq.w	800b960 <_strtod_l+0x490>
 800bb48:	9b07      	ldr	r3, [sp, #28]
 800bb4a:	691a      	ldr	r2, [r3, #16]
 800bb4c:	3202      	adds	r2, #2
 800bb4e:	f103 010c 	add.w	r1, r3, #12
 800bb52:	0092      	lsls	r2, r2, #2
 800bb54:	300c      	adds	r0, #12
 800bb56:	f7fe fc85 	bl	800a464 <memcpy>
 800bb5a:	ec4b ab10 	vmov	d0, sl, fp
 800bb5e:	aa1a      	add	r2, sp, #104	; 0x68
 800bb60:	a919      	add	r1, sp, #100	; 0x64
 800bb62:	4620      	mov	r0, r4
 800bb64:	f002 f974 	bl	800de50 <__d2b>
 800bb68:	ec4b ab18 	vmov	d8, sl, fp
 800bb6c:	9018      	str	r0, [sp, #96]	; 0x60
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	f43f aef6 	beq.w	800b960 <_strtod_l+0x490>
 800bb74:	2101      	movs	r1, #1
 800bb76:	4620      	mov	r0, r4
 800bb78:	f001 febe 	bl	800d8f8 <__i2b>
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	f43f aeee 	beq.w	800b960 <_strtod_l+0x490>
 800bb84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb86:	9904      	ldr	r1, [sp, #16]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	bfab      	itete	ge
 800bb8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bb8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bb90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bb92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bb96:	bfac      	ite	ge
 800bb98:	eb03 0902 	addge.w	r9, r3, r2
 800bb9c:	1ad7      	sublt	r7, r2, r3
 800bb9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bba0:	eba3 0801 	sub.w	r8, r3, r1
 800bba4:	4490      	add	r8, r2
 800bba6:	4ba1      	ldr	r3, [pc, #644]	; (800be2c <_strtod_l+0x95c>)
 800bba8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbac:	4598      	cmp	r8, r3
 800bbae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bbb2:	f280 80c7 	bge.w	800bd44 <_strtod_l+0x874>
 800bbb6:	eba3 0308 	sub.w	r3, r3, r8
 800bbba:	2b1f      	cmp	r3, #31
 800bbbc:	eba2 0203 	sub.w	r2, r2, r3
 800bbc0:	f04f 0101 	mov.w	r1, #1
 800bbc4:	f300 80b1 	bgt.w	800bd2a <_strtod_l+0x85a>
 800bbc8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbcc:	930d      	str	r3, [sp, #52]	; 0x34
 800bbce:	2300      	movs	r3, #0
 800bbd0:	9308      	str	r3, [sp, #32]
 800bbd2:	eb09 0802 	add.w	r8, r9, r2
 800bbd6:	9b04      	ldr	r3, [sp, #16]
 800bbd8:	45c1      	cmp	r9, r8
 800bbda:	4417      	add	r7, r2
 800bbdc:	441f      	add	r7, r3
 800bbde:	464b      	mov	r3, r9
 800bbe0:	bfa8      	it	ge
 800bbe2:	4643      	movge	r3, r8
 800bbe4:	42bb      	cmp	r3, r7
 800bbe6:	bfa8      	it	ge
 800bbe8:	463b      	movge	r3, r7
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	bfc2      	ittt	gt
 800bbee:	eba8 0803 	subgt.w	r8, r8, r3
 800bbf2:	1aff      	subgt	r7, r7, r3
 800bbf4:	eba9 0903 	subgt.w	r9, r9, r3
 800bbf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	dd17      	ble.n	800bc2e <_strtod_l+0x75e>
 800bbfe:	4631      	mov	r1, r6
 800bc00:	461a      	mov	r2, r3
 800bc02:	4620      	mov	r0, r4
 800bc04:	f001 ff38 	bl	800da78 <__pow5mult>
 800bc08:	4606      	mov	r6, r0
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	f43f aea8 	beq.w	800b960 <_strtod_l+0x490>
 800bc10:	4601      	mov	r1, r0
 800bc12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc14:	4620      	mov	r0, r4
 800bc16:	f001 fe85 	bl	800d924 <__multiply>
 800bc1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	f43f ae9f 	beq.w	800b960 <_strtod_l+0x490>
 800bc22:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc24:	4620      	mov	r0, r4
 800bc26:	f001 fd65 	bl	800d6f4 <_Bfree>
 800bc2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc2c:	9318      	str	r3, [sp, #96]	; 0x60
 800bc2e:	f1b8 0f00 	cmp.w	r8, #0
 800bc32:	f300 808c 	bgt.w	800bd4e <_strtod_l+0x87e>
 800bc36:	9b06      	ldr	r3, [sp, #24]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	dd08      	ble.n	800bc4e <_strtod_l+0x77e>
 800bc3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc3e:	9905      	ldr	r1, [sp, #20]
 800bc40:	4620      	mov	r0, r4
 800bc42:	f001 ff19 	bl	800da78 <__pow5mult>
 800bc46:	9005      	str	r0, [sp, #20]
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	f43f ae89 	beq.w	800b960 <_strtod_l+0x490>
 800bc4e:	2f00      	cmp	r7, #0
 800bc50:	dd08      	ble.n	800bc64 <_strtod_l+0x794>
 800bc52:	9905      	ldr	r1, [sp, #20]
 800bc54:	463a      	mov	r2, r7
 800bc56:	4620      	mov	r0, r4
 800bc58:	f001 ff68 	bl	800db2c <__lshift>
 800bc5c:	9005      	str	r0, [sp, #20]
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f43f ae7e 	beq.w	800b960 <_strtod_l+0x490>
 800bc64:	f1b9 0f00 	cmp.w	r9, #0
 800bc68:	dd08      	ble.n	800bc7c <_strtod_l+0x7ac>
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	464a      	mov	r2, r9
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f001 ff5c 	bl	800db2c <__lshift>
 800bc74:	4606      	mov	r6, r0
 800bc76:	2800      	cmp	r0, #0
 800bc78:	f43f ae72 	beq.w	800b960 <_strtod_l+0x490>
 800bc7c:	9a05      	ldr	r2, [sp, #20]
 800bc7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc80:	4620      	mov	r0, r4
 800bc82:	f001 ffdf 	bl	800dc44 <__mdiff>
 800bc86:	4605      	mov	r5, r0
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	f43f ae69 	beq.w	800b960 <_strtod_l+0x490>
 800bc8e:	68c3      	ldr	r3, [r0, #12]
 800bc90:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc92:	2300      	movs	r3, #0
 800bc94:	60c3      	str	r3, [r0, #12]
 800bc96:	4631      	mov	r1, r6
 800bc98:	f001 ffb8 	bl	800dc0c <__mcmp>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	da60      	bge.n	800bd62 <_strtod_l+0x892>
 800bca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca2:	ea53 030a 	orrs.w	r3, r3, sl
 800bca6:	f040 8082 	bne.w	800bdae <_strtod_l+0x8de>
 800bcaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d17d      	bne.n	800bdae <_strtod_l+0x8de>
 800bcb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcb6:	0d1b      	lsrs	r3, r3, #20
 800bcb8:	051b      	lsls	r3, r3, #20
 800bcba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bcbe:	d976      	bls.n	800bdae <_strtod_l+0x8de>
 800bcc0:	696b      	ldr	r3, [r5, #20]
 800bcc2:	b913      	cbnz	r3, 800bcca <_strtod_l+0x7fa>
 800bcc4:	692b      	ldr	r3, [r5, #16]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	dd71      	ble.n	800bdae <_strtod_l+0x8de>
 800bcca:	4629      	mov	r1, r5
 800bccc:	2201      	movs	r2, #1
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f001 ff2c 	bl	800db2c <__lshift>
 800bcd4:	4631      	mov	r1, r6
 800bcd6:	4605      	mov	r5, r0
 800bcd8:	f001 ff98 	bl	800dc0c <__mcmp>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	dd66      	ble.n	800bdae <_strtod_l+0x8de>
 800bce0:	9904      	ldr	r1, [sp, #16]
 800bce2:	4a53      	ldr	r2, [pc, #332]	; (800be30 <_strtod_l+0x960>)
 800bce4:	465b      	mov	r3, fp
 800bce6:	2900      	cmp	r1, #0
 800bce8:	f000 8081 	beq.w	800bdee <_strtod_l+0x91e>
 800bcec:	ea02 010b 	and.w	r1, r2, fp
 800bcf0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bcf4:	dc7b      	bgt.n	800bdee <_strtod_l+0x91e>
 800bcf6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bcfa:	f77f aea9 	ble.w	800ba50 <_strtod_l+0x580>
 800bcfe:	4b4d      	ldr	r3, [pc, #308]	; (800be34 <_strtod_l+0x964>)
 800bd00:	4650      	mov	r0, sl
 800bd02:	4659      	mov	r1, fp
 800bd04:	2200      	movs	r2, #0
 800bd06:	f7f4 fc77 	bl	80005f8 <__aeabi_dmul>
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4303      	orrs	r3, r0
 800bd0e:	bf08      	it	eq
 800bd10:	2322      	moveq	r3, #34	; 0x22
 800bd12:	4682      	mov	sl, r0
 800bd14:	468b      	mov	fp, r1
 800bd16:	bf08      	it	eq
 800bd18:	6023      	streq	r3, [r4, #0]
 800bd1a:	e62b      	b.n	800b974 <_strtod_l+0x4a4>
 800bd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd20:	fa02 f303 	lsl.w	r3, r2, r3
 800bd24:	ea03 0a0a 	and.w	sl, r3, sl
 800bd28:	e6e3      	b.n	800baf2 <_strtod_l+0x622>
 800bd2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bd2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bd32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bd36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bd3a:	fa01 f308 	lsl.w	r3, r1, r8
 800bd3e:	9308      	str	r3, [sp, #32]
 800bd40:	910d      	str	r1, [sp, #52]	; 0x34
 800bd42:	e746      	b.n	800bbd2 <_strtod_l+0x702>
 800bd44:	2300      	movs	r3, #0
 800bd46:	9308      	str	r3, [sp, #32]
 800bd48:	2301      	movs	r3, #1
 800bd4a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd4c:	e741      	b.n	800bbd2 <_strtod_l+0x702>
 800bd4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd50:	4642      	mov	r2, r8
 800bd52:	4620      	mov	r0, r4
 800bd54:	f001 feea 	bl	800db2c <__lshift>
 800bd58:	9018      	str	r0, [sp, #96]	; 0x60
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	f47f af6b 	bne.w	800bc36 <_strtod_l+0x766>
 800bd60:	e5fe      	b.n	800b960 <_strtod_l+0x490>
 800bd62:	465f      	mov	r7, fp
 800bd64:	d16e      	bne.n	800be44 <_strtod_l+0x974>
 800bd66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd6c:	b342      	cbz	r2, 800bdc0 <_strtod_l+0x8f0>
 800bd6e:	4a32      	ldr	r2, [pc, #200]	; (800be38 <_strtod_l+0x968>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d128      	bne.n	800bdc6 <_strtod_l+0x8f6>
 800bd74:	9b04      	ldr	r3, [sp, #16]
 800bd76:	4651      	mov	r1, sl
 800bd78:	b1eb      	cbz	r3, 800bdb6 <_strtod_l+0x8e6>
 800bd7a:	4b2d      	ldr	r3, [pc, #180]	; (800be30 <_strtod_l+0x960>)
 800bd7c:	403b      	ands	r3, r7
 800bd7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bd82:	f04f 32ff 	mov.w	r2, #4294967295
 800bd86:	d819      	bhi.n	800bdbc <_strtod_l+0x8ec>
 800bd88:	0d1b      	lsrs	r3, r3, #20
 800bd8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd8e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd92:	4299      	cmp	r1, r3
 800bd94:	d117      	bne.n	800bdc6 <_strtod_l+0x8f6>
 800bd96:	4b29      	ldr	r3, [pc, #164]	; (800be3c <_strtod_l+0x96c>)
 800bd98:	429f      	cmp	r7, r3
 800bd9a:	d102      	bne.n	800bda2 <_strtod_l+0x8d2>
 800bd9c:	3101      	adds	r1, #1
 800bd9e:	f43f addf 	beq.w	800b960 <_strtod_l+0x490>
 800bda2:	4b23      	ldr	r3, [pc, #140]	; (800be30 <_strtod_l+0x960>)
 800bda4:	403b      	ands	r3, r7
 800bda6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bdaa:	f04f 0a00 	mov.w	sl, #0
 800bdae:	9b04      	ldr	r3, [sp, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1a4      	bne.n	800bcfe <_strtod_l+0x82e>
 800bdb4:	e5de      	b.n	800b974 <_strtod_l+0x4a4>
 800bdb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdba:	e7ea      	b.n	800bd92 <_strtod_l+0x8c2>
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	e7e8      	b.n	800bd92 <_strtod_l+0x8c2>
 800bdc0:	ea53 030a 	orrs.w	r3, r3, sl
 800bdc4:	d08c      	beq.n	800bce0 <_strtod_l+0x810>
 800bdc6:	9b08      	ldr	r3, [sp, #32]
 800bdc8:	b1db      	cbz	r3, 800be02 <_strtod_l+0x932>
 800bdca:	423b      	tst	r3, r7
 800bdcc:	d0ef      	beq.n	800bdae <_strtod_l+0x8de>
 800bdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdd0:	9a04      	ldr	r2, [sp, #16]
 800bdd2:	4650      	mov	r0, sl
 800bdd4:	4659      	mov	r1, fp
 800bdd6:	b1c3      	cbz	r3, 800be0a <_strtod_l+0x93a>
 800bdd8:	f7ff fb5b 	bl	800b492 <sulp>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	ec51 0b18 	vmov	r0, r1, d8
 800bde4:	f7f4 fa52 	bl	800028c <__adddf3>
 800bde8:	4682      	mov	sl, r0
 800bdea:	468b      	mov	fp, r1
 800bdec:	e7df      	b.n	800bdae <_strtod_l+0x8de>
 800bdee:	4013      	ands	r3, r2
 800bdf0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bdf4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bdf8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bdfc:	f04f 3aff 	mov.w	sl, #4294967295
 800be00:	e7d5      	b.n	800bdae <_strtod_l+0x8de>
 800be02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be04:	ea13 0f0a 	tst.w	r3, sl
 800be08:	e7e0      	b.n	800bdcc <_strtod_l+0x8fc>
 800be0a:	f7ff fb42 	bl	800b492 <sulp>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	ec51 0b18 	vmov	r0, r1, d8
 800be16:	f7f4 fa37 	bl	8000288 <__aeabi_dsub>
 800be1a:	2200      	movs	r2, #0
 800be1c:	2300      	movs	r3, #0
 800be1e:	4682      	mov	sl, r0
 800be20:	468b      	mov	fp, r1
 800be22:	f7f4 fe51 	bl	8000ac8 <__aeabi_dcmpeq>
 800be26:	2800      	cmp	r0, #0
 800be28:	d0c1      	beq.n	800bdae <_strtod_l+0x8de>
 800be2a:	e611      	b.n	800ba50 <_strtod_l+0x580>
 800be2c:	fffffc02 	.word	0xfffffc02
 800be30:	7ff00000 	.word	0x7ff00000
 800be34:	39500000 	.word	0x39500000
 800be38:	000fffff 	.word	0x000fffff
 800be3c:	7fefffff 	.word	0x7fefffff
 800be40:	0800fcf0 	.word	0x0800fcf0
 800be44:	4631      	mov	r1, r6
 800be46:	4628      	mov	r0, r5
 800be48:	f002 f85e 	bl	800df08 <__ratio>
 800be4c:	ec59 8b10 	vmov	r8, r9, d0
 800be50:	ee10 0a10 	vmov	r0, s0
 800be54:	2200      	movs	r2, #0
 800be56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be5a:	4649      	mov	r1, r9
 800be5c:	f7f4 fe48 	bl	8000af0 <__aeabi_dcmple>
 800be60:	2800      	cmp	r0, #0
 800be62:	d07a      	beq.n	800bf5a <_strtod_l+0xa8a>
 800be64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be66:	2b00      	cmp	r3, #0
 800be68:	d04a      	beq.n	800bf00 <_strtod_l+0xa30>
 800be6a:	4b95      	ldr	r3, [pc, #596]	; (800c0c0 <_strtod_l+0xbf0>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800be72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c0c0 <_strtod_l+0xbf0>
 800be76:	f04f 0800 	mov.w	r8, #0
 800be7a:	4b92      	ldr	r3, [pc, #584]	; (800c0c4 <_strtod_l+0xbf4>)
 800be7c:	403b      	ands	r3, r7
 800be7e:	930d      	str	r3, [sp, #52]	; 0x34
 800be80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be82:	4b91      	ldr	r3, [pc, #580]	; (800c0c8 <_strtod_l+0xbf8>)
 800be84:	429a      	cmp	r2, r3
 800be86:	f040 80b0 	bne.w	800bfea <_strtod_l+0xb1a>
 800be8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800be92:	ec4b ab10 	vmov	d0, sl, fp
 800be96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be9a:	f001 ff5d 	bl	800dd58 <__ulp>
 800be9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bea2:	ec53 2b10 	vmov	r2, r3, d0
 800bea6:	f7f4 fba7 	bl	80005f8 <__aeabi_dmul>
 800beaa:	4652      	mov	r2, sl
 800beac:	465b      	mov	r3, fp
 800beae:	f7f4 f9ed 	bl	800028c <__adddf3>
 800beb2:	460b      	mov	r3, r1
 800beb4:	4983      	ldr	r1, [pc, #524]	; (800c0c4 <_strtod_l+0xbf4>)
 800beb6:	4a85      	ldr	r2, [pc, #532]	; (800c0cc <_strtod_l+0xbfc>)
 800beb8:	4019      	ands	r1, r3
 800beba:	4291      	cmp	r1, r2
 800bebc:	4682      	mov	sl, r0
 800bebe:	d960      	bls.n	800bf82 <_strtod_l+0xab2>
 800bec0:	ee18 3a90 	vmov	r3, s17
 800bec4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bec8:	4293      	cmp	r3, r2
 800beca:	d104      	bne.n	800bed6 <_strtod_l+0xa06>
 800becc:	ee18 3a10 	vmov	r3, s16
 800bed0:	3301      	adds	r3, #1
 800bed2:	f43f ad45 	beq.w	800b960 <_strtod_l+0x490>
 800bed6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c0d8 <_strtod_l+0xc08>
 800beda:	f04f 3aff 	mov.w	sl, #4294967295
 800bede:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bee0:	4620      	mov	r0, r4
 800bee2:	f001 fc07 	bl	800d6f4 <_Bfree>
 800bee6:	9905      	ldr	r1, [sp, #20]
 800bee8:	4620      	mov	r0, r4
 800beea:	f001 fc03 	bl	800d6f4 <_Bfree>
 800beee:	4631      	mov	r1, r6
 800bef0:	4620      	mov	r0, r4
 800bef2:	f001 fbff 	bl	800d6f4 <_Bfree>
 800bef6:	4629      	mov	r1, r5
 800bef8:	4620      	mov	r0, r4
 800befa:	f001 fbfb 	bl	800d6f4 <_Bfree>
 800befe:	e61a      	b.n	800bb36 <_strtod_l+0x666>
 800bf00:	f1ba 0f00 	cmp.w	sl, #0
 800bf04:	d11b      	bne.n	800bf3e <_strtod_l+0xa6e>
 800bf06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf0a:	b9f3      	cbnz	r3, 800bf4a <_strtod_l+0xa7a>
 800bf0c:	4b6c      	ldr	r3, [pc, #432]	; (800c0c0 <_strtod_l+0xbf0>)
 800bf0e:	2200      	movs	r2, #0
 800bf10:	4640      	mov	r0, r8
 800bf12:	4649      	mov	r1, r9
 800bf14:	f7f4 fde2 	bl	8000adc <__aeabi_dcmplt>
 800bf18:	b9d0      	cbnz	r0, 800bf50 <_strtod_l+0xa80>
 800bf1a:	4640      	mov	r0, r8
 800bf1c:	4649      	mov	r1, r9
 800bf1e:	4b6c      	ldr	r3, [pc, #432]	; (800c0d0 <_strtod_l+0xc00>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	f7f4 fb69 	bl	80005f8 <__aeabi_dmul>
 800bf26:	4680      	mov	r8, r0
 800bf28:	4689      	mov	r9, r1
 800bf2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bf2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bf32:	9315      	str	r3, [sp, #84]	; 0x54
 800bf34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bf38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf3c:	e79d      	b.n	800be7a <_strtod_l+0x9aa>
 800bf3e:	f1ba 0f01 	cmp.w	sl, #1
 800bf42:	d102      	bne.n	800bf4a <_strtod_l+0xa7a>
 800bf44:	2f00      	cmp	r7, #0
 800bf46:	f43f ad83 	beq.w	800ba50 <_strtod_l+0x580>
 800bf4a:	4b62      	ldr	r3, [pc, #392]	; (800c0d4 <_strtod_l+0xc04>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	e78e      	b.n	800be6e <_strtod_l+0x99e>
 800bf50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c0d0 <_strtod_l+0xc00>
 800bf54:	f04f 0800 	mov.w	r8, #0
 800bf58:	e7e7      	b.n	800bf2a <_strtod_l+0xa5a>
 800bf5a:	4b5d      	ldr	r3, [pc, #372]	; (800c0d0 <_strtod_l+0xc00>)
 800bf5c:	4640      	mov	r0, r8
 800bf5e:	4649      	mov	r1, r9
 800bf60:	2200      	movs	r2, #0
 800bf62:	f7f4 fb49 	bl	80005f8 <__aeabi_dmul>
 800bf66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf68:	4680      	mov	r8, r0
 800bf6a:	4689      	mov	r9, r1
 800bf6c:	b933      	cbnz	r3, 800bf7c <_strtod_l+0xaac>
 800bf6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf72:	900e      	str	r0, [sp, #56]	; 0x38
 800bf74:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bf7a:	e7dd      	b.n	800bf38 <_strtod_l+0xa68>
 800bf7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bf80:	e7f9      	b.n	800bf76 <_strtod_l+0xaa6>
 800bf82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bf86:	9b04      	ldr	r3, [sp, #16]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1a8      	bne.n	800bede <_strtod_l+0xa0e>
 800bf8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf92:	0d1b      	lsrs	r3, r3, #20
 800bf94:	051b      	lsls	r3, r3, #20
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d1a1      	bne.n	800bede <_strtod_l+0xa0e>
 800bf9a:	4640      	mov	r0, r8
 800bf9c:	4649      	mov	r1, r9
 800bf9e:	f7f4 fe8b 	bl	8000cb8 <__aeabi_d2lz>
 800bfa2:	f7f4 fafb 	bl	800059c <__aeabi_l2d>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	4640      	mov	r0, r8
 800bfac:	4649      	mov	r1, r9
 800bfae:	f7f4 f96b 	bl	8000288 <__aeabi_dsub>
 800bfb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfb8:	ea43 030a 	orr.w	r3, r3, sl
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	4680      	mov	r8, r0
 800bfc0:	4689      	mov	r9, r1
 800bfc2:	d055      	beq.n	800c070 <_strtod_l+0xba0>
 800bfc4:	a336      	add	r3, pc, #216	; (adr r3, 800c0a0 <_strtod_l+0xbd0>)
 800bfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfca:	f7f4 fd87 	bl	8000adc <__aeabi_dcmplt>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f47f acd0 	bne.w	800b974 <_strtod_l+0x4a4>
 800bfd4:	a334      	add	r3, pc, #208	; (adr r3, 800c0a8 <_strtod_l+0xbd8>)
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	4640      	mov	r0, r8
 800bfdc:	4649      	mov	r1, r9
 800bfde:	f7f4 fd9b 	bl	8000b18 <__aeabi_dcmpgt>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	f43f af7b 	beq.w	800bede <_strtod_l+0xa0e>
 800bfe8:	e4c4      	b.n	800b974 <_strtod_l+0x4a4>
 800bfea:	9b04      	ldr	r3, [sp, #16]
 800bfec:	b333      	cbz	r3, 800c03c <_strtod_l+0xb6c>
 800bfee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bff0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bff4:	d822      	bhi.n	800c03c <_strtod_l+0xb6c>
 800bff6:	a32e      	add	r3, pc, #184	; (adr r3, 800c0b0 <_strtod_l+0xbe0>)
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	4640      	mov	r0, r8
 800bffe:	4649      	mov	r1, r9
 800c000:	f7f4 fd76 	bl	8000af0 <__aeabi_dcmple>
 800c004:	b1a0      	cbz	r0, 800c030 <_strtod_l+0xb60>
 800c006:	4649      	mov	r1, r9
 800c008:	4640      	mov	r0, r8
 800c00a:	f7f4 fdcd 	bl	8000ba8 <__aeabi_d2uiz>
 800c00e:	2801      	cmp	r0, #1
 800c010:	bf38      	it	cc
 800c012:	2001      	movcc	r0, #1
 800c014:	f7f4 fa76 	bl	8000504 <__aeabi_ui2d>
 800c018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c01a:	4680      	mov	r8, r0
 800c01c:	4689      	mov	r9, r1
 800c01e:	bb23      	cbnz	r3, 800c06a <_strtod_l+0xb9a>
 800c020:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c024:	9010      	str	r0, [sp, #64]	; 0x40
 800c026:	9311      	str	r3, [sp, #68]	; 0x44
 800c028:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c02c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c034:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c038:	1a9b      	subs	r3, r3, r2
 800c03a:	9309      	str	r3, [sp, #36]	; 0x24
 800c03c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c040:	eeb0 0a48 	vmov.f32	s0, s16
 800c044:	eef0 0a68 	vmov.f32	s1, s17
 800c048:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c04c:	f001 fe84 	bl	800dd58 <__ulp>
 800c050:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c054:	ec53 2b10 	vmov	r2, r3, d0
 800c058:	f7f4 face 	bl	80005f8 <__aeabi_dmul>
 800c05c:	ec53 2b18 	vmov	r2, r3, d8
 800c060:	f7f4 f914 	bl	800028c <__adddf3>
 800c064:	4682      	mov	sl, r0
 800c066:	468b      	mov	fp, r1
 800c068:	e78d      	b.n	800bf86 <_strtod_l+0xab6>
 800c06a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c06e:	e7db      	b.n	800c028 <_strtod_l+0xb58>
 800c070:	a311      	add	r3, pc, #68	; (adr r3, 800c0b8 <_strtod_l+0xbe8>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	f7f4 fd31 	bl	8000adc <__aeabi_dcmplt>
 800c07a:	e7b2      	b.n	800bfe2 <_strtod_l+0xb12>
 800c07c:	2300      	movs	r3, #0
 800c07e:	930a      	str	r3, [sp, #40]	; 0x28
 800c080:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c084:	6013      	str	r3, [r2, #0]
 800c086:	f7ff ba6b 	b.w	800b560 <_strtod_l+0x90>
 800c08a:	2a65      	cmp	r2, #101	; 0x65
 800c08c:	f43f ab5f 	beq.w	800b74e <_strtod_l+0x27e>
 800c090:	2a45      	cmp	r2, #69	; 0x45
 800c092:	f43f ab5c 	beq.w	800b74e <_strtod_l+0x27e>
 800c096:	2301      	movs	r3, #1
 800c098:	f7ff bb94 	b.w	800b7c4 <_strtod_l+0x2f4>
 800c09c:	f3af 8000 	nop.w
 800c0a0:	94a03595 	.word	0x94a03595
 800c0a4:	3fdfffff 	.word	0x3fdfffff
 800c0a8:	35afe535 	.word	0x35afe535
 800c0ac:	3fe00000 	.word	0x3fe00000
 800c0b0:	ffc00000 	.word	0xffc00000
 800c0b4:	41dfffff 	.word	0x41dfffff
 800c0b8:	94a03595 	.word	0x94a03595
 800c0bc:	3fcfffff 	.word	0x3fcfffff
 800c0c0:	3ff00000 	.word	0x3ff00000
 800c0c4:	7ff00000 	.word	0x7ff00000
 800c0c8:	7fe00000 	.word	0x7fe00000
 800c0cc:	7c9fffff 	.word	0x7c9fffff
 800c0d0:	3fe00000 	.word	0x3fe00000
 800c0d4:	bff00000 	.word	0xbff00000
 800c0d8:	7fefffff 	.word	0x7fefffff

0800c0dc <_strtod_r>:
 800c0dc:	4b01      	ldr	r3, [pc, #4]	; (800c0e4 <_strtod_r+0x8>)
 800c0de:	f7ff b9f7 	b.w	800b4d0 <_strtod_l>
 800c0e2:	bf00      	nop
 800c0e4:	20000164 	.word	0x20000164

0800c0e8 <_strtol_l.constprop.0>:
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ee:	d001      	beq.n	800c0f4 <_strtol_l.constprop.0+0xc>
 800c0f0:	2b24      	cmp	r3, #36	; 0x24
 800c0f2:	d906      	bls.n	800c102 <_strtol_l.constprop.0+0x1a>
 800c0f4:	f7fe f97c 	bl	800a3f0 <__errno>
 800c0f8:	2316      	movs	r3, #22
 800c0fa:	6003      	str	r3, [r0, #0]
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c102:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c1e8 <_strtol_l.constprop.0+0x100>
 800c106:	460d      	mov	r5, r1
 800c108:	462e      	mov	r6, r5
 800c10a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c10e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c112:	f017 0708 	ands.w	r7, r7, #8
 800c116:	d1f7      	bne.n	800c108 <_strtol_l.constprop.0+0x20>
 800c118:	2c2d      	cmp	r4, #45	; 0x2d
 800c11a:	d132      	bne.n	800c182 <_strtol_l.constprop.0+0x9a>
 800c11c:	782c      	ldrb	r4, [r5, #0]
 800c11e:	2701      	movs	r7, #1
 800c120:	1cb5      	adds	r5, r6, #2
 800c122:	2b00      	cmp	r3, #0
 800c124:	d05b      	beq.n	800c1de <_strtol_l.constprop.0+0xf6>
 800c126:	2b10      	cmp	r3, #16
 800c128:	d109      	bne.n	800c13e <_strtol_l.constprop.0+0x56>
 800c12a:	2c30      	cmp	r4, #48	; 0x30
 800c12c:	d107      	bne.n	800c13e <_strtol_l.constprop.0+0x56>
 800c12e:	782c      	ldrb	r4, [r5, #0]
 800c130:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c134:	2c58      	cmp	r4, #88	; 0x58
 800c136:	d14d      	bne.n	800c1d4 <_strtol_l.constprop.0+0xec>
 800c138:	786c      	ldrb	r4, [r5, #1]
 800c13a:	2310      	movs	r3, #16
 800c13c:	3502      	adds	r5, #2
 800c13e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c142:	f108 38ff 	add.w	r8, r8, #4294967295
 800c146:	f04f 0c00 	mov.w	ip, #0
 800c14a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c14e:	4666      	mov	r6, ip
 800c150:	fb03 8a19 	mls	sl, r3, r9, r8
 800c154:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c158:	f1be 0f09 	cmp.w	lr, #9
 800c15c:	d816      	bhi.n	800c18c <_strtol_l.constprop.0+0xa4>
 800c15e:	4674      	mov	r4, lr
 800c160:	42a3      	cmp	r3, r4
 800c162:	dd24      	ble.n	800c1ae <_strtol_l.constprop.0+0xc6>
 800c164:	f1bc 0f00 	cmp.w	ip, #0
 800c168:	db1e      	blt.n	800c1a8 <_strtol_l.constprop.0+0xc0>
 800c16a:	45b1      	cmp	r9, r6
 800c16c:	d31c      	bcc.n	800c1a8 <_strtol_l.constprop.0+0xc0>
 800c16e:	d101      	bne.n	800c174 <_strtol_l.constprop.0+0x8c>
 800c170:	45a2      	cmp	sl, r4
 800c172:	db19      	blt.n	800c1a8 <_strtol_l.constprop.0+0xc0>
 800c174:	fb06 4603 	mla	r6, r6, r3, r4
 800c178:	f04f 0c01 	mov.w	ip, #1
 800c17c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c180:	e7e8      	b.n	800c154 <_strtol_l.constprop.0+0x6c>
 800c182:	2c2b      	cmp	r4, #43	; 0x2b
 800c184:	bf04      	itt	eq
 800c186:	782c      	ldrbeq	r4, [r5, #0]
 800c188:	1cb5      	addeq	r5, r6, #2
 800c18a:	e7ca      	b.n	800c122 <_strtol_l.constprop.0+0x3a>
 800c18c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c190:	f1be 0f19 	cmp.w	lr, #25
 800c194:	d801      	bhi.n	800c19a <_strtol_l.constprop.0+0xb2>
 800c196:	3c37      	subs	r4, #55	; 0x37
 800c198:	e7e2      	b.n	800c160 <_strtol_l.constprop.0+0x78>
 800c19a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c19e:	f1be 0f19 	cmp.w	lr, #25
 800c1a2:	d804      	bhi.n	800c1ae <_strtol_l.constprop.0+0xc6>
 800c1a4:	3c57      	subs	r4, #87	; 0x57
 800c1a6:	e7db      	b.n	800c160 <_strtol_l.constprop.0+0x78>
 800c1a8:	f04f 3cff 	mov.w	ip, #4294967295
 800c1ac:	e7e6      	b.n	800c17c <_strtol_l.constprop.0+0x94>
 800c1ae:	f1bc 0f00 	cmp.w	ip, #0
 800c1b2:	da05      	bge.n	800c1c0 <_strtol_l.constprop.0+0xd8>
 800c1b4:	2322      	movs	r3, #34	; 0x22
 800c1b6:	6003      	str	r3, [r0, #0]
 800c1b8:	4646      	mov	r6, r8
 800c1ba:	b942      	cbnz	r2, 800c1ce <_strtol_l.constprop.0+0xe6>
 800c1bc:	4630      	mov	r0, r6
 800c1be:	e79e      	b.n	800c0fe <_strtol_l.constprop.0+0x16>
 800c1c0:	b107      	cbz	r7, 800c1c4 <_strtol_l.constprop.0+0xdc>
 800c1c2:	4276      	negs	r6, r6
 800c1c4:	2a00      	cmp	r2, #0
 800c1c6:	d0f9      	beq.n	800c1bc <_strtol_l.constprop.0+0xd4>
 800c1c8:	f1bc 0f00 	cmp.w	ip, #0
 800c1cc:	d000      	beq.n	800c1d0 <_strtol_l.constprop.0+0xe8>
 800c1ce:	1e69      	subs	r1, r5, #1
 800c1d0:	6011      	str	r1, [r2, #0]
 800c1d2:	e7f3      	b.n	800c1bc <_strtol_l.constprop.0+0xd4>
 800c1d4:	2430      	movs	r4, #48	; 0x30
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1b1      	bne.n	800c13e <_strtol_l.constprop.0+0x56>
 800c1da:	2308      	movs	r3, #8
 800c1dc:	e7af      	b.n	800c13e <_strtol_l.constprop.0+0x56>
 800c1de:	2c30      	cmp	r4, #48	; 0x30
 800c1e0:	d0a5      	beq.n	800c12e <_strtol_l.constprop.0+0x46>
 800c1e2:	230a      	movs	r3, #10
 800c1e4:	e7ab      	b.n	800c13e <_strtol_l.constprop.0+0x56>
 800c1e6:	bf00      	nop
 800c1e8:	0800fd19 	.word	0x0800fd19

0800c1ec <_strtol_r>:
 800c1ec:	f7ff bf7c 	b.w	800c0e8 <_strtol_l.constprop.0>

0800c1f0 <_write_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4d07      	ldr	r5, [pc, #28]	; (800c210 <_write_r+0x20>)
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	602a      	str	r2, [r5, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	f7f6 f96b 	bl	80024da <_write>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	d102      	bne.n	800c20e <_write_r+0x1e>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	b103      	cbz	r3, 800c20e <_write_r+0x1e>
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	bd38      	pop	{r3, r4, r5, pc}
 800c210:	20002e34 	.word	0x20002e34

0800c214 <_close_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4d06      	ldr	r5, [pc, #24]	; (800c230 <_close_r+0x1c>)
 800c218:	2300      	movs	r3, #0
 800c21a:	4604      	mov	r4, r0
 800c21c:	4608      	mov	r0, r1
 800c21e:	602b      	str	r3, [r5, #0]
 800c220:	f7f6 f977 	bl	8002512 <_close>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d102      	bne.n	800c22e <_close_r+0x1a>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	b103      	cbz	r3, 800c22e <_close_r+0x1a>
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	20002e34 	.word	0x20002e34

0800c234 <quorem>:
 800c234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c238:	6903      	ldr	r3, [r0, #16]
 800c23a:	690c      	ldr	r4, [r1, #16]
 800c23c:	42a3      	cmp	r3, r4
 800c23e:	4607      	mov	r7, r0
 800c240:	f2c0 8081 	blt.w	800c346 <quorem+0x112>
 800c244:	3c01      	subs	r4, #1
 800c246:	f101 0814 	add.w	r8, r1, #20
 800c24a:	f100 0514 	add.w	r5, r0, #20
 800c24e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c25c:	3301      	adds	r3, #1
 800c25e:	429a      	cmp	r2, r3
 800c260:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c268:	fbb2 f6f3 	udiv	r6, r2, r3
 800c26c:	d331      	bcc.n	800c2d2 <quorem+0x9e>
 800c26e:	f04f 0e00 	mov.w	lr, #0
 800c272:	4640      	mov	r0, r8
 800c274:	46ac      	mov	ip, r5
 800c276:	46f2      	mov	sl, lr
 800c278:	f850 2b04 	ldr.w	r2, [r0], #4
 800c27c:	b293      	uxth	r3, r2
 800c27e:	fb06 e303 	mla	r3, r6, r3, lr
 800c282:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c286:	b29b      	uxth	r3, r3
 800c288:	ebaa 0303 	sub.w	r3, sl, r3
 800c28c:	f8dc a000 	ldr.w	sl, [ip]
 800c290:	0c12      	lsrs	r2, r2, #16
 800c292:	fa13 f38a 	uxtah	r3, r3, sl
 800c296:	fb06 e202 	mla	r2, r6, r2, lr
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	9b00      	ldr	r3, [sp, #0]
 800c29e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2a2:	b292      	uxth	r2, r2
 800c2a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c2a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800c2b0:	4581      	cmp	r9, r0
 800c2b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2b6:	f84c 3b04 	str.w	r3, [ip], #4
 800c2ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2be:	d2db      	bcs.n	800c278 <quorem+0x44>
 800c2c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2c4:	b92b      	cbnz	r3, 800c2d2 <quorem+0x9e>
 800c2c6:	9b01      	ldr	r3, [sp, #4]
 800c2c8:	3b04      	subs	r3, #4
 800c2ca:	429d      	cmp	r5, r3
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	d32e      	bcc.n	800c32e <quorem+0xfa>
 800c2d0:	613c      	str	r4, [r7, #16]
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	f001 fc9a 	bl	800dc0c <__mcmp>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	db24      	blt.n	800c326 <quorem+0xf2>
 800c2dc:	3601      	adds	r6, #1
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f04f 0c00 	mov.w	ip, #0
 800c2e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2e8:	f8d0 e000 	ldr.w	lr, [r0]
 800c2ec:	b293      	uxth	r3, r2
 800c2ee:	ebac 0303 	sub.w	r3, ip, r3
 800c2f2:	0c12      	lsrs	r2, r2, #16
 800c2f4:	fa13 f38e 	uxtah	r3, r3, lr
 800c2f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c2fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c300:	b29b      	uxth	r3, r3
 800c302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c306:	45c1      	cmp	r9, r8
 800c308:	f840 3b04 	str.w	r3, [r0], #4
 800c30c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c310:	d2e8      	bcs.n	800c2e4 <quorem+0xb0>
 800c312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c31a:	b922      	cbnz	r2, 800c326 <quorem+0xf2>
 800c31c:	3b04      	subs	r3, #4
 800c31e:	429d      	cmp	r5, r3
 800c320:	461a      	mov	r2, r3
 800c322:	d30a      	bcc.n	800c33a <quorem+0x106>
 800c324:	613c      	str	r4, [r7, #16]
 800c326:	4630      	mov	r0, r6
 800c328:	b003      	add	sp, #12
 800c32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32e:	6812      	ldr	r2, [r2, #0]
 800c330:	3b04      	subs	r3, #4
 800c332:	2a00      	cmp	r2, #0
 800c334:	d1cc      	bne.n	800c2d0 <quorem+0x9c>
 800c336:	3c01      	subs	r4, #1
 800c338:	e7c7      	b.n	800c2ca <quorem+0x96>
 800c33a:	6812      	ldr	r2, [r2, #0]
 800c33c:	3b04      	subs	r3, #4
 800c33e:	2a00      	cmp	r2, #0
 800c340:	d1f0      	bne.n	800c324 <quorem+0xf0>
 800c342:	3c01      	subs	r4, #1
 800c344:	e7eb      	b.n	800c31e <quorem+0xea>
 800c346:	2000      	movs	r0, #0
 800c348:	e7ee      	b.n	800c328 <quorem+0xf4>
 800c34a:	0000      	movs	r0, r0
 800c34c:	0000      	movs	r0, r0
	...

0800c350 <_dtoa_r>:
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	ed2d 8b04 	vpush	{d8-d9}
 800c358:	ec57 6b10 	vmov	r6, r7, d0
 800c35c:	b093      	sub	sp, #76	; 0x4c
 800c35e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c364:	9106      	str	r1, [sp, #24]
 800c366:	ee10 aa10 	vmov	sl, s0
 800c36a:	4604      	mov	r4, r0
 800c36c:	9209      	str	r2, [sp, #36]	; 0x24
 800c36e:	930c      	str	r3, [sp, #48]	; 0x30
 800c370:	46bb      	mov	fp, r7
 800c372:	b975      	cbnz	r5, 800c392 <_dtoa_r+0x42>
 800c374:	2010      	movs	r0, #16
 800c376:	f7fe f865 	bl	800a444 <malloc>
 800c37a:	4602      	mov	r2, r0
 800c37c:	6260      	str	r0, [r4, #36]	; 0x24
 800c37e:	b920      	cbnz	r0, 800c38a <_dtoa_r+0x3a>
 800c380:	4ba7      	ldr	r3, [pc, #668]	; (800c620 <_dtoa_r+0x2d0>)
 800c382:	21ea      	movs	r1, #234	; 0xea
 800c384:	48a7      	ldr	r0, [pc, #668]	; (800c624 <_dtoa_r+0x2d4>)
 800c386:	f002 fbef 	bl	800eb68 <__assert_func>
 800c38a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c38e:	6005      	str	r5, [r0, #0]
 800c390:	60c5      	str	r5, [r0, #12]
 800c392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c394:	6819      	ldr	r1, [r3, #0]
 800c396:	b151      	cbz	r1, 800c3ae <_dtoa_r+0x5e>
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	604a      	str	r2, [r1, #4]
 800c39c:	2301      	movs	r3, #1
 800c39e:	4093      	lsls	r3, r2
 800c3a0:	608b      	str	r3, [r1, #8]
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f001 f9a6 	bl	800d6f4 <_Bfree>
 800c3a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	1e3b      	subs	r3, r7, #0
 800c3b0:	bfaa      	itet	ge
 800c3b2:	2300      	movge	r3, #0
 800c3b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c3b8:	f8c8 3000 	strge.w	r3, [r8]
 800c3bc:	4b9a      	ldr	r3, [pc, #616]	; (800c628 <_dtoa_r+0x2d8>)
 800c3be:	bfbc      	itt	lt
 800c3c0:	2201      	movlt	r2, #1
 800c3c2:	f8c8 2000 	strlt.w	r2, [r8]
 800c3c6:	ea33 030b 	bics.w	r3, r3, fp
 800c3ca:	d11b      	bne.n	800c404 <_dtoa_r+0xb4>
 800c3cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3d8:	4333      	orrs	r3, r6
 800c3da:	f000 8592 	beq.w	800cf02 <_dtoa_r+0xbb2>
 800c3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3e0:	b963      	cbnz	r3, 800c3fc <_dtoa_r+0xac>
 800c3e2:	4b92      	ldr	r3, [pc, #584]	; (800c62c <_dtoa_r+0x2dc>)
 800c3e4:	e022      	b.n	800c42c <_dtoa_r+0xdc>
 800c3e6:	4b92      	ldr	r3, [pc, #584]	; (800c630 <_dtoa_r+0x2e0>)
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3ee:	6013      	str	r3, [r2, #0]
 800c3f0:	9801      	ldr	r0, [sp, #4]
 800c3f2:	b013      	add	sp, #76	; 0x4c
 800c3f4:	ecbd 8b04 	vpop	{d8-d9}
 800c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fc:	4b8b      	ldr	r3, [pc, #556]	; (800c62c <_dtoa_r+0x2dc>)
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	3303      	adds	r3, #3
 800c402:	e7f3      	b.n	800c3ec <_dtoa_r+0x9c>
 800c404:	2200      	movs	r2, #0
 800c406:	2300      	movs	r3, #0
 800c408:	4650      	mov	r0, sl
 800c40a:	4659      	mov	r1, fp
 800c40c:	f7f4 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c410:	ec4b ab19 	vmov	d9, sl, fp
 800c414:	4680      	mov	r8, r0
 800c416:	b158      	cbz	r0, 800c430 <_dtoa_r+0xe0>
 800c418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c41a:	2301      	movs	r3, #1
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 856b 	beq.w	800cefc <_dtoa_r+0xbac>
 800c426:	4883      	ldr	r0, [pc, #524]	; (800c634 <_dtoa_r+0x2e4>)
 800c428:	6018      	str	r0, [r3, #0]
 800c42a:	1e43      	subs	r3, r0, #1
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	e7df      	b.n	800c3f0 <_dtoa_r+0xa0>
 800c430:	ec4b ab10 	vmov	d0, sl, fp
 800c434:	aa10      	add	r2, sp, #64	; 0x40
 800c436:	a911      	add	r1, sp, #68	; 0x44
 800c438:	4620      	mov	r0, r4
 800c43a:	f001 fd09 	bl	800de50 <__d2b>
 800c43e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c442:	ee08 0a10 	vmov	s16, r0
 800c446:	2d00      	cmp	r5, #0
 800c448:	f000 8084 	beq.w	800c554 <_dtoa_r+0x204>
 800c44c:	ee19 3a90 	vmov	r3, s19
 800c450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c458:	4656      	mov	r6, sl
 800c45a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c45e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c466:	4b74      	ldr	r3, [pc, #464]	; (800c638 <_dtoa_r+0x2e8>)
 800c468:	2200      	movs	r2, #0
 800c46a:	4630      	mov	r0, r6
 800c46c:	4639      	mov	r1, r7
 800c46e:	f7f3 ff0b 	bl	8000288 <__aeabi_dsub>
 800c472:	a365      	add	r3, pc, #404	; (adr r3, 800c608 <_dtoa_r+0x2b8>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f7f4 f8be 	bl	80005f8 <__aeabi_dmul>
 800c47c:	a364      	add	r3, pc, #400	; (adr r3, 800c610 <_dtoa_r+0x2c0>)
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f7f3 ff03 	bl	800028c <__adddf3>
 800c486:	4606      	mov	r6, r0
 800c488:	4628      	mov	r0, r5
 800c48a:	460f      	mov	r7, r1
 800c48c:	f7f4 f84a 	bl	8000524 <__aeabi_i2d>
 800c490:	a361      	add	r3, pc, #388	; (adr r3, 800c618 <_dtoa_r+0x2c8>)
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	f7f4 f8af 	bl	80005f8 <__aeabi_dmul>
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	4630      	mov	r0, r6
 800c4a0:	4639      	mov	r1, r7
 800c4a2:	f7f3 fef3 	bl	800028c <__adddf3>
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	460f      	mov	r7, r1
 800c4aa:	f7f4 fb55 	bl	8000b58 <__aeabi_d2iz>
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	9000      	str	r0, [sp, #0]
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f7f4 fb10 	bl	8000adc <__aeabi_dcmplt>
 800c4bc:	b150      	cbz	r0, 800c4d4 <_dtoa_r+0x184>
 800c4be:	9800      	ldr	r0, [sp, #0]
 800c4c0:	f7f4 f830 	bl	8000524 <__aeabi_i2d>
 800c4c4:	4632      	mov	r2, r6
 800c4c6:	463b      	mov	r3, r7
 800c4c8:	f7f4 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4cc:	b910      	cbnz	r0, 800c4d4 <_dtoa_r+0x184>
 800c4ce:	9b00      	ldr	r3, [sp, #0]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	9b00      	ldr	r3, [sp, #0]
 800c4d6:	2b16      	cmp	r3, #22
 800c4d8:	d85a      	bhi.n	800c590 <_dtoa_r+0x240>
 800c4da:	9a00      	ldr	r2, [sp, #0]
 800c4dc:	4b57      	ldr	r3, [pc, #348]	; (800c63c <_dtoa_r+0x2ec>)
 800c4de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	ec51 0b19 	vmov	r0, r1, d9
 800c4ea:	f7f4 faf7 	bl	8000adc <__aeabi_dcmplt>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d050      	beq.n	800c594 <_dtoa_r+0x244>
 800c4f2:	9b00      	ldr	r3, [sp, #0]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4fe:	1b5d      	subs	r5, r3, r5
 800c500:	1e6b      	subs	r3, r5, #1
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	bf45      	ittet	mi
 800c506:	f1c5 0301 	rsbmi	r3, r5, #1
 800c50a:	9304      	strmi	r3, [sp, #16]
 800c50c:	2300      	movpl	r3, #0
 800c50e:	2300      	movmi	r3, #0
 800c510:	bf4c      	ite	mi
 800c512:	9305      	strmi	r3, [sp, #20]
 800c514:	9304      	strpl	r3, [sp, #16]
 800c516:	9b00      	ldr	r3, [sp, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	db3d      	blt.n	800c598 <_dtoa_r+0x248>
 800c51c:	9b05      	ldr	r3, [sp, #20]
 800c51e:	9a00      	ldr	r2, [sp, #0]
 800c520:	920a      	str	r2, [sp, #40]	; 0x28
 800c522:	4413      	add	r3, r2
 800c524:	9305      	str	r3, [sp, #20]
 800c526:	2300      	movs	r3, #0
 800c528:	9307      	str	r3, [sp, #28]
 800c52a:	9b06      	ldr	r3, [sp, #24]
 800c52c:	2b09      	cmp	r3, #9
 800c52e:	f200 8089 	bhi.w	800c644 <_dtoa_r+0x2f4>
 800c532:	2b05      	cmp	r3, #5
 800c534:	bfc4      	itt	gt
 800c536:	3b04      	subgt	r3, #4
 800c538:	9306      	strgt	r3, [sp, #24]
 800c53a:	9b06      	ldr	r3, [sp, #24]
 800c53c:	f1a3 0302 	sub.w	r3, r3, #2
 800c540:	bfcc      	ite	gt
 800c542:	2500      	movgt	r5, #0
 800c544:	2501      	movle	r5, #1
 800c546:	2b03      	cmp	r3, #3
 800c548:	f200 8087 	bhi.w	800c65a <_dtoa_r+0x30a>
 800c54c:	e8df f003 	tbb	[pc, r3]
 800c550:	59383a2d 	.word	0x59383a2d
 800c554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c558:	441d      	add	r5, r3
 800c55a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c55e:	2b20      	cmp	r3, #32
 800c560:	bfc1      	itttt	gt
 800c562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c56a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c56e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c572:	bfda      	itte	le
 800c574:	f1c3 0320 	rsble	r3, r3, #32
 800c578:	fa06 f003 	lslle.w	r0, r6, r3
 800c57c:	4318      	orrgt	r0, r3
 800c57e:	f7f3 ffc1 	bl	8000504 <__aeabi_ui2d>
 800c582:	2301      	movs	r3, #1
 800c584:	4606      	mov	r6, r0
 800c586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c58a:	3d01      	subs	r5, #1
 800c58c:	930e      	str	r3, [sp, #56]	; 0x38
 800c58e:	e76a      	b.n	800c466 <_dtoa_r+0x116>
 800c590:	2301      	movs	r3, #1
 800c592:	e7b2      	b.n	800c4fa <_dtoa_r+0x1aa>
 800c594:	900b      	str	r0, [sp, #44]	; 0x2c
 800c596:	e7b1      	b.n	800c4fc <_dtoa_r+0x1ac>
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	9a00      	ldr	r2, [sp, #0]
 800c59c:	1a9b      	subs	r3, r3, r2
 800c59e:	9304      	str	r3, [sp, #16]
 800c5a0:	4253      	negs	r3, r2
 800c5a2:	9307      	str	r3, [sp, #28]
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c5a8:	e7bf      	b.n	800c52a <_dtoa_r+0x1da>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	9308      	str	r3, [sp, #32]
 800c5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dc55      	bgt.n	800c660 <_dtoa_r+0x310>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c5be:	e00c      	b.n	800c5da <_dtoa_r+0x28a>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e7f3      	b.n	800c5ac <_dtoa_r+0x25c>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5c8:	9308      	str	r3, [sp, #32]
 800c5ca:	9b00      	ldr	r3, [sp, #0]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	9302      	str	r3, [sp, #8]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	9303      	str	r3, [sp, #12]
 800c5d6:	bfb8      	it	lt
 800c5d8:	2301      	movlt	r3, #1
 800c5da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c5dc:	2200      	movs	r2, #0
 800c5de:	6042      	str	r2, [r0, #4]
 800c5e0:	2204      	movs	r2, #4
 800c5e2:	f102 0614 	add.w	r6, r2, #20
 800c5e6:	429e      	cmp	r6, r3
 800c5e8:	6841      	ldr	r1, [r0, #4]
 800c5ea:	d93d      	bls.n	800c668 <_dtoa_r+0x318>
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f001 f841 	bl	800d674 <_Balloc>
 800c5f2:	9001      	str	r0, [sp, #4]
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	d13b      	bne.n	800c670 <_dtoa_r+0x320>
 800c5f8:	4b11      	ldr	r3, [pc, #68]	; (800c640 <_dtoa_r+0x2f0>)
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c600:	e6c0      	b.n	800c384 <_dtoa_r+0x34>
 800c602:	2301      	movs	r3, #1
 800c604:	e7df      	b.n	800c5c6 <_dtoa_r+0x276>
 800c606:	bf00      	nop
 800c608:	636f4361 	.word	0x636f4361
 800c60c:	3fd287a7 	.word	0x3fd287a7
 800c610:	8b60c8b3 	.word	0x8b60c8b3
 800c614:	3fc68a28 	.word	0x3fc68a28
 800c618:	509f79fb 	.word	0x509f79fb
 800c61c:	3fd34413 	.word	0x3fd34413
 800c620:	0800fe26 	.word	0x0800fe26
 800c624:	0800fe3d 	.word	0x0800fe3d
 800c628:	7ff00000 	.word	0x7ff00000
 800c62c:	0800fe22 	.word	0x0800fe22
 800c630:	0800fe19 	.word	0x0800fe19
 800c634:	08010092 	.word	0x08010092
 800c638:	3ff80000 	.word	0x3ff80000
 800c63c:	0800ffa8 	.word	0x0800ffa8
 800c640:	0800fe98 	.word	0x0800fe98
 800c644:	2501      	movs	r5, #1
 800c646:	2300      	movs	r3, #0
 800c648:	9306      	str	r3, [sp, #24]
 800c64a:	9508      	str	r5, [sp, #32]
 800c64c:	f04f 33ff 	mov.w	r3, #4294967295
 800c650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c654:	2200      	movs	r2, #0
 800c656:	2312      	movs	r3, #18
 800c658:	e7b0      	b.n	800c5bc <_dtoa_r+0x26c>
 800c65a:	2301      	movs	r3, #1
 800c65c:	9308      	str	r3, [sp, #32]
 800c65e:	e7f5      	b.n	800c64c <_dtoa_r+0x2fc>
 800c660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c666:	e7b8      	b.n	800c5da <_dtoa_r+0x28a>
 800c668:	3101      	adds	r1, #1
 800c66a:	6041      	str	r1, [r0, #4]
 800c66c:	0052      	lsls	r2, r2, #1
 800c66e:	e7b8      	b.n	800c5e2 <_dtoa_r+0x292>
 800c670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c672:	9a01      	ldr	r2, [sp, #4]
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	9b03      	ldr	r3, [sp, #12]
 800c678:	2b0e      	cmp	r3, #14
 800c67a:	f200 809d 	bhi.w	800c7b8 <_dtoa_r+0x468>
 800c67e:	2d00      	cmp	r5, #0
 800c680:	f000 809a 	beq.w	800c7b8 <_dtoa_r+0x468>
 800c684:	9b00      	ldr	r3, [sp, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	dd32      	ble.n	800c6f0 <_dtoa_r+0x3a0>
 800c68a:	4ab7      	ldr	r2, [pc, #732]	; (800c968 <_dtoa_r+0x618>)
 800c68c:	f003 030f 	and.w	r3, r3, #15
 800c690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c694:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c698:	9b00      	ldr	r3, [sp, #0]
 800c69a:	05d8      	lsls	r0, r3, #23
 800c69c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c6a0:	d516      	bpl.n	800c6d0 <_dtoa_r+0x380>
 800c6a2:	4bb2      	ldr	r3, [pc, #712]	; (800c96c <_dtoa_r+0x61c>)
 800c6a4:	ec51 0b19 	vmov	r0, r1, d9
 800c6a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6ac:	f7f4 f8ce 	bl	800084c <__aeabi_ddiv>
 800c6b0:	f007 070f 	and.w	r7, r7, #15
 800c6b4:	4682      	mov	sl, r0
 800c6b6:	468b      	mov	fp, r1
 800c6b8:	2503      	movs	r5, #3
 800c6ba:	4eac      	ldr	r6, [pc, #688]	; (800c96c <_dtoa_r+0x61c>)
 800c6bc:	b957      	cbnz	r7, 800c6d4 <_dtoa_r+0x384>
 800c6be:	4642      	mov	r2, r8
 800c6c0:	464b      	mov	r3, r9
 800c6c2:	4650      	mov	r0, sl
 800c6c4:	4659      	mov	r1, fp
 800c6c6:	f7f4 f8c1 	bl	800084c <__aeabi_ddiv>
 800c6ca:	4682      	mov	sl, r0
 800c6cc:	468b      	mov	fp, r1
 800c6ce:	e028      	b.n	800c722 <_dtoa_r+0x3d2>
 800c6d0:	2502      	movs	r5, #2
 800c6d2:	e7f2      	b.n	800c6ba <_dtoa_r+0x36a>
 800c6d4:	07f9      	lsls	r1, r7, #31
 800c6d6:	d508      	bpl.n	800c6ea <_dtoa_r+0x39a>
 800c6d8:	4640      	mov	r0, r8
 800c6da:	4649      	mov	r1, r9
 800c6dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6e0:	f7f3 ff8a 	bl	80005f8 <__aeabi_dmul>
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	4680      	mov	r8, r0
 800c6e8:	4689      	mov	r9, r1
 800c6ea:	107f      	asrs	r7, r7, #1
 800c6ec:	3608      	adds	r6, #8
 800c6ee:	e7e5      	b.n	800c6bc <_dtoa_r+0x36c>
 800c6f0:	f000 809b 	beq.w	800c82a <_dtoa_r+0x4da>
 800c6f4:	9b00      	ldr	r3, [sp, #0]
 800c6f6:	4f9d      	ldr	r7, [pc, #628]	; (800c96c <_dtoa_r+0x61c>)
 800c6f8:	425e      	negs	r6, r3
 800c6fa:	4b9b      	ldr	r3, [pc, #620]	; (800c968 <_dtoa_r+0x618>)
 800c6fc:	f006 020f 	and.w	r2, r6, #15
 800c700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	ec51 0b19 	vmov	r0, r1, d9
 800c70c:	f7f3 ff74 	bl	80005f8 <__aeabi_dmul>
 800c710:	1136      	asrs	r6, r6, #4
 800c712:	4682      	mov	sl, r0
 800c714:	468b      	mov	fp, r1
 800c716:	2300      	movs	r3, #0
 800c718:	2502      	movs	r5, #2
 800c71a:	2e00      	cmp	r6, #0
 800c71c:	d17a      	bne.n	800c814 <_dtoa_r+0x4c4>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1d3      	bne.n	800c6ca <_dtoa_r+0x37a>
 800c722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c724:	2b00      	cmp	r3, #0
 800c726:	f000 8082 	beq.w	800c82e <_dtoa_r+0x4de>
 800c72a:	4b91      	ldr	r3, [pc, #580]	; (800c970 <_dtoa_r+0x620>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	4650      	mov	r0, sl
 800c730:	4659      	mov	r1, fp
 800c732:	f7f4 f9d3 	bl	8000adc <__aeabi_dcmplt>
 800c736:	2800      	cmp	r0, #0
 800c738:	d079      	beq.n	800c82e <_dtoa_r+0x4de>
 800c73a:	9b03      	ldr	r3, [sp, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d076      	beq.n	800c82e <_dtoa_r+0x4de>
 800c740:	9b02      	ldr	r3, [sp, #8]
 800c742:	2b00      	cmp	r3, #0
 800c744:	dd36      	ble.n	800c7b4 <_dtoa_r+0x464>
 800c746:	9b00      	ldr	r3, [sp, #0]
 800c748:	4650      	mov	r0, sl
 800c74a:	4659      	mov	r1, fp
 800c74c:	1e5f      	subs	r7, r3, #1
 800c74e:	2200      	movs	r2, #0
 800c750:	4b88      	ldr	r3, [pc, #544]	; (800c974 <_dtoa_r+0x624>)
 800c752:	f7f3 ff51 	bl	80005f8 <__aeabi_dmul>
 800c756:	9e02      	ldr	r6, [sp, #8]
 800c758:	4682      	mov	sl, r0
 800c75a:	468b      	mov	fp, r1
 800c75c:	3501      	adds	r5, #1
 800c75e:	4628      	mov	r0, r5
 800c760:	f7f3 fee0 	bl	8000524 <__aeabi_i2d>
 800c764:	4652      	mov	r2, sl
 800c766:	465b      	mov	r3, fp
 800c768:	f7f3 ff46 	bl	80005f8 <__aeabi_dmul>
 800c76c:	4b82      	ldr	r3, [pc, #520]	; (800c978 <_dtoa_r+0x628>)
 800c76e:	2200      	movs	r2, #0
 800c770:	f7f3 fd8c 	bl	800028c <__adddf3>
 800c774:	46d0      	mov	r8, sl
 800c776:	46d9      	mov	r9, fp
 800c778:	4682      	mov	sl, r0
 800c77a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c77e:	2e00      	cmp	r6, #0
 800c780:	d158      	bne.n	800c834 <_dtoa_r+0x4e4>
 800c782:	4b7e      	ldr	r3, [pc, #504]	; (800c97c <_dtoa_r+0x62c>)
 800c784:	2200      	movs	r2, #0
 800c786:	4640      	mov	r0, r8
 800c788:	4649      	mov	r1, r9
 800c78a:	f7f3 fd7d 	bl	8000288 <__aeabi_dsub>
 800c78e:	4652      	mov	r2, sl
 800c790:	465b      	mov	r3, fp
 800c792:	4680      	mov	r8, r0
 800c794:	4689      	mov	r9, r1
 800c796:	f7f4 f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	f040 8295 	bne.w	800ccca <_dtoa_r+0x97a>
 800c7a0:	4652      	mov	r2, sl
 800c7a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	f7f4 f997 	bl	8000adc <__aeabi_dcmplt>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	f040 8289 	bne.w	800ccc6 <_dtoa_r+0x976>
 800c7b4:	ec5b ab19 	vmov	sl, fp, d9
 800c7b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f2c0 8148 	blt.w	800ca50 <_dtoa_r+0x700>
 800c7c0:	9a00      	ldr	r2, [sp, #0]
 800c7c2:	2a0e      	cmp	r2, #14
 800c7c4:	f300 8144 	bgt.w	800ca50 <_dtoa_r+0x700>
 800c7c8:	4b67      	ldr	r3, [pc, #412]	; (800c968 <_dtoa_r+0x618>)
 800c7ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f280 80d5 	bge.w	800c984 <_dtoa_r+0x634>
 800c7da:	9b03      	ldr	r3, [sp, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f300 80d1 	bgt.w	800c984 <_dtoa_r+0x634>
 800c7e2:	f040 826f 	bne.w	800ccc4 <_dtoa_r+0x974>
 800c7e6:	4b65      	ldr	r3, [pc, #404]	; (800c97c <_dtoa_r+0x62c>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	4649      	mov	r1, r9
 800c7ee:	f7f3 ff03 	bl	80005f8 <__aeabi_dmul>
 800c7f2:	4652      	mov	r2, sl
 800c7f4:	465b      	mov	r3, fp
 800c7f6:	f7f4 f985 	bl	8000b04 <__aeabi_dcmpge>
 800c7fa:	9e03      	ldr	r6, [sp, #12]
 800c7fc:	4637      	mov	r7, r6
 800c7fe:	2800      	cmp	r0, #0
 800c800:	f040 8245 	bne.w	800cc8e <_dtoa_r+0x93e>
 800c804:	9d01      	ldr	r5, [sp, #4]
 800c806:	2331      	movs	r3, #49	; 0x31
 800c808:	f805 3b01 	strb.w	r3, [r5], #1
 800c80c:	9b00      	ldr	r3, [sp, #0]
 800c80e:	3301      	adds	r3, #1
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	e240      	b.n	800cc96 <_dtoa_r+0x946>
 800c814:	07f2      	lsls	r2, r6, #31
 800c816:	d505      	bpl.n	800c824 <_dtoa_r+0x4d4>
 800c818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c81c:	f7f3 feec 	bl	80005f8 <__aeabi_dmul>
 800c820:	3501      	adds	r5, #1
 800c822:	2301      	movs	r3, #1
 800c824:	1076      	asrs	r6, r6, #1
 800c826:	3708      	adds	r7, #8
 800c828:	e777      	b.n	800c71a <_dtoa_r+0x3ca>
 800c82a:	2502      	movs	r5, #2
 800c82c:	e779      	b.n	800c722 <_dtoa_r+0x3d2>
 800c82e:	9f00      	ldr	r7, [sp, #0]
 800c830:	9e03      	ldr	r6, [sp, #12]
 800c832:	e794      	b.n	800c75e <_dtoa_r+0x40e>
 800c834:	9901      	ldr	r1, [sp, #4]
 800c836:	4b4c      	ldr	r3, [pc, #304]	; (800c968 <_dtoa_r+0x618>)
 800c838:	4431      	add	r1, r6
 800c83a:	910d      	str	r1, [sp, #52]	; 0x34
 800c83c:	9908      	ldr	r1, [sp, #32]
 800c83e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c846:	2900      	cmp	r1, #0
 800c848:	d043      	beq.n	800c8d2 <_dtoa_r+0x582>
 800c84a:	494d      	ldr	r1, [pc, #308]	; (800c980 <_dtoa_r+0x630>)
 800c84c:	2000      	movs	r0, #0
 800c84e:	f7f3 fffd 	bl	800084c <__aeabi_ddiv>
 800c852:	4652      	mov	r2, sl
 800c854:	465b      	mov	r3, fp
 800c856:	f7f3 fd17 	bl	8000288 <__aeabi_dsub>
 800c85a:	9d01      	ldr	r5, [sp, #4]
 800c85c:	4682      	mov	sl, r0
 800c85e:	468b      	mov	fp, r1
 800c860:	4649      	mov	r1, r9
 800c862:	4640      	mov	r0, r8
 800c864:	f7f4 f978 	bl	8000b58 <__aeabi_d2iz>
 800c868:	4606      	mov	r6, r0
 800c86a:	f7f3 fe5b 	bl	8000524 <__aeabi_i2d>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4640      	mov	r0, r8
 800c874:	4649      	mov	r1, r9
 800c876:	f7f3 fd07 	bl	8000288 <__aeabi_dsub>
 800c87a:	3630      	adds	r6, #48	; 0x30
 800c87c:	f805 6b01 	strb.w	r6, [r5], #1
 800c880:	4652      	mov	r2, sl
 800c882:	465b      	mov	r3, fp
 800c884:	4680      	mov	r8, r0
 800c886:	4689      	mov	r9, r1
 800c888:	f7f4 f928 	bl	8000adc <__aeabi_dcmplt>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d163      	bne.n	800c958 <_dtoa_r+0x608>
 800c890:	4642      	mov	r2, r8
 800c892:	464b      	mov	r3, r9
 800c894:	4936      	ldr	r1, [pc, #216]	; (800c970 <_dtoa_r+0x620>)
 800c896:	2000      	movs	r0, #0
 800c898:	f7f3 fcf6 	bl	8000288 <__aeabi_dsub>
 800c89c:	4652      	mov	r2, sl
 800c89e:	465b      	mov	r3, fp
 800c8a0:	f7f4 f91c 	bl	8000adc <__aeabi_dcmplt>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	f040 80b5 	bne.w	800ca14 <_dtoa_r+0x6c4>
 800c8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ac:	429d      	cmp	r5, r3
 800c8ae:	d081      	beq.n	800c7b4 <_dtoa_r+0x464>
 800c8b0:	4b30      	ldr	r3, [pc, #192]	; (800c974 <_dtoa_r+0x624>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	4650      	mov	r0, sl
 800c8b6:	4659      	mov	r1, fp
 800c8b8:	f7f3 fe9e 	bl	80005f8 <__aeabi_dmul>
 800c8bc:	4b2d      	ldr	r3, [pc, #180]	; (800c974 <_dtoa_r+0x624>)
 800c8be:	4682      	mov	sl, r0
 800c8c0:	468b      	mov	fp, r1
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f7f3 fe96 	bl	80005f8 <__aeabi_dmul>
 800c8cc:	4680      	mov	r8, r0
 800c8ce:	4689      	mov	r9, r1
 800c8d0:	e7c6      	b.n	800c860 <_dtoa_r+0x510>
 800c8d2:	4650      	mov	r0, sl
 800c8d4:	4659      	mov	r1, fp
 800c8d6:	f7f3 fe8f 	bl	80005f8 <__aeabi_dmul>
 800c8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8dc:	9d01      	ldr	r5, [sp, #4]
 800c8de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8e0:	4682      	mov	sl, r0
 800c8e2:	468b      	mov	fp, r1
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	4640      	mov	r0, r8
 800c8e8:	f7f4 f936 	bl	8000b58 <__aeabi_d2iz>
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	f7f3 fe19 	bl	8000524 <__aeabi_i2d>
 800c8f2:	3630      	adds	r6, #48	; 0x30
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	f7f3 fcc4 	bl	8000288 <__aeabi_dsub>
 800c900:	f805 6b01 	strb.w	r6, [r5], #1
 800c904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c906:	429d      	cmp	r5, r3
 800c908:	4680      	mov	r8, r0
 800c90a:	4689      	mov	r9, r1
 800c90c:	f04f 0200 	mov.w	r2, #0
 800c910:	d124      	bne.n	800c95c <_dtoa_r+0x60c>
 800c912:	4b1b      	ldr	r3, [pc, #108]	; (800c980 <_dtoa_r+0x630>)
 800c914:	4650      	mov	r0, sl
 800c916:	4659      	mov	r1, fp
 800c918:	f7f3 fcb8 	bl	800028c <__adddf3>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4640      	mov	r0, r8
 800c922:	4649      	mov	r1, r9
 800c924:	f7f4 f8f8 	bl	8000b18 <__aeabi_dcmpgt>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d173      	bne.n	800ca14 <_dtoa_r+0x6c4>
 800c92c:	4652      	mov	r2, sl
 800c92e:	465b      	mov	r3, fp
 800c930:	4913      	ldr	r1, [pc, #76]	; (800c980 <_dtoa_r+0x630>)
 800c932:	2000      	movs	r0, #0
 800c934:	f7f3 fca8 	bl	8000288 <__aeabi_dsub>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4640      	mov	r0, r8
 800c93e:	4649      	mov	r1, r9
 800c940:	f7f4 f8cc 	bl	8000adc <__aeabi_dcmplt>
 800c944:	2800      	cmp	r0, #0
 800c946:	f43f af35 	beq.w	800c7b4 <_dtoa_r+0x464>
 800c94a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c94c:	1e6b      	subs	r3, r5, #1
 800c94e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c954:	2b30      	cmp	r3, #48	; 0x30
 800c956:	d0f8      	beq.n	800c94a <_dtoa_r+0x5fa>
 800c958:	9700      	str	r7, [sp, #0]
 800c95a:	e049      	b.n	800c9f0 <_dtoa_r+0x6a0>
 800c95c:	4b05      	ldr	r3, [pc, #20]	; (800c974 <_dtoa_r+0x624>)
 800c95e:	f7f3 fe4b 	bl	80005f8 <__aeabi_dmul>
 800c962:	4680      	mov	r8, r0
 800c964:	4689      	mov	r9, r1
 800c966:	e7bd      	b.n	800c8e4 <_dtoa_r+0x594>
 800c968:	0800ffa8 	.word	0x0800ffa8
 800c96c:	0800ff80 	.word	0x0800ff80
 800c970:	3ff00000 	.word	0x3ff00000
 800c974:	40240000 	.word	0x40240000
 800c978:	401c0000 	.word	0x401c0000
 800c97c:	40140000 	.word	0x40140000
 800c980:	3fe00000 	.word	0x3fe00000
 800c984:	9d01      	ldr	r5, [sp, #4]
 800c986:	4656      	mov	r6, sl
 800c988:	465f      	mov	r7, fp
 800c98a:	4642      	mov	r2, r8
 800c98c:	464b      	mov	r3, r9
 800c98e:	4630      	mov	r0, r6
 800c990:	4639      	mov	r1, r7
 800c992:	f7f3 ff5b 	bl	800084c <__aeabi_ddiv>
 800c996:	f7f4 f8df 	bl	8000b58 <__aeabi_d2iz>
 800c99a:	4682      	mov	sl, r0
 800c99c:	f7f3 fdc2 	bl	8000524 <__aeabi_i2d>
 800c9a0:	4642      	mov	r2, r8
 800c9a2:	464b      	mov	r3, r9
 800c9a4:	f7f3 fe28 	bl	80005f8 <__aeabi_dmul>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c9b4:	f7f3 fc68 	bl	8000288 <__aeabi_dsub>
 800c9b8:	f805 6b01 	strb.w	r6, [r5], #1
 800c9bc:	9e01      	ldr	r6, [sp, #4]
 800c9be:	9f03      	ldr	r7, [sp, #12]
 800c9c0:	1bae      	subs	r6, r5, r6
 800c9c2:	42b7      	cmp	r7, r6
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	d135      	bne.n	800ca36 <_dtoa_r+0x6e6>
 800c9ca:	f7f3 fc5f 	bl	800028c <__adddf3>
 800c9ce:	4642      	mov	r2, r8
 800c9d0:	464b      	mov	r3, r9
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	460f      	mov	r7, r1
 800c9d6:	f7f4 f89f 	bl	8000b18 <__aeabi_dcmpgt>
 800c9da:	b9d0      	cbnz	r0, 800ca12 <_dtoa_r+0x6c2>
 800c9dc:	4642      	mov	r2, r8
 800c9de:	464b      	mov	r3, r9
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	4639      	mov	r1, r7
 800c9e4:	f7f4 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9e8:	b110      	cbz	r0, 800c9f0 <_dtoa_r+0x6a0>
 800c9ea:	f01a 0f01 	tst.w	sl, #1
 800c9ee:	d110      	bne.n	800ca12 <_dtoa_r+0x6c2>
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	ee18 1a10 	vmov	r1, s16
 800c9f6:	f000 fe7d 	bl	800d6f4 <_Bfree>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	9800      	ldr	r0, [sp, #0]
 800c9fe:	702b      	strb	r3, [r5, #0]
 800ca00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca02:	3001      	adds	r0, #1
 800ca04:	6018      	str	r0, [r3, #0]
 800ca06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f43f acf1 	beq.w	800c3f0 <_dtoa_r+0xa0>
 800ca0e:	601d      	str	r5, [r3, #0]
 800ca10:	e4ee      	b.n	800c3f0 <_dtoa_r+0xa0>
 800ca12:	9f00      	ldr	r7, [sp, #0]
 800ca14:	462b      	mov	r3, r5
 800ca16:	461d      	mov	r5, r3
 800ca18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca1c:	2a39      	cmp	r2, #57	; 0x39
 800ca1e:	d106      	bne.n	800ca2e <_dtoa_r+0x6de>
 800ca20:	9a01      	ldr	r2, [sp, #4]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d1f7      	bne.n	800ca16 <_dtoa_r+0x6c6>
 800ca26:	9901      	ldr	r1, [sp, #4]
 800ca28:	2230      	movs	r2, #48	; 0x30
 800ca2a:	3701      	adds	r7, #1
 800ca2c:	700a      	strb	r2, [r1, #0]
 800ca2e:	781a      	ldrb	r2, [r3, #0]
 800ca30:	3201      	adds	r2, #1
 800ca32:	701a      	strb	r2, [r3, #0]
 800ca34:	e790      	b.n	800c958 <_dtoa_r+0x608>
 800ca36:	4ba6      	ldr	r3, [pc, #664]	; (800ccd0 <_dtoa_r+0x980>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f7f3 fddd 	bl	80005f8 <__aeabi_dmul>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	2300      	movs	r3, #0
 800ca42:	4606      	mov	r6, r0
 800ca44:	460f      	mov	r7, r1
 800ca46:	f7f4 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d09d      	beq.n	800c98a <_dtoa_r+0x63a>
 800ca4e:	e7cf      	b.n	800c9f0 <_dtoa_r+0x6a0>
 800ca50:	9a08      	ldr	r2, [sp, #32]
 800ca52:	2a00      	cmp	r2, #0
 800ca54:	f000 80d7 	beq.w	800cc06 <_dtoa_r+0x8b6>
 800ca58:	9a06      	ldr	r2, [sp, #24]
 800ca5a:	2a01      	cmp	r2, #1
 800ca5c:	f300 80ba 	bgt.w	800cbd4 <_dtoa_r+0x884>
 800ca60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca62:	2a00      	cmp	r2, #0
 800ca64:	f000 80b2 	beq.w	800cbcc <_dtoa_r+0x87c>
 800ca68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca6c:	9e07      	ldr	r6, [sp, #28]
 800ca6e:	9d04      	ldr	r5, [sp, #16]
 800ca70:	9a04      	ldr	r2, [sp, #16]
 800ca72:	441a      	add	r2, r3
 800ca74:	9204      	str	r2, [sp, #16]
 800ca76:	9a05      	ldr	r2, [sp, #20]
 800ca78:	2101      	movs	r1, #1
 800ca7a:	441a      	add	r2, r3
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	9205      	str	r2, [sp, #20]
 800ca80:	f000 ff3a 	bl	800d8f8 <__i2b>
 800ca84:	4607      	mov	r7, r0
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	dd0c      	ble.n	800caa4 <_dtoa_r+0x754>
 800ca8a:	9b05      	ldr	r3, [sp, #20]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dd09      	ble.n	800caa4 <_dtoa_r+0x754>
 800ca90:	42ab      	cmp	r3, r5
 800ca92:	9a04      	ldr	r2, [sp, #16]
 800ca94:	bfa8      	it	ge
 800ca96:	462b      	movge	r3, r5
 800ca98:	1ad2      	subs	r2, r2, r3
 800ca9a:	9204      	str	r2, [sp, #16]
 800ca9c:	9a05      	ldr	r2, [sp, #20]
 800ca9e:	1aed      	subs	r5, r5, r3
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	9305      	str	r3, [sp, #20]
 800caa4:	9b07      	ldr	r3, [sp, #28]
 800caa6:	b31b      	cbz	r3, 800caf0 <_dtoa_r+0x7a0>
 800caa8:	9b08      	ldr	r3, [sp, #32]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f000 80af 	beq.w	800cc0e <_dtoa_r+0x8be>
 800cab0:	2e00      	cmp	r6, #0
 800cab2:	dd13      	ble.n	800cadc <_dtoa_r+0x78c>
 800cab4:	4639      	mov	r1, r7
 800cab6:	4632      	mov	r2, r6
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 ffdd 	bl	800da78 <__pow5mult>
 800cabe:	ee18 2a10 	vmov	r2, s16
 800cac2:	4601      	mov	r1, r0
 800cac4:	4607      	mov	r7, r0
 800cac6:	4620      	mov	r0, r4
 800cac8:	f000 ff2c 	bl	800d924 <__multiply>
 800cacc:	ee18 1a10 	vmov	r1, s16
 800cad0:	4680      	mov	r8, r0
 800cad2:	4620      	mov	r0, r4
 800cad4:	f000 fe0e 	bl	800d6f4 <_Bfree>
 800cad8:	ee08 8a10 	vmov	s16, r8
 800cadc:	9b07      	ldr	r3, [sp, #28]
 800cade:	1b9a      	subs	r2, r3, r6
 800cae0:	d006      	beq.n	800caf0 <_dtoa_r+0x7a0>
 800cae2:	ee18 1a10 	vmov	r1, s16
 800cae6:	4620      	mov	r0, r4
 800cae8:	f000 ffc6 	bl	800da78 <__pow5mult>
 800caec:	ee08 0a10 	vmov	s16, r0
 800caf0:	2101      	movs	r1, #1
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 ff00 	bl	800d8f8 <__i2b>
 800caf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	4606      	mov	r6, r0
 800cafe:	f340 8088 	ble.w	800cc12 <_dtoa_r+0x8c2>
 800cb02:	461a      	mov	r2, r3
 800cb04:	4601      	mov	r1, r0
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 ffb6 	bl	800da78 <__pow5mult>
 800cb0c:	9b06      	ldr	r3, [sp, #24]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	4606      	mov	r6, r0
 800cb12:	f340 8081 	ble.w	800cc18 <_dtoa_r+0x8c8>
 800cb16:	f04f 0800 	mov.w	r8, #0
 800cb1a:	6933      	ldr	r3, [r6, #16]
 800cb1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb20:	6918      	ldr	r0, [r3, #16]
 800cb22:	f000 fe99 	bl	800d858 <__hi0bits>
 800cb26:	f1c0 0020 	rsb	r0, r0, #32
 800cb2a:	9b05      	ldr	r3, [sp, #20]
 800cb2c:	4418      	add	r0, r3
 800cb2e:	f010 001f 	ands.w	r0, r0, #31
 800cb32:	f000 8092 	beq.w	800cc5a <_dtoa_r+0x90a>
 800cb36:	f1c0 0320 	rsb	r3, r0, #32
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	f340 808a 	ble.w	800cc54 <_dtoa_r+0x904>
 800cb40:	f1c0 001c 	rsb	r0, r0, #28
 800cb44:	9b04      	ldr	r3, [sp, #16]
 800cb46:	4403      	add	r3, r0
 800cb48:	9304      	str	r3, [sp, #16]
 800cb4a:	9b05      	ldr	r3, [sp, #20]
 800cb4c:	4403      	add	r3, r0
 800cb4e:	4405      	add	r5, r0
 800cb50:	9305      	str	r3, [sp, #20]
 800cb52:	9b04      	ldr	r3, [sp, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	dd07      	ble.n	800cb68 <_dtoa_r+0x818>
 800cb58:	ee18 1a10 	vmov	r1, s16
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f000 ffe4 	bl	800db2c <__lshift>
 800cb64:	ee08 0a10 	vmov	s16, r0
 800cb68:	9b05      	ldr	r3, [sp, #20]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	dd05      	ble.n	800cb7a <_dtoa_r+0x82a>
 800cb6e:	4631      	mov	r1, r6
 800cb70:	461a      	mov	r2, r3
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 ffda 	bl	800db2c <__lshift>
 800cb78:	4606      	mov	r6, r0
 800cb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d06e      	beq.n	800cc5e <_dtoa_r+0x90e>
 800cb80:	ee18 0a10 	vmov	r0, s16
 800cb84:	4631      	mov	r1, r6
 800cb86:	f001 f841 	bl	800dc0c <__mcmp>
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	da67      	bge.n	800cc5e <_dtoa_r+0x90e>
 800cb8e:	9b00      	ldr	r3, [sp, #0]
 800cb90:	3b01      	subs	r3, #1
 800cb92:	ee18 1a10 	vmov	r1, s16
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	220a      	movs	r2, #10
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f000 fdcb 	bl	800d738 <__multadd>
 800cba2:	9b08      	ldr	r3, [sp, #32]
 800cba4:	ee08 0a10 	vmov	s16, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f000 81b1 	beq.w	800cf10 <_dtoa_r+0xbc0>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	220a      	movs	r2, #10
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 fdbf 	bl	800d738 <__multadd>
 800cbba:	9b02      	ldr	r3, [sp, #8]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	4607      	mov	r7, r0
 800cbc0:	f300 808e 	bgt.w	800cce0 <_dtoa_r+0x990>
 800cbc4:	9b06      	ldr	r3, [sp, #24]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	dc51      	bgt.n	800cc6e <_dtoa_r+0x91e>
 800cbca:	e089      	b.n	800cce0 <_dtoa_r+0x990>
 800cbcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cbd2:	e74b      	b.n	800ca6c <_dtoa_r+0x71c>
 800cbd4:	9b03      	ldr	r3, [sp, #12]
 800cbd6:	1e5e      	subs	r6, r3, #1
 800cbd8:	9b07      	ldr	r3, [sp, #28]
 800cbda:	42b3      	cmp	r3, r6
 800cbdc:	bfbf      	itttt	lt
 800cbde:	9b07      	ldrlt	r3, [sp, #28]
 800cbe0:	9607      	strlt	r6, [sp, #28]
 800cbe2:	1af2      	sublt	r2, r6, r3
 800cbe4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cbe6:	bfb6      	itet	lt
 800cbe8:	189b      	addlt	r3, r3, r2
 800cbea:	1b9e      	subge	r6, r3, r6
 800cbec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cbee:	9b03      	ldr	r3, [sp, #12]
 800cbf0:	bfb8      	it	lt
 800cbf2:	2600      	movlt	r6, #0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bfb7      	itett	lt
 800cbf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cbfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cc00:	1a9d      	sublt	r5, r3, r2
 800cc02:	2300      	movlt	r3, #0
 800cc04:	e734      	b.n	800ca70 <_dtoa_r+0x720>
 800cc06:	9e07      	ldr	r6, [sp, #28]
 800cc08:	9d04      	ldr	r5, [sp, #16]
 800cc0a:	9f08      	ldr	r7, [sp, #32]
 800cc0c:	e73b      	b.n	800ca86 <_dtoa_r+0x736>
 800cc0e:	9a07      	ldr	r2, [sp, #28]
 800cc10:	e767      	b.n	800cae2 <_dtoa_r+0x792>
 800cc12:	9b06      	ldr	r3, [sp, #24]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	dc18      	bgt.n	800cc4a <_dtoa_r+0x8fa>
 800cc18:	f1ba 0f00 	cmp.w	sl, #0
 800cc1c:	d115      	bne.n	800cc4a <_dtoa_r+0x8fa>
 800cc1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc22:	b993      	cbnz	r3, 800cc4a <_dtoa_r+0x8fa>
 800cc24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc28:	0d1b      	lsrs	r3, r3, #20
 800cc2a:	051b      	lsls	r3, r3, #20
 800cc2c:	b183      	cbz	r3, 800cc50 <_dtoa_r+0x900>
 800cc2e:	9b04      	ldr	r3, [sp, #16]
 800cc30:	3301      	adds	r3, #1
 800cc32:	9304      	str	r3, [sp, #16]
 800cc34:	9b05      	ldr	r3, [sp, #20]
 800cc36:	3301      	adds	r3, #1
 800cc38:	9305      	str	r3, [sp, #20]
 800cc3a:	f04f 0801 	mov.w	r8, #1
 800cc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f47f af6a 	bne.w	800cb1a <_dtoa_r+0x7ca>
 800cc46:	2001      	movs	r0, #1
 800cc48:	e76f      	b.n	800cb2a <_dtoa_r+0x7da>
 800cc4a:	f04f 0800 	mov.w	r8, #0
 800cc4e:	e7f6      	b.n	800cc3e <_dtoa_r+0x8ee>
 800cc50:	4698      	mov	r8, r3
 800cc52:	e7f4      	b.n	800cc3e <_dtoa_r+0x8ee>
 800cc54:	f43f af7d 	beq.w	800cb52 <_dtoa_r+0x802>
 800cc58:	4618      	mov	r0, r3
 800cc5a:	301c      	adds	r0, #28
 800cc5c:	e772      	b.n	800cb44 <_dtoa_r+0x7f4>
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	dc37      	bgt.n	800ccd4 <_dtoa_r+0x984>
 800cc64:	9b06      	ldr	r3, [sp, #24]
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	dd34      	ble.n	800ccd4 <_dtoa_r+0x984>
 800cc6a:	9b03      	ldr	r3, [sp, #12]
 800cc6c:	9302      	str	r3, [sp, #8]
 800cc6e:	9b02      	ldr	r3, [sp, #8]
 800cc70:	b96b      	cbnz	r3, 800cc8e <_dtoa_r+0x93e>
 800cc72:	4631      	mov	r1, r6
 800cc74:	2205      	movs	r2, #5
 800cc76:	4620      	mov	r0, r4
 800cc78:	f000 fd5e 	bl	800d738 <__multadd>
 800cc7c:	4601      	mov	r1, r0
 800cc7e:	4606      	mov	r6, r0
 800cc80:	ee18 0a10 	vmov	r0, s16
 800cc84:	f000 ffc2 	bl	800dc0c <__mcmp>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	f73f adbb 	bgt.w	800c804 <_dtoa_r+0x4b4>
 800cc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc90:	9d01      	ldr	r5, [sp, #4]
 800cc92:	43db      	mvns	r3, r3
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	f04f 0800 	mov.w	r8, #0
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f000 fd29 	bl	800d6f4 <_Bfree>
 800cca2:	2f00      	cmp	r7, #0
 800cca4:	f43f aea4 	beq.w	800c9f0 <_dtoa_r+0x6a0>
 800cca8:	f1b8 0f00 	cmp.w	r8, #0
 800ccac:	d005      	beq.n	800ccba <_dtoa_r+0x96a>
 800ccae:	45b8      	cmp	r8, r7
 800ccb0:	d003      	beq.n	800ccba <_dtoa_r+0x96a>
 800ccb2:	4641      	mov	r1, r8
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 fd1d 	bl	800d6f4 <_Bfree>
 800ccba:	4639      	mov	r1, r7
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 fd19 	bl	800d6f4 <_Bfree>
 800ccc2:	e695      	b.n	800c9f0 <_dtoa_r+0x6a0>
 800ccc4:	2600      	movs	r6, #0
 800ccc6:	4637      	mov	r7, r6
 800ccc8:	e7e1      	b.n	800cc8e <_dtoa_r+0x93e>
 800ccca:	9700      	str	r7, [sp, #0]
 800cccc:	4637      	mov	r7, r6
 800ccce:	e599      	b.n	800c804 <_dtoa_r+0x4b4>
 800ccd0:	40240000 	.word	0x40240000
 800ccd4:	9b08      	ldr	r3, [sp, #32]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 80ca 	beq.w	800ce70 <_dtoa_r+0xb20>
 800ccdc:	9b03      	ldr	r3, [sp, #12]
 800ccde:	9302      	str	r3, [sp, #8]
 800cce0:	2d00      	cmp	r5, #0
 800cce2:	dd05      	ble.n	800ccf0 <_dtoa_r+0x9a0>
 800cce4:	4639      	mov	r1, r7
 800cce6:	462a      	mov	r2, r5
 800cce8:	4620      	mov	r0, r4
 800ccea:	f000 ff1f 	bl	800db2c <__lshift>
 800ccee:	4607      	mov	r7, r0
 800ccf0:	f1b8 0f00 	cmp.w	r8, #0
 800ccf4:	d05b      	beq.n	800cdae <_dtoa_r+0xa5e>
 800ccf6:	6879      	ldr	r1, [r7, #4]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 fcbb 	bl	800d674 <_Balloc>
 800ccfe:	4605      	mov	r5, r0
 800cd00:	b928      	cbnz	r0, 800cd0e <_dtoa_r+0x9be>
 800cd02:	4b87      	ldr	r3, [pc, #540]	; (800cf20 <_dtoa_r+0xbd0>)
 800cd04:	4602      	mov	r2, r0
 800cd06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd0a:	f7ff bb3b 	b.w	800c384 <_dtoa_r+0x34>
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	3202      	adds	r2, #2
 800cd12:	0092      	lsls	r2, r2, #2
 800cd14:	f107 010c 	add.w	r1, r7, #12
 800cd18:	300c      	adds	r0, #12
 800cd1a:	f7fd fba3 	bl	800a464 <memcpy>
 800cd1e:	2201      	movs	r2, #1
 800cd20:	4629      	mov	r1, r5
 800cd22:	4620      	mov	r0, r4
 800cd24:	f000 ff02 	bl	800db2c <__lshift>
 800cd28:	9b01      	ldr	r3, [sp, #4]
 800cd2a:	f103 0901 	add.w	r9, r3, #1
 800cd2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cd32:	4413      	add	r3, r2
 800cd34:	9305      	str	r3, [sp, #20]
 800cd36:	f00a 0301 	and.w	r3, sl, #1
 800cd3a:	46b8      	mov	r8, r7
 800cd3c:	9304      	str	r3, [sp, #16]
 800cd3e:	4607      	mov	r7, r0
 800cd40:	4631      	mov	r1, r6
 800cd42:	ee18 0a10 	vmov	r0, s16
 800cd46:	f7ff fa75 	bl	800c234 <quorem>
 800cd4a:	4641      	mov	r1, r8
 800cd4c:	9002      	str	r0, [sp, #8]
 800cd4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd52:	ee18 0a10 	vmov	r0, s16
 800cd56:	f000 ff59 	bl	800dc0c <__mcmp>
 800cd5a:	463a      	mov	r2, r7
 800cd5c:	9003      	str	r0, [sp, #12]
 800cd5e:	4631      	mov	r1, r6
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 ff6f 	bl	800dc44 <__mdiff>
 800cd66:	68c2      	ldr	r2, [r0, #12]
 800cd68:	f109 3bff 	add.w	fp, r9, #4294967295
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	bb02      	cbnz	r2, 800cdb2 <_dtoa_r+0xa62>
 800cd70:	4601      	mov	r1, r0
 800cd72:	ee18 0a10 	vmov	r0, s16
 800cd76:	f000 ff49 	bl	800dc0c <__mcmp>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4620      	mov	r0, r4
 800cd80:	9207      	str	r2, [sp, #28]
 800cd82:	f000 fcb7 	bl	800d6f4 <_Bfree>
 800cd86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cd8a:	ea43 0102 	orr.w	r1, r3, r2
 800cd8e:	9b04      	ldr	r3, [sp, #16]
 800cd90:	430b      	orrs	r3, r1
 800cd92:	464d      	mov	r5, r9
 800cd94:	d10f      	bne.n	800cdb6 <_dtoa_r+0xa66>
 800cd96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cd9a:	d02a      	beq.n	800cdf2 <_dtoa_r+0xaa2>
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	dd02      	ble.n	800cda8 <_dtoa_r+0xa58>
 800cda2:	9b02      	ldr	r3, [sp, #8]
 800cda4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cda8:	f88b a000 	strb.w	sl, [fp]
 800cdac:	e775      	b.n	800cc9a <_dtoa_r+0x94a>
 800cdae:	4638      	mov	r0, r7
 800cdb0:	e7ba      	b.n	800cd28 <_dtoa_r+0x9d8>
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	e7e2      	b.n	800cd7c <_dtoa_r+0xa2c>
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	db04      	blt.n	800cdc6 <_dtoa_r+0xa76>
 800cdbc:	9906      	ldr	r1, [sp, #24]
 800cdbe:	430b      	orrs	r3, r1
 800cdc0:	9904      	ldr	r1, [sp, #16]
 800cdc2:	430b      	orrs	r3, r1
 800cdc4:	d122      	bne.n	800ce0c <_dtoa_r+0xabc>
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	ddee      	ble.n	800cda8 <_dtoa_r+0xa58>
 800cdca:	ee18 1a10 	vmov	r1, s16
 800cdce:	2201      	movs	r2, #1
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f000 feab 	bl	800db2c <__lshift>
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	ee08 0a10 	vmov	s16, r0
 800cddc:	f000 ff16 	bl	800dc0c <__mcmp>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	dc03      	bgt.n	800cdec <_dtoa_r+0xa9c>
 800cde4:	d1e0      	bne.n	800cda8 <_dtoa_r+0xa58>
 800cde6:	f01a 0f01 	tst.w	sl, #1
 800cdea:	d0dd      	beq.n	800cda8 <_dtoa_r+0xa58>
 800cdec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cdf0:	d1d7      	bne.n	800cda2 <_dtoa_r+0xa52>
 800cdf2:	2339      	movs	r3, #57	; 0x39
 800cdf4:	f88b 3000 	strb.w	r3, [fp]
 800cdf8:	462b      	mov	r3, r5
 800cdfa:	461d      	mov	r5, r3
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce02:	2a39      	cmp	r2, #57	; 0x39
 800ce04:	d071      	beq.n	800ceea <_dtoa_r+0xb9a>
 800ce06:	3201      	adds	r2, #1
 800ce08:	701a      	strb	r2, [r3, #0]
 800ce0a:	e746      	b.n	800cc9a <_dtoa_r+0x94a>
 800ce0c:	2a00      	cmp	r2, #0
 800ce0e:	dd07      	ble.n	800ce20 <_dtoa_r+0xad0>
 800ce10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce14:	d0ed      	beq.n	800cdf2 <_dtoa_r+0xaa2>
 800ce16:	f10a 0301 	add.w	r3, sl, #1
 800ce1a:	f88b 3000 	strb.w	r3, [fp]
 800ce1e:	e73c      	b.n	800cc9a <_dtoa_r+0x94a>
 800ce20:	9b05      	ldr	r3, [sp, #20]
 800ce22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ce26:	4599      	cmp	r9, r3
 800ce28:	d047      	beq.n	800ceba <_dtoa_r+0xb6a>
 800ce2a:	ee18 1a10 	vmov	r1, s16
 800ce2e:	2300      	movs	r3, #0
 800ce30:	220a      	movs	r2, #10
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fc80 	bl	800d738 <__multadd>
 800ce38:	45b8      	cmp	r8, r7
 800ce3a:	ee08 0a10 	vmov	s16, r0
 800ce3e:	f04f 0300 	mov.w	r3, #0
 800ce42:	f04f 020a 	mov.w	r2, #10
 800ce46:	4641      	mov	r1, r8
 800ce48:	4620      	mov	r0, r4
 800ce4a:	d106      	bne.n	800ce5a <_dtoa_r+0xb0a>
 800ce4c:	f000 fc74 	bl	800d738 <__multadd>
 800ce50:	4680      	mov	r8, r0
 800ce52:	4607      	mov	r7, r0
 800ce54:	f109 0901 	add.w	r9, r9, #1
 800ce58:	e772      	b.n	800cd40 <_dtoa_r+0x9f0>
 800ce5a:	f000 fc6d 	bl	800d738 <__multadd>
 800ce5e:	4639      	mov	r1, r7
 800ce60:	4680      	mov	r8, r0
 800ce62:	2300      	movs	r3, #0
 800ce64:	220a      	movs	r2, #10
 800ce66:	4620      	mov	r0, r4
 800ce68:	f000 fc66 	bl	800d738 <__multadd>
 800ce6c:	4607      	mov	r7, r0
 800ce6e:	e7f1      	b.n	800ce54 <_dtoa_r+0xb04>
 800ce70:	9b03      	ldr	r3, [sp, #12]
 800ce72:	9302      	str	r3, [sp, #8]
 800ce74:	9d01      	ldr	r5, [sp, #4]
 800ce76:	ee18 0a10 	vmov	r0, s16
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	f7ff f9da 	bl	800c234 <quorem>
 800ce80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ce84:	9b01      	ldr	r3, [sp, #4]
 800ce86:	f805 ab01 	strb.w	sl, [r5], #1
 800ce8a:	1aea      	subs	r2, r5, r3
 800ce8c:	9b02      	ldr	r3, [sp, #8]
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	dd09      	ble.n	800cea6 <_dtoa_r+0xb56>
 800ce92:	ee18 1a10 	vmov	r1, s16
 800ce96:	2300      	movs	r3, #0
 800ce98:	220a      	movs	r2, #10
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 fc4c 	bl	800d738 <__multadd>
 800cea0:	ee08 0a10 	vmov	s16, r0
 800cea4:	e7e7      	b.n	800ce76 <_dtoa_r+0xb26>
 800cea6:	9b02      	ldr	r3, [sp, #8]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	bfc8      	it	gt
 800ceac:	461d      	movgt	r5, r3
 800ceae:	9b01      	ldr	r3, [sp, #4]
 800ceb0:	bfd8      	it	le
 800ceb2:	2501      	movle	r5, #1
 800ceb4:	441d      	add	r5, r3
 800ceb6:	f04f 0800 	mov.w	r8, #0
 800ceba:	ee18 1a10 	vmov	r1, s16
 800cebe:	2201      	movs	r2, #1
 800cec0:	4620      	mov	r0, r4
 800cec2:	f000 fe33 	bl	800db2c <__lshift>
 800cec6:	4631      	mov	r1, r6
 800cec8:	ee08 0a10 	vmov	s16, r0
 800cecc:	f000 fe9e 	bl	800dc0c <__mcmp>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	dc91      	bgt.n	800cdf8 <_dtoa_r+0xaa8>
 800ced4:	d102      	bne.n	800cedc <_dtoa_r+0xb8c>
 800ced6:	f01a 0f01 	tst.w	sl, #1
 800ceda:	d18d      	bne.n	800cdf8 <_dtoa_r+0xaa8>
 800cedc:	462b      	mov	r3, r5
 800cede:	461d      	mov	r5, r3
 800cee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cee4:	2a30      	cmp	r2, #48	; 0x30
 800cee6:	d0fa      	beq.n	800cede <_dtoa_r+0xb8e>
 800cee8:	e6d7      	b.n	800cc9a <_dtoa_r+0x94a>
 800ceea:	9a01      	ldr	r2, [sp, #4]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d184      	bne.n	800cdfa <_dtoa_r+0xaaa>
 800cef0:	9b00      	ldr	r3, [sp, #0]
 800cef2:	3301      	adds	r3, #1
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	2331      	movs	r3, #49	; 0x31
 800cef8:	7013      	strb	r3, [r2, #0]
 800cefa:	e6ce      	b.n	800cc9a <_dtoa_r+0x94a>
 800cefc:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <_dtoa_r+0xbd4>)
 800cefe:	f7ff ba95 	b.w	800c42c <_dtoa_r+0xdc>
 800cf02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f47f aa6e 	bne.w	800c3e6 <_dtoa_r+0x96>
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <_dtoa_r+0xbd8>)
 800cf0c:	f7ff ba8e 	b.w	800c42c <_dtoa_r+0xdc>
 800cf10:	9b02      	ldr	r3, [sp, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dcae      	bgt.n	800ce74 <_dtoa_r+0xb24>
 800cf16:	9b06      	ldr	r3, [sp, #24]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	f73f aea8 	bgt.w	800cc6e <_dtoa_r+0x91e>
 800cf1e:	e7a9      	b.n	800ce74 <_dtoa_r+0xb24>
 800cf20:	0800fe98 	.word	0x0800fe98
 800cf24:	08010091 	.word	0x08010091
 800cf28:	0800fe19 	.word	0x0800fe19

0800cf2c <rshift>:
 800cf2c:	6903      	ldr	r3, [r0, #16]
 800cf2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf3a:	f100 0414 	add.w	r4, r0, #20
 800cf3e:	dd45      	ble.n	800cfcc <rshift+0xa0>
 800cf40:	f011 011f 	ands.w	r1, r1, #31
 800cf44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf4c:	d10c      	bne.n	800cf68 <rshift+0x3c>
 800cf4e:	f100 0710 	add.w	r7, r0, #16
 800cf52:	4629      	mov	r1, r5
 800cf54:	42b1      	cmp	r1, r6
 800cf56:	d334      	bcc.n	800cfc2 <rshift+0x96>
 800cf58:	1a9b      	subs	r3, r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	1eea      	subs	r2, r5, #3
 800cf5e:	4296      	cmp	r6, r2
 800cf60:	bf38      	it	cc
 800cf62:	2300      	movcc	r3, #0
 800cf64:	4423      	add	r3, r4
 800cf66:	e015      	b.n	800cf94 <rshift+0x68>
 800cf68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf6c:	f1c1 0820 	rsb	r8, r1, #32
 800cf70:	40cf      	lsrs	r7, r1
 800cf72:	f105 0e04 	add.w	lr, r5, #4
 800cf76:	46a1      	mov	r9, r4
 800cf78:	4576      	cmp	r6, lr
 800cf7a:	46f4      	mov	ip, lr
 800cf7c:	d815      	bhi.n	800cfaa <rshift+0x7e>
 800cf7e:	1a9a      	subs	r2, r3, r2
 800cf80:	0092      	lsls	r2, r2, #2
 800cf82:	3a04      	subs	r2, #4
 800cf84:	3501      	adds	r5, #1
 800cf86:	42ae      	cmp	r6, r5
 800cf88:	bf38      	it	cc
 800cf8a:	2200      	movcc	r2, #0
 800cf8c:	18a3      	adds	r3, r4, r2
 800cf8e:	50a7      	str	r7, [r4, r2]
 800cf90:	b107      	cbz	r7, 800cf94 <rshift+0x68>
 800cf92:	3304      	adds	r3, #4
 800cf94:	1b1a      	subs	r2, r3, r4
 800cf96:	42a3      	cmp	r3, r4
 800cf98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf9c:	bf08      	it	eq
 800cf9e:	2300      	moveq	r3, #0
 800cfa0:	6102      	str	r2, [r0, #16]
 800cfa2:	bf08      	it	eq
 800cfa4:	6143      	streq	r3, [r0, #20]
 800cfa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfaa:	f8dc c000 	ldr.w	ip, [ip]
 800cfae:	fa0c fc08 	lsl.w	ip, ip, r8
 800cfb2:	ea4c 0707 	orr.w	r7, ip, r7
 800cfb6:	f849 7b04 	str.w	r7, [r9], #4
 800cfba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfbe:	40cf      	lsrs	r7, r1
 800cfc0:	e7da      	b.n	800cf78 <rshift+0x4c>
 800cfc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cfc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800cfca:	e7c3      	b.n	800cf54 <rshift+0x28>
 800cfcc:	4623      	mov	r3, r4
 800cfce:	e7e1      	b.n	800cf94 <rshift+0x68>

0800cfd0 <__hexdig_fun>:
 800cfd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cfd4:	2b09      	cmp	r3, #9
 800cfd6:	d802      	bhi.n	800cfde <__hexdig_fun+0xe>
 800cfd8:	3820      	subs	r0, #32
 800cfda:	b2c0      	uxtb	r0, r0
 800cfdc:	4770      	bx	lr
 800cfde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cfe2:	2b05      	cmp	r3, #5
 800cfe4:	d801      	bhi.n	800cfea <__hexdig_fun+0x1a>
 800cfe6:	3847      	subs	r0, #71	; 0x47
 800cfe8:	e7f7      	b.n	800cfda <__hexdig_fun+0xa>
 800cfea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cfee:	2b05      	cmp	r3, #5
 800cff0:	d801      	bhi.n	800cff6 <__hexdig_fun+0x26>
 800cff2:	3827      	subs	r0, #39	; 0x27
 800cff4:	e7f1      	b.n	800cfda <__hexdig_fun+0xa>
 800cff6:	2000      	movs	r0, #0
 800cff8:	4770      	bx	lr
	...

0800cffc <__gethex>:
 800cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d000:	ed2d 8b02 	vpush	{d8}
 800d004:	b089      	sub	sp, #36	; 0x24
 800d006:	ee08 0a10 	vmov	s16, r0
 800d00a:	9304      	str	r3, [sp, #16]
 800d00c:	4bb4      	ldr	r3, [pc, #720]	; (800d2e0 <__gethex+0x2e4>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	9301      	str	r3, [sp, #4]
 800d012:	4618      	mov	r0, r3
 800d014:	468b      	mov	fp, r1
 800d016:	4690      	mov	r8, r2
 800d018:	f7f3 f8da 	bl	80001d0 <strlen>
 800d01c:	9b01      	ldr	r3, [sp, #4]
 800d01e:	f8db 2000 	ldr.w	r2, [fp]
 800d022:	4403      	add	r3, r0
 800d024:	4682      	mov	sl, r0
 800d026:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d02a:	9305      	str	r3, [sp, #20]
 800d02c:	1c93      	adds	r3, r2, #2
 800d02e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d032:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d036:	32fe      	adds	r2, #254	; 0xfe
 800d038:	18d1      	adds	r1, r2, r3
 800d03a:	461f      	mov	r7, r3
 800d03c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d040:	9100      	str	r1, [sp, #0]
 800d042:	2830      	cmp	r0, #48	; 0x30
 800d044:	d0f8      	beq.n	800d038 <__gethex+0x3c>
 800d046:	f7ff ffc3 	bl	800cfd0 <__hexdig_fun>
 800d04a:	4604      	mov	r4, r0
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d13a      	bne.n	800d0c6 <__gethex+0xca>
 800d050:	9901      	ldr	r1, [sp, #4]
 800d052:	4652      	mov	r2, sl
 800d054:	4638      	mov	r0, r7
 800d056:	f001 fcb7 	bl	800e9c8 <strncmp>
 800d05a:	4605      	mov	r5, r0
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d168      	bne.n	800d132 <__gethex+0x136>
 800d060:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d064:	eb07 060a 	add.w	r6, r7, sl
 800d068:	f7ff ffb2 	bl	800cfd0 <__hexdig_fun>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d062      	beq.n	800d136 <__gethex+0x13a>
 800d070:	4633      	mov	r3, r6
 800d072:	7818      	ldrb	r0, [r3, #0]
 800d074:	2830      	cmp	r0, #48	; 0x30
 800d076:	461f      	mov	r7, r3
 800d078:	f103 0301 	add.w	r3, r3, #1
 800d07c:	d0f9      	beq.n	800d072 <__gethex+0x76>
 800d07e:	f7ff ffa7 	bl	800cfd0 <__hexdig_fun>
 800d082:	2301      	movs	r3, #1
 800d084:	fab0 f480 	clz	r4, r0
 800d088:	0964      	lsrs	r4, r4, #5
 800d08a:	4635      	mov	r5, r6
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	463a      	mov	r2, r7
 800d090:	4616      	mov	r6, r2
 800d092:	3201      	adds	r2, #1
 800d094:	7830      	ldrb	r0, [r6, #0]
 800d096:	f7ff ff9b 	bl	800cfd0 <__hexdig_fun>
 800d09a:	2800      	cmp	r0, #0
 800d09c:	d1f8      	bne.n	800d090 <__gethex+0x94>
 800d09e:	9901      	ldr	r1, [sp, #4]
 800d0a0:	4652      	mov	r2, sl
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f001 fc90 	bl	800e9c8 <strncmp>
 800d0a8:	b980      	cbnz	r0, 800d0cc <__gethex+0xd0>
 800d0aa:	b94d      	cbnz	r5, 800d0c0 <__gethex+0xc4>
 800d0ac:	eb06 050a 	add.w	r5, r6, sl
 800d0b0:	462a      	mov	r2, r5
 800d0b2:	4616      	mov	r6, r2
 800d0b4:	3201      	adds	r2, #1
 800d0b6:	7830      	ldrb	r0, [r6, #0]
 800d0b8:	f7ff ff8a 	bl	800cfd0 <__hexdig_fun>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	d1f8      	bne.n	800d0b2 <__gethex+0xb6>
 800d0c0:	1bad      	subs	r5, r5, r6
 800d0c2:	00ad      	lsls	r5, r5, #2
 800d0c4:	e004      	b.n	800d0d0 <__gethex+0xd4>
 800d0c6:	2400      	movs	r4, #0
 800d0c8:	4625      	mov	r5, r4
 800d0ca:	e7e0      	b.n	800d08e <__gethex+0x92>
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	d1f7      	bne.n	800d0c0 <__gethex+0xc4>
 800d0d0:	7833      	ldrb	r3, [r6, #0]
 800d0d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d0d6:	2b50      	cmp	r3, #80	; 0x50
 800d0d8:	d13b      	bne.n	800d152 <__gethex+0x156>
 800d0da:	7873      	ldrb	r3, [r6, #1]
 800d0dc:	2b2b      	cmp	r3, #43	; 0x2b
 800d0de:	d02c      	beq.n	800d13a <__gethex+0x13e>
 800d0e0:	2b2d      	cmp	r3, #45	; 0x2d
 800d0e2:	d02e      	beq.n	800d142 <__gethex+0x146>
 800d0e4:	1c71      	adds	r1, r6, #1
 800d0e6:	f04f 0900 	mov.w	r9, #0
 800d0ea:	7808      	ldrb	r0, [r1, #0]
 800d0ec:	f7ff ff70 	bl	800cfd0 <__hexdig_fun>
 800d0f0:	1e43      	subs	r3, r0, #1
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b18      	cmp	r3, #24
 800d0f6:	d82c      	bhi.n	800d152 <__gethex+0x156>
 800d0f8:	f1a0 0210 	sub.w	r2, r0, #16
 800d0fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d100:	f7ff ff66 	bl	800cfd0 <__hexdig_fun>
 800d104:	1e43      	subs	r3, r0, #1
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b18      	cmp	r3, #24
 800d10a:	d91d      	bls.n	800d148 <__gethex+0x14c>
 800d10c:	f1b9 0f00 	cmp.w	r9, #0
 800d110:	d000      	beq.n	800d114 <__gethex+0x118>
 800d112:	4252      	negs	r2, r2
 800d114:	4415      	add	r5, r2
 800d116:	f8cb 1000 	str.w	r1, [fp]
 800d11a:	b1e4      	cbz	r4, 800d156 <__gethex+0x15a>
 800d11c:	9b00      	ldr	r3, [sp, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	bf14      	ite	ne
 800d122:	2700      	movne	r7, #0
 800d124:	2706      	moveq	r7, #6
 800d126:	4638      	mov	r0, r7
 800d128:	b009      	add	sp, #36	; 0x24
 800d12a:	ecbd 8b02 	vpop	{d8}
 800d12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d132:	463e      	mov	r6, r7
 800d134:	4625      	mov	r5, r4
 800d136:	2401      	movs	r4, #1
 800d138:	e7ca      	b.n	800d0d0 <__gethex+0xd4>
 800d13a:	f04f 0900 	mov.w	r9, #0
 800d13e:	1cb1      	adds	r1, r6, #2
 800d140:	e7d3      	b.n	800d0ea <__gethex+0xee>
 800d142:	f04f 0901 	mov.w	r9, #1
 800d146:	e7fa      	b.n	800d13e <__gethex+0x142>
 800d148:	230a      	movs	r3, #10
 800d14a:	fb03 0202 	mla	r2, r3, r2, r0
 800d14e:	3a10      	subs	r2, #16
 800d150:	e7d4      	b.n	800d0fc <__gethex+0x100>
 800d152:	4631      	mov	r1, r6
 800d154:	e7df      	b.n	800d116 <__gethex+0x11a>
 800d156:	1bf3      	subs	r3, r6, r7
 800d158:	3b01      	subs	r3, #1
 800d15a:	4621      	mov	r1, r4
 800d15c:	2b07      	cmp	r3, #7
 800d15e:	dc0b      	bgt.n	800d178 <__gethex+0x17c>
 800d160:	ee18 0a10 	vmov	r0, s16
 800d164:	f000 fa86 	bl	800d674 <_Balloc>
 800d168:	4604      	mov	r4, r0
 800d16a:	b940      	cbnz	r0, 800d17e <__gethex+0x182>
 800d16c:	4b5d      	ldr	r3, [pc, #372]	; (800d2e4 <__gethex+0x2e8>)
 800d16e:	4602      	mov	r2, r0
 800d170:	21de      	movs	r1, #222	; 0xde
 800d172:	485d      	ldr	r0, [pc, #372]	; (800d2e8 <__gethex+0x2ec>)
 800d174:	f001 fcf8 	bl	800eb68 <__assert_func>
 800d178:	3101      	adds	r1, #1
 800d17a:	105b      	asrs	r3, r3, #1
 800d17c:	e7ee      	b.n	800d15c <__gethex+0x160>
 800d17e:	f100 0914 	add.w	r9, r0, #20
 800d182:	f04f 0b00 	mov.w	fp, #0
 800d186:	f1ca 0301 	rsb	r3, sl, #1
 800d18a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d18e:	f8cd b000 	str.w	fp, [sp]
 800d192:	9306      	str	r3, [sp, #24]
 800d194:	42b7      	cmp	r7, r6
 800d196:	d340      	bcc.n	800d21a <__gethex+0x21e>
 800d198:	9802      	ldr	r0, [sp, #8]
 800d19a:	9b00      	ldr	r3, [sp, #0]
 800d19c:	f840 3b04 	str.w	r3, [r0], #4
 800d1a0:	eba0 0009 	sub.w	r0, r0, r9
 800d1a4:	1080      	asrs	r0, r0, #2
 800d1a6:	0146      	lsls	r6, r0, #5
 800d1a8:	6120      	str	r0, [r4, #16]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 fb54 	bl	800d858 <__hi0bits>
 800d1b0:	1a30      	subs	r0, r6, r0
 800d1b2:	f8d8 6000 	ldr.w	r6, [r8]
 800d1b6:	42b0      	cmp	r0, r6
 800d1b8:	dd63      	ble.n	800d282 <__gethex+0x286>
 800d1ba:	1b87      	subs	r7, r0, r6
 800d1bc:	4639      	mov	r1, r7
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 fef8 	bl	800dfb4 <__any_on>
 800d1c4:	4682      	mov	sl, r0
 800d1c6:	b1a8      	cbz	r0, 800d1f4 <__gethex+0x1f8>
 800d1c8:	1e7b      	subs	r3, r7, #1
 800d1ca:	1159      	asrs	r1, r3, #5
 800d1cc:	f003 021f 	and.w	r2, r3, #31
 800d1d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d1d4:	f04f 0a01 	mov.w	sl, #1
 800d1d8:	fa0a f202 	lsl.w	r2, sl, r2
 800d1dc:	420a      	tst	r2, r1
 800d1de:	d009      	beq.n	800d1f4 <__gethex+0x1f8>
 800d1e0:	4553      	cmp	r3, sl
 800d1e2:	dd05      	ble.n	800d1f0 <__gethex+0x1f4>
 800d1e4:	1eb9      	subs	r1, r7, #2
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f000 fee4 	bl	800dfb4 <__any_on>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d145      	bne.n	800d27c <__gethex+0x280>
 800d1f0:	f04f 0a02 	mov.w	sl, #2
 800d1f4:	4639      	mov	r1, r7
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f7ff fe98 	bl	800cf2c <rshift>
 800d1fc:	443d      	add	r5, r7
 800d1fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d202:	42ab      	cmp	r3, r5
 800d204:	da4c      	bge.n	800d2a0 <__gethex+0x2a4>
 800d206:	ee18 0a10 	vmov	r0, s16
 800d20a:	4621      	mov	r1, r4
 800d20c:	f000 fa72 	bl	800d6f4 <_Bfree>
 800d210:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d212:	2300      	movs	r3, #0
 800d214:	6013      	str	r3, [r2, #0]
 800d216:	27a3      	movs	r7, #163	; 0xa3
 800d218:	e785      	b.n	800d126 <__gethex+0x12a>
 800d21a:	1e73      	subs	r3, r6, #1
 800d21c:	9a05      	ldr	r2, [sp, #20]
 800d21e:	9303      	str	r3, [sp, #12]
 800d220:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d224:	4293      	cmp	r3, r2
 800d226:	d019      	beq.n	800d25c <__gethex+0x260>
 800d228:	f1bb 0f20 	cmp.w	fp, #32
 800d22c:	d107      	bne.n	800d23e <__gethex+0x242>
 800d22e:	9b02      	ldr	r3, [sp, #8]
 800d230:	9a00      	ldr	r2, [sp, #0]
 800d232:	f843 2b04 	str.w	r2, [r3], #4
 800d236:	9302      	str	r3, [sp, #8]
 800d238:	2300      	movs	r3, #0
 800d23a:	9300      	str	r3, [sp, #0]
 800d23c:	469b      	mov	fp, r3
 800d23e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d242:	f7ff fec5 	bl	800cfd0 <__hexdig_fun>
 800d246:	9b00      	ldr	r3, [sp, #0]
 800d248:	f000 000f 	and.w	r0, r0, #15
 800d24c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d250:	4303      	orrs	r3, r0
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	f10b 0b04 	add.w	fp, fp, #4
 800d258:	9b03      	ldr	r3, [sp, #12]
 800d25a:	e00d      	b.n	800d278 <__gethex+0x27c>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	9a06      	ldr	r2, [sp, #24]
 800d260:	4413      	add	r3, r2
 800d262:	42bb      	cmp	r3, r7
 800d264:	d3e0      	bcc.n	800d228 <__gethex+0x22c>
 800d266:	4618      	mov	r0, r3
 800d268:	9901      	ldr	r1, [sp, #4]
 800d26a:	9307      	str	r3, [sp, #28]
 800d26c:	4652      	mov	r2, sl
 800d26e:	f001 fbab 	bl	800e9c8 <strncmp>
 800d272:	9b07      	ldr	r3, [sp, #28]
 800d274:	2800      	cmp	r0, #0
 800d276:	d1d7      	bne.n	800d228 <__gethex+0x22c>
 800d278:	461e      	mov	r6, r3
 800d27a:	e78b      	b.n	800d194 <__gethex+0x198>
 800d27c:	f04f 0a03 	mov.w	sl, #3
 800d280:	e7b8      	b.n	800d1f4 <__gethex+0x1f8>
 800d282:	da0a      	bge.n	800d29a <__gethex+0x29e>
 800d284:	1a37      	subs	r7, r6, r0
 800d286:	4621      	mov	r1, r4
 800d288:	ee18 0a10 	vmov	r0, s16
 800d28c:	463a      	mov	r2, r7
 800d28e:	f000 fc4d 	bl	800db2c <__lshift>
 800d292:	1bed      	subs	r5, r5, r7
 800d294:	4604      	mov	r4, r0
 800d296:	f100 0914 	add.w	r9, r0, #20
 800d29a:	f04f 0a00 	mov.w	sl, #0
 800d29e:	e7ae      	b.n	800d1fe <__gethex+0x202>
 800d2a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d2a4:	42a8      	cmp	r0, r5
 800d2a6:	dd72      	ble.n	800d38e <__gethex+0x392>
 800d2a8:	1b45      	subs	r5, r0, r5
 800d2aa:	42ae      	cmp	r6, r5
 800d2ac:	dc36      	bgt.n	800d31c <__gethex+0x320>
 800d2ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d02a      	beq.n	800d30c <__gethex+0x310>
 800d2b6:	2b03      	cmp	r3, #3
 800d2b8:	d02c      	beq.n	800d314 <__gethex+0x318>
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d11c      	bne.n	800d2f8 <__gethex+0x2fc>
 800d2be:	42ae      	cmp	r6, r5
 800d2c0:	d11a      	bne.n	800d2f8 <__gethex+0x2fc>
 800d2c2:	2e01      	cmp	r6, #1
 800d2c4:	d112      	bne.n	800d2ec <__gethex+0x2f0>
 800d2c6:	9a04      	ldr	r2, [sp, #16]
 800d2c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d2cc:	6013      	str	r3, [r2, #0]
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	6123      	str	r3, [r4, #16]
 800d2d2:	f8c9 3000 	str.w	r3, [r9]
 800d2d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2d8:	2762      	movs	r7, #98	; 0x62
 800d2da:	601c      	str	r4, [r3, #0]
 800d2dc:	e723      	b.n	800d126 <__gethex+0x12a>
 800d2de:	bf00      	nop
 800d2e0:	0800ff10 	.word	0x0800ff10
 800d2e4:	0800fe98 	.word	0x0800fe98
 800d2e8:	0800fea9 	.word	0x0800fea9
 800d2ec:	1e71      	subs	r1, r6, #1
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f000 fe60 	bl	800dfb4 <__any_on>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d1e6      	bne.n	800d2c6 <__gethex+0x2ca>
 800d2f8:	ee18 0a10 	vmov	r0, s16
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	f000 f9f9 	bl	800d6f4 <_Bfree>
 800d302:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d304:	2300      	movs	r3, #0
 800d306:	6013      	str	r3, [r2, #0]
 800d308:	2750      	movs	r7, #80	; 0x50
 800d30a:	e70c      	b.n	800d126 <__gethex+0x12a>
 800d30c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1f2      	bne.n	800d2f8 <__gethex+0x2fc>
 800d312:	e7d8      	b.n	800d2c6 <__gethex+0x2ca>
 800d314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1d5      	bne.n	800d2c6 <__gethex+0x2ca>
 800d31a:	e7ed      	b.n	800d2f8 <__gethex+0x2fc>
 800d31c:	1e6f      	subs	r7, r5, #1
 800d31e:	f1ba 0f00 	cmp.w	sl, #0
 800d322:	d131      	bne.n	800d388 <__gethex+0x38c>
 800d324:	b127      	cbz	r7, 800d330 <__gethex+0x334>
 800d326:	4639      	mov	r1, r7
 800d328:	4620      	mov	r0, r4
 800d32a:	f000 fe43 	bl	800dfb4 <__any_on>
 800d32e:	4682      	mov	sl, r0
 800d330:	117b      	asrs	r3, r7, #5
 800d332:	2101      	movs	r1, #1
 800d334:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d338:	f007 071f 	and.w	r7, r7, #31
 800d33c:	fa01 f707 	lsl.w	r7, r1, r7
 800d340:	421f      	tst	r7, r3
 800d342:	4629      	mov	r1, r5
 800d344:	4620      	mov	r0, r4
 800d346:	bf18      	it	ne
 800d348:	f04a 0a02 	orrne.w	sl, sl, #2
 800d34c:	1b76      	subs	r6, r6, r5
 800d34e:	f7ff fded 	bl	800cf2c <rshift>
 800d352:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d356:	2702      	movs	r7, #2
 800d358:	f1ba 0f00 	cmp.w	sl, #0
 800d35c:	d048      	beq.n	800d3f0 <__gethex+0x3f4>
 800d35e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d362:	2b02      	cmp	r3, #2
 800d364:	d015      	beq.n	800d392 <__gethex+0x396>
 800d366:	2b03      	cmp	r3, #3
 800d368:	d017      	beq.n	800d39a <__gethex+0x39e>
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d109      	bne.n	800d382 <__gethex+0x386>
 800d36e:	f01a 0f02 	tst.w	sl, #2
 800d372:	d006      	beq.n	800d382 <__gethex+0x386>
 800d374:	f8d9 0000 	ldr.w	r0, [r9]
 800d378:	ea4a 0a00 	orr.w	sl, sl, r0
 800d37c:	f01a 0f01 	tst.w	sl, #1
 800d380:	d10e      	bne.n	800d3a0 <__gethex+0x3a4>
 800d382:	f047 0710 	orr.w	r7, r7, #16
 800d386:	e033      	b.n	800d3f0 <__gethex+0x3f4>
 800d388:	f04f 0a01 	mov.w	sl, #1
 800d38c:	e7d0      	b.n	800d330 <__gethex+0x334>
 800d38e:	2701      	movs	r7, #1
 800d390:	e7e2      	b.n	800d358 <__gethex+0x35c>
 800d392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d394:	f1c3 0301 	rsb	r3, r3, #1
 800d398:	9315      	str	r3, [sp, #84]	; 0x54
 800d39a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d0f0      	beq.n	800d382 <__gethex+0x386>
 800d3a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d3a4:	f104 0314 	add.w	r3, r4, #20
 800d3a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d3ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d3b0:	f04f 0c00 	mov.w	ip, #0
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d3be:	d01c      	beq.n	800d3fa <__gethex+0x3fe>
 800d3c0:	3201      	adds	r2, #1
 800d3c2:	6002      	str	r2, [r0, #0]
 800d3c4:	2f02      	cmp	r7, #2
 800d3c6:	f104 0314 	add.w	r3, r4, #20
 800d3ca:	d13f      	bne.n	800d44c <__gethex+0x450>
 800d3cc:	f8d8 2000 	ldr.w	r2, [r8]
 800d3d0:	3a01      	subs	r2, #1
 800d3d2:	42b2      	cmp	r2, r6
 800d3d4:	d10a      	bne.n	800d3ec <__gethex+0x3f0>
 800d3d6:	1171      	asrs	r1, r6, #5
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d3de:	f006 061f 	and.w	r6, r6, #31
 800d3e2:	fa02 f606 	lsl.w	r6, r2, r6
 800d3e6:	421e      	tst	r6, r3
 800d3e8:	bf18      	it	ne
 800d3ea:	4617      	movne	r7, r2
 800d3ec:	f047 0720 	orr.w	r7, r7, #32
 800d3f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d3f2:	601c      	str	r4, [r3, #0]
 800d3f4:	9b04      	ldr	r3, [sp, #16]
 800d3f6:	601d      	str	r5, [r3, #0]
 800d3f8:	e695      	b.n	800d126 <__gethex+0x12a>
 800d3fa:	4299      	cmp	r1, r3
 800d3fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d400:	d8d8      	bhi.n	800d3b4 <__gethex+0x3b8>
 800d402:	68a3      	ldr	r3, [r4, #8]
 800d404:	459b      	cmp	fp, r3
 800d406:	db19      	blt.n	800d43c <__gethex+0x440>
 800d408:	6861      	ldr	r1, [r4, #4]
 800d40a:	ee18 0a10 	vmov	r0, s16
 800d40e:	3101      	adds	r1, #1
 800d410:	f000 f930 	bl	800d674 <_Balloc>
 800d414:	4681      	mov	r9, r0
 800d416:	b918      	cbnz	r0, 800d420 <__gethex+0x424>
 800d418:	4b1a      	ldr	r3, [pc, #104]	; (800d484 <__gethex+0x488>)
 800d41a:	4602      	mov	r2, r0
 800d41c:	2184      	movs	r1, #132	; 0x84
 800d41e:	e6a8      	b.n	800d172 <__gethex+0x176>
 800d420:	6922      	ldr	r2, [r4, #16]
 800d422:	3202      	adds	r2, #2
 800d424:	f104 010c 	add.w	r1, r4, #12
 800d428:	0092      	lsls	r2, r2, #2
 800d42a:	300c      	adds	r0, #12
 800d42c:	f7fd f81a 	bl	800a464 <memcpy>
 800d430:	4621      	mov	r1, r4
 800d432:	ee18 0a10 	vmov	r0, s16
 800d436:	f000 f95d 	bl	800d6f4 <_Bfree>
 800d43a:	464c      	mov	r4, r9
 800d43c:	6923      	ldr	r3, [r4, #16]
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d444:	6122      	str	r2, [r4, #16]
 800d446:	2201      	movs	r2, #1
 800d448:	615a      	str	r2, [r3, #20]
 800d44a:	e7bb      	b.n	800d3c4 <__gethex+0x3c8>
 800d44c:	6922      	ldr	r2, [r4, #16]
 800d44e:	455a      	cmp	r2, fp
 800d450:	dd0b      	ble.n	800d46a <__gethex+0x46e>
 800d452:	2101      	movs	r1, #1
 800d454:	4620      	mov	r0, r4
 800d456:	f7ff fd69 	bl	800cf2c <rshift>
 800d45a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d45e:	3501      	adds	r5, #1
 800d460:	42ab      	cmp	r3, r5
 800d462:	f6ff aed0 	blt.w	800d206 <__gethex+0x20a>
 800d466:	2701      	movs	r7, #1
 800d468:	e7c0      	b.n	800d3ec <__gethex+0x3f0>
 800d46a:	f016 061f 	ands.w	r6, r6, #31
 800d46e:	d0fa      	beq.n	800d466 <__gethex+0x46a>
 800d470:	4453      	add	r3, sl
 800d472:	f1c6 0620 	rsb	r6, r6, #32
 800d476:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d47a:	f000 f9ed 	bl	800d858 <__hi0bits>
 800d47e:	42b0      	cmp	r0, r6
 800d480:	dbe7      	blt.n	800d452 <__gethex+0x456>
 800d482:	e7f0      	b.n	800d466 <__gethex+0x46a>
 800d484:	0800fe98 	.word	0x0800fe98

0800d488 <L_shift>:
 800d488:	f1c2 0208 	rsb	r2, r2, #8
 800d48c:	0092      	lsls	r2, r2, #2
 800d48e:	b570      	push	{r4, r5, r6, lr}
 800d490:	f1c2 0620 	rsb	r6, r2, #32
 800d494:	6843      	ldr	r3, [r0, #4]
 800d496:	6804      	ldr	r4, [r0, #0]
 800d498:	fa03 f506 	lsl.w	r5, r3, r6
 800d49c:	432c      	orrs	r4, r5
 800d49e:	40d3      	lsrs	r3, r2
 800d4a0:	6004      	str	r4, [r0, #0]
 800d4a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d4a6:	4288      	cmp	r0, r1
 800d4a8:	d3f4      	bcc.n	800d494 <L_shift+0xc>
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}

0800d4ac <__match>:
 800d4ac:	b530      	push	{r4, r5, lr}
 800d4ae:	6803      	ldr	r3, [r0, #0]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4b6:	b914      	cbnz	r4, 800d4be <__match+0x12>
 800d4b8:	6003      	str	r3, [r0, #0]
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	bd30      	pop	{r4, r5, pc}
 800d4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d4c6:	2d19      	cmp	r5, #25
 800d4c8:	bf98      	it	ls
 800d4ca:	3220      	addls	r2, #32
 800d4cc:	42a2      	cmp	r2, r4
 800d4ce:	d0f0      	beq.n	800d4b2 <__match+0x6>
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	e7f3      	b.n	800d4bc <__match+0x10>

0800d4d4 <__hexnan>:
 800d4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d8:	680b      	ldr	r3, [r1, #0]
 800d4da:	115e      	asrs	r6, r3, #5
 800d4dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d4e0:	f013 031f 	ands.w	r3, r3, #31
 800d4e4:	b087      	sub	sp, #28
 800d4e6:	bf18      	it	ne
 800d4e8:	3604      	addne	r6, #4
 800d4ea:	2500      	movs	r5, #0
 800d4ec:	1f37      	subs	r7, r6, #4
 800d4ee:	4690      	mov	r8, r2
 800d4f0:	6802      	ldr	r2, [r0, #0]
 800d4f2:	9301      	str	r3, [sp, #4]
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d4fa:	46b9      	mov	r9, r7
 800d4fc:	463c      	mov	r4, r7
 800d4fe:	9502      	str	r5, [sp, #8]
 800d500:	46ab      	mov	fp, r5
 800d502:	7851      	ldrb	r1, [r2, #1]
 800d504:	1c53      	adds	r3, r2, #1
 800d506:	9303      	str	r3, [sp, #12]
 800d508:	b341      	cbz	r1, 800d55c <__hexnan+0x88>
 800d50a:	4608      	mov	r0, r1
 800d50c:	9205      	str	r2, [sp, #20]
 800d50e:	9104      	str	r1, [sp, #16]
 800d510:	f7ff fd5e 	bl	800cfd0 <__hexdig_fun>
 800d514:	2800      	cmp	r0, #0
 800d516:	d14f      	bne.n	800d5b8 <__hexnan+0xe4>
 800d518:	9904      	ldr	r1, [sp, #16]
 800d51a:	9a05      	ldr	r2, [sp, #20]
 800d51c:	2920      	cmp	r1, #32
 800d51e:	d818      	bhi.n	800d552 <__hexnan+0x7e>
 800d520:	9b02      	ldr	r3, [sp, #8]
 800d522:	459b      	cmp	fp, r3
 800d524:	dd13      	ble.n	800d54e <__hexnan+0x7a>
 800d526:	454c      	cmp	r4, r9
 800d528:	d206      	bcs.n	800d538 <__hexnan+0x64>
 800d52a:	2d07      	cmp	r5, #7
 800d52c:	dc04      	bgt.n	800d538 <__hexnan+0x64>
 800d52e:	462a      	mov	r2, r5
 800d530:	4649      	mov	r1, r9
 800d532:	4620      	mov	r0, r4
 800d534:	f7ff ffa8 	bl	800d488 <L_shift>
 800d538:	4544      	cmp	r4, r8
 800d53a:	d950      	bls.n	800d5de <__hexnan+0x10a>
 800d53c:	2300      	movs	r3, #0
 800d53e:	f1a4 0904 	sub.w	r9, r4, #4
 800d542:	f844 3c04 	str.w	r3, [r4, #-4]
 800d546:	f8cd b008 	str.w	fp, [sp, #8]
 800d54a:	464c      	mov	r4, r9
 800d54c:	461d      	mov	r5, r3
 800d54e:	9a03      	ldr	r2, [sp, #12]
 800d550:	e7d7      	b.n	800d502 <__hexnan+0x2e>
 800d552:	2929      	cmp	r1, #41	; 0x29
 800d554:	d156      	bne.n	800d604 <__hexnan+0x130>
 800d556:	3202      	adds	r2, #2
 800d558:	f8ca 2000 	str.w	r2, [sl]
 800d55c:	f1bb 0f00 	cmp.w	fp, #0
 800d560:	d050      	beq.n	800d604 <__hexnan+0x130>
 800d562:	454c      	cmp	r4, r9
 800d564:	d206      	bcs.n	800d574 <__hexnan+0xa0>
 800d566:	2d07      	cmp	r5, #7
 800d568:	dc04      	bgt.n	800d574 <__hexnan+0xa0>
 800d56a:	462a      	mov	r2, r5
 800d56c:	4649      	mov	r1, r9
 800d56e:	4620      	mov	r0, r4
 800d570:	f7ff ff8a 	bl	800d488 <L_shift>
 800d574:	4544      	cmp	r4, r8
 800d576:	d934      	bls.n	800d5e2 <__hexnan+0x10e>
 800d578:	f1a8 0204 	sub.w	r2, r8, #4
 800d57c:	4623      	mov	r3, r4
 800d57e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d582:	f842 1f04 	str.w	r1, [r2, #4]!
 800d586:	429f      	cmp	r7, r3
 800d588:	d2f9      	bcs.n	800d57e <__hexnan+0xaa>
 800d58a:	1b3b      	subs	r3, r7, r4
 800d58c:	f023 0303 	bic.w	r3, r3, #3
 800d590:	3304      	adds	r3, #4
 800d592:	3401      	adds	r4, #1
 800d594:	3e03      	subs	r6, #3
 800d596:	42b4      	cmp	r4, r6
 800d598:	bf88      	it	hi
 800d59a:	2304      	movhi	r3, #4
 800d59c:	4443      	add	r3, r8
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f843 2b04 	str.w	r2, [r3], #4
 800d5a4:	429f      	cmp	r7, r3
 800d5a6:	d2fb      	bcs.n	800d5a0 <__hexnan+0xcc>
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	b91b      	cbnz	r3, 800d5b4 <__hexnan+0xe0>
 800d5ac:	4547      	cmp	r7, r8
 800d5ae:	d127      	bne.n	800d600 <__hexnan+0x12c>
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	603b      	str	r3, [r7, #0]
 800d5b4:	2005      	movs	r0, #5
 800d5b6:	e026      	b.n	800d606 <__hexnan+0x132>
 800d5b8:	3501      	adds	r5, #1
 800d5ba:	2d08      	cmp	r5, #8
 800d5bc:	f10b 0b01 	add.w	fp, fp, #1
 800d5c0:	dd06      	ble.n	800d5d0 <__hexnan+0xfc>
 800d5c2:	4544      	cmp	r4, r8
 800d5c4:	d9c3      	bls.n	800d54e <__hexnan+0x7a>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5cc:	2501      	movs	r5, #1
 800d5ce:	3c04      	subs	r4, #4
 800d5d0:	6822      	ldr	r2, [r4, #0]
 800d5d2:	f000 000f 	and.w	r0, r0, #15
 800d5d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d5da:	6022      	str	r2, [r4, #0]
 800d5dc:	e7b7      	b.n	800d54e <__hexnan+0x7a>
 800d5de:	2508      	movs	r5, #8
 800d5e0:	e7b5      	b.n	800d54e <__hexnan+0x7a>
 800d5e2:	9b01      	ldr	r3, [sp, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d0df      	beq.n	800d5a8 <__hexnan+0xd4>
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ec:	f1c3 0320 	rsb	r3, r3, #32
 800d5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d5f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d5f8:	401a      	ands	r2, r3
 800d5fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800d5fe:	e7d3      	b.n	800d5a8 <__hexnan+0xd4>
 800d600:	3f04      	subs	r7, #4
 800d602:	e7d1      	b.n	800d5a8 <__hexnan+0xd4>
 800d604:	2004      	movs	r0, #4
 800d606:	b007      	add	sp, #28
 800d608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d60c <_localeconv_r>:
 800d60c:	4800      	ldr	r0, [pc, #0]	; (800d610 <_localeconv_r+0x4>)
 800d60e:	4770      	bx	lr
 800d610:	20000254 	.word	0x20000254

0800d614 <_lseek_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4d07      	ldr	r5, [pc, #28]	; (800d634 <_lseek_r+0x20>)
 800d618:	4604      	mov	r4, r0
 800d61a:	4608      	mov	r0, r1
 800d61c:	4611      	mov	r1, r2
 800d61e:	2200      	movs	r2, #0
 800d620:	602a      	str	r2, [r5, #0]
 800d622:	461a      	mov	r2, r3
 800d624:	f7f4 ff9c 	bl	8002560 <_lseek>
 800d628:	1c43      	adds	r3, r0, #1
 800d62a:	d102      	bne.n	800d632 <_lseek_r+0x1e>
 800d62c:	682b      	ldr	r3, [r5, #0]
 800d62e:	b103      	cbz	r3, 800d632 <_lseek_r+0x1e>
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	bd38      	pop	{r3, r4, r5, pc}
 800d634:	20002e34 	.word	0x20002e34

0800d638 <__ascii_mbtowc>:
 800d638:	b082      	sub	sp, #8
 800d63a:	b901      	cbnz	r1, 800d63e <__ascii_mbtowc+0x6>
 800d63c:	a901      	add	r1, sp, #4
 800d63e:	b142      	cbz	r2, 800d652 <__ascii_mbtowc+0x1a>
 800d640:	b14b      	cbz	r3, 800d656 <__ascii_mbtowc+0x1e>
 800d642:	7813      	ldrb	r3, [r2, #0]
 800d644:	600b      	str	r3, [r1, #0]
 800d646:	7812      	ldrb	r2, [r2, #0]
 800d648:	1e10      	subs	r0, r2, #0
 800d64a:	bf18      	it	ne
 800d64c:	2001      	movne	r0, #1
 800d64e:	b002      	add	sp, #8
 800d650:	4770      	bx	lr
 800d652:	4610      	mov	r0, r2
 800d654:	e7fb      	b.n	800d64e <__ascii_mbtowc+0x16>
 800d656:	f06f 0001 	mvn.w	r0, #1
 800d65a:	e7f8      	b.n	800d64e <__ascii_mbtowc+0x16>

0800d65c <__malloc_lock>:
 800d65c:	4801      	ldr	r0, [pc, #4]	; (800d664 <__malloc_lock+0x8>)
 800d65e:	f001 bc6b 	b.w	800ef38 <__retarget_lock_acquire_recursive>
 800d662:	bf00      	nop
 800d664:	20002e38 	.word	0x20002e38

0800d668 <__malloc_unlock>:
 800d668:	4801      	ldr	r0, [pc, #4]	; (800d670 <__malloc_unlock+0x8>)
 800d66a:	f001 bc66 	b.w	800ef3a <__retarget_lock_release_recursive>
 800d66e:	bf00      	nop
 800d670:	20002e38 	.word	0x20002e38

0800d674 <_Balloc>:
 800d674:	b570      	push	{r4, r5, r6, lr}
 800d676:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d678:	4604      	mov	r4, r0
 800d67a:	460d      	mov	r5, r1
 800d67c:	b976      	cbnz	r6, 800d69c <_Balloc+0x28>
 800d67e:	2010      	movs	r0, #16
 800d680:	f7fc fee0 	bl	800a444 <malloc>
 800d684:	4602      	mov	r2, r0
 800d686:	6260      	str	r0, [r4, #36]	; 0x24
 800d688:	b920      	cbnz	r0, 800d694 <_Balloc+0x20>
 800d68a:	4b18      	ldr	r3, [pc, #96]	; (800d6ec <_Balloc+0x78>)
 800d68c:	4818      	ldr	r0, [pc, #96]	; (800d6f0 <_Balloc+0x7c>)
 800d68e:	2166      	movs	r1, #102	; 0x66
 800d690:	f001 fa6a 	bl	800eb68 <__assert_func>
 800d694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d698:	6006      	str	r6, [r0, #0]
 800d69a:	60c6      	str	r6, [r0, #12]
 800d69c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d69e:	68f3      	ldr	r3, [r6, #12]
 800d6a0:	b183      	cbz	r3, 800d6c4 <_Balloc+0x50>
 800d6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6aa:	b9b8      	cbnz	r0, 800d6dc <_Balloc+0x68>
 800d6ac:	2101      	movs	r1, #1
 800d6ae:	fa01 f605 	lsl.w	r6, r1, r5
 800d6b2:	1d72      	adds	r2, r6, #5
 800d6b4:	0092      	lsls	r2, r2, #2
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f000 fc9d 	bl	800dff6 <_calloc_r>
 800d6bc:	b160      	cbz	r0, 800d6d8 <_Balloc+0x64>
 800d6be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6c2:	e00e      	b.n	800d6e2 <_Balloc+0x6e>
 800d6c4:	2221      	movs	r2, #33	; 0x21
 800d6c6:	2104      	movs	r1, #4
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f000 fc94 	bl	800dff6 <_calloc_r>
 800d6ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6d0:	60f0      	str	r0, [r6, #12]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d1e4      	bne.n	800d6a2 <_Balloc+0x2e>
 800d6d8:	2000      	movs	r0, #0
 800d6da:	bd70      	pop	{r4, r5, r6, pc}
 800d6dc:	6802      	ldr	r2, [r0, #0]
 800d6de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6e8:	e7f7      	b.n	800d6da <_Balloc+0x66>
 800d6ea:	bf00      	nop
 800d6ec:	0800fe26 	.word	0x0800fe26
 800d6f0:	0800ff24 	.word	0x0800ff24

0800d6f4 <_Bfree>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6f8:	4605      	mov	r5, r0
 800d6fa:	460c      	mov	r4, r1
 800d6fc:	b976      	cbnz	r6, 800d71c <_Bfree+0x28>
 800d6fe:	2010      	movs	r0, #16
 800d700:	f7fc fea0 	bl	800a444 <malloc>
 800d704:	4602      	mov	r2, r0
 800d706:	6268      	str	r0, [r5, #36]	; 0x24
 800d708:	b920      	cbnz	r0, 800d714 <_Bfree+0x20>
 800d70a:	4b09      	ldr	r3, [pc, #36]	; (800d730 <_Bfree+0x3c>)
 800d70c:	4809      	ldr	r0, [pc, #36]	; (800d734 <_Bfree+0x40>)
 800d70e:	218a      	movs	r1, #138	; 0x8a
 800d710:	f001 fa2a 	bl	800eb68 <__assert_func>
 800d714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d718:	6006      	str	r6, [r0, #0]
 800d71a:	60c6      	str	r6, [r0, #12]
 800d71c:	b13c      	cbz	r4, 800d72e <_Bfree+0x3a>
 800d71e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d720:	6862      	ldr	r2, [r4, #4]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d728:	6021      	str	r1, [r4, #0]
 800d72a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	0800fe26 	.word	0x0800fe26
 800d734:	0800ff24 	.word	0x0800ff24

0800d738 <__multadd>:
 800d738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d73c:	690d      	ldr	r5, [r1, #16]
 800d73e:	4607      	mov	r7, r0
 800d740:	460c      	mov	r4, r1
 800d742:	461e      	mov	r6, r3
 800d744:	f101 0c14 	add.w	ip, r1, #20
 800d748:	2000      	movs	r0, #0
 800d74a:	f8dc 3000 	ldr.w	r3, [ip]
 800d74e:	b299      	uxth	r1, r3
 800d750:	fb02 6101 	mla	r1, r2, r1, r6
 800d754:	0c1e      	lsrs	r6, r3, #16
 800d756:	0c0b      	lsrs	r3, r1, #16
 800d758:	fb02 3306 	mla	r3, r2, r6, r3
 800d75c:	b289      	uxth	r1, r1
 800d75e:	3001      	adds	r0, #1
 800d760:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d764:	4285      	cmp	r5, r0
 800d766:	f84c 1b04 	str.w	r1, [ip], #4
 800d76a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d76e:	dcec      	bgt.n	800d74a <__multadd+0x12>
 800d770:	b30e      	cbz	r6, 800d7b6 <__multadd+0x7e>
 800d772:	68a3      	ldr	r3, [r4, #8]
 800d774:	42ab      	cmp	r3, r5
 800d776:	dc19      	bgt.n	800d7ac <__multadd+0x74>
 800d778:	6861      	ldr	r1, [r4, #4]
 800d77a:	4638      	mov	r0, r7
 800d77c:	3101      	adds	r1, #1
 800d77e:	f7ff ff79 	bl	800d674 <_Balloc>
 800d782:	4680      	mov	r8, r0
 800d784:	b928      	cbnz	r0, 800d792 <__multadd+0x5a>
 800d786:	4602      	mov	r2, r0
 800d788:	4b0c      	ldr	r3, [pc, #48]	; (800d7bc <__multadd+0x84>)
 800d78a:	480d      	ldr	r0, [pc, #52]	; (800d7c0 <__multadd+0x88>)
 800d78c:	21b5      	movs	r1, #181	; 0xb5
 800d78e:	f001 f9eb 	bl	800eb68 <__assert_func>
 800d792:	6922      	ldr	r2, [r4, #16]
 800d794:	3202      	adds	r2, #2
 800d796:	f104 010c 	add.w	r1, r4, #12
 800d79a:	0092      	lsls	r2, r2, #2
 800d79c:	300c      	adds	r0, #12
 800d79e:	f7fc fe61 	bl	800a464 <memcpy>
 800d7a2:	4621      	mov	r1, r4
 800d7a4:	4638      	mov	r0, r7
 800d7a6:	f7ff ffa5 	bl	800d6f4 <_Bfree>
 800d7aa:	4644      	mov	r4, r8
 800d7ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7b0:	3501      	adds	r5, #1
 800d7b2:	615e      	str	r6, [r3, #20]
 800d7b4:	6125      	str	r5, [r4, #16]
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7bc:	0800fe98 	.word	0x0800fe98
 800d7c0:	0800ff24 	.word	0x0800ff24

0800d7c4 <__s2b>:
 800d7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c8:	460c      	mov	r4, r1
 800d7ca:	4615      	mov	r5, r2
 800d7cc:	461f      	mov	r7, r3
 800d7ce:	2209      	movs	r2, #9
 800d7d0:	3308      	adds	r3, #8
 800d7d2:	4606      	mov	r6, r0
 800d7d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7d8:	2100      	movs	r1, #0
 800d7da:	2201      	movs	r2, #1
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	db09      	blt.n	800d7f4 <__s2b+0x30>
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f7ff ff47 	bl	800d674 <_Balloc>
 800d7e6:	b940      	cbnz	r0, 800d7fa <__s2b+0x36>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	4b19      	ldr	r3, [pc, #100]	; (800d850 <__s2b+0x8c>)
 800d7ec:	4819      	ldr	r0, [pc, #100]	; (800d854 <__s2b+0x90>)
 800d7ee:	21ce      	movs	r1, #206	; 0xce
 800d7f0:	f001 f9ba 	bl	800eb68 <__assert_func>
 800d7f4:	0052      	lsls	r2, r2, #1
 800d7f6:	3101      	adds	r1, #1
 800d7f8:	e7f0      	b.n	800d7dc <__s2b+0x18>
 800d7fa:	9b08      	ldr	r3, [sp, #32]
 800d7fc:	6143      	str	r3, [r0, #20]
 800d7fe:	2d09      	cmp	r5, #9
 800d800:	f04f 0301 	mov.w	r3, #1
 800d804:	6103      	str	r3, [r0, #16]
 800d806:	dd16      	ble.n	800d836 <__s2b+0x72>
 800d808:	f104 0909 	add.w	r9, r4, #9
 800d80c:	46c8      	mov	r8, r9
 800d80e:	442c      	add	r4, r5
 800d810:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d814:	4601      	mov	r1, r0
 800d816:	3b30      	subs	r3, #48	; 0x30
 800d818:	220a      	movs	r2, #10
 800d81a:	4630      	mov	r0, r6
 800d81c:	f7ff ff8c 	bl	800d738 <__multadd>
 800d820:	45a0      	cmp	r8, r4
 800d822:	d1f5      	bne.n	800d810 <__s2b+0x4c>
 800d824:	f1a5 0408 	sub.w	r4, r5, #8
 800d828:	444c      	add	r4, r9
 800d82a:	1b2d      	subs	r5, r5, r4
 800d82c:	1963      	adds	r3, r4, r5
 800d82e:	42bb      	cmp	r3, r7
 800d830:	db04      	blt.n	800d83c <__s2b+0x78>
 800d832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d836:	340a      	adds	r4, #10
 800d838:	2509      	movs	r5, #9
 800d83a:	e7f6      	b.n	800d82a <__s2b+0x66>
 800d83c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d840:	4601      	mov	r1, r0
 800d842:	3b30      	subs	r3, #48	; 0x30
 800d844:	220a      	movs	r2, #10
 800d846:	4630      	mov	r0, r6
 800d848:	f7ff ff76 	bl	800d738 <__multadd>
 800d84c:	e7ee      	b.n	800d82c <__s2b+0x68>
 800d84e:	bf00      	nop
 800d850:	0800fe98 	.word	0x0800fe98
 800d854:	0800ff24 	.word	0x0800ff24

0800d858 <__hi0bits>:
 800d858:	0c03      	lsrs	r3, r0, #16
 800d85a:	041b      	lsls	r3, r3, #16
 800d85c:	b9d3      	cbnz	r3, 800d894 <__hi0bits+0x3c>
 800d85e:	0400      	lsls	r0, r0, #16
 800d860:	2310      	movs	r3, #16
 800d862:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d866:	bf04      	itt	eq
 800d868:	0200      	lsleq	r0, r0, #8
 800d86a:	3308      	addeq	r3, #8
 800d86c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d870:	bf04      	itt	eq
 800d872:	0100      	lsleq	r0, r0, #4
 800d874:	3304      	addeq	r3, #4
 800d876:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d87a:	bf04      	itt	eq
 800d87c:	0080      	lsleq	r0, r0, #2
 800d87e:	3302      	addeq	r3, #2
 800d880:	2800      	cmp	r0, #0
 800d882:	db05      	blt.n	800d890 <__hi0bits+0x38>
 800d884:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d888:	f103 0301 	add.w	r3, r3, #1
 800d88c:	bf08      	it	eq
 800d88e:	2320      	moveq	r3, #32
 800d890:	4618      	mov	r0, r3
 800d892:	4770      	bx	lr
 800d894:	2300      	movs	r3, #0
 800d896:	e7e4      	b.n	800d862 <__hi0bits+0xa>

0800d898 <__lo0bits>:
 800d898:	6803      	ldr	r3, [r0, #0]
 800d89a:	f013 0207 	ands.w	r2, r3, #7
 800d89e:	4601      	mov	r1, r0
 800d8a0:	d00b      	beq.n	800d8ba <__lo0bits+0x22>
 800d8a2:	07da      	lsls	r2, r3, #31
 800d8a4:	d423      	bmi.n	800d8ee <__lo0bits+0x56>
 800d8a6:	0798      	lsls	r0, r3, #30
 800d8a8:	bf49      	itett	mi
 800d8aa:	085b      	lsrmi	r3, r3, #1
 800d8ac:	089b      	lsrpl	r3, r3, #2
 800d8ae:	2001      	movmi	r0, #1
 800d8b0:	600b      	strmi	r3, [r1, #0]
 800d8b2:	bf5c      	itt	pl
 800d8b4:	600b      	strpl	r3, [r1, #0]
 800d8b6:	2002      	movpl	r0, #2
 800d8b8:	4770      	bx	lr
 800d8ba:	b298      	uxth	r0, r3
 800d8bc:	b9a8      	cbnz	r0, 800d8ea <__lo0bits+0x52>
 800d8be:	0c1b      	lsrs	r3, r3, #16
 800d8c0:	2010      	movs	r0, #16
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	b90a      	cbnz	r2, 800d8ca <__lo0bits+0x32>
 800d8c6:	3008      	adds	r0, #8
 800d8c8:	0a1b      	lsrs	r3, r3, #8
 800d8ca:	071a      	lsls	r2, r3, #28
 800d8cc:	bf04      	itt	eq
 800d8ce:	091b      	lsreq	r3, r3, #4
 800d8d0:	3004      	addeq	r0, #4
 800d8d2:	079a      	lsls	r2, r3, #30
 800d8d4:	bf04      	itt	eq
 800d8d6:	089b      	lsreq	r3, r3, #2
 800d8d8:	3002      	addeq	r0, #2
 800d8da:	07da      	lsls	r2, r3, #31
 800d8dc:	d403      	bmi.n	800d8e6 <__lo0bits+0x4e>
 800d8de:	085b      	lsrs	r3, r3, #1
 800d8e0:	f100 0001 	add.w	r0, r0, #1
 800d8e4:	d005      	beq.n	800d8f2 <__lo0bits+0x5a>
 800d8e6:	600b      	str	r3, [r1, #0]
 800d8e8:	4770      	bx	lr
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	e7e9      	b.n	800d8c2 <__lo0bits+0x2a>
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	4770      	bx	lr
 800d8f2:	2020      	movs	r0, #32
 800d8f4:	4770      	bx	lr
	...

0800d8f8 <__i2b>:
 800d8f8:	b510      	push	{r4, lr}
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	2101      	movs	r1, #1
 800d8fe:	f7ff feb9 	bl	800d674 <_Balloc>
 800d902:	4602      	mov	r2, r0
 800d904:	b928      	cbnz	r0, 800d912 <__i2b+0x1a>
 800d906:	4b05      	ldr	r3, [pc, #20]	; (800d91c <__i2b+0x24>)
 800d908:	4805      	ldr	r0, [pc, #20]	; (800d920 <__i2b+0x28>)
 800d90a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d90e:	f001 f92b 	bl	800eb68 <__assert_func>
 800d912:	2301      	movs	r3, #1
 800d914:	6144      	str	r4, [r0, #20]
 800d916:	6103      	str	r3, [r0, #16]
 800d918:	bd10      	pop	{r4, pc}
 800d91a:	bf00      	nop
 800d91c:	0800fe98 	.word	0x0800fe98
 800d920:	0800ff24 	.word	0x0800ff24

0800d924 <__multiply>:
 800d924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d928:	4691      	mov	r9, r2
 800d92a:	690a      	ldr	r2, [r1, #16]
 800d92c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d930:	429a      	cmp	r2, r3
 800d932:	bfb8      	it	lt
 800d934:	460b      	movlt	r3, r1
 800d936:	460c      	mov	r4, r1
 800d938:	bfbc      	itt	lt
 800d93a:	464c      	movlt	r4, r9
 800d93c:	4699      	movlt	r9, r3
 800d93e:	6927      	ldr	r7, [r4, #16]
 800d940:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d944:	68a3      	ldr	r3, [r4, #8]
 800d946:	6861      	ldr	r1, [r4, #4]
 800d948:	eb07 060a 	add.w	r6, r7, sl
 800d94c:	42b3      	cmp	r3, r6
 800d94e:	b085      	sub	sp, #20
 800d950:	bfb8      	it	lt
 800d952:	3101      	addlt	r1, #1
 800d954:	f7ff fe8e 	bl	800d674 <_Balloc>
 800d958:	b930      	cbnz	r0, 800d968 <__multiply+0x44>
 800d95a:	4602      	mov	r2, r0
 800d95c:	4b44      	ldr	r3, [pc, #272]	; (800da70 <__multiply+0x14c>)
 800d95e:	4845      	ldr	r0, [pc, #276]	; (800da74 <__multiply+0x150>)
 800d960:	f240 115d 	movw	r1, #349	; 0x15d
 800d964:	f001 f900 	bl	800eb68 <__assert_func>
 800d968:	f100 0514 	add.w	r5, r0, #20
 800d96c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d970:	462b      	mov	r3, r5
 800d972:	2200      	movs	r2, #0
 800d974:	4543      	cmp	r3, r8
 800d976:	d321      	bcc.n	800d9bc <__multiply+0x98>
 800d978:	f104 0314 	add.w	r3, r4, #20
 800d97c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d980:	f109 0314 	add.w	r3, r9, #20
 800d984:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d988:	9202      	str	r2, [sp, #8]
 800d98a:	1b3a      	subs	r2, r7, r4
 800d98c:	3a15      	subs	r2, #21
 800d98e:	f022 0203 	bic.w	r2, r2, #3
 800d992:	3204      	adds	r2, #4
 800d994:	f104 0115 	add.w	r1, r4, #21
 800d998:	428f      	cmp	r7, r1
 800d99a:	bf38      	it	cc
 800d99c:	2204      	movcc	r2, #4
 800d99e:	9201      	str	r2, [sp, #4]
 800d9a0:	9a02      	ldr	r2, [sp, #8]
 800d9a2:	9303      	str	r3, [sp, #12]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d80c      	bhi.n	800d9c2 <__multiply+0x9e>
 800d9a8:	2e00      	cmp	r6, #0
 800d9aa:	dd03      	ble.n	800d9b4 <__multiply+0x90>
 800d9ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d05a      	beq.n	800da6a <__multiply+0x146>
 800d9b4:	6106      	str	r6, [r0, #16]
 800d9b6:	b005      	add	sp, #20
 800d9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9bc:	f843 2b04 	str.w	r2, [r3], #4
 800d9c0:	e7d8      	b.n	800d974 <__multiply+0x50>
 800d9c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d9c6:	f1ba 0f00 	cmp.w	sl, #0
 800d9ca:	d024      	beq.n	800da16 <__multiply+0xf2>
 800d9cc:	f104 0e14 	add.w	lr, r4, #20
 800d9d0:	46a9      	mov	r9, r5
 800d9d2:	f04f 0c00 	mov.w	ip, #0
 800d9d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d9da:	f8d9 1000 	ldr.w	r1, [r9]
 800d9de:	fa1f fb82 	uxth.w	fp, r2
 800d9e2:	b289      	uxth	r1, r1
 800d9e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d9e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d9ec:	f8d9 2000 	ldr.w	r2, [r9]
 800d9f0:	4461      	add	r1, ip
 800d9f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d9f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800d9fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d9fe:	b289      	uxth	r1, r1
 800da00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da04:	4577      	cmp	r7, lr
 800da06:	f849 1b04 	str.w	r1, [r9], #4
 800da0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da0e:	d8e2      	bhi.n	800d9d6 <__multiply+0xb2>
 800da10:	9a01      	ldr	r2, [sp, #4]
 800da12:	f845 c002 	str.w	ip, [r5, r2]
 800da16:	9a03      	ldr	r2, [sp, #12]
 800da18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da1c:	3304      	adds	r3, #4
 800da1e:	f1b9 0f00 	cmp.w	r9, #0
 800da22:	d020      	beq.n	800da66 <__multiply+0x142>
 800da24:	6829      	ldr	r1, [r5, #0]
 800da26:	f104 0c14 	add.w	ip, r4, #20
 800da2a:	46ae      	mov	lr, r5
 800da2c:	f04f 0a00 	mov.w	sl, #0
 800da30:	f8bc b000 	ldrh.w	fp, [ip]
 800da34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800da38:	fb09 220b 	mla	r2, r9, fp, r2
 800da3c:	4492      	add	sl, r2
 800da3e:	b289      	uxth	r1, r1
 800da40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800da44:	f84e 1b04 	str.w	r1, [lr], #4
 800da48:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da4c:	f8be 1000 	ldrh.w	r1, [lr]
 800da50:	0c12      	lsrs	r2, r2, #16
 800da52:	fb09 1102 	mla	r1, r9, r2, r1
 800da56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800da5a:	4567      	cmp	r7, ip
 800da5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800da60:	d8e6      	bhi.n	800da30 <__multiply+0x10c>
 800da62:	9a01      	ldr	r2, [sp, #4]
 800da64:	50a9      	str	r1, [r5, r2]
 800da66:	3504      	adds	r5, #4
 800da68:	e79a      	b.n	800d9a0 <__multiply+0x7c>
 800da6a:	3e01      	subs	r6, #1
 800da6c:	e79c      	b.n	800d9a8 <__multiply+0x84>
 800da6e:	bf00      	nop
 800da70:	0800fe98 	.word	0x0800fe98
 800da74:	0800ff24 	.word	0x0800ff24

0800da78 <__pow5mult>:
 800da78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da7c:	4615      	mov	r5, r2
 800da7e:	f012 0203 	ands.w	r2, r2, #3
 800da82:	4606      	mov	r6, r0
 800da84:	460f      	mov	r7, r1
 800da86:	d007      	beq.n	800da98 <__pow5mult+0x20>
 800da88:	4c25      	ldr	r4, [pc, #148]	; (800db20 <__pow5mult+0xa8>)
 800da8a:	3a01      	subs	r2, #1
 800da8c:	2300      	movs	r3, #0
 800da8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da92:	f7ff fe51 	bl	800d738 <__multadd>
 800da96:	4607      	mov	r7, r0
 800da98:	10ad      	asrs	r5, r5, #2
 800da9a:	d03d      	beq.n	800db18 <__pow5mult+0xa0>
 800da9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da9e:	b97c      	cbnz	r4, 800dac0 <__pow5mult+0x48>
 800daa0:	2010      	movs	r0, #16
 800daa2:	f7fc fccf 	bl	800a444 <malloc>
 800daa6:	4602      	mov	r2, r0
 800daa8:	6270      	str	r0, [r6, #36]	; 0x24
 800daaa:	b928      	cbnz	r0, 800dab8 <__pow5mult+0x40>
 800daac:	4b1d      	ldr	r3, [pc, #116]	; (800db24 <__pow5mult+0xac>)
 800daae:	481e      	ldr	r0, [pc, #120]	; (800db28 <__pow5mult+0xb0>)
 800dab0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dab4:	f001 f858 	bl	800eb68 <__assert_func>
 800dab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dabc:	6004      	str	r4, [r0, #0]
 800dabe:	60c4      	str	r4, [r0, #12]
 800dac0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dac8:	b94c      	cbnz	r4, 800dade <__pow5mult+0x66>
 800daca:	f240 2171 	movw	r1, #625	; 0x271
 800dace:	4630      	mov	r0, r6
 800dad0:	f7ff ff12 	bl	800d8f8 <__i2b>
 800dad4:	2300      	movs	r3, #0
 800dad6:	f8c8 0008 	str.w	r0, [r8, #8]
 800dada:	4604      	mov	r4, r0
 800dadc:	6003      	str	r3, [r0, #0]
 800dade:	f04f 0900 	mov.w	r9, #0
 800dae2:	07eb      	lsls	r3, r5, #31
 800dae4:	d50a      	bpl.n	800dafc <__pow5mult+0x84>
 800dae6:	4639      	mov	r1, r7
 800dae8:	4622      	mov	r2, r4
 800daea:	4630      	mov	r0, r6
 800daec:	f7ff ff1a 	bl	800d924 <__multiply>
 800daf0:	4639      	mov	r1, r7
 800daf2:	4680      	mov	r8, r0
 800daf4:	4630      	mov	r0, r6
 800daf6:	f7ff fdfd 	bl	800d6f4 <_Bfree>
 800dafa:	4647      	mov	r7, r8
 800dafc:	106d      	asrs	r5, r5, #1
 800dafe:	d00b      	beq.n	800db18 <__pow5mult+0xa0>
 800db00:	6820      	ldr	r0, [r4, #0]
 800db02:	b938      	cbnz	r0, 800db14 <__pow5mult+0x9c>
 800db04:	4622      	mov	r2, r4
 800db06:	4621      	mov	r1, r4
 800db08:	4630      	mov	r0, r6
 800db0a:	f7ff ff0b 	bl	800d924 <__multiply>
 800db0e:	6020      	str	r0, [r4, #0]
 800db10:	f8c0 9000 	str.w	r9, [r0]
 800db14:	4604      	mov	r4, r0
 800db16:	e7e4      	b.n	800dae2 <__pow5mult+0x6a>
 800db18:	4638      	mov	r0, r7
 800db1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db1e:	bf00      	nop
 800db20:	08010070 	.word	0x08010070
 800db24:	0800fe26 	.word	0x0800fe26
 800db28:	0800ff24 	.word	0x0800ff24

0800db2c <__lshift>:
 800db2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db30:	460c      	mov	r4, r1
 800db32:	6849      	ldr	r1, [r1, #4]
 800db34:	6923      	ldr	r3, [r4, #16]
 800db36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db3a:	68a3      	ldr	r3, [r4, #8]
 800db3c:	4607      	mov	r7, r0
 800db3e:	4691      	mov	r9, r2
 800db40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db44:	f108 0601 	add.w	r6, r8, #1
 800db48:	42b3      	cmp	r3, r6
 800db4a:	db0b      	blt.n	800db64 <__lshift+0x38>
 800db4c:	4638      	mov	r0, r7
 800db4e:	f7ff fd91 	bl	800d674 <_Balloc>
 800db52:	4605      	mov	r5, r0
 800db54:	b948      	cbnz	r0, 800db6a <__lshift+0x3e>
 800db56:	4602      	mov	r2, r0
 800db58:	4b2a      	ldr	r3, [pc, #168]	; (800dc04 <__lshift+0xd8>)
 800db5a:	482b      	ldr	r0, [pc, #172]	; (800dc08 <__lshift+0xdc>)
 800db5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800db60:	f001 f802 	bl	800eb68 <__assert_func>
 800db64:	3101      	adds	r1, #1
 800db66:	005b      	lsls	r3, r3, #1
 800db68:	e7ee      	b.n	800db48 <__lshift+0x1c>
 800db6a:	2300      	movs	r3, #0
 800db6c:	f100 0114 	add.w	r1, r0, #20
 800db70:	f100 0210 	add.w	r2, r0, #16
 800db74:	4618      	mov	r0, r3
 800db76:	4553      	cmp	r3, sl
 800db78:	db37      	blt.n	800dbea <__lshift+0xbe>
 800db7a:	6920      	ldr	r0, [r4, #16]
 800db7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db80:	f104 0314 	add.w	r3, r4, #20
 800db84:	f019 091f 	ands.w	r9, r9, #31
 800db88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db90:	d02f      	beq.n	800dbf2 <__lshift+0xc6>
 800db92:	f1c9 0e20 	rsb	lr, r9, #32
 800db96:	468a      	mov	sl, r1
 800db98:	f04f 0c00 	mov.w	ip, #0
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	fa02 f209 	lsl.w	r2, r2, r9
 800dba2:	ea42 020c 	orr.w	r2, r2, ip
 800dba6:	f84a 2b04 	str.w	r2, [sl], #4
 800dbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbae:	4298      	cmp	r0, r3
 800dbb0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dbb4:	d8f2      	bhi.n	800db9c <__lshift+0x70>
 800dbb6:	1b03      	subs	r3, r0, r4
 800dbb8:	3b15      	subs	r3, #21
 800dbba:	f023 0303 	bic.w	r3, r3, #3
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	f104 0215 	add.w	r2, r4, #21
 800dbc4:	4290      	cmp	r0, r2
 800dbc6:	bf38      	it	cc
 800dbc8:	2304      	movcc	r3, #4
 800dbca:	f841 c003 	str.w	ip, [r1, r3]
 800dbce:	f1bc 0f00 	cmp.w	ip, #0
 800dbd2:	d001      	beq.n	800dbd8 <__lshift+0xac>
 800dbd4:	f108 0602 	add.w	r6, r8, #2
 800dbd8:	3e01      	subs	r6, #1
 800dbda:	4638      	mov	r0, r7
 800dbdc:	612e      	str	r6, [r5, #16]
 800dbde:	4621      	mov	r1, r4
 800dbe0:	f7ff fd88 	bl	800d6f4 <_Bfree>
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbea:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbee:	3301      	adds	r3, #1
 800dbf0:	e7c1      	b.n	800db76 <__lshift+0x4a>
 800dbf2:	3904      	subs	r1, #4
 800dbf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbfc:	4298      	cmp	r0, r3
 800dbfe:	d8f9      	bhi.n	800dbf4 <__lshift+0xc8>
 800dc00:	e7ea      	b.n	800dbd8 <__lshift+0xac>
 800dc02:	bf00      	nop
 800dc04:	0800fe98 	.word	0x0800fe98
 800dc08:	0800ff24 	.word	0x0800ff24

0800dc0c <__mcmp>:
 800dc0c:	b530      	push	{r4, r5, lr}
 800dc0e:	6902      	ldr	r2, [r0, #16]
 800dc10:	690c      	ldr	r4, [r1, #16]
 800dc12:	1b12      	subs	r2, r2, r4
 800dc14:	d10e      	bne.n	800dc34 <__mcmp+0x28>
 800dc16:	f100 0314 	add.w	r3, r0, #20
 800dc1a:	3114      	adds	r1, #20
 800dc1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc2c:	42a5      	cmp	r5, r4
 800dc2e:	d003      	beq.n	800dc38 <__mcmp+0x2c>
 800dc30:	d305      	bcc.n	800dc3e <__mcmp+0x32>
 800dc32:	2201      	movs	r2, #1
 800dc34:	4610      	mov	r0, r2
 800dc36:	bd30      	pop	{r4, r5, pc}
 800dc38:	4283      	cmp	r3, r0
 800dc3a:	d3f3      	bcc.n	800dc24 <__mcmp+0x18>
 800dc3c:	e7fa      	b.n	800dc34 <__mcmp+0x28>
 800dc3e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc42:	e7f7      	b.n	800dc34 <__mcmp+0x28>

0800dc44 <__mdiff>:
 800dc44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc48:	460c      	mov	r4, r1
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	4620      	mov	r0, r4
 800dc50:	4690      	mov	r8, r2
 800dc52:	f7ff ffdb 	bl	800dc0c <__mcmp>
 800dc56:	1e05      	subs	r5, r0, #0
 800dc58:	d110      	bne.n	800dc7c <__mdiff+0x38>
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	4630      	mov	r0, r6
 800dc5e:	f7ff fd09 	bl	800d674 <_Balloc>
 800dc62:	b930      	cbnz	r0, 800dc72 <__mdiff+0x2e>
 800dc64:	4b3a      	ldr	r3, [pc, #232]	; (800dd50 <__mdiff+0x10c>)
 800dc66:	4602      	mov	r2, r0
 800dc68:	f240 2132 	movw	r1, #562	; 0x232
 800dc6c:	4839      	ldr	r0, [pc, #228]	; (800dd54 <__mdiff+0x110>)
 800dc6e:	f000 ff7b 	bl	800eb68 <__assert_func>
 800dc72:	2301      	movs	r3, #1
 800dc74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc7c:	bfa4      	itt	ge
 800dc7e:	4643      	movge	r3, r8
 800dc80:	46a0      	movge	r8, r4
 800dc82:	4630      	mov	r0, r6
 800dc84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc88:	bfa6      	itte	ge
 800dc8a:	461c      	movge	r4, r3
 800dc8c:	2500      	movge	r5, #0
 800dc8e:	2501      	movlt	r5, #1
 800dc90:	f7ff fcf0 	bl	800d674 <_Balloc>
 800dc94:	b920      	cbnz	r0, 800dca0 <__mdiff+0x5c>
 800dc96:	4b2e      	ldr	r3, [pc, #184]	; (800dd50 <__mdiff+0x10c>)
 800dc98:	4602      	mov	r2, r0
 800dc9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc9e:	e7e5      	b.n	800dc6c <__mdiff+0x28>
 800dca0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dca4:	6926      	ldr	r6, [r4, #16]
 800dca6:	60c5      	str	r5, [r0, #12]
 800dca8:	f104 0914 	add.w	r9, r4, #20
 800dcac:	f108 0514 	add.w	r5, r8, #20
 800dcb0:	f100 0e14 	add.w	lr, r0, #20
 800dcb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dcb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dcbc:	f108 0210 	add.w	r2, r8, #16
 800dcc0:	46f2      	mov	sl, lr
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dcc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dccc:	fa1f f883 	uxth.w	r8, r3
 800dcd0:	fa11 f18b 	uxtah	r1, r1, fp
 800dcd4:	0c1b      	lsrs	r3, r3, #16
 800dcd6:	eba1 0808 	sub.w	r8, r1, r8
 800dcda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dcde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dce2:	fa1f f888 	uxth.w	r8, r8
 800dce6:	1419      	asrs	r1, r3, #16
 800dce8:	454e      	cmp	r6, r9
 800dcea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dcee:	f84a 3b04 	str.w	r3, [sl], #4
 800dcf2:	d8e7      	bhi.n	800dcc4 <__mdiff+0x80>
 800dcf4:	1b33      	subs	r3, r6, r4
 800dcf6:	3b15      	subs	r3, #21
 800dcf8:	f023 0303 	bic.w	r3, r3, #3
 800dcfc:	3304      	adds	r3, #4
 800dcfe:	3415      	adds	r4, #21
 800dd00:	42a6      	cmp	r6, r4
 800dd02:	bf38      	it	cc
 800dd04:	2304      	movcc	r3, #4
 800dd06:	441d      	add	r5, r3
 800dd08:	4473      	add	r3, lr
 800dd0a:	469e      	mov	lr, r3
 800dd0c:	462e      	mov	r6, r5
 800dd0e:	4566      	cmp	r6, ip
 800dd10:	d30e      	bcc.n	800dd30 <__mdiff+0xec>
 800dd12:	f10c 0203 	add.w	r2, ip, #3
 800dd16:	1b52      	subs	r2, r2, r5
 800dd18:	f022 0203 	bic.w	r2, r2, #3
 800dd1c:	3d03      	subs	r5, #3
 800dd1e:	45ac      	cmp	ip, r5
 800dd20:	bf38      	it	cc
 800dd22:	2200      	movcc	r2, #0
 800dd24:	441a      	add	r2, r3
 800dd26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dd2a:	b17b      	cbz	r3, 800dd4c <__mdiff+0x108>
 800dd2c:	6107      	str	r7, [r0, #16]
 800dd2e:	e7a3      	b.n	800dc78 <__mdiff+0x34>
 800dd30:	f856 8b04 	ldr.w	r8, [r6], #4
 800dd34:	fa11 f288 	uxtah	r2, r1, r8
 800dd38:	1414      	asrs	r4, r2, #16
 800dd3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dd3e:	b292      	uxth	r2, r2
 800dd40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dd44:	f84e 2b04 	str.w	r2, [lr], #4
 800dd48:	1421      	asrs	r1, r4, #16
 800dd4a:	e7e0      	b.n	800dd0e <__mdiff+0xca>
 800dd4c:	3f01      	subs	r7, #1
 800dd4e:	e7ea      	b.n	800dd26 <__mdiff+0xe2>
 800dd50:	0800fe98 	.word	0x0800fe98
 800dd54:	0800ff24 	.word	0x0800ff24

0800dd58 <__ulp>:
 800dd58:	b082      	sub	sp, #8
 800dd5a:	ed8d 0b00 	vstr	d0, [sp]
 800dd5e:	9b01      	ldr	r3, [sp, #4]
 800dd60:	4912      	ldr	r1, [pc, #72]	; (800ddac <__ulp+0x54>)
 800dd62:	4019      	ands	r1, r3
 800dd64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dd68:	2900      	cmp	r1, #0
 800dd6a:	dd05      	ble.n	800dd78 <__ulp+0x20>
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	ec43 2b10 	vmov	d0, r2, r3
 800dd74:	b002      	add	sp, #8
 800dd76:	4770      	bx	lr
 800dd78:	4249      	negs	r1, r1
 800dd7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dd7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dd82:	f04f 0200 	mov.w	r2, #0
 800dd86:	f04f 0300 	mov.w	r3, #0
 800dd8a:	da04      	bge.n	800dd96 <__ulp+0x3e>
 800dd8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dd90:	fa41 f300 	asr.w	r3, r1, r0
 800dd94:	e7ec      	b.n	800dd70 <__ulp+0x18>
 800dd96:	f1a0 0114 	sub.w	r1, r0, #20
 800dd9a:	291e      	cmp	r1, #30
 800dd9c:	bfda      	itte	le
 800dd9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dda2:	fa20 f101 	lsrle.w	r1, r0, r1
 800dda6:	2101      	movgt	r1, #1
 800dda8:	460a      	mov	r2, r1
 800ddaa:	e7e1      	b.n	800dd70 <__ulp+0x18>
 800ddac:	7ff00000 	.word	0x7ff00000

0800ddb0 <__b2d>:
 800ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb2:	6905      	ldr	r5, [r0, #16]
 800ddb4:	f100 0714 	add.w	r7, r0, #20
 800ddb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ddbc:	1f2e      	subs	r6, r5, #4
 800ddbe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f7ff fd48 	bl	800d858 <__hi0bits>
 800ddc8:	f1c0 0320 	rsb	r3, r0, #32
 800ddcc:	280a      	cmp	r0, #10
 800ddce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800de4c <__b2d+0x9c>
 800ddd2:	600b      	str	r3, [r1, #0]
 800ddd4:	dc14      	bgt.n	800de00 <__b2d+0x50>
 800ddd6:	f1c0 0e0b 	rsb	lr, r0, #11
 800ddda:	fa24 f10e 	lsr.w	r1, r4, lr
 800ddde:	42b7      	cmp	r7, r6
 800dde0:	ea41 030c 	orr.w	r3, r1, ip
 800dde4:	bf34      	ite	cc
 800dde6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ddea:	2100      	movcs	r1, #0
 800ddec:	3015      	adds	r0, #21
 800ddee:	fa04 f000 	lsl.w	r0, r4, r0
 800ddf2:	fa21 f10e 	lsr.w	r1, r1, lr
 800ddf6:	ea40 0201 	orr.w	r2, r0, r1
 800ddfa:	ec43 2b10 	vmov	d0, r2, r3
 800ddfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de00:	42b7      	cmp	r7, r6
 800de02:	bf3a      	itte	cc
 800de04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de08:	f1a5 0608 	subcc.w	r6, r5, #8
 800de0c:	2100      	movcs	r1, #0
 800de0e:	380b      	subs	r0, #11
 800de10:	d017      	beq.n	800de42 <__b2d+0x92>
 800de12:	f1c0 0c20 	rsb	ip, r0, #32
 800de16:	fa04 f500 	lsl.w	r5, r4, r0
 800de1a:	42be      	cmp	r6, r7
 800de1c:	fa21 f40c 	lsr.w	r4, r1, ip
 800de20:	ea45 0504 	orr.w	r5, r5, r4
 800de24:	bf8c      	ite	hi
 800de26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800de2a:	2400      	movls	r4, #0
 800de2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800de30:	fa01 f000 	lsl.w	r0, r1, r0
 800de34:	fa24 f40c 	lsr.w	r4, r4, ip
 800de38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800de3c:	ea40 0204 	orr.w	r2, r0, r4
 800de40:	e7db      	b.n	800ddfa <__b2d+0x4a>
 800de42:	ea44 030c 	orr.w	r3, r4, ip
 800de46:	460a      	mov	r2, r1
 800de48:	e7d7      	b.n	800ddfa <__b2d+0x4a>
 800de4a:	bf00      	nop
 800de4c:	3ff00000 	.word	0x3ff00000

0800de50 <__d2b>:
 800de50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de54:	4689      	mov	r9, r1
 800de56:	2101      	movs	r1, #1
 800de58:	ec57 6b10 	vmov	r6, r7, d0
 800de5c:	4690      	mov	r8, r2
 800de5e:	f7ff fc09 	bl	800d674 <_Balloc>
 800de62:	4604      	mov	r4, r0
 800de64:	b930      	cbnz	r0, 800de74 <__d2b+0x24>
 800de66:	4602      	mov	r2, r0
 800de68:	4b25      	ldr	r3, [pc, #148]	; (800df00 <__d2b+0xb0>)
 800de6a:	4826      	ldr	r0, [pc, #152]	; (800df04 <__d2b+0xb4>)
 800de6c:	f240 310a 	movw	r1, #778	; 0x30a
 800de70:	f000 fe7a 	bl	800eb68 <__assert_func>
 800de74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800de78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de7c:	bb35      	cbnz	r5, 800decc <__d2b+0x7c>
 800de7e:	2e00      	cmp	r6, #0
 800de80:	9301      	str	r3, [sp, #4]
 800de82:	d028      	beq.n	800ded6 <__d2b+0x86>
 800de84:	4668      	mov	r0, sp
 800de86:	9600      	str	r6, [sp, #0]
 800de88:	f7ff fd06 	bl	800d898 <__lo0bits>
 800de8c:	9900      	ldr	r1, [sp, #0]
 800de8e:	b300      	cbz	r0, 800ded2 <__d2b+0x82>
 800de90:	9a01      	ldr	r2, [sp, #4]
 800de92:	f1c0 0320 	rsb	r3, r0, #32
 800de96:	fa02 f303 	lsl.w	r3, r2, r3
 800de9a:	430b      	orrs	r3, r1
 800de9c:	40c2      	lsrs	r2, r0
 800de9e:	6163      	str	r3, [r4, #20]
 800dea0:	9201      	str	r2, [sp, #4]
 800dea2:	9b01      	ldr	r3, [sp, #4]
 800dea4:	61a3      	str	r3, [r4, #24]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	bf14      	ite	ne
 800deaa:	2202      	movne	r2, #2
 800deac:	2201      	moveq	r2, #1
 800deae:	6122      	str	r2, [r4, #16]
 800deb0:	b1d5      	cbz	r5, 800dee8 <__d2b+0x98>
 800deb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800deb6:	4405      	add	r5, r0
 800deb8:	f8c9 5000 	str.w	r5, [r9]
 800debc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dec0:	f8c8 0000 	str.w	r0, [r8]
 800dec4:	4620      	mov	r0, r4
 800dec6:	b003      	add	sp, #12
 800dec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800decc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ded0:	e7d5      	b.n	800de7e <__d2b+0x2e>
 800ded2:	6161      	str	r1, [r4, #20]
 800ded4:	e7e5      	b.n	800dea2 <__d2b+0x52>
 800ded6:	a801      	add	r0, sp, #4
 800ded8:	f7ff fcde 	bl	800d898 <__lo0bits>
 800dedc:	9b01      	ldr	r3, [sp, #4]
 800dede:	6163      	str	r3, [r4, #20]
 800dee0:	2201      	movs	r2, #1
 800dee2:	6122      	str	r2, [r4, #16]
 800dee4:	3020      	adds	r0, #32
 800dee6:	e7e3      	b.n	800deb0 <__d2b+0x60>
 800dee8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800deec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800def0:	f8c9 0000 	str.w	r0, [r9]
 800def4:	6918      	ldr	r0, [r3, #16]
 800def6:	f7ff fcaf 	bl	800d858 <__hi0bits>
 800defa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800defe:	e7df      	b.n	800dec0 <__d2b+0x70>
 800df00:	0800fe98 	.word	0x0800fe98
 800df04:	0800ff24 	.word	0x0800ff24

0800df08 <__ratio>:
 800df08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0c:	4688      	mov	r8, r1
 800df0e:	4669      	mov	r1, sp
 800df10:	4681      	mov	r9, r0
 800df12:	f7ff ff4d 	bl	800ddb0 <__b2d>
 800df16:	a901      	add	r1, sp, #4
 800df18:	4640      	mov	r0, r8
 800df1a:	ec55 4b10 	vmov	r4, r5, d0
 800df1e:	f7ff ff47 	bl	800ddb0 <__b2d>
 800df22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800df2a:	eba3 0c02 	sub.w	ip, r3, r2
 800df2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df32:	1a9b      	subs	r3, r3, r2
 800df34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800df38:	ec51 0b10 	vmov	r0, r1, d0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	bfd6      	itet	le
 800df40:	460a      	movle	r2, r1
 800df42:	462a      	movgt	r2, r5
 800df44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df48:	468b      	mov	fp, r1
 800df4a:	462f      	mov	r7, r5
 800df4c:	bfd4      	ite	le
 800df4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800df52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800df56:	4620      	mov	r0, r4
 800df58:	ee10 2a10 	vmov	r2, s0
 800df5c:	465b      	mov	r3, fp
 800df5e:	4639      	mov	r1, r7
 800df60:	f7f2 fc74 	bl	800084c <__aeabi_ddiv>
 800df64:	ec41 0b10 	vmov	d0, r0, r1
 800df68:	b003      	add	sp, #12
 800df6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df6e <__copybits>:
 800df6e:	3901      	subs	r1, #1
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	1149      	asrs	r1, r1, #5
 800df74:	6914      	ldr	r4, [r2, #16]
 800df76:	3101      	adds	r1, #1
 800df78:	f102 0314 	add.w	r3, r2, #20
 800df7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800df80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800df84:	1f05      	subs	r5, r0, #4
 800df86:	42a3      	cmp	r3, r4
 800df88:	d30c      	bcc.n	800dfa4 <__copybits+0x36>
 800df8a:	1aa3      	subs	r3, r4, r2
 800df8c:	3b11      	subs	r3, #17
 800df8e:	f023 0303 	bic.w	r3, r3, #3
 800df92:	3211      	adds	r2, #17
 800df94:	42a2      	cmp	r2, r4
 800df96:	bf88      	it	hi
 800df98:	2300      	movhi	r3, #0
 800df9a:	4418      	add	r0, r3
 800df9c:	2300      	movs	r3, #0
 800df9e:	4288      	cmp	r0, r1
 800dfa0:	d305      	bcc.n	800dfae <__copybits+0x40>
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}
 800dfa4:	f853 6b04 	ldr.w	r6, [r3], #4
 800dfa8:	f845 6f04 	str.w	r6, [r5, #4]!
 800dfac:	e7eb      	b.n	800df86 <__copybits+0x18>
 800dfae:	f840 3b04 	str.w	r3, [r0], #4
 800dfb2:	e7f4      	b.n	800df9e <__copybits+0x30>

0800dfb4 <__any_on>:
 800dfb4:	f100 0214 	add.w	r2, r0, #20
 800dfb8:	6900      	ldr	r0, [r0, #16]
 800dfba:	114b      	asrs	r3, r1, #5
 800dfbc:	4298      	cmp	r0, r3
 800dfbe:	b510      	push	{r4, lr}
 800dfc0:	db11      	blt.n	800dfe6 <__any_on+0x32>
 800dfc2:	dd0a      	ble.n	800dfda <__any_on+0x26>
 800dfc4:	f011 011f 	ands.w	r1, r1, #31
 800dfc8:	d007      	beq.n	800dfda <__any_on+0x26>
 800dfca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dfce:	fa24 f001 	lsr.w	r0, r4, r1
 800dfd2:	fa00 f101 	lsl.w	r1, r0, r1
 800dfd6:	428c      	cmp	r4, r1
 800dfd8:	d10b      	bne.n	800dff2 <__any_on+0x3e>
 800dfda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d803      	bhi.n	800dfea <__any_on+0x36>
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	bd10      	pop	{r4, pc}
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	e7f7      	b.n	800dfda <__any_on+0x26>
 800dfea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dfee:	2900      	cmp	r1, #0
 800dff0:	d0f5      	beq.n	800dfde <__any_on+0x2a>
 800dff2:	2001      	movs	r0, #1
 800dff4:	e7f6      	b.n	800dfe4 <__any_on+0x30>

0800dff6 <_calloc_r>:
 800dff6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dff8:	fba1 2402 	umull	r2, r4, r1, r2
 800dffc:	b94c      	cbnz	r4, 800e012 <_calloc_r+0x1c>
 800dffe:	4611      	mov	r1, r2
 800e000:	9201      	str	r2, [sp, #4]
 800e002:	f7fc fab1 	bl	800a568 <_malloc_r>
 800e006:	9a01      	ldr	r2, [sp, #4]
 800e008:	4605      	mov	r5, r0
 800e00a:	b930      	cbnz	r0, 800e01a <_calloc_r+0x24>
 800e00c:	4628      	mov	r0, r5
 800e00e:	b003      	add	sp, #12
 800e010:	bd30      	pop	{r4, r5, pc}
 800e012:	220c      	movs	r2, #12
 800e014:	6002      	str	r2, [r0, #0]
 800e016:	2500      	movs	r5, #0
 800e018:	e7f8      	b.n	800e00c <_calloc_r+0x16>
 800e01a:	4621      	mov	r1, r4
 800e01c:	f7fc fa30 	bl	800a480 <memset>
 800e020:	e7f4      	b.n	800e00c <_calloc_r+0x16>

0800e022 <__ssputs_r>:
 800e022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e026:	688e      	ldr	r6, [r1, #8]
 800e028:	429e      	cmp	r6, r3
 800e02a:	4682      	mov	sl, r0
 800e02c:	460c      	mov	r4, r1
 800e02e:	4690      	mov	r8, r2
 800e030:	461f      	mov	r7, r3
 800e032:	d838      	bhi.n	800e0a6 <__ssputs_r+0x84>
 800e034:	898a      	ldrh	r2, [r1, #12]
 800e036:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e03a:	d032      	beq.n	800e0a2 <__ssputs_r+0x80>
 800e03c:	6825      	ldr	r5, [r4, #0]
 800e03e:	6909      	ldr	r1, [r1, #16]
 800e040:	eba5 0901 	sub.w	r9, r5, r1
 800e044:	6965      	ldr	r5, [r4, #20]
 800e046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e04a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e04e:	3301      	adds	r3, #1
 800e050:	444b      	add	r3, r9
 800e052:	106d      	asrs	r5, r5, #1
 800e054:	429d      	cmp	r5, r3
 800e056:	bf38      	it	cc
 800e058:	461d      	movcc	r5, r3
 800e05a:	0553      	lsls	r3, r2, #21
 800e05c:	d531      	bpl.n	800e0c2 <__ssputs_r+0xa0>
 800e05e:	4629      	mov	r1, r5
 800e060:	f7fc fa82 	bl	800a568 <_malloc_r>
 800e064:	4606      	mov	r6, r0
 800e066:	b950      	cbnz	r0, 800e07e <__ssputs_r+0x5c>
 800e068:	230c      	movs	r3, #12
 800e06a:	f8ca 3000 	str.w	r3, [sl]
 800e06e:	89a3      	ldrh	r3, [r4, #12]
 800e070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e074:	81a3      	strh	r3, [r4, #12]
 800e076:	f04f 30ff 	mov.w	r0, #4294967295
 800e07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e07e:	6921      	ldr	r1, [r4, #16]
 800e080:	464a      	mov	r2, r9
 800e082:	f7fc f9ef 	bl	800a464 <memcpy>
 800e086:	89a3      	ldrh	r3, [r4, #12]
 800e088:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e090:	81a3      	strh	r3, [r4, #12]
 800e092:	6126      	str	r6, [r4, #16]
 800e094:	6165      	str	r5, [r4, #20]
 800e096:	444e      	add	r6, r9
 800e098:	eba5 0509 	sub.w	r5, r5, r9
 800e09c:	6026      	str	r6, [r4, #0]
 800e09e:	60a5      	str	r5, [r4, #8]
 800e0a0:	463e      	mov	r6, r7
 800e0a2:	42be      	cmp	r6, r7
 800e0a4:	d900      	bls.n	800e0a8 <__ssputs_r+0x86>
 800e0a6:	463e      	mov	r6, r7
 800e0a8:	6820      	ldr	r0, [r4, #0]
 800e0aa:	4632      	mov	r2, r6
 800e0ac:	4641      	mov	r1, r8
 800e0ae:	f000 ff45 	bl	800ef3c <memmove>
 800e0b2:	68a3      	ldr	r3, [r4, #8]
 800e0b4:	1b9b      	subs	r3, r3, r6
 800e0b6:	60a3      	str	r3, [r4, #8]
 800e0b8:	6823      	ldr	r3, [r4, #0]
 800e0ba:	4433      	add	r3, r6
 800e0bc:	6023      	str	r3, [r4, #0]
 800e0be:	2000      	movs	r0, #0
 800e0c0:	e7db      	b.n	800e07a <__ssputs_r+0x58>
 800e0c2:	462a      	mov	r2, r5
 800e0c4:	f000 ff54 	bl	800ef70 <_realloc_r>
 800e0c8:	4606      	mov	r6, r0
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d1e1      	bne.n	800e092 <__ssputs_r+0x70>
 800e0ce:	6921      	ldr	r1, [r4, #16]
 800e0d0:	4650      	mov	r0, sl
 800e0d2:	f7fc f9dd 	bl	800a490 <_free_r>
 800e0d6:	e7c7      	b.n	800e068 <__ssputs_r+0x46>

0800e0d8 <_svfiprintf_r>:
 800e0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0dc:	4698      	mov	r8, r3
 800e0de:	898b      	ldrh	r3, [r1, #12]
 800e0e0:	061b      	lsls	r3, r3, #24
 800e0e2:	b09d      	sub	sp, #116	; 0x74
 800e0e4:	4607      	mov	r7, r0
 800e0e6:	460d      	mov	r5, r1
 800e0e8:	4614      	mov	r4, r2
 800e0ea:	d50e      	bpl.n	800e10a <_svfiprintf_r+0x32>
 800e0ec:	690b      	ldr	r3, [r1, #16]
 800e0ee:	b963      	cbnz	r3, 800e10a <_svfiprintf_r+0x32>
 800e0f0:	2140      	movs	r1, #64	; 0x40
 800e0f2:	f7fc fa39 	bl	800a568 <_malloc_r>
 800e0f6:	6028      	str	r0, [r5, #0]
 800e0f8:	6128      	str	r0, [r5, #16]
 800e0fa:	b920      	cbnz	r0, 800e106 <_svfiprintf_r+0x2e>
 800e0fc:	230c      	movs	r3, #12
 800e0fe:	603b      	str	r3, [r7, #0]
 800e100:	f04f 30ff 	mov.w	r0, #4294967295
 800e104:	e0d1      	b.n	800e2aa <_svfiprintf_r+0x1d2>
 800e106:	2340      	movs	r3, #64	; 0x40
 800e108:	616b      	str	r3, [r5, #20]
 800e10a:	2300      	movs	r3, #0
 800e10c:	9309      	str	r3, [sp, #36]	; 0x24
 800e10e:	2320      	movs	r3, #32
 800e110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e114:	f8cd 800c 	str.w	r8, [sp, #12]
 800e118:	2330      	movs	r3, #48	; 0x30
 800e11a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e2c4 <_svfiprintf_r+0x1ec>
 800e11e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e122:	f04f 0901 	mov.w	r9, #1
 800e126:	4623      	mov	r3, r4
 800e128:	469a      	mov	sl, r3
 800e12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e12e:	b10a      	cbz	r2, 800e134 <_svfiprintf_r+0x5c>
 800e130:	2a25      	cmp	r2, #37	; 0x25
 800e132:	d1f9      	bne.n	800e128 <_svfiprintf_r+0x50>
 800e134:	ebba 0b04 	subs.w	fp, sl, r4
 800e138:	d00b      	beq.n	800e152 <_svfiprintf_r+0x7a>
 800e13a:	465b      	mov	r3, fp
 800e13c:	4622      	mov	r2, r4
 800e13e:	4629      	mov	r1, r5
 800e140:	4638      	mov	r0, r7
 800e142:	f7ff ff6e 	bl	800e022 <__ssputs_r>
 800e146:	3001      	adds	r0, #1
 800e148:	f000 80aa 	beq.w	800e2a0 <_svfiprintf_r+0x1c8>
 800e14c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e14e:	445a      	add	r2, fp
 800e150:	9209      	str	r2, [sp, #36]	; 0x24
 800e152:	f89a 3000 	ldrb.w	r3, [sl]
 800e156:	2b00      	cmp	r3, #0
 800e158:	f000 80a2 	beq.w	800e2a0 <_svfiprintf_r+0x1c8>
 800e15c:	2300      	movs	r3, #0
 800e15e:	f04f 32ff 	mov.w	r2, #4294967295
 800e162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e166:	f10a 0a01 	add.w	sl, sl, #1
 800e16a:	9304      	str	r3, [sp, #16]
 800e16c:	9307      	str	r3, [sp, #28]
 800e16e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e172:	931a      	str	r3, [sp, #104]	; 0x68
 800e174:	4654      	mov	r4, sl
 800e176:	2205      	movs	r2, #5
 800e178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e17c:	4851      	ldr	r0, [pc, #324]	; (800e2c4 <_svfiprintf_r+0x1ec>)
 800e17e:	f7f2 f82f 	bl	80001e0 <memchr>
 800e182:	9a04      	ldr	r2, [sp, #16]
 800e184:	b9d8      	cbnz	r0, 800e1be <_svfiprintf_r+0xe6>
 800e186:	06d0      	lsls	r0, r2, #27
 800e188:	bf44      	itt	mi
 800e18a:	2320      	movmi	r3, #32
 800e18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e190:	0711      	lsls	r1, r2, #28
 800e192:	bf44      	itt	mi
 800e194:	232b      	movmi	r3, #43	; 0x2b
 800e196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e19a:	f89a 3000 	ldrb.w	r3, [sl]
 800e19e:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a0:	d015      	beq.n	800e1ce <_svfiprintf_r+0xf6>
 800e1a2:	9a07      	ldr	r2, [sp, #28]
 800e1a4:	4654      	mov	r4, sl
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	f04f 0c0a 	mov.w	ip, #10
 800e1ac:	4621      	mov	r1, r4
 800e1ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1b2:	3b30      	subs	r3, #48	; 0x30
 800e1b4:	2b09      	cmp	r3, #9
 800e1b6:	d94e      	bls.n	800e256 <_svfiprintf_r+0x17e>
 800e1b8:	b1b0      	cbz	r0, 800e1e8 <_svfiprintf_r+0x110>
 800e1ba:	9207      	str	r2, [sp, #28]
 800e1bc:	e014      	b.n	800e1e8 <_svfiprintf_r+0x110>
 800e1be:	eba0 0308 	sub.w	r3, r0, r8
 800e1c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	9304      	str	r3, [sp, #16]
 800e1ca:	46a2      	mov	sl, r4
 800e1cc:	e7d2      	b.n	800e174 <_svfiprintf_r+0x9c>
 800e1ce:	9b03      	ldr	r3, [sp, #12]
 800e1d0:	1d19      	adds	r1, r3, #4
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	9103      	str	r1, [sp, #12]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	bfbb      	ittet	lt
 800e1da:	425b      	neglt	r3, r3
 800e1dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e0:	9307      	strge	r3, [sp, #28]
 800e1e2:	9307      	strlt	r3, [sp, #28]
 800e1e4:	bfb8      	it	lt
 800e1e6:	9204      	strlt	r2, [sp, #16]
 800e1e8:	7823      	ldrb	r3, [r4, #0]
 800e1ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e1ec:	d10c      	bne.n	800e208 <_svfiprintf_r+0x130>
 800e1ee:	7863      	ldrb	r3, [r4, #1]
 800e1f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f2:	d135      	bne.n	800e260 <_svfiprintf_r+0x188>
 800e1f4:	9b03      	ldr	r3, [sp, #12]
 800e1f6:	1d1a      	adds	r2, r3, #4
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	9203      	str	r2, [sp, #12]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	bfb8      	it	lt
 800e200:	f04f 33ff 	movlt.w	r3, #4294967295
 800e204:	3402      	adds	r4, #2
 800e206:	9305      	str	r3, [sp, #20]
 800e208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e2d4 <_svfiprintf_r+0x1fc>
 800e20c:	7821      	ldrb	r1, [r4, #0]
 800e20e:	2203      	movs	r2, #3
 800e210:	4650      	mov	r0, sl
 800e212:	f7f1 ffe5 	bl	80001e0 <memchr>
 800e216:	b140      	cbz	r0, 800e22a <_svfiprintf_r+0x152>
 800e218:	2340      	movs	r3, #64	; 0x40
 800e21a:	eba0 000a 	sub.w	r0, r0, sl
 800e21e:	fa03 f000 	lsl.w	r0, r3, r0
 800e222:	9b04      	ldr	r3, [sp, #16]
 800e224:	4303      	orrs	r3, r0
 800e226:	3401      	adds	r4, #1
 800e228:	9304      	str	r3, [sp, #16]
 800e22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e22e:	4826      	ldr	r0, [pc, #152]	; (800e2c8 <_svfiprintf_r+0x1f0>)
 800e230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e234:	2206      	movs	r2, #6
 800e236:	f7f1 ffd3 	bl	80001e0 <memchr>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d038      	beq.n	800e2b0 <_svfiprintf_r+0x1d8>
 800e23e:	4b23      	ldr	r3, [pc, #140]	; (800e2cc <_svfiprintf_r+0x1f4>)
 800e240:	bb1b      	cbnz	r3, 800e28a <_svfiprintf_r+0x1b2>
 800e242:	9b03      	ldr	r3, [sp, #12]
 800e244:	3307      	adds	r3, #7
 800e246:	f023 0307 	bic.w	r3, r3, #7
 800e24a:	3308      	adds	r3, #8
 800e24c:	9303      	str	r3, [sp, #12]
 800e24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e250:	4433      	add	r3, r6
 800e252:	9309      	str	r3, [sp, #36]	; 0x24
 800e254:	e767      	b.n	800e126 <_svfiprintf_r+0x4e>
 800e256:	fb0c 3202 	mla	r2, ip, r2, r3
 800e25a:	460c      	mov	r4, r1
 800e25c:	2001      	movs	r0, #1
 800e25e:	e7a5      	b.n	800e1ac <_svfiprintf_r+0xd4>
 800e260:	2300      	movs	r3, #0
 800e262:	3401      	adds	r4, #1
 800e264:	9305      	str	r3, [sp, #20]
 800e266:	4619      	mov	r1, r3
 800e268:	f04f 0c0a 	mov.w	ip, #10
 800e26c:	4620      	mov	r0, r4
 800e26e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e272:	3a30      	subs	r2, #48	; 0x30
 800e274:	2a09      	cmp	r2, #9
 800e276:	d903      	bls.n	800e280 <_svfiprintf_r+0x1a8>
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d0c5      	beq.n	800e208 <_svfiprintf_r+0x130>
 800e27c:	9105      	str	r1, [sp, #20]
 800e27e:	e7c3      	b.n	800e208 <_svfiprintf_r+0x130>
 800e280:	fb0c 2101 	mla	r1, ip, r1, r2
 800e284:	4604      	mov	r4, r0
 800e286:	2301      	movs	r3, #1
 800e288:	e7f0      	b.n	800e26c <_svfiprintf_r+0x194>
 800e28a:	ab03      	add	r3, sp, #12
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	462a      	mov	r2, r5
 800e290:	4b0f      	ldr	r3, [pc, #60]	; (800e2d0 <_svfiprintf_r+0x1f8>)
 800e292:	a904      	add	r1, sp, #16
 800e294:	4638      	mov	r0, r7
 800e296:	f7fc fa7b 	bl	800a790 <_printf_float>
 800e29a:	1c42      	adds	r2, r0, #1
 800e29c:	4606      	mov	r6, r0
 800e29e:	d1d6      	bne.n	800e24e <_svfiprintf_r+0x176>
 800e2a0:	89ab      	ldrh	r3, [r5, #12]
 800e2a2:	065b      	lsls	r3, r3, #25
 800e2a4:	f53f af2c 	bmi.w	800e100 <_svfiprintf_r+0x28>
 800e2a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2aa:	b01d      	add	sp, #116	; 0x74
 800e2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2b0:	ab03      	add	r3, sp, #12
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	462a      	mov	r2, r5
 800e2b6:	4b06      	ldr	r3, [pc, #24]	; (800e2d0 <_svfiprintf_r+0x1f8>)
 800e2b8:	a904      	add	r1, sp, #16
 800e2ba:	4638      	mov	r0, r7
 800e2bc:	f7fc fd0c 	bl	800acd8 <_printf_i>
 800e2c0:	e7eb      	b.n	800e29a <_svfiprintf_r+0x1c2>
 800e2c2:	bf00      	nop
 800e2c4:	0801007c 	.word	0x0801007c
 800e2c8:	08010086 	.word	0x08010086
 800e2cc:	0800a791 	.word	0x0800a791
 800e2d0:	0800e023 	.word	0x0800e023
 800e2d4:	08010082 	.word	0x08010082

0800e2d8 <_sungetc_r>:
 800e2d8:	b538      	push	{r3, r4, r5, lr}
 800e2da:	1c4b      	adds	r3, r1, #1
 800e2dc:	4614      	mov	r4, r2
 800e2de:	d103      	bne.n	800e2e8 <_sungetc_r+0x10>
 800e2e0:	f04f 35ff 	mov.w	r5, #4294967295
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	8993      	ldrh	r3, [r2, #12]
 800e2ea:	f023 0320 	bic.w	r3, r3, #32
 800e2ee:	8193      	strh	r3, [r2, #12]
 800e2f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2f2:	6852      	ldr	r2, [r2, #4]
 800e2f4:	b2cd      	uxtb	r5, r1
 800e2f6:	b18b      	cbz	r3, 800e31c <_sungetc_r+0x44>
 800e2f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	dd08      	ble.n	800e310 <_sungetc_r+0x38>
 800e2fe:	6823      	ldr	r3, [r4, #0]
 800e300:	1e5a      	subs	r2, r3, #1
 800e302:	6022      	str	r2, [r4, #0]
 800e304:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e308:	6863      	ldr	r3, [r4, #4]
 800e30a:	3301      	adds	r3, #1
 800e30c:	6063      	str	r3, [r4, #4]
 800e30e:	e7e9      	b.n	800e2e4 <_sungetc_r+0xc>
 800e310:	4621      	mov	r1, r4
 800e312:	f000 fbe1 	bl	800ead8 <__submore>
 800e316:	2800      	cmp	r0, #0
 800e318:	d0f1      	beq.n	800e2fe <_sungetc_r+0x26>
 800e31a:	e7e1      	b.n	800e2e0 <_sungetc_r+0x8>
 800e31c:	6921      	ldr	r1, [r4, #16]
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	b151      	cbz	r1, 800e338 <_sungetc_r+0x60>
 800e322:	4299      	cmp	r1, r3
 800e324:	d208      	bcs.n	800e338 <_sungetc_r+0x60>
 800e326:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e32a:	42a9      	cmp	r1, r5
 800e32c:	d104      	bne.n	800e338 <_sungetc_r+0x60>
 800e32e:	3b01      	subs	r3, #1
 800e330:	3201      	adds	r2, #1
 800e332:	6023      	str	r3, [r4, #0]
 800e334:	6062      	str	r2, [r4, #4]
 800e336:	e7d5      	b.n	800e2e4 <_sungetc_r+0xc>
 800e338:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e340:	6363      	str	r3, [r4, #52]	; 0x34
 800e342:	2303      	movs	r3, #3
 800e344:	63a3      	str	r3, [r4, #56]	; 0x38
 800e346:	4623      	mov	r3, r4
 800e348:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e34c:	6023      	str	r3, [r4, #0]
 800e34e:	2301      	movs	r3, #1
 800e350:	e7dc      	b.n	800e30c <_sungetc_r+0x34>

0800e352 <__ssrefill_r>:
 800e352:	b510      	push	{r4, lr}
 800e354:	460c      	mov	r4, r1
 800e356:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e358:	b169      	cbz	r1, 800e376 <__ssrefill_r+0x24>
 800e35a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e35e:	4299      	cmp	r1, r3
 800e360:	d001      	beq.n	800e366 <__ssrefill_r+0x14>
 800e362:	f7fc f895 	bl	800a490 <_free_r>
 800e366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e368:	6063      	str	r3, [r4, #4]
 800e36a:	2000      	movs	r0, #0
 800e36c:	6360      	str	r0, [r4, #52]	; 0x34
 800e36e:	b113      	cbz	r3, 800e376 <__ssrefill_r+0x24>
 800e370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e372:	6023      	str	r3, [r4, #0]
 800e374:	bd10      	pop	{r4, pc}
 800e376:	6923      	ldr	r3, [r4, #16]
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	2300      	movs	r3, #0
 800e37c:	6063      	str	r3, [r4, #4]
 800e37e:	89a3      	ldrh	r3, [r4, #12]
 800e380:	f043 0320 	orr.w	r3, r3, #32
 800e384:	81a3      	strh	r3, [r4, #12]
 800e386:	f04f 30ff 	mov.w	r0, #4294967295
 800e38a:	e7f3      	b.n	800e374 <__ssrefill_r+0x22>

0800e38c <__ssvfiscanf_r>:
 800e38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e390:	460c      	mov	r4, r1
 800e392:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e396:	2100      	movs	r1, #0
 800e398:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e39c:	49a6      	ldr	r1, [pc, #664]	; (800e638 <__ssvfiscanf_r+0x2ac>)
 800e39e:	91a0      	str	r1, [sp, #640]	; 0x280
 800e3a0:	f10d 0804 	add.w	r8, sp, #4
 800e3a4:	49a5      	ldr	r1, [pc, #660]	; (800e63c <__ssvfiscanf_r+0x2b0>)
 800e3a6:	4fa6      	ldr	r7, [pc, #664]	; (800e640 <__ssvfiscanf_r+0x2b4>)
 800e3a8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e644 <__ssvfiscanf_r+0x2b8>
 800e3ac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e3b0:	4606      	mov	r6, r0
 800e3b2:	91a1      	str	r1, [sp, #644]	; 0x284
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	7813      	ldrb	r3, [r2, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 815a 	beq.w	800e672 <__ssvfiscanf_r+0x2e6>
 800e3be:	5dd9      	ldrb	r1, [r3, r7]
 800e3c0:	f011 0108 	ands.w	r1, r1, #8
 800e3c4:	f102 0501 	add.w	r5, r2, #1
 800e3c8:	d019      	beq.n	800e3fe <__ssvfiscanf_r+0x72>
 800e3ca:	6863      	ldr	r3, [r4, #4]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	dd0f      	ble.n	800e3f0 <__ssvfiscanf_r+0x64>
 800e3d0:	6823      	ldr	r3, [r4, #0]
 800e3d2:	781a      	ldrb	r2, [r3, #0]
 800e3d4:	5cba      	ldrb	r2, [r7, r2]
 800e3d6:	0712      	lsls	r2, r2, #28
 800e3d8:	d401      	bmi.n	800e3de <__ssvfiscanf_r+0x52>
 800e3da:	462a      	mov	r2, r5
 800e3dc:	e7eb      	b.n	800e3b6 <__ssvfiscanf_r+0x2a>
 800e3de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e3e0:	3201      	adds	r2, #1
 800e3e2:	9245      	str	r2, [sp, #276]	; 0x114
 800e3e4:	6862      	ldr	r2, [r4, #4]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	3a01      	subs	r2, #1
 800e3ea:	6062      	str	r2, [r4, #4]
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	e7ec      	b.n	800e3ca <__ssvfiscanf_r+0x3e>
 800e3f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e3f2:	4621      	mov	r1, r4
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	4798      	blx	r3
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d0e9      	beq.n	800e3d0 <__ssvfiscanf_r+0x44>
 800e3fc:	e7ed      	b.n	800e3da <__ssvfiscanf_r+0x4e>
 800e3fe:	2b25      	cmp	r3, #37	; 0x25
 800e400:	d012      	beq.n	800e428 <__ssvfiscanf_r+0x9c>
 800e402:	469a      	mov	sl, r3
 800e404:	6863      	ldr	r3, [r4, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	f340 8091 	ble.w	800e52e <__ssvfiscanf_r+0x1a2>
 800e40c:	6822      	ldr	r2, [r4, #0]
 800e40e:	7813      	ldrb	r3, [r2, #0]
 800e410:	4553      	cmp	r3, sl
 800e412:	f040 812e 	bne.w	800e672 <__ssvfiscanf_r+0x2e6>
 800e416:	6863      	ldr	r3, [r4, #4]
 800e418:	3b01      	subs	r3, #1
 800e41a:	6063      	str	r3, [r4, #4]
 800e41c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e41e:	3201      	adds	r2, #1
 800e420:	3301      	adds	r3, #1
 800e422:	6022      	str	r2, [r4, #0]
 800e424:	9345      	str	r3, [sp, #276]	; 0x114
 800e426:	e7d8      	b.n	800e3da <__ssvfiscanf_r+0x4e>
 800e428:	9141      	str	r1, [sp, #260]	; 0x104
 800e42a:	9143      	str	r1, [sp, #268]	; 0x10c
 800e42c:	7853      	ldrb	r3, [r2, #1]
 800e42e:	2b2a      	cmp	r3, #42	; 0x2a
 800e430:	bf02      	ittt	eq
 800e432:	2310      	moveq	r3, #16
 800e434:	1c95      	addeq	r5, r2, #2
 800e436:	9341      	streq	r3, [sp, #260]	; 0x104
 800e438:	220a      	movs	r2, #10
 800e43a:	46aa      	mov	sl, r5
 800e43c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e440:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e444:	2b09      	cmp	r3, #9
 800e446:	d91d      	bls.n	800e484 <__ssvfiscanf_r+0xf8>
 800e448:	487e      	ldr	r0, [pc, #504]	; (800e644 <__ssvfiscanf_r+0x2b8>)
 800e44a:	2203      	movs	r2, #3
 800e44c:	f7f1 fec8 	bl	80001e0 <memchr>
 800e450:	b140      	cbz	r0, 800e464 <__ssvfiscanf_r+0xd8>
 800e452:	2301      	movs	r3, #1
 800e454:	eba0 0009 	sub.w	r0, r0, r9
 800e458:	fa03 f000 	lsl.w	r0, r3, r0
 800e45c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e45e:	4318      	orrs	r0, r3
 800e460:	9041      	str	r0, [sp, #260]	; 0x104
 800e462:	4655      	mov	r5, sl
 800e464:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e468:	2b78      	cmp	r3, #120	; 0x78
 800e46a:	d806      	bhi.n	800e47a <__ssvfiscanf_r+0xee>
 800e46c:	2b57      	cmp	r3, #87	; 0x57
 800e46e:	d810      	bhi.n	800e492 <__ssvfiscanf_r+0x106>
 800e470:	2b25      	cmp	r3, #37	; 0x25
 800e472:	d0c6      	beq.n	800e402 <__ssvfiscanf_r+0x76>
 800e474:	d856      	bhi.n	800e524 <__ssvfiscanf_r+0x198>
 800e476:	2b00      	cmp	r3, #0
 800e478:	d064      	beq.n	800e544 <__ssvfiscanf_r+0x1b8>
 800e47a:	2303      	movs	r3, #3
 800e47c:	9347      	str	r3, [sp, #284]	; 0x11c
 800e47e:	230a      	movs	r3, #10
 800e480:	9342      	str	r3, [sp, #264]	; 0x108
 800e482:	e071      	b.n	800e568 <__ssvfiscanf_r+0x1dc>
 800e484:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e486:	fb02 1103 	mla	r1, r2, r3, r1
 800e48a:	3930      	subs	r1, #48	; 0x30
 800e48c:	9143      	str	r1, [sp, #268]	; 0x10c
 800e48e:	4655      	mov	r5, sl
 800e490:	e7d3      	b.n	800e43a <__ssvfiscanf_r+0xae>
 800e492:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e496:	2a20      	cmp	r2, #32
 800e498:	d8ef      	bhi.n	800e47a <__ssvfiscanf_r+0xee>
 800e49a:	a101      	add	r1, pc, #4	; (adr r1, 800e4a0 <__ssvfiscanf_r+0x114>)
 800e49c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e4a0:	0800e553 	.word	0x0800e553
 800e4a4:	0800e47b 	.word	0x0800e47b
 800e4a8:	0800e47b 	.word	0x0800e47b
 800e4ac:	0800e5b1 	.word	0x0800e5b1
 800e4b0:	0800e47b 	.word	0x0800e47b
 800e4b4:	0800e47b 	.word	0x0800e47b
 800e4b8:	0800e47b 	.word	0x0800e47b
 800e4bc:	0800e47b 	.word	0x0800e47b
 800e4c0:	0800e47b 	.word	0x0800e47b
 800e4c4:	0800e47b 	.word	0x0800e47b
 800e4c8:	0800e47b 	.word	0x0800e47b
 800e4cc:	0800e5c7 	.word	0x0800e5c7
 800e4d0:	0800e59d 	.word	0x0800e59d
 800e4d4:	0800e52b 	.word	0x0800e52b
 800e4d8:	0800e52b 	.word	0x0800e52b
 800e4dc:	0800e52b 	.word	0x0800e52b
 800e4e0:	0800e47b 	.word	0x0800e47b
 800e4e4:	0800e5a1 	.word	0x0800e5a1
 800e4e8:	0800e47b 	.word	0x0800e47b
 800e4ec:	0800e47b 	.word	0x0800e47b
 800e4f0:	0800e47b 	.word	0x0800e47b
 800e4f4:	0800e47b 	.word	0x0800e47b
 800e4f8:	0800e5d7 	.word	0x0800e5d7
 800e4fc:	0800e5a9 	.word	0x0800e5a9
 800e500:	0800e54b 	.word	0x0800e54b
 800e504:	0800e47b 	.word	0x0800e47b
 800e508:	0800e47b 	.word	0x0800e47b
 800e50c:	0800e5d3 	.word	0x0800e5d3
 800e510:	0800e47b 	.word	0x0800e47b
 800e514:	0800e59d 	.word	0x0800e59d
 800e518:	0800e47b 	.word	0x0800e47b
 800e51c:	0800e47b 	.word	0x0800e47b
 800e520:	0800e553 	.word	0x0800e553
 800e524:	3b45      	subs	r3, #69	; 0x45
 800e526:	2b02      	cmp	r3, #2
 800e528:	d8a7      	bhi.n	800e47a <__ssvfiscanf_r+0xee>
 800e52a:	2305      	movs	r3, #5
 800e52c:	e01b      	b.n	800e566 <__ssvfiscanf_r+0x1da>
 800e52e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e530:	4621      	mov	r1, r4
 800e532:	4630      	mov	r0, r6
 800e534:	4798      	blx	r3
 800e536:	2800      	cmp	r0, #0
 800e538:	f43f af68 	beq.w	800e40c <__ssvfiscanf_r+0x80>
 800e53c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e53e:	2800      	cmp	r0, #0
 800e540:	f040 808d 	bne.w	800e65e <__ssvfiscanf_r+0x2d2>
 800e544:	f04f 30ff 	mov.w	r0, #4294967295
 800e548:	e08f      	b.n	800e66a <__ssvfiscanf_r+0x2de>
 800e54a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e54c:	f042 0220 	orr.w	r2, r2, #32
 800e550:	9241      	str	r2, [sp, #260]	; 0x104
 800e552:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e558:	9241      	str	r2, [sp, #260]	; 0x104
 800e55a:	2210      	movs	r2, #16
 800e55c:	2b6f      	cmp	r3, #111	; 0x6f
 800e55e:	9242      	str	r2, [sp, #264]	; 0x108
 800e560:	bf34      	ite	cc
 800e562:	2303      	movcc	r3, #3
 800e564:	2304      	movcs	r3, #4
 800e566:	9347      	str	r3, [sp, #284]	; 0x11c
 800e568:	6863      	ldr	r3, [r4, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	dd42      	ble.n	800e5f4 <__ssvfiscanf_r+0x268>
 800e56e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e570:	0659      	lsls	r1, r3, #25
 800e572:	d404      	bmi.n	800e57e <__ssvfiscanf_r+0x1f2>
 800e574:	6823      	ldr	r3, [r4, #0]
 800e576:	781a      	ldrb	r2, [r3, #0]
 800e578:	5cba      	ldrb	r2, [r7, r2]
 800e57a:	0712      	lsls	r2, r2, #28
 800e57c:	d441      	bmi.n	800e602 <__ssvfiscanf_r+0x276>
 800e57e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e580:	2b02      	cmp	r3, #2
 800e582:	dc50      	bgt.n	800e626 <__ssvfiscanf_r+0x29a>
 800e584:	466b      	mov	r3, sp
 800e586:	4622      	mov	r2, r4
 800e588:	a941      	add	r1, sp, #260	; 0x104
 800e58a:	4630      	mov	r0, r6
 800e58c:	f000 f876 	bl	800e67c <_scanf_chars>
 800e590:	2801      	cmp	r0, #1
 800e592:	d06e      	beq.n	800e672 <__ssvfiscanf_r+0x2e6>
 800e594:	2802      	cmp	r0, #2
 800e596:	f47f af20 	bne.w	800e3da <__ssvfiscanf_r+0x4e>
 800e59a:	e7cf      	b.n	800e53c <__ssvfiscanf_r+0x1b0>
 800e59c:	220a      	movs	r2, #10
 800e59e:	e7dd      	b.n	800e55c <__ssvfiscanf_r+0x1d0>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	9342      	str	r3, [sp, #264]	; 0x108
 800e5a4:	2303      	movs	r3, #3
 800e5a6:	e7de      	b.n	800e566 <__ssvfiscanf_r+0x1da>
 800e5a8:	2308      	movs	r3, #8
 800e5aa:	9342      	str	r3, [sp, #264]	; 0x108
 800e5ac:	2304      	movs	r3, #4
 800e5ae:	e7da      	b.n	800e566 <__ssvfiscanf_r+0x1da>
 800e5b0:	4629      	mov	r1, r5
 800e5b2:	4640      	mov	r0, r8
 800e5b4:	f000 f9d0 	bl	800e958 <__sccl>
 800e5b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5be:	9341      	str	r3, [sp, #260]	; 0x104
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e7cf      	b.n	800e566 <__ssvfiscanf_r+0x1da>
 800e5c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5cc:	9341      	str	r3, [sp, #260]	; 0x104
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	e7c9      	b.n	800e566 <__ssvfiscanf_r+0x1da>
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	e7c7      	b.n	800e566 <__ssvfiscanf_r+0x1da>
 800e5d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e5d8:	06c3      	lsls	r3, r0, #27
 800e5da:	f53f aefe 	bmi.w	800e3da <__ssvfiscanf_r+0x4e>
 800e5de:	9b00      	ldr	r3, [sp, #0]
 800e5e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e5e2:	1d19      	adds	r1, r3, #4
 800e5e4:	9100      	str	r1, [sp, #0]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f010 0f01 	tst.w	r0, #1
 800e5ec:	bf14      	ite	ne
 800e5ee:	801a      	strhne	r2, [r3, #0]
 800e5f0:	601a      	streq	r2, [r3, #0]
 800e5f2:	e6f2      	b.n	800e3da <__ssvfiscanf_r+0x4e>
 800e5f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	4798      	blx	r3
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d0b6      	beq.n	800e56e <__ssvfiscanf_r+0x1e2>
 800e600:	e79c      	b.n	800e53c <__ssvfiscanf_r+0x1b0>
 800e602:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e604:	3201      	adds	r2, #1
 800e606:	9245      	str	r2, [sp, #276]	; 0x114
 800e608:	6862      	ldr	r2, [r4, #4]
 800e60a:	3a01      	subs	r2, #1
 800e60c:	2a00      	cmp	r2, #0
 800e60e:	6062      	str	r2, [r4, #4]
 800e610:	dd02      	ble.n	800e618 <__ssvfiscanf_r+0x28c>
 800e612:	3301      	adds	r3, #1
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	e7ad      	b.n	800e574 <__ssvfiscanf_r+0x1e8>
 800e618:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e61a:	4621      	mov	r1, r4
 800e61c:	4630      	mov	r0, r6
 800e61e:	4798      	blx	r3
 800e620:	2800      	cmp	r0, #0
 800e622:	d0a7      	beq.n	800e574 <__ssvfiscanf_r+0x1e8>
 800e624:	e78a      	b.n	800e53c <__ssvfiscanf_r+0x1b0>
 800e626:	2b04      	cmp	r3, #4
 800e628:	dc0e      	bgt.n	800e648 <__ssvfiscanf_r+0x2bc>
 800e62a:	466b      	mov	r3, sp
 800e62c:	4622      	mov	r2, r4
 800e62e:	a941      	add	r1, sp, #260	; 0x104
 800e630:	4630      	mov	r0, r6
 800e632:	f000 f87d 	bl	800e730 <_scanf_i>
 800e636:	e7ab      	b.n	800e590 <__ssvfiscanf_r+0x204>
 800e638:	0800e2d9 	.word	0x0800e2d9
 800e63c:	0800e353 	.word	0x0800e353
 800e640:	0800fd19 	.word	0x0800fd19
 800e644:	08010082 	.word	0x08010082
 800e648:	4b0b      	ldr	r3, [pc, #44]	; (800e678 <__ssvfiscanf_r+0x2ec>)
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f43f aec5 	beq.w	800e3da <__ssvfiscanf_r+0x4e>
 800e650:	466b      	mov	r3, sp
 800e652:	4622      	mov	r2, r4
 800e654:	a941      	add	r1, sp, #260	; 0x104
 800e656:	4630      	mov	r0, r6
 800e658:	f7fc fc64 	bl	800af24 <_scanf_float>
 800e65c:	e798      	b.n	800e590 <__ssvfiscanf_r+0x204>
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e664:	bf18      	it	ne
 800e666:	f04f 30ff 	movne.w	r0, #4294967295
 800e66a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e672:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e674:	e7f9      	b.n	800e66a <__ssvfiscanf_r+0x2de>
 800e676:	bf00      	nop
 800e678:	0800af25 	.word	0x0800af25

0800e67c <_scanf_chars>:
 800e67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e680:	4615      	mov	r5, r2
 800e682:	688a      	ldr	r2, [r1, #8]
 800e684:	4680      	mov	r8, r0
 800e686:	460c      	mov	r4, r1
 800e688:	b932      	cbnz	r2, 800e698 <_scanf_chars+0x1c>
 800e68a:	698a      	ldr	r2, [r1, #24]
 800e68c:	2a00      	cmp	r2, #0
 800e68e:	bf0c      	ite	eq
 800e690:	2201      	moveq	r2, #1
 800e692:	f04f 32ff 	movne.w	r2, #4294967295
 800e696:	608a      	str	r2, [r1, #8]
 800e698:	6822      	ldr	r2, [r4, #0]
 800e69a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e72c <_scanf_chars+0xb0>
 800e69e:	06d1      	lsls	r1, r2, #27
 800e6a0:	bf5f      	itttt	pl
 800e6a2:	681a      	ldrpl	r2, [r3, #0]
 800e6a4:	1d11      	addpl	r1, r2, #4
 800e6a6:	6019      	strpl	r1, [r3, #0]
 800e6a8:	6816      	ldrpl	r6, [r2, #0]
 800e6aa:	2700      	movs	r7, #0
 800e6ac:	69a0      	ldr	r0, [r4, #24]
 800e6ae:	b188      	cbz	r0, 800e6d4 <_scanf_chars+0x58>
 800e6b0:	2801      	cmp	r0, #1
 800e6b2:	d107      	bne.n	800e6c4 <_scanf_chars+0x48>
 800e6b4:	682a      	ldr	r2, [r5, #0]
 800e6b6:	7811      	ldrb	r1, [r2, #0]
 800e6b8:	6962      	ldr	r2, [r4, #20]
 800e6ba:	5c52      	ldrb	r2, [r2, r1]
 800e6bc:	b952      	cbnz	r2, 800e6d4 <_scanf_chars+0x58>
 800e6be:	2f00      	cmp	r7, #0
 800e6c0:	d031      	beq.n	800e726 <_scanf_chars+0xaa>
 800e6c2:	e022      	b.n	800e70a <_scanf_chars+0x8e>
 800e6c4:	2802      	cmp	r0, #2
 800e6c6:	d120      	bne.n	800e70a <_scanf_chars+0x8e>
 800e6c8:	682b      	ldr	r3, [r5, #0]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e6d0:	071b      	lsls	r3, r3, #28
 800e6d2:	d41a      	bmi.n	800e70a <_scanf_chars+0x8e>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	06da      	lsls	r2, r3, #27
 800e6d8:	bf5e      	ittt	pl
 800e6da:	682b      	ldrpl	r3, [r5, #0]
 800e6dc:	781b      	ldrbpl	r3, [r3, #0]
 800e6de:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e6e2:	682a      	ldr	r2, [r5, #0]
 800e6e4:	686b      	ldr	r3, [r5, #4]
 800e6e6:	3201      	adds	r2, #1
 800e6e8:	602a      	str	r2, [r5, #0]
 800e6ea:	68a2      	ldr	r2, [r4, #8]
 800e6ec:	3b01      	subs	r3, #1
 800e6ee:	3a01      	subs	r2, #1
 800e6f0:	606b      	str	r3, [r5, #4]
 800e6f2:	3701      	adds	r7, #1
 800e6f4:	60a2      	str	r2, [r4, #8]
 800e6f6:	b142      	cbz	r2, 800e70a <_scanf_chars+0x8e>
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	dcd7      	bgt.n	800e6ac <_scanf_chars+0x30>
 800e6fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e700:	4629      	mov	r1, r5
 800e702:	4640      	mov	r0, r8
 800e704:	4798      	blx	r3
 800e706:	2800      	cmp	r0, #0
 800e708:	d0d0      	beq.n	800e6ac <_scanf_chars+0x30>
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	f013 0310 	ands.w	r3, r3, #16
 800e710:	d105      	bne.n	800e71e <_scanf_chars+0xa2>
 800e712:	68e2      	ldr	r2, [r4, #12]
 800e714:	3201      	adds	r2, #1
 800e716:	60e2      	str	r2, [r4, #12]
 800e718:	69a2      	ldr	r2, [r4, #24]
 800e71a:	b102      	cbz	r2, 800e71e <_scanf_chars+0xa2>
 800e71c:	7033      	strb	r3, [r6, #0]
 800e71e:	6923      	ldr	r3, [r4, #16]
 800e720:	443b      	add	r3, r7
 800e722:	6123      	str	r3, [r4, #16]
 800e724:	2000      	movs	r0, #0
 800e726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e72a:	bf00      	nop
 800e72c:	0800fd19 	.word	0x0800fd19

0800e730 <_scanf_i>:
 800e730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e734:	4698      	mov	r8, r3
 800e736:	4b76      	ldr	r3, [pc, #472]	; (800e910 <_scanf_i+0x1e0>)
 800e738:	460c      	mov	r4, r1
 800e73a:	4682      	mov	sl, r0
 800e73c:	4616      	mov	r6, r2
 800e73e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e742:	b087      	sub	sp, #28
 800e744:	ab03      	add	r3, sp, #12
 800e746:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e74a:	4b72      	ldr	r3, [pc, #456]	; (800e914 <_scanf_i+0x1e4>)
 800e74c:	69a1      	ldr	r1, [r4, #24]
 800e74e:	4a72      	ldr	r2, [pc, #456]	; (800e918 <_scanf_i+0x1e8>)
 800e750:	2903      	cmp	r1, #3
 800e752:	bf18      	it	ne
 800e754:	461a      	movne	r2, r3
 800e756:	68a3      	ldr	r3, [r4, #8]
 800e758:	9201      	str	r2, [sp, #4]
 800e75a:	1e5a      	subs	r2, r3, #1
 800e75c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e760:	bf88      	it	hi
 800e762:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e766:	4627      	mov	r7, r4
 800e768:	bf82      	ittt	hi
 800e76a:	eb03 0905 	addhi.w	r9, r3, r5
 800e76e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e772:	60a3      	strhi	r3, [r4, #8]
 800e774:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e778:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e77c:	bf98      	it	ls
 800e77e:	f04f 0900 	movls.w	r9, #0
 800e782:	6023      	str	r3, [r4, #0]
 800e784:	463d      	mov	r5, r7
 800e786:	f04f 0b00 	mov.w	fp, #0
 800e78a:	6831      	ldr	r1, [r6, #0]
 800e78c:	ab03      	add	r3, sp, #12
 800e78e:	7809      	ldrb	r1, [r1, #0]
 800e790:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e794:	2202      	movs	r2, #2
 800e796:	f7f1 fd23 	bl	80001e0 <memchr>
 800e79a:	b328      	cbz	r0, 800e7e8 <_scanf_i+0xb8>
 800e79c:	f1bb 0f01 	cmp.w	fp, #1
 800e7a0:	d159      	bne.n	800e856 <_scanf_i+0x126>
 800e7a2:	6862      	ldr	r2, [r4, #4]
 800e7a4:	b92a      	cbnz	r2, 800e7b2 <_scanf_i+0x82>
 800e7a6:	6822      	ldr	r2, [r4, #0]
 800e7a8:	2308      	movs	r3, #8
 800e7aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7ae:	6063      	str	r3, [r4, #4]
 800e7b0:	6022      	str	r2, [r4, #0]
 800e7b2:	6822      	ldr	r2, [r4, #0]
 800e7b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e7b8:	6022      	str	r2, [r4, #0]
 800e7ba:	68a2      	ldr	r2, [r4, #8]
 800e7bc:	1e51      	subs	r1, r2, #1
 800e7be:	60a1      	str	r1, [r4, #8]
 800e7c0:	b192      	cbz	r2, 800e7e8 <_scanf_i+0xb8>
 800e7c2:	6832      	ldr	r2, [r6, #0]
 800e7c4:	1c51      	adds	r1, r2, #1
 800e7c6:	6031      	str	r1, [r6, #0]
 800e7c8:	7812      	ldrb	r2, [r2, #0]
 800e7ca:	f805 2b01 	strb.w	r2, [r5], #1
 800e7ce:	6872      	ldr	r2, [r6, #4]
 800e7d0:	3a01      	subs	r2, #1
 800e7d2:	2a00      	cmp	r2, #0
 800e7d4:	6072      	str	r2, [r6, #4]
 800e7d6:	dc07      	bgt.n	800e7e8 <_scanf_i+0xb8>
 800e7d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e7dc:	4631      	mov	r1, r6
 800e7de:	4650      	mov	r0, sl
 800e7e0:	4790      	blx	r2
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	f040 8085 	bne.w	800e8f2 <_scanf_i+0x1c2>
 800e7e8:	f10b 0b01 	add.w	fp, fp, #1
 800e7ec:	f1bb 0f03 	cmp.w	fp, #3
 800e7f0:	d1cb      	bne.n	800e78a <_scanf_i+0x5a>
 800e7f2:	6863      	ldr	r3, [r4, #4]
 800e7f4:	b90b      	cbnz	r3, 800e7fa <_scanf_i+0xca>
 800e7f6:	230a      	movs	r3, #10
 800e7f8:	6063      	str	r3, [r4, #4]
 800e7fa:	6863      	ldr	r3, [r4, #4]
 800e7fc:	4947      	ldr	r1, [pc, #284]	; (800e91c <_scanf_i+0x1ec>)
 800e7fe:	6960      	ldr	r0, [r4, #20]
 800e800:	1ac9      	subs	r1, r1, r3
 800e802:	f000 f8a9 	bl	800e958 <__sccl>
 800e806:	f04f 0b00 	mov.w	fp, #0
 800e80a:	68a3      	ldr	r3, [r4, #8]
 800e80c:	6822      	ldr	r2, [r4, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d03d      	beq.n	800e88e <_scanf_i+0x15e>
 800e812:	6831      	ldr	r1, [r6, #0]
 800e814:	6960      	ldr	r0, [r4, #20]
 800e816:	f891 c000 	ldrb.w	ip, [r1]
 800e81a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e81e:	2800      	cmp	r0, #0
 800e820:	d035      	beq.n	800e88e <_scanf_i+0x15e>
 800e822:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e826:	d124      	bne.n	800e872 <_scanf_i+0x142>
 800e828:	0510      	lsls	r0, r2, #20
 800e82a:	d522      	bpl.n	800e872 <_scanf_i+0x142>
 800e82c:	f10b 0b01 	add.w	fp, fp, #1
 800e830:	f1b9 0f00 	cmp.w	r9, #0
 800e834:	d003      	beq.n	800e83e <_scanf_i+0x10e>
 800e836:	3301      	adds	r3, #1
 800e838:	f109 39ff 	add.w	r9, r9, #4294967295
 800e83c:	60a3      	str	r3, [r4, #8]
 800e83e:	6873      	ldr	r3, [r6, #4]
 800e840:	3b01      	subs	r3, #1
 800e842:	2b00      	cmp	r3, #0
 800e844:	6073      	str	r3, [r6, #4]
 800e846:	dd1b      	ble.n	800e880 <_scanf_i+0x150>
 800e848:	6833      	ldr	r3, [r6, #0]
 800e84a:	3301      	adds	r3, #1
 800e84c:	6033      	str	r3, [r6, #0]
 800e84e:	68a3      	ldr	r3, [r4, #8]
 800e850:	3b01      	subs	r3, #1
 800e852:	60a3      	str	r3, [r4, #8]
 800e854:	e7d9      	b.n	800e80a <_scanf_i+0xda>
 800e856:	f1bb 0f02 	cmp.w	fp, #2
 800e85a:	d1ae      	bne.n	800e7ba <_scanf_i+0x8a>
 800e85c:	6822      	ldr	r2, [r4, #0]
 800e85e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e862:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e866:	d1bf      	bne.n	800e7e8 <_scanf_i+0xb8>
 800e868:	2310      	movs	r3, #16
 800e86a:	6063      	str	r3, [r4, #4]
 800e86c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e870:	e7a2      	b.n	800e7b8 <_scanf_i+0x88>
 800e872:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e876:	6022      	str	r2, [r4, #0]
 800e878:	780b      	ldrb	r3, [r1, #0]
 800e87a:	f805 3b01 	strb.w	r3, [r5], #1
 800e87e:	e7de      	b.n	800e83e <_scanf_i+0x10e>
 800e880:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e884:	4631      	mov	r1, r6
 800e886:	4650      	mov	r0, sl
 800e888:	4798      	blx	r3
 800e88a:	2800      	cmp	r0, #0
 800e88c:	d0df      	beq.n	800e84e <_scanf_i+0x11e>
 800e88e:	6823      	ldr	r3, [r4, #0]
 800e890:	05db      	lsls	r3, r3, #23
 800e892:	d50d      	bpl.n	800e8b0 <_scanf_i+0x180>
 800e894:	42bd      	cmp	r5, r7
 800e896:	d909      	bls.n	800e8ac <_scanf_i+0x17c>
 800e898:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e89c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8a0:	4632      	mov	r2, r6
 800e8a2:	4650      	mov	r0, sl
 800e8a4:	4798      	blx	r3
 800e8a6:	f105 39ff 	add.w	r9, r5, #4294967295
 800e8aa:	464d      	mov	r5, r9
 800e8ac:	42bd      	cmp	r5, r7
 800e8ae:	d02d      	beq.n	800e90c <_scanf_i+0x1dc>
 800e8b0:	6822      	ldr	r2, [r4, #0]
 800e8b2:	f012 0210 	ands.w	r2, r2, #16
 800e8b6:	d113      	bne.n	800e8e0 <_scanf_i+0x1b0>
 800e8b8:	702a      	strb	r2, [r5, #0]
 800e8ba:	6863      	ldr	r3, [r4, #4]
 800e8bc:	9e01      	ldr	r6, [sp, #4]
 800e8be:	4639      	mov	r1, r7
 800e8c0:	4650      	mov	r0, sl
 800e8c2:	47b0      	blx	r6
 800e8c4:	6821      	ldr	r1, [r4, #0]
 800e8c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e8ca:	f011 0f20 	tst.w	r1, #32
 800e8ce:	d013      	beq.n	800e8f8 <_scanf_i+0x1c8>
 800e8d0:	1d1a      	adds	r2, r3, #4
 800e8d2:	f8c8 2000 	str.w	r2, [r8]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	6018      	str	r0, [r3, #0]
 800e8da:	68e3      	ldr	r3, [r4, #12]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	60e3      	str	r3, [r4, #12]
 800e8e0:	1bed      	subs	r5, r5, r7
 800e8e2:	44ab      	add	fp, r5
 800e8e4:	6925      	ldr	r5, [r4, #16]
 800e8e6:	445d      	add	r5, fp
 800e8e8:	6125      	str	r5, [r4, #16]
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	b007      	add	sp, #28
 800e8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f2:	f04f 0b00 	mov.w	fp, #0
 800e8f6:	e7ca      	b.n	800e88e <_scanf_i+0x15e>
 800e8f8:	1d1a      	adds	r2, r3, #4
 800e8fa:	f8c8 2000 	str.w	r2, [r8]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f011 0f01 	tst.w	r1, #1
 800e904:	bf14      	ite	ne
 800e906:	8018      	strhne	r0, [r3, #0]
 800e908:	6018      	streq	r0, [r3, #0]
 800e90a:	e7e6      	b.n	800e8da <_scanf_i+0x1aa>
 800e90c:	2001      	movs	r0, #1
 800e90e:	e7ed      	b.n	800e8ec <_scanf_i+0x1bc>
 800e910:	0800fc20 	.word	0x0800fc20
 800e914:	0800ead5 	.word	0x0800ead5
 800e918:	0800c1ed 	.word	0x0800c1ed
 800e91c:	080100a6 	.word	0x080100a6

0800e920 <_read_r>:
 800e920:	b538      	push	{r3, r4, r5, lr}
 800e922:	4d07      	ldr	r5, [pc, #28]	; (800e940 <_read_r+0x20>)
 800e924:	4604      	mov	r4, r0
 800e926:	4608      	mov	r0, r1
 800e928:	4611      	mov	r1, r2
 800e92a:	2200      	movs	r2, #0
 800e92c:	602a      	str	r2, [r5, #0]
 800e92e:	461a      	mov	r2, r3
 800e930:	f7f3 fdb6 	bl	80024a0 <_read>
 800e934:	1c43      	adds	r3, r0, #1
 800e936:	d102      	bne.n	800e93e <_read_r+0x1e>
 800e938:	682b      	ldr	r3, [r5, #0]
 800e93a:	b103      	cbz	r3, 800e93e <_read_r+0x1e>
 800e93c:	6023      	str	r3, [r4, #0]
 800e93e:	bd38      	pop	{r3, r4, r5, pc}
 800e940:	20002e34 	.word	0x20002e34
 800e944:	00000000 	.word	0x00000000

0800e948 <nan>:
 800e948:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e950 <nan+0x8>
 800e94c:	4770      	bx	lr
 800e94e:	bf00      	nop
 800e950:	00000000 	.word	0x00000000
 800e954:	7ff80000 	.word	0x7ff80000

0800e958 <__sccl>:
 800e958:	b570      	push	{r4, r5, r6, lr}
 800e95a:	780b      	ldrb	r3, [r1, #0]
 800e95c:	4604      	mov	r4, r0
 800e95e:	2b5e      	cmp	r3, #94	; 0x5e
 800e960:	bf0b      	itete	eq
 800e962:	784b      	ldrbeq	r3, [r1, #1]
 800e964:	1c48      	addne	r0, r1, #1
 800e966:	1c88      	addeq	r0, r1, #2
 800e968:	2200      	movne	r2, #0
 800e96a:	bf08      	it	eq
 800e96c:	2201      	moveq	r2, #1
 800e96e:	1e61      	subs	r1, r4, #1
 800e970:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e974:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e978:	42a9      	cmp	r1, r5
 800e97a:	d1fb      	bne.n	800e974 <__sccl+0x1c>
 800e97c:	b90b      	cbnz	r3, 800e982 <__sccl+0x2a>
 800e97e:	3801      	subs	r0, #1
 800e980:	bd70      	pop	{r4, r5, r6, pc}
 800e982:	f082 0201 	eor.w	r2, r2, #1
 800e986:	54e2      	strb	r2, [r4, r3]
 800e988:	4605      	mov	r5, r0
 800e98a:	4628      	mov	r0, r5
 800e98c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e990:	292d      	cmp	r1, #45	; 0x2d
 800e992:	d006      	beq.n	800e9a2 <__sccl+0x4a>
 800e994:	295d      	cmp	r1, #93	; 0x5d
 800e996:	d0f3      	beq.n	800e980 <__sccl+0x28>
 800e998:	b909      	cbnz	r1, 800e99e <__sccl+0x46>
 800e99a:	4628      	mov	r0, r5
 800e99c:	e7f0      	b.n	800e980 <__sccl+0x28>
 800e99e:	460b      	mov	r3, r1
 800e9a0:	e7f1      	b.n	800e986 <__sccl+0x2e>
 800e9a2:	786e      	ldrb	r6, [r5, #1]
 800e9a4:	2e5d      	cmp	r6, #93	; 0x5d
 800e9a6:	d0fa      	beq.n	800e99e <__sccl+0x46>
 800e9a8:	42b3      	cmp	r3, r6
 800e9aa:	dcf8      	bgt.n	800e99e <__sccl+0x46>
 800e9ac:	3502      	adds	r5, #2
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	3101      	adds	r1, #1
 800e9b2:	428e      	cmp	r6, r1
 800e9b4:	5462      	strb	r2, [r4, r1]
 800e9b6:	dcfb      	bgt.n	800e9b0 <__sccl+0x58>
 800e9b8:	1af1      	subs	r1, r6, r3
 800e9ba:	3901      	subs	r1, #1
 800e9bc:	1c58      	adds	r0, r3, #1
 800e9be:	42b3      	cmp	r3, r6
 800e9c0:	bfa8      	it	ge
 800e9c2:	2100      	movge	r1, #0
 800e9c4:	1843      	adds	r3, r0, r1
 800e9c6:	e7e0      	b.n	800e98a <__sccl+0x32>

0800e9c8 <strncmp>:
 800e9c8:	b510      	push	{r4, lr}
 800e9ca:	b17a      	cbz	r2, 800e9ec <strncmp+0x24>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	3901      	subs	r1, #1
 800e9d0:	1884      	adds	r4, r0, r2
 800e9d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e9d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e9da:	4290      	cmp	r0, r2
 800e9dc:	d101      	bne.n	800e9e2 <strncmp+0x1a>
 800e9de:	42a3      	cmp	r3, r4
 800e9e0:	d101      	bne.n	800e9e6 <strncmp+0x1e>
 800e9e2:	1a80      	subs	r0, r0, r2
 800e9e4:	bd10      	pop	{r4, pc}
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	d1f3      	bne.n	800e9d2 <strncmp+0xa>
 800e9ea:	e7fa      	b.n	800e9e2 <strncmp+0x1a>
 800e9ec:	4610      	mov	r0, r2
 800e9ee:	e7f9      	b.n	800e9e4 <strncmp+0x1c>

0800e9f0 <_strtoul_l.constprop.0>:
 800e9f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9f4:	4f36      	ldr	r7, [pc, #216]	; (800ead0 <_strtoul_l.constprop.0+0xe0>)
 800e9f6:	4686      	mov	lr, r0
 800e9f8:	460d      	mov	r5, r1
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea00:	5de6      	ldrb	r6, [r4, r7]
 800ea02:	f016 0608 	ands.w	r6, r6, #8
 800ea06:	d1f8      	bne.n	800e9fa <_strtoul_l.constprop.0+0xa>
 800ea08:	2c2d      	cmp	r4, #45	; 0x2d
 800ea0a:	d12f      	bne.n	800ea6c <_strtoul_l.constprop.0+0x7c>
 800ea0c:	782c      	ldrb	r4, [r5, #0]
 800ea0e:	2601      	movs	r6, #1
 800ea10:	1c85      	adds	r5, r0, #2
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d057      	beq.n	800eac6 <_strtoul_l.constprop.0+0xd6>
 800ea16:	2b10      	cmp	r3, #16
 800ea18:	d109      	bne.n	800ea2e <_strtoul_l.constprop.0+0x3e>
 800ea1a:	2c30      	cmp	r4, #48	; 0x30
 800ea1c:	d107      	bne.n	800ea2e <_strtoul_l.constprop.0+0x3e>
 800ea1e:	7828      	ldrb	r0, [r5, #0]
 800ea20:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ea24:	2858      	cmp	r0, #88	; 0x58
 800ea26:	d149      	bne.n	800eabc <_strtoul_l.constprop.0+0xcc>
 800ea28:	786c      	ldrb	r4, [r5, #1]
 800ea2a:	2310      	movs	r3, #16
 800ea2c:	3502      	adds	r5, #2
 800ea2e:	f04f 38ff 	mov.w	r8, #4294967295
 800ea32:	2700      	movs	r7, #0
 800ea34:	fbb8 f8f3 	udiv	r8, r8, r3
 800ea38:	fb03 f908 	mul.w	r9, r3, r8
 800ea3c:	ea6f 0909 	mvn.w	r9, r9
 800ea40:	4638      	mov	r0, r7
 800ea42:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ea46:	f1bc 0f09 	cmp.w	ip, #9
 800ea4a:	d814      	bhi.n	800ea76 <_strtoul_l.constprop.0+0x86>
 800ea4c:	4664      	mov	r4, ip
 800ea4e:	42a3      	cmp	r3, r4
 800ea50:	dd22      	ble.n	800ea98 <_strtoul_l.constprop.0+0xa8>
 800ea52:	2f00      	cmp	r7, #0
 800ea54:	db1d      	blt.n	800ea92 <_strtoul_l.constprop.0+0xa2>
 800ea56:	4580      	cmp	r8, r0
 800ea58:	d31b      	bcc.n	800ea92 <_strtoul_l.constprop.0+0xa2>
 800ea5a:	d101      	bne.n	800ea60 <_strtoul_l.constprop.0+0x70>
 800ea5c:	45a1      	cmp	r9, r4
 800ea5e:	db18      	blt.n	800ea92 <_strtoul_l.constprop.0+0xa2>
 800ea60:	fb00 4003 	mla	r0, r0, r3, r4
 800ea64:	2701      	movs	r7, #1
 800ea66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea6a:	e7ea      	b.n	800ea42 <_strtoul_l.constprop.0+0x52>
 800ea6c:	2c2b      	cmp	r4, #43	; 0x2b
 800ea6e:	bf04      	itt	eq
 800ea70:	782c      	ldrbeq	r4, [r5, #0]
 800ea72:	1c85      	addeq	r5, r0, #2
 800ea74:	e7cd      	b.n	800ea12 <_strtoul_l.constprop.0+0x22>
 800ea76:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ea7a:	f1bc 0f19 	cmp.w	ip, #25
 800ea7e:	d801      	bhi.n	800ea84 <_strtoul_l.constprop.0+0x94>
 800ea80:	3c37      	subs	r4, #55	; 0x37
 800ea82:	e7e4      	b.n	800ea4e <_strtoul_l.constprop.0+0x5e>
 800ea84:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ea88:	f1bc 0f19 	cmp.w	ip, #25
 800ea8c:	d804      	bhi.n	800ea98 <_strtoul_l.constprop.0+0xa8>
 800ea8e:	3c57      	subs	r4, #87	; 0x57
 800ea90:	e7dd      	b.n	800ea4e <_strtoul_l.constprop.0+0x5e>
 800ea92:	f04f 37ff 	mov.w	r7, #4294967295
 800ea96:	e7e6      	b.n	800ea66 <_strtoul_l.constprop.0+0x76>
 800ea98:	2f00      	cmp	r7, #0
 800ea9a:	da07      	bge.n	800eaac <_strtoul_l.constprop.0+0xbc>
 800ea9c:	2322      	movs	r3, #34	; 0x22
 800ea9e:	f8ce 3000 	str.w	r3, [lr]
 800eaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa6:	b932      	cbnz	r2, 800eab6 <_strtoul_l.constprop.0+0xc6>
 800eaa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaac:	b106      	cbz	r6, 800eab0 <_strtoul_l.constprop.0+0xc0>
 800eaae:	4240      	negs	r0, r0
 800eab0:	2a00      	cmp	r2, #0
 800eab2:	d0f9      	beq.n	800eaa8 <_strtoul_l.constprop.0+0xb8>
 800eab4:	b107      	cbz	r7, 800eab8 <_strtoul_l.constprop.0+0xc8>
 800eab6:	1e69      	subs	r1, r5, #1
 800eab8:	6011      	str	r1, [r2, #0]
 800eaba:	e7f5      	b.n	800eaa8 <_strtoul_l.constprop.0+0xb8>
 800eabc:	2430      	movs	r4, #48	; 0x30
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d1b5      	bne.n	800ea2e <_strtoul_l.constprop.0+0x3e>
 800eac2:	2308      	movs	r3, #8
 800eac4:	e7b3      	b.n	800ea2e <_strtoul_l.constprop.0+0x3e>
 800eac6:	2c30      	cmp	r4, #48	; 0x30
 800eac8:	d0a9      	beq.n	800ea1e <_strtoul_l.constprop.0+0x2e>
 800eaca:	230a      	movs	r3, #10
 800eacc:	e7af      	b.n	800ea2e <_strtoul_l.constprop.0+0x3e>
 800eace:	bf00      	nop
 800ead0:	0800fd19 	.word	0x0800fd19

0800ead4 <_strtoul_r>:
 800ead4:	f7ff bf8c 	b.w	800e9f0 <_strtoul_l.constprop.0>

0800ead8 <__submore>:
 800ead8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eadc:	460c      	mov	r4, r1
 800eade:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eae4:	4299      	cmp	r1, r3
 800eae6:	d11d      	bne.n	800eb24 <__submore+0x4c>
 800eae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eaec:	f7fb fd3c 	bl	800a568 <_malloc_r>
 800eaf0:	b918      	cbnz	r0, 800eafa <__submore+0x22>
 800eaf2:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eafa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eafe:	63a3      	str	r3, [r4, #56]	; 0x38
 800eb00:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800eb04:	6360      	str	r0, [r4, #52]	; 0x34
 800eb06:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800eb0a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800eb0e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800eb12:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800eb16:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800eb1a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800eb1e:	6020      	str	r0, [r4, #0]
 800eb20:	2000      	movs	r0, #0
 800eb22:	e7e8      	b.n	800eaf6 <__submore+0x1e>
 800eb24:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800eb26:	0077      	lsls	r7, r6, #1
 800eb28:	463a      	mov	r2, r7
 800eb2a:	f000 fa21 	bl	800ef70 <_realloc_r>
 800eb2e:	4605      	mov	r5, r0
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d0de      	beq.n	800eaf2 <__submore+0x1a>
 800eb34:	eb00 0806 	add.w	r8, r0, r6
 800eb38:	4601      	mov	r1, r0
 800eb3a:	4632      	mov	r2, r6
 800eb3c:	4640      	mov	r0, r8
 800eb3e:	f7fb fc91 	bl	800a464 <memcpy>
 800eb42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800eb46:	f8c4 8000 	str.w	r8, [r4]
 800eb4a:	e7e9      	b.n	800eb20 <__submore+0x48>

0800eb4c <__ascii_wctomb>:
 800eb4c:	b149      	cbz	r1, 800eb62 <__ascii_wctomb+0x16>
 800eb4e:	2aff      	cmp	r2, #255	; 0xff
 800eb50:	bf85      	ittet	hi
 800eb52:	238a      	movhi	r3, #138	; 0x8a
 800eb54:	6003      	strhi	r3, [r0, #0]
 800eb56:	700a      	strbls	r2, [r1, #0]
 800eb58:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb5c:	bf98      	it	ls
 800eb5e:	2001      	movls	r0, #1
 800eb60:	4770      	bx	lr
 800eb62:	4608      	mov	r0, r1
 800eb64:	4770      	bx	lr
	...

0800eb68 <__assert_func>:
 800eb68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb6a:	4614      	mov	r4, r2
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	4b09      	ldr	r3, [pc, #36]	; (800eb94 <__assert_func+0x2c>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4605      	mov	r5, r0
 800eb74:	68d8      	ldr	r0, [r3, #12]
 800eb76:	b14c      	cbz	r4, 800eb8c <__assert_func+0x24>
 800eb78:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <__assert_func+0x30>)
 800eb7a:	9100      	str	r1, [sp, #0]
 800eb7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb80:	4906      	ldr	r1, [pc, #24]	; (800eb9c <__assert_func+0x34>)
 800eb82:	462b      	mov	r3, r5
 800eb84:	f000 f9a6 	bl	800eed4 <fiprintf>
 800eb88:	f000 fc3a 	bl	800f400 <abort>
 800eb8c:	4b04      	ldr	r3, [pc, #16]	; (800eba0 <__assert_func+0x38>)
 800eb8e:	461c      	mov	r4, r3
 800eb90:	e7f3      	b.n	800eb7a <__assert_func+0x12>
 800eb92:	bf00      	nop
 800eb94:	200000fc 	.word	0x200000fc
 800eb98:	080100a8 	.word	0x080100a8
 800eb9c:	080100b5 	.word	0x080100b5
 800eba0:	080100e3 	.word	0x080100e3

0800eba4 <__sflush_r>:
 800eba4:	898a      	ldrh	r2, [r1, #12]
 800eba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebaa:	4605      	mov	r5, r0
 800ebac:	0710      	lsls	r0, r2, #28
 800ebae:	460c      	mov	r4, r1
 800ebb0:	d458      	bmi.n	800ec64 <__sflush_r+0xc0>
 800ebb2:	684b      	ldr	r3, [r1, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	dc05      	bgt.n	800ebc4 <__sflush_r+0x20>
 800ebb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	dc02      	bgt.n	800ebc4 <__sflush_r+0x20>
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebc6:	2e00      	cmp	r6, #0
 800ebc8:	d0f9      	beq.n	800ebbe <__sflush_r+0x1a>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebd0:	682f      	ldr	r7, [r5, #0]
 800ebd2:	602b      	str	r3, [r5, #0]
 800ebd4:	d032      	beq.n	800ec3c <__sflush_r+0x98>
 800ebd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebd8:	89a3      	ldrh	r3, [r4, #12]
 800ebda:	075a      	lsls	r2, r3, #29
 800ebdc:	d505      	bpl.n	800ebea <__sflush_r+0x46>
 800ebde:	6863      	ldr	r3, [r4, #4]
 800ebe0:	1ac0      	subs	r0, r0, r3
 800ebe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebe4:	b10b      	cbz	r3, 800ebea <__sflush_r+0x46>
 800ebe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebe8:	1ac0      	subs	r0, r0, r3
 800ebea:	2300      	movs	r3, #0
 800ebec:	4602      	mov	r2, r0
 800ebee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebf0:	6a21      	ldr	r1, [r4, #32]
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	47b0      	blx	r6
 800ebf6:	1c43      	adds	r3, r0, #1
 800ebf8:	89a3      	ldrh	r3, [r4, #12]
 800ebfa:	d106      	bne.n	800ec0a <__sflush_r+0x66>
 800ebfc:	6829      	ldr	r1, [r5, #0]
 800ebfe:	291d      	cmp	r1, #29
 800ec00:	d82c      	bhi.n	800ec5c <__sflush_r+0xb8>
 800ec02:	4a2a      	ldr	r2, [pc, #168]	; (800ecac <__sflush_r+0x108>)
 800ec04:	40ca      	lsrs	r2, r1
 800ec06:	07d6      	lsls	r6, r2, #31
 800ec08:	d528      	bpl.n	800ec5c <__sflush_r+0xb8>
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	6062      	str	r2, [r4, #4]
 800ec0e:	04d9      	lsls	r1, r3, #19
 800ec10:	6922      	ldr	r2, [r4, #16]
 800ec12:	6022      	str	r2, [r4, #0]
 800ec14:	d504      	bpl.n	800ec20 <__sflush_r+0x7c>
 800ec16:	1c42      	adds	r2, r0, #1
 800ec18:	d101      	bne.n	800ec1e <__sflush_r+0x7a>
 800ec1a:	682b      	ldr	r3, [r5, #0]
 800ec1c:	b903      	cbnz	r3, 800ec20 <__sflush_r+0x7c>
 800ec1e:	6560      	str	r0, [r4, #84]	; 0x54
 800ec20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec22:	602f      	str	r7, [r5, #0]
 800ec24:	2900      	cmp	r1, #0
 800ec26:	d0ca      	beq.n	800ebbe <__sflush_r+0x1a>
 800ec28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec2c:	4299      	cmp	r1, r3
 800ec2e:	d002      	beq.n	800ec36 <__sflush_r+0x92>
 800ec30:	4628      	mov	r0, r5
 800ec32:	f7fb fc2d 	bl	800a490 <_free_r>
 800ec36:	2000      	movs	r0, #0
 800ec38:	6360      	str	r0, [r4, #52]	; 0x34
 800ec3a:	e7c1      	b.n	800ebc0 <__sflush_r+0x1c>
 800ec3c:	6a21      	ldr	r1, [r4, #32]
 800ec3e:	2301      	movs	r3, #1
 800ec40:	4628      	mov	r0, r5
 800ec42:	47b0      	blx	r6
 800ec44:	1c41      	adds	r1, r0, #1
 800ec46:	d1c7      	bne.n	800ebd8 <__sflush_r+0x34>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d0c4      	beq.n	800ebd8 <__sflush_r+0x34>
 800ec4e:	2b1d      	cmp	r3, #29
 800ec50:	d001      	beq.n	800ec56 <__sflush_r+0xb2>
 800ec52:	2b16      	cmp	r3, #22
 800ec54:	d101      	bne.n	800ec5a <__sflush_r+0xb6>
 800ec56:	602f      	str	r7, [r5, #0]
 800ec58:	e7b1      	b.n	800ebbe <__sflush_r+0x1a>
 800ec5a:	89a3      	ldrh	r3, [r4, #12]
 800ec5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec60:	81a3      	strh	r3, [r4, #12]
 800ec62:	e7ad      	b.n	800ebc0 <__sflush_r+0x1c>
 800ec64:	690f      	ldr	r7, [r1, #16]
 800ec66:	2f00      	cmp	r7, #0
 800ec68:	d0a9      	beq.n	800ebbe <__sflush_r+0x1a>
 800ec6a:	0793      	lsls	r3, r2, #30
 800ec6c:	680e      	ldr	r6, [r1, #0]
 800ec6e:	bf08      	it	eq
 800ec70:	694b      	ldreq	r3, [r1, #20]
 800ec72:	600f      	str	r7, [r1, #0]
 800ec74:	bf18      	it	ne
 800ec76:	2300      	movne	r3, #0
 800ec78:	eba6 0807 	sub.w	r8, r6, r7
 800ec7c:	608b      	str	r3, [r1, #8]
 800ec7e:	f1b8 0f00 	cmp.w	r8, #0
 800ec82:	dd9c      	ble.n	800ebbe <__sflush_r+0x1a>
 800ec84:	6a21      	ldr	r1, [r4, #32]
 800ec86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec88:	4643      	mov	r3, r8
 800ec8a:	463a      	mov	r2, r7
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	47b0      	blx	r6
 800ec90:	2800      	cmp	r0, #0
 800ec92:	dc06      	bgt.n	800eca2 <__sflush_r+0xfe>
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec9a:	81a3      	strh	r3, [r4, #12]
 800ec9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eca0:	e78e      	b.n	800ebc0 <__sflush_r+0x1c>
 800eca2:	4407      	add	r7, r0
 800eca4:	eba8 0800 	sub.w	r8, r8, r0
 800eca8:	e7e9      	b.n	800ec7e <__sflush_r+0xda>
 800ecaa:	bf00      	nop
 800ecac:	20400001 	.word	0x20400001

0800ecb0 <_fflush_r>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	690b      	ldr	r3, [r1, #16]
 800ecb4:	4605      	mov	r5, r0
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	b913      	cbnz	r3, 800ecc0 <_fflush_r+0x10>
 800ecba:	2500      	movs	r5, #0
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	bd38      	pop	{r3, r4, r5, pc}
 800ecc0:	b118      	cbz	r0, 800ecca <_fflush_r+0x1a>
 800ecc2:	6983      	ldr	r3, [r0, #24]
 800ecc4:	b90b      	cbnz	r3, 800ecca <_fflush_r+0x1a>
 800ecc6:	f000 f887 	bl	800edd8 <__sinit>
 800ecca:	4b14      	ldr	r3, [pc, #80]	; (800ed1c <_fflush_r+0x6c>)
 800eccc:	429c      	cmp	r4, r3
 800ecce:	d11b      	bne.n	800ed08 <_fflush_r+0x58>
 800ecd0:	686c      	ldr	r4, [r5, #4]
 800ecd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d0ef      	beq.n	800ecba <_fflush_r+0xa>
 800ecda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecdc:	07d0      	lsls	r0, r2, #31
 800ecde:	d404      	bmi.n	800ecea <_fflush_r+0x3a>
 800ece0:	0599      	lsls	r1, r3, #22
 800ece2:	d402      	bmi.n	800ecea <_fflush_r+0x3a>
 800ece4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ece6:	f000 f927 	bl	800ef38 <__retarget_lock_acquire_recursive>
 800ecea:	4628      	mov	r0, r5
 800ecec:	4621      	mov	r1, r4
 800ecee:	f7ff ff59 	bl	800eba4 <__sflush_r>
 800ecf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecf4:	07da      	lsls	r2, r3, #31
 800ecf6:	4605      	mov	r5, r0
 800ecf8:	d4e0      	bmi.n	800ecbc <_fflush_r+0xc>
 800ecfa:	89a3      	ldrh	r3, [r4, #12]
 800ecfc:	059b      	lsls	r3, r3, #22
 800ecfe:	d4dd      	bmi.n	800ecbc <_fflush_r+0xc>
 800ed00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed02:	f000 f91a 	bl	800ef3a <__retarget_lock_release_recursive>
 800ed06:	e7d9      	b.n	800ecbc <_fflush_r+0xc>
 800ed08:	4b05      	ldr	r3, [pc, #20]	; (800ed20 <_fflush_r+0x70>)
 800ed0a:	429c      	cmp	r4, r3
 800ed0c:	d101      	bne.n	800ed12 <_fflush_r+0x62>
 800ed0e:	68ac      	ldr	r4, [r5, #8]
 800ed10:	e7df      	b.n	800ecd2 <_fflush_r+0x22>
 800ed12:	4b04      	ldr	r3, [pc, #16]	; (800ed24 <_fflush_r+0x74>)
 800ed14:	429c      	cmp	r4, r3
 800ed16:	bf08      	it	eq
 800ed18:	68ec      	ldreq	r4, [r5, #12]
 800ed1a:	e7da      	b.n	800ecd2 <_fflush_r+0x22>
 800ed1c:	08010104 	.word	0x08010104
 800ed20:	08010124 	.word	0x08010124
 800ed24:	080100e4 	.word	0x080100e4

0800ed28 <std>:
 800ed28:	2300      	movs	r3, #0
 800ed2a:	b510      	push	{r4, lr}
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	e9c0 3300 	strd	r3, r3, [r0]
 800ed32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed36:	6083      	str	r3, [r0, #8]
 800ed38:	8181      	strh	r1, [r0, #12]
 800ed3a:	6643      	str	r3, [r0, #100]	; 0x64
 800ed3c:	81c2      	strh	r2, [r0, #14]
 800ed3e:	6183      	str	r3, [r0, #24]
 800ed40:	4619      	mov	r1, r3
 800ed42:	2208      	movs	r2, #8
 800ed44:	305c      	adds	r0, #92	; 0x5c
 800ed46:	f7fb fb9b 	bl	800a480 <memset>
 800ed4a:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <std+0x38>)
 800ed4c:	6263      	str	r3, [r4, #36]	; 0x24
 800ed4e:	4b05      	ldr	r3, [pc, #20]	; (800ed64 <std+0x3c>)
 800ed50:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed52:	4b05      	ldr	r3, [pc, #20]	; (800ed68 <std+0x40>)
 800ed54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed56:	4b05      	ldr	r3, [pc, #20]	; (800ed6c <std+0x44>)
 800ed58:	6224      	str	r4, [r4, #32]
 800ed5a:	6323      	str	r3, [r4, #48]	; 0x30
 800ed5c:	bd10      	pop	{r4, pc}
 800ed5e:	bf00      	nop
 800ed60:	0800b409 	.word	0x0800b409
 800ed64:	0800b42f 	.word	0x0800b42f
 800ed68:	0800b467 	.word	0x0800b467
 800ed6c:	0800b48b 	.word	0x0800b48b

0800ed70 <_cleanup_r>:
 800ed70:	4901      	ldr	r1, [pc, #4]	; (800ed78 <_cleanup_r+0x8>)
 800ed72:	f000 b8c1 	b.w	800eef8 <_fwalk_reent>
 800ed76:	bf00      	nop
 800ed78:	0800ecb1 	.word	0x0800ecb1

0800ed7c <__sfmoreglue>:
 800ed7c:	b570      	push	{r4, r5, r6, lr}
 800ed7e:	2268      	movs	r2, #104	; 0x68
 800ed80:	1e4d      	subs	r5, r1, #1
 800ed82:	4355      	muls	r5, r2
 800ed84:	460e      	mov	r6, r1
 800ed86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed8a:	f7fb fbed 	bl	800a568 <_malloc_r>
 800ed8e:	4604      	mov	r4, r0
 800ed90:	b140      	cbz	r0, 800eda4 <__sfmoreglue+0x28>
 800ed92:	2100      	movs	r1, #0
 800ed94:	e9c0 1600 	strd	r1, r6, [r0]
 800ed98:	300c      	adds	r0, #12
 800ed9a:	60a0      	str	r0, [r4, #8]
 800ed9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eda0:	f7fb fb6e 	bl	800a480 <memset>
 800eda4:	4620      	mov	r0, r4
 800eda6:	bd70      	pop	{r4, r5, r6, pc}

0800eda8 <__sfp_lock_acquire>:
 800eda8:	4801      	ldr	r0, [pc, #4]	; (800edb0 <__sfp_lock_acquire+0x8>)
 800edaa:	f000 b8c5 	b.w	800ef38 <__retarget_lock_acquire_recursive>
 800edae:	bf00      	nop
 800edb0:	20002e39 	.word	0x20002e39

0800edb4 <__sfp_lock_release>:
 800edb4:	4801      	ldr	r0, [pc, #4]	; (800edbc <__sfp_lock_release+0x8>)
 800edb6:	f000 b8c0 	b.w	800ef3a <__retarget_lock_release_recursive>
 800edba:	bf00      	nop
 800edbc:	20002e39 	.word	0x20002e39

0800edc0 <__sinit_lock_acquire>:
 800edc0:	4801      	ldr	r0, [pc, #4]	; (800edc8 <__sinit_lock_acquire+0x8>)
 800edc2:	f000 b8b9 	b.w	800ef38 <__retarget_lock_acquire_recursive>
 800edc6:	bf00      	nop
 800edc8:	20002e3a 	.word	0x20002e3a

0800edcc <__sinit_lock_release>:
 800edcc:	4801      	ldr	r0, [pc, #4]	; (800edd4 <__sinit_lock_release+0x8>)
 800edce:	f000 b8b4 	b.w	800ef3a <__retarget_lock_release_recursive>
 800edd2:	bf00      	nop
 800edd4:	20002e3a 	.word	0x20002e3a

0800edd8 <__sinit>:
 800edd8:	b510      	push	{r4, lr}
 800edda:	4604      	mov	r4, r0
 800eddc:	f7ff fff0 	bl	800edc0 <__sinit_lock_acquire>
 800ede0:	69a3      	ldr	r3, [r4, #24]
 800ede2:	b11b      	cbz	r3, 800edec <__sinit+0x14>
 800ede4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ede8:	f7ff bff0 	b.w	800edcc <__sinit_lock_release>
 800edec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800edf0:	6523      	str	r3, [r4, #80]	; 0x50
 800edf2:	4b13      	ldr	r3, [pc, #76]	; (800ee40 <__sinit+0x68>)
 800edf4:	4a13      	ldr	r2, [pc, #76]	; (800ee44 <__sinit+0x6c>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	62a2      	str	r2, [r4, #40]	; 0x28
 800edfa:	42a3      	cmp	r3, r4
 800edfc:	bf04      	itt	eq
 800edfe:	2301      	moveq	r3, #1
 800ee00:	61a3      	streq	r3, [r4, #24]
 800ee02:	4620      	mov	r0, r4
 800ee04:	f000 f820 	bl	800ee48 <__sfp>
 800ee08:	6060      	str	r0, [r4, #4]
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f000 f81c 	bl	800ee48 <__sfp>
 800ee10:	60a0      	str	r0, [r4, #8]
 800ee12:	4620      	mov	r0, r4
 800ee14:	f000 f818 	bl	800ee48 <__sfp>
 800ee18:	2200      	movs	r2, #0
 800ee1a:	60e0      	str	r0, [r4, #12]
 800ee1c:	2104      	movs	r1, #4
 800ee1e:	6860      	ldr	r0, [r4, #4]
 800ee20:	f7ff ff82 	bl	800ed28 <std>
 800ee24:	68a0      	ldr	r0, [r4, #8]
 800ee26:	2201      	movs	r2, #1
 800ee28:	2109      	movs	r1, #9
 800ee2a:	f7ff ff7d 	bl	800ed28 <std>
 800ee2e:	68e0      	ldr	r0, [r4, #12]
 800ee30:	2202      	movs	r2, #2
 800ee32:	2112      	movs	r1, #18
 800ee34:	f7ff ff78 	bl	800ed28 <std>
 800ee38:	2301      	movs	r3, #1
 800ee3a:	61a3      	str	r3, [r4, #24]
 800ee3c:	e7d2      	b.n	800ede4 <__sinit+0xc>
 800ee3e:	bf00      	nop
 800ee40:	0800fc8c 	.word	0x0800fc8c
 800ee44:	0800ed71 	.word	0x0800ed71

0800ee48 <__sfp>:
 800ee48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee4a:	4607      	mov	r7, r0
 800ee4c:	f7ff ffac 	bl	800eda8 <__sfp_lock_acquire>
 800ee50:	4b1e      	ldr	r3, [pc, #120]	; (800eecc <__sfp+0x84>)
 800ee52:	681e      	ldr	r6, [r3, #0]
 800ee54:	69b3      	ldr	r3, [r6, #24]
 800ee56:	b913      	cbnz	r3, 800ee5e <__sfp+0x16>
 800ee58:	4630      	mov	r0, r6
 800ee5a:	f7ff ffbd 	bl	800edd8 <__sinit>
 800ee5e:	3648      	adds	r6, #72	; 0x48
 800ee60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee64:	3b01      	subs	r3, #1
 800ee66:	d503      	bpl.n	800ee70 <__sfp+0x28>
 800ee68:	6833      	ldr	r3, [r6, #0]
 800ee6a:	b30b      	cbz	r3, 800eeb0 <__sfp+0x68>
 800ee6c:	6836      	ldr	r6, [r6, #0]
 800ee6e:	e7f7      	b.n	800ee60 <__sfp+0x18>
 800ee70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee74:	b9d5      	cbnz	r5, 800eeac <__sfp+0x64>
 800ee76:	4b16      	ldr	r3, [pc, #88]	; (800eed0 <__sfp+0x88>)
 800ee78:	60e3      	str	r3, [r4, #12]
 800ee7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee7e:	6665      	str	r5, [r4, #100]	; 0x64
 800ee80:	f000 f859 	bl	800ef36 <__retarget_lock_init_recursive>
 800ee84:	f7ff ff96 	bl	800edb4 <__sfp_lock_release>
 800ee88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee90:	6025      	str	r5, [r4, #0]
 800ee92:	61a5      	str	r5, [r4, #24]
 800ee94:	2208      	movs	r2, #8
 800ee96:	4629      	mov	r1, r5
 800ee98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee9c:	f7fb faf0 	bl	800a480 <memset>
 800eea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eea8:	4620      	mov	r0, r4
 800eeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeac:	3468      	adds	r4, #104	; 0x68
 800eeae:	e7d9      	b.n	800ee64 <__sfp+0x1c>
 800eeb0:	2104      	movs	r1, #4
 800eeb2:	4638      	mov	r0, r7
 800eeb4:	f7ff ff62 	bl	800ed7c <__sfmoreglue>
 800eeb8:	4604      	mov	r4, r0
 800eeba:	6030      	str	r0, [r6, #0]
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d1d5      	bne.n	800ee6c <__sfp+0x24>
 800eec0:	f7ff ff78 	bl	800edb4 <__sfp_lock_release>
 800eec4:	230c      	movs	r3, #12
 800eec6:	603b      	str	r3, [r7, #0]
 800eec8:	e7ee      	b.n	800eea8 <__sfp+0x60>
 800eeca:	bf00      	nop
 800eecc:	0800fc8c 	.word	0x0800fc8c
 800eed0:	ffff0001 	.word	0xffff0001

0800eed4 <fiprintf>:
 800eed4:	b40e      	push	{r1, r2, r3}
 800eed6:	b503      	push	{r0, r1, lr}
 800eed8:	4601      	mov	r1, r0
 800eeda:	ab03      	add	r3, sp, #12
 800eedc:	4805      	ldr	r0, [pc, #20]	; (800eef4 <fiprintf+0x20>)
 800eede:	f853 2b04 	ldr.w	r2, [r3], #4
 800eee2:	6800      	ldr	r0, [r0, #0]
 800eee4:	9301      	str	r3, [sp, #4]
 800eee6:	f000 f89b 	bl	800f020 <_vfiprintf_r>
 800eeea:	b002      	add	sp, #8
 800eeec:	f85d eb04 	ldr.w	lr, [sp], #4
 800eef0:	b003      	add	sp, #12
 800eef2:	4770      	bx	lr
 800eef4:	200000fc 	.word	0x200000fc

0800eef8 <_fwalk_reent>:
 800eef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eefc:	4606      	mov	r6, r0
 800eefe:	4688      	mov	r8, r1
 800ef00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef04:	2700      	movs	r7, #0
 800ef06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef0a:	f1b9 0901 	subs.w	r9, r9, #1
 800ef0e:	d505      	bpl.n	800ef1c <_fwalk_reent+0x24>
 800ef10:	6824      	ldr	r4, [r4, #0]
 800ef12:	2c00      	cmp	r4, #0
 800ef14:	d1f7      	bne.n	800ef06 <_fwalk_reent+0xe>
 800ef16:	4638      	mov	r0, r7
 800ef18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef1c:	89ab      	ldrh	r3, [r5, #12]
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d907      	bls.n	800ef32 <_fwalk_reent+0x3a>
 800ef22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef26:	3301      	adds	r3, #1
 800ef28:	d003      	beq.n	800ef32 <_fwalk_reent+0x3a>
 800ef2a:	4629      	mov	r1, r5
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	47c0      	blx	r8
 800ef30:	4307      	orrs	r7, r0
 800ef32:	3568      	adds	r5, #104	; 0x68
 800ef34:	e7e9      	b.n	800ef0a <_fwalk_reent+0x12>

0800ef36 <__retarget_lock_init_recursive>:
 800ef36:	4770      	bx	lr

0800ef38 <__retarget_lock_acquire_recursive>:
 800ef38:	4770      	bx	lr

0800ef3a <__retarget_lock_release_recursive>:
 800ef3a:	4770      	bx	lr

0800ef3c <memmove>:
 800ef3c:	4288      	cmp	r0, r1
 800ef3e:	b510      	push	{r4, lr}
 800ef40:	eb01 0402 	add.w	r4, r1, r2
 800ef44:	d902      	bls.n	800ef4c <memmove+0x10>
 800ef46:	4284      	cmp	r4, r0
 800ef48:	4623      	mov	r3, r4
 800ef4a:	d807      	bhi.n	800ef5c <memmove+0x20>
 800ef4c:	1e43      	subs	r3, r0, #1
 800ef4e:	42a1      	cmp	r1, r4
 800ef50:	d008      	beq.n	800ef64 <memmove+0x28>
 800ef52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef5a:	e7f8      	b.n	800ef4e <memmove+0x12>
 800ef5c:	4402      	add	r2, r0
 800ef5e:	4601      	mov	r1, r0
 800ef60:	428a      	cmp	r2, r1
 800ef62:	d100      	bne.n	800ef66 <memmove+0x2a>
 800ef64:	bd10      	pop	{r4, pc}
 800ef66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef6e:	e7f7      	b.n	800ef60 <memmove+0x24>

0800ef70 <_realloc_r>:
 800ef70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef74:	4680      	mov	r8, r0
 800ef76:	4614      	mov	r4, r2
 800ef78:	460e      	mov	r6, r1
 800ef7a:	b921      	cbnz	r1, 800ef86 <_realloc_r+0x16>
 800ef7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef80:	4611      	mov	r1, r2
 800ef82:	f7fb baf1 	b.w	800a568 <_malloc_r>
 800ef86:	b92a      	cbnz	r2, 800ef94 <_realloc_r+0x24>
 800ef88:	f7fb fa82 	bl	800a490 <_free_r>
 800ef8c:	4625      	mov	r5, r4
 800ef8e:	4628      	mov	r0, r5
 800ef90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef94:	f000 faa0 	bl	800f4d8 <_malloc_usable_size_r>
 800ef98:	4284      	cmp	r4, r0
 800ef9a:	4607      	mov	r7, r0
 800ef9c:	d802      	bhi.n	800efa4 <_realloc_r+0x34>
 800ef9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efa2:	d812      	bhi.n	800efca <_realloc_r+0x5a>
 800efa4:	4621      	mov	r1, r4
 800efa6:	4640      	mov	r0, r8
 800efa8:	f7fb fade 	bl	800a568 <_malloc_r>
 800efac:	4605      	mov	r5, r0
 800efae:	2800      	cmp	r0, #0
 800efb0:	d0ed      	beq.n	800ef8e <_realloc_r+0x1e>
 800efb2:	42bc      	cmp	r4, r7
 800efb4:	4622      	mov	r2, r4
 800efb6:	4631      	mov	r1, r6
 800efb8:	bf28      	it	cs
 800efba:	463a      	movcs	r2, r7
 800efbc:	f7fb fa52 	bl	800a464 <memcpy>
 800efc0:	4631      	mov	r1, r6
 800efc2:	4640      	mov	r0, r8
 800efc4:	f7fb fa64 	bl	800a490 <_free_r>
 800efc8:	e7e1      	b.n	800ef8e <_realloc_r+0x1e>
 800efca:	4635      	mov	r5, r6
 800efcc:	e7df      	b.n	800ef8e <_realloc_r+0x1e>

0800efce <__sfputc_r>:
 800efce:	6893      	ldr	r3, [r2, #8]
 800efd0:	3b01      	subs	r3, #1
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	b410      	push	{r4}
 800efd6:	6093      	str	r3, [r2, #8]
 800efd8:	da08      	bge.n	800efec <__sfputc_r+0x1e>
 800efda:	6994      	ldr	r4, [r2, #24]
 800efdc:	42a3      	cmp	r3, r4
 800efde:	db01      	blt.n	800efe4 <__sfputc_r+0x16>
 800efe0:	290a      	cmp	r1, #10
 800efe2:	d103      	bne.n	800efec <__sfputc_r+0x1e>
 800efe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efe8:	f000 b94a 	b.w	800f280 <__swbuf_r>
 800efec:	6813      	ldr	r3, [r2, #0]
 800efee:	1c58      	adds	r0, r3, #1
 800eff0:	6010      	str	r0, [r2, #0]
 800eff2:	7019      	strb	r1, [r3, #0]
 800eff4:	4608      	mov	r0, r1
 800eff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800effa:	4770      	bx	lr

0800effc <__sfputs_r>:
 800effc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800effe:	4606      	mov	r6, r0
 800f000:	460f      	mov	r7, r1
 800f002:	4614      	mov	r4, r2
 800f004:	18d5      	adds	r5, r2, r3
 800f006:	42ac      	cmp	r4, r5
 800f008:	d101      	bne.n	800f00e <__sfputs_r+0x12>
 800f00a:	2000      	movs	r0, #0
 800f00c:	e007      	b.n	800f01e <__sfputs_r+0x22>
 800f00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f012:	463a      	mov	r2, r7
 800f014:	4630      	mov	r0, r6
 800f016:	f7ff ffda 	bl	800efce <__sfputc_r>
 800f01a:	1c43      	adds	r3, r0, #1
 800f01c:	d1f3      	bne.n	800f006 <__sfputs_r+0xa>
 800f01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f020 <_vfiprintf_r>:
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f024:	460d      	mov	r5, r1
 800f026:	b09d      	sub	sp, #116	; 0x74
 800f028:	4614      	mov	r4, r2
 800f02a:	4698      	mov	r8, r3
 800f02c:	4606      	mov	r6, r0
 800f02e:	b118      	cbz	r0, 800f038 <_vfiprintf_r+0x18>
 800f030:	6983      	ldr	r3, [r0, #24]
 800f032:	b90b      	cbnz	r3, 800f038 <_vfiprintf_r+0x18>
 800f034:	f7ff fed0 	bl	800edd8 <__sinit>
 800f038:	4b89      	ldr	r3, [pc, #548]	; (800f260 <_vfiprintf_r+0x240>)
 800f03a:	429d      	cmp	r5, r3
 800f03c:	d11b      	bne.n	800f076 <_vfiprintf_r+0x56>
 800f03e:	6875      	ldr	r5, [r6, #4]
 800f040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f042:	07d9      	lsls	r1, r3, #31
 800f044:	d405      	bmi.n	800f052 <_vfiprintf_r+0x32>
 800f046:	89ab      	ldrh	r3, [r5, #12]
 800f048:	059a      	lsls	r2, r3, #22
 800f04a:	d402      	bmi.n	800f052 <_vfiprintf_r+0x32>
 800f04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f04e:	f7ff ff73 	bl	800ef38 <__retarget_lock_acquire_recursive>
 800f052:	89ab      	ldrh	r3, [r5, #12]
 800f054:	071b      	lsls	r3, r3, #28
 800f056:	d501      	bpl.n	800f05c <_vfiprintf_r+0x3c>
 800f058:	692b      	ldr	r3, [r5, #16]
 800f05a:	b9eb      	cbnz	r3, 800f098 <_vfiprintf_r+0x78>
 800f05c:	4629      	mov	r1, r5
 800f05e:	4630      	mov	r0, r6
 800f060:	f000 f960 	bl	800f324 <__swsetup_r>
 800f064:	b1c0      	cbz	r0, 800f098 <_vfiprintf_r+0x78>
 800f066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f068:	07dc      	lsls	r4, r3, #31
 800f06a:	d50e      	bpl.n	800f08a <_vfiprintf_r+0x6a>
 800f06c:	f04f 30ff 	mov.w	r0, #4294967295
 800f070:	b01d      	add	sp, #116	; 0x74
 800f072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f076:	4b7b      	ldr	r3, [pc, #492]	; (800f264 <_vfiprintf_r+0x244>)
 800f078:	429d      	cmp	r5, r3
 800f07a:	d101      	bne.n	800f080 <_vfiprintf_r+0x60>
 800f07c:	68b5      	ldr	r5, [r6, #8]
 800f07e:	e7df      	b.n	800f040 <_vfiprintf_r+0x20>
 800f080:	4b79      	ldr	r3, [pc, #484]	; (800f268 <_vfiprintf_r+0x248>)
 800f082:	429d      	cmp	r5, r3
 800f084:	bf08      	it	eq
 800f086:	68f5      	ldreq	r5, [r6, #12]
 800f088:	e7da      	b.n	800f040 <_vfiprintf_r+0x20>
 800f08a:	89ab      	ldrh	r3, [r5, #12]
 800f08c:	0598      	lsls	r0, r3, #22
 800f08e:	d4ed      	bmi.n	800f06c <_vfiprintf_r+0x4c>
 800f090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f092:	f7ff ff52 	bl	800ef3a <__retarget_lock_release_recursive>
 800f096:	e7e9      	b.n	800f06c <_vfiprintf_r+0x4c>
 800f098:	2300      	movs	r3, #0
 800f09a:	9309      	str	r3, [sp, #36]	; 0x24
 800f09c:	2320      	movs	r3, #32
 800f09e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0a6:	2330      	movs	r3, #48	; 0x30
 800f0a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f26c <_vfiprintf_r+0x24c>
 800f0ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0b0:	f04f 0901 	mov.w	r9, #1
 800f0b4:	4623      	mov	r3, r4
 800f0b6:	469a      	mov	sl, r3
 800f0b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0bc:	b10a      	cbz	r2, 800f0c2 <_vfiprintf_r+0xa2>
 800f0be:	2a25      	cmp	r2, #37	; 0x25
 800f0c0:	d1f9      	bne.n	800f0b6 <_vfiprintf_r+0x96>
 800f0c2:	ebba 0b04 	subs.w	fp, sl, r4
 800f0c6:	d00b      	beq.n	800f0e0 <_vfiprintf_r+0xc0>
 800f0c8:	465b      	mov	r3, fp
 800f0ca:	4622      	mov	r2, r4
 800f0cc:	4629      	mov	r1, r5
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	f7ff ff94 	bl	800effc <__sfputs_r>
 800f0d4:	3001      	adds	r0, #1
 800f0d6:	f000 80aa 	beq.w	800f22e <_vfiprintf_r+0x20e>
 800f0da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0dc:	445a      	add	r2, fp
 800f0de:	9209      	str	r2, [sp, #36]	; 0x24
 800f0e0:	f89a 3000 	ldrb.w	r3, [sl]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	f000 80a2 	beq.w	800f22e <_vfiprintf_r+0x20e>
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0f4:	f10a 0a01 	add.w	sl, sl, #1
 800f0f8:	9304      	str	r3, [sp, #16]
 800f0fa:	9307      	str	r3, [sp, #28]
 800f0fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f100:	931a      	str	r3, [sp, #104]	; 0x68
 800f102:	4654      	mov	r4, sl
 800f104:	2205      	movs	r2, #5
 800f106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f10a:	4858      	ldr	r0, [pc, #352]	; (800f26c <_vfiprintf_r+0x24c>)
 800f10c:	f7f1 f868 	bl	80001e0 <memchr>
 800f110:	9a04      	ldr	r2, [sp, #16]
 800f112:	b9d8      	cbnz	r0, 800f14c <_vfiprintf_r+0x12c>
 800f114:	06d1      	lsls	r1, r2, #27
 800f116:	bf44      	itt	mi
 800f118:	2320      	movmi	r3, #32
 800f11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f11e:	0713      	lsls	r3, r2, #28
 800f120:	bf44      	itt	mi
 800f122:	232b      	movmi	r3, #43	; 0x2b
 800f124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f128:	f89a 3000 	ldrb.w	r3, [sl]
 800f12c:	2b2a      	cmp	r3, #42	; 0x2a
 800f12e:	d015      	beq.n	800f15c <_vfiprintf_r+0x13c>
 800f130:	9a07      	ldr	r2, [sp, #28]
 800f132:	4654      	mov	r4, sl
 800f134:	2000      	movs	r0, #0
 800f136:	f04f 0c0a 	mov.w	ip, #10
 800f13a:	4621      	mov	r1, r4
 800f13c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f140:	3b30      	subs	r3, #48	; 0x30
 800f142:	2b09      	cmp	r3, #9
 800f144:	d94e      	bls.n	800f1e4 <_vfiprintf_r+0x1c4>
 800f146:	b1b0      	cbz	r0, 800f176 <_vfiprintf_r+0x156>
 800f148:	9207      	str	r2, [sp, #28]
 800f14a:	e014      	b.n	800f176 <_vfiprintf_r+0x156>
 800f14c:	eba0 0308 	sub.w	r3, r0, r8
 800f150:	fa09 f303 	lsl.w	r3, r9, r3
 800f154:	4313      	orrs	r3, r2
 800f156:	9304      	str	r3, [sp, #16]
 800f158:	46a2      	mov	sl, r4
 800f15a:	e7d2      	b.n	800f102 <_vfiprintf_r+0xe2>
 800f15c:	9b03      	ldr	r3, [sp, #12]
 800f15e:	1d19      	adds	r1, r3, #4
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	9103      	str	r1, [sp, #12]
 800f164:	2b00      	cmp	r3, #0
 800f166:	bfbb      	ittet	lt
 800f168:	425b      	neglt	r3, r3
 800f16a:	f042 0202 	orrlt.w	r2, r2, #2
 800f16e:	9307      	strge	r3, [sp, #28]
 800f170:	9307      	strlt	r3, [sp, #28]
 800f172:	bfb8      	it	lt
 800f174:	9204      	strlt	r2, [sp, #16]
 800f176:	7823      	ldrb	r3, [r4, #0]
 800f178:	2b2e      	cmp	r3, #46	; 0x2e
 800f17a:	d10c      	bne.n	800f196 <_vfiprintf_r+0x176>
 800f17c:	7863      	ldrb	r3, [r4, #1]
 800f17e:	2b2a      	cmp	r3, #42	; 0x2a
 800f180:	d135      	bne.n	800f1ee <_vfiprintf_r+0x1ce>
 800f182:	9b03      	ldr	r3, [sp, #12]
 800f184:	1d1a      	adds	r2, r3, #4
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	9203      	str	r2, [sp, #12]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	bfb8      	it	lt
 800f18e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f192:	3402      	adds	r4, #2
 800f194:	9305      	str	r3, [sp, #20]
 800f196:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f27c <_vfiprintf_r+0x25c>
 800f19a:	7821      	ldrb	r1, [r4, #0]
 800f19c:	2203      	movs	r2, #3
 800f19e:	4650      	mov	r0, sl
 800f1a0:	f7f1 f81e 	bl	80001e0 <memchr>
 800f1a4:	b140      	cbz	r0, 800f1b8 <_vfiprintf_r+0x198>
 800f1a6:	2340      	movs	r3, #64	; 0x40
 800f1a8:	eba0 000a 	sub.w	r0, r0, sl
 800f1ac:	fa03 f000 	lsl.w	r0, r3, r0
 800f1b0:	9b04      	ldr	r3, [sp, #16]
 800f1b2:	4303      	orrs	r3, r0
 800f1b4:	3401      	adds	r4, #1
 800f1b6:	9304      	str	r3, [sp, #16]
 800f1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1bc:	482c      	ldr	r0, [pc, #176]	; (800f270 <_vfiprintf_r+0x250>)
 800f1be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1c2:	2206      	movs	r2, #6
 800f1c4:	f7f1 f80c 	bl	80001e0 <memchr>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	d03f      	beq.n	800f24c <_vfiprintf_r+0x22c>
 800f1cc:	4b29      	ldr	r3, [pc, #164]	; (800f274 <_vfiprintf_r+0x254>)
 800f1ce:	bb1b      	cbnz	r3, 800f218 <_vfiprintf_r+0x1f8>
 800f1d0:	9b03      	ldr	r3, [sp, #12]
 800f1d2:	3307      	adds	r3, #7
 800f1d4:	f023 0307 	bic.w	r3, r3, #7
 800f1d8:	3308      	adds	r3, #8
 800f1da:	9303      	str	r3, [sp, #12]
 800f1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1de:	443b      	add	r3, r7
 800f1e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1e2:	e767      	b.n	800f0b4 <_vfiprintf_r+0x94>
 800f1e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1e8:	460c      	mov	r4, r1
 800f1ea:	2001      	movs	r0, #1
 800f1ec:	e7a5      	b.n	800f13a <_vfiprintf_r+0x11a>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	3401      	adds	r4, #1
 800f1f2:	9305      	str	r3, [sp, #20]
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	f04f 0c0a 	mov.w	ip, #10
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f200:	3a30      	subs	r2, #48	; 0x30
 800f202:	2a09      	cmp	r2, #9
 800f204:	d903      	bls.n	800f20e <_vfiprintf_r+0x1ee>
 800f206:	2b00      	cmp	r3, #0
 800f208:	d0c5      	beq.n	800f196 <_vfiprintf_r+0x176>
 800f20a:	9105      	str	r1, [sp, #20]
 800f20c:	e7c3      	b.n	800f196 <_vfiprintf_r+0x176>
 800f20e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f212:	4604      	mov	r4, r0
 800f214:	2301      	movs	r3, #1
 800f216:	e7f0      	b.n	800f1fa <_vfiprintf_r+0x1da>
 800f218:	ab03      	add	r3, sp, #12
 800f21a:	9300      	str	r3, [sp, #0]
 800f21c:	462a      	mov	r2, r5
 800f21e:	4b16      	ldr	r3, [pc, #88]	; (800f278 <_vfiprintf_r+0x258>)
 800f220:	a904      	add	r1, sp, #16
 800f222:	4630      	mov	r0, r6
 800f224:	f7fb fab4 	bl	800a790 <_printf_float>
 800f228:	4607      	mov	r7, r0
 800f22a:	1c78      	adds	r0, r7, #1
 800f22c:	d1d6      	bne.n	800f1dc <_vfiprintf_r+0x1bc>
 800f22e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f230:	07d9      	lsls	r1, r3, #31
 800f232:	d405      	bmi.n	800f240 <_vfiprintf_r+0x220>
 800f234:	89ab      	ldrh	r3, [r5, #12]
 800f236:	059a      	lsls	r2, r3, #22
 800f238:	d402      	bmi.n	800f240 <_vfiprintf_r+0x220>
 800f23a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f23c:	f7ff fe7d 	bl	800ef3a <__retarget_lock_release_recursive>
 800f240:	89ab      	ldrh	r3, [r5, #12]
 800f242:	065b      	lsls	r3, r3, #25
 800f244:	f53f af12 	bmi.w	800f06c <_vfiprintf_r+0x4c>
 800f248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f24a:	e711      	b.n	800f070 <_vfiprintf_r+0x50>
 800f24c:	ab03      	add	r3, sp, #12
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	462a      	mov	r2, r5
 800f252:	4b09      	ldr	r3, [pc, #36]	; (800f278 <_vfiprintf_r+0x258>)
 800f254:	a904      	add	r1, sp, #16
 800f256:	4630      	mov	r0, r6
 800f258:	f7fb fd3e 	bl	800acd8 <_printf_i>
 800f25c:	e7e4      	b.n	800f228 <_vfiprintf_r+0x208>
 800f25e:	bf00      	nop
 800f260:	08010104 	.word	0x08010104
 800f264:	08010124 	.word	0x08010124
 800f268:	080100e4 	.word	0x080100e4
 800f26c:	0801007c 	.word	0x0801007c
 800f270:	08010086 	.word	0x08010086
 800f274:	0800a791 	.word	0x0800a791
 800f278:	0800effd 	.word	0x0800effd
 800f27c:	08010082 	.word	0x08010082

0800f280 <__swbuf_r>:
 800f280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f282:	460e      	mov	r6, r1
 800f284:	4614      	mov	r4, r2
 800f286:	4605      	mov	r5, r0
 800f288:	b118      	cbz	r0, 800f292 <__swbuf_r+0x12>
 800f28a:	6983      	ldr	r3, [r0, #24]
 800f28c:	b90b      	cbnz	r3, 800f292 <__swbuf_r+0x12>
 800f28e:	f7ff fda3 	bl	800edd8 <__sinit>
 800f292:	4b21      	ldr	r3, [pc, #132]	; (800f318 <__swbuf_r+0x98>)
 800f294:	429c      	cmp	r4, r3
 800f296:	d12b      	bne.n	800f2f0 <__swbuf_r+0x70>
 800f298:	686c      	ldr	r4, [r5, #4]
 800f29a:	69a3      	ldr	r3, [r4, #24]
 800f29c:	60a3      	str	r3, [r4, #8]
 800f29e:	89a3      	ldrh	r3, [r4, #12]
 800f2a0:	071a      	lsls	r2, r3, #28
 800f2a2:	d52f      	bpl.n	800f304 <__swbuf_r+0x84>
 800f2a4:	6923      	ldr	r3, [r4, #16]
 800f2a6:	b36b      	cbz	r3, 800f304 <__swbuf_r+0x84>
 800f2a8:	6923      	ldr	r3, [r4, #16]
 800f2aa:	6820      	ldr	r0, [r4, #0]
 800f2ac:	1ac0      	subs	r0, r0, r3
 800f2ae:	6963      	ldr	r3, [r4, #20]
 800f2b0:	b2f6      	uxtb	r6, r6
 800f2b2:	4283      	cmp	r3, r0
 800f2b4:	4637      	mov	r7, r6
 800f2b6:	dc04      	bgt.n	800f2c2 <__swbuf_r+0x42>
 800f2b8:	4621      	mov	r1, r4
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f7ff fcf8 	bl	800ecb0 <_fflush_r>
 800f2c0:	bb30      	cbnz	r0, 800f310 <__swbuf_r+0x90>
 800f2c2:	68a3      	ldr	r3, [r4, #8]
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	60a3      	str	r3, [r4, #8]
 800f2c8:	6823      	ldr	r3, [r4, #0]
 800f2ca:	1c5a      	adds	r2, r3, #1
 800f2cc:	6022      	str	r2, [r4, #0]
 800f2ce:	701e      	strb	r6, [r3, #0]
 800f2d0:	6963      	ldr	r3, [r4, #20]
 800f2d2:	3001      	adds	r0, #1
 800f2d4:	4283      	cmp	r3, r0
 800f2d6:	d004      	beq.n	800f2e2 <__swbuf_r+0x62>
 800f2d8:	89a3      	ldrh	r3, [r4, #12]
 800f2da:	07db      	lsls	r3, r3, #31
 800f2dc:	d506      	bpl.n	800f2ec <__swbuf_r+0x6c>
 800f2de:	2e0a      	cmp	r6, #10
 800f2e0:	d104      	bne.n	800f2ec <__swbuf_r+0x6c>
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f7ff fce3 	bl	800ecb0 <_fflush_r>
 800f2ea:	b988      	cbnz	r0, 800f310 <__swbuf_r+0x90>
 800f2ec:	4638      	mov	r0, r7
 800f2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2f0:	4b0a      	ldr	r3, [pc, #40]	; (800f31c <__swbuf_r+0x9c>)
 800f2f2:	429c      	cmp	r4, r3
 800f2f4:	d101      	bne.n	800f2fa <__swbuf_r+0x7a>
 800f2f6:	68ac      	ldr	r4, [r5, #8]
 800f2f8:	e7cf      	b.n	800f29a <__swbuf_r+0x1a>
 800f2fa:	4b09      	ldr	r3, [pc, #36]	; (800f320 <__swbuf_r+0xa0>)
 800f2fc:	429c      	cmp	r4, r3
 800f2fe:	bf08      	it	eq
 800f300:	68ec      	ldreq	r4, [r5, #12]
 800f302:	e7ca      	b.n	800f29a <__swbuf_r+0x1a>
 800f304:	4621      	mov	r1, r4
 800f306:	4628      	mov	r0, r5
 800f308:	f000 f80c 	bl	800f324 <__swsetup_r>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	d0cb      	beq.n	800f2a8 <__swbuf_r+0x28>
 800f310:	f04f 37ff 	mov.w	r7, #4294967295
 800f314:	e7ea      	b.n	800f2ec <__swbuf_r+0x6c>
 800f316:	bf00      	nop
 800f318:	08010104 	.word	0x08010104
 800f31c:	08010124 	.word	0x08010124
 800f320:	080100e4 	.word	0x080100e4

0800f324 <__swsetup_r>:
 800f324:	4b32      	ldr	r3, [pc, #200]	; (800f3f0 <__swsetup_r+0xcc>)
 800f326:	b570      	push	{r4, r5, r6, lr}
 800f328:	681d      	ldr	r5, [r3, #0]
 800f32a:	4606      	mov	r6, r0
 800f32c:	460c      	mov	r4, r1
 800f32e:	b125      	cbz	r5, 800f33a <__swsetup_r+0x16>
 800f330:	69ab      	ldr	r3, [r5, #24]
 800f332:	b913      	cbnz	r3, 800f33a <__swsetup_r+0x16>
 800f334:	4628      	mov	r0, r5
 800f336:	f7ff fd4f 	bl	800edd8 <__sinit>
 800f33a:	4b2e      	ldr	r3, [pc, #184]	; (800f3f4 <__swsetup_r+0xd0>)
 800f33c:	429c      	cmp	r4, r3
 800f33e:	d10f      	bne.n	800f360 <__swsetup_r+0x3c>
 800f340:	686c      	ldr	r4, [r5, #4]
 800f342:	89a3      	ldrh	r3, [r4, #12]
 800f344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f348:	0719      	lsls	r1, r3, #28
 800f34a:	d42c      	bmi.n	800f3a6 <__swsetup_r+0x82>
 800f34c:	06dd      	lsls	r5, r3, #27
 800f34e:	d411      	bmi.n	800f374 <__swsetup_r+0x50>
 800f350:	2309      	movs	r3, #9
 800f352:	6033      	str	r3, [r6, #0]
 800f354:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f358:	81a3      	strh	r3, [r4, #12]
 800f35a:	f04f 30ff 	mov.w	r0, #4294967295
 800f35e:	e03e      	b.n	800f3de <__swsetup_r+0xba>
 800f360:	4b25      	ldr	r3, [pc, #148]	; (800f3f8 <__swsetup_r+0xd4>)
 800f362:	429c      	cmp	r4, r3
 800f364:	d101      	bne.n	800f36a <__swsetup_r+0x46>
 800f366:	68ac      	ldr	r4, [r5, #8]
 800f368:	e7eb      	b.n	800f342 <__swsetup_r+0x1e>
 800f36a:	4b24      	ldr	r3, [pc, #144]	; (800f3fc <__swsetup_r+0xd8>)
 800f36c:	429c      	cmp	r4, r3
 800f36e:	bf08      	it	eq
 800f370:	68ec      	ldreq	r4, [r5, #12]
 800f372:	e7e6      	b.n	800f342 <__swsetup_r+0x1e>
 800f374:	0758      	lsls	r0, r3, #29
 800f376:	d512      	bpl.n	800f39e <__swsetup_r+0x7a>
 800f378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f37a:	b141      	cbz	r1, 800f38e <__swsetup_r+0x6a>
 800f37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f380:	4299      	cmp	r1, r3
 800f382:	d002      	beq.n	800f38a <__swsetup_r+0x66>
 800f384:	4630      	mov	r0, r6
 800f386:	f7fb f883 	bl	800a490 <_free_r>
 800f38a:	2300      	movs	r3, #0
 800f38c:	6363      	str	r3, [r4, #52]	; 0x34
 800f38e:	89a3      	ldrh	r3, [r4, #12]
 800f390:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f394:	81a3      	strh	r3, [r4, #12]
 800f396:	2300      	movs	r3, #0
 800f398:	6063      	str	r3, [r4, #4]
 800f39a:	6923      	ldr	r3, [r4, #16]
 800f39c:	6023      	str	r3, [r4, #0]
 800f39e:	89a3      	ldrh	r3, [r4, #12]
 800f3a0:	f043 0308 	orr.w	r3, r3, #8
 800f3a4:	81a3      	strh	r3, [r4, #12]
 800f3a6:	6923      	ldr	r3, [r4, #16]
 800f3a8:	b94b      	cbnz	r3, 800f3be <__swsetup_r+0x9a>
 800f3aa:	89a3      	ldrh	r3, [r4, #12]
 800f3ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3b4:	d003      	beq.n	800f3be <__swsetup_r+0x9a>
 800f3b6:	4621      	mov	r1, r4
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f000 f84d 	bl	800f458 <__smakebuf_r>
 800f3be:	89a0      	ldrh	r0, [r4, #12]
 800f3c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3c4:	f010 0301 	ands.w	r3, r0, #1
 800f3c8:	d00a      	beq.n	800f3e0 <__swsetup_r+0xbc>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	60a3      	str	r3, [r4, #8]
 800f3ce:	6963      	ldr	r3, [r4, #20]
 800f3d0:	425b      	negs	r3, r3
 800f3d2:	61a3      	str	r3, [r4, #24]
 800f3d4:	6923      	ldr	r3, [r4, #16]
 800f3d6:	b943      	cbnz	r3, 800f3ea <__swsetup_r+0xc6>
 800f3d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f3dc:	d1ba      	bne.n	800f354 <__swsetup_r+0x30>
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	0781      	lsls	r1, r0, #30
 800f3e2:	bf58      	it	pl
 800f3e4:	6963      	ldrpl	r3, [r4, #20]
 800f3e6:	60a3      	str	r3, [r4, #8]
 800f3e8:	e7f4      	b.n	800f3d4 <__swsetup_r+0xb0>
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	e7f7      	b.n	800f3de <__swsetup_r+0xba>
 800f3ee:	bf00      	nop
 800f3f0:	200000fc 	.word	0x200000fc
 800f3f4:	08010104 	.word	0x08010104
 800f3f8:	08010124 	.word	0x08010124
 800f3fc:	080100e4 	.word	0x080100e4

0800f400 <abort>:
 800f400:	b508      	push	{r3, lr}
 800f402:	2006      	movs	r0, #6
 800f404:	f000 f898 	bl	800f538 <raise>
 800f408:	2001      	movs	r0, #1
 800f40a:	f7f3 f83f 	bl	800248c <_exit>

0800f40e <__swhatbuf_r>:
 800f40e:	b570      	push	{r4, r5, r6, lr}
 800f410:	460e      	mov	r6, r1
 800f412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f416:	2900      	cmp	r1, #0
 800f418:	b096      	sub	sp, #88	; 0x58
 800f41a:	4614      	mov	r4, r2
 800f41c:	461d      	mov	r5, r3
 800f41e:	da08      	bge.n	800f432 <__swhatbuf_r+0x24>
 800f420:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f424:	2200      	movs	r2, #0
 800f426:	602a      	str	r2, [r5, #0]
 800f428:	061a      	lsls	r2, r3, #24
 800f42a:	d410      	bmi.n	800f44e <__swhatbuf_r+0x40>
 800f42c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f430:	e00e      	b.n	800f450 <__swhatbuf_r+0x42>
 800f432:	466a      	mov	r2, sp
 800f434:	f000 f89c 	bl	800f570 <_fstat_r>
 800f438:	2800      	cmp	r0, #0
 800f43a:	dbf1      	blt.n	800f420 <__swhatbuf_r+0x12>
 800f43c:	9a01      	ldr	r2, [sp, #4]
 800f43e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f442:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f446:	425a      	negs	r2, r3
 800f448:	415a      	adcs	r2, r3
 800f44a:	602a      	str	r2, [r5, #0]
 800f44c:	e7ee      	b.n	800f42c <__swhatbuf_r+0x1e>
 800f44e:	2340      	movs	r3, #64	; 0x40
 800f450:	2000      	movs	r0, #0
 800f452:	6023      	str	r3, [r4, #0]
 800f454:	b016      	add	sp, #88	; 0x58
 800f456:	bd70      	pop	{r4, r5, r6, pc}

0800f458 <__smakebuf_r>:
 800f458:	898b      	ldrh	r3, [r1, #12]
 800f45a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f45c:	079d      	lsls	r5, r3, #30
 800f45e:	4606      	mov	r6, r0
 800f460:	460c      	mov	r4, r1
 800f462:	d507      	bpl.n	800f474 <__smakebuf_r+0x1c>
 800f464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f468:	6023      	str	r3, [r4, #0]
 800f46a:	6123      	str	r3, [r4, #16]
 800f46c:	2301      	movs	r3, #1
 800f46e:	6163      	str	r3, [r4, #20]
 800f470:	b002      	add	sp, #8
 800f472:	bd70      	pop	{r4, r5, r6, pc}
 800f474:	ab01      	add	r3, sp, #4
 800f476:	466a      	mov	r2, sp
 800f478:	f7ff ffc9 	bl	800f40e <__swhatbuf_r>
 800f47c:	9900      	ldr	r1, [sp, #0]
 800f47e:	4605      	mov	r5, r0
 800f480:	4630      	mov	r0, r6
 800f482:	f7fb f871 	bl	800a568 <_malloc_r>
 800f486:	b948      	cbnz	r0, 800f49c <__smakebuf_r+0x44>
 800f488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f48c:	059a      	lsls	r2, r3, #22
 800f48e:	d4ef      	bmi.n	800f470 <__smakebuf_r+0x18>
 800f490:	f023 0303 	bic.w	r3, r3, #3
 800f494:	f043 0302 	orr.w	r3, r3, #2
 800f498:	81a3      	strh	r3, [r4, #12]
 800f49a:	e7e3      	b.n	800f464 <__smakebuf_r+0xc>
 800f49c:	4b0d      	ldr	r3, [pc, #52]	; (800f4d4 <__smakebuf_r+0x7c>)
 800f49e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f4a0:	89a3      	ldrh	r3, [r4, #12]
 800f4a2:	6020      	str	r0, [r4, #0]
 800f4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4a8:	81a3      	strh	r3, [r4, #12]
 800f4aa:	9b00      	ldr	r3, [sp, #0]
 800f4ac:	6163      	str	r3, [r4, #20]
 800f4ae:	9b01      	ldr	r3, [sp, #4]
 800f4b0:	6120      	str	r0, [r4, #16]
 800f4b2:	b15b      	cbz	r3, 800f4cc <__smakebuf_r+0x74>
 800f4b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f000 f86b 	bl	800f594 <_isatty_r>
 800f4be:	b128      	cbz	r0, 800f4cc <__smakebuf_r+0x74>
 800f4c0:	89a3      	ldrh	r3, [r4, #12]
 800f4c2:	f023 0303 	bic.w	r3, r3, #3
 800f4c6:	f043 0301 	orr.w	r3, r3, #1
 800f4ca:	81a3      	strh	r3, [r4, #12]
 800f4cc:	89a0      	ldrh	r0, [r4, #12]
 800f4ce:	4305      	orrs	r5, r0
 800f4d0:	81a5      	strh	r5, [r4, #12]
 800f4d2:	e7cd      	b.n	800f470 <__smakebuf_r+0x18>
 800f4d4:	0800ed71 	.word	0x0800ed71

0800f4d8 <_malloc_usable_size_r>:
 800f4d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4dc:	1f18      	subs	r0, r3, #4
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	bfbc      	itt	lt
 800f4e2:	580b      	ldrlt	r3, [r1, r0]
 800f4e4:	18c0      	addlt	r0, r0, r3
 800f4e6:	4770      	bx	lr

0800f4e8 <_raise_r>:
 800f4e8:	291f      	cmp	r1, #31
 800f4ea:	b538      	push	{r3, r4, r5, lr}
 800f4ec:	4604      	mov	r4, r0
 800f4ee:	460d      	mov	r5, r1
 800f4f0:	d904      	bls.n	800f4fc <_raise_r+0x14>
 800f4f2:	2316      	movs	r3, #22
 800f4f4:	6003      	str	r3, [r0, #0]
 800f4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f4fa:	bd38      	pop	{r3, r4, r5, pc}
 800f4fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4fe:	b112      	cbz	r2, 800f506 <_raise_r+0x1e>
 800f500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f504:	b94b      	cbnz	r3, 800f51a <_raise_r+0x32>
 800f506:	4620      	mov	r0, r4
 800f508:	f000 f830 	bl	800f56c <_getpid_r>
 800f50c:	462a      	mov	r2, r5
 800f50e:	4601      	mov	r1, r0
 800f510:	4620      	mov	r0, r4
 800f512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f516:	f000 b817 	b.w	800f548 <_kill_r>
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d00a      	beq.n	800f534 <_raise_r+0x4c>
 800f51e:	1c59      	adds	r1, r3, #1
 800f520:	d103      	bne.n	800f52a <_raise_r+0x42>
 800f522:	2316      	movs	r3, #22
 800f524:	6003      	str	r3, [r0, #0]
 800f526:	2001      	movs	r0, #1
 800f528:	e7e7      	b.n	800f4fa <_raise_r+0x12>
 800f52a:	2400      	movs	r4, #0
 800f52c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f530:	4628      	mov	r0, r5
 800f532:	4798      	blx	r3
 800f534:	2000      	movs	r0, #0
 800f536:	e7e0      	b.n	800f4fa <_raise_r+0x12>

0800f538 <raise>:
 800f538:	4b02      	ldr	r3, [pc, #8]	; (800f544 <raise+0xc>)
 800f53a:	4601      	mov	r1, r0
 800f53c:	6818      	ldr	r0, [r3, #0]
 800f53e:	f7ff bfd3 	b.w	800f4e8 <_raise_r>
 800f542:	bf00      	nop
 800f544:	200000fc 	.word	0x200000fc

0800f548 <_kill_r>:
 800f548:	b538      	push	{r3, r4, r5, lr}
 800f54a:	4d07      	ldr	r5, [pc, #28]	; (800f568 <_kill_r+0x20>)
 800f54c:	2300      	movs	r3, #0
 800f54e:	4604      	mov	r4, r0
 800f550:	4608      	mov	r0, r1
 800f552:	4611      	mov	r1, r2
 800f554:	602b      	str	r3, [r5, #0]
 800f556:	f7f2 ff89 	bl	800246c <_kill>
 800f55a:	1c43      	adds	r3, r0, #1
 800f55c:	d102      	bne.n	800f564 <_kill_r+0x1c>
 800f55e:	682b      	ldr	r3, [r5, #0]
 800f560:	b103      	cbz	r3, 800f564 <_kill_r+0x1c>
 800f562:	6023      	str	r3, [r4, #0]
 800f564:	bd38      	pop	{r3, r4, r5, pc}
 800f566:	bf00      	nop
 800f568:	20002e34 	.word	0x20002e34

0800f56c <_getpid_r>:
 800f56c:	f7f2 bf76 	b.w	800245c <_getpid>

0800f570 <_fstat_r>:
 800f570:	b538      	push	{r3, r4, r5, lr}
 800f572:	4d07      	ldr	r5, [pc, #28]	; (800f590 <_fstat_r+0x20>)
 800f574:	2300      	movs	r3, #0
 800f576:	4604      	mov	r4, r0
 800f578:	4608      	mov	r0, r1
 800f57a:	4611      	mov	r1, r2
 800f57c:	602b      	str	r3, [r5, #0]
 800f57e:	f7f2 ffd4 	bl	800252a <_fstat>
 800f582:	1c43      	adds	r3, r0, #1
 800f584:	d102      	bne.n	800f58c <_fstat_r+0x1c>
 800f586:	682b      	ldr	r3, [r5, #0]
 800f588:	b103      	cbz	r3, 800f58c <_fstat_r+0x1c>
 800f58a:	6023      	str	r3, [r4, #0]
 800f58c:	bd38      	pop	{r3, r4, r5, pc}
 800f58e:	bf00      	nop
 800f590:	20002e34 	.word	0x20002e34

0800f594 <_isatty_r>:
 800f594:	b538      	push	{r3, r4, r5, lr}
 800f596:	4d06      	ldr	r5, [pc, #24]	; (800f5b0 <_isatty_r+0x1c>)
 800f598:	2300      	movs	r3, #0
 800f59a:	4604      	mov	r4, r0
 800f59c:	4608      	mov	r0, r1
 800f59e:	602b      	str	r3, [r5, #0]
 800f5a0:	f7f2 ffd3 	bl	800254a <_isatty>
 800f5a4:	1c43      	adds	r3, r0, #1
 800f5a6:	d102      	bne.n	800f5ae <_isatty_r+0x1a>
 800f5a8:	682b      	ldr	r3, [r5, #0]
 800f5aa:	b103      	cbz	r3, 800f5ae <_isatty_r+0x1a>
 800f5ac:	6023      	str	r3, [r4, #0]
 800f5ae:	bd38      	pop	{r3, r4, r5, pc}
 800f5b0:	20002e34 	.word	0x20002e34

0800f5b4 <_init>:
 800f5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5b6:	bf00      	nop
 800f5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ba:	bc08      	pop	{r3}
 800f5bc:	469e      	mov	lr, r3
 800f5be:	4770      	bx	lr

0800f5c0 <_fini>:
 800f5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c2:	bf00      	nop
 800f5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5c6:	bc08      	pop	{r3}
 800f5c8:	469e      	mov	lr, r3
 800f5ca:	4770      	bx	lr
