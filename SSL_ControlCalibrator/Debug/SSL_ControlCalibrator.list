
SSL_ControlCalibrator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f47c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b74  0800f610  0800f610  0001f610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010184  08010184  000302d0  2**0
                  CONTENTS
  4 .ARM          00000008  08010184  08010184  00020184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801018c  0801018c  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801018c  0801018c  0002018c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08010194  08010194  00020194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0801019c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302d0  2**0
                  CONTENTS
 10 .bss          00002b6c  200002d0  200002d0  000302d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002e3c  20002e3c  000302d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1bc  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046fc  00000000  00000000  0004d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  00051bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f0  00000000  00000000  00053378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028fd0  00000000  00000000  00054968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e515  00000000  00000000  0007d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5a1f  00000000  00000000  0009be4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017186c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bf0  00000000  00000000  001718bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f5f4 	.word	0x0800f5f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800f5f4 	.word	0x0800f5f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_ZN8BTS7960BC1EPVmS1_S1_S1_P12GPIO_TypeDeftS3_t>:
 *      Author: Gabriel
 */

#include "BTS7960B.hpp"

BTS7960B::BTS7960B(__IO uint32_t* ina_ccr, __IO uint32_t* inb_ccr, __IO uint32_t* ina_arr, __IO uint32_t* inb_arr, GPIO_TypeDef* inha_gpio_port, uint16_t inha_gpio_pin, GPIO_TypeDef* inhb_gpio_port, uint16_t inhb_gpio_pin)
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
 : ina(ina_ccr), inb(inb_ccr), ina_max(ina_arr), inb_max(inb_arr), inha_port(inha_gpio_port), inha_pin(inha_gpio_pin), inhb_port(inhb_gpio_port), inhb_pin(inhb_gpio_pin){
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f947 	bl	800129c <_ZN5MotorC1Ev>
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <_ZN8BTS7960BC1EPVmS1_S1_S1_P12GPIO_TypeDeftS3_t+0x58>)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	635a      	str	r2, [r3, #52]	; 0x34
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	8c3a      	ldrh	r2, [r7, #32]
 8001036:	879a      	strh	r2, [r3, #60]	; 0x3c
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

}
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0800fc74 	.word	0x0800fc74

08001054 <_ZN8BTS7960B8setPowerEf>:

void BTS7960B::setPower(float power){
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	ed87 0a00 	vstr	s0, [r7]
	if(power >= 0 && power <= 1){
 8001060:	edd7 7a00 	vldr	s15, [r7]
 8001064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	db1f      	blt.n	80010ae <_ZN8BTS7960B8setPowerEf+0x5a>
 800106e:	edd7 7a00 	vldr	s15, [r7]
 8001072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d816      	bhi.n	80010ae <_ZN8BTS7960B8setPowerEf+0x5a>
		*ina = power*(*ina_max);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800108e:	edd7 7a00 	vldr	s15, [r7]
 8001092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109e:	ee17 2a90 	vmov	r2, s15
 80010a2:	601a      	str	r2, [r3, #0]
		*inb = 0;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
	}else if(power < 0 && power >= -1){
		*ina = 0;
		*inb = -power*(*inb_max);
	}
}
 80010ac:	e029      	b.n	8001102 <_ZN8BTS7960B8setPowerEf+0xae>
	}else if(power < 0 && power >= -1){
 80010ae:	edd7 7a00 	vldr	s15, [r7]
 80010b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	d400      	bmi.n	80010be <_ZN8BTS7960B8setPowerEf+0x6a>
}
 80010bc:	e021      	b.n	8001102 <_ZN8BTS7960B8setPowerEf+0xae>
	}else if(power < 0 && power >= -1){
 80010be:	edd7 7a00 	vldr	s15, [r7]
 80010c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80010c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	da00      	bge.n	80010d2 <_ZN8BTS7960B8setPowerEf+0x7e>
}
 80010d0:	e017      	b.n	8001102 <_ZN8BTS7960B8setPowerEf+0xae>
		*ina = 0;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
		*inb = -power*(*inb_max);
 80010da:	edd7 7a00 	vldr	s15, [r7]
 80010de:	eeb1 7a67 	vneg.f32	s14, s15
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fc:	ee17 2a90 	vmov	r2, s15
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZN8BTS7960B10setEnabledEb>:

void BTS7960B::setEnabled(bool enabled){
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
	if(enabled){
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d011      	beq.n	8001144 <_ZN8BTS7960B10setEnabledEb+0x36>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_SET);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001128:	2201      	movs	r2, #1
 800112a:	4619      	mov	r1, r3
 800112c:	f001 fdfc 	bl	8002d28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_SET);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800113a:	2201      	movs	r2, #1
 800113c:	4619      	mov	r1, r3
 800113e:	f001 fdf3 	bl	8002d28 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_RESET);
	}
}
 8001142:	e010      	b.n	8001166 <_ZN8BTS7960B10setEnabledEb+0x58>
		HAL_GPIO_WritePin(inha_port, inha_pin, GPIO_PIN_RESET);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800114c:	2200      	movs	r2, #0
 800114e:	4619      	mov	r1, r3
 8001150:	f001 fdea 	bl	8002d28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(inhb_port, inhb_pin, GPIO_PIN_RESET);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	f001 fde1 	bl	8002d28 <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <_ZN8BTS7960BD1Ev>:
#define SRC_COMPONENTS_BTS7960B_HPP_

#include "main.h"
#include "Motor.hpp"

class BTS7960B : public Motor{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_ZN8BTS7960BD1Ev+0x20>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f8af 	bl	80012e4 <_ZN5MotorD1Ev>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	0800fc74 	.word	0x0800fc74

08001194 <_ZN8BTS7960BD0Ev>:
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ffe7 	bl	8001170 <_ZN8BTS7960BD1Ev>
 80011a2:	2148      	movs	r1, #72	; 0x48
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f009 f93f 	bl	800a428 <_ZdlPvj>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZN7EncoderC1EPVmS1_m>:
 *      Author: Gabriel
 */

#include "Encoder.hpp"

Encoder::Encoder(__IO uint32_t* cnt, __IO uint32_t* arr, uint32_t countsPerRevolution) :
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
	cnt(cnt), arr(arr), countsPerRevolution(countsPerRevolution)
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <_ZN7EncoderC1EPVmS1_m+0x3c>)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	611a      	str	r2, [r3, #16]
{

}
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	0800fc88 	.word	0x0800fc88

080011f4 <_ZN7EncoderD1Ev>:

Encoder::~Encoder() {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <_ZN7EncoderD1Ev+0x1c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	601a      	str	r2, [r3, #0]

}
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	0800fc88 	.word	0x0800fc88

08001214 <_ZN7EncoderD0Ev>:
Encoder::~Encoder() {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
}
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ffe9 	bl	80011f4 <_ZN7EncoderD1Ev>
 8001222:	2114      	movs	r1, #20
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f009 f8ff 	bl	800a428 <_ZdlPvj>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN7Encoder8getDeltaEv>:
uint32_t Encoder::getCount(){
	lastCount = *cnt;
	return lastCount;
}

int16_t Encoder::getDelta(){
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	int16_t delta =  *cnt - lastCount;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	b29b      	uxth	r3, r3
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	81fb      	strh	r3, [r7, #14]
	lastCount = *cnt;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60da      	str	r2, [r3, #12]
	return delta;
 800125a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_ZN7Encoder22getCountsPerRevolutionEv>:

uint32_t Encoder::getCountsPerRevolution(){
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	return countsPerRevolution;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_ZN5Motor8setPowerEf>:

class Motor {
public:
	Motor();
	virtual ~Motor();
	virtual void setPower(float power){}
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	ed87 0a00 	vstr	s0, [r7]
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include <cstdio>
#include "Definitions.hpp"

Motor::Motor() {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <_ZN5MotorC1Ev+0x44>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	0800fc98 	.word	0x0800fc98

080012e4 <_ZN5MotorD1Ev>:

Motor::~Motor() {
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <_ZN5MotorD1Ev+0x1c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	601a      	str	r2, [r3, #0]

}
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	0800fc98 	.word	0x0800fc98

08001304 <_ZN5MotorD0Ev>:
Motor::~Motor() {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
}
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ffe9 	bl	80012e4 <_ZN5MotorD1Ev>
 8001312:	2128      	movs	r1, #40	; 0x28
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f009 f887 	bl	800a428 <_ZdlPvj>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_ZN5Motor10setEncoderEP7Encoder>:

void Motor::setEncoder(Encoder* _encoder){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	encoder = _encoder;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	611a      	str	r2, [r3, #16]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_ZN5Motor20getCurrentRevPerTickEv>:

float Motor::getCurrentRevPerTick(){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
#ifdef CONTROL_DISABLED
	return (float)encoder->getDelta()/encoder->getCountsPerRevolution();
#else
	return currentRevPerTick;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	ee07 3a90 	vmov	s15, r3
#endif
}
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <_ZN5Motor3pidEf>:

void Motor::pid(float inputRevPerTick){
 8001360:	b580      	push	{r7, lr}
 8001362:	ed2d 8b02 	vpush	{d8}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	ed87 0a00 	vstr	s0, [r7]
#if defined DEEPWEB || defined ROBO2023
	currentRevPerTick = -(float)encoder->getDelta()/encoder->getCountsPerRevolution();
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <_ZN7Encoder8getDeltaEv>
 800137a:	4603      	mov	r3, r0
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	eeb1 8a67 	vneg.f32	s16, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff6c 	bl	800126a <_ZN7Encoder22getCountsPerRevolutionEv>
 8001392:	ee07 0a90 	vmov	s15, r0
 8001396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800139a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
#endif
#ifdef CARENTE
	currentRevPerTick = (float)encoder->getDelta()/encoder->getCountsPerRevolution();
#endif
	lastError = error;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	621a      	str	r2, [r3, #32]
	error = inputRevPerTick - currentRevPerTick;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013b2:	ed97 7a00 	vldr	s14, [r7]
 80013b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	edc3 7a05 	vstr	s15, [r3, #20]
	derror = error - lastError;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	ed93 7a05 	vldr	s14, [r3, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80013cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edc3 7a07 	vstr	s15, [r3, #28]
	ierror += error;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edd3 7a05 	vldr	s15, [r3, #20]
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edc3 7a06 	vstr	s15, [r3, #24]
	if(ki*ierror > 1){		// Anti-windup (verificar possibilidades)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80013f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	dd0a      	ble.n	8001420 <_ZN5Motor3pidEf+0xc0>
		ierror = 1/ki;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001410:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edc3 7a06 	vstr	s15, [r3, #24]
 800141e:	e018      	b.n	8001452 <_ZN5Motor3pidEf+0xf2>
	}else if(ki*ierror < -1){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	ed93 7a02 	vldr	s14, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edd3 7a06 	vldr	s15, [r3, #24]
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	d509      	bpl.n	8001452 <_ZN5Motor3pidEf+0xf2>
		ierror = -1/ki;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	ed93 7a02 	vldr	s14, [r3, #8]
 8001444:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8001448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	edc3 7a06 	vstr	s15, [r3, #24]
	}
	float pid = kp*error + ki*ierror + kd*derror;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	ed93 7a01 	vldr	s14, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	edd3 7a05 	vldr	s15, [r3, #20]
 800145e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	edd3 6a02 	vldr	s13, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	edd3 7a06 	vldr	s15, [r3, #24]
 800146e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001472:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	edd3 6a03 	vldr	s13, [r3, #12]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148a:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pid > 1){		// Clamp
 800148e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	dd03      	ble.n	80014a8 <_ZN5Motor3pidEf+0x148>
		pid = 1;
 80014a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e00a      	b.n	80014be <_ZN5Motor3pidEf+0x15e>
	}else if(pid < -1){
 80014a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d501      	bpl.n	80014be <_ZN5Motor3pidEf+0x15e>
		pid = -1;
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <_ZN5Motor3pidEf+0x17c>)
 80014bc:	60fb      	str	r3, [r7, #12]
	}
	setPower(pid);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3308      	adds	r3, #8
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	ed97 0a03 	vldr	s0, [r7, #12]
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	4798      	blx	r3
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	ecbd 8b02 	vpop	{d8}
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	bf800000 	.word	0xbf800000

080014e0 <_ZN5RobotC1Ev>:
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim3;

uint8_t buf[64];

Robot::Robot() {
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af06      	add	r7, sp, #24
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <_ZN5RobotC1Ev+0x84>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <_ZN5RobotC1Ev+0x88>)
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a1b      	ldr	r2, [pc, #108]	; (800156c <_ZN5RobotC1Ev+0x8c>)
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	687e      	ldr	r6, [r7, #4]
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <_ZN5RobotC1Ev+0x90>)
 8001506:	f106 0410 	add.w	r4, r6, #16
 800150a:	461d      	mov	r5, r3
 800150c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001510:	682b      	ldr	r3, [r5, #0]
 8001512:	8023      	strh	r3, [r4, #0]
 8001514:	f106 0322 	add.w	r3, r6, #34	; 0x22
 8001518:	f240 52ca 	movw	r2, #1482	; 0x5ca
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f008 ffce 	bl	800a4c0 <memset>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f603 30c8 	addw	r0, r3, #3016	; 0xbc8
 800152a:	2340      	movs	r3, #64	; 0x40
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <_ZN5RobotC1Ev+0x94>)
 800152e:	4912      	ldr	r1, [pc, #72]	; (8001578 <_ZN5RobotC1Ev+0x98>)
 8001530:	f7ff fe40 	bl	80011b4 <_ZN7EncoderC1EPVmS1_m>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f603 30dc 	addw	r0, r3, #3036	; 0xbdc
 800153a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153e:	9304      	str	r3, [sp, #16]
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <_ZN5RobotC1Ev+0x9c>)
 8001542:	9303      	str	r3, [sp, #12]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <_ZN5RobotC1Ev+0xa0>)
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <_ZN5RobotC1Ev+0xa4>)
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <_ZN5RobotC1Ev+0xa4>)
 8001552:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <_ZN5RobotC1Ev+0xa8>)
 8001554:	490d      	ldr	r1, [pc, #52]	; (800158c <_ZN5RobotC1Ev+0xac>)
 8001556:	f7ff fd4f 	bl	8000ff8 <_ZN8BTS7960BC1EPVmS1_S1_S1_P12GPIO_TypeDeftS3_t>

}
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	0800fcac 	.word	0x0800fcac
 8001568:	3ced9168 	.word	0x3ced9168
 800156c:	42c80000 	.word	0x42c80000
 8001570:	0800f610 	.word	0x0800f610
 8001574:	4000042c 	.word	0x4000042c
 8001578:	40000424 	.word	0x40000424
 800157c:	40020800 	.word	0x40020800
 8001580:	40020c00 	.word	0x40020c00
 8001584:	4001042c 	.word	0x4001042c
 8001588:	40010438 	.word	0x40010438
 800158c:	40010440 	.word	0x40010440

08001590 <_ZN5RobotD1Ev>:

Robot::~Robot() {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <_ZN5RobotD1Ev+0x30>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fde3 	bl	8001170 <_ZN8BTS7960BD1Ev>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fe1f 	bl	80011f4 <_ZN7EncoderD1Ev>

}
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	0800fcac 	.word	0x0800fcac

080015c4 <_ZN5RobotD0Ev>:
Robot::~Robot() {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
}
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffdf 	bl	8001590 <_ZN5RobotD1Ev>
 80015d2:	f640 4124 	movw	r1, #3108	; 0xc24
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f008 ff26 	bl	800a428 <_ZdlPvj>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_ZN5Robot11usbCallbackEPhPm>:

void Robot::usbCallback(uint8_t* Buf, uint32_t *Len){
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
	//HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxBuffer, 256);
	memcpy(rxBuffer, Buf, *Len);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f103 0010 	add.w	r0, r3, #16
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	f008 ff50 	bl	800a4a4 <memcpy>
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	0000      	movs	r0, r0
	...

08001610 <_ZN5Robot15controlCallbackEv>:

void Robot::controlCallback(){
 8001610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001614:	b08a      	sub	sp, #40	; 0x28
 8001616:	af06      	add	r7, sp, #24
 8001618:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800161a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161e:	485c      	ldr	r0, [pc, #368]	; (8001790 <_ZN5Robot15controlCallbackEv+0x180>)
 8001620:	f001 fb9b 	bl	8002d5a <HAL_GPIO_TogglePin>
	float desiredSpeed0;
	sscanf((char*)rxBuffer, "%f,%f", &desiredSpeed0);	// Desired speed in mm/s
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3310      	adds	r3, #16
 8001628:	f107 0208 	add.w	r2, r7, #8
 800162c:	4959      	ldr	r1, [pc, #356]	; (8001794 <_ZN5Robot15controlCallbackEv+0x184>)
 800162e:	4618      	mov	r0, r3
 8001630:	f009 fede 	bl	800b3f0 <siscanf>
	float convertedSpeed0 = desiredSpeed0*CONVERSION;	// Converted speed in rev/tick
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff86 	bl	8000548 <__aeabi_f2d>
 800163c:	4604      	mov	r4, r0
 800163e:	460d      	mov	r5, r1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff7f 	bl	8000548 <__aeabi_f2d>
 800164a:	4680      	mov	r8, r0
 800164c:	4689      	mov	r9, r1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	edd3 7a03 	vldr	s15, [r3, #12]
 8001654:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001658:	ee17 0a90 	vmov	r0, s15
 800165c:	f7fe ff74 	bl	8000548 <__aeabi_f2d>
 8001660:	a349      	add	r3, pc, #292	; (adr r3, 8001788 <_ZN5Robot15controlCallbackEv+0x178>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ffc7 	bl	80005f8 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4692      	mov	sl, r2
 8001670:	469b      	mov	fp, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff66 	bl	8000548 <__aeabi_f2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4650      	mov	r0, sl
 8001682:	4659      	mov	r1, fp
 8001684:	f7fe ffb8 	bl	80005f8 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4640      	mov	r0, r8
 800168e:	4649      	mov	r1, r9
 8001690:	f7ff f8dc 	bl	800084c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4620      	mov	r0, r4
 800169a:	4629      	mov	r1, r5
 800169c:	f7fe ffac 	bl	80005f8 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff fa9e 	bl	8000be8 <__aeabi_d2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]
#ifdef CONTROL_DISABLED
	motor0.setPower(desiredSpeed0);
#else
	motor0.pid(convertedSpeed0);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80016b6:	ed97 0a03 	vldr	s0, [r7, #12]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fe50 	bl	8001360 <_ZN5Motor3pidEf>
#endif
	sprintf((char*)buf, ">Speed:%+0.6e,%+0.6e,%+0.6e,%+0.6e",
			motor0.getCurrentRevPerTick()/CONVERSION,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fe3a 	bl	8001340 <_ZN5Motor20getCurrentRevPerTickEv>
 80016cc:	ee10 3a10 	vmov	r3, s0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff39 	bl	8000548 <__aeabi_f2d>
 80016d6:	4604      	mov	r4, r0
 80016d8:	460d      	mov	r5, r1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff32 	bl	8000548 <__aeabi_f2d>
 80016e4:	4680      	mov	r8, r0
 80016e6:	4689      	mov	r9, r1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80016ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016f2:	ee17 0a90 	vmov	r0, s15
 80016f6:	f7fe ff27 	bl	8000548 <__aeabi_f2d>
 80016fa:	a323      	add	r3, pc, #140	; (adr r3, 8001788 <_ZN5Robot15controlCallbackEv+0x178>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ff7a 	bl	80005f8 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4692      	mov	sl, r2
 800170a:	469b      	mov	fp, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff19 	bl	8000548 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4650      	mov	r0, sl
 800171c:	4659      	mov	r1, fp
 800171e:	f7fe ff6b 	bl	80005f8 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4640      	mov	r0, r8
 8001728:	4649      	mov	r1, r9
 800172a:	f7ff f88f 	bl	800084c <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
	sprintf((char*)buf, ">Speed:%+0.6e,%+0.6e,%+0.6e,%+0.6e",
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7ff f889 	bl	800084c <__aeabi_ddiv>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feff 	bl	8000548 <__aeabi_f2d>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	f04f 0000 	mov.w	r0, #0
 8001752:	f04f 0100 	mov.w	r1, #0
 8001756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800175a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9cd 2300 	strd	r2, r3, [sp]
 800176a:	4622      	mov	r2, r4
 800176c:	462b      	mov	r3, r5
 800176e:	490a      	ldr	r1, [pc, #40]	; (8001798 <_ZN5Robot15controlCallbackEv+0x188>)
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <_ZN5Robot15controlCallbackEv+0x18c>)
 8001772:	f009 fe1d 	bl	800b3b0 <siprintf>
			0.,
			desiredSpeed0,
			0.);
	//HAL_UART_Transmit_DMA(&huart1, buf, 64);
	CDC_Transmit_FS(buf, 64);
 8001776:	2140      	movs	r1, #64	; 0x40
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <_ZN5Robot15controlCallbackEv+0x18c>)
 800177a:	f008 f9eb 	bl	8009b54 <CDC_Transmit_FS>
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001788:	f01b866e 	.word	0xf01b866e
 800178c:	400921f9 	.word	0x400921f9
 8001790:	40020c00 	.word	0x40020c00
 8001794:	0800fbec 	.word	0x0800fbec
 8001798:	0800fbf4 	.word	0x0800fbf4
 800179c:	200002ec 	.word	0x200002ec

080017a0 <_ZN5Robot4initEv>:

void Robot::init(){
 80017a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	motor0.setEncoder(&encoder0);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f603 32dc 	addw	r2, r3, #3036	; 0xbdc
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f7ff fdb3 	bl	8001324 <_ZN5Motor10setEncoderEP7Encoder>
	motor0.kp = 0.21829/CONVERSION;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fec0 	bl	8000548 <__aeabi_f2d>
 80017c8:	4604      	mov	r4, r0
 80017ca:	460d      	mov	r5, r1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80017d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017d6:	ee17 0a90 	vmov	r0, s15
 80017da:	f7fe feb5 	bl	8000548 <__aeabi_f2d>
 80017de:	a36c      	add	r3, pc, #432	; (adr r3, 8001990 <_ZN5Robot4initEv+0x1f0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7fe ff08 	bl	80005f8 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4690      	mov	r8, r2
 80017ee:	4699      	mov	r9, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fea7 	bl	8000548 <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4640      	mov	r0, r8
 8001800:	4649      	mov	r1, r9
 8001802:	f7fe fef9 	bl	80005f8 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7ff f81d 	bl	800084c <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	a164      	add	r1, pc, #400	; (adr r1, 80019a8 <_ZN5Robot4initEv+0x208>)
 8001818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800181c:	f7ff f816 	bl	800084c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f9de 	bl	8000be8 <__aeabi_d2f>
 800182c:	4602      	mov	r2, r0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8001834:	601a      	str	r2, [r3, #0]
	motor0.ki = 4.094/(ticksPerSecond*CONVERSION);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe84 	bl	8000548 <__aeabi_f2d>
 8001840:	4604      	mov	r4, r0
 8001842:	460d      	mov	r5, r1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe7d 	bl	8000548 <__aeabi_f2d>
 800184e:	4680      	mov	r8, r0
 8001850:	4689      	mov	r9, r1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	edd3 7a03 	vldr	s15, [r3, #12]
 8001858:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800185c:	ee17 0a90 	vmov	r0, s15
 8001860:	f7fe fe72 	bl	8000548 <__aeabi_f2d>
 8001864:	a34a      	add	r3, pc, #296	; (adr r3, 8001990 <_ZN5Robot4initEv+0x1f0>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe fec5 	bl	80005f8 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4692      	mov	sl, r2
 8001874:	469b      	mov	fp, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe64 	bl	8000548 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4650      	mov	r0, sl
 8001886:	4659      	mov	r1, fp
 8001888:	f7fe feb6 	bl	80005f8 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4640      	mov	r0, r8
 8001892:	4649      	mov	r1, r9
 8001894:	f7fe ffda 	bl	800084c <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	a141      	add	r1, pc, #260	; (adr r1, 80019b0 <_ZN5Robot4initEv+0x210>)
 80018aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018ae:	f7fe ffcd 	bl	800084c <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f995 	bl	8000be8 <__aeabi_d2f>
 80018be:	4602      	mov	r2, r0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f603 33e4 	addw	r3, r3, #3044	; 0xbe4
 80018c6:	601a      	str	r2, [r3, #0]
	motor0.kd = 0*ticksPerSecond/CONVERSION;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ce:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001998 <_ZN5Robot4initEv+0x1f8>
 80018d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d6:	ee17 0a90 	vmov	r0, s15
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	4604      	mov	r4, r0
 80018e0:	460d      	mov	r5, r1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe2e 	bl	8000548 <__aeabi_f2d>
 80018ec:	4680      	mov	r8, r0
 80018ee:	4689      	mov	r9, r1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80018f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018fa:	ee17 0a90 	vmov	r0, s15
 80018fe:	f7fe fe23 	bl	8000548 <__aeabi_f2d>
 8001902:	a323      	add	r3, pc, #140	; (adr r3, 8001990 <_ZN5Robot4initEv+0x1f0>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe76 	bl	80005f8 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4692      	mov	sl, r2
 8001912:	469b      	mov	fp, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe15 	bl	8000548 <__aeabi_f2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4650      	mov	r0, sl
 8001924:	4659      	mov	r1, fp
 8001926:	f7fe fe67 	bl	80005f8 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4640      	mov	r0, r8
 8001930:	4649      	mov	r1, r9
 8001932:	f7fe ff8b 	bl	800084c <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4620      	mov	r0, r4
 800193c:	4629      	mov	r1, r5
 800193e:	f7fe ff85 	bl	800084c <__aeabi_ddiv>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f94d 	bl	8000be8 <__aeabi_d2f>
 800194e:	4602      	mov	r2, r0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8001956:	601a      	str	r2, [r3, #0]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001958:	213c      	movs	r1, #60	; 0x3c
 800195a:	4810      	ldr	r0, [pc, #64]	; (800199c <_ZN5Robot4initEv+0x1fc>)
 800195c:	f003 fd8c 	bl	8005478 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001960:	2104      	movs	r1, #4
 8001962:	480f      	ldr	r0, [pc, #60]	; (80019a0 <_ZN5Robot4initEv+0x200>)
 8001964:	f003 fc0c 	bl	8005180 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001968:	210c      	movs	r1, #12
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <_ZN5Robot4initEv+0x200>)
 800196c:	f003 fc08 	bl	8005180 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <_ZN5Robot4initEv+0x204>)
 8001972:	f003 fb39 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
	//HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxBuffer, 256);
	motor0.setEnabled(true);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f603 33dc 	addw	r3, r3, #3036	; 0xbdc
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fbc5 	bl	800110e <_ZN8BTS7960B10setEnabledEb>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800198e:	bf00      	nop
 8001990:	f01b866e 	.word	0xf01b866e
 8001994:	400921f9 	.word	0x400921f9
 8001998:	00000000 	.word	0x00000000
 800199c:	20000ffc 	.word	0x20000ffc
 80019a0:	20001164 	.word	0x20001164
 80019a4:	200010b0 	.word	0x200010b0
 80019a8:	3d859c8d 	.word	0x3d859c8d
 80019ac:	3fcbf0ed 	.word	0x3fcbf0ed
 80019b0:	89374bc7 	.word	0x89374bc7
 80019b4:	40106041 	.word	0x40106041

080019b8 <usbCallback>:

extern TIM_HandleTypeDef htim6;

Robot robot;

void usbCallback(uint8_t* Buf, uint32_t *Len){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	robot.usbCallback(Buf, Len);
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4803      	ldr	r0, [pc, #12]	; (80019d4 <usbCallback+0x1c>)
 80019c8:	f7ff fe0d 	bl	80015e6 <_ZN5Robot11usbCallbackEPhPm>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000032c 	.word	0x2000032c

080019d8 <_Z15controlCallbackP19__TIM_HandleTypeDef>:

void controlCallback(TIM_HandleTypeDef* htim){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	robot.controlCallback();
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <_Z15controlCallbackP19__TIM_HandleTypeDef+0x18>)
 80019e2:	f7ff fe15 	bl	8001610 <_ZN5Robot15controlCallbackEv>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000032c 	.word	0x2000032c

080019f4 <Start>:

void Start(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	htim6.PeriodElapsedCallback = controlCallback;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <Start+0x1c>)
 80019fa:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <Start+0x20>)
 80019fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	HAL_TIM_Base_Start_IT(&htim6);
 8001a00:	4803      	ldr	r0, [pc, #12]	; (8001a10 <Start+0x1c>)
 8001a02:	f003 faf1 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
	robot.init();
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <Start+0x24>)
 8001a08:	f7ff feca 	bl	80017a0 <_ZN5Robot4initEv>
	while(true){
 8001a0c:	e7fe      	b.n	8001a0c <Start+0x18>
 8001a0e:	bf00      	nop
 8001a10:	200010b0 	.word	0x200010b0
 8001a14:	080019d9 	.word	0x080019d9
 8001a18:	2000032c 	.word	0x2000032c

08001a1c <_Z41__static_initialization_and_destruction_0ii>:

	}
}
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d102      	bne.n	8001a3c <_Z41__static_initialization_and_destruction_0ii+0x20>
Robot robot;
 8001a36:	4809      	ldr	r0, [pc, #36]	; (8001a5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a38:	f7ff fd52 	bl	80014e0 <_ZN5RobotC1Ev>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d102      	bne.n	8001a52 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001a4e:	f7ff fd9f 	bl	8001590 <_ZN5RobotD1Ev>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000032c 	.word	0x2000032c

08001a60 <_GLOBAL__sub_I_robot>:
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f7ff ffd7 	bl	8001a1c <_Z41__static_initialization_and_destruction_0ii>
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_GLOBAL__sub_D_robot>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff ffcf 	bl	8001a1c <_Z41__static_initialization_and_destruction_0ii>
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a84:	f000 fe0c 	bl	80026a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a88:	f000 f812 	bl	8001ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8c:	f000 f9f8 	bl	8001e80 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a90:	f000 f878 	bl	8001b84 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a94:	f000 f8a4 	bl	8001be0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001a98:	f007 ff9a 	bl	80099d0 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8001a9c:	f000 f8d6 	bl	8001c4c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001aa0:	f000 f95e 	bl	8001d60 <MX_TIM8_Init>
  MX_TIM6_Init();
 8001aa4:	f000 f926 	bl	8001cf4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Start();
 8001aa8:	f7ff ffa4 	bl	80019f4 <Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <main+0x2c>
	...

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b094      	sub	sp, #80	; 0x50
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0320 	add.w	r3, r7, #32
 8001aba:	2230      	movs	r2, #48	; 0x30
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 fcfe 	bl	800a4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <SystemClock_Config+0xcc>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <SystemClock_Config+0xcc>)
 8001ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <SystemClock_Config+0xcc>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af0:	2300      	movs	r3, #0
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <SystemClock_Config+0xd0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <SystemClock_Config+0xd0>)
 8001afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <SystemClock_Config+0xd0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b16:	2302      	movs	r3, #2
 8001b18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b20:	2308      	movs	r3, #8
 8001b22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fcec 	bl	8004514 <HAL_RCC_OscConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b42:	f000 fac3 	bl	80020cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b46:	230f      	movs	r3, #15
 8001b48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2105      	movs	r1, #5
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 ff4d 	bl	8004a04 <HAL_RCC_ClockConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b70:	f000 faac 	bl	80020cc <Error_Handler>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3750      	adds	r7, #80	; 0x50
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000

08001b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <MX_I2C1_Init+0x54>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <MX_I2C1_Init+0x58>)
 8001b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_I2C1_Init+0x50>)
 8001bc2:	f001 f8e5 	bl	8002d90 <HAL_I2C_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bcc:	f000 fa7e 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000f50 	.word	0x20000f50
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <MX_SPI1_Init+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	; (8001c44 <MX_SPI1_Init+0x64>)
 8001c32:	f003 f8f3 	bl	8004e1c <HAL_SPI_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c3c:	f000 fa46 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000fa4 	.word	0x20000fa4
 8001c48:	40013000 	.word	0x40013000

08001c4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f008 fc30 	bl	800a4c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <MX_TIM3_Init+0xa4>)
 8001c6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001cba:	f003 fb29 	bl	8005310 <HAL_TIM_Encoder_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f000 fa02 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_TIM3_Init+0xa0>)
 8001cd6:	f004 f979 	bl	8005fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ce0:	f000 f9f4 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3730      	adds	r7, #48	; 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000ffc 	.word	0x20000ffc
 8001cf0:	40000400 	.word	0x40000400

08001cf4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d04:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <MX_TIM6_Init+0x68>)
 8001d06:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d0a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001d0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d18:	2263      	movs	r2, #99	; 0x63
 8001d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d24:	f003 f904 	bl	8004f30 <HAL_TIM_Base_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d2e:	f000 f9cd 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM6_Init+0x64>)
 8001d40:	f004 f944 	bl	8005fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d4a:	f000 f9bf 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200010b0 	.word	0x200010b0
 8001d5c:	40001000 	.word	0x40001000

08001d60 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b092      	sub	sp, #72	; 0x48
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
 8001d80:	615a      	str	r2, [r3, #20]
 8001d82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	2220      	movs	r2, #32
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f008 fb98 	bl	800a4c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d90:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001d92:	4a3a      	ldr	r2, [pc, #232]	; (8001e7c <MX_TIM8_Init+0x11c>)
 8001d94:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d96:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9c:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001da2:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001db0:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001dbc:	482e      	ldr	r0, [pc, #184]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001dbe:	f003 f983 	bl	80050c8 <HAL_TIM_PWM_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001dc8:	f000 f980 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4827      	ldr	r0, [pc, #156]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001ddc:	f004 f8f6 	bl	8005fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001de6:	f000 f971 	bl	80020cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dea:	2360      	movs	r3, #96	; 0x60
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001df6:	2300      	movs	r3, #0
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	481a      	ldr	r0, [pc, #104]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001e10:	f003 fce8 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001e1a:	f000 f957 	bl	80020cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	220c      	movs	r2, #12
 8001e24:	4619      	mov	r1, r3
 8001e26:	4814      	ldr	r0, [pc, #80]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001e28:	f003 fcdc 	bl	80057e4 <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001e32:	f000 f94b 	bl	80020cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	4807      	ldr	r0, [pc, #28]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001e5a:	f004 f933 	bl	80060c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001e64:	f000 f932 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <MX_TIM8_Init+0x118>)
 8001e6a:	f000 fa9f 	bl	80023ac <HAL_TIM_MspPostInit>

}
 8001e6e:	bf00      	nop
 8001e70:	3748      	adds	r7, #72	; 0x48
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20001164 	.word	0x20001164
 8001e7c:	40010400 	.word	0x40010400

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	4b86      	ldr	r3, [pc, #536]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a85      	ldr	r2, [pc, #532]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b83      	ldr	r3, [pc, #524]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a7e      	ldr	r2, [pc, #504]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b7c      	ldr	r3, [pc, #496]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b78      	ldr	r3, [pc, #480]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a77      	ldr	r2, [pc, #476]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b71      	ldr	r3, [pc, #452]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a70      	ldr	r2, [pc, #448]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b6e      	ldr	r3, [pc, #440]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b63      	ldr	r3, [pc, #396]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a62      	ldr	r2, [pc, #392]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <MX_GPIO_Init+0x234>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2108      	movs	r1, #8
 8001f42:	485d      	ldr	r0, [pc, #372]	; (80020b8 <MX_GPIO_Init+0x238>)
 8001f44:	f000 fef0 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M0_MBL_GPIO_Port, M0_MBL_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f4e:	485b      	ldr	r0, [pc, #364]	; (80020bc <MX_GPIO_Init+0x23c>)
 8001f50:	f000 feea 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f54:	2201      	movs	r2, #1
 8001f56:	2101      	movs	r1, #1
 8001f58:	4858      	ldr	r0, [pc, #352]	; (80020bc <MX_GPIO_Init+0x23c>)
 8001f5a:	f000 fee5 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f24f 0190 	movw	r1, #61584	; 0xf090
 8001f64:	4856      	ldr	r0, [pc, #344]	; (80020c0 <MX_GPIO_Init+0x240>)
 8001f66:	f000 fedf 	bl	8002d28 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|M0_MAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	484d      	ldr	r0, [pc, #308]	; (80020b8 <MX_GPIO_Init+0x238>)
 8001f82:	f000 fd35 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_MBL_Pin OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = M0_MBL_Pin|OTG_FS_PowerSwitchOn_Pin;
 8001f86:	f242 0301 	movw	r3, #8193	; 0x2001
 8001f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4847      	ldr	r0, [pc, #284]	; (80020bc <MX_GPIO_Init+0x23c>)
 8001fa0:	f000 fd26 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	483f      	ldr	r0, [pc, #252]	; (80020bc <MX_GPIO_Init+0x23c>)
 8001fc0:	f000 fd16 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fc8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	483a      	ldr	r0, [pc, #232]	; (80020c4 <MX_GPIO_Init+0x244>)
 8001fda:	f000 fd09 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001fde:	2310      	movs	r3, #16
 8001fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fee:	2306      	movs	r3, #6
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4832      	ldr	r0, [pc, #200]	; (80020c4 <MX_GPIO_Init+0x244>)
 8001ffa:	f000 fcf9 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ffe:	2304      	movs	r3, #4
 8002000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	482d      	ldr	r0, [pc, #180]	; (80020c8 <MX_GPIO_Init+0x248>)
 8002012:	f000 fced 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002028:	2305      	movs	r3, #5
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	4619      	mov	r1, r3
 8002032:	4825      	ldr	r0, [pc, #148]	; (80020c8 <MX_GPIO_Init+0x248>)
 8002034:	f000 fcdc 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin M0_MAL_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002038:	f24f 0390 	movw	r3, #61584	; 0xf090
 800203c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|M0_MAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203e:	2301      	movs	r3, #1
 8002040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	4619      	mov	r1, r3
 8002050:	481b      	ldr	r0, [pc, #108]	; (80020c0 <MX_GPIO_Init+0x240>)
 8002052:	f000 fccd 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8002056:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800205a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002068:	2306      	movs	r3, #6
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	4812      	ldr	r0, [pc, #72]	; (80020bc <MX_GPIO_Init+0x23c>)
 8002074:	f000 fcbc 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002078:	2320      	movs	r3, #32
 800207a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <MX_GPIO_Init+0x240>)
 800208c:	f000 fcb0 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002090:	2302      	movs	r3, #2
 8002092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002094:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	4619      	mov	r1, r3
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <MX_GPIO_Init+0x238>)
 80020a6:	f000 fca3 	bl	80029f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020aa:	bf00      	nop
 80020ac:	3730      	adds	r7, #48	; 0x30
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40020800 	.word	0x40020800
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40020400 	.word	0x40020400

080020cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d0:	b672      	cpsid	i
}
 80020d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <Error_Handler+0x8>
	...

080020d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_MspInit+0x4c>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_MspInit+0x4c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_MspInit+0x4c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_MspInit+0x4c>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_MspInit+0x4c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002116:	2007      	movs	r0, #7
 8002118:	f000 fc28 	bl	800296c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800

08002128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a19      	ldr	r2, [pc, #100]	; (80021ac <HAL_I2C_MspInit+0x84>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d12c      	bne.n	80021a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002166:	f44f 7310 	mov.w	r3, #576	; 0x240
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800216c:	2312      	movs	r3, #18
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002170:	2301      	movs	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002178:	2304      	movs	r3, #4
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <HAL_I2C_MspInit+0x8c>)
 8002184:	f000 fc34 	bl	80029f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 8002192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_I2C_MspInit+0x88>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021a4:	bf00      	nop
 80021a6:	3728      	adds	r7, #40	; 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40005400 	.word	0x40005400
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020400 	.word	0x40020400

080021b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_SPI_MspInit+0x84>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d12b      	bne.n	8002232 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a17      	ldr	r2, [pc, #92]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_SPI_MspInit+0x88>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a10      	ldr	r2, [pc, #64]	; (8002240 <HAL_SPI_MspInit+0x88>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_SPI_MspInit+0x88>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002212:	23e0      	movs	r3, #224	; 0xe0
 8002214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002222:	2305      	movs	r3, #5
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	; (8002244 <HAL_SPI_MspInit+0x8c>)
 800222e:	f000 fbdf 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40013000 	.word	0x40013000
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000

08002248 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a28      	ldr	r2, [pc, #160]	; (8002308 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d149      	bne.n	80022fe <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_TIM_Encoder_MspInit+0xc4>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a26      	ldr	r2, [pc, #152]	; (800230c <HAL_TIM_Encoder_MspInit+0xc4>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_TIM_Encoder_MspInit+0xc4>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_TIM_Encoder_MspInit+0xc4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_TIM_Encoder_MspInit+0xc4>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_TIM_Encoder_MspInit+0xc4>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_TIM_Encoder_MspInit+0xc4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_TIM_Encoder_MspInit+0xc4>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_TIM_Encoder_MspInit+0xc4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022be:	2340      	movs	r3, #64	; 0x40
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022ce:	2302      	movs	r3, #2
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	480d      	ldr	r0, [pc, #52]	; (8002310 <HAL_TIM_Encoder_MspInit+0xc8>)
 80022da:	f000 fb89 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022de:	2320      	movs	r3, #32
 80022e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022ee:	2302      	movs	r3, #2
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4619      	mov	r1, r3
 80022f8:	4806      	ldr	r0, [pc, #24]	; (8002314 <HAL_TIM_Encoder_MspInit+0xcc>)
 80022fa:	f000 fb79 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40000400 	.word	0x40000400
 800230c:	40023800 	.word	0x40023800
 8002310:	40020800 	.word	0x40020800
 8002314:	40020400 	.word	0x40020400

08002318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <HAL_TIM_Base_MspInit+0x48>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d115      	bne.n	8002356 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_TIM_Base_MspInit+0x4c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a0c      	ldr	r2, [pc, #48]	; (8002364 <HAL_TIM_Base_MspInit+0x4c>)
 8002334:	f043 0310 	orr.w	r3, r3, #16
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_TIM_Base_MspInit+0x4c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	2036      	movs	r0, #54	; 0x36
 800234c:	f000 fb19 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002350:	2036      	movs	r0, #54	; 0x36
 8002352:	f000 fb32 	bl	80029ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40001000 	.word	0x40001000
 8002364:	40023800 	.word	0x40023800

08002368 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10d      	bne.n	8002396 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_TIM_PWM_MspInit+0x40>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <HAL_TIM_PWM_MspInit+0x40>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_TIM_PWM_MspInit+0x40>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40010400 	.word	0x40010400
 80023a8:	40023800 	.word	0x40023800

080023ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a12      	ldr	r2, [pc, #72]	; (8002414 <HAL_TIM_MspPostInit+0x68>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d11e      	bne.n	800240c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_TIM_MspPostInit+0x6c>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <HAL_TIM_MspPostInit+0x6c>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_TIM_MspPostInit+0x6c>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80023ea:	f44f 7320 	mov.w	r3, #640	; 0x280
 80023ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023fc:	2303      	movs	r3, #3
 80023fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	4619      	mov	r1, r3
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <HAL_TIM_MspPostInit+0x70>)
 8002408:	f000 faf2 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800240c:	bf00      	nop
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40010400 	.word	0x40010400
 8002418:	40023800 	.word	0x40023800
 800241c:	40020800 	.word	0x40020800

08002420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <NMI_Handler+0x4>

08002426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <HardFault_Handler+0x4>

0800242c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <MemManage_Handler+0x4>

08002432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <BusFault_Handler+0x4>

08002438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243c:	e7fe      	b.n	800243c <UsageFault_Handler+0x4>

0800243e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246c:	f000 f96a 	bl	8002744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}

08002474 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <TIM6_DAC_IRQHandler+0x10>)
 800247a:	f003 f88b 	bl	8005594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200010b0 	.word	0x200010b0

08002488 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <OTG_FS_IRQHandler+0x10>)
 800248e:	f000 ff13 	bl	80032b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20002700 	.word	0x20002700

0800249c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return 1;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_kill>:

int _kill(int pid, int sig)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024b6:	f007 ffbb 	bl	800a430 <__errno>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2216      	movs	r2, #22
 80024be:	601a      	str	r2, [r3, #0]
  return -1;
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_exit>:

void _exit (int status)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ffe7 	bl	80024ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80024de:	e7fe      	b.n	80024de <_exit+0x12>

080024e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e00a      	b.n	8002508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024f2:	f3af 8000 	nop.w
 80024f6:	4601      	mov	r1, r0
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	60ba      	str	r2, [r7, #8]
 80024fe:	b2ca      	uxtb	r2, r1
 8002500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	dbf0      	blt.n	80024f2 <_read+0x12>
  }

  return len;
 8002510:	687b      	ldr	r3, [r7, #4]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	e009      	b.n	8002540 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	60ba      	str	r2, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3301      	adds	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	dbf1      	blt.n	800252c <_write+0x12>
  }
  return len;
 8002548:	687b      	ldr	r3, [r7, #4]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_close>:

int _close(int file)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800255a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800257a:	605a      	str	r2, [r3, #4]
  return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <_isatty>:

int _isatty(int file)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <_sbrk+0x5c>)
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <_sbrk+0x60>)
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <_sbrk+0x64>)
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <_sbrk+0x68>)
 80025dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d207      	bcs.n	80025fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025ec:	f007 ff20 	bl	800a430 <__errno>
 80025f0:	4603      	mov	r3, r0
 80025f2:	220c      	movs	r2, #12
 80025f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	e009      	b.n	8002610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <_sbrk+0x64>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <_sbrk+0x64>)
 800260c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20020000 	.word	0x20020000
 800261c:	00000400 	.word	0x00000400
 8002620:	20001218 	.word	0x20001218
 8002624:	20002e40 	.word	0x20002e40

08002628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <SystemInit+0x20>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <SystemInit+0x20>)
 8002634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800264c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002684 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002650:	480d      	ldr	r0, [pc, #52]	; (8002688 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002652:	490e      	ldr	r1, [pc, #56]	; (800268c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002654:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002658:	e002      	b.n	8002660 <LoopCopyDataInit>

0800265a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800265c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265e:	3304      	adds	r3, #4

08002660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002664:	d3f9      	bcc.n	800265a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002666:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002668:	4c0b      	ldr	r4, [pc, #44]	; (8002698 <LoopFillZerobss+0x26>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800266c:	e001      	b.n	8002672 <LoopFillZerobss>

0800266e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002670:	3204      	adds	r2, #4

08002672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002674:	d3fb      	bcc.n	800266e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002676:	f7ff ffd7 	bl	8002628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800267a:	f007 fedf 	bl	800a43c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267e:	f7ff f9ff 	bl	8001a80 <main>
  bx  lr    
 8002682:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002684:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800268c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8002690:	0801019c 	.word	0x0801019c
  ldr r2, =_sbss
 8002694:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002698:	20002e3c 	.word	0x20002e3c

0800269c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800269c:	e7fe      	b.n	800269c <ADC_IRQHandler>
	...

080026a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <HAL_Init+0x40>)
 80026aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_Init+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_Init+0x40>)
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_Init+0x40>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_Init+0x40>)
 80026c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c8:	2003      	movs	r0, #3
 80026ca:	f000 f94f 	bl	800296c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f000 f808 	bl	80026e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d4:	f7ff fd00 	bl	80020d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00

080026e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_InitTick+0x54>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_InitTick+0x58>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f967 	bl	80029d6 <HAL_SYSTICK_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e00e      	b.n	8002730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b0f      	cmp	r3, #15
 8002716:	d80a      	bhi.n	800272e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002718:	2200      	movs	r2, #0
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f000 f92f 	bl	8002982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <HAL_InitTick+0x5c>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000000 	.word	0x20000000
 800273c:	20000008 	.word	0x20000008
 8002740:	20000004 	.word	0x20000004

08002744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_IncTick+0x20>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_IncTick+0x24>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4413      	add	r3, r2
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_IncTick+0x24>)
 8002756:	6013      	str	r3, [r2, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20000008 	.word	0x20000008
 8002768:	2000121c 	.word	0x2000121c

0800276c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return uwTick;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_GetTick+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	2000121c 	.word	0x2000121c

08002784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800278c:	f7ff ffee 	bl	800276c <HAL_GetTick>
 8002790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d005      	beq.n	80027aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_Delay+0x44>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027aa:	bf00      	nop
 80027ac:	f7ff ffde 	bl	800276c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d8f7      	bhi.n	80027ac <HAL_Delay+0x28>
  {
  }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000008 	.word	0x20000008

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fe:	4a04      	ldr	r2, [pc, #16]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db0b      	blt.n	800285a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4907      	ldr	r1, [pc, #28]	; (8002868 <__NVIC_EnableIRQ+0x38>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2001      	movs	r0, #1
 8002852:	fa00 f202 	lsl.w	r2, r0, r2
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	; (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	; (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f1c3 0307 	rsb	r3, r3, #7
 80028da:	2b04      	cmp	r3, #4
 80028dc:	bf28      	it	cs
 80028de:	2304      	movcs	r3, #4
 80028e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d902      	bls.n	80028f0 <NVIC_EncodePriority+0x30>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b03      	subs	r3, #3
 80028ee:	e000      	b.n	80028f2 <NVIC_EncodePriority+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43d9      	mvns	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	4313      	orrs	r3, r2
         );
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	; 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002938:	d301      	bcc.n	800293e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293a:	2301      	movs	r3, #1
 800293c:	e00f      	b.n	800295e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <SysTick_Config+0x40>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002946:	210f      	movs	r1, #15
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f7ff ff8e 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <SysTick_Config+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <SysTick_Config+0x40>)
 8002958:	2207      	movs	r2, #7
 800295a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff29 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002994:	f7ff ff3e 	bl	8002814 <__NVIC_GetPriorityGrouping>
 8002998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff ff8e 	bl	80028c0 <NVIC_EncodePriority>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff5d 	bl	800286c <__NVIC_SetPriority>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff31 	bl	8002830 <__NVIC_EnableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ffa2 	bl	8002928 <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e16b      	b.n	8002ce4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 815a 	bne.w	8002cde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d005      	beq.n	8002a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d130      	bne.n	8002aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 0201 	and.w	r2, r3, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d017      	beq.n	8002ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d123      	bne.n	8002b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80b4 	beq.w	8002cde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b60      	ldr	r3, [pc, #384]	; (8002cfc <HAL_GPIO_Init+0x30c>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a5f      	ldr	r2, [pc, #380]	; (8002cfc <HAL_GPIO_Init+0x30c>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b5d      	ldr	r3, [pc, #372]	; (8002cfc <HAL_GPIO_Init+0x30c>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b92:	4a5b      	ldr	r2, [pc, #364]	; (8002d00 <HAL_GPIO_Init+0x310>)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_GPIO_Init+0x314>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d02b      	beq.n	8002c16 <HAL_GPIO_Init+0x226>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a51      	ldr	r2, [pc, #324]	; (8002d08 <HAL_GPIO_Init+0x318>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d025      	beq.n	8002c12 <HAL_GPIO_Init+0x222>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a50      	ldr	r2, [pc, #320]	; (8002d0c <HAL_GPIO_Init+0x31c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01f      	beq.n	8002c0e <HAL_GPIO_Init+0x21e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4f      	ldr	r2, [pc, #316]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d019      	beq.n	8002c0a <HAL_GPIO_Init+0x21a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4e      	ldr	r2, [pc, #312]	; (8002d14 <HAL_GPIO_Init+0x324>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0x216>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4d      	ldr	r2, [pc, #308]	; (8002d18 <HAL_GPIO_Init+0x328>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00d      	beq.n	8002c02 <HAL_GPIO_Init+0x212>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4c      	ldr	r2, [pc, #304]	; (8002d1c <HAL_GPIO_Init+0x32c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <HAL_GPIO_Init+0x20e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4b      	ldr	r2, [pc, #300]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_GPIO_Init+0x20a>
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	e00e      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	e00c      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002bfe:	2306      	movs	r3, #6
 8002c00:	e00a      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c02:	2305      	movs	r3, #5
 8002c04:	e008      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c06:	2304      	movs	r3, #4
 8002c08:	e006      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e004      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e002      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c16:	2300      	movs	r3, #0
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	f002 0203 	and.w	r2, r2, #3
 8002c1e:	0092      	lsls	r2, r2, #2
 8002c20:	4093      	lsls	r3, r2
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c28:	4935      	ldr	r1, [pc, #212]	; (8002d00 <HAL_GPIO_Init+0x310>)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	089b      	lsrs	r3, r3, #2
 8002c2e:	3302      	adds	r3, #2
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c5a:	4a32      	ldr	r2, [pc, #200]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c60:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c84:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cae:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd8:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <HAL_GPIO_Init+0x334>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b0f      	cmp	r3, #15
 8002ce8:	f67f ae90 	bls.w	8002a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3724      	adds	r7, #36	; 0x24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40013800 	.word	0x40013800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40021400 	.word	0x40021400
 8002d1c:	40021800 	.word	0x40021800
 8002d20:	40021c00 	.word	0x40021c00
 8002d24:	40013c00 	.word	0x40013c00

08002d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
 8002d34:	4613      	mov	r3, r2
 8002d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d38:	787b      	ldrb	r3, [r7, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d44:	e003      	b.n	8002d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	041a      	lsls	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	619a      	str	r2, [r3, #24]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d6c:	887a      	ldrh	r2, [r7, #2]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4013      	ands	r3, r2
 8002d72:	041a      	lsls	r2, r3, #16
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43d9      	mvns	r1, r3
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e12b      	b.n	8002ffa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff f9b6 	bl	8002128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	; 0x24
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df4:	f001 fffe 	bl	8004df4 <HAL_RCC_GetPCLK1Freq>
 8002df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a81      	ldr	r2, [pc, #516]	; (8003004 <HAL_I2C_Init+0x274>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d807      	bhi.n	8002e14 <HAL_I2C_Init+0x84>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a80      	ldr	r2, [pc, #512]	; (8003008 <HAL_I2C_Init+0x278>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	bf94      	ite	ls
 8002e0c:	2301      	movls	r3, #1
 8002e0e:	2300      	movhi	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e006      	b.n	8002e22 <HAL_I2C_Init+0x92>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a7d      	ldr	r2, [pc, #500]	; (800300c <HAL_I2C_Init+0x27c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bf94      	ite	ls
 8002e1c:	2301      	movls	r3, #1
 8002e1e:	2300      	movhi	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0e7      	b.n	8002ffa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a78      	ldr	r2, [pc, #480]	; (8003010 <HAL_I2C_Init+0x280>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0c9b      	lsrs	r3, r3, #18
 8002e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a6a      	ldr	r2, [pc, #424]	; (8003004 <HAL_I2C_Init+0x274>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d802      	bhi.n	8002e64 <HAL_I2C_Init+0xd4>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	3301      	adds	r3, #1
 8002e62:	e009      	b.n	8002e78 <HAL_I2C_Init+0xe8>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	4a69      	ldr	r2, [pc, #420]	; (8003014 <HAL_I2C_Init+0x284>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	3301      	adds	r3, #1
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	495c      	ldr	r1, [pc, #368]	; (8003004 <HAL_I2C_Init+0x274>)
 8002e94:	428b      	cmp	r3, r1
 8002e96:	d819      	bhi.n	8002ecc <HAL_I2C_Init+0x13c>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e59      	subs	r1, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea6:	1c59      	adds	r1, r3, #1
 8002ea8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002eac:	400b      	ands	r3, r1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_I2C_Init+0x138>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1e59      	subs	r1, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	e051      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	e04f      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d111      	bne.n	8002ef8 <HAL_I2C_Init+0x168>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e58      	subs	r0, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	440b      	add	r3, r1
 8002ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e012      	b.n	8002f1e <HAL_I2C_Init+0x18e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	0099      	lsls	r1, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Init+0x196>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e022      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10e      	bne.n	8002f4c <HAL_I2C_Init+0x1bc>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1e58      	subs	r0, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6859      	ldr	r1, [r3, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	440b      	add	r3, r1
 8002f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4a:	e00f      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e58      	subs	r0, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	0099      	lsls	r1, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	6809      	ldr	r1, [r1, #0]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6911      	ldr	r1, [r2, #16]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	000186a0 	.word	0x000186a0
 8003008:	001e847f 	.word	0x001e847f
 800300c:	003d08ff 	.word	0x003d08ff
 8003010:	431bde83 	.word	0x431bde83
 8003014:	10624dd3 	.word	0x10624dd3

08003018 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301a:	b08f      	sub	sp, #60	; 0x3c
 800301c:	af0a      	add	r7, sp, #40	; 0x28
 800301e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e10f      	b.n	800324a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f006 fecd 	bl	8009de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2203      	movs	r2, #3
 800304e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 f9b0 	bl	80063ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	687e      	ldr	r6, [r7, #4]
 8003076:	466d      	mov	r5, sp
 8003078:	f106 0410 	add.w	r4, r6, #16
 800307c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800307e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003084:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003088:	e885 0003 	stmia.w	r5, {r0, r1}
 800308c:	1d33      	adds	r3, r6, #4
 800308e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003090:	6838      	ldr	r0, [r7, #0]
 8003092:	f003 f887 	bl	80061a4 <USB_CoreInit>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0d0      	b.n	800324a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 f99e 	bl	80063f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	e04a      	b.n	8003150 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	333d      	adds	r3, #61	; 0x3d
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	333c      	adds	r3, #60	; 0x3c
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	b298      	uxth	r0, r3
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	3344      	adds	r3, #68	; 0x44
 80030f6:	4602      	mov	r2, r0
 80030f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3340      	adds	r3, #64	; 0x40
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3348      	adds	r3, #72	; 0x48
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	334c      	adds	r3, #76	; 0x4c
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3354      	adds	r3, #84	; 0x54
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	3301      	adds	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	7bfa      	ldrb	r2, [r7, #15]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	d3af      	bcc.n	80030ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e044      	b.n	80031ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	3301      	adds	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3b5      	bcc.n	8003160 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	687e      	ldr	r6, [r7, #4]
 80031fc:	466d      	mov	r5, sp
 80031fe:	f106 0410 	add.w	r4, r6, #16
 8003202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800320a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800320e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003212:	1d33      	adds	r3, r6, #4
 8003214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003216:	6838      	ldr	r0, [r7, #0]
 8003218:	f003 f936 	bl	8006488 <USB_DevInit>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e00d      	b.n	800324a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f004 fa85 	bl	8007752 <USB_DevDisconnect>

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003252 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_PCD_Start+0x1c>
 800326a:	2302      	movs	r3, #2
 800326c:	e020      	b.n	80032b0 <HAL_PCD_Start+0x5e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	2b01      	cmp	r3, #1
 800327c:	d109      	bne.n	8003292 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003282:	2b01      	cmp	r3, #1
 8003284:	d005      	beq.n	8003292 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f003 f888 	bl	80063ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f004 fa35 	bl	8007710 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b08d      	sub	sp, #52	; 0x34
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 faf3 	bl	80078ba <USB_GetMode>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f040 848a 	bne.w	8003bf0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f004 fa57 	bl	8007794 <USB_ReadInterrupts>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8480 	beq.w	8003bee <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f004 fa44 	bl	8007794 <USB_ReadInterrupts>
 800330c:	4603      	mov	r3, r0
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d107      	bne.n	8003326 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f002 0202 	and.w	r2, r2, #2
 8003324:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f004 fa32 	bl	8007794 <USB_ReadInterrupts>
 8003330:	4603      	mov	r3, r0
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b10      	cmp	r3, #16
 8003338:	d161      	bne.n	80033fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699a      	ldr	r2, [r3, #24]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0210 	bic.w	r2, r2, #16
 8003348:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	3304      	adds	r3, #4
 8003368:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	0c5b      	lsrs	r3, r3, #17
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	2b02      	cmp	r3, #2
 8003374:	d124      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d035      	beq.n	80033ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800338c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003390:	b29b      	uxth	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	6a38      	ldr	r0, [r7, #32]
 8003396:	f004 f869 	bl	800746c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a6:	441a      	add	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033b8:	441a      	add	r2, r3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
 80033be:	e016      	b.n	80033ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	0c5b      	lsrs	r3, r3, #17
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	2b06      	cmp	r3, #6
 80033ca:	d110      	bne.n	80033ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033d2:	2208      	movs	r2, #8
 80033d4:	4619      	mov	r1, r3
 80033d6:	6a38      	ldr	r0, [r7, #32]
 80033d8:	f004 f848 	bl	800746c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	6a1a      	ldr	r2, [r3, #32]
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e8:	441a      	add	r2, r3
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0210 	orr.w	r2, r2, #16
 80033fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f004 f9c6 	bl	8007794 <USB_ReadInterrupts>
 8003408:	4603      	mov	r3, r0
 800340a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800340e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003412:	f040 80a7 	bne.w	8003564 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f004 f9cb 	bl	80077ba <USB_ReadDevAllOutEpInterrupt>
 8003424:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003426:	e099      	b.n	800355c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 808e 	beq.w	8003550 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f004 f9ef 	bl	8007822 <USB_ReadDevOutEPInterrupt>
 8003444:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345c:	461a      	mov	r2, r3
 800345e:	2301      	movs	r3, #1
 8003460:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fec3 	bl	80041f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00c      	beq.n	800348e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003480:	461a      	mov	r2, r3
 8003482:	2308      	movs	r3, #8
 8003484:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 ff99 	bl	80043c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a4:	461a      	mov	r2, r3
 80034a6:	2310      	movs	r3, #16
 80034a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d030      	beq.n	8003516 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d109      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	3304      	adds	r3, #4
 80034e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	78db      	ldrb	r3, [r3, #3]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d108      	bne.n	8003504 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f006 fd84 	bl	800a00c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003510:	461a      	mov	r2, r3
 8003512:	2302      	movs	r3, #2
 8003514:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	2320      	movs	r3, #32
 8003530:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003548:	461a      	mov	r2, r3
 800354a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800354e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	3301      	adds	r3, #1
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	2b00      	cmp	r3, #0
 8003560:	f47f af62 	bne.w	8003428 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f004 f913 	bl	8007794 <USB_ReadInterrupts>
 800356e:	4603      	mov	r3, r0
 8003570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003574:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003578:	f040 80db 	bne.w	8003732 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f004 f934 	bl	80077ee <USB_ReadDevAllInEpInterrupt>
 8003586:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800358c:	e0cd      	b.n	800372a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80c2 	beq.w	800371e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f004 f95a 	bl	800785e <USB_ReadDevInEPInterrupt>
 80035aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d057      	beq.n	8003666 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	2201      	movs	r2, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69f9      	ldr	r1, [r7, #28]
 80035d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035d6:	4013      	ands	r3, r2
 80035d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e6:	461a      	mov	r2, r3
 80035e8:	2301      	movs	r3, #1
 80035ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d132      	bne.n	800365a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	334c      	adds	r3, #76	; 0x4c
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4403      	add	r3, r0
 8003614:	3348      	adds	r3, #72	; 0x48
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4419      	add	r1, r3
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4403      	add	r3, r0
 8003628:	334c      	adds	r3, #76	; 0x4c
 800362a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d113      	bne.n	800365a <HAL_PCD_IRQHandler+0x3a2>
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3354      	adds	r3, #84	; 0x54
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d108      	bne.n	800365a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003652:	461a      	mov	r2, r3
 8003654:	2101      	movs	r1, #1
 8003656:	f004 f961 	bl	800791c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f006 fc4e 	bl	8009f02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367c:	461a      	mov	r2, r3
 800367e:	2308      	movs	r3, #8
 8003680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003698:	461a      	mov	r2, r3
 800369a:	2310      	movs	r3, #16
 800369c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b4:	461a      	mov	r2, r3
 80036b6:	2340      	movs	r3, #64	; 0x40
 80036b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d023      	beq.n	800370c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036c6:	6a38      	ldr	r0, [r7, #32]
 80036c8:	f003 f842 	bl	8006750 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ce:	4613      	mov	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	3338      	adds	r3, #56	; 0x38
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	3304      	adds	r3, #4
 80036de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	78db      	ldrb	r3, [r3, #3]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d108      	bne.n	80036fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2200      	movs	r2, #0
 80036ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f006 fc9b 	bl	800a030 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	461a      	mov	r2, r3
 8003708:	2302      	movs	r3, #2
 800370a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fcdb 	bl	80040d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	3301      	adds	r3, #1
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	f47f af2e 	bne.w	800358e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f004 f82c 	bl	8007794 <USB_ReadInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003746:	d122      	bne.n	800378e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003762:	2b01      	cmp	r3, #1
 8003764:	d108      	bne.n	8003778 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800376e:	2100      	movs	r1, #0
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fec3 	bl	80044fc <HAL_PCDEx_LPM_Callback>
 8003776:	e002      	b.n	800377e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f006 fc39 	bl	8009ff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800378c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 fffe 	bl	8007794 <USB_ReadInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a2:	d112      	bne.n	80037ca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d102      	bne.n	80037ba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f006 fbf5 	bl	8009fa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037c8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 ffe0 	bl	8007794 <USB_ReadInterrupts>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037de:	f040 80b7 	bne.w	8003950 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2110      	movs	r1, #16
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 ffa7 	bl	8006750 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003802:	2300      	movs	r3, #0
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003806:	e046      	b.n	8003896 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003814:	461a      	mov	r2, r3
 8003816:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800381a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800382c:	0151      	lsls	r1, r2, #5
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	440a      	add	r2, r1
 8003832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800383a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003848:	461a      	mov	r2, r3
 800384a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800384e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800386e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003880:	0151      	lsls	r1, r2, #5
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	440a      	add	r2, r1
 8003886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800388a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800388e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	3301      	adds	r3, #1
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800389c:	429a      	cmp	r2, r3
 800389e:	d3b3      	bcc.n	8003808 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d016      	beq.n	80038ea <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038cc:	f043 030b 	orr.w	r3, r3, #11
 80038d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e2:	f043 030b 	orr.w	r3, r3, #11
 80038e6:	6453      	str	r3, [r2, #68]	; 0x44
 80038e8:	e015      	b.n	8003916 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038fc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003900:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003910:	f043 030b 	orr.w	r3, r3, #11
 8003914:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003924:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003928:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800393a:	461a      	mov	r2, r3
 800393c:	f003 ffee 	bl	800791c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800394e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f003 ff1d 	bl	8007794 <USB_ReadInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003964:	d124      	bne.n	80039b0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f003 ffb3 	bl	80078d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f002 ff68 	bl	800684a <USB_GetDevSpeed>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681c      	ldr	r4, [r3, #0]
 8003986:	f001 fa29 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 800398a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	4620      	mov	r0, r4
 8003996:	f002 fc67 	bl	8006268 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f006 fad9 	bl	8009f52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f003 feed 	bl	8007794 <USB_ReadInterrupts>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d10a      	bne.n	80039da <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f006 fab6 	bl	8009f36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f002 0208 	and.w	r2, r2, #8
 80039d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 fed8 	bl	8007794 <USB_ReadInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	d122      	bne.n	8003a34 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039fa:	2301      	movs	r3, #1
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
 80039fe:	e014      	b.n	8003a2a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fb27 	bl	8004072 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	3301      	adds	r3, #1
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d3e5      	bcc.n	8003a00 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f003 feab 	bl	8007794 <USB_ReadInterrupts>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a48:	d13b      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	e02b      	b.n	8003aa8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3340      	adds	r3, #64	; 0x40
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d115      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	da12      	bge.n	8003aa2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	333f      	adds	r3, #63	; 0x3f
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fae8 	bl	8004072 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d3ce      	bcc.n	8003a50 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 fe64 	bl	8007794 <USB_ReadInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ad6:	d155      	bne.n	8003b84 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ad8:	2301      	movs	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
 8003adc:	e045      	b.n	8003b6a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d12e      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b06:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da2b      	bge.n	8003b64 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b18:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d121      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b60:	6053      	str	r3, [r2, #4]
            break;
 8003b62:	e007      	b.n	8003b74 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	3301      	adds	r3, #1
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d3b4      	bcc.n	8003ade <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f003 fe03 	bl	8007794 <USB_ReadInterrupts>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d10a      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f006 fa5a 	bl	800a054 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f003 fded 	bl	8007794 <USB_ReadInterrupts>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d115      	bne.n	8003bf0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f006 fa4a 	bl	800a070 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	e000      	b.n	8003bf0 <HAL_PCD_IRQHandler+0x938>
      return;
 8003bee:	bf00      	nop
    }
  }
}
 8003bf0:	3734      	adds	r7, #52	; 0x34
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd90      	pop	{r4, r7, pc}

08003bf6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_PCD_SetAddress+0x1a>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e013      	b.n	8003c38 <HAL_PCD_SetAddress+0x42>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 fd4b 	bl	80076c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	4608      	mov	r0, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4603      	mov	r3, r0
 8003c50:	70fb      	strb	r3, [r7, #3]
 8003c52:	460b      	mov	r3, r1
 8003c54:	803b      	strh	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	da0f      	bge.n	8003c86 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	f003 020f 	and.w	r2, r3, #15
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	3338      	adds	r3, #56	; 0x38
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	705a      	strb	r2, [r3, #1]
 8003c84:	e00f      	b.n	8003ca6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	f003 020f 	and.w	r2, r3, #15
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cb2:	883a      	ldrh	r2, [r7, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	78ba      	ldrb	r2, [r7, #2]
 8003cbc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	785b      	ldrb	r3, [r3, #1]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d004      	beq.n	8003cd0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cd0:	78bb      	ldrb	r3, [r7, #2]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d102      	bne.n	8003cdc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_PCD_EP_Open+0xaa>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e00e      	b.n	8003d08 <HAL_PCD_EP_Open+0xc8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f002 fdcb 	bl	8006894 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003d06:	7afb      	ldrb	r3, [r7, #11]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	da0f      	bge.n	8003d44 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 020f 	and.w	r2, r3, #15
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	3338      	adds	r3, #56	; 0x38
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4413      	add	r3, r2
 8003d38:	3304      	adds	r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	705a      	strb	r2, [r3, #1]
 8003d42:	e00f      	b.n	8003d64 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 020f 	and.w	r2, r3, #15
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_PCD_EP_Close+0x6e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e00e      	b.n	8003d9c <HAL_PCD_EP_Close+0x8c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f002 fe09 	bl	80069a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	460b      	mov	r3, r1
 8003db2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db4:	7afb      	ldrb	r3, [r7, #11]
 8003db6:	f003 020f 	and.w	r2, r3, #15
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3304      	adds	r3, #4
 8003dcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2200      	movs	r2, #0
 8003de4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de6:	7afb      	ldrb	r3, [r7, #11]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d102      	bne.n	8003e00 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e00:	7afb      	ldrb	r3, [r7, #11]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	f003 f8e8 	bl	8006fec <USB_EP0StartXfer>
 8003e1c:	e008      	b.n	8003e30 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6979      	ldr	r1, [r7, #20]
 8003e2c:	f002 fe96 	bl	8006b5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	f003 020f 	and.w	r2, r3, #15
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e5c:	681b      	ldr	r3, [r3, #0]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	460b      	mov	r3, r1
 8003e78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
 8003e7c:	f003 020f 	and.w	r2, r3, #15
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	3338      	adds	r3, #56	; 0x38
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3304      	adds	r3, #4
 8003e90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d102      	bne.n	8003ec4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6979      	ldr	r1, [r7, #20]
 8003edc:	f003 f886 	bl	8006fec <USB_EP0StartXfer>
 8003ee0:	e008      	b.n	8003ef4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	6979      	ldr	r1, [r7, #20]
 8003ef0:	f002 fe34 	bl	8006b5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	f003 020f 	and.w	r2, r3, #15
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d901      	bls.n	8003f1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e050      	b.n	8003fbe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	da0f      	bge.n	8003f44 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	f003 020f 	and.w	r2, r3, #15
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	3338      	adds	r3, #56	; 0x38
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4413      	add	r3, r2
 8003f38:	3304      	adds	r3, #4
 8003f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	705a      	strb	r2, [r3, #1]
 8003f42:	e00d      	b.n	8003f60 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4413      	add	r3, r2
 8003f56:	3304      	adds	r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_PCD_EP_SetStall+0x82>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e01e      	b.n	8003fbe <HAL_PCD_EP_SetStall+0xc0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68f9      	ldr	r1, [r7, #12]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f003 fac4 	bl	800751c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	b2d9      	uxtb	r1, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f003 fcb4 	bl	800791c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	f003 020f 	and.w	r2, r3, #15
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d901      	bls.n	8003fe4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e042      	b.n	800406a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	da0f      	bge.n	800400c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	f003 020f 	and.w	r2, r3, #15
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	3338      	adds	r3, #56	; 0x38
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	4413      	add	r3, r2
 8004000:	3304      	adds	r3, #4
 8004002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	705a      	strb	r2, [r3, #1]
 800400a:	e00f      	b.n	800402c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	f003 020f 	and.w	r2, r3, #15
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	3304      	adds	r3, #4
 8004024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_PCD_EP_ClrStall+0x86>
 8004048:	2302      	movs	r3, #2
 800404a:	e00e      	b.n	800406a <HAL_PCD_EP_ClrStall+0xa4>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68f9      	ldr	r1, [r7, #12]
 800405a:	4618      	mov	r0, r3
 800405c:	f003 facc 	bl	80075f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800407e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004082:	2b00      	cmp	r3, #0
 8004084:	da0c      	bge.n	80040a0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	f003 020f 	and.w	r2, r3, #15
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	3338      	adds	r3, #56	; 0x38
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	3304      	adds	r3, #4
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e00c      	b.n	80040ba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	f003 020f 	and.w	r2, r3, #15
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	3304      	adds	r3, #4
 80040b8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f003 f8eb 	bl	800729c <USB_EPStopXfer>
 80040c6:	4603      	mov	r3, r0
 80040c8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80040ca:	7afb      	ldrb	r3, [r7, #11]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af02      	add	r7, sp, #8
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	3338      	adds	r3, #56	; 0x38
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	3304      	adds	r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	429a      	cmp	r2, r3
 8004106:	d901      	bls.n	800410c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e06c      	b.n	80041e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	699a      	ldr	r2, [r3, #24]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	429a      	cmp	r2, r3
 8004120:	d902      	bls.n	8004128 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	3303      	adds	r3, #3
 800412c:	089b      	lsrs	r3, r3, #2
 800412e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004130:	e02b      	b.n	800418a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	429a      	cmp	r2, r3
 8004146:	d902      	bls.n	800414e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3303      	adds	r3, #3
 8004152:	089b      	lsrs	r3, r3, #2
 8004154:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6919      	ldr	r1, [r3, #16]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004166:	b2db      	uxtb	r3, r3
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	4603      	mov	r3, r0
 800416c:	6978      	ldr	r0, [r7, #20]
 800416e:	f003 f93f 	bl	80073f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	441a      	add	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	441a      	add	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	b29b      	uxth	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	429a      	cmp	r2, r3
 800419e:	d809      	bhi.n	80041b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d203      	bcs.n	80041b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1be      	bne.n	8004132 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d811      	bhi.n	80041e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	2201      	movs	r2, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	43db      	mvns	r3, r3
 80041da:	6939      	ldr	r1, [r7, #16]
 80041dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e0:	4013      	ands	r3, r2
 80041e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	333c      	adds	r3, #60	; 0x3c
 8004208:	3304      	adds	r3, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d17b      	bne.n	800431e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d015      	beq.n	800425c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4a61      	ldr	r2, [pc, #388]	; (80043b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	f240 80b9 	bls.w	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80b3 	beq.w	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	461a      	mov	r2, r3
 8004254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004258:	6093      	str	r3, [r2, #8]
 800425a:	e0a7      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	461a      	mov	r2, r3
 8004274:	2320      	movs	r3, #32
 8004276:	6093      	str	r3, [r2, #8]
 8004278:	e098      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 8093 	bne.w	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	4a4b      	ldr	r2, [pc, #300]	; (80043b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d90f      	bls.n	80042ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	461a      	mov	r2, r3
 80042a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042aa:	6093      	str	r3, [r2, #8]
 80042ac:	e07e      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4413      	add	r3, r2
 80042c0:	3304      	adds	r3, #4
 80042c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	0159      	lsls	r1, r3, #5
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	440b      	add	r3, r1
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d114      	bne.n	8004310 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042f8:	461a      	mov	r2, r3
 80042fa:	2101      	movs	r1, #1
 80042fc:	f003 fb0e 	bl	800791c <USB_EP0_OutStart>
 8004300:	e006      	b.n	8004310 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	441a      	add	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	4619      	mov	r1, r3
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f005 fdd8 	bl	8009ecc <HAL_PCD_DataOutStageCallback>
 800431c:	e046      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	4a26      	ldr	r2, [pc, #152]	; (80043bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d124      	bne.n	8004370 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	461a      	mov	r2, r3
 800433e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004342:	6093      	str	r3, [r2, #8]
 8004344:	e032      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	2320      	movs	r3, #32
 8004360:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	4619      	mov	r1, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f005 fdaf 	bl	8009ecc <HAL_PCD_DataOutStageCallback>
 800436e:	e01d      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d114      	bne.n	80043a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d108      	bne.n	80043a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004398:	461a      	mov	r2, r3
 800439a:	2100      	movs	r1, #0
 800439c:	f003 fabe 	bl	800791c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f005 fd90 	bl	8009ecc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	4f54300a 	.word	0x4f54300a
 80043bc:	4f54310a 	.word	0x4f54310a

080043c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	333c      	adds	r3, #60	; 0x3c
 80043d8:	3304      	adds	r3, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <PCD_EP_OutSetupPacket_int+0x88>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d90e      	bls.n	8004414 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d009      	beq.n	8004414 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	461a      	mov	r2, r3
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f005 fd47 	bl	8009ea8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <PCD_EP_OutSetupPacket_int+0x88>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d90c      	bls.n	800443c <PCD_EP_OutSetupPacket_int+0x7c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d108      	bne.n	800443c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004434:	461a      	mov	r2, r3
 8004436:	2101      	movs	r1, #1
 8004438:	f003 fa70 	bl	800791c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	4f54300a 	.word	0x4f54300a

0800444c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
 8004458:	4613      	mov	r3, r2
 800445a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800446a:	883b      	ldrh	r3, [r7, #0]
 800446c:	0419      	lsls	r1, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	430a      	orrs	r2, r1
 8004476:	629a      	str	r2, [r3, #40]	; 0x28
 8004478:	e028      	b.n	80044cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4413      	add	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	e00d      	b.n	80044aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	3340      	adds	r3, #64	; 0x40
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4413      	add	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	3301      	adds	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d3ec      	bcc.n	800448e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044b4:	883b      	ldrh	r3, [r7, #0]
 80044b6:	0418      	lsls	r0, r3, #16
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6819      	ldr	r1, [r3, #0]
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	3b01      	subs	r3, #1
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	4302      	orrs	r2, r0
 80044c4:	3340      	adds	r3, #64	; 0x40
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	460b      	mov	r3, r1
 80044e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	887a      	ldrh	r2, [r7, #2]
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e267      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d075      	beq.n	800461e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d00c      	beq.n	8004558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d112      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004556:	d10b      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <HAL_RCC_OscConfig+0x108>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d157      	bne.n	800461c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e242      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x74>
 800457a:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a75      	ldr	r2, [pc, #468]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x98>
 8004592:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6f      	ldr	r2, [pc, #444]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6c      	ldr	r2, [pc, #432]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 80045ac:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a68      	ldr	r2, [pc, #416]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fe f8ce 	bl	800276c <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fe f8ca 	bl	800276c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e207      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b5b      	ldr	r3, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xc0>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fe f8ba 	bl	800276c <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fe f8b6 	bl	800276c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1f3      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0xe8>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	2b08      	cmp	r3, #8
 8004640:	d11c      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004642:	4b44      	ldr	r3, [pc, #272]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1c7      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4937      	ldr	r1, [pc, #220]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	e03a      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fe f86f 	bl	800276c <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004692:	f7fe f86b 	bl	800276c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1a8      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4925      	ldr	r1, [pc, #148]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fe f84e 	bl	800276c <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fe f84a 	bl	800276c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e187      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d036      	beq.n	800476c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fe f82e 	bl	800276c <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004714:	f7fe f82a 	bl	800276c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e167      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x200>
 8004732:	e01b      	b.n	800476c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fe f817 	bl	800276c <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	e00e      	b.n	8004760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004742:	f7fe f813 	bl	800276c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d907      	bls.n	8004760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e150      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004754:	40023800 	.word	0x40023800
 8004758:	42470000 	.word	0x42470000
 800475c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1ea      	bne.n	8004742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8097 	beq.w	80048a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477e:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a7c      	ldr	r2, [pc, #496]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b7a      	ldr	r3, [pc, #488]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b6:	4b74      	ldr	r3, [pc, #464]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a73      	ldr	r2, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fd ffd3 	bl	800276c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fd ffcf 	bl	800276c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e10c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x2ea>
 80047f0:	4b64      	ldr	r3, [pc, #400]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a63      	ldr	r2, [pc, #396]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	e01c      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b05      	cmp	r3, #5
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x30c>
 8004806:	4b5f      	ldr	r3, [pc, #380]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800480c:	f043 0304 	orr.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 8004820:	4b58      	ldr	r3, [pc, #352]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a57      	ldr	r2, [pc, #348]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	4b55      	ldr	r3, [pc, #340]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004832:	f023 0304 	bic.w	r3, r3, #4
 8004836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd ff94 	bl	800276c <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fd ff90 	bl	800276c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0cb      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	4b49      	ldr	r3, [pc, #292]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ee      	beq.n	8004848 <HAL_RCC_OscConfig+0x334>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486c:	f7fd ff7e 	bl	800276c <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004872:	e00a      	b.n	800488a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fd ff7a 	bl	800276c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e0b5      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ee      	bne.n	8004874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d105      	bne.n	80048a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	4a38      	ldr	r2, [pc, #224]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a1 	beq.w	80049f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d05c      	beq.n	8004978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d141      	bne.n	800494a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_RCC_OscConfig+0x478>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7fd ff4e 	bl	800276c <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fd ff4a 	bl	800276c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e087      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fd ff23 	bl	800276c <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492a:	f7fd ff1f 	bl	800276c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e05c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x416>
 8004948:	e054      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fd ff0c 	bl	800276c <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd ff08 	bl	800276c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e045      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x444>
 8004976:	e03d      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e038      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004984:	40023800 	.word	0x40023800
 8004988:	40007000 	.word	0x40007000
 800498c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004990:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x4ec>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d028      	beq.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d121      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d11a      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0cc      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d90c      	bls.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0b8      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a58      	ldr	r2, [pc, #352]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a70:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a52      	ldr	r2, [pc, #328]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d044      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e067      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4934      	ldr	r1, [pc, #208]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af4:	f7fd fe3a 	bl	800276c <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fd fe36 	bl	800276c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e04f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d20c      	bcs.n	8004b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e032      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b8a:	f000 f821 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fd fd9a 	bl	80026e4 <HAL_InitTick>

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023c00 	.word	0x40023c00
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800fcb4 	.word	0x0800fcb4
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	20000004 	.word	0x20000004

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd4:	b094      	sub	sp, #80	; 0x50
 8004bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
 8004bdc:	2300      	movs	r3, #0
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be0:	2300      	movs	r3, #0
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d00d      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	f200 80e1 	bhi.w	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d003      	beq.n	8004c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c02:	e0db      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c08:	e0db      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0a:	4b73      	ldr	r3, [pc, #460]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0e:	e0d8      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c10:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c26:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c54:	0150      	lsls	r0, r2, #5
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	1a51      	subs	r1, r2, r1
 8004c5e:	6139      	str	r1, [r7, #16]
 8004c60:	4629      	mov	r1, r5
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c74:	4659      	mov	r1, fp
 8004c76:	018b      	lsls	r3, r1, #6
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7e:	4651      	mov	r1, sl
 8004c80:	018a      	lsls	r2, r1, #6
 8004c82:	4651      	mov	r1, sl
 8004c84:	ebb2 0801 	subs.w	r8, r2, r1
 8004c88:	4659      	mov	r1, fp
 8004c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	4699      	mov	r9, r3
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	eb18 0303 	adds.w	r3, r8, r3
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	462b      	mov	r3, r5
 8004cb0:	eb49 0303 	adc.w	r3, r9, r3
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	024b      	lsls	r3, r1, #9
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ccc:	4621      	mov	r1, r4
 8004cce:	024a      	lsls	r2, r1, #9
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ce0:	f7fb ffd2 	bl	8000c88 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	e058      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f04f 0000 	mov.w	r0, #0
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	0159      	lsls	r1, r3, #5
 8004d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1a:	0150      	lsls	r0, r2, #5
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4641      	mov	r1, r8
 8004d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d40:	ebb2 040a 	subs.w	r4, r2, sl
 8004d44:	eb63 050b 	sbc.w	r5, r3, fp
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	00eb      	lsls	r3, r5, #3
 8004d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d56:	00e2      	lsls	r2, r4, #3
 8004d58:	4614      	mov	r4, r2
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	4643      	mov	r3, r8
 8004d5e:	18e3      	adds	r3, r4, r3
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	464b      	mov	r3, r9
 8004d64:	eb45 0303 	adc.w	r3, r5, r3
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d76:	4629      	mov	r1, r5
 8004d78:	028b      	lsls	r3, r1, #10
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d80:	4621      	mov	r1, r4
 8004d82:	028a      	lsls	r2, r1, #10
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	61fa      	str	r2, [r7, #28]
 8004d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d94:	f7fb ff78 	bl	8000c88 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	3301      	adds	r3, #1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dba:	e002      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3750      	adds	r7, #80	; 0x50
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	007a1200 	.word	0x007a1200

08004ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de2:	681b      	ldr	r3, [r3, #0]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000000 	.word	0x20000000

08004df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df8:	f7ff fff0 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	4903      	ldr	r1, [pc, #12]	; (8004e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0a:	5ccb      	ldrb	r3, [r1, r3]
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40023800 	.word	0x40023800
 8004e18:	0800fcc4 	.word	0x0800fcc4

08004e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e07b      	b.n	8004f26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d108      	bne.n	8004e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e3e:	d009      	beq.n	8004e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	61da      	str	r2, [r3, #28]
 8004e46:	e005      	b.n	8004e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd f9a2 	bl	80021b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed8:	ea42 0103 	orr.w	r1, r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	f003 0104 	and.w	r1, r3, #4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	f003 0210 	and.w	r2, r3, #16
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e04c      	b.n	8004fdc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d111      	bne.n	8004f72 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 ffe0 	bl	8005f1c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <HAL_TIM_Base_Init+0xb4>)
 8004f68:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f000 fd53 	bl	8005a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	08002319 	.word	0x08002319

08004fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d001      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e04e      	b.n	800509e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a23      	ldr	r2, [pc, #140]	; (80050ac <HAL_TIM_Base_Start_IT+0xc4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d022      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502a:	d01d      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d111      	bne.n	800508c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b06      	cmp	r3, #6
 8005078:	d010      	beq.n	800509c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508a:	e007      	b.n	800509c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40000c00 	.word	0x40000c00
 80050bc:	40010400 	.word	0x40010400
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40001800 	.word	0x40001800

080050c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e04c      	b.n	8005174 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d111      	bne.n	800510a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 ff14 	bl	8005f1c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d102      	bne.n	8005102 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a1f      	ldr	r2, [pc, #124]	; (800517c <HAL_TIM_PWM_Init+0xb4>)
 8005100:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f000 fc87 	bl	8005a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	08002369 	.word	0x08002369

08005180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <HAL_TIM_PWM_Start+0x24>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e022      	b.n	80051ea <HAL_TIM_PWM_Start+0x6a>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d109      	bne.n	80051be <HAL_TIM_PWM_Start+0x3e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	bf14      	ite	ne
 80051b6:	2301      	movne	r3, #1
 80051b8:	2300      	moveq	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	e015      	b.n	80051ea <HAL_TIM_PWM_Start+0x6a>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d109      	bne.n	80051d8 <HAL_TIM_PWM_Start+0x58>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e008      	b.n	80051ea <HAL_TIM_PWM_Start+0x6a>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e07c      	b.n	80052ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start+0x82>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005200:	e013      	b.n	800522a <HAL_TIM_PWM_Start+0xaa>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b04      	cmp	r3, #4
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start+0x92>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005210:	e00b      	b.n	800522a <HAL_TIM_PWM_Start+0xaa>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start+0xa2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005220:	e003      	b.n	800522a <HAL_TIM_PWM_Start+0xaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fe4c 	bl	8005ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <HAL_TIM_PWM_Start+0x174>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_TIM_PWM_Start+0xcc>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <HAL_TIM_PWM_Start+0x178>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d101      	bne.n	8005250 <HAL_TIM_PWM_Start+0xd0>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_TIM_PWM_Start+0xd2>
 8005250:	2300      	movs	r3, #0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <HAL_TIM_PWM_Start+0x174>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005278:	d01d      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1f      	ldr	r2, [pc, #124]	; (80052fc <HAL_TIM_PWM_Start+0x17c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <HAL_TIM_PWM_Start+0x180>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1c      	ldr	r2, [pc, #112]	; (8005304 <HAL_TIM_PWM_Start+0x184>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <HAL_TIM_PWM_Start+0x178>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a18      	ldr	r2, [pc, #96]	; (8005308 <HAL_TIM_PWM_Start+0x188>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x136>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a16      	ldr	r2, [pc, #88]	; (800530c <HAL_TIM_PWM_Start+0x18c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d111      	bne.n	80052da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d010      	beq.n	80052ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d8:	e007      	b.n	80052ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40010400 	.word	0x40010400
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40014000 	.word	0x40014000
 800530c:	40001800 	.word	0x40001800

08005310 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0a2      	b.n	800546a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d111      	bne.n	8005354 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fdef 	bl	8005f1c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4a      	ldr	r2, [pc, #296]	; (8005474 <HAL_TIM_Encoder_Init+0x164>)
 800534a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536a:	f023 0307 	bic.w	r3, r3, #7
 800536e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3304      	adds	r3, #4
 8005378:	4619      	mov	r1, r3
 800537a:	4610      	mov	r0, r2
 800537c:	f000 fb58 	bl	8005a30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a8:	f023 0303 	bic.w	r3, r3, #3
 80053ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	4313      	orrs	r3, r2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053c6:	f023 030c 	bic.w	r3, r3, #12
 80053ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	4313      	orrs	r3, r2
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	011a      	lsls	r2, r3, #4
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	031b      	lsls	r3, r3, #12
 80053f6:	4313      	orrs	r3, r2
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005404:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800540c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	4313      	orrs	r3, r2
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	08002249 	.word	0x08002249

08005478 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005488:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005490:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005498:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d110      	bne.n	80054ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d102      	bne.n	80054b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80054ae:	7b7b      	ldrb	r3, [r7, #13]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d001      	beq.n	80054b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e069      	b.n	800558c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c8:	e031      	b.n	800552e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d110      	bne.n	80054f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054d0:	7bbb      	ldrb	r3, [r7, #14]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d102      	bne.n	80054dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054d6:	7b3b      	ldrb	r3, [r7, #12]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d001      	beq.n	80054e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e055      	b.n	800558c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054f0:	e01d      	b.n	800552e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d108      	bne.n	800550a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054f8:	7bbb      	ldrb	r3, [r7, #14]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d105      	bne.n	800550a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054fe:	7b7b      	ldrb	r3, [r7, #13]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d102      	bne.n	800550a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005504:	7b3b      	ldrb	r3, [r7, #12]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d001      	beq.n	800550e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e03e      	b.n	800558c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_TIM_Encoder_Start+0xc4>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b04      	cmp	r3, #4
 8005538:	d008      	beq.n	800554c <HAL_TIM_Encoder_Start+0xd4>
 800553a:	e00f      	b.n	800555c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2201      	movs	r2, #1
 8005542:	2100      	movs	r1, #0
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fcc3 	bl	8005ed0 <TIM_CCxChannelCmd>
      break;
 800554a:	e016      	b.n	800557a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2201      	movs	r2, #1
 8005552:	2104      	movs	r1, #4
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fcbb 	bl	8005ed0 <TIM_CCxChannelCmd>
      break;
 800555a:	e00e      	b.n	800557a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2201      	movs	r2, #1
 8005562:	2100      	movs	r1, #0
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fcb3 	bl	8005ed0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2201      	movs	r2, #1
 8005570:	2104      	movs	r1, #4
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fcac 	bl	8005ed0 <TIM_CCxChannelCmd>
      break;
 8005578:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0201 	orr.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d128      	bne.n	80055fc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d121      	bne.n	80055fc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0202 	mvn.w	r2, #2
 80055c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
 80055e0:	e009      	b.n	80055f6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b04      	cmp	r3, #4
 8005608:	d128      	bne.n	800565c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b04      	cmp	r3, #4
 8005616:	d121      	bne.n	800565c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0204 	mvn.w	r2, #4
 8005620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
 8005640:	e009      	b.n	8005656 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d128      	bne.n	80056bc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b08      	cmp	r3, #8
 8005676:	d121      	bne.n	80056bc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0208 	mvn.w	r2, #8
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2204      	movs	r2, #4
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	4798      	blx	r3
 80056a0:	e009      	b.n	80056b6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d128      	bne.n	800571c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d121      	bne.n	800571c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0210 	mvn.w	r2, #16
 80056e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2208      	movs	r2, #8
 80056e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	4798      	blx	r3
 8005700:	e009      	b.n	8005716 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d110      	bne.n	800574c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d109      	bne.n	800574c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0201 	mvn.w	r2, #1
 8005740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d110      	bne.n	800577c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005764:	2b80      	cmp	r3, #128	; 0x80
 8005766:	d109      	bne.n	800577c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d110      	bne.n	80057ac <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d109      	bne.n	80057ac <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d110      	bne.n	80057dc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d109      	bne.n	80057dc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0220 	mvn.w	r2, #32
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057fe:	2302      	movs	r3, #2
 8005800:	e0ae      	b.n	8005960 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b0c      	cmp	r3, #12
 800580e:	f200 809f 	bhi.w	8005950 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005812:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	0800584d 	.word	0x0800584d
 800581c:	08005951 	.word	0x08005951
 8005820:	08005951 	.word	0x08005951
 8005824:	08005951 	.word	0x08005951
 8005828:	0800588d 	.word	0x0800588d
 800582c:	08005951 	.word	0x08005951
 8005830:	08005951 	.word	0x08005951
 8005834:	08005951 	.word	0x08005951
 8005838:	080058cf 	.word	0x080058cf
 800583c:	08005951 	.word	0x08005951
 8005840:	08005951 	.word	0x08005951
 8005844:	08005951 	.word	0x08005951
 8005848:	0800590f 	.word	0x0800590f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f98c 	bl	8005b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0208 	orr.w	r2, r2, #8
 8005866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0204 	bic.w	r2, r2, #4
 8005876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6999      	ldr	r1, [r3, #24]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	619a      	str	r2, [r3, #24]
      break;
 800588a:	e064      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f9dc 	bl	8005c50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6999      	ldr	r1, [r3, #24]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	021a      	lsls	r2, r3, #8
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	619a      	str	r2, [r3, #24]
      break;
 80058cc:	e043      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fa31 	bl	8005d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0208 	orr.w	r2, r2, #8
 80058e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0204 	bic.w	r2, r2, #4
 80058f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69d9      	ldr	r1, [r3, #28]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	61da      	str	r2, [r3, #28]
      break;
 800590c:	e023      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fa85 	bl	8005e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69d9      	ldr	r1, [r3, #28]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	021a      	lsls	r2, r3, #8
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	61da      	str	r2, [r3, #28]
      break;
 800594e:	e002      	b.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	75fb      	strb	r3, [r7, #23]
      break;
 8005954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800595e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a40      	ldr	r2, [pc, #256]	; (8005b44 <TIM_Base_SetConfig+0x114>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d013      	beq.n	8005a70 <TIM_Base_SetConfig+0x40>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4e:	d00f      	beq.n	8005a70 <TIM_Base_SetConfig+0x40>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a3d      	ldr	r2, [pc, #244]	; (8005b48 <TIM_Base_SetConfig+0x118>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00b      	beq.n	8005a70 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a3c      	ldr	r2, [pc, #240]	; (8005b4c <TIM_Base_SetConfig+0x11c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d007      	beq.n	8005a70 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a3b      	ldr	r2, [pc, #236]	; (8005b50 <TIM_Base_SetConfig+0x120>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a3a      	ldr	r2, [pc, #232]	; (8005b54 <TIM_Base_SetConfig+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d108      	bne.n	8005a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2f      	ldr	r2, [pc, #188]	; (8005b44 <TIM_Base_SetConfig+0x114>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d02b      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a90:	d027      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a2c      	ldr	r2, [pc, #176]	; (8005b48 <TIM_Base_SetConfig+0x118>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d023      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2b      	ldr	r2, [pc, #172]	; (8005b4c <TIM_Base_SetConfig+0x11c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01f      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <TIM_Base_SetConfig+0x120>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01b      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a29      	ldr	r2, [pc, #164]	; (8005b54 <TIM_Base_SetConfig+0x124>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d017      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a28      	ldr	r2, [pc, #160]	; (8005b58 <TIM_Base_SetConfig+0x128>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a27      	ldr	r2, [pc, #156]	; (8005b5c <TIM_Base_SetConfig+0x12c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00f      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a26      	ldr	r2, [pc, #152]	; (8005b60 <TIM_Base_SetConfig+0x130>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00b      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a25      	ldr	r2, [pc, #148]	; (8005b64 <TIM_Base_SetConfig+0x134>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d007      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a24      	ldr	r2, [pc, #144]	; (8005b68 <TIM_Base_SetConfig+0x138>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d003      	beq.n	8005ae2 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a23      	ldr	r2, [pc, #140]	; (8005b6c <TIM_Base_SetConfig+0x13c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d108      	bne.n	8005af4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <TIM_Base_SetConfig+0x114>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_Base_SetConfig+0xf8>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <TIM_Base_SetConfig+0x124>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d103      	bne.n	8005b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	615a      	str	r2, [r3, #20]
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40000400 	.word	0x40000400
 8005b4c:	40000800 	.word	0x40000800
 8005b50:	40000c00 	.word	0x40000c00
 8005b54:	40010400 	.word	0x40010400
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800
 8005b64:	40001800 	.word	0x40001800
 8005b68:	40001c00 	.word	0x40001c00
 8005b6c:	40002000 	.word	0x40002000

08005b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 0302 	bic.w	r3, r3, #2
 8005bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a20      	ldr	r2, [pc, #128]	; (8005c48 <TIM_OC1_SetConfig+0xd8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_OC1_SetConfig+0x64>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <TIM_OC1_SetConfig+0xdc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d10c      	bne.n	8005bee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0308 	bic.w	r3, r3, #8
 8005bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f023 0304 	bic.w	r3, r3, #4
 8005bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <TIM_OC1_SetConfig+0xd8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_OC1_SetConfig+0x8e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <TIM_OC1_SetConfig+0xdc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d111      	bne.n	8005c22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	621a      	str	r2, [r3, #32]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40010400 	.word	0x40010400

08005c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0210 	bic.w	r2, r3, #16
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0320 	bic.w	r3, r3, #32
 8005c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a22      	ldr	r2, [pc, #136]	; (8005d34 <TIM_OC2_SetConfig+0xe4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_OC2_SetConfig+0x68>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a21      	ldr	r2, [pc, #132]	; (8005d38 <TIM_OC2_SetConfig+0xe8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d10d      	bne.n	8005cd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a17      	ldr	r2, [pc, #92]	; (8005d34 <TIM_OC2_SetConfig+0xe4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC2_SetConfig+0x94>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a16      	ldr	r2, [pc, #88]	; (8005d38 <TIM_OC2_SetConfig+0xe8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d113      	bne.n	8005d0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40010400 	.word	0x40010400

08005d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a21      	ldr	r2, [pc, #132]	; (8005e1c <TIM_OC3_SetConfig+0xe0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_OC3_SetConfig+0x66>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a20      	ldr	r2, [pc, #128]	; (8005e20 <TIM_OC3_SetConfig+0xe4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10d      	bne.n	8005dbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <TIM_OC3_SetConfig+0xe0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d003      	beq.n	8005dce <TIM_OC3_SetConfig+0x92>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <TIM_OC3_SetConfig+0xe4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d113      	bne.n	8005df6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	621a      	str	r2, [r3, #32]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	031b      	lsls	r3, r3, #12
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a12      	ldr	r2, [pc, #72]	; (8005ec8 <TIM_OC4_SetConfig+0xa4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_OC4_SetConfig+0x68>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a11      	ldr	r2, [pc, #68]	; (8005ecc <TIM_OC4_SetConfig+0xa8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d109      	bne.n	8005ea0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	019b      	lsls	r3, r3, #6
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40010400 	.word	0x40010400

08005ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a1a      	ldr	r2, [r3, #32]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	401a      	ands	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1a      	ldr	r2, [r3, #32]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
	...

08005f1c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a1c      	ldr	r2, [pc, #112]	; (8005f98 <TIM_ResetCallback+0x7c>)
 8005f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <TIM_ResetCallback+0x80>)
 8005f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a1a      	ldr	r2, [pc, #104]	; (8005fa0 <TIM_ResetCallback+0x84>)
 8005f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <TIM_ResetCallback+0x88>)
 8005f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <TIM_ResetCallback+0x8c>)
 8005f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a17      	ldr	r2, [pc, #92]	; (8005fac <TIM_ResetCallback+0x90>)
 8005f50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <TIM_ResetCallback+0x94>)
 8005f58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <TIM_ResetCallback+0x98>)
 8005f60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <TIM_ResetCallback+0x9c>)
 8005f68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <TIM_ResetCallback+0xa0>)
 8005f70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a12      	ldr	r2, [pc, #72]	; (8005fc0 <TIM_ResetCallback+0xa4>)
 8005f78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a11      	ldr	r2, [pc, #68]	; (8005fc4 <TIM_ResetCallback+0xa8>)
 8005f80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a10      	ldr	r2, [pc, #64]	; (8005fc8 <TIM_ResetCallback+0xac>)
 8005f88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	08005969 	.word	0x08005969
 8005f9c:	0800597d 	.word	0x0800597d
 8005fa0:	080059f5 	.word	0x080059f5
 8005fa4:	08005a09 	.word	0x08005a09
 8005fa8:	080059a5 	.word	0x080059a5
 8005fac:	080059b9 	.word	0x080059b9
 8005fb0:	08005991 	.word	0x08005991
 8005fb4:	080059cd 	.word	0x080059cd
 8005fb8:	080059e1 	.word	0x080059e1
 8005fbc:	08005a1d 	.word	0x08005a1d
 8005fc0:	08006169 	.word	0x08006169
 8005fc4:	0800617d 	.word	0x0800617d
 8005fc8:	08006191 	.word	0x08006191

08005fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e05a      	b.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d022      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d01d      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d018      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1b      	ldr	r2, [pc, #108]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00e      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a18      	ldr	r2, [pc, #96]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d009      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a17      	ldr	r2, [pc, #92]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a15      	ldr	r2, [pc, #84]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d10c      	bne.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	4313      	orrs	r3, r2
 800607e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40010000 	.word	0x40010000
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800
 80060b4:	40000c00 	.word	0x40000c00
 80060b8:	40010400 	.word	0x40010400
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40001800 	.word	0x40001800

080060c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060dc:	2302      	movs	r3, #2
 80060de:	e03d      	b.n	800615c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061a4:	b084      	sub	sp, #16
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	f107 001c 	add.w	r0, r7, #28
 80061b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d122      	bne.n	8006202 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d105      	bne.n	80061f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 fbee 	bl	80079d8 <USB_CoreReset>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]
 8006200:	e01a      	b.n	8006238 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fbe2 	bl	80079d8 <USB_CoreReset>
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	639a      	str	r2, [r3, #56]	; 0x38
 800622a:	e005      	b.n	8006238 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	2b01      	cmp	r3, #1
 800623c:	d10b      	bne.n	8006256 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f043 0206 	orr.w	r2, r3, #6
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f043 0220 	orr.w	r2, r3, #32
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006262:	b004      	add	sp, #16
 8006264:	4770      	bx	lr
	...

08006268 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d165      	bne.n	8006348 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a41      	ldr	r2, [pc, #260]	; (8006384 <USB_SetTurnaroundTime+0x11c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d906      	bls.n	8006292 <USB_SetTurnaroundTime+0x2a>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a40      	ldr	r2, [pc, #256]	; (8006388 <USB_SetTurnaroundTime+0x120>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d202      	bcs.n	8006292 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800628c:	230f      	movs	r3, #15
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e062      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a3c      	ldr	r2, [pc, #240]	; (8006388 <USB_SetTurnaroundTime+0x120>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d306      	bcc.n	80062a8 <USB_SetTurnaroundTime+0x40>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a3b      	ldr	r2, [pc, #236]	; (800638c <USB_SetTurnaroundTime+0x124>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d202      	bcs.n	80062a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062a2:	230e      	movs	r3, #14
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e057      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a38      	ldr	r2, [pc, #224]	; (800638c <USB_SetTurnaroundTime+0x124>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d306      	bcc.n	80062be <USB_SetTurnaroundTime+0x56>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4a37      	ldr	r2, [pc, #220]	; (8006390 <USB_SetTurnaroundTime+0x128>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d202      	bcs.n	80062be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062b8:	230d      	movs	r3, #13
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e04c      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4a33      	ldr	r2, [pc, #204]	; (8006390 <USB_SetTurnaroundTime+0x128>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d306      	bcc.n	80062d4 <USB_SetTurnaroundTime+0x6c>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4a32      	ldr	r2, [pc, #200]	; (8006394 <USB_SetTurnaroundTime+0x12c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d802      	bhi.n	80062d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062ce:	230c      	movs	r3, #12
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	e041      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a2f      	ldr	r2, [pc, #188]	; (8006394 <USB_SetTurnaroundTime+0x12c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d906      	bls.n	80062ea <USB_SetTurnaroundTime+0x82>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a2e      	ldr	r2, [pc, #184]	; (8006398 <USB_SetTurnaroundTime+0x130>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d802      	bhi.n	80062ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062e4:	230b      	movs	r3, #11
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e036      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4a2a      	ldr	r2, [pc, #168]	; (8006398 <USB_SetTurnaroundTime+0x130>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d906      	bls.n	8006300 <USB_SetTurnaroundTime+0x98>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4a29      	ldr	r2, [pc, #164]	; (800639c <USB_SetTurnaroundTime+0x134>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d802      	bhi.n	8006300 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062fa:	230a      	movs	r3, #10
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	e02b      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a26      	ldr	r2, [pc, #152]	; (800639c <USB_SetTurnaroundTime+0x134>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d906      	bls.n	8006316 <USB_SetTurnaroundTime+0xae>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4a25      	ldr	r2, [pc, #148]	; (80063a0 <USB_SetTurnaroundTime+0x138>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d202      	bcs.n	8006316 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006310:	2309      	movs	r3, #9
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e020      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4a21      	ldr	r2, [pc, #132]	; (80063a0 <USB_SetTurnaroundTime+0x138>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d306      	bcc.n	800632c <USB_SetTurnaroundTime+0xc4>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4a20      	ldr	r2, [pc, #128]	; (80063a4 <USB_SetTurnaroundTime+0x13c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d802      	bhi.n	800632c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006326:	2308      	movs	r3, #8
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	e015      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4a1d      	ldr	r2, [pc, #116]	; (80063a4 <USB_SetTurnaroundTime+0x13c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d906      	bls.n	8006342 <USB_SetTurnaroundTime+0xda>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4a1c      	ldr	r2, [pc, #112]	; (80063a8 <USB_SetTurnaroundTime+0x140>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d202      	bcs.n	8006342 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800633c:	2307      	movs	r3, #7
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e00a      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006342:	2306      	movs	r3, #6
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e007      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800634e:	2309      	movs	r3, #9
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	e001      	b.n	8006358 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006354:	2309      	movs	r3, #9
 8006356:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	029b      	lsls	r3, r3, #10
 800636c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006370:	431a      	orrs	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	00d8acbf 	.word	0x00d8acbf
 8006388:	00e4e1c0 	.word	0x00e4e1c0
 800638c:	00f42400 	.word	0x00f42400
 8006390:	01067380 	.word	0x01067380
 8006394:	011a499f 	.word	0x011a499f
 8006398:	01312cff 	.word	0x01312cff
 800639c:	014ca43f 	.word	0x014ca43f
 80063a0:	016e3600 	.word	0x016e3600
 80063a4:	01a6ab1f 	.word	0x01a6ab1f
 80063a8:	01e84800 	.word	0x01e84800

080063ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f043 0201 	orr.w	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f023 0201 	bic.w	r2, r3, #1
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d115      	bne.n	800643e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800641e:	2001      	movs	r0, #1
 8006420:	f7fc f9b0 	bl	8002784 <HAL_Delay>
      ms++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3301      	adds	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 fa45 	bl	80078ba <USB_GetMode>
 8006430:	4603      	mov	r3, r0
 8006432:	2b01      	cmp	r3, #1
 8006434:	d01e      	beq.n	8006474 <USB_SetCurrentMode+0x84>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b31      	cmp	r3, #49	; 0x31
 800643a:	d9f0      	bls.n	800641e <USB_SetCurrentMode+0x2e>
 800643c:	e01a      	b.n	8006474 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d115      	bne.n	8006470 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006450:	2001      	movs	r0, #1
 8006452:	f7fc f997 	bl	8002784 <HAL_Delay>
      ms++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3301      	adds	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fa2c 	bl	80078ba <USB_GetMode>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <USB_SetCurrentMode+0x84>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b31      	cmp	r3, #49	; 0x31
 800646c:	d9f0      	bls.n	8006450 <USB_SetCurrentMode+0x60>
 800646e:	e001      	b.n	8006474 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e005      	b.n	8006480 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b32      	cmp	r3, #50	; 0x32
 8006478:	d101      	bne.n	800647e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006488:	b084      	sub	sp, #16
 800648a:	b580      	push	{r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064a2:	2300      	movs	r3, #0
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	e009      	b.n	80064bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3340      	adds	r3, #64	; 0x40
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	2200      	movs	r2, #0
 80064b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	3301      	adds	r3, #1
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2b0e      	cmp	r3, #14
 80064c0:	d9f2      	bls.n	80064a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d11c      	bne.n	8006502 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064d6:	f043 0302 	orr.w	r3, r3, #2
 80064da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006500:	e00b      	b.n	800651a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006520:	461a      	mov	r2, r3
 8006522:	2300      	movs	r3, #0
 8006524:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652c:	4619      	mov	r1, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006534:	461a      	mov	r2, r3
 8006536:	680b      	ldr	r3, [r1, #0]
 8006538:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653c:	2b01      	cmp	r3, #1
 800653e:	d10c      	bne.n	800655a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d104      	bne.n	8006550 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006546:	2100      	movs	r1, #0
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f965 	bl	8006818 <USB_SetDevSpeed>
 800654e:	e008      	b.n	8006562 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006550:	2101      	movs	r1, #1
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f960 	bl	8006818 <USB_SetDevSpeed>
 8006558:	e003      	b.n	8006562 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800655a:	2103      	movs	r1, #3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f95b 	bl	8006818 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006562:	2110      	movs	r1, #16
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8f3 	bl	8006750 <USB_FlushTxFifo>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f91f 	bl	80067b8 <USB_FlushRxFifo>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658a:	461a      	mov	r2, r3
 800658c:	2300      	movs	r3, #0
 800658e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006596:	461a      	mov	r2, r3
 8006598:	2300      	movs	r3, #0
 800659a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	461a      	mov	r2, r3
 80065a4:	2300      	movs	r3, #0
 80065a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	e043      	b.n	8006636 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c4:	d118      	bne.n	80065f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d8:	461a      	mov	r2, r3
 80065da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	e013      	b.n	800660a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	461a      	mov	r2, r3
 80065f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	e008      	b.n	800660a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006604:	461a      	mov	r2, r3
 8006606:	2300      	movs	r3, #0
 8006608:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006616:	461a      	mov	r2, r3
 8006618:	2300      	movs	r3, #0
 800661a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006628:	461a      	mov	r2, r3
 800662a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800662e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	3301      	adds	r3, #1
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	d3b7      	bcc.n	80065ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	e043      	b.n	80066cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800665a:	d118      	bne.n	800668e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666e:	461a      	mov	r2, r3
 8006670:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e013      	b.n	80066a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006684:	461a      	mov	r2, r3
 8006686:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	e008      	b.n	80066a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669a:	461a      	mov	r2, r3
 800669c:	2300      	movs	r3, #0
 800669e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ac:	461a      	mov	r2, r3
 80066ae:	2300      	movs	r3, #0
 80066b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066be:	461a      	mov	r2, r3
 80066c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	3301      	adds	r3, #1
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d3b7      	bcc.n	8006644 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f043 0210 	orr.w	r2, r3, #16
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699a      	ldr	r2, [r3, #24]
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <USB_DevInit+0x2c4>)
 800670e:	4313      	orrs	r3, r2
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f043 0208 	orr.w	r2, r3, #8
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d107      	bne.n	800673c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006734:	f043 0304 	orr.w	r3, r3, #4
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800673c:	7dfb      	ldrb	r3, [r7, #23]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006748:	b004      	add	sp, #16
 800674a:	4770      	bx	lr
 800674c:	803c3800 	.word	0x803c3800

08006750 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4a13      	ldr	r2, [pc, #76]	; (80067b4 <USB_FlushTxFifo+0x64>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d901      	bls.n	8006770 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e01b      	b.n	80067a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	daf2      	bge.n	800675e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	019b      	lsls	r3, r3, #6
 8006780:	f043 0220 	orr.w	r2, r3, #32
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3301      	adds	r3, #1
 800678c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a08      	ldr	r2, [pc, #32]	; (80067b4 <USB_FlushTxFifo+0x64>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d901      	bls.n	800679a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e006      	b.n	80067a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d0f0      	beq.n	8006788 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	00030d40 	.word	0x00030d40

080067b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4a11      	ldr	r2, [pc, #68]	; (8006814 <USB_FlushRxFifo+0x5c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d901      	bls.n	80067d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e018      	b.n	8006808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	daf2      	bge.n	80067c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2210      	movs	r2, #16
 80067e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4a08      	ldr	r2, [pc, #32]	; (8006814 <USB_FlushRxFifo+0x5c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e006      	b.n	8006808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	2b10      	cmp	r3, #16
 8006804:	d0f0      	beq.n	80067e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	00030d40 	.word	0x00030d40

08006818 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	68f9      	ldr	r1, [r7, #12]
 8006834:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006838:	4313      	orrs	r3, r2
 800683a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800684a:	b480      	push	{r7}
 800684c:	b087      	sub	sp, #28
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0306 	and.w	r3, r3, #6
 8006862:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800686a:	2300      	movs	r3, #0
 800686c:	75fb      	strb	r3, [r7, #23]
 800686e:	e00a      	b.n	8006886 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d002      	beq.n	800687c <USB_GetDevSpeed+0x32>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b06      	cmp	r3, #6
 800687a:	d102      	bne.n	8006882 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800687c:	2302      	movs	r3, #2
 800687e:	75fb      	strb	r3, [r7, #23]
 8006880:	e001      	b.n	8006886 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006882:	230f      	movs	r3, #15
 8006884:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
}
 8006888:	4618      	mov	r0, r3
 800688a:	371c      	adds	r7, #28
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d13a      	bne.n	8006926 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	2101      	movs	r1, #1
 80068c2:	fa01 f303 	lsl.w	r3, r1, r3
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	68f9      	ldr	r1, [r7, #12]
 80068ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d155      	bne.n	8006994 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	791b      	ldrb	r3, [r3, #4]
 8006902:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006904:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	059b      	lsls	r3, r3, #22
 800690a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800690c:	4313      	orrs	r3, r2
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	440a      	add	r2, r1
 8006916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	e036      	b.n	8006994 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	69da      	ldr	r2, [r3, #28]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	2101      	movs	r1, #1
 8006938:	fa01 f303 	lsl.w	r3, r1, r3
 800693c:	041b      	lsls	r3, r3, #16
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006944:	4313      	orrs	r3, r2
 8006946:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d11a      	bne.n	8006994 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	791b      	ldrb	r3, [r3, #4]
 8006978:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800697a:	430b      	orrs	r3, r1
 800697c:	4313      	orrs	r3, r2
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800698a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800698e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006992:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d161      	bne.n	8006a84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d6:	d11f      	bne.n	8006a18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	f003 030f 	and.w	r3, r3, #15
 8006a28:	2101      	movs	r1, #1
 8006a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	43db      	mvns	r3, r3
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a38:	4013      	ands	r3, r2
 8006a3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	0159      	lsls	r1, r3, #5
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	440b      	add	r3, r1
 8006a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4b35      	ldr	r3, [pc, #212]	; (8006b54 <USB_DeactivateEndpoint+0x1b0>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	600b      	str	r3, [r1, #0]
 8006a82:	e060      	b.n	8006b46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a9a:	d11f      	bne.n	8006adc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	0151      	lsls	r1, r2, #5
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ada:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	2101      	movs	r1, #1
 8006aee:	fa01 f303 	lsl.w	r3, r1, r3
 8006af2:	041b      	lsls	r3, r3, #16
 8006af4:	43db      	mvns	r3, r3
 8006af6:	68f9      	ldr	r1, [r7, #12]
 8006af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006afc:	4013      	ands	r3, r2
 8006afe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	2101      	movs	r1, #1
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	041b      	lsls	r3, r3, #16
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b20:	4013      	ands	r3, r2
 8006b22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	0159      	lsls	r1, r3, #5
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	440b      	add	r3, r1
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <USB_DeactivateEndpoint+0x1b4>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	ec337800 	.word	0xec337800
 8006b58:	eff37800 	.word	0xeff37800

08006b5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08a      	sub	sp, #40	; 0x28
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	f040 815c 	bne.w	8006e36 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d132      	bne.n	8006bec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	0151      	lsls	r1, r2, #5
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	440a      	add	r2, r1
 8006b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ba4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ba8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	69fa      	ldr	r2, [r7, #28]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	0151      	lsls	r1, r2, #5
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	440a      	add	r2, r1
 8006be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be4:	0cdb      	lsrs	r3, r3, #19
 8006be6:	04db      	lsls	r3, r3, #19
 8006be8:	6113      	str	r3, [r2, #16]
 8006bea:	e074      	b.n	8006cd6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c06:	0cdb      	lsrs	r3, r3, #19
 8006c08:	04db      	lsls	r3, r3, #19
 8006c0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	0151      	lsls	r1, r2, #5
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	440a      	add	r2, r1
 8006c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6999      	ldr	r1, [r3, #24]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	440b      	add	r3, r1
 8006c48:	1e59      	subs	r1, r3, #1
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c52:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c54:	4b9d      	ldr	r3, [pc, #628]	; (8006ecc <USB_EPStartXfer+0x370>)
 8006c56:	400b      	ands	r3, r1
 8006c58:	69b9      	ldr	r1, [r7, #24]
 8006c5a:	0148      	lsls	r0, r1, #5
 8006c5c:	69f9      	ldr	r1, [r7, #28]
 8006c5e:	4401      	add	r1, r0
 8006c60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c64:	4313      	orrs	r3, r2
 8006c66:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c7e:	69b9      	ldr	r1, [r7, #24]
 8006c80:	0148      	lsls	r0, r1, #5
 8006c82:	69f9      	ldr	r1, [r7, #28]
 8006c84:	4401      	add	r1, r0
 8006c86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	791b      	ldrb	r3, [r3, #4]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d11f      	bne.n	8006cd6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	69fa      	ldr	r2, [r7, #28]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006cb4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d14b      	bne.n	8006d74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d009      	beq.n	8006cf8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	791b      	ldrb	r3, [r3, #4]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d128      	bne.n	8006d52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d110      	bne.n	8006d32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	e00f      	b.n	8006d52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	0151      	lsls	r1, r2, #5
 8006d44:	69fa      	ldr	r2, [r7, #28]
 8006d46:	440a      	add	r2, r1
 8006d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	e133      	b.n	8006fdc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	0151      	lsls	r1, r2, #5
 8006d86:	69fa      	ldr	r2, [r7, #28]
 8006d88:	440a      	add	r2, r1
 8006d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	791b      	ldrb	r3, [r3, #4]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d015      	beq.n	8006dc8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 811b 	beq.w	8006fdc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	2101      	movs	r1, #1
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	69f9      	ldr	r1, [r7, #28]
 8006dbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	634b      	str	r3, [r1, #52]	; 0x34
 8006dc6:	e109      	b.n	8006fdc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d110      	bne.n	8006dfa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	e00f      	b.n	8006e1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6919      	ldr	r1, [r3, #16]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	781a      	ldrb	r2, [r3, #0]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	b298      	uxth	r0, r3
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 fade 	bl	80073f0 <USB_WritePacket>
 8006e34:	e0d2      	b.n	8006fdc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	0151      	lsls	r1, r2, #5
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	440a      	add	r2, r1
 8006e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e50:	0cdb      	lsrs	r3, r3, #19
 8006e52:	04db      	lsls	r3, r3, #19
 8006e54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	0151      	lsls	r1, r2, #5
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	440a      	add	r2, r1
 8006e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d126      	bne.n	8006ed0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e98:	69b9      	ldr	r1, [r7, #24]
 8006e9a:	0148      	lsls	r0, r1, #5
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	4401      	add	r1, r0
 8006ea0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	0151      	lsls	r1, r2, #5
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	440a      	add	r2, r1
 8006ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ec6:	6113      	str	r3, [r2, #16]
 8006ec8:	e03a      	b.n	8006f40 <USB_EPStartXfer+0x3e4>
 8006eca:	bf00      	nop
 8006ecc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	699a      	ldr	r2, [r3, #24]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	1e5a      	subs	r2, r3, #1
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	8afa      	ldrh	r2, [r7, #22]
 8006eec:	fb03 f202 	mul.w	r2, r3, r2
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	8afb      	ldrh	r3, [r7, #22]
 8006f04:	04d9      	lsls	r1, r3, #19
 8006f06:	4b38      	ldr	r3, [pc, #224]	; (8006fe8 <USB_EPStartXfer+0x48c>)
 8006f08:	400b      	ands	r3, r1
 8006f0a:	69b9      	ldr	r1, [r7, #24]
 8006f0c:	0148      	lsls	r0, r1, #5
 8006f0e:	69f9      	ldr	r1, [r7, #28]
 8006f10:	4401      	add	r1, r0
 8006f12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f16:	4313      	orrs	r3, r2
 8006f18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f30:	69b9      	ldr	r1, [r7, #24]
 8006f32:	0148      	lsls	r0, r1, #5
 8006f34:	69f9      	ldr	r1, [r7, #28]
 8006f36:	4401      	add	r1, r0
 8006f38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d10d      	bne.n	8006f62 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d009      	beq.n	8006f62 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6919      	ldr	r1, [r3, #16]
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	460a      	mov	r2, r1
 8006f60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	791b      	ldrb	r3, [r3, #4]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d128      	bne.n	8006fbc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d110      	bne.n	8006f9c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	0151      	lsls	r1, r2, #5
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	440a      	add	r2, r1
 8006f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	e00f      	b.n	8006fbc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	0151      	lsls	r1, r2, #5
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	440a      	add	r2, r1
 8006fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3720      	adds	r7, #32
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	1ff80000 	.word	0x1ff80000

08006fec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b01      	cmp	r3, #1
 800700a:	f040 80ce 	bne.w	80071aa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d132      	bne.n	800707c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007030:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007034:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	440a      	add	r2, r1
 8007050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007058:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007074:	0cdb      	lsrs	r3, r3, #19
 8007076:	04db      	lsls	r3, r3, #19
 8007078:	6113      	str	r3, [r2, #16]
 800707a:	e04e      	b.n	800711a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	440a      	add	r2, r1
 8007092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007096:	0cdb      	lsrs	r3, r3, #19
 8007098:	04db      	lsls	r3, r3, #19
 800709a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	0151      	lsls	r1, r2, #5
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	440a      	add	r2, r1
 80070b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d903      	bls.n	80070d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800710a:	6939      	ldr	r1, [r7, #16]
 800710c:	0148      	lsls	r0, r1, #5
 800710e:	6979      	ldr	r1, [r7, #20]
 8007110:	4401      	add	r1, r0
 8007112:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007116:	4313      	orrs	r3, r2
 8007118:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d11e      	bne.n	800715e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d009      	beq.n	800713c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007134:	461a      	mov	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	0151      	lsls	r1, r2, #5
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	440a      	add	r2, r1
 8007152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007156:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	e097      	b.n	800728e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	0151      	lsls	r1, r2, #5
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	440a      	add	r2, r1
 8007174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007178:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800717c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8083 	beq.w	800728e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	2101      	movs	r1, #1
 800719a:	fa01 f303 	lsl.w	r3, r1, r3
 800719e:	6979      	ldr	r1, [r7, #20]
 80071a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071a4:	4313      	orrs	r3, r2
 80071a6:	634b      	str	r3, [r1, #52]	; 0x34
 80071a8:	e071      	b.n	800728e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	0151      	lsls	r1, r2, #5
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	440a      	add	r2, r1
 80071c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c4:	0cdb      	lsrs	r3, r3, #19
 80071c6:	04db      	lsls	r3, r3, #19
 80071c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	0151      	lsls	r1, r2, #5
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	440a      	add	r2, r1
 80071e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	440a      	add	r2, r1
 800721c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800723c:	6939      	ldr	r1, [r7, #16]
 800723e:	0148      	lsls	r0, r1, #5
 8007240:	6979      	ldr	r1, [r7, #20]
 8007242:	4401      	add	r1, r0
 8007244:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007248:	4313      	orrs	r3, r2
 800724a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d10d      	bne.n	800726e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	6919      	ldr	r1, [r3, #16]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800726a:	460a      	mov	r2, r1
 800726c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	440a      	add	r2, r1
 8007284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007288:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800728c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d14a      	bne.n	8007350 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d2:	f040 8086 	bne.w	80073e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	7812      	ldrb	r2, [r2, #0]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	0151      	lsls	r1, r2, #5
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	440a      	add	r2, r1
 8007314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800731c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3301      	adds	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f242 7210 	movw	r2, #10000	; 0x2710
 800732a:	4293      	cmp	r3, r2
 800732c:	d902      	bls.n	8007334 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]
          break;
 8007332:	e056      	b.n	80073e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800734c:	d0e7      	beq.n	800731e <USB_EPStopXfer+0x82>
 800734e:	e048      	b.n	80073e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007368:	d13b      	bne.n	80073e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	0151      	lsls	r1, r2, #5
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	440a      	add	r2, r1
 8007384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007388:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800738c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	7812      	ldrb	r2, [r2, #0]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80073be:	4293      	cmp	r3, r2
 80073c0:	d902      	bls.n	80073c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	75fb      	strb	r3, [r7, #23]
          break;
 80073c6:	e00c      	b.n	80073e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073e0:	d0e7      	beq.n	80073b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b089      	sub	sp, #36	; 0x24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4611      	mov	r1, r2
 80073fc:	461a      	mov	r2, r3
 80073fe:	460b      	mov	r3, r1
 8007400:	71fb      	strb	r3, [r7, #7]
 8007402:	4613      	mov	r3, r2
 8007404:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800740e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007412:	2b00      	cmp	r3, #0
 8007414:	d123      	bne.n	800745e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007416:	88bb      	ldrh	r3, [r7, #4]
 8007418:	3303      	adds	r3, #3
 800741a:	089b      	lsrs	r3, r3, #2
 800741c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800741e:	2300      	movs	r3, #0
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	e018      	b.n	8007456 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	031a      	lsls	r2, r3, #12
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	4413      	add	r3, r2
 800742c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007430:	461a      	mov	r2, r3
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	3301      	adds	r3, #1
 800743c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	3301      	adds	r3, #1
 8007442:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	3301      	adds	r3, #1
 8007448:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	3301      	adds	r3, #1
 800744e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	3301      	adds	r3, #1
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	429a      	cmp	r2, r3
 800745c:	d3e2      	bcc.n	8007424 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3724      	adds	r7, #36	; 0x24
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800746c:	b480      	push	{r7}
 800746e:	b08b      	sub	sp, #44	; 0x2c
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	089b      	lsrs	r3, r3, #2
 8007486:	b29b      	uxth	r3, r3
 8007488:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800748a:	88fb      	ldrh	r3, [r7, #6]
 800748c:	f003 0303 	and.w	r3, r3, #3
 8007490:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007492:	2300      	movs	r3, #0
 8007494:	623b      	str	r3, [r7, #32]
 8007496:	e014      	b.n	80074c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	3301      	adds	r3, #1
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	3301      	adds	r3, #1
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	3301      	adds	r3, #1
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	3301      	adds	r3, #1
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	3301      	adds	r3, #1
 80074c0:	623b      	str	r3, [r7, #32]
 80074c2:	6a3a      	ldr	r2, [r7, #32]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d3e6      	bcc.n	8007498 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80074ca:	8bfb      	ldrh	r3, [r7, #30]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01e      	beq.n	800750e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074da:	461a      	mov	r2, r3
 80074dc:	f107 0310 	add.w	r3, r7, #16
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	701a      	strb	r2, [r3, #0]
      i++;
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	3301      	adds	r3, #1
 80074fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	3301      	adds	r3, #1
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007502:	8bfb      	ldrh	r3, [r7, #30]
 8007504:	3b01      	subs	r3, #1
 8007506:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007508:	8bfb      	ldrh	r3, [r7, #30]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1ea      	bne.n	80074e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007510:	4618      	mov	r0, r3
 8007512:	372c      	adds	r7, #44	; 0x2c
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d12c      	bne.n	8007592 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	db12      	blt.n	8007570 <USB_EPSetStall+0x54>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00f      	beq.n	8007570 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	440a      	add	r2, r1
 8007566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800756a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800756e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	0151      	lsls	r1, r2, #5
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	440a      	add	r2, r1
 8007586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800758a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	e02b      	b.n	80075ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	db12      	blt.n	80075ca <USB_EPSetStall+0xae>
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00f      	beq.n	80075ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	0151      	lsls	r1, r2, #5
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	440a      	add	r2, r1
 80075e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d128      	bne.n	8007666 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	0151      	lsls	r1, r2, #5
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	440a      	add	r2, r1
 800762a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007632:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	791b      	ldrb	r3, [r3, #4]
 8007638:	2b03      	cmp	r3, #3
 800763a:	d003      	beq.n	8007644 <USB_EPClearStall+0x4c>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	791b      	ldrb	r3, [r3, #4]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d138      	bne.n	80076b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	440a      	add	r2, r1
 800765a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	e027      	b.n	80076b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	0151      	lsls	r1, r2, #5
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	440a      	add	r2, r1
 800767c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007680:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007684:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	791b      	ldrb	r3, [r3, #4]
 800768a:	2b03      	cmp	r3, #3
 800768c:	d003      	beq.n	8007696 <USB_EPClearStall+0x9e>
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	791b      	ldrb	r3, [r3, #4]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d10f      	bne.n	80076b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80076e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80076f8:	68f9      	ldr	r1, [r7, #12]
 80076fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076fe:	4313      	orrs	r3, r2
 8007700:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800773e:	f023 0302 	bic.w	r3, r3, #2
 8007742:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800776c:	f023 0303 	bic.w	r3, r3, #3
 8007770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007780:	f043 0302 	orr.w	r3, r3, #2
 8007784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4013      	ands	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077ac:	68fb      	ldr	r3, [r7, #12]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b085      	sub	sp, #20
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	4013      	ands	r3, r2
 80077dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	0c1b      	lsrs	r3, r3, #16
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b085      	sub	sp, #20
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	4013      	ands	r3, r2
 8007810:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	b29b      	uxth	r3, r3
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007822:	b480      	push	{r7}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	4013      	ands	r3, r2
 800784e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007850:	68bb      	ldr	r3, [r7, #8]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800785e:	b480      	push	{r7}
 8007860:	b087      	sub	sp, #28
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007880:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	f003 030f 	and.w	r3, r3, #15
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	fa22 f303 	lsr.w	r3, r2, r3
 800788e:	01db      	lsls	r3, r3, #7
 8007890:	b2db      	uxtb	r3, r3
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4013      	ands	r3, r2
 80078aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078ac:	68bb      	ldr	r3, [r7, #8]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	371c      	adds	r7, #28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	f003 0301 	and.w	r3, r3, #1
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078f4:	f023 0307 	bic.w	r3, r3, #7
 80078f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800790c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	460b      	mov	r3, r1
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	333c      	adds	r3, #60	; 0x3c
 8007932:	3304      	adds	r3, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	4a26      	ldr	r2, [pc, #152]	; (80079d4 <USB_EP0_OutStart+0xb8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d90a      	bls.n	8007956 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800794c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007950:	d101      	bne.n	8007956 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	e037      	b.n	80079c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795c:	461a      	mov	r2, r3
 800795e:	2300      	movs	r3, #0
 8007960:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007984:	f043 0318 	orr.w	r3, r3, #24
 8007988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007998:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800799c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800799e:	7afb      	ldrb	r3, [r7, #11]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d10f      	bne.n	80079c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079aa:	461a      	mov	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80079c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	4f54300a 	.word	0x4f54300a

080079d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3301      	adds	r3, #1
 80079e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4a13      	ldr	r2, [pc, #76]	; (8007a3c <USB_CoreReset+0x64>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d901      	bls.n	80079f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e01b      	b.n	8007a2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	daf2      	bge.n	80079e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f043 0201 	orr.w	r2, r3, #1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3301      	adds	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4a09      	ldr	r2, [pc, #36]	; (8007a3c <USB_CoreReset+0x64>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d901      	bls.n	8007a20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e006      	b.n	8007a2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d0f0      	beq.n	8007a0e <USB_CoreReset+0x36>

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	00030d40 	.word	0x00030d40

08007a40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a50:	f002 fca6 	bl	800a3a0 <USBD_static_malloc>
 8007a54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	32b0      	adds	r2, #176	; 0xb0
 8007a66:	2100      	movs	r1, #0
 8007a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e0d4      	b.n	8007c1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007a70:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007a74:	2100      	movs	r1, #0
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f002 fd22 	bl	800a4c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32b0      	adds	r2, #176	; 0xb0
 8007a86:	68f9      	ldr	r1, [r7, #12]
 8007a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	32b0      	adds	r2, #176	; 0xb0
 8007a96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7c1b      	ldrb	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d138      	bne.n	8007b1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007aa8:	4b5e      	ldr	r3, [pc, #376]	; (8007c24 <USBD_CDC_Init+0x1e4>)
 8007aaa:	7819      	ldrb	r1, [r3, #0]
 8007aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f002 fb51 	bl	800a15a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ab8:	4b5a      	ldr	r3, [pc, #360]	; (8007c24 <USBD_CDC_Init+0x1e4>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	f003 020f 	and.w	r2, r3, #15
 8007ac0:	6879      	ldr	r1, [r7, #4]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	440b      	add	r3, r1
 8007acc:	3324      	adds	r3, #36	; 0x24
 8007ace:	2201      	movs	r2, #1
 8007ad0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ad2:	4b55      	ldr	r3, [pc, #340]	; (8007c28 <USBD_CDC_Init+0x1e8>)
 8007ad4:	7819      	ldrb	r1, [r3, #0]
 8007ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ada:	2202      	movs	r2, #2
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f002 fb3c 	bl	800a15a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ae2:	4b51      	ldr	r3, [pc, #324]	; (8007c28 <USBD_CDC_Init+0x1e8>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	f003 020f 	and.w	r2, r3, #15
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007afa:	2201      	movs	r2, #1
 8007afc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007afe:	4b4b      	ldr	r3, [pc, #300]	; (8007c2c <USBD_CDC_Init+0x1ec>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	f003 020f 	and.w	r2, r3, #15
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	3326      	adds	r3, #38	; 0x26
 8007b14:	2210      	movs	r2, #16
 8007b16:	801a      	strh	r2, [r3, #0]
 8007b18:	e035      	b.n	8007b86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b1a:	4b42      	ldr	r3, [pc, #264]	; (8007c24 <USBD_CDC_Init+0x1e4>)
 8007b1c:	7819      	ldrb	r1, [r3, #0]
 8007b1e:	2340      	movs	r3, #64	; 0x40
 8007b20:	2202      	movs	r2, #2
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f002 fb19 	bl	800a15a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b28:	4b3e      	ldr	r3, [pc, #248]	; (8007c24 <USBD_CDC_Init+0x1e4>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	f003 020f 	and.w	r2, r3, #15
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	3324      	adds	r3, #36	; 0x24
 8007b3e:	2201      	movs	r2, #1
 8007b40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b42:	4b39      	ldr	r3, [pc, #228]	; (8007c28 <USBD_CDC_Init+0x1e8>)
 8007b44:	7819      	ldrb	r1, [r3, #0]
 8007b46:	2340      	movs	r3, #64	; 0x40
 8007b48:	2202      	movs	r2, #2
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f002 fb05 	bl	800a15a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b50:	4b35      	ldr	r3, [pc, #212]	; (8007c28 <USBD_CDC_Init+0x1e8>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f003 020f 	and.w	r2, r3, #15
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b68:	2201      	movs	r2, #1
 8007b6a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b6c:	4b2f      	ldr	r3, [pc, #188]	; (8007c2c <USBD_CDC_Init+0x1ec>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f003 020f 	and.w	r2, r3, #15
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	3326      	adds	r3, #38	; 0x26
 8007b82:	2210      	movs	r2, #16
 8007b84:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b86:	4b29      	ldr	r3, [pc, #164]	; (8007c2c <USBD_CDC_Init+0x1ec>)
 8007b88:	7819      	ldrb	r1, [r3, #0]
 8007b8a:	2308      	movs	r3, #8
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f002 fae3 	bl	800a15a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b94:	4b25      	ldr	r3, [pc, #148]	; (8007c2c <USBD_CDC_Init+0x1ec>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	f003 020f 	and.w	r2, r3, #15
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	440b      	add	r3, r1
 8007ba8:	3324      	adds	r3, #36	; 0x24
 8007baa:	2201      	movs	r2, #1
 8007bac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	33b0      	adds	r3, #176	; 0xb0
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007be4:	2302      	movs	r3, #2
 8007be6:	e018      	b.n	8007c1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	7c1b      	ldrb	r3, [r3, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10a      	bne.n	8007c06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bf0:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <USBD_CDC_Init+0x1e8>)
 8007bf2:	7819      	ldrb	r1, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f002 fb9a 	bl	800a338 <USBD_LL_PrepareReceive>
 8007c04:	e008      	b.n	8007c18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c06:	4b08      	ldr	r3, [pc, #32]	; (8007c28 <USBD_CDC_Init+0x1e8>)
 8007c08:	7819      	ldrb	r1, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c10:	2340      	movs	r3, #64	; 0x40
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f002 fb90 	bl	800a338 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000093 	.word	0x20000093
 8007c28:	20000094 	.word	0x20000094
 8007c2c:	20000095 	.word	0x20000095

08007c30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c3c:	4b3a      	ldr	r3, [pc, #232]	; (8007d28 <USBD_CDC_DeInit+0xf8>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f002 faaf 	bl	800a1a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c48:	4b37      	ldr	r3, [pc, #220]	; (8007d28 <USBD_CDC_DeInit+0xf8>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	f003 020f 	and.w	r2, r3, #15
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	3324      	adds	r3, #36	; 0x24
 8007c5e:	2200      	movs	r2, #0
 8007c60:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c62:	4b32      	ldr	r3, [pc, #200]	; (8007d2c <USBD_CDC_DeInit+0xfc>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f002 fa9c 	bl	800a1a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c6e:	4b2f      	ldr	r3, [pc, #188]	; (8007d2c <USBD_CDC_DeInit+0xfc>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	f003 020f 	and.w	r2, r3, #15
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c86:	2200      	movs	r2, #0
 8007c88:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c8a:	4b29      	ldr	r3, [pc, #164]	; (8007d30 <USBD_CDC_DeInit+0x100>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f002 fa88 	bl	800a1a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c96:	4b26      	ldr	r3, [pc, #152]	; (8007d30 <USBD_CDC_DeInit+0x100>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	f003 020f 	and.w	r2, r3, #15
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	440b      	add	r3, r1
 8007caa:	3324      	adds	r3, #36	; 0x24
 8007cac:	2200      	movs	r2, #0
 8007cae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007cb0:	4b1f      	ldr	r3, [pc, #124]	; (8007d30 <USBD_CDC_DeInit+0x100>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	f003 020f 	and.w	r2, r3, #15
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	3326      	adds	r3, #38	; 0x26
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	32b0      	adds	r2, #176	; 0xb0
 8007cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01f      	beq.n	8007d1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	33b0      	adds	r3, #176	; 0xb0
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	32b0      	adds	r2, #176	; 0xb0
 8007cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f002 fb5c 	bl	800a3bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	32b0      	adds	r2, #176	; 0xb0
 8007d0e:	2100      	movs	r1, #0
 8007d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000093 	.word	0x20000093
 8007d2c:	20000094 	.word	0x20000094
 8007d30:	20000095 	.word	0x20000095

08007d34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	32b0      	adds	r2, #176	; 0xb0
 8007d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e0bf      	b.n	8007ee4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d050      	beq.n	8007e12 <USBD_CDC_Setup+0xde>
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	f040 80af 	bne.w	8007ed4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	88db      	ldrh	r3, [r3, #6]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d03a      	beq.n	8007df4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	b25b      	sxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	da1b      	bge.n	8007dc0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	33b0      	adds	r3, #176	; 0xb0
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	88d2      	ldrh	r2, [r2, #6]
 8007da4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88db      	ldrh	r3, [r3, #6]
 8007daa:	2b07      	cmp	r3, #7
 8007dac:	bf28      	it	cs
 8007dae:	2307      	movcs	r3, #7
 8007db0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	89fa      	ldrh	r2, [r7, #14]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 fd89 	bl	80098d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007dbe:	e090      	b.n	8007ee2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	785a      	ldrb	r2, [r3, #1]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	88db      	ldrh	r3, [r3, #6]
 8007dce:	2b3f      	cmp	r3, #63	; 0x3f
 8007dd0:	d803      	bhi.n	8007dda <USBD_CDC_Setup+0xa6>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	e000      	b.n	8007ddc <USBD_CDC_Setup+0xa8>
 8007dda:	2240      	movs	r2, #64	; 0x40
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007de2:	6939      	ldr	r1, [r7, #16]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007dea:	461a      	mov	r2, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 fd9b 	bl	8009928 <USBD_CtlPrepareRx>
      break;
 8007df2:	e076      	b.n	8007ee2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	33b0      	adds	r3, #176	; 0xb0
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	7850      	ldrb	r0, [r2, #1]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	4798      	blx	r3
      break;
 8007e10:	e067      	b.n	8007ee2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	2b0b      	cmp	r3, #11
 8007e18:	d851      	bhi.n	8007ebe <USBD_CDC_Setup+0x18a>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <USBD_CDC_Setup+0xec>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e51 	.word	0x08007e51
 8007e24:	08007ecd 	.word	0x08007ecd
 8007e28:	08007ebf 	.word	0x08007ebf
 8007e2c:	08007ebf 	.word	0x08007ebf
 8007e30:	08007ebf 	.word	0x08007ebf
 8007e34:	08007ebf 	.word	0x08007ebf
 8007e38:	08007ebf 	.word	0x08007ebf
 8007e3c:	08007ebf 	.word	0x08007ebf
 8007e40:	08007ebf 	.word	0x08007ebf
 8007e44:	08007ebf 	.word	0x08007ebf
 8007e48:	08007e7b 	.word	0x08007e7b
 8007e4c:	08007ea5 	.word	0x08007ea5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d107      	bne.n	8007e6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e5c:	f107 030a 	add.w	r3, r7, #10
 8007e60:	2202      	movs	r2, #2
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 fd33 	bl	80098d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e6a:	e032      	b.n	8007ed2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fcbd 	bl	80097ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	75fb      	strb	r3, [r7, #23]
          break;
 8007e78:	e02b      	b.n	8007ed2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d107      	bne.n	8007e96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e86:	f107 030d 	add.w	r3, r7, #13
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f001 fd1e 	bl	80098d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e94:	e01d      	b.n	8007ed2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fca8 	bl	80097ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea2:	e016      	b.n	8007ed2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d00f      	beq.n	8007ed0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 fc9b 	bl	80097ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ebc:	e008      	b.n	8007ed0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 fc94 	bl	80097ee <USBD_CtlError>
          ret = USBD_FAIL;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8007eca:	e002      	b.n	8007ed2 <USBD_CDC_Setup+0x19e>
          break;
 8007ecc:	bf00      	nop
 8007ece:	e008      	b.n	8007ee2 <USBD_CDC_Setup+0x1ae>
          break;
 8007ed0:	bf00      	nop
      }
      break;
 8007ed2:	e006      	b.n	8007ee2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 fc89 	bl	80097ee <USBD_CtlError>
      ret = USBD_FAIL;
 8007edc:	2303      	movs	r3, #3
 8007ede:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007efe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	32b0      	adds	r2, #176	; 0xb0
 8007f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e065      	b.n	8007fe2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	32b0      	adds	r2, #176	; 0xb0
 8007f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	f003 020f 	and.w	r2, r3, #15
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	440b      	add	r3, r1
 8007f38:	3318      	adds	r3, #24
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d02f      	beq.n	8007fa0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f40:	78fb      	ldrb	r3, [r7, #3]
 8007f42:	f003 020f 	and.w	r2, r3, #15
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	440b      	add	r3, r1
 8007f52:	3318      	adds	r3, #24
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	f003 010f 	and.w	r1, r3, #15
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	440b      	add	r3, r1
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4403      	add	r3, r0
 8007f68:	3348      	adds	r3, #72	; 0x48
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f70:	fb01 f303 	mul.w	r3, r1, r3
 8007f74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d112      	bne.n	8007fa0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	f003 020f 	and.w	r2, r3, #15
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	440b      	add	r3, r1
 8007f8c:	3318      	adds	r3, #24
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f92:	78f9      	ldrb	r1, [r7, #3]
 8007f94:	2300      	movs	r3, #0
 8007f96:	2200      	movs	r2, #0
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f002 f9ac 	bl	800a2f6 <USBD_LL_Transmit>
 8007f9e:	e01f      	b.n	8007fe0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	33b0      	adds	r3, #176	; 0xb0
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d010      	beq.n	8007fe0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	33b0      	adds	r3, #176	; 0xb0
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007fdc:	78fa      	ldrb	r2, [r7, #3]
 8007fde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	32b0      	adds	r2, #176	; 0xb0
 8008000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008004:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	32b0      	adds	r2, #176	; 0xb0
 8008010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008018:	2303      	movs	r3, #3
 800801a:	e01a      	b.n	8008052 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f002 f9aa 	bl	800a37a <USBD_LL_GetRxDataSize>
 8008026:	4602      	mov	r2, r0
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	33b0      	adds	r3, #176	; 0xb0
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800804c:	4611      	mov	r1, r2
 800804e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	32b0      	adds	r2, #176	; 0xb0
 800806c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008070:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008078:	2303      	movs	r3, #3
 800807a:	e025      	b.n	80080c8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	33b0      	adds	r3, #176	; 0xb0
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01a      	beq.n	80080c6 <USBD_CDC_EP0_RxReady+0x6c>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008096:	2bff      	cmp	r3, #255	; 0xff
 8008098:	d015      	beq.n	80080c6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	33b0      	adds	r3, #176	; 0xb0
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80080b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080ba:	b292      	uxth	r2, r2
 80080bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	22ff      	movs	r2, #255	; 0xff
 80080c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080d8:	2182      	movs	r1, #130	; 0x82
 80080da:	4818      	ldr	r0, [pc, #96]	; (800813c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080dc:	f000 fd4f 	bl	8008b7e <USBD_GetEpDesc>
 80080e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080e2:	2101      	movs	r1, #1
 80080e4:	4815      	ldr	r0, [pc, #84]	; (800813c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080e6:	f000 fd4a 	bl	8008b7e <USBD_GetEpDesc>
 80080ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080ec:	2181      	movs	r1, #129	; 0x81
 80080ee:	4813      	ldr	r0, [pc, #76]	; (800813c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080f0:	f000 fd45 	bl	8008b7e <USBD_GetEpDesc>
 80080f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2210      	movs	r2, #16
 8008100:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d006      	beq.n	8008116 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	2200      	movs	r2, #0
 800810c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008110:	711a      	strb	r2, [r3, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d006      	beq.n	800812a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008124:	711a      	strb	r2, [r3, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2243      	movs	r2, #67	; 0x43
 800812e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008130:	4b02      	ldr	r3, [pc, #8]	; (800813c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000050 	.word	0x20000050

08008140 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008148:	2182      	movs	r1, #130	; 0x82
 800814a:	4818      	ldr	r0, [pc, #96]	; (80081ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800814c:	f000 fd17 	bl	8008b7e <USBD_GetEpDesc>
 8008150:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008152:	2101      	movs	r1, #1
 8008154:	4815      	ldr	r0, [pc, #84]	; (80081ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008156:	f000 fd12 	bl	8008b7e <USBD_GetEpDesc>
 800815a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800815c:	2181      	movs	r1, #129	; 0x81
 800815e:	4813      	ldr	r0, [pc, #76]	; (80081ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008160:	f000 fd0d 	bl	8008b7e <USBD_GetEpDesc>
 8008164:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2210      	movs	r2, #16
 8008170:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d006      	beq.n	8008186 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	2200      	movs	r2, #0
 800817c:	711a      	strb	r2, [r3, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f042 0202 	orr.w	r2, r2, #2
 8008184:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	711a      	strb	r2, [r3, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f042 0202 	orr.w	r2, r2, #2
 8008198:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2243      	movs	r2, #67	; 0x43
 800819e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081a0:	4b02      	ldr	r3, [pc, #8]	; (80081ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000050 	.word	0x20000050

080081b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081b8:	2182      	movs	r1, #130	; 0x82
 80081ba:	4818      	ldr	r0, [pc, #96]	; (800821c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081bc:	f000 fcdf 	bl	8008b7e <USBD_GetEpDesc>
 80081c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081c2:	2101      	movs	r1, #1
 80081c4:	4815      	ldr	r0, [pc, #84]	; (800821c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081c6:	f000 fcda 	bl	8008b7e <USBD_GetEpDesc>
 80081ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081cc:	2181      	movs	r1, #129	; 0x81
 80081ce:	4813      	ldr	r0, [pc, #76]	; (800821c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081d0:	f000 fcd5 	bl	8008b7e <USBD_GetEpDesc>
 80081d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	2210      	movs	r2, #16
 80081e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d006      	beq.n	80081f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081f0:	711a      	strb	r2, [r3, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d006      	beq.n	800820a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008204:	711a      	strb	r2, [r3, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2243      	movs	r2, #67	; 0x43
 800820e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008210:	4b02      	ldr	r3, [pc, #8]	; (800821c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000050 	.word	0x20000050

08008220 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	220a      	movs	r2, #10
 800822c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800822e:	4b03      	ldr	r3, [pc, #12]	; (800823c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	2000000c 	.word	0x2000000c

08008240 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008250:	2303      	movs	r3, #3
 8008252:	e009      	b.n	8008268 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	33b0      	adds	r3, #176	; 0xb0
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	32b0      	adds	r2, #176	; 0xb0
 800828a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008296:	2303      	movs	r3, #3
 8008298:	e008      	b.n	80082ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	32b0      	adds	r2, #176	; 0xb0
 80082cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80082d8:	2303      	movs	r3, #3
 80082da:	e004      	b.n	80082e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
	...

080082f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	32b0      	adds	r2, #176	; 0xb0
 8008306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	32b0      	adds	r2, #176	; 0xb0
 800831a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008322:	2303      	movs	r3, #3
 8008324:	e025      	b.n	8008372 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800832c:	2b00      	cmp	r3, #0
 800832e:	d11f      	bne.n	8008370 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2201      	movs	r2, #1
 8008334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008338:	4b10      	ldr	r3, [pc, #64]	; (800837c <USBD_CDC_TransmitPacket+0x88>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	f003 020f 	and.w	r2, r3, #15
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4403      	add	r3, r0
 8008352:	3318      	adds	r3, #24
 8008354:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008356:	4b09      	ldr	r3, [pc, #36]	; (800837c <USBD_CDC_TransmitPacket+0x88>)
 8008358:	7819      	ldrb	r1, [r3, #0]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 ffc5 	bl	800a2f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000093 	.word	0x20000093

08008380 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	32b0      	adds	r2, #176	; 0xb0
 8008392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008396:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	32b0      	adds	r2, #176	; 0xb0
 80083a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e018      	b.n	80083e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7c1b      	ldrb	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083b6:	4b0c      	ldr	r3, [pc, #48]	; (80083e8 <USBD_CDC_ReceivePacket+0x68>)
 80083b8:	7819      	ldrb	r1, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 ffb7 	bl	800a338 <USBD_LL_PrepareReceive>
 80083ca:	e008      	b.n	80083de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083cc:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <USBD_CDC_ReceivePacket+0x68>)
 80083ce:	7819      	ldrb	r1, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083d6:	2340      	movs	r3, #64	; 0x40
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 ffad 	bl	800a338 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20000094 	.word	0x20000094

080083ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	4613      	mov	r3, r2
 80083f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008400:	2303      	movs	r3, #3
 8008402:	e01f      	b.n	8008444 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d003      	beq.n	800842a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	79fa      	ldrb	r2, [r7, #7]
 8008436:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f001 fe27 	bl	800a08c <USBD_LL_Init>
 800843e:	4603      	mov	r3, r0
 8008440:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008442:	7dfb      	ldrb	r3, [r7, #23]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008460:	2303      	movs	r3, #3
 8008462:	e025      	b.n	80084b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	32ae      	adds	r2, #174	; 0xae
 8008476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00f      	beq.n	80084a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	32ae      	adds	r2, #174	; 0xae
 800848a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	f107 020e 	add.w	r2, r7, #14
 8008494:	4610      	mov	r0, r2
 8008496:	4798      	blx	r3
 8008498:	4602      	mov	r2, r0
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 fe2f 	bl	800a124 <USBD_LL_Start>
 80084c6:	4603      	mov	r3, r0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	4611      	mov	r1, r2
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	4798      	blx	r3
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	4611      	mov	r1, r2
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008544:	2303      	movs	r3, #3
 8008546:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008548:	7bfb      	ldrb	r3, [r7, #15]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f001 f908 	bl	800977a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008578:	461a      	mov	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008586:	f003 031f 	and.w	r3, r3, #31
 800858a:	2b02      	cmp	r3, #2
 800858c:	d01a      	beq.n	80085c4 <USBD_LL_SetupStage+0x72>
 800858e:	2b02      	cmp	r3, #2
 8008590:	d822      	bhi.n	80085d8 <USBD_LL_SetupStage+0x86>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <USBD_LL_SetupStage+0x4a>
 8008596:	2b01      	cmp	r3, #1
 8008598:	d00a      	beq.n	80085b0 <USBD_LL_SetupStage+0x5e>
 800859a:	e01d      	b.n	80085d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fb5f 	bl	8008c68 <USBD_StdDevReq>
 80085aa:	4603      	mov	r3, r0
 80085ac:	73fb      	strb	r3, [r7, #15]
      break;
 80085ae:	e020      	b.n	80085f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fbc7 	bl	8008d4c <USBD_StdItfReq>
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]
      break;
 80085c2:	e016      	b.n	80085f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fc29 	bl	8008e24 <USBD_StdEPReq>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73fb      	strb	r3, [r7, #15]
      break;
 80085d6:	e00c      	b.n	80085f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 fdfc 	bl	800a1e4 <USBD_LL_StallEP>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]
      break;
 80085f0:	bf00      	nop
  }

  return ret;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	460b      	mov	r3, r1
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800860e:	7afb      	ldrb	r3, [r7, #11]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d16e      	bne.n	80086f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800861a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008622:	2b03      	cmp	r3, #3
 8008624:	f040 8098 	bne.w	8008758 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	429a      	cmp	r2, r3
 8008632:	d913      	bls.n	800865c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	1ad2      	subs	r2, r2, r3
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	68da      	ldr	r2, [r3, #12]
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	4293      	cmp	r3, r2
 800864c:	bf28      	it	cs
 800864e:	4613      	movcs	r3, r2
 8008650:	461a      	mov	r2, r3
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f001 f984 	bl	8009962 <USBD_CtlContinueRx>
 800865a:	e07d      	b.n	8008758 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008662:	f003 031f 	and.w	r3, r3, #31
 8008666:	2b02      	cmp	r3, #2
 8008668:	d014      	beq.n	8008694 <USBD_LL_DataOutStage+0x98>
 800866a:	2b02      	cmp	r3, #2
 800866c:	d81d      	bhi.n	80086aa <USBD_LL_DataOutStage+0xae>
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <USBD_LL_DataOutStage+0x7c>
 8008672:	2b01      	cmp	r3, #1
 8008674:	d003      	beq.n	800867e <USBD_LL_DataOutStage+0x82>
 8008676:	e018      	b.n	80086aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	75bb      	strb	r3, [r7, #22]
            break;
 800867c:	e018      	b.n	80086b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008684:	b2db      	uxtb	r3, r3
 8008686:	4619      	mov	r1, r3
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fa5e 	bl	8008b4a <USBD_CoreFindIF>
 800868e:	4603      	mov	r3, r0
 8008690:	75bb      	strb	r3, [r7, #22]
            break;
 8008692:	e00d      	b.n	80086b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800869a:	b2db      	uxtb	r3, r3
 800869c:	4619      	mov	r1, r3
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 fa60 	bl	8008b64 <USBD_CoreFindEP>
 80086a4:	4603      	mov	r3, r0
 80086a6:	75bb      	strb	r3, [r7, #22]
            break;
 80086a8:	e002      	b.n	80086b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	75bb      	strb	r3, [r7, #22]
            break;
 80086ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80086b0:	7dbb      	ldrb	r3, [r7, #22]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d119      	bne.n	80086ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d113      	bne.n	80086ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80086c2:	7dba      	ldrb	r2, [r7, #22]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	32ae      	adds	r2, #174	; 0xae
 80086c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00b      	beq.n	80086ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80086d2:	7dba      	ldrb	r2, [r7, #22]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80086da:	7dba      	ldrb	r2, [r7, #22]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	32ae      	adds	r2, #174	; 0xae
 80086e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f001 f94a 	bl	8009984 <USBD_CtlSendStatus>
 80086f0:	e032      	b.n	8008758 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	4619      	mov	r1, r3
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fa31 	bl	8008b64 <USBD_CoreFindEP>
 8008702:	4603      	mov	r3, r0
 8008704:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008706:	7dbb      	ldrb	r3, [r7, #22]
 8008708:	2bff      	cmp	r3, #255	; 0xff
 800870a:	d025      	beq.n	8008758 <USBD_LL_DataOutStage+0x15c>
 800870c:	7dbb      	ldrb	r3, [r7, #22]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d122      	bne.n	8008758 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b03      	cmp	r3, #3
 800871c:	d117      	bne.n	800874e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800871e:	7dba      	ldrb	r2, [r7, #22]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	32ae      	adds	r2, #174	; 0xae
 8008724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00f      	beq.n	800874e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800872e:	7dba      	ldrb	r2, [r7, #22]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008736:	7dba      	ldrb	r2, [r7, #22]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	32ae      	adds	r2, #174	; 0xae
 800873c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	7afa      	ldrb	r2, [r7, #11]
 8008744:	4611      	mov	r1, r2
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	4798      	blx	r3
 800874a:	4603      	mov	r3, r0
 800874c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	e000      	b.n	800875a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	460b      	mov	r3, r1
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d16f      	bne.n	8008856 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3314      	adds	r3, #20
 800877a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008782:	2b02      	cmp	r3, #2
 8008784:	d15a      	bne.n	800883c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	429a      	cmp	r2, r3
 8008790:	d914      	bls.n	80087bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	689a      	ldr	r2, [r3, #8]
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	1ad2      	subs	r2, r2, r3
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f001 f8ac 	bl	8009906 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087ae:	2300      	movs	r3, #0
 80087b0:	2200      	movs	r2, #0
 80087b2:	2100      	movs	r1, #0
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f001 fdbf 	bl	800a338 <USBD_LL_PrepareReceive>
 80087ba:	e03f      	b.n	800883c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d11c      	bne.n	8008802 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d316      	bcc.n	8008802 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087de:	429a      	cmp	r2, r3
 80087e0:	d20f      	bcs.n	8008802 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087e2:	2200      	movs	r2, #0
 80087e4:	2100      	movs	r1, #0
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f001 f88d 	bl	8009906 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087f4:	2300      	movs	r3, #0
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f001 fd9c 	bl	800a338 <USBD_LL_PrepareReceive>
 8008800:	e01c      	b.n	800883c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b03      	cmp	r3, #3
 800880c:	d10f      	bne.n	800882e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800882e:	2180      	movs	r1, #128	; 0x80
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f001 fcd7 	bl	800a1e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f001 f8b7 	bl	80099aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d03a      	beq.n	80088bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7ff fe42 	bl	80084d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008854:	e032      	b.n	80088bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008856:	7afb      	ldrb	r3, [r7, #11]
 8008858:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800885c:	b2db      	uxtb	r3, r3
 800885e:	4619      	mov	r1, r3
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 f97f 	bl	8008b64 <USBD_CoreFindEP>
 8008866:	4603      	mov	r3, r0
 8008868:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	2bff      	cmp	r3, #255	; 0xff
 800886e:	d025      	beq.n	80088bc <USBD_LL_DataInStage+0x15a>
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d122      	bne.n	80088bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b03      	cmp	r3, #3
 8008880:	d11c      	bne.n	80088bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008882:	7dfa      	ldrb	r2, [r7, #23]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	32ae      	adds	r2, #174	; 0xae
 8008888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d014      	beq.n	80088bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008892:	7dfa      	ldrb	r2, [r7, #23]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800889a:	7dfa      	ldrb	r2, [r7, #23]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	32ae      	adds	r2, #174	; 0xae
 80088a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	7afa      	ldrb	r2, [r7, #11]
 80088a8:	4611      	mov	r1, r2
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	4798      	blx	r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80088b2:	7dbb      	ldrb	r3, [r7, #22]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80088b8:	7dbb      	ldrb	r3, [r7, #22]
 80088ba:	e000      	b.n	80088be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d014      	beq.n	800892c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00e      	beq.n	800892c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6852      	ldr	r2, [r2, #4]
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	4611      	mov	r1, r2
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	4798      	blx	r3
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008928:	2303      	movs	r3, #3
 800892a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800892c:	2340      	movs	r3, #64	; 0x40
 800892e:	2200      	movs	r2, #0
 8008930:	2100      	movs	r1, #0
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 fc11 	bl	800a15a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2240      	movs	r2, #64	; 0x40
 8008944:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008948:	2340      	movs	r3, #64	; 0x40
 800894a:	2200      	movs	r2, #0
 800894c:	2180      	movs	r1, #128	; 0x80
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 fc03 	bl	800a15a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2240      	movs	r2, #64	; 0x40
 800895e:	621a      	str	r2, [r3, #32]

  return ret;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	b2da      	uxtb	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2204      	movs	r2, #4
 80089a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d106      	bne.n	80089d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d110      	bne.n	8008a1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	32ae      	adds	r2, #174	; 0xae
 8008a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e01c      	b.n	8008a82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d115      	bne.n	8008a80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	32ae      	adds	r2, #174	; 0xae
 8008a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a62:	6a1b      	ldr	r3, [r3, #32]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	32ae      	adds	r2, #174	; 0xae
 8008a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	78fa      	ldrb	r2, [r7, #3]
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b082      	sub	sp, #8
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	460b      	mov	r3, r1
 8008a94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	32ae      	adds	r2, #174	; 0xae
 8008aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e01c      	b.n	8008ae6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d115      	bne.n	8008ae4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	32ae      	adds	r2, #174	; 0xae
 8008ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00b      	beq.n	8008ae4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	32ae      	adds	r2, #174	; 0xae
 8008ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	78fa      	ldrb	r2, [r7, #3]
 8008ade:	4611      	mov	r1, r2
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b083      	sub	sp, #12
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00e      	beq.n	8008b40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6852      	ldr	r2, [r2, #4]
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	4611      	mov	r1, r2
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	4798      	blx	r3
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d920      	bls.n	8008be8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008bae:	e013      	b.n	8008bd8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008bb0:	f107 030a 	add.w	r3, r7, #10
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6978      	ldr	r0, [r7, #20]
 8008bb8:	f000 f81b 	bl	8008bf2 <USBD_GetNextDesc>
 8008bbc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	2b05      	cmp	r3, #5
 8008bc4:	d108      	bne.n	8008bd8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	789b      	ldrb	r3, [r3, #2]
 8008bce:	78fa      	ldrb	r2, [r7, #3]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d008      	beq.n	8008be6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	885b      	ldrh	r3, [r3, #2]
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	897b      	ldrh	r3, [r7, #10]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d8e5      	bhi.n	8008bb0 <USBD_GetEpDesc+0x32>
 8008be4:	e000      	b.n	8008be8 <USBD_GetEpDesc+0x6a>
          break;
 8008be6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008be8:	693b      	ldr	r3, [r7, #16]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	881a      	ldrh	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	3301      	adds	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c4a:	8a3b      	ldrh	r3, [r7, #16]
 8008c4c:	021b      	lsls	r3, r3, #8
 8008c4e:	b21a      	sxth	r2, r3
 8008c50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	b21b      	sxth	r3, r3
 8008c58:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c5a:	89fb      	ldrh	r3, [r7, #14]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	371c      	adds	r7, #28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c7e:	2b40      	cmp	r3, #64	; 0x40
 8008c80:	d005      	beq.n	8008c8e <USBD_StdDevReq+0x26>
 8008c82:	2b40      	cmp	r3, #64	; 0x40
 8008c84:	d857      	bhi.n	8008d36 <USBD_StdDevReq+0xce>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00f      	beq.n	8008caa <USBD_StdDevReq+0x42>
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	d153      	bne.n	8008d36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	32ae      	adds	r2, #174	; 0xae
 8008c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	4798      	blx	r3
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca8:	e04a      	b.n	8008d40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	785b      	ldrb	r3, [r3, #1]
 8008cae:	2b09      	cmp	r3, #9
 8008cb0:	d83b      	bhi.n	8008d2a <USBD_StdDevReq+0xc2>
 8008cb2:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <USBD_StdDevReq+0x50>)
 8008cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb8:	08008d0d 	.word	0x08008d0d
 8008cbc:	08008d21 	.word	0x08008d21
 8008cc0:	08008d2b 	.word	0x08008d2b
 8008cc4:	08008d17 	.word	0x08008d17
 8008cc8:	08008d2b 	.word	0x08008d2b
 8008ccc:	08008ceb 	.word	0x08008ceb
 8008cd0:	08008ce1 	.word	0x08008ce1
 8008cd4:	08008d2b 	.word	0x08008d2b
 8008cd8:	08008d03 	.word	0x08008d03
 8008cdc:	08008cf5 	.word	0x08008cf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fa3c 	bl	8009160 <USBD_GetDescriptor>
          break;
 8008ce8:	e024      	b.n	8008d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fba1 	bl	8009434 <USBD_SetAddress>
          break;
 8008cf2:	e01f      	b.n	8008d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fbe0 	bl	80094bc <USBD_SetConfig>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]
          break;
 8008d00:	e018      	b.n	8008d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fc83 	bl	8009610 <USBD_GetConfig>
          break;
 8008d0a:	e013      	b.n	8008d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fcb4 	bl	800967c <USBD_GetStatus>
          break;
 8008d14:	e00e      	b.n	8008d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fce3 	bl	80096e4 <USBD_SetFeature>
          break;
 8008d1e:	e009      	b.n	8008d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fd07 	bl	8009736 <USBD_ClrFeature>
          break;
 8008d28:	e004      	b.n	8008d34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fd5e 	bl	80097ee <USBD_CtlError>
          break;
 8008d32:	bf00      	nop
      }
      break;
 8008d34:	e004      	b.n	8008d40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fd58 	bl	80097ee <USBD_CtlError>
      break;
 8008d3e:	bf00      	nop
  }

  return ret;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop

08008d4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d62:	2b40      	cmp	r3, #64	; 0x40
 8008d64:	d005      	beq.n	8008d72 <USBD_StdItfReq+0x26>
 8008d66:	2b40      	cmp	r3, #64	; 0x40
 8008d68:	d852      	bhi.n	8008e10 <USBD_StdItfReq+0xc4>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <USBD_StdItfReq+0x26>
 8008d6e:	2b20      	cmp	r3, #32
 8008d70:	d14e      	bne.n	8008e10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d840      	bhi.n	8008e02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	889b      	ldrh	r3, [r3, #4]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d836      	bhi.n	8008df8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	889b      	ldrh	r3, [r3, #4]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff fed9 	bl	8008b4a <USBD_CoreFindIF>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	2bff      	cmp	r3, #255	; 0xff
 8008da0:	d01d      	beq.n	8008dde <USBD_StdItfReq+0x92>
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d11a      	bne.n	8008dde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008da8:	7bba      	ldrb	r2, [r7, #14]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	32ae      	adds	r2, #174	; 0xae
 8008dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00f      	beq.n	8008dd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008db8:	7bba      	ldrb	r2, [r7, #14]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008dc0:	7bba      	ldrb	r2, [r7, #14]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	32ae      	adds	r2, #174	; 0xae
 8008dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	4798      	blx	r3
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008dd6:	e004      	b.n	8008de2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ddc:	e001      	b.n	8008de2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008dde:	2303      	movs	r3, #3
 8008de0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	88db      	ldrh	r3, [r3, #6]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d110      	bne.n	8008e0c <USBD_StdItfReq+0xc0>
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10d      	bne.n	8008e0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fdc7 	bl	8009984 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008df6:	e009      	b.n	8008e0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fcf7 	bl	80097ee <USBD_CtlError>
          break;
 8008e00:	e004      	b.n	8008e0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fcf2 	bl	80097ee <USBD_CtlError>
          break;
 8008e0a:	e000      	b.n	8008e0e <USBD_StdItfReq+0xc2>
          break;
 8008e0c:	bf00      	nop
      }
      break;
 8008e0e:	e004      	b.n	8008e1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fceb 	bl	80097ee <USBD_CtlError>
      break;
 8008e18:	bf00      	nop
  }

  return ret;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	889b      	ldrh	r3, [r3, #4]
 8008e36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e40:	2b40      	cmp	r3, #64	; 0x40
 8008e42:	d007      	beq.n	8008e54 <USBD_StdEPReq+0x30>
 8008e44:	2b40      	cmp	r3, #64	; 0x40
 8008e46:	f200 817f 	bhi.w	8009148 <USBD_StdEPReq+0x324>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d02a      	beq.n	8008ea4 <USBD_StdEPReq+0x80>
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	f040 817a 	bne.w	8009148 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff fe83 	bl	8008b64 <USBD_CoreFindEP>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e62:	7b7b      	ldrb	r3, [r7, #13]
 8008e64:	2bff      	cmp	r3, #255	; 0xff
 8008e66:	f000 8174 	beq.w	8009152 <USBD_StdEPReq+0x32e>
 8008e6a:	7b7b      	ldrb	r3, [r7, #13]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f040 8170 	bne.w	8009152 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008e72:	7b7a      	ldrb	r2, [r7, #13]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008e7a:	7b7a      	ldrb	r2, [r7, #13]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	32ae      	adds	r2, #174	; 0xae
 8008e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 8163 	beq.w	8009152 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008e8c:	7b7a      	ldrb	r2, [r7, #13]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	32ae      	adds	r2, #174	; 0xae
 8008e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	4798      	blx	r3
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ea2:	e156      	b.n	8009152 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	785b      	ldrb	r3, [r3, #1]
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d008      	beq.n	8008ebe <USBD_StdEPReq+0x9a>
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	f300 8145 	bgt.w	800913c <USBD_StdEPReq+0x318>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 809b 	beq.w	8008fee <USBD_StdEPReq+0x1ca>
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d03c      	beq.n	8008f36 <USBD_StdEPReq+0x112>
 8008ebc:	e13e      	b.n	800913c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d002      	beq.n	8008ed0 <USBD_StdEPReq+0xac>
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d016      	beq.n	8008efc <USBD_StdEPReq+0xd8>
 8008ece:	e02c      	b.n	8008f2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00d      	beq.n	8008ef2 <USBD_StdEPReq+0xce>
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
 8008ed8:	2b80      	cmp	r3, #128	; 0x80
 8008eda:	d00a      	beq.n	8008ef2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f001 f97f 	bl	800a1e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ee6:	2180      	movs	r1, #128	; 0x80
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f001 f97b 	bl	800a1e4 <USBD_LL_StallEP>
 8008eee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ef0:	e020      	b.n	8008f34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fc7a 	bl	80097ee <USBD_CtlError>
              break;
 8008efa:	e01b      	b.n	8008f34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	885b      	ldrh	r3, [r3, #2]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10e      	bne.n	8008f22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00b      	beq.n	8008f22 <USBD_StdEPReq+0xfe>
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d008      	beq.n	8008f22 <USBD_StdEPReq+0xfe>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	88db      	ldrh	r3, [r3, #6]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f961 	bl	800a1e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fd2e 	bl	8009984 <USBD_CtlSendStatus>

              break;
 8008f28:	e004      	b.n	8008f34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fc5e 	bl	80097ee <USBD_CtlError>
              break;
 8008f32:	bf00      	nop
          }
          break;
 8008f34:	e107      	b.n	8009146 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d002      	beq.n	8008f48 <USBD_StdEPReq+0x124>
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d016      	beq.n	8008f74 <USBD_StdEPReq+0x150>
 8008f46:	e04b      	b.n	8008fe0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f48:	7bbb      	ldrb	r3, [r7, #14]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00d      	beq.n	8008f6a <USBD_StdEPReq+0x146>
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	2b80      	cmp	r3, #128	; 0x80
 8008f52:	d00a      	beq.n	8008f6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f943 	bl	800a1e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f5e:	2180      	movs	r1, #128	; 0x80
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f001 f93f 	bl	800a1e4 <USBD_LL_StallEP>
 8008f66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f68:	e040      	b.n	8008fec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fc3e 	bl	80097ee <USBD_CtlError>
              break;
 8008f72:	e03b      	b.n	8008fec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	885b      	ldrh	r3, [r3, #2]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d136      	bne.n	8008fea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d004      	beq.n	8008f90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 f949 	bl	800a222 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fcf7 	bl	8009984 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff fde2 	bl	8008b64 <USBD_CoreFindEP>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fa4:	7b7b      	ldrb	r3, [r7, #13]
 8008fa6:	2bff      	cmp	r3, #255	; 0xff
 8008fa8:	d01f      	beq.n	8008fea <USBD_StdEPReq+0x1c6>
 8008faa:	7b7b      	ldrb	r3, [r7, #13]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d11c      	bne.n	8008fea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008fb0:	7b7a      	ldrb	r2, [r7, #13]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008fb8:	7b7a      	ldrb	r2, [r7, #13]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	32ae      	adds	r2, #174	; 0xae
 8008fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d010      	beq.n	8008fea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008fc8:	7b7a      	ldrb	r2, [r7, #13]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	32ae      	adds	r2, #174	; 0xae
 8008fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008fde:	e004      	b.n	8008fea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fc03 	bl	80097ee <USBD_CtlError>
              break;
 8008fe8:	e000      	b.n	8008fec <USBD_StdEPReq+0x1c8>
              break;
 8008fea:	bf00      	nop
          }
          break;
 8008fec:	e0ab      	b.n	8009146 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d002      	beq.n	8009000 <USBD_StdEPReq+0x1dc>
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d032      	beq.n	8009064 <USBD_StdEPReq+0x240>
 8008ffe:	e097      	b.n	8009130 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d007      	beq.n	8009016 <USBD_StdEPReq+0x1f2>
 8009006:	7bbb      	ldrb	r3, [r7, #14]
 8009008:	2b80      	cmp	r3, #128	; 0x80
 800900a:	d004      	beq.n	8009016 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fbed 	bl	80097ee <USBD_CtlError>
                break;
 8009014:	e091      	b.n	800913a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800901a:	2b00      	cmp	r3, #0
 800901c:	da0b      	bge.n	8009036 <USBD_StdEPReq+0x212>
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	3310      	adds	r3, #16
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	4413      	add	r3, r2
 8009032:	3304      	adds	r3, #4
 8009034:	e00b      	b.n	800904e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800903c:	4613      	mov	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	4413      	add	r3, r2
 800904c:	3304      	adds	r3, #4
 800904e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2202      	movs	r2, #2
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fc37 	bl	80098d0 <USBD_CtlSendData>
              break;
 8009062:	e06a      	b.n	800913a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009068:	2b00      	cmp	r3, #0
 800906a:	da11      	bge.n	8009090 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	f003 020f 	and.w	r2, r3, #15
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	4613      	mov	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	440b      	add	r3, r1
 800907e:	3324      	adds	r3, #36	; 0x24
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d117      	bne.n	80090b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fbb0 	bl	80097ee <USBD_CtlError>
                  break;
 800908e:	e054      	b.n	800913a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009090:	7bbb      	ldrb	r3, [r7, #14]
 8009092:	f003 020f 	and.w	r2, r3, #15
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d104      	bne.n	80090b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fb9d 	bl	80097ee <USBD_CtlError>
                  break;
 80090b4:	e041      	b.n	800913a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	da0b      	bge.n	80090d6 <USBD_StdEPReq+0x2b2>
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	3310      	adds	r3, #16
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	4413      	add	r3, r2
 80090d2:	3304      	adds	r3, #4
 80090d4:	e00b      	b.n	80090ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
 80090d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	4413      	add	r3, r2
 80090ec:	3304      	adds	r3, #4
 80090ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <USBD_StdEPReq+0x2d8>
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
 80090f8:	2b80      	cmp	r3, #128	; 0x80
 80090fa:	d103      	bne.n	8009104 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	e00e      	b.n	8009122 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f001 f8a9 	bl	800a260 <USBD_LL_IsStallEP>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2201      	movs	r2, #1
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	e002      	b.n	8009122 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2202      	movs	r2, #2
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fbd1 	bl	80098d0 <USBD_CtlSendData>
              break;
 800912e:	e004      	b.n	800913a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fb5b 	bl	80097ee <USBD_CtlError>
              break;
 8009138:	bf00      	nop
          }
          break;
 800913a:	e004      	b.n	8009146 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fb55 	bl	80097ee <USBD_CtlError>
          break;
 8009144:	bf00      	nop
      }
      break;
 8009146:	e005      	b.n	8009154 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fb4f 	bl	80097ee <USBD_CtlError>
      break;
 8009150:	e000      	b.n	8009154 <USBD_StdEPReq+0x330>
      break;
 8009152:	bf00      	nop
  }

  return ret;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800916a:	2300      	movs	r3, #0
 800916c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800916e:	2300      	movs	r3, #0
 8009170:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	0a1b      	lsrs	r3, r3, #8
 800917c:	b29b      	uxth	r3, r3
 800917e:	3b01      	subs	r3, #1
 8009180:	2b06      	cmp	r3, #6
 8009182:	f200 8128 	bhi.w	80093d6 <USBD_GetDescriptor+0x276>
 8009186:	a201      	add	r2, pc, #4	; (adr r2, 800918c <USBD_GetDescriptor+0x2c>)
 8009188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918c:	080091a9 	.word	0x080091a9
 8009190:	080091c1 	.word	0x080091c1
 8009194:	08009201 	.word	0x08009201
 8009198:	080093d7 	.word	0x080093d7
 800919c:	080093d7 	.word	0x080093d7
 80091a0:	08009377 	.word	0x08009377
 80091a4:	080093a3 	.word	0x080093a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	7c12      	ldrb	r2, [r2, #16]
 80091b4:	f107 0108 	add.w	r1, r7, #8
 80091b8:	4610      	mov	r0, r2
 80091ba:	4798      	blx	r3
 80091bc:	60f8      	str	r0, [r7, #12]
      break;
 80091be:	e112      	b.n	80093e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7c1b      	ldrb	r3, [r3, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10d      	bne.n	80091e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d0:	f107 0208 	add.w	r2, r7, #8
 80091d4:	4610      	mov	r0, r2
 80091d6:	4798      	blx	r3
 80091d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3301      	adds	r3, #1
 80091de:	2202      	movs	r2, #2
 80091e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091e2:	e100      	b.n	80093e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ec:	f107 0208 	add.w	r2, r7, #8
 80091f0:	4610      	mov	r0, r2
 80091f2:	4798      	blx	r3
 80091f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3301      	adds	r3, #1
 80091fa:	2202      	movs	r2, #2
 80091fc:	701a      	strb	r2, [r3, #0]
      break;
 80091fe:	e0f2      	b.n	80093e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	885b      	ldrh	r3, [r3, #2]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b05      	cmp	r3, #5
 8009208:	f200 80ac 	bhi.w	8009364 <USBD_GetDescriptor+0x204>
 800920c:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <USBD_GetDescriptor+0xb4>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	0800922d 	.word	0x0800922d
 8009218:	08009261 	.word	0x08009261
 800921c:	08009295 	.word	0x08009295
 8009220:	080092c9 	.word	0x080092c9
 8009224:	080092fd 	.word	0x080092fd
 8009228:	08009331 	.word	0x08009331
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00b      	beq.n	8009250 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	7c12      	ldrb	r2, [r2, #16]
 8009244:	f107 0108 	add.w	r1, r7, #8
 8009248:	4610      	mov	r0, r2
 800924a:	4798      	blx	r3
 800924c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800924e:	e091      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 facb 	bl	80097ee <USBD_CtlError>
            err++;
 8009258:	7afb      	ldrb	r3, [r7, #11]
 800925a:	3301      	adds	r3, #1
 800925c:	72fb      	strb	r3, [r7, #11]
          break;
 800925e:	e089      	b.n	8009374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	7c12      	ldrb	r2, [r2, #16]
 8009278:	f107 0108 	add.w	r1, r7, #8
 800927c:	4610      	mov	r0, r2
 800927e:	4798      	blx	r3
 8009280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009282:	e077      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fab1 	bl	80097ee <USBD_CtlError>
            err++;
 800928c:	7afb      	ldrb	r3, [r7, #11]
 800928e:	3301      	adds	r3, #1
 8009290:	72fb      	strb	r3, [r7, #11]
          break;
 8009292:	e06f      	b.n	8009374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00b      	beq.n	80092b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	7c12      	ldrb	r2, [r2, #16]
 80092ac:	f107 0108 	add.w	r1, r7, #8
 80092b0:	4610      	mov	r0, r2
 80092b2:	4798      	blx	r3
 80092b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092b6:	e05d      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fa97 	bl	80097ee <USBD_CtlError>
            err++;
 80092c0:	7afb      	ldrb	r3, [r7, #11]
 80092c2:	3301      	adds	r3, #1
 80092c4:	72fb      	strb	r3, [r7, #11]
          break;
 80092c6:	e055      	b.n	8009374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00b      	beq.n	80092ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	7c12      	ldrb	r2, [r2, #16]
 80092e0:	f107 0108 	add.w	r1, r7, #8
 80092e4:	4610      	mov	r0, r2
 80092e6:	4798      	blx	r3
 80092e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ea:	e043      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fa7d 	bl	80097ee <USBD_CtlError>
            err++;
 80092f4:	7afb      	ldrb	r3, [r7, #11]
 80092f6:	3301      	adds	r3, #1
 80092f8:	72fb      	strb	r3, [r7, #11]
          break;
 80092fa:	e03b      	b.n	8009374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	7c12      	ldrb	r2, [r2, #16]
 8009314:	f107 0108 	add.w	r1, r7, #8
 8009318:	4610      	mov	r0, r2
 800931a:	4798      	blx	r3
 800931c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800931e:	e029      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa63 	bl	80097ee <USBD_CtlError>
            err++;
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	3301      	adds	r3, #1
 800932c:	72fb      	strb	r3, [r7, #11]
          break;
 800932e:	e021      	b.n	8009374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	7c12      	ldrb	r2, [r2, #16]
 8009348:	f107 0108 	add.w	r1, r7, #8
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
 8009350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009352:	e00f      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa49 	bl	80097ee <USBD_CtlError>
            err++;
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	3301      	adds	r3, #1
 8009360:	72fb      	strb	r3, [r7, #11]
          break;
 8009362:	e007      	b.n	8009374 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa41 	bl	80097ee <USBD_CtlError>
          err++;
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	3301      	adds	r3, #1
 8009370:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009372:	bf00      	nop
      }
      break;
 8009374:	e037      	b.n	80093e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	7c1b      	ldrb	r3, [r3, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d109      	bne.n	8009392 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009386:	f107 0208 	add.w	r2, r7, #8
 800938a:	4610      	mov	r0, r2
 800938c:	4798      	blx	r3
 800938e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009390:	e029      	b.n	80093e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fa2a 	bl	80097ee <USBD_CtlError>
        err++;
 800939a:	7afb      	ldrb	r3, [r7, #11]
 800939c:	3301      	adds	r3, #1
 800939e:	72fb      	strb	r3, [r7, #11]
      break;
 80093a0:	e021      	b.n	80093e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	7c1b      	ldrb	r3, [r3, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10d      	bne.n	80093c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b2:	f107 0208 	add.w	r2, r7, #8
 80093b6:	4610      	mov	r0, r2
 80093b8:	4798      	blx	r3
 80093ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	3301      	adds	r3, #1
 80093c0:	2207      	movs	r2, #7
 80093c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093c4:	e00f      	b.n	80093e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fa10 	bl	80097ee <USBD_CtlError>
        err++;
 80093ce:	7afb      	ldrb	r3, [r7, #11]
 80093d0:	3301      	adds	r3, #1
 80093d2:	72fb      	strb	r3, [r7, #11]
      break;
 80093d4:	e007      	b.n	80093e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fa08 	bl	80097ee <USBD_CtlError>
      err++;
 80093de:	7afb      	ldrb	r3, [r7, #11]
 80093e0:	3301      	adds	r3, #1
 80093e2:	72fb      	strb	r3, [r7, #11]
      break;
 80093e4:	bf00      	nop
  }

  if (err != 0U)
 80093e6:	7afb      	ldrb	r3, [r7, #11]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d11e      	bne.n	800942a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	88db      	ldrh	r3, [r3, #6]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d016      	beq.n	8009422 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80093f4:	893b      	ldrh	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00e      	beq.n	8009418 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	88da      	ldrh	r2, [r3, #6]
 80093fe:	893b      	ldrh	r3, [r7, #8]
 8009400:	4293      	cmp	r3, r2
 8009402:	bf28      	it	cs
 8009404:	4613      	movcs	r3, r2
 8009406:	b29b      	uxth	r3, r3
 8009408:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800940a:	893b      	ldrh	r3, [r7, #8]
 800940c:	461a      	mov	r2, r3
 800940e:	68f9      	ldr	r1, [r7, #12]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fa5d 	bl	80098d0 <USBD_CtlSendData>
 8009416:	e009      	b.n	800942c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f9e7 	bl	80097ee <USBD_CtlError>
 8009420:	e004      	b.n	800942c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 faae 	bl	8009984 <USBD_CtlSendStatus>
 8009428:	e000      	b.n	800942c <USBD_GetDescriptor+0x2cc>
    return;
 800942a:	bf00      	nop
  }
}
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop

08009434 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	889b      	ldrh	r3, [r3, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d131      	bne.n	80094aa <USBD_SetAddress+0x76>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	88db      	ldrh	r3, [r3, #6]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d12d      	bne.n	80094aa <USBD_SetAddress+0x76>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	885b      	ldrh	r3, [r3, #2]
 8009452:	2b7f      	cmp	r3, #127	; 0x7f
 8009454:	d829      	bhi.n	80094aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	885b      	ldrh	r3, [r3, #2]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009460:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b03      	cmp	r3, #3
 800946c:	d104      	bne.n	8009478 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f9bc 	bl	80097ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009476:	e01d      	b.n	80094b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	7bfa      	ldrb	r2, [r7, #15]
 800947c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009480:	7bfb      	ldrb	r3, [r7, #15]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 ff17 	bl	800a2b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa7a 	bl	8009984 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d004      	beq.n	80094a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2202      	movs	r2, #2
 800949a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800949e:	e009      	b.n	80094b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a8:	e004      	b.n	80094b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f99e 	bl	80097ee <USBD_CtlError>
  }
}
 80094b2:	bf00      	nop
 80094b4:	bf00      	nop
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	885b      	ldrh	r3, [r3, #2]
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	4b4e      	ldr	r3, [pc, #312]	; (800960c <USBD_SetConfig+0x150>)
 80094d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094d4:	4b4d      	ldr	r3, [pc, #308]	; (800960c <USBD_SetConfig+0x150>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d905      	bls.n	80094e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f985 	bl	80097ee <USBD_CtlError>
    return USBD_FAIL;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e08c      	b.n	8009602 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d002      	beq.n	80094fa <USBD_SetConfig+0x3e>
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d029      	beq.n	800954c <USBD_SetConfig+0x90>
 80094f8:	e075      	b.n	80095e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80094fa:	4b44      	ldr	r3, [pc, #272]	; (800960c <USBD_SetConfig+0x150>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d020      	beq.n	8009544 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009502:	4b42      	ldr	r3, [pc, #264]	; (800960c <USBD_SetConfig+0x150>)
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800950c:	4b3f      	ldr	r3, [pc, #252]	; (800960c <USBD_SetConfig+0x150>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7fe ffe7 	bl	80084e6 <USBD_SetClassConfig>
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d008      	beq.n	8009534 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f962 	bl	80097ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2202      	movs	r2, #2
 800952e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009532:	e065      	b.n	8009600 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fa25 	bl	8009984 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2203      	movs	r2, #3
 800953e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009542:	e05d      	b.n	8009600 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fa1d 	bl	8009984 <USBD_CtlSendStatus>
      break;
 800954a:	e059      	b.n	8009600 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800954c:	4b2f      	ldr	r3, [pc, #188]	; (800960c <USBD_SetConfig+0x150>)
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d112      	bne.n	800957a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2202      	movs	r2, #2
 8009558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800955c:	4b2b      	ldr	r3, [pc, #172]	; (800960c <USBD_SetConfig+0x150>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009566:	4b29      	ldr	r3, [pc, #164]	; (800960c <USBD_SetConfig+0x150>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7fe ffd6 	bl	800851e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa06 	bl	8009984 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009578:	e042      	b.n	8009600 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800957a:	4b24      	ldr	r3, [pc, #144]	; (800960c <USBD_SetConfig+0x150>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	429a      	cmp	r2, r3
 8009586:	d02a      	beq.n	80095de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7fe ffc4 	bl	800851e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009596:	4b1d      	ldr	r3, [pc, #116]	; (800960c <USBD_SetConfig+0x150>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	461a      	mov	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095a0:	4b1a      	ldr	r3, [pc, #104]	; (800960c <USBD_SetConfig+0x150>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7fe ff9d 	bl	80084e6 <USBD_SetClassConfig>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00f      	beq.n	80095d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f918 	bl	80097ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7fe ffa9 	bl	800851e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2202      	movs	r2, #2
 80095d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095d4:	e014      	b.n	8009600 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f9d4 	bl	8009984 <USBD_CtlSendStatus>
      break;
 80095dc:	e010      	b.n	8009600 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f9d0 	bl	8009984 <USBD_CtlSendStatus>
      break;
 80095e4:	e00c      	b.n	8009600 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f900 	bl	80097ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095ee:	4b07      	ldr	r3, [pc, #28]	; (800960c <USBD_SetConfig+0x150>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7fe ff92 	bl	800851e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80095fa:	2303      	movs	r3, #3
 80095fc:	73fb      	strb	r3, [r7, #15]
      break;
 80095fe:	bf00      	nop
  }

  return ret;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20001220 	.word	0x20001220

08009610 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	88db      	ldrh	r3, [r3, #6]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d004      	beq.n	800962c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f8e2 	bl	80097ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800962a:	e023      	b.n	8009674 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b02      	cmp	r3, #2
 8009636:	dc02      	bgt.n	800963e <USBD_GetConfig+0x2e>
 8009638:	2b00      	cmp	r3, #0
 800963a:	dc03      	bgt.n	8009644 <USBD_GetConfig+0x34>
 800963c:	e015      	b.n	800966a <USBD_GetConfig+0x5a>
 800963e:	2b03      	cmp	r3, #3
 8009640:	d00b      	beq.n	800965a <USBD_GetConfig+0x4a>
 8009642:	e012      	b.n	800966a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3308      	adds	r3, #8
 800964e:	2201      	movs	r2, #1
 8009650:	4619      	mov	r1, r3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f93c 	bl	80098d0 <USBD_CtlSendData>
        break;
 8009658:	e00c      	b.n	8009674 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3304      	adds	r3, #4
 800965e:	2201      	movs	r2, #1
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f934 	bl	80098d0 <USBD_CtlSendData>
        break;
 8009668:	e004      	b.n	8009674 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f8be 	bl	80097ee <USBD_CtlError>
        break;
 8009672:	bf00      	nop
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968c:	b2db      	uxtb	r3, r3
 800968e:	3b01      	subs	r3, #1
 8009690:	2b02      	cmp	r3, #2
 8009692:	d81e      	bhi.n	80096d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	88db      	ldrh	r3, [r3, #6]
 8009698:	2b02      	cmp	r3, #2
 800969a:	d004      	beq.n	80096a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f8a5 	bl	80097ee <USBD_CtlError>
        break;
 80096a4:	e01a      	b.n	80096dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f043 0202 	orr.w	r2, r3, #2
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	330c      	adds	r3, #12
 80096c6:	2202      	movs	r2, #2
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f900 	bl	80098d0 <USBD_CtlSendData>
      break;
 80096d0:	e004      	b.n	80096dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f88a 	bl	80097ee <USBD_CtlError>
      break;
 80096da:	bf00      	nop
  }
}
 80096dc:	bf00      	nop
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	885b      	ldrh	r3, [r3, #2]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d107      	bne.n	8009706 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f940 	bl	8009984 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009704:	e013      	b.n	800972e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	885b      	ldrh	r3, [r3, #2]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d10b      	bne.n	8009726 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	889b      	ldrh	r3, [r3, #4]
 8009712:	0a1b      	lsrs	r3, r3, #8
 8009714:	b29b      	uxth	r3, r3
 8009716:	b2da      	uxtb	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f930 	bl	8009984 <USBD_CtlSendStatus>
}
 8009724:	e003      	b.n	800972e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f860 	bl	80097ee <USBD_CtlError>
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009746:	b2db      	uxtb	r3, r3
 8009748:	3b01      	subs	r3, #1
 800974a:	2b02      	cmp	r3, #2
 800974c:	d80b      	bhi.n	8009766 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	885b      	ldrh	r3, [r3, #2]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d10c      	bne.n	8009770 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f910 	bl	8009984 <USBD_CtlSendStatus>
      }
      break;
 8009764:	e004      	b.n	8009770 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f840 	bl	80097ee <USBD_CtlError>
      break;
 800976e:	e000      	b.n	8009772 <USBD_ClrFeature+0x3c>
      break;
 8009770:	bf00      	nop
  }
}
 8009772:	bf00      	nop
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	781a      	ldrb	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3301      	adds	r3, #1
 8009794:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	781a      	ldrb	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3301      	adds	r3, #1
 80097a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f7ff fa41 	bl	8008c2c <SWAPBYTE>
 80097aa:	4603      	mov	r3, r0
 80097ac:	461a      	mov	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3301      	adds	r3, #1
 80097b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3301      	adds	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f7ff fa34 	bl	8008c2c <SWAPBYTE>
 80097c4:	4603      	mov	r3, r0
 80097c6:	461a      	mov	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3301      	adds	r3, #1
 80097d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3301      	adds	r3, #1
 80097d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f7ff fa27 	bl	8008c2c <SWAPBYTE>
 80097de:	4603      	mov	r3, r0
 80097e0:	461a      	mov	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	80da      	strh	r2, [r3, #6]
}
 80097e6:	bf00      	nop
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80097f8:	2180      	movs	r1, #128	; 0x80
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fcf2 	bl	800a1e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009800:	2100      	movs	r1, #0
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fcee 	bl	800a1e4 <USBD_LL_StallEP>
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d036      	beq.n	8009894 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800982a:	6938      	ldr	r0, [r7, #16]
 800982c:	f000 f836 	bl	800989c <USBD_GetLen>
 8009830:	4603      	mov	r3, r0
 8009832:	3301      	adds	r3, #1
 8009834:	b29b      	uxth	r3, r3
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	b29a      	uxth	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	4413      	add	r3, r2
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	7812      	ldrb	r2, [r2, #0]
 8009848:	701a      	strb	r2, [r3, #0]
  idx++;
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	3301      	adds	r3, #1
 800984e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	4413      	add	r3, r2
 8009856:	2203      	movs	r2, #3
 8009858:	701a      	strb	r2, [r3, #0]
  idx++;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	3301      	adds	r3, #1
 800985e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009860:	e013      	b.n	800988a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009862:	7dfb      	ldrb	r3, [r7, #23]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	4413      	add	r3, r2
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	7812      	ldrb	r2, [r2, #0]
 800986c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	3301      	adds	r3, #1
 8009872:	613b      	str	r3, [r7, #16]
    idx++;
 8009874:	7dfb      	ldrb	r3, [r7, #23]
 8009876:	3301      	adds	r3, #1
 8009878:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800987a:	7dfb      	ldrb	r3, [r7, #23]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	4413      	add	r3, r2
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
    idx++;
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	3301      	adds	r3, #1
 8009888:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e7      	bne.n	8009862 <USBD_GetString+0x52>
 8009892:	e000      	b.n	8009896 <USBD_GetString+0x86>
    return;
 8009894:	bf00      	nop
  }
}
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098ac:	e005      	b.n	80098ba <USBD_GetLen+0x1e>
  {
    len++;
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	3301      	adds	r3, #1
 80098b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	3301      	adds	r3, #1
 80098b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1f5      	bne.n	80098ae <USBD_GetLen+0x12>
  }

  return len;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2202      	movs	r2, #2
 80098e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	2100      	movs	r1, #0
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f000 fcfd 	bl	800a2f6 <USBD_LL_Transmit>

  return USBD_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	2100      	movs	r1, #0
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 fcec 	bl	800a2f6 <USBD_LL_Transmit>

  return USBD_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2203      	movs	r2, #3
 8009938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	2100      	movs	r1, #0
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 fcf0 	bl	800a338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	60f8      	str	r0, [r7, #12]
 800996a:	60b9      	str	r1, [r7, #8]
 800996c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	2100      	movs	r1, #0
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 fcdf 	bl	800a338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2204      	movs	r2, #4
 8009990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009994:	2300      	movs	r3, #0
 8009996:	2200      	movs	r2, #0
 8009998:	2100      	movs	r1, #0
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fcab 	bl	800a2f6 <USBD_LL_Transmit>

  return USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b082      	sub	sp, #8
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2205      	movs	r2, #5
 80099b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099ba:	2300      	movs	r3, #0
 80099bc:	2200      	movs	r2, #0
 80099be:	2100      	movs	r1, #0
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fcb9 	bl	800a338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80099d4:	2200      	movs	r2, #0
 80099d6:	4912      	ldr	r1, [pc, #72]	; (8009a20 <MX_USB_DEVICE_Init+0x50>)
 80099d8:	4812      	ldr	r0, [pc, #72]	; (8009a24 <MX_USB_DEVICE_Init+0x54>)
 80099da:	f7fe fd07 	bl	80083ec <USBD_Init>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80099e4:	f7f8 fb72 	bl	80020cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80099e8:	490f      	ldr	r1, [pc, #60]	; (8009a28 <MX_USB_DEVICE_Init+0x58>)
 80099ea:	480e      	ldr	r0, [pc, #56]	; (8009a24 <MX_USB_DEVICE_Init+0x54>)
 80099ec:	f7fe fd2e 	bl	800844c <USBD_RegisterClass>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099f6:	f7f8 fb69 	bl	80020cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80099fa:	490c      	ldr	r1, [pc, #48]	; (8009a2c <MX_USB_DEVICE_Init+0x5c>)
 80099fc:	4809      	ldr	r0, [pc, #36]	; (8009a24 <MX_USB_DEVICE_Init+0x54>)
 80099fe:	f7fe fc1f 	bl	8008240 <USBD_CDC_RegisterInterface>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a08:	f7f8 fb60 	bl	80020cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a0c:	4805      	ldr	r0, [pc, #20]	; (8009a24 <MX_USB_DEVICE_Init+0x54>)
 8009a0e:	f7fe fd53 	bl	80084b8 <USBD_Start>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a18:	f7f8 fb58 	bl	80020cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a1c:	bf00      	nop
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	200000ac 	.word	0x200000ac
 8009a24:	20001224 	.word	0x20001224
 8009a28:	20000018 	.word	0x20000018
 8009a2c:	20000098 	.word	0x20000098

08009a30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a34:	2200      	movs	r2, #0
 8009a36:	4905      	ldr	r1, [pc, #20]	; (8009a4c <CDC_Init_FS+0x1c>)
 8009a38:	4805      	ldr	r0, [pc, #20]	; (8009a50 <CDC_Init_FS+0x20>)
 8009a3a:	f7fe fc1b 	bl	8008274 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a3e:	4905      	ldr	r1, [pc, #20]	; (8009a54 <CDC_Init_FS+0x24>)
 8009a40:	4803      	ldr	r0, [pc, #12]	; (8009a50 <CDC_Init_FS+0x20>)
 8009a42:	f7fe fc39 	bl	80082b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20001d00 	.word	0x20001d00
 8009a50:	20001224 	.word	0x20001224
 8009a54:	20001500 	.word	0x20001500

08009a58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	6039      	str	r1, [r7, #0]
 8009a72:	71fb      	strb	r3, [r7, #7]
 8009a74:	4613      	mov	r3, r2
 8009a76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a78:	79fb      	ldrb	r3, [r7, #7]
 8009a7a:	2b23      	cmp	r3, #35	; 0x23
 8009a7c:	d84a      	bhi.n	8009b14 <CDC_Control_FS+0xac>
 8009a7e:	a201      	add	r2, pc, #4	; (adr r2, 8009a84 <CDC_Control_FS+0x1c>)
 8009a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a84:	08009b15 	.word	0x08009b15
 8009a88:	08009b15 	.word	0x08009b15
 8009a8c:	08009b15 	.word	0x08009b15
 8009a90:	08009b15 	.word	0x08009b15
 8009a94:	08009b15 	.word	0x08009b15
 8009a98:	08009b15 	.word	0x08009b15
 8009a9c:	08009b15 	.word	0x08009b15
 8009aa0:	08009b15 	.word	0x08009b15
 8009aa4:	08009b15 	.word	0x08009b15
 8009aa8:	08009b15 	.word	0x08009b15
 8009aac:	08009b15 	.word	0x08009b15
 8009ab0:	08009b15 	.word	0x08009b15
 8009ab4:	08009b15 	.word	0x08009b15
 8009ab8:	08009b15 	.word	0x08009b15
 8009abc:	08009b15 	.word	0x08009b15
 8009ac0:	08009b15 	.word	0x08009b15
 8009ac4:	08009b15 	.word	0x08009b15
 8009ac8:	08009b15 	.word	0x08009b15
 8009acc:	08009b15 	.word	0x08009b15
 8009ad0:	08009b15 	.word	0x08009b15
 8009ad4:	08009b15 	.word	0x08009b15
 8009ad8:	08009b15 	.word	0x08009b15
 8009adc:	08009b15 	.word	0x08009b15
 8009ae0:	08009b15 	.word	0x08009b15
 8009ae4:	08009b15 	.word	0x08009b15
 8009ae8:	08009b15 	.word	0x08009b15
 8009aec:	08009b15 	.word	0x08009b15
 8009af0:	08009b15 	.word	0x08009b15
 8009af4:	08009b15 	.word	0x08009b15
 8009af8:	08009b15 	.word	0x08009b15
 8009afc:	08009b15 	.word	0x08009b15
 8009b00:	08009b15 	.word	0x08009b15
 8009b04:	08009b15 	.word	0x08009b15
 8009b08:	08009b15 	.word	0x08009b15
 8009b0c:	08009b15 	.word	0x08009b15
 8009b10:	08009b15 	.word	0x08009b15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b14:	bf00      	nop
  }

  return (USBD_OK);
 8009b16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	4807      	ldr	r0, [pc, #28]	; (8009b50 <CDC_Receive_FS+0x2c>)
 8009b32:	f7fe fbc1 	bl	80082b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b36:	4806      	ldr	r0, [pc, #24]	; (8009b50 <CDC_Receive_FS+0x2c>)
 8009b38:	f7fe fc22 	bl	8008380 <USBD_CDC_ReceivePacket>
  usbCallback(Buf, Len);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7f7 ff3a 	bl	80019b8 <usbCallback>
  return (USBD_OK);
 8009b44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20001224 	.word	0x20001224

08009b54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009b64:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <CDC_Transmit_FS+0x48>)
 8009b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e00b      	b.n	8009b92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b7a:	887b      	ldrh	r3, [r7, #2]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	4806      	ldr	r0, [pc, #24]	; (8009b9c <CDC_Transmit_FS+0x48>)
 8009b82:	f7fe fb77 	bl	8008274 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b86:	4805      	ldr	r0, [pc, #20]	; (8009b9c <CDC_Transmit_FS+0x48>)
 8009b88:	f7fe fbb4 	bl	80082f4 <USBD_CDC_TransmitPacket>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20001224 	.word	0x20001224

08009ba0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	4613      	mov	r3, r2
 8009bac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	371c      	adds	r7, #28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
	...

08009bc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	6039      	str	r1, [r7, #0]
 8009bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2212      	movs	r2, #18
 8009bd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bd6:	4b03      	ldr	r3, [pc, #12]	; (8009be4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	200000c8 	.word	0x200000c8

08009be8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2204      	movs	r2, #4
 8009bf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bfa:	4b03      	ldr	r3, [pc, #12]	; (8009c08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	200000dc 	.word	0x200000dc

08009c0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d105      	bne.n	8009c2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	4907      	ldr	r1, [pc, #28]	; (8009c40 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c22:	4808      	ldr	r0, [pc, #32]	; (8009c44 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c24:	f7ff fdf4 	bl	8009810 <USBD_GetString>
 8009c28:	e004      	b.n	8009c34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	4904      	ldr	r1, [pc, #16]	; (8009c40 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c2e:	4805      	ldr	r0, [pc, #20]	; (8009c44 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c30:	f7ff fdee 	bl	8009810 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c34:	4b02      	ldr	r3, [pc, #8]	; (8009c40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20002500 	.word	0x20002500
 8009c44:	0800fc18 	.word	0x0800fc18

08009c48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	6039      	str	r1, [r7, #0]
 8009c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	4904      	ldr	r1, [pc, #16]	; (8009c68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c58:	4804      	ldr	r0, [pc, #16]	; (8009c6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c5a:	f7ff fdd9 	bl	8009810 <USBD_GetString>
  return USBD_StrDesc;
 8009c5e:	4b02      	ldr	r3, [pc, #8]	; (8009c68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20002500 	.word	0x20002500
 8009c6c:	0800fc30 	.word	0x0800fc30

08009c70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	6039      	str	r1, [r7, #0]
 8009c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	221a      	movs	r2, #26
 8009c80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c82:	f000 f843 	bl	8009d0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c86:	4b02      	ldr	r3, [pc, #8]	; (8009c90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	200000e0 	.word	0x200000e0

08009c94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	6039      	str	r1, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ca0:	79fb      	ldrb	r3, [r7, #7]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d105      	bne.n	8009cb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	4907      	ldr	r1, [pc, #28]	; (8009cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009caa:	4808      	ldr	r0, [pc, #32]	; (8009ccc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cac:	f7ff fdb0 	bl	8009810 <USBD_GetString>
 8009cb0:	e004      	b.n	8009cbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	4904      	ldr	r1, [pc, #16]	; (8009cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cb6:	4805      	ldr	r0, [pc, #20]	; (8009ccc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cb8:	f7ff fdaa 	bl	8009810 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cbc:	4b02      	ldr	r3, [pc, #8]	; (8009cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20002500 	.word	0x20002500
 8009ccc:	0800fc44 	.word	0x0800fc44

08009cd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	6039      	str	r1, [r7, #0]
 8009cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	4907      	ldr	r1, [pc, #28]	; (8009d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ce6:	4808      	ldr	r0, [pc, #32]	; (8009d08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ce8:	f7ff fd92 	bl	8009810 <USBD_GetString>
 8009cec:	e004      	b.n	8009cf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	4904      	ldr	r1, [pc, #16]	; (8009d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cf2:	4805      	ldr	r0, [pc, #20]	; (8009d08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cf4:	f7ff fd8c 	bl	8009810 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cf8:	4b02      	ldr	r3, [pc, #8]	; (8009d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20002500 	.word	0x20002500
 8009d08:	0800fc50 	.word	0x0800fc50

08009d0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d12:	4b0f      	ldr	r3, [pc, #60]	; (8009d50 <Get_SerialNum+0x44>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d18:	4b0e      	ldr	r3, [pc, #56]	; (8009d54 <Get_SerialNum+0x48>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d1e:	4b0e      	ldr	r3, [pc, #56]	; (8009d58 <Get_SerialNum+0x4c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4413      	add	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d009      	beq.n	8009d46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d32:	2208      	movs	r2, #8
 8009d34:	4909      	ldr	r1, [pc, #36]	; (8009d5c <Get_SerialNum+0x50>)
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f000 f814 	bl	8009d64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d3c:	2204      	movs	r2, #4
 8009d3e:	4908      	ldr	r1, [pc, #32]	; (8009d60 <Get_SerialNum+0x54>)
 8009d40:	68b8      	ldr	r0, [r7, #8]
 8009d42:	f000 f80f 	bl	8009d64 <IntToUnicode>
  }
}
 8009d46:	bf00      	nop
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	1fff7a10 	.word	0x1fff7a10
 8009d54:	1fff7a14 	.word	0x1fff7a14
 8009d58:	1fff7a18 	.word	0x1fff7a18
 8009d5c:	200000e2 	.word	0x200000e2
 8009d60:	200000f2 	.word	0x200000f2

08009d64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d76:	2300      	movs	r3, #0
 8009d78:	75fb      	strb	r3, [r7, #23]
 8009d7a:	e027      	b.n	8009dcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	0f1b      	lsrs	r3, r3, #28
 8009d80:	2b09      	cmp	r3, #9
 8009d82:	d80b      	bhi.n	8009d9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	0f1b      	lsrs	r3, r3, #28
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	4619      	mov	r1, r3
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	440b      	add	r3, r1
 8009d94:	3230      	adds	r2, #48	; 0x30
 8009d96:	b2d2      	uxtb	r2, r2
 8009d98:	701a      	strb	r2, [r3, #0]
 8009d9a:	e00a      	b.n	8009db2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	0f1b      	lsrs	r3, r3, #28
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	4619      	mov	r1, r3
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	440b      	add	r3, r1
 8009dac:	3237      	adds	r2, #55	; 0x37
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
 8009dba:	005b      	lsls	r3, r3, #1
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	75fb      	strb	r3, [r7, #23]
 8009dcc:	7dfa      	ldrb	r2, [r7, #23]
 8009dce:	79fb      	ldrb	r3, [r7, #7]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d3d3      	bcc.n	8009d7c <IntToUnicode+0x18>
  }
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
	...

08009de4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08a      	sub	sp, #40	; 0x28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dec:	f107 0314 	add.w	r3, r7, #20
 8009df0:	2200      	movs	r2, #0
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	605a      	str	r2, [r3, #4]
 8009df6:	609a      	str	r2, [r3, #8]
 8009df8:	60da      	str	r2, [r3, #12]
 8009dfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e04:	d147      	bne.n	8009e96 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e06:	2300      	movs	r3, #0
 8009e08:	613b      	str	r3, [r7, #16]
 8009e0a:	4b25      	ldr	r3, [pc, #148]	; (8009ea0 <HAL_PCD_MspInit+0xbc>)
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0e:	4a24      	ldr	r2, [pc, #144]	; (8009ea0 <HAL_PCD_MspInit+0xbc>)
 8009e10:	f043 0301 	orr.w	r3, r3, #1
 8009e14:	6313      	str	r3, [r2, #48]	; 0x30
 8009e16:	4b22      	ldr	r3, [pc, #136]	; (8009ea0 <HAL_PCD_MspInit+0xbc>)
 8009e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	613b      	str	r3, [r7, #16]
 8009e20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009e30:	f107 0314 	add.w	r3, r7, #20
 8009e34:	4619      	mov	r1, r3
 8009e36:	481b      	ldr	r0, [pc, #108]	; (8009ea4 <HAL_PCD_MspInit+0xc0>)
 8009e38:	f7f8 fdda 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009e3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e42:	2302      	movs	r3, #2
 8009e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e4e:	230a      	movs	r3, #10
 8009e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e52:	f107 0314 	add.w	r3, r7, #20
 8009e56:	4619      	mov	r1, r3
 8009e58:	4812      	ldr	r0, [pc, #72]	; (8009ea4 <HAL_PCD_MspInit+0xc0>)
 8009e5a:	f7f8 fdc9 	bl	80029f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e5e:	4b10      	ldr	r3, [pc, #64]	; (8009ea0 <HAL_PCD_MspInit+0xbc>)
 8009e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e62:	4a0f      	ldr	r2, [pc, #60]	; (8009ea0 <HAL_PCD_MspInit+0xbc>)
 8009e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e68:	6353      	str	r3, [r2, #52]	; 0x34
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ea0 <HAL_PCD_MspInit+0xbc>)
 8009e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e72:	4a0b      	ldr	r2, [pc, #44]	; (8009ea0 <HAL_PCD_MspInit+0xbc>)
 8009e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e78:	6453      	str	r3, [r2, #68]	; 0x44
 8009e7a:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <HAL_PCD_MspInit+0xbc>)
 8009e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e86:	2200      	movs	r2, #0
 8009e88:	2100      	movs	r1, #0
 8009e8a:	2043      	movs	r0, #67	; 0x43
 8009e8c:	f7f8 fd79 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e90:	2043      	movs	r0, #67	; 0x43
 8009e92:	f7f8 fd92 	bl	80029ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e96:	bf00      	nop
 8009e98:	3728      	adds	r7, #40	; 0x28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	40023800 	.word	0x40023800
 8009ea4:	40020000 	.word	0x40020000

08009ea8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f7fe fb47 	bl	8008552 <USBD_LL_SetupStage>
}
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009ede:	78fa      	ldrb	r2, [r7, #3]
 8009ee0:	6879      	ldr	r1, [r7, #4]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	00db      	lsls	r3, r3, #3
 8009ee6:	4413      	add	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	440b      	add	r3, r1
 8009eec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	78fb      	ldrb	r3, [r7, #3]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	f7fe fb81 	bl	80085fc <USBD_LL_DataOutStage>
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b082      	sub	sp, #8
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f14:	78fa      	ldrb	r2, [r7, #3]
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	4413      	add	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	440b      	add	r3, r1
 8009f22:	334c      	adds	r3, #76	; 0x4c
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	78fb      	ldrb	r3, [r7, #3]
 8009f28:	4619      	mov	r1, r3
 8009f2a:	f7fe fc1a 	bl	8008762 <USBD_LL_DataInStage>
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fe fd4e 	bl	80089e6 <USBD_LL_SOF>
}
 8009f4a:	bf00      	nop
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d102      	bne.n	8009f6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f66:	2300      	movs	r3, #0
 8009f68:	73fb      	strb	r3, [r7, #15]
 8009f6a:	e008      	b.n	8009f7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d102      	bne.n	8009f7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009f74:	2301      	movs	r3, #1
 8009f76:	73fb      	strb	r3, [r7, #15]
 8009f78:	e001      	b.n	8009f7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009f7a:	f7f8 f8a7 	bl	80020cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f84:	7bfa      	ldrb	r2, [r7, #15]
 8009f86:	4611      	mov	r1, r2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe fcee 	bl	800896a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fe fc96 	bl	80088c6 <USBD_LL_Reset>
}
 8009f9a:	bf00      	nop
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fce9 	bl	800898a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6812      	ldr	r2, [r2, #0]
 8009fc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fca:	f043 0301 	orr.w	r3, r3, #1
 8009fce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a1b      	ldr	r3, [r3, #32]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009fd8:	4b04      	ldr	r3, [pc, #16]	; (8009fec <HAL_PCD_SuspendCallback+0x48>)
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	4a03      	ldr	r2, [pc, #12]	; (8009fec <HAL_PCD_SuspendCallback+0x48>)
 8009fde:	f043 0306 	orr.w	r3, r3, #6
 8009fe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009fe4:	bf00      	nop
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	e000ed00 	.word	0xe000ed00

08009ff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe fcd9 	bl	80089b6 <USBD_LL_Resume>
}
 800a004:	bf00      	nop
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a01e:	78fa      	ldrb	r2, [r7, #3]
 800a020:	4611      	mov	r1, r2
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe fd31 	bl	8008a8a <USBD_LL_IsoOUTIncomplete>
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a042:	78fa      	ldrb	r2, [r7, #3]
 800a044:	4611      	mov	r1, r2
 800a046:	4618      	mov	r0, r3
 800a048:	f7fe fced 	bl	8008a26 <USBD_LL_IsoINIncomplete>
}
 800a04c:	bf00      	nop
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe fd43 	bl	8008aee <USBD_LL_DevConnected>
}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe fd40 	bl	8008b04 <USBD_LL_DevDisconnected>
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d13c      	bne.n	800a116 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a09c:	4a20      	ldr	r2, [pc, #128]	; (800a120 <USBD_LL_Init+0x94>)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a1e      	ldr	r2, [pc, #120]	; (800a120 <USBD_LL_Init+0x94>)
 800a0a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0ac:	4b1c      	ldr	r3, [pc, #112]	; (800a120 <USBD_LL_Init+0x94>)
 800a0ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a0b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a0b4:	4b1a      	ldr	r3, [pc, #104]	; (800a120 <USBD_LL_Init+0x94>)
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a0ba:	4b19      	ldr	r3, [pc, #100]	; (800a120 <USBD_LL_Init+0x94>)
 800a0bc:	2202      	movs	r2, #2
 800a0be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a0c0:	4b17      	ldr	r3, [pc, #92]	; (800a120 <USBD_LL_Init+0x94>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a0c6:	4b16      	ldr	r3, [pc, #88]	; (800a120 <USBD_LL_Init+0x94>)
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a0cc:	4b14      	ldr	r3, [pc, #80]	; (800a120 <USBD_LL_Init+0x94>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a0d2:	4b13      	ldr	r3, [pc, #76]	; (800a120 <USBD_LL_Init+0x94>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a0d8:	4b11      	ldr	r3, [pc, #68]	; (800a120 <USBD_LL_Init+0x94>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a0de:	4b10      	ldr	r3, [pc, #64]	; (800a120 <USBD_LL_Init+0x94>)
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a0e4:	4b0e      	ldr	r3, [pc, #56]	; (800a120 <USBD_LL_Init+0x94>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a0ea:	480d      	ldr	r0, [pc, #52]	; (800a120 <USBD_LL_Init+0x94>)
 800a0ec:	f7f8 ff94 	bl	8003018 <HAL_PCD_Init>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a0f6:	f7f7 ffe9 	bl	80020cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a0fa:	2180      	movs	r1, #128	; 0x80
 800a0fc:	4808      	ldr	r0, [pc, #32]	; (800a120 <USBD_LL_Init+0x94>)
 800a0fe:	f7fa f9ec 	bl	80044da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a102:	2240      	movs	r2, #64	; 0x40
 800a104:	2100      	movs	r1, #0
 800a106:	4806      	ldr	r0, [pc, #24]	; (800a120 <USBD_LL_Init+0x94>)
 800a108:	f7fa f9a0 	bl	800444c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a10c:	2280      	movs	r2, #128	; 0x80
 800a10e:	2101      	movs	r1, #1
 800a110:	4803      	ldr	r0, [pc, #12]	; (800a120 <USBD_LL_Init+0x94>)
 800a112:	f7fa f99b 	bl	800444c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	20002700 	.word	0x20002700

0800a124 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7f9 f889 	bl	8003252 <HAL_PCD_Start>
 800a140:	4603      	mov	r3, r0
 800a142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a144:	7bfb      	ldrb	r3, [r7, #15]
 800a146:	4618      	mov	r0, r3
 800a148:	f000 f942 	bl	800a3d0 <USBD_Get_USB_Status>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a150:	7bbb      	ldrb	r3, [r7, #14]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	4608      	mov	r0, r1
 800a164:	4611      	mov	r1, r2
 800a166:	461a      	mov	r2, r3
 800a168:	4603      	mov	r3, r0
 800a16a:	70fb      	strb	r3, [r7, #3]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70bb      	strb	r3, [r7, #2]
 800a170:	4613      	mov	r3, r2
 800a172:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a182:	78bb      	ldrb	r3, [r7, #2]
 800a184:	883a      	ldrh	r2, [r7, #0]
 800a186:	78f9      	ldrb	r1, [r7, #3]
 800a188:	f7f9 fd5a 	bl	8003c40 <HAL_PCD_EP_Open>
 800a18c:	4603      	mov	r3, r0
 800a18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 f91c 	bl	800a3d0 <USBD_Get_USB_Status>
 800a198:	4603      	mov	r3, r0
 800a19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1c0:	78fa      	ldrb	r2, [r7, #3]
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7f9 fda3 	bl	8003d10 <HAL_PCD_EP_Close>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 f8fd 	bl	800a3d0 <USBD_Get_USB_Status>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1fe:	78fa      	ldrb	r2, [r7, #3]
 800a200:	4611      	mov	r1, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f7f9 fe7b 	bl	8003efe <HAL_PCD_EP_SetStall>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f8de 	bl	800a3d0 <USBD_Get_USB_Status>
 800a214:	4603      	mov	r3, r0
 800a216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a218:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	460b      	mov	r3, r1
 800a22c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a23c:	78fa      	ldrb	r2, [r7, #3]
 800a23e:	4611      	mov	r1, r2
 800a240:	4618      	mov	r0, r3
 800a242:	f7f9 fec0 	bl	8003fc6 <HAL_PCD_EP_ClrStall>
 800a246:	4603      	mov	r3, r0
 800a248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 f8bf 	bl	800a3d0 <USBD_Get_USB_Status>
 800a252:	4603      	mov	r3, r0
 800a254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a256:	7bbb      	ldrb	r3, [r7, #14]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	460b      	mov	r3, r1
 800a26a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a272:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	da0b      	bge.n	800a294 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a282:	68f9      	ldr	r1, [r7, #12]
 800a284:	4613      	mov	r3, r2
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	4413      	add	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	440b      	add	r3, r1
 800a28e:	333e      	adds	r3, #62	; 0x3e
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	e00b      	b.n	800a2ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a294:	78fb      	ldrb	r3, [r7, #3]
 800a296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a29a:	68f9      	ldr	r1, [r7, #12]
 800a29c:	4613      	mov	r3, r2
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	440b      	add	r3, r1
 800a2a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a2aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2d2:	78fa      	ldrb	r2, [r7, #3]
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7f9 fc8d 	bl	8003bf6 <HAL_PCD_SetAddress>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 f874 	bl	800a3d0 <USBD_Get_USB_Status>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b086      	sub	sp, #24
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	60f8      	str	r0, [r7, #12]
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	603b      	str	r3, [r7, #0]
 800a302:	460b      	mov	r3, r1
 800a304:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a314:	7af9      	ldrb	r1, [r7, #11]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	f7f9 fda6 	bl	8003e6a <HAL_PCD_EP_Transmit>
 800a31e:	4603      	mov	r3, r0
 800a320:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	4618      	mov	r0, r3
 800a326:	f000 f853 	bl	800a3d0 <USBD_Get_USB_Status>
 800a32a:	4603      	mov	r3, r0
 800a32c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a32e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	607a      	str	r2, [r7, #4]
 800a342:	603b      	str	r3, [r7, #0]
 800a344:	460b      	mov	r3, r1
 800a346:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a356:	7af9      	ldrb	r1, [r7, #11]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	f7f9 fd22 	bl	8003da4 <HAL_PCD_EP_Receive>
 800a360:	4603      	mov	r3, r0
 800a362:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a364:	7dfb      	ldrb	r3, [r7, #23]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f832 	bl	800a3d0 <USBD_Get_USB_Status>
 800a36c:	4603      	mov	r3, r0
 800a36e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a370:	7dbb      	ldrb	r3, [r7, #22]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	460b      	mov	r3, r1
 800a384:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a38c:	78fa      	ldrb	r2, [r7, #3]
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f7f9 fd52 	bl	8003e3a <HAL_PCD_EP_GetRxCount>
 800a396:	4603      	mov	r3, r0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3a8:	4b03      	ldr	r3, [pc, #12]	; (800a3b8 <USBD_static_malloc+0x18>)
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	20002c0c 	.word	0x20002c0c

0800a3bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]

}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	d817      	bhi.n	800a414 <USBD_Get_USB_Status+0x44>
 800a3e4:	a201      	add	r2, pc, #4	; (adr r2, 800a3ec <USBD_Get_USB_Status+0x1c>)
 800a3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ea:	bf00      	nop
 800a3ec:	0800a3fd 	.word	0x0800a3fd
 800a3f0:	0800a403 	.word	0x0800a403
 800a3f4:	0800a409 	.word	0x0800a409
 800a3f8:	0800a40f 	.word	0x0800a40f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a400:	e00b      	b.n	800a41a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a402:	2303      	movs	r3, #3
 800a404:	73fb      	strb	r3, [r7, #15]
    break;
 800a406:	e008      	b.n	800a41a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a408:	2301      	movs	r3, #1
 800a40a:	73fb      	strb	r3, [r7, #15]
    break;
 800a40c:	e005      	b.n	800a41a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a40e:	2303      	movs	r3, #3
 800a410:	73fb      	strb	r3, [r7, #15]
    break;
 800a412:	e002      	b.n	800a41a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a414:	2303      	movs	r3, #3
 800a416:	73fb      	strb	r3, [r7, #15]
    break;
 800a418:	bf00      	nop
  }
  return usb_status;
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <_ZdlPvj>:
 800a428:	f000 b800 	b.w	800a42c <_ZdlPv>

0800a42c <_ZdlPv>:
 800a42c:	f000 b832 	b.w	800a494 <free>

0800a430 <__errno>:
 800a430:	4b01      	ldr	r3, [pc, #4]	; (800a438 <__errno+0x8>)
 800a432:	6818      	ldr	r0, [r3, #0]
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	200000fc 	.word	0x200000fc

0800a43c <__libc_init_array>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	4d0d      	ldr	r5, [pc, #52]	; (800a474 <__libc_init_array+0x38>)
 800a440:	4c0d      	ldr	r4, [pc, #52]	; (800a478 <__libc_init_array+0x3c>)
 800a442:	1b64      	subs	r4, r4, r5
 800a444:	10a4      	asrs	r4, r4, #2
 800a446:	2600      	movs	r6, #0
 800a448:	42a6      	cmp	r6, r4
 800a44a:	d109      	bne.n	800a460 <__libc_init_array+0x24>
 800a44c:	4d0b      	ldr	r5, [pc, #44]	; (800a47c <__libc_init_array+0x40>)
 800a44e:	4c0c      	ldr	r4, [pc, #48]	; (800a480 <__libc_init_array+0x44>)
 800a450:	f005 f8d0 	bl	800f5f4 <_init>
 800a454:	1b64      	subs	r4, r4, r5
 800a456:	10a4      	asrs	r4, r4, #2
 800a458:	2600      	movs	r6, #0
 800a45a:	42a6      	cmp	r6, r4
 800a45c:	d105      	bne.n	800a46a <__libc_init_array+0x2e>
 800a45e:	bd70      	pop	{r4, r5, r6, pc}
 800a460:	f855 3b04 	ldr.w	r3, [r5], #4
 800a464:	4798      	blx	r3
 800a466:	3601      	adds	r6, #1
 800a468:	e7ee      	b.n	800a448 <__libc_init_array+0xc>
 800a46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46e:	4798      	blx	r3
 800a470:	3601      	adds	r6, #1
 800a472:	e7f2      	b.n	800a45a <__libc_init_array+0x1e>
 800a474:	0801018c 	.word	0x0801018c
 800a478:	0801018c 	.word	0x0801018c
 800a47c:	0801018c 	.word	0x0801018c
 800a480:	08010194 	.word	0x08010194

0800a484 <malloc>:
 800a484:	4b02      	ldr	r3, [pc, #8]	; (800a490 <malloc+0xc>)
 800a486:	4601      	mov	r1, r0
 800a488:	6818      	ldr	r0, [r3, #0]
 800a48a:	f000 b88d 	b.w	800a5a8 <_malloc_r>
 800a48e:	bf00      	nop
 800a490:	200000fc 	.word	0x200000fc

0800a494 <free>:
 800a494:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <free+0xc>)
 800a496:	4601      	mov	r1, r0
 800a498:	6818      	ldr	r0, [r3, #0]
 800a49a:	f000 b819 	b.w	800a4d0 <_free_r>
 800a49e:	bf00      	nop
 800a4a0:	200000fc 	.word	0x200000fc

0800a4a4 <memcpy>:
 800a4a4:	440a      	add	r2, r1
 800a4a6:	4291      	cmp	r1, r2
 800a4a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4ac:	d100      	bne.n	800a4b0 <memcpy+0xc>
 800a4ae:	4770      	bx	lr
 800a4b0:	b510      	push	{r4, lr}
 800a4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ba:	4291      	cmp	r1, r2
 800a4bc:	d1f9      	bne.n	800a4b2 <memcpy+0xe>
 800a4be:	bd10      	pop	{r4, pc}

0800a4c0 <memset>:
 800a4c0:	4402      	add	r2, r0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d100      	bne.n	800a4ca <memset+0xa>
 800a4c8:	4770      	bx	lr
 800a4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ce:	e7f9      	b.n	800a4c4 <memset+0x4>

0800a4d0 <_free_r>:
 800a4d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4d2:	2900      	cmp	r1, #0
 800a4d4:	d044      	beq.n	800a560 <_free_r+0x90>
 800a4d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4da:	9001      	str	r0, [sp, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f1a1 0404 	sub.w	r4, r1, #4
 800a4e2:	bfb8      	it	lt
 800a4e4:	18e4      	addlt	r4, r4, r3
 800a4e6:	f003 f8d9 	bl	800d69c <__malloc_lock>
 800a4ea:	4a1e      	ldr	r2, [pc, #120]	; (800a564 <_free_r+0x94>)
 800a4ec:	9801      	ldr	r0, [sp, #4]
 800a4ee:	6813      	ldr	r3, [r2, #0]
 800a4f0:	b933      	cbnz	r3, 800a500 <_free_r+0x30>
 800a4f2:	6063      	str	r3, [r4, #4]
 800a4f4:	6014      	str	r4, [r2, #0]
 800a4f6:	b003      	add	sp, #12
 800a4f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4fc:	f003 b8d4 	b.w	800d6a8 <__malloc_unlock>
 800a500:	42a3      	cmp	r3, r4
 800a502:	d908      	bls.n	800a516 <_free_r+0x46>
 800a504:	6825      	ldr	r5, [r4, #0]
 800a506:	1961      	adds	r1, r4, r5
 800a508:	428b      	cmp	r3, r1
 800a50a:	bf01      	itttt	eq
 800a50c:	6819      	ldreq	r1, [r3, #0]
 800a50e:	685b      	ldreq	r3, [r3, #4]
 800a510:	1949      	addeq	r1, r1, r5
 800a512:	6021      	streq	r1, [r4, #0]
 800a514:	e7ed      	b.n	800a4f2 <_free_r+0x22>
 800a516:	461a      	mov	r2, r3
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	b10b      	cbz	r3, 800a520 <_free_r+0x50>
 800a51c:	42a3      	cmp	r3, r4
 800a51e:	d9fa      	bls.n	800a516 <_free_r+0x46>
 800a520:	6811      	ldr	r1, [r2, #0]
 800a522:	1855      	adds	r5, r2, r1
 800a524:	42a5      	cmp	r5, r4
 800a526:	d10b      	bne.n	800a540 <_free_r+0x70>
 800a528:	6824      	ldr	r4, [r4, #0]
 800a52a:	4421      	add	r1, r4
 800a52c:	1854      	adds	r4, r2, r1
 800a52e:	42a3      	cmp	r3, r4
 800a530:	6011      	str	r1, [r2, #0]
 800a532:	d1e0      	bne.n	800a4f6 <_free_r+0x26>
 800a534:	681c      	ldr	r4, [r3, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	6053      	str	r3, [r2, #4]
 800a53a:	4421      	add	r1, r4
 800a53c:	6011      	str	r1, [r2, #0]
 800a53e:	e7da      	b.n	800a4f6 <_free_r+0x26>
 800a540:	d902      	bls.n	800a548 <_free_r+0x78>
 800a542:	230c      	movs	r3, #12
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	e7d6      	b.n	800a4f6 <_free_r+0x26>
 800a548:	6825      	ldr	r5, [r4, #0]
 800a54a:	1961      	adds	r1, r4, r5
 800a54c:	428b      	cmp	r3, r1
 800a54e:	bf04      	itt	eq
 800a550:	6819      	ldreq	r1, [r3, #0]
 800a552:	685b      	ldreq	r3, [r3, #4]
 800a554:	6063      	str	r3, [r4, #4]
 800a556:	bf04      	itt	eq
 800a558:	1949      	addeq	r1, r1, r5
 800a55a:	6021      	streq	r1, [r4, #0]
 800a55c:	6054      	str	r4, [r2, #4]
 800a55e:	e7ca      	b.n	800a4f6 <_free_r+0x26>
 800a560:	b003      	add	sp, #12
 800a562:	bd30      	pop	{r4, r5, pc}
 800a564:	20002e2c 	.word	0x20002e2c

0800a568 <sbrk_aligned>:
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	4e0e      	ldr	r6, [pc, #56]	; (800a5a4 <sbrk_aligned+0x3c>)
 800a56c:	460c      	mov	r4, r1
 800a56e:	6831      	ldr	r1, [r6, #0]
 800a570:	4605      	mov	r5, r0
 800a572:	b911      	cbnz	r1, 800a57a <sbrk_aligned+0x12>
 800a574:	f000 ff06 	bl	800b384 <_sbrk_r>
 800a578:	6030      	str	r0, [r6, #0]
 800a57a:	4621      	mov	r1, r4
 800a57c:	4628      	mov	r0, r5
 800a57e:	f000 ff01 	bl	800b384 <_sbrk_r>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	d00a      	beq.n	800a59c <sbrk_aligned+0x34>
 800a586:	1cc4      	adds	r4, r0, #3
 800a588:	f024 0403 	bic.w	r4, r4, #3
 800a58c:	42a0      	cmp	r0, r4
 800a58e:	d007      	beq.n	800a5a0 <sbrk_aligned+0x38>
 800a590:	1a21      	subs	r1, r4, r0
 800a592:	4628      	mov	r0, r5
 800a594:	f000 fef6 	bl	800b384 <_sbrk_r>
 800a598:	3001      	adds	r0, #1
 800a59a:	d101      	bne.n	800a5a0 <sbrk_aligned+0x38>
 800a59c:	f04f 34ff 	mov.w	r4, #4294967295
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	bd70      	pop	{r4, r5, r6, pc}
 800a5a4:	20002e30 	.word	0x20002e30

0800a5a8 <_malloc_r>:
 800a5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ac:	1ccd      	adds	r5, r1, #3
 800a5ae:	f025 0503 	bic.w	r5, r5, #3
 800a5b2:	3508      	adds	r5, #8
 800a5b4:	2d0c      	cmp	r5, #12
 800a5b6:	bf38      	it	cc
 800a5b8:	250c      	movcc	r5, #12
 800a5ba:	2d00      	cmp	r5, #0
 800a5bc:	4607      	mov	r7, r0
 800a5be:	db01      	blt.n	800a5c4 <_malloc_r+0x1c>
 800a5c0:	42a9      	cmp	r1, r5
 800a5c2:	d905      	bls.n	800a5d0 <_malloc_r+0x28>
 800a5c4:	230c      	movs	r3, #12
 800a5c6:	603b      	str	r3, [r7, #0]
 800a5c8:	2600      	movs	r6, #0
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d0:	4e2e      	ldr	r6, [pc, #184]	; (800a68c <_malloc_r+0xe4>)
 800a5d2:	f003 f863 	bl	800d69c <__malloc_lock>
 800a5d6:	6833      	ldr	r3, [r6, #0]
 800a5d8:	461c      	mov	r4, r3
 800a5da:	bb34      	cbnz	r4, 800a62a <_malloc_r+0x82>
 800a5dc:	4629      	mov	r1, r5
 800a5de:	4638      	mov	r0, r7
 800a5e0:	f7ff ffc2 	bl	800a568 <sbrk_aligned>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	d14d      	bne.n	800a686 <_malloc_r+0xde>
 800a5ea:	6834      	ldr	r4, [r6, #0]
 800a5ec:	4626      	mov	r6, r4
 800a5ee:	2e00      	cmp	r6, #0
 800a5f0:	d140      	bne.n	800a674 <_malloc_r+0xcc>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	eb04 0803 	add.w	r8, r4, r3
 800a5fc:	f000 fec2 	bl	800b384 <_sbrk_r>
 800a600:	4580      	cmp	r8, r0
 800a602:	d13a      	bne.n	800a67a <_malloc_r+0xd2>
 800a604:	6821      	ldr	r1, [r4, #0]
 800a606:	3503      	adds	r5, #3
 800a608:	1a6d      	subs	r5, r5, r1
 800a60a:	f025 0503 	bic.w	r5, r5, #3
 800a60e:	3508      	adds	r5, #8
 800a610:	2d0c      	cmp	r5, #12
 800a612:	bf38      	it	cc
 800a614:	250c      	movcc	r5, #12
 800a616:	4629      	mov	r1, r5
 800a618:	4638      	mov	r0, r7
 800a61a:	f7ff ffa5 	bl	800a568 <sbrk_aligned>
 800a61e:	3001      	adds	r0, #1
 800a620:	d02b      	beq.n	800a67a <_malloc_r+0xd2>
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	442b      	add	r3, r5
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	e00e      	b.n	800a648 <_malloc_r+0xa0>
 800a62a:	6822      	ldr	r2, [r4, #0]
 800a62c:	1b52      	subs	r2, r2, r5
 800a62e:	d41e      	bmi.n	800a66e <_malloc_r+0xc6>
 800a630:	2a0b      	cmp	r2, #11
 800a632:	d916      	bls.n	800a662 <_malloc_r+0xba>
 800a634:	1961      	adds	r1, r4, r5
 800a636:	42a3      	cmp	r3, r4
 800a638:	6025      	str	r5, [r4, #0]
 800a63a:	bf18      	it	ne
 800a63c:	6059      	strne	r1, [r3, #4]
 800a63e:	6863      	ldr	r3, [r4, #4]
 800a640:	bf08      	it	eq
 800a642:	6031      	streq	r1, [r6, #0]
 800a644:	5162      	str	r2, [r4, r5]
 800a646:	604b      	str	r3, [r1, #4]
 800a648:	4638      	mov	r0, r7
 800a64a:	f104 060b 	add.w	r6, r4, #11
 800a64e:	f003 f82b 	bl	800d6a8 <__malloc_unlock>
 800a652:	f026 0607 	bic.w	r6, r6, #7
 800a656:	1d23      	adds	r3, r4, #4
 800a658:	1af2      	subs	r2, r6, r3
 800a65a:	d0b6      	beq.n	800a5ca <_malloc_r+0x22>
 800a65c:	1b9b      	subs	r3, r3, r6
 800a65e:	50a3      	str	r3, [r4, r2]
 800a660:	e7b3      	b.n	800a5ca <_malloc_r+0x22>
 800a662:	6862      	ldr	r2, [r4, #4]
 800a664:	42a3      	cmp	r3, r4
 800a666:	bf0c      	ite	eq
 800a668:	6032      	streq	r2, [r6, #0]
 800a66a:	605a      	strne	r2, [r3, #4]
 800a66c:	e7ec      	b.n	800a648 <_malloc_r+0xa0>
 800a66e:	4623      	mov	r3, r4
 800a670:	6864      	ldr	r4, [r4, #4]
 800a672:	e7b2      	b.n	800a5da <_malloc_r+0x32>
 800a674:	4634      	mov	r4, r6
 800a676:	6876      	ldr	r6, [r6, #4]
 800a678:	e7b9      	b.n	800a5ee <_malloc_r+0x46>
 800a67a:	230c      	movs	r3, #12
 800a67c:	603b      	str	r3, [r7, #0]
 800a67e:	4638      	mov	r0, r7
 800a680:	f003 f812 	bl	800d6a8 <__malloc_unlock>
 800a684:	e7a1      	b.n	800a5ca <_malloc_r+0x22>
 800a686:	6025      	str	r5, [r4, #0]
 800a688:	e7de      	b.n	800a648 <_malloc_r+0xa0>
 800a68a:	bf00      	nop
 800a68c:	20002e2c 	.word	0x20002e2c

0800a690 <__cvt>:
 800a690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a694:	ec55 4b10 	vmov	r4, r5, d0
 800a698:	2d00      	cmp	r5, #0
 800a69a:	460e      	mov	r6, r1
 800a69c:	4619      	mov	r1, r3
 800a69e:	462b      	mov	r3, r5
 800a6a0:	bfbb      	ittet	lt
 800a6a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a6a6:	461d      	movlt	r5, r3
 800a6a8:	2300      	movge	r3, #0
 800a6aa:	232d      	movlt	r3, #45	; 0x2d
 800a6ac:	700b      	strb	r3, [r1, #0]
 800a6ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6b4:	4691      	mov	r9, r2
 800a6b6:	f023 0820 	bic.w	r8, r3, #32
 800a6ba:	bfbc      	itt	lt
 800a6bc:	4622      	movlt	r2, r4
 800a6be:	4614      	movlt	r4, r2
 800a6c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6c4:	d005      	beq.n	800a6d2 <__cvt+0x42>
 800a6c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a6ca:	d100      	bne.n	800a6ce <__cvt+0x3e>
 800a6cc:	3601      	adds	r6, #1
 800a6ce:	2102      	movs	r1, #2
 800a6d0:	e000      	b.n	800a6d4 <__cvt+0x44>
 800a6d2:	2103      	movs	r1, #3
 800a6d4:	ab03      	add	r3, sp, #12
 800a6d6:	9301      	str	r3, [sp, #4]
 800a6d8:	ab02      	add	r3, sp, #8
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	ec45 4b10 	vmov	d0, r4, r5
 800a6e0:	4653      	mov	r3, sl
 800a6e2:	4632      	mov	r2, r6
 800a6e4:	f001 fe54 	bl	800c390 <_dtoa_r>
 800a6e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	d102      	bne.n	800a6f6 <__cvt+0x66>
 800a6f0:	f019 0f01 	tst.w	r9, #1
 800a6f4:	d022      	beq.n	800a73c <__cvt+0xac>
 800a6f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6fa:	eb07 0906 	add.w	r9, r7, r6
 800a6fe:	d110      	bne.n	800a722 <__cvt+0x92>
 800a700:	783b      	ldrb	r3, [r7, #0]
 800a702:	2b30      	cmp	r3, #48	; 0x30
 800a704:	d10a      	bne.n	800a71c <__cvt+0x8c>
 800a706:	2200      	movs	r2, #0
 800a708:	2300      	movs	r3, #0
 800a70a:	4620      	mov	r0, r4
 800a70c:	4629      	mov	r1, r5
 800a70e:	f7f6 f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 800a712:	b918      	cbnz	r0, 800a71c <__cvt+0x8c>
 800a714:	f1c6 0601 	rsb	r6, r6, #1
 800a718:	f8ca 6000 	str.w	r6, [sl]
 800a71c:	f8da 3000 	ldr.w	r3, [sl]
 800a720:	4499      	add	r9, r3
 800a722:	2200      	movs	r2, #0
 800a724:	2300      	movs	r3, #0
 800a726:	4620      	mov	r0, r4
 800a728:	4629      	mov	r1, r5
 800a72a:	f7f6 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a72e:	b108      	cbz	r0, 800a734 <__cvt+0xa4>
 800a730:	f8cd 900c 	str.w	r9, [sp, #12]
 800a734:	2230      	movs	r2, #48	; 0x30
 800a736:	9b03      	ldr	r3, [sp, #12]
 800a738:	454b      	cmp	r3, r9
 800a73a:	d307      	bcc.n	800a74c <__cvt+0xbc>
 800a73c:	9b03      	ldr	r3, [sp, #12]
 800a73e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a740:	1bdb      	subs	r3, r3, r7
 800a742:	4638      	mov	r0, r7
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	b004      	add	sp, #16
 800a748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74c:	1c59      	adds	r1, r3, #1
 800a74e:	9103      	str	r1, [sp, #12]
 800a750:	701a      	strb	r2, [r3, #0]
 800a752:	e7f0      	b.n	800a736 <__cvt+0xa6>

0800a754 <__exponent>:
 800a754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a756:	4603      	mov	r3, r0
 800a758:	2900      	cmp	r1, #0
 800a75a:	bfb8      	it	lt
 800a75c:	4249      	neglt	r1, r1
 800a75e:	f803 2b02 	strb.w	r2, [r3], #2
 800a762:	bfb4      	ite	lt
 800a764:	222d      	movlt	r2, #45	; 0x2d
 800a766:	222b      	movge	r2, #43	; 0x2b
 800a768:	2909      	cmp	r1, #9
 800a76a:	7042      	strb	r2, [r0, #1]
 800a76c:	dd2a      	ble.n	800a7c4 <__exponent+0x70>
 800a76e:	f10d 0407 	add.w	r4, sp, #7
 800a772:	46a4      	mov	ip, r4
 800a774:	270a      	movs	r7, #10
 800a776:	46a6      	mov	lr, r4
 800a778:	460a      	mov	r2, r1
 800a77a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a77e:	fb07 1516 	mls	r5, r7, r6, r1
 800a782:	3530      	adds	r5, #48	; 0x30
 800a784:	2a63      	cmp	r2, #99	; 0x63
 800a786:	f104 34ff 	add.w	r4, r4, #4294967295
 800a78a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a78e:	4631      	mov	r1, r6
 800a790:	dcf1      	bgt.n	800a776 <__exponent+0x22>
 800a792:	3130      	adds	r1, #48	; 0x30
 800a794:	f1ae 0502 	sub.w	r5, lr, #2
 800a798:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a79c:	1c44      	adds	r4, r0, #1
 800a79e:	4629      	mov	r1, r5
 800a7a0:	4561      	cmp	r1, ip
 800a7a2:	d30a      	bcc.n	800a7ba <__exponent+0x66>
 800a7a4:	f10d 0209 	add.w	r2, sp, #9
 800a7a8:	eba2 020e 	sub.w	r2, r2, lr
 800a7ac:	4565      	cmp	r5, ip
 800a7ae:	bf88      	it	hi
 800a7b0:	2200      	movhi	r2, #0
 800a7b2:	4413      	add	r3, r2
 800a7b4:	1a18      	subs	r0, r3, r0
 800a7b6:	b003      	add	sp, #12
 800a7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7be:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a7c2:	e7ed      	b.n	800a7a0 <__exponent+0x4c>
 800a7c4:	2330      	movs	r3, #48	; 0x30
 800a7c6:	3130      	adds	r1, #48	; 0x30
 800a7c8:	7083      	strb	r3, [r0, #2]
 800a7ca:	70c1      	strb	r1, [r0, #3]
 800a7cc:	1d03      	adds	r3, r0, #4
 800a7ce:	e7f1      	b.n	800a7b4 <__exponent+0x60>

0800a7d0 <_printf_float>:
 800a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	ed2d 8b02 	vpush	{d8}
 800a7d8:	b08d      	sub	sp, #52	; 0x34
 800a7da:	460c      	mov	r4, r1
 800a7dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a7e0:	4616      	mov	r6, r2
 800a7e2:	461f      	mov	r7, r3
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	f002 ff31 	bl	800d64c <_localeconv_r>
 800a7ea:	f8d0 a000 	ldr.w	sl, [r0]
 800a7ee:	4650      	mov	r0, sl
 800a7f0:	f7f5 fcee 	bl	80001d0 <strlen>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	9305      	str	r3, [sp, #20]
 800a7fc:	f8d8 3000 	ldr.w	r3, [r8]
 800a800:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a804:	3307      	adds	r3, #7
 800a806:	f023 0307 	bic.w	r3, r3, #7
 800a80a:	f103 0208 	add.w	r2, r3, #8
 800a80e:	f8c8 2000 	str.w	r2, [r8]
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a81a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a81e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a822:	9307      	str	r3, [sp, #28]
 800a824:	f8cd 8018 	str.w	r8, [sp, #24]
 800a828:	ee08 0a10 	vmov	s16, r0
 800a82c:	4b9f      	ldr	r3, [pc, #636]	; (800aaac <_printf_float+0x2dc>)
 800a82e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a832:	f04f 32ff 	mov.w	r2, #4294967295
 800a836:	f7f6 f979 	bl	8000b2c <__aeabi_dcmpun>
 800a83a:	bb88      	cbnz	r0, 800a8a0 <_printf_float+0xd0>
 800a83c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a840:	4b9a      	ldr	r3, [pc, #616]	; (800aaac <_printf_float+0x2dc>)
 800a842:	f04f 32ff 	mov.w	r2, #4294967295
 800a846:	f7f6 f953 	bl	8000af0 <__aeabi_dcmple>
 800a84a:	bb48      	cbnz	r0, 800a8a0 <_printf_float+0xd0>
 800a84c:	2200      	movs	r2, #0
 800a84e:	2300      	movs	r3, #0
 800a850:	4640      	mov	r0, r8
 800a852:	4649      	mov	r1, r9
 800a854:	f7f6 f942 	bl	8000adc <__aeabi_dcmplt>
 800a858:	b110      	cbz	r0, 800a860 <_printf_float+0x90>
 800a85a:	232d      	movs	r3, #45	; 0x2d
 800a85c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a860:	4b93      	ldr	r3, [pc, #588]	; (800aab0 <_printf_float+0x2e0>)
 800a862:	4894      	ldr	r0, [pc, #592]	; (800aab4 <_printf_float+0x2e4>)
 800a864:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a868:	bf94      	ite	ls
 800a86a:	4698      	movls	r8, r3
 800a86c:	4680      	movhi	r8, r0
 800a86e:	2303      	movs	r3, #3
 800a870:	6123      	str	r3, [r4, #16]
 800a872:	9b05      	ldr	r3, [sp, #20]
 800a874:	f023 0204 	bic.w	r2, r3, #4
 800a878:	6022      	str	r2, [r4, #0]
 800a87a:	f04f 0900 	mov.w	r9, #0
 800a87e:	9700      	str	r7, [sp, #0]
 800a880:	4633      	mov	r3, r6
 800a882:	aa0b      	add	r2, sp, #44	; 0x2c
 800a884:	4621      	mov	r1, r4
 800a886:	4628      	mov	r0, r5
 800a888:	f000 f9d8 	bl	800ac3c <_printf_common>
 800a88c:	3001      	adds	r0, #1
 800a88e:	f040 8090 	bne.w	800a9b2 <_printf_float+0x1e2>
 800a892:	f04f 30ff 	mov.w	r0, #4294967295
 800a896:	b00d      	add	sp, #52	; 0x34
 800a898:	ecbd 8b02 	vpop	{d8}
 800a89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a0:	4642      	mov	r2, r8
 800a8a2:	464b      	mov	r3, r9
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	f7f6 f940 	bl	8000b2c <__aeabi_dcmpun>
 800a8ac:	b140      	cbz	r0, 800a8c0 <_printf_float+0xf0>
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	bfbc      	itt	lt
 800a8b4:	232d      	movlt	r3, #45	; 0x2d
 800a8b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8ba:	487f      	ldr	r0, [pc, #508]	; (800aab8 <_printf_float+0x2e8>)
 800a8bc:	4b7f      	ldr	r3, [pc, #508]	; (800aabc <_printf_float+0x2ec>)
 800a8be:	e7d1      	b.n	800a864 <_printf_float+0x94>
 800a8c0:	6863      	ldr	r3, [r4, #4]
 800a8c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a8c6:	9206      	str	r2, [sp, #24]
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	d13f      	bne.n	800a94c <_printf_float+0x17c>
 800a8cc:	2306      	movs	r3, #6
 800a8ce:	6063      	str	r3, [r4, #4]
 800a8d0:	9b05      	ldr	r3, [sp, #20]
 800a8d2:	6861      	ldr	r1, [r4, #4]
 800a8d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9303      	str	r3, [sp, #12]
 800a8dc:	ab0a      	add	r3, sp, #40	; 0x28
 800a8de:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a8e2:	ab09      	add	r3, sp, #36	; 0x24
 800a8e4:	ec49 8b10 	vmov	d0, r8, r9
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	6022      	str	r2, [r4, #0]
 800a8ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f7ff fecd 	bl	800a690 <__cvt>
 800a8f6:	9b06      	ldr	r3, [sp, #24]
 800a8f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8fa:	2b47      	cmp	r3, #71	; 0x47
 800a8fc:	4680      	mov	r8, r0
 800a8fe:	d108      	bne.n	800a912 <_printf_float+0x142>
 800a900:	1cc8      	adds	r0, r1, #3
 800a902:	db02      	blt.n	800a90a <_printf_float+0x13a>
 800a904:	6863      	ldr	r3, [r4, #4]
 800a906:	4299      	cmp	r1, r3
 800a908:	dd41      	ble.n	800a98e <_printf_float+0x1be>
 800a90a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a90e:	fa5f fb8b 	uxtb.w	fp, fp
 800a912:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a916:	d820      	bhi.n	800a95a <_printf_float+0x18a>
 800a918:	3901      	subs	r1, #1
 800a91a:	465a      	mov	r2, fp
 800a91c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a920:	9109      	str	r1, [sp, #36]	; 0x24
 800a922:	f7ff ff17 	bl	800a754 <__exponent>
 800a926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a928:	1813      	adds	r3, r2, r0
 800a92a:	2a01      	cmp	r2, #1
 800a92c:	4681      	mov	r9, r0
 800a92e:	6123      	str	r3, [r4, #16]
 800a930:	dc02      	bgt.n	800a938 <_printf_float+0x168>
 800a932:	6822      	ldr	r2, [r4, #0]
 800a934:	07d2      	lsls	r2, r2, #31
 800a936:	d501      	bpl.n	800a93c <_printf_float+0x16c>
 800a938:	3301      	adds	r3, #1
 800a93a:	6123      	str	r3, [r4, #16]
 800a93c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a940:	2b00      	cmp	r3, #0
 800a942:	d09c      	beq.n	800a87e <_printf_float+0xae>
 800a944:	232d      	movs	r3, #45	; 0x2d
 800a946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a94a:	e798      	b.n	800a87e <_printf_float+0xae>
 800a94c:	9a06      	ldr	r2, [sp, #24]
 800a94e:	2a47      	cmp	r2, #71	; 0x47
 800a950:	d1be      	bne.n	800a8d0 <_printf_float+0x100>
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1bc      	bne.n	800a8d0 <_printf_float+0x100>
 800a956:	2301      	movs	r3, #1
 800a958:	e7b9      	b.n	800a8ce <_printf_float+0xfe>
 800a95a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a95e:	d118      	bne.n	800a992 <_printf_float+0x1c2>
 800a960:	2900      	cmp	r1, #0
 800a962:	6863      	ldr	r3, [r4, #4]
 800a964:	dd0b      	ble.n	800a97e <_printf_float+0x1ae>
 800a966:	6121      	str	r1, [r4, #16]
 800a968:	b913      	cbnz	r3, 800a970 <_printf_float+0x1a0>
 800a96a:	6822      	ldr	r2, [r4, #0]
 800a96c:	07d0      	lsls	r0, r2, #31
 800a96e:	d502      	bpl.n	800a976 <_printf_float+0x1a6>
 800a970:	3301      	adds	r3, #1
 800a972:	440b      	add	r3, r1
 800a974:	6123      	str	r3, [r4, #16]
 800a976:	65a1      	str	r1, [r4, #88]	; 0x58
 800a978:	f04f 0900 	mov.w	r9, #0
 800a97c:	e7de      	b.n	800a93c <_printf_float+0x16c>
 800a97e:	b913      	cbnz	r3, 800a986 <_printf_float+0x1b6>
 800a980:	6822      	ldr	r2, [r4, #0]
 800a982:	07d2      	lsls	r2, r2, #31
 800a984:	d501      	bpl.n	800a98a <_printf_float+0x1ba>
 800a986:	3302      	adds	r3, #2
 800a988:	e7f4      	b.n	800a974 <_printf_float+0x1a4>
 800a98a:	2301      	movs	r3, #1
 800a98c:	e7f2      	b.n	800a974 <_printf_float+0x1a4>
 800a98e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a994:	4299      	cmp	r1, r3
 800a996:	db05      	blt.n	800a9a4 <_printf_float+0x1d4>
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	6121      	str	r1, [r4, #16]
 800a99c:	07d8      	lsls	r0, r3, #31
 800a99e:	d5ea      	bpl.n	800a976 <_printf_float+0x1a6>
 800a9a0:	1c4b      	adds	r3, r1, #1
 800a9a2:	e7e7      	b.n	800a974 <_printf_float+0x1a4>
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	bfd4      	ite	le
 800a9a8:	f1c1 0202 	rsble	r2, r1, #2
 800a9ac:	2201      	movgt	r2, #1
 800a9ae:	4413      	add	r3, r2
 800a9b0:	e7e0      	b.n	800a974 <_printf_float+0x1a4>
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	055a      	lsls	r2, r3, #21
 800a9b6:	d407      	bmi.n	800a9c8 <_printf_float+0x1f8>
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	4642      	mov	r2, r8
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4628      	mov	r0, r5
 800a9c0:	47b8      	blx	r7
 800a9c2:	3001      	adds	r0, #1
 800a9c4:	d12c      	bne.n	800aa20 <_printf_float+0x250>
 800a9c6:	e764      	b.n	800a892 <_printf_float+0xc2>
 800a9c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a9cc:	f240 80e0 	bls.w	800ab90 <_printf_float+0x3c0>
 800a9d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f7f6 f876 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d034      	beq.n	800aa4a <_printf_float+0x27a>
 800a9e0:	4a37      	ldr	r2, [pc, #220]	; (800aac0 <_printf_float+0x2f0>)
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	47b8      	blx	r7
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	f43f af51 	beq.w	800a892 <_printf_float+0xc2>
 800a9f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	db02      	blt.n	800a9fe <_printf_float+0x22e>
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	07d8      	lsls	r0, r3, #31
 800a9fc:	d510      	bpl.n	800aa20 <_printf_float+0x250>
 800a9fe:	ee18 3a10 	vmov	r3, s16
 800aa02:	4652      	mov	r2, sl
 800aa04:	4631      	mov	r1, r6
 800aa06:	4628      	mov	r0, r5
 800aa08:	47b8      	blx	r7
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	f43f af41 	beq.w	800a892 <_printf_float+0xc2>
 800aa10:	f04f 0800 	mov.w	r8, #0
 800aa14:	f104 091a 	add.w	r9, r4, #26
 800aa18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	4543      	cmp	r3, r8
 800aa1e:	dc09      	bgt.n	800aa34 <_printf_float+0x264>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	079b      	lsls	r3, r3, #30
 800aa24:	f100 8105 	bmi.w	800ac32 <_printf_float+0x462>
 800aa28:	68e0      	ldr	r0, [r4, #12]
 800aa2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa2c:	4298      	cmp	r0, r3
 800aa2e:	bfb8      	it	lt
 800aa30:	4618      	movlt	r0, r3
 800aa32:	e730      	b.n	800a896 <_printf_float+0xc6>
 800aa34:	2301      	movs	r3, #1
 800aa36:	464a      	mov	r2, r9
 800aa38:	4631      	mov	r1, r6
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	47b8      	blx	r7
 800aa3e:	3001      	adds	r0, #1
 800aa40:	f43f af27 	beq.w	800a892 <_printf_float+0xc2>
 800aa44:	f108 0801 	add.w	r8, r8, #1
 800aa48:	e7e6      	b.n	800aa18 <_printf_float+0x248>
 800aa4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	dc39      	bgt.n	800aac4 <_printf_float+0x2f4>
 800aa50:	4a1b      	ldr	r2, [pc, #108]	; (800aac0 <_printf_float+0x2f0>)
 800aa52:	2301      	movs	r3, #1
 800aa54:	4631      	mov	r1, r6
 800aa56:	4628      	mov	r0, r5
 800aa58:	47b8      	blx	r7
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	f43f af19 	beq.w	800a892 <_printf_float+0xc2>
 800aa60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa64:	4313      	orrs	r3, r2
 800aa66:	d102      	bne.n	800aa6e <_printf_float+0x29e>
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	07d9      	lsls	r1, r3, #31
 800aa6c:	d5d8      	bpl.n	800aa20 <_printf_float+0x250>
 800aa6e:	ee18 3a10 	vmov	r3, s16
 800aa72:	4652      	mov	r2, sl
 800aa74:	4631      	mov	r1, r6
 800aa76:	4628      	mov	r0, r5
 800aa78:	47b8      	blx	r7
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	f43f af09 	beq.w	800a892 <_printf_float+0xc2>
 800aa80:	f04f 0900 	mov.w	r9, #0
 800aa84:	f104 0a1a 	add.w	sl, r4, #26
 800aa88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa8a:	425b      	negs	r3, r3
 800aa8c:	454b      	cmp	r3, r9
 800aa8e:	dc01      	bgt.n	800aa94 <_printf_float+0x2c4>
 800aa90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa92:	e792      	b.n	800a9ba <_printf_float+0x1ea>
 800aa94:	2301      	movs	r3, #1
 800aa96:	4652      	mov	r2, sl
 800aa98:	4631      	mov	r1, r6
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	47b8      	blx	r7
 800aa9e:	3001      	adds	r0, #1
 800aaa0:	f43f aef7 	beq.w	800a892 <_printf_float+0xc2>
 800aaa4:	f109 0901 	add.w	r9, r9, #1
 800aaa8:	e7ee      	b.n	800aa88 <_printf_float+0x2b8>
 800aaaa:	bf00      	nop
 800aaac:	7fefffff 	.word	0x7fefffff
 800aab0:	0800fcd0 	.word	0x0800fcd0
 800aab4:	0800fcd4 	.word	0x0800fcd4
 800aab8:	0800fcdc 	.word	0x0800fcdc
 800aabc:	0800fcd8 	.word	0x0800fcd8
 800aac0:	080100d1 	.word	0x080100d1
 800aac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aac6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aac8:	429a      	cmp	r2, r3
 800aaca:	bfa8      	it	ge
 800aacc:	461a      	movge	r2, r3
 800aace:	2a00      	cmp	r2, #0
 800aad0:	4691      	mov	r9, r2
 800aad2:	dc37      	bgt.n	800ab44 <_printf_float+0x374>
 800aad4:	f04f 0b00 	mov.w	fp, #0
 800aad8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aadc:	f104 021a 	add.w	r2, r4, #26
 800aae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	eba3 0309 	sub.w	r3, r3, r9
 800aae8:	455b      	cmp	r3, fp
 800aaea:	dc33      	bgt.n	800ab54 <_printf_float+0x384>
 800aaec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	db3b      	blt.n	800ab6c <_printf_float+0x39c>
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	07da      	lsls	r2, r3, #31
 800aaf8:	d438      	bmi.n	800ab6c <_printf_float+0x39c>
 800aafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafc:	9a05      	ldr	r2, [sp, #20]
 800aafe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab00:	1a9a      	subs	r2, r3, r2
 800ab02:	eba3 0901 	sub.w	r9, r3, r1
 800ab06:	4591      	cmp	r9, r2
 800ab08:	bfa8      	it	ge
 800ab0a:	4691      	movge	r9, r2
 800ab0c:	f1b9 0f00 	cmp.w	r9, #0
 800ab10:	dc35      	bgt.n	800ab7e <_printf_float+0x3ae>
 800ab12:	f04f 0800 	mov.w	r8, #0
 800ab16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab1a:	f104 0a1a 	add.w	sl, r4, #26
 800ab1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab22:	1a9b      	subs	r3, r3, r2
 800ab24:	eba3 0309 	sub.w	r3, r3, r9
 800ab28:	4543      	cmp	r3, r8
 800ab2a:	f77f af79 	ble.w	800aa20 <_printf_float+0x250>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	4652      	mov	r2, sl
 800ab32:	4631      	mov	r1, r6
 800ab34:	4628      	mov	r0, r5
 800ab36:	47b8      	blx	r7
 800ab38:	3001      	adds	r0, #1
 800ab3a:	f43f aeaa 	beq.w	800a892 <_printf_float+0xc2>
 800ab3e:	f108 0801 	add.w	r8, r8, #1
 800ab42:	e7ec      	b.n	800ab1e <_printf_float+0x34e>
 800ab44:	4613      	mov	r3, r2
 800ab46:	4631      	mov	r1, r6
 800ab48:	4642      	mov	r2, r8
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	47b8      	blx	r7
 800ab4e:	3001      	adds	r0, #1
 800ab50:	d1c0      	bne.n	800aad4 <_printf_float+0x304>
 800ab52:	e69e      	b.n	800a892 <_printf_float+0xc2>
 800ab54:	2301      	movs	r3, #1
 800ab56:	4631      	mov	r1, r6
 800ab58:	4628      	mov	r0, r5
 800ab5a:	9205      	str	r2, [sp, #20]
 800ab5c:	47b8      	blx	r7
 800ab5e:	3001      	adds	r0, #1
 800ab60:	f43f ae97 	beq.w	800a892 <_printf_float+0xc2>
 800ab64:	9a05      	ldr	r2, [sp, #20]
 800ab66:	f10b 0b01 	add.w	fp, fp, #1
 800ab6a:	e7b9      	b.n	800aae0 <_printf_float+0x310>
 800ab6c:	ee18 3a10 	vmov	r3, s16
 800ab70:	4652      	mov	r2, sl
 800ab72:	4631      	mov	r1, r6
 800ab74:	4628      	mov	r0, r5
 800ab76:	47b8      	blx	r7
 800ab78:	3001      	adds	r0, #1
 800ab7a:	d1be      	bne.n	800aafa <_printf_float+0x32a>
 800ab7c:	e689      	b.n	800a892 <_printf_float+0xc2>
 800ab7e:	9a05      	ldr	r2, [sp, #20]
 800ab80:	464b      	mov	r3, r9
 800ab82:	4442      	add	r2, r8
 800ab84:	4631      	mov	r1, r6
 800ab86:	4628      	mov	r0, r5
 800ab88:	47b8      	blx	r7
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	d1c1      	bne.n	800ab12 <_printf_float+0x342>
 800ab8e:	e680      	b.n	800a892 <_printf_float+0xc2>
 800ab90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab92:	2a01      	cmp	r2, #1
 800ab94:	dc01      	bgt.n	800ab9a <_printf_float+0x3ca>
 800ab96:	07db      	lsls	r3, r3, #31
 800ab98:	d538      	bpl.n	800ac0c <_printf_float+0x43c>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	4642      	mov	r2, r8
 800ab9e:	4631      	mov	r1, r6
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b8      	blx	r7
 800aba4:	3001      	adds	r0, #1
 800aba6:	f43f ae74 	beq.w	800a892 <_printf_float+0xc2>
 800abaa:	ee18 3a10 	vmov	r3, s16
 800abae:	4652      	mov	r2, sl
 800abb0:	4631      	mov	r1, r6
 800abb2:	4628      	mov	r0, r5
 800abb4:	47b8      	blx	r7
 800abb6:	3001      	adds	r0, #1
 800abb8:	f43f ae6b 	beq.w	800a892 <_printf_float+0xc2>
 800abbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abc0:	2200      	movs	r2, #0
 800abc2:	2300      	movs	r3, #0
 800abc4:	f7f5 ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 800abc8:	b9d8      	cbnz	r0, 800ac02 <_printf_float+0x432>
 800abca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abcc:	f108 0201 	add.w	r2, r8, #1
 800abd0:	3b01      	subs	r3, #1
 800abd2:	4631      	mov	r1, r6
 800abd4:	4628      	mov	r0, r5
 800abd6:	47b8      	blx	r7
 800abd8:	3001      	adds	r0, #1
 800abda:	d10e      	bne.n	800abfa <_printf_float+0x42a>
 800abdc:	e659      	b.n	800a892 <_printf_float+0xc2>
 800abde:	2301      	movs	r3, #1
 800abe0:	4652      	mov	r2, sl
 800abe2:	4631      	mov	r1, r6
 800abe4:	4628      	mov	r0, r5
 800abe6:	47b8      	blx	r7
 800abe8:	3001      	adds	r0, #1
 800abea:	f43f ae52 	beq.w	800a892 <_printf_float+0xc2>
 800abee:	f108 0801 	add.w	r8, r8, #1
 800abf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf4:	3b01      	subs	r3, #1
 800abf6:	4543      	cmp	r3, r8
 800abf8:	dcf1      	bgt.n	800abde <_printf_float+0x40e>
 800abfa:	464b      	mov	r3, r9
 800abfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac00:	e6dc      	b.n	800a9bc <_printf_float+0x1ec>
 800ac02:	f04f 0800 	mov.w	r8, #0
 800ac06:	f104 0a1a 	add.w	sl, r4, #26
 800ac0a:	e7f2      	b.n	800abf2 <_printf_float+0x422>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	4642      	mov	r2, r8
 800ac10:	e7df      	b.n	800abd2 <_printf_float+0x402>
 800ac12:	2301      	movs	r3, #1
 800ac14:	464a      	mov	r2, r9
 800ac16:	4631      	mov	r1, r6
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b8      	blx	r7
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f43f ae38 	beq.w	800a892 <_printf_float+0xc2>
 800ac22:	f108 0801 	add.w	r8, r8, #1
 800ac26:	68e3      	ldr	r3, [r4, #12]
 800ac28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac2a:	1a5b      	subs	r3, r3, r1
 800ac2c:	4543      	cmp	r3, r8
 800ac2e:	dcf0      	bgt.n	800ac12 <_printf_float+0x442>
 800ac30:	e6fa      	b.n	800aa28 <_printf_float+0x258>
 800ac32:	f04f 0800 	mov.w	r8, #0
 800ac36:	f104 0919 	add.w	r9, r4, #25
 800ac3a:	e7f4      	b.n	800ac26 <_printf_float+0x456>

0800ac3c <_printf_common>:
 800ac3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac40:	4616      	mov	r6, r2
 800ac42:	4699      	mov	r9, r3
 800ac44:	688a      	ldr	r2, [r1, #8]
 800ac46:	690b      	ldr	r3, [r1, #16]
 800ac48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	bfb8      	it	lt
 800ac50:	4613      	movlt	r3, r2
 800ac52:	6033      	str	r3, [r6, #0]
 800ac54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac58:	4607      	mov	r7, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	b10a      	cbz	r2, 800ac62 <_printf_common+0x26>
 800ac5e:	3301      	adds	r3, #1
 800ac60:	6033      	str	r3, [r6, #0]
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	0699      	lsls	r1, r3, #26
 800ac66:	bf42      	ittt	mi
 800ac68:	6833      	ldrmi	r3, [r6, #0]
 800ac6a:	3302      	addmi	r3, #2
 800ac6c:	6033      	strmi	r3, [r6, #0]
 800ac6e:	6825      	ldr	r5, [r4, #0]
 800ac70:	f015 0506 	ands.w	r5, r5, #6
 800ac74:	d106      	bne.n	800ac84 <_printf_common+0x48>
 800ac76:	f104 0a19 	add.w	sl, r4, #25
 800ac7a:	68e3      	ldr	r3, [r4, #12]
 800ac7c:	6832      	ldr	r2, [r6, #0]
 800ac7e:	1a9b      	subs	r3, r3, r2
 800ac80:	42ab      	cmp	r3, r5
 800ac82:	dc26      	bgt.n	800acd2 <_printf_common+0x96>
 800ac84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac88:	1e13      	subs	r3, r2, #0
 800ac8a:	6822      	ldr	r2, [r4, #0]
 800ac8c:	bf18      	it	ne
 800ac8e:	2301      	movne	r3, #1
 800ac90:	0692      	lsls	r2, r2, #26
 800ac92:	d42b      	bmi.n	800acec <_printf_common+0xb0>
 800ac94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac98:	4649      	mov	r1, r9
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	47c0      	blx	r8
 800ac9e:	3001      	adds	r0, #1
 800aca0:	d01e      	beq.n	800ace0 <_printf_common+0xa4>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	68e5      	ldr	r5, [r4, #12]
 800aca6:	6832      	ldr	r2, [r6, #0]
 800aca8:	f003 0306 	and.w	r3, r3, #6
 800acac:	2b04      	cmp	r3, #4
 800acae:	bf08      	it	eq
 800acb0:	1aad      	subeq	r5, r5, r2
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	6922      	ldr	r2, [r4, #16]
 800acb6:	bf0c      	ite	eq
 800acb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acbc:	2500      	movne	r5, #0
 800acbe:	4293      	cmp	r3, r2
 800acc0:	bfc4      	itt	gt
 800acc2:	1a9b      	subgt	r3, r3, r2
 800acc4:	18ed      	addgt	r5, r5, r3
 800acc6:	2600      	movs	r6, #0
 800acc8:	341a      	adds	r4, #26
 800acca:	42b5      	cmp	r5, r6
 800accc:	d11a      	bne.n	800ad04 <_printf_common+0xc8>
 800acce:	2000      	movs	r0, #0
 800acd0:	e008      	b.n	800ace4 <_printf_common+0xa8>
 800acd2:	2301      	movs	r3, #1
 800acd4:	4652      	mov	r2, sl
 800acd6:	4649      	mov	r1, r9
 800acd8:	4638      	mov	r0, r7
 800acda:	47c0      	blx	r8
 800acdc:	3001      	adds	r0, #1
 800acde:	d103      	bne.n	800ace8 <_printf_common+0xac>
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace8:	3501      	adds	r5, #1
 800acea:	e7c6      	b.n	800ac7a <_printf_common+0x3e>
 800acec:	18e1      	adds	r1, r4, r3
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	2030      	movs	r0, #48	; 0x30
 800acf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acf6:	4422      	add	r2, r4
 800acf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad00:	3302      	adds	r3, #2
 800ad02:	e7c7      	b.n	800ac94 <_printf_common+0x58>
 800ad04:	2301      	movs	r3, #1
 800ad06:	4622      	mov	r2, r4
 800ad08:	4649      	mov	r1, r9
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	47c0      	blx	r8
 800ad0e:	3001      	adds	r0, #1
 800ad10:	d0e6      	beq.n	800ace0 <_printf_common+0xa4>
 800ad12:	3601      	adds	r6, #1
 800ad14:	e7d9      	b.n	800acca <_printf_common+0x8e>
	...

0800ad18 <_printf_i>:
 800ad18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad1c:	7e0f      	ldrb	r7, [r1, #24]
 800ad1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad20:	2f78      	cmp	r7, #120	; 0x78
 800ad22:	4691      	mov	r9, r2
 800ad24:	4680      	mov	r8, r0
 800ad26:	460c      	mov	r4, r1
 800ad28:	469a      	mov	sl, r3
 800ad2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad2e:	d807      	bhi.n	800ad40 <_printf_i+0x28>
 800ad30:	2f62      	cmp	r7, #98	; 0x62
 800ad32:	d80a      	bhi.n	800ad4a <_printf_i+0x32>
 800ad34:	2f00      	cmp	r7, #0
 800ad36:	f000 80d8 	beq.w	800aeea <_printf_i+0x1d2>
 800ad3a:	2f58      	cmp	r7, #88	; 0x58
 800ad3c:	f000 80a3 	beq.w	800ae86 <_printf_i+0x16e>
 800ad40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad48:	e03a      	b.n	800adc0 <_printf_i+0xa8>
 800ad4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad4e:	2b15      	cmp	r3, #21
 800ad50:	d8f6      	bhi.n	800ad40 <_printf_i+0x28>
 800ad52:	a101      	add	r1, pc, #4	; (adr r1, 800ad58 <_printf_i+0x40>)
 800ad54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad58:	0800adb1 	.word	0x0800adb1
 800ad5c:	0800adc5 	.word	0x0800adc5
 800ad60:	0800ad41 	.word	0x0800ad41
 800ad64:	0800ad41 	.word	0x0800ad41
 800ad68:	0800ad41 	.word	0x0800ad41
 800ad6c:	0800ad41 	.word	0x0800ad41
 800ad70:	0800adc5 	.word	0x0800adc5
 800ad74:	0800ad41 	.word	0x0800ad41
 800ad78:	0800ad41 	.word	0x0800ad41
 800ad7c:	0800ad41 	.word	0x0800ad41
 800ad80:	0800ad41 	.word	0x0800ad41
 800ad84:	0800aed1 	.word	0x0800aed1
 800ad88:	0800adf5 	.word	0x0800adf5
 800ad8c:	0800aeb3 	.word	0x0800aeb3
 800ad90:	0800ad41 	.word	0x0800ad41
 800ad94:	0800ad41 	.word	0x0800ad41
 800ad98:	0800aef3 	.word	0x0800aef3
 800ad9c:	0800ad41 	.word	0x0800ad41
 800ada0:	0800adf5 	.word	0x0800adf5
 800ada4:	0800ad41 	.word	0x0800ad41
 800ada8:	0800ad41 	.word	0x0800ad41
 800adac:	0800aebb 	.word	0x0800aebb
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	1d1a      	adds	r2, r3, #4
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	602a      	str	r2, [r5, #0]
 800adb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adc0:	2301      	movs	r3, #1
 800adc2:	e0a3      	b.n	800af0c <_printf_i+0x1f4>
 800adc4:	6820      	ldr	r0, [r4, #0]
 800adc6:	6829      	ldr	r1, [r5, #0]
 800adc8:	0606      	lsls	r6, r0, #24
 800adca:	f101 0304 	add.w	r3, r1, #4
 800adce:	d50a      	bpl.n	800ade6 <_printf_i+0xce>
 800add0:	680e      	ldr	r6, [r1, #0]
 800add2:	602b      	str	r3, [r5, #0]
 800add4:	2e00      	cmp	r6, #0
 800add6:	da03      	bge.n	800ade0 <_printf_i+0xc8>
 800add8:	232d      	movs	r3, #45	; 0x2d
 800adda:	4276      	negs	r6, r6
 800addc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ade0:	485e      	ldr	r0, [pc, #376]	; (800af5c <_printf_i+0x244>)
 800ade2:	230a      	movs	r3, #10
 800ade4:	e019      	b.n	800ae1a <_printf_i+0x102>
 800ade6:	680e      	ldr	r6, [r1, #0]
 800ade8:	602b      	str	r3, [r5, #0]
 800adea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800adee:	bf18      	it	ne
 800adf0:	b236      	sxthne	r6, r6
 800adf2:	e7ef      	b.n	800add4 <_printf_i+0xbc>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	6820      	ldr	r0, [r4, #0]
 800adf8:	1d19      	adds	r1, r3, #4
 800adfa:	6029      	str	r1, [r5, #0]
 800adfc:	0601      	lsls	r1, r0, #24
 800adfe:	d501      	bpl.n	800ae04 <_printf_i+0xec>
 800ae00:	681e      	ldr	r6, [r3, #0]
 800ae02:	e002      	b.n	800ae0a <_printf_i+0xf2>
 800ae04:	0646      	lsls	r6, r0, #25
 800ae06:	d5fb      	bpl.n	800ae00 <_printf_i+0xe8>
 800ae08:	881e      	ldrh	r6, [r3, #0]
 800ae0a:	4854      	ldr	r0, [pc, #336]	; (800af5c <_printf_i+0x244>)
 800ae0c:	2f6f      	cmp	r7, #111	; 0x6f
 800ae0e:	bf0c      	ite	eq
 800ae10:	2308      	moveq	r3, #8
 800ae12:	230a      	movne	r3, #10
 800ae14:	2100      	movs	r1, #0
 800ae16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae1a:	6865      	ldr	r5, [r4, #4]
 800ae1c:	60a5      	str	r5, [r4, #8]
 800ae1e:	2d00      	cmp	r5, #0
 800ae20:	bfa2      	ittt	ge
 800ae22:	6821      	ldrge	r1, [r4, #0]
 800ae24:	f021 0104 	bicge.w	r1, r1, #4
 800ae28:	6021      	strge	r1, [r4, #0]
 800ae2a:	b90e      	cbnz	r6, 800ae30 <_printf_i+0x118>
 800ae2c:	2d00      	cmp	r5, #0
 800ae2e:	d04d      	beq.n	800aecc <_printf_i+0x1b4>
 800ae30:	4615      	mov	r5, r2
 800ae32:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae36:	fb03 6711 	mls	r7, r3, r1, r6
 800ae3a:	5dc7      	ldrb	r7, [r0, r7]
 800ae3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae40:	4637      	mov	r7, r6
 800ae42:	42bb      	cmp	r3, r7
 800ae44:	460e      	mov	r6, r1
 800ae46:	d9f4      	bls.n	800ae32 <_printf_i+0x11a>
 800ae48:	2b08      	cmp	r3, #8
 800ae4a:	d10b      	bne.n	800ae64 <_printf_i+0x14c>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	07de      	lsls	r6, r3, #31
 800ae50:	d508      	bpl.n	800ae64 <_printf_i+0x14c>
 800ae52:	6923      	ldr	r3, [r4, #16]
 800ae54:	6861      	ldr	r1, [r4, #4]
 800ae56:	4299      	cmp	r1, r3
 800ae58:	bfde      	ittt	le
 800ae5a:	2330      	movle	r3, #48	; 0x30
 800ae5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae60:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae64:	1b52      	subs	r2, r2, r5
 800ae66:	6122      	str	r2, [r4, #16]
 800ae68:	f8cd a000 	str.w	sl, [sp]
 800ae6c:	464b      	mov	r3, r9
 800ae6e:	aa03      	add	r2, sp, #12
 800ae70:	4621      	mov	r1, r4
 800ae72:	4640      	mov	r0, r8
 800ae74:	f7ff fee2 	bl	800ac3c <_printf_common>
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d14c      	bne.n	800af16 <_printf_i+0x1fe>
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae80:	b004      	add	sp, #16
 800ae82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae86:	4835      	ldr	r0, [pc, #212]	; (800af5c <_printf_i+0x244>)
 800ae88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae8c:	6829      	ldr	r1, [r5, #0]
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae94:	6029      	str	r1, [r5, #0]
 800ae96:	061d      	lsls	r5, r3, #24
 800ae98:	d514      	bpl.n	800aec4 <_printf_i+0x1ac>
 800ae9a:	07df      	lsls	r7, r3, #31
 800ae9c:	bf44      	itt	mi
 800ae9e:	f043 0320 	orrmi.w	r3, r3, #32
 800aea2:	6023      	strmi	r3, [r4, #0]
 800aea4:	b91e      	cbnz	r6, 800aeae <_printf_i+0x196>
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	f023 0320 	bic.w	r3, r3, #32
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	2310      	movs	r3, #16
 800aeb0:	e7b0      	b.n	800ae14 <_printf_i+0xfc>
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	f043 0320 	orr.w	r3, r3, #32
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	2378      	movs	r3, #120	; 0x78
 800aebc:	4828      	ldr	r0, [pc, #160]	; (800af60 <_printf_i+0x248>)
 800aebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aec2:	e7e3      	b.n	800ae8c <_printf_i+0x174>
 800aec4:	0659      	lsls	r1, r3, #25
 800aec6:	bf48      	it	mi
 800aec8:	b2b6      	uxthmi	r6, r6
 800aeca:	e7e6      	b.n	800ae9a <_printf_i+0x182>
 800aecc:	4615      	mov	r5, r2
 800aece:	e7bb      	b.n	800ae48 <_printf_i+0x130>
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	6826      	ldr	r6, [r4, #0]
 800aed4:	6961      	ldr	r1, [r4, #20]
 800aed6:	1d18      	adds	r0, r3, #4
 800aed8:	6028      	str	r0, [r5, #0]
 800aeda:	0635      	lsls	r5, r6, #24
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	d501      	bpl.n	800aee4 <_printf_i+0x1cc>
 800aee0:	6019      	str	r1, [r3, #0]
 800aee2:	e002      	b.n	800aeea <_printf_i+0x1d2>
 800aee4:	0670      	lsls	r0, r6, #25
 800aee6:	d5fb      	bpl.n	800aee0 <_printf_i+0x1c8>
 800aee8:	8019      	strh	r1, [r3, #0]
 800aeea:	2300      	movs	r3, #0
 800aeec:	6123      	str	r3, [r4, #16]
 800aeee:	4615      	mov	r5, r2
 800aef0:	e7ba      	b.n	800ae68 <_printf_i+0x150>
 800aef2:	682b      	ldr	r3, [r5, #0]
 800aef4:	1d1a      	adds	r2, r3, #4
 800aef6:	602a      	str	r2, [r5, #0]
 800aef8:	681d      	ldr	r5, [r3, #0]
 800aefa:	6862      	ldr	r2, [r4, #4]
 800aefc:	2100      	movs	r1, #0
 800aefe:	4628      	mov	r0, r5
 800af00:	f7f5 f96e 	bl	80001e0 <memchr>
 800af04:	b108      	cbz	r0, 800af0a <_printf_i+0x1f2>
 800af06:	1b40      	subs	r0, r0, r5
 800af08:	6060      	str	r0, [r4, #4]
 800af0a:	6863      	ldr	r3, [r4, #4]
 800af0c:	6123      	str	r3, [r4, #16]
 800af0e:	2300      	movs	r3, #0
 800af10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af14:	e7a8      	b.n	800ae68 <_printf_i+0x150>
 800af16:	6923      	ldr	r3, [r4, #16]
 800af18:	462a      	mov	r2, r5
 800af1a:	4649      	mov	r1, r9
 800af1c:	4640      	mov	r0, r8
 800af1e:	47d0      	blx	sl
 800af20:	3001      	adds	r0, #1
 800af22:	d0ab      	beq.n	800ae7c <_printf_i+0x164>
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	079b      	lsls	r3, r3, #30
 800af28:	d413      	bmi.n	800af52 <_printf_i+0x23a>
 800af2a:	68e0      	ldr	r0, [r4, #12]
 800af2c:	9b03      	ldr	r3, [sp, #12]
 800af2e:	4298      	cmp	r0, r3
 800af30:	bfb8      	it	lt
 800af32:	4618      	movlt	r0, r3
 800af34:	e7a4      	b.n	800ae80 <_printf_i+0x168>
 800af36:	2301      	movs	r3, #1
 800af38:	4632      	mov	r2, r6
 800af3a:	4649      	mov	r1, r9
 800af3c:	4640      	mov	r0, r8
 800af3e:	47d0      	blx	sl
 800af40:	3001      	adds	r0, #1
 800af42:	d09b      	beq.n	800ae7c <_printf_i+0x164>
 800af44:	3501      	adds	r5, #1
 800af46:	68e3      	ldr	r3, [r4, #12]
 800af48:	9903      	ldr	r1, [sp, #12]
 800af4a:	1a5b      	subs	r3, r3, r1
 800af4c:	42ab      	cmp	r3, r5
 800af4e:	dcf2      	bgt.n	800af36 <_printf_i+0x21e>
 800af50:	e7eb      	b.n	800af2a <_printf_i+0x212>
 800af52:	2500      	movs	r5, #0
 800af54:	f104 0619 	add.w	r6, r4, #25
 800af58:	e7f5      	b.n	800af46 <_printf_i+0x22e>
 800af5a:	bf00      	nop
 800af5c:	0800fce0 	.word	0x0800fce0
 800af60:	0800fcf1 	.word	0x0800fcf1

0800af64 <_scanf_float>:
 800af64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af68:	b087      	sub	sp, #28
 800af6a:	4617      	mov	r7, r2
 800af6c:	9303      	str	r3, [sp, #12]
 800af6e:	688b      	ldr	r3, [r1, #8]
 800af70:	1e5a      	subs	r2, r3, #1
 800af72:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800af76:	bf83      	ittte	hi
 800af78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800af7c:	195b      	addhi	r3, r3, r5
 800af7e:	9302      	strhi	r3, [sp, #8]
 800af80:	2300      	movls	r3, #0
 800af82:	bf86      	itte	hi
 800af84:	f240 135d 	movwhi	r3, #349	; 0x15d
 800af88:	608b      	strhi	r3, [r1, #8]
 800af8a:	9302      	strls	r3, [sp, #8]
 800af8c:	680b      	ldr	r3, [r1, #0]
 800af8e:	468b      	mov	fp, r1
 800af90:	2500      	movs	r5, #0
 800af92:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800af96:	f84b 3b1c 	str.w	r3, [fp], #28
 800af9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af9e:	4680      	mov	r8, r0
 800afa0:	460c      	mov	r4, r1
 800afa2:	465e      	mov	r6, fp
 800afa4:	46aa      	mov	sl, r5
 800afa6:	46a9      	mov	r9, r5
 800afa8:	9501      	str	r5, [sp, #4]
 800afaa:	68a2      	ldr	r2, [r4, #8]
 800afac:	b152      	cbz	r2, 800afc4 <_scanf_float+0x60>
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	2b4e      	cmp	r3, #78	; 0x4e
 800afb4:	d864      	bhi.n	800b080 <_scanf_float+0x11c>
 800afb6:	2b40      	cmp	r3, #64	; 0x40
 800afb8:	d83c      	bhi.n	800b034 <_scanf_float+0xd0>
 800afba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800afbe:	b2c8      	uxtb	r0, r1
 800afc0:	280e      	cmp	r0, #14
 800afc2:	d93a      	bls.n	800b03a <_scanf_float+0xd6>
 800afc4:	f1b9 0f00 	cmp.w	r9, #0
 800afc8:	d003      	beq.n	800afd2 <_scanf_float+0x6e>
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afd6:	f1ba 0f01 	cmp.w	sl, #1
 800afda:	f200 8113 	bhi.w	800b204 <_scanf_float+0x2a0>
 800afde:	455e      	cmp	r6, fp
 800afe0:	f200 8105 	bhi.w	800b1ee <_scanf_float+0x28a>
 800afe4:	2501      	movs	r5, #1
 800afe6:	4628      	mov	r0, r5
 800afe8:	b007      	add	sp, #28
 800afea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800aff2:	2a0d      	cmp	r2, #13
 800aff4:	d8e6      	bhi.n	800afc4 <_scanf_float+0x60>
 800aff6:	a101      	add	r1, pc, #4	; (adr r1, 800affc <_scanf_float+0x98>)
 800aff8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800affc:	0800b13b 	.word	0x0800b13b
 800b000:	0800afc5 	.word	0x0800afc5
 800b004:	0800afc5 	.word	0x0800afc5
 800b008:	0800afc5 	.word	0x0800afc5
 800b00c:	0800b19b 	.word	0x0800b19b
 800b010:	0800b173 	.word	0x0800b173
 800b014:	0800afc5 	.word	0x0800afc5
 800b018:	0800afc5 	.word	0x0800afc5
 800b01c:	0800b149 	.word	0x0800b149
 800b020:	0800afc5 	.word	0x0800afc5
 800b024:	0800afc5 	.word	0x0800afc5
 800b028:	0800afc5 	.word	0x0800afc5
 800b02c:	0800afc5 	.word	0x0800afc5
 800b030:	0800b101 	.word	0x0800b101
 800b034:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b038:	e7db      	b.n	800aff2 <_scanf_float+0x8e>
 800b03a:	290e      	cmp	r1, #14
 800b03c:	d8c2      	bhi.n	800afc4 <_scanf_float+0x60>
 800b03e:	a001      	add	r0, pc, #4	; (adr r0, 800b044 <_scanf_float+0xe0>)
 800b040:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b044:	0800b0f3 	.word	0x0800b0f3
 800b048:	0800afc5 	.word	0x0800afc5
 800b04c:	0800b0f3 	.word	0x0800b0f3
 800b050:	0800b187 	.word	0x0800b187
 800b054:	0800afc5 	.word	0x0800afc5
 800b058:	0800b0a1 	.word	0x0800b0a1
 800b05c:	0800b0dd 	.word	0x0800b0dd
 800b060:	0800b0dd 	.word	0x0800b0dd
 800b064:	0800b0dd 	.word	0x0800b0dd
 800b068:	0800b0dd 	.word	0x0800b0dd
 800b06c:	0800b0dd 	.word	0x0800b0dd
 800b070:	0800b0dd 	.word	0x0800b0dd
 800b074:	0800b0dd 	.word	0x0800b0dd
 800b078:	0800b0dd 	.word	0x0800b0dd
 800b07c:	0800b0dd 	.word	0x0800b0dd
 800b080:	2b6e      	cmp	r3, #110	; 0x6e
 800b082:	d809      	bhi.n	800b098 <_scanf_float+0x134>
 800b084:	2b60      	cmp	r3, #96	; 0x60
 800b086:	d8b2      	bhi.n	800afee <_scanf_float+0x8a>
 800b088:	2b54      	cmp	r3, #84	; 0x54
 800b08a:	d077      	beq.n	800b17c <_scanf_float+0x218>
 800b08c:	2b59      	cmp	r3, #89	; 0x59
 800b08e:	d199      	bne.n	800afc4 <_scanf_float+0x60>
 800b090:	2d07      	cmp	r5, #7
 800b092:	d197      	bne.n	800afc4 <_scanf_float+0x60>
 800b094:	2508      	movs	r5, #8
 800b096:	e029      	b.n	800b0ec <_scanf_float+0x188>
 800b098:	2b74      	cmp	r3, #116	; 0x74
 800b09a:	d06f      	beq.n	800b17c <_scanf_float+0x218>
 800b09c:	2b79      	cmp	r3, #121	; 0x79
 800b09e:	e7f6      	b.n	800b08e <_scanf_float+0x12a>
 800b0a0:	6821      	ldr	r1, [r4, #0]
 800b0a2:	05c8      	lsls	r0, r1, #23
 800b0a4:	d51a      	bpl.n	800b0dc <_scanf_float+0x178>
 800b0a6:	9b02      	ldr	r3, [sp, #8]
 800b0a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b0ac:	6021      	str	r1, [r4, #0]
 800b0ae:	f109 0901 	add.w	r9, r9, #1
 800b0b2:	b11b      	cbz	r3, 800b0bc <_scanf_float+0x158>
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	3201      	adds	r2, #1
 800b0b8:	9302      	str	r3, [sp, #8]
 800b0ba:	60a2      	str	r2, [r4, #8]
 800b0bc:	68a3      	ldr	r3, [r4, #8]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	60a3      	str	r3, [r4, #8]
 800b0c2:	6923      	ldr	r3, [r4, #16]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	6123      	str	r3, [r4, #16]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	607b      	str	r3, [r7, #4]
 800b0d0:	f340 8084 	ble.w	800b1dc <_scanf_float+0x278>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	603b      	str	r3, [r7, #0]
 800b0da:	e766      	b.n	800afaa <_scanf_float+0x46>
 800b0dc:	eb1a 0f05 	cmn.w	sl, r5
 800b0e0:	f47f af70 	bne.w	800afc4 <_scanf_float+0x60>
 800b0e4:	6822      	ldr	r2, [r4, #0]
 800b0e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b0ea:	6022      	str	r2, [r4, #0]
 800b0ec:	f806 3b01 	strb.w	r3, [r6], #1
 800b0f0:	e7e4      	b.n	800b0bc <_scanf_float+0x158>
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	0610      	lsls	r0, r2, #24
 800b0f6:	f57f af65 	bpl.w	800afc4 <_scanf_float+0x60>
 800b0fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0fe:	e7f4      	b.n	800b0ea <_scanf_float+0x186>
 800b100:	f1ba 0f00 	cmp.w	sl, #0
 800b104:	d10e      	bne.n	800b124 <_scanf_float+0x1c0>
 800b106:	f1b9 0f00 	cmp.w	r9, #0
 800b10a:	d10e      	bne.n	800b12a <_scanf_float+0x1c6>
 800b10c:	6822      	ldr	r2, [r4, #0]
 800b10e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b112:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b116:	d108      	bne.n	800b12a <_scanf_float+0x1c6>
 800b118:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b11c:	6022      	str	r2, [r4, #0]
 800b11e:	f04f 0a01 	mov.w	sl, #1
 800b122:	e7e3      	b.n	800b0ec <_scanf_float+0x188>
 800b124:	f1ba 0f02 	cmp.w	sl, #2
 800b128:	d055      	beq.n	800b1d6 <_scanf_float+0x272>
 800b12a:	2d01      	cmp	r5, #1
 800b12c:	d002      	beq.n	800b134 <_scanf_float+0x1d0>
 800b12e:	2d04      	cmp	r5, #4
 800b130:	f47f af48 	bne.w	800afc4 <_scanf_float+0x60>
 800b134:	3501      	adds	r5, #1
 800b136:	b2ed      	uxtb	r5, r5
 800b138:	e7d8      	b.n	800b0ec <_scanf_float+0x188>
 800b13a:	f1ba 0f01 	cmp.w	sl, #1
 800b13e:	f47f af41 	bne.w	800afc4 <_scanf_float+0x60>
 800b142:	f04f 0a02 	mov.w	sl, #2
 800b146:	e7d1      	b.n	800b0ec <_scanf_float+0x188>
 800b148:	b97d      	cbnz	r5, 800b16a <_scanf_float+0x206>
 800b14a:	f1b9 0f00 	cmp.w	r9, #0
 800b14e:	f47f af3c 	bne.w	800afca <_scanf_float+0x66>
 800b152:	6822      	ldr	r2, [r4, #0]
 800b154:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b158:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b15c:	f47f af39 	bne.w	800afd2 <_scanf_float+0x6e>
 800b160:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b164:	6022      	str	r2, [r4, #0]
 800b166:	2501      	movs	r5, #1
 800b168:	e7c0      	b.n	800b0ec <_scanf_float+0x188>
 800b16a:	2d03      	cmp	r5, #3
 800b16c:	d0e2      	beq.n	800b134 <_scanf_float+0x1d0>
 800b16e:	2d05      	cmp	r5, #5
 800b170:	e7de      	b.n	800b130 <_scanf_float+0x1cc>
 800b172:	2d02      	cmp	r5, #2
 800b174:	f47f af26 	bne.w	800afc4 <_scanf_float+0x60>
 800b178:	2503      	movs	r5, #3
 800b17a:	e7b7      	b.n	800b0ec <_scanf_float+0x188>
 800b17c:	2d06      	cmp	r5, #6
 800b17e:	f47f af21 	bne.w	800afc4 <_scanf_float+0x60>
 800b182:	2507      	movs	r5, #7
 800b184:	e7b2      	b.n	800b0ec <_scanf_float+0x188>
 800b186:	6822      	ldr	r2, [r4, #0]
 800b188:	0591      	lsls	r1, r2, #22
 800b18a:	f57f af1b 	bpl.w	800afc4 <_scanf_float+0x60>
 800b18e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b192:	6022      	str	r2, [r4, #0]
 800b194:	f8cd 9004 	str.w	r9, [sp, #4]
 800b198:	e7a8      	b.n	800b0ec <_scanf_float+0x188>
 800b19a:	6822      	ldr	r2, [r4, #0]
 800b19c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b1a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b1a4:	d006      	beq.n	800b1b4 <_scanf_float+0x250>
 800b1a6:	0550      	lsls	r0, r2, #21
 800b1a8:	f57f af0c 	bpl.w	800afc4 <_scanf_float+0x60>
 800b1ac:	f1b9 0f00 	cmp.w	r9, #0
 800b1b0:	f43f af0f 	beq.w	800afd2 <_scanf_float+0x6e>
 800b1b4:	0591      	lsls	r1, r2, #22
 800b1b6:	bf58      	it	pl
 800b1b8:	9901      	ldrpl	r1, [sp, #4]
 800b1ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b1be:	bf58      	it	pl
 800b1c0:	eba9 0101 	subpl.w	r1, r9, r1
 800b1c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b1c8:	bf58      	it	pl
 800b1ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b1ce:	6022      	str	r2, [r4, #0]
 800b1d0:	f04f 0900 	mov.w	r9, #0
 800b1d4:	e78a      	b.n	800b0ec <_scanf_float+0x188>
 800b1d6:	f04f 0a03 	mov.w	sl, #3
 800b1da:	e787      	b.n	800b0ec <_scanf_float+0x188>
 800b1dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b1e0:	4639      	mov	r1, r7
 800b1e2:	4640      	mov	r0, r8
 800b1e4:	4798      	blx	r3
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f43f aedf 	beq.w	800afaa <_scanf_float+0x46>
 800b1ec:	e6ea      	b.n	800afc4 <_scanf_float+0x60>
 800b1ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1f6:	463a      	mov	r2, r7
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	4798      	blx	r3
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	6123      	str	r3, [r4, #16]
 800b202:	e6ec      	b.n	800afde <_scanf_float+0x7a>
 800b204:	1e6b      	subs	r3, r5, #1
 800b206:	2b06      	cmp	r3, #6
 800b208:	d825      	bhi.n	800b256 <_scanf_float+0x2f2>
 800b20a:	2d02      	cmp	r5, #2
 800b20c:	d836      	bhi.n	800b27c <_scanf_float+0x318>
 800b20e:	455e      	cmp	r6, fp
 800b210:	f67f aee8 	bls.w	800afe4 <_scanf_float+0x80>
 800b214:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b218:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b21c:	463a      	mov	r2, r7
 800b21e:	4640      	mov	r0, r8
 800b220:	4798      	blx	r3
 800b222:	6923      	ldr	r3, [r4, #16]
 800b224:	3b01      	subs	r3, #1
 800b226:	6123      	str	r3, [r4, #16]
 800b228:	e7f1      	b.n	800b20e <_scanf_float+0x2aa>
 800b22a:	9802      	ldr	r0, [sp, #8]
 800b22c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b230:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b234:	9002      	str	r0, [sp, #8]
 800b236:	463a      	mov	r2, r7
 800b238:	4640      	mov	r0, r8
 800b23a:	4798      	blx	r3
 800b23c:	6923      	ldr	r3, [r4, #16]
 800b23e:	3b01      	subs	r3, #1
 800b240:	6123      	str	r3, [r4, #16]
 800b242:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b246:	fa5f fa8a 	uxtb.w	sl, sl
 800b24a:	f1ba 0f02 	cmp.w	sl, #2
 800b24e:	d1ec      	bne.n	800b22a <_scanf_float+0x2c6>
 800b250:	3d03      	subs	r5, #3
 800b252:	b2ed      	uxtb	r5, r5
 800b254:	1b76      	subs	r6, r6, r5
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	05da      	lsls	r2, r3, #23
 800b25a:	d52f      	bpl.n	800b2bc <_scanf_float+0x358>
 800b25c:	055b      	lsls	r3, r3, #21
 800b25e:	d510      	bpl.n	800b282 <_scanf_float+0x31e>
 800b260:	455e      	cmp	r6, fp
 800b262:	f67f aebf 	bls.w	800afe4 <_scanf_float+0x80>
 800b266:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b26a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b26e:	463a      	mov	r2, r7
 800b270:	4640      	mov	r0, r8
 800b272:	4798      	blx	r3
 800b274:	6923      	ldr	r3, [r4, #16]
 800b276:	3b01      	subs	r3, #1
 800b278:	6123      	str	r3, [r4, #16]
 800b27a:	e7f1      	b.n	800b260 <_scanf_float+0x2fc>
 800b27c:	46aa      	mov	sl, r5
 800b27e:	9602      	str	r6, [sp, #8]
 800b280:	e7df      	b.n	800b242 <_scanf_float+0x2de>
 800b282:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b286:	6923      	ldr	r3, [r4, #16]
 800b288:	2965      	cmp	r1, #101	; 0x65
 800b28a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b28e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b292:	6123      	str	r3, [r4, #16]
 800b294:	d00c      	beq.n	800b2b0 <_scanf_float+0x34c>
 800b296:	2945      	cmp	r1, #69	; 0x45
 800b298:	d00a      	beq.n	800b2b0 <_scanf_float+0x34c>
 800b29a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b29e:	463a      	mov	r2, r7
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	4798      	blx	r3
 800b2a4:	6923      	ldr	r3, [r4, #16]
 800b2a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	1eb5      	subs	r5, r6, #2
 800b2ae:	6123      	str	r3, [r4, #16]
 800b2b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2b4:	463a      	mov	r2, r7
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	4798      	blx	r3
 800b2ba:	462e      	mov	r6, r5
 800b2bc:	6825      	ldr	r5, [r4, #0]
 800b2be:	f015 0510 	ands.w	r5, r5, #16
 800b2c2:	d159      	bne.n	800b378 <_scanf_float+0x414>
 800b2c4:	7035      	strb	r5, [r6, #0]
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2d0:	d11b      	bne.n	800b30a <_scanf_float+0x3a6>
 800b2d2:	9b01      	ldr	r3, [sp, #4]
 800b2d4:	454b      	cmp	r3, r9
 800b2d6:	eba3 0209 	sub.w	r2, r3, r9
 800b2da:	d123      	bne.n	800b324 <_scanf_float+0x3c0>
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4659      	mov	r1, fp
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	f000 ff1b 	bl	800c11c <_strtod_r>
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	9b03      	ldr	r3, [sp, #12]
 800b2ea:	f012 0f02 	tst.w	r2, #2
 800b2ee:	ec57 6b10 	vmov	r6, r7, d0
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	d021      	beq.n	800b33a <_scanf_float+0x3d6>
 800b2f6:	9903      	ldr	r1, [sp, #12]
 800b2f8:	1d1a      	adds	r2, r3, #4
 800b2fa:	600a      	str	r2, [r1, #0]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	e9c3 6700 	strd	r6, r7, [r3]
 800b302:	68e3      	ldr	r3, [r4, #12]
 800b304:	3301      	adds	r3, #1
 800b306:	60e3      	str	r3, [r4, #12]
 800b308:	e66d      	b.n	800afe6 <_scanf_float+0x82>
 800b30a:	9b04      	ldr	r3, [sp, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d0e5      	beq.n	800b2dc <_scanf_float+0x378>
 800b310:	9905      	ldr	r1, [sp, #20]
 800b312:	230a      	movs	r3, #10
 800b314:	462a      	mov	r2, r5
 800b316:	3101      	adds	r1, #1
 800b318:	4640      	mov	r0, r8
 800b31a:	f000 ff87 	bl	800c22c <_strtol_r>
 800b31e:	9b04      	ldr	r3, [sp, #16]
 800b320:	9e05      	ldr	r6, [sp, #20]
 800b322:	1ac2      	subs	r2, r0, r3
 800b324:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b328:	429e      	cmp	r6, r3
 800b32a:	bf28      	it	cs
 800b32c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b330:	4912      	ldr	r1, [pc, #72]	; (800b37c <_scanf_float+0x418>)
 800b332:	4630      	mov	r0, r6
 800b334:	f000 f83c 	bl	800b3b0 <siprintf>
 800b338:	e7d0      	b.n	800b2dc <_scanf_float+0x378>
 800b33a:	9903      	ldr	r1, [sp, #12]
 800b33c:	f012 0f04 	tst.w	r2, #4
 800b340:	f103 0204 	add.w	r2, r3, #4
 800b344:	600a      	str	r2, [r1, #0]
 800b346:	d1d9      	bne.n	800b2fc <_scanf_float+0x398>
 800b348:	f8d3 8000 	ldr.w	r8, [r3]
 800b34c:	ee10 2a10 	vmov	r2, s0
 800b350:	ee10 0a10 	vmov	r0, s0
 800b354:	463b      	mov	r3, r7
 800b356:	4639      	mov	r1, r7
 800b358:	f7f5 fbe8 	bl	8000b2c <__aeabi_dcmpun>
 800b35c:	b128      	cbz	r0, 800b36a <_scanf_float+0x406>
 800b35e:	4808      	ldr	r0, [pc, #32]	; (800b380 <_scanf_float+0x41c>)
 800b360:	f000 f820 	bl	800b3a4 <nanf>
 800b364:	ed88 0a00 	vstr	s0, [r8]
 800b368:	e7cb      	b.n	800b302 <_scanf_float+0x39e>
 800b36a:	4630      	mov	r0, r6
 800b36c:	4639      	mov	r1, r7
 800b36e:	f7f5 fc3b 	bl	8000be8 <__aeabi_d2f>
 800b372:	f8c8 0000 	str.w	r0, [r8]
 800b376:	e7c4      	b.n	800b302 <_scanf_float+0x39e>
 800b378:	2500      	movs	r5, #0
 800b37a:	e634      	b.n	800afe6 <_scanf_float+0x82>
 800b37c:	0800fd02 	.word	0x0800fd02
 800b380:	08010123 	.word	0x08010123

0800b384 <_sbrk_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4d06      	ldr	r5, [pc, #24]	; (800b3a0 <_sbrk_r+0x1c>)
 800b388:	2300      	movs	r3, #0
 800b38a:	4604      	mov	r4, r0
 800b38c:	4608      	mov	r0, r1
 800b38e:	602b      	str	r3, [r5, #0]
 800b390:	f7f7 f914 	bl	80025bc <_sbrk>
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	d102      	bne.n	800b39e <_sbrk_r+0x1a>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	b103      	cbz	r3, 800b39e <_sbrk_r+0x1a>
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	bd38      	pop	{r3, r4, r5, pc}
 800b3a0:	20002e34 	.word	0x20002e34

0800b3a4 <nanf>:
 800b3a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b3ac <nanf+0x8>
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	7fc00000 	.word	0x7fc00000

0800b3b0 <siprintf>:
 800b3b0:	b40e      	push	{r1, r2, r3}
 800b3b2:	b500      	push	{lr}
 800b3b4:	b09c      	sub	sp, #112	; 0x70
 800b3b6:	ab1d      	add	r3, sp, #116	; 0x74
 800b3b8:	9002      	str	r0, [sp, #8]
 800b3ba:	9006      	str	r0, [sp, #24]
 800b3bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3c0:	4809      	ldr	r0, [pc, #36]	; (800b3e8 <siprintf+0x38>)
 800b3c2:	9107      	str	r1, [sp, #28]
 800b3c4:	9104      	str	r1, [sp, #16]
 800b3c6:	4909      	ldr	r1, [pc, #36]	; (800b3ec <siprintf+0x3c>)
 800b3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3cc:	9105      	str	r1, [sp, #20]
 800b3ce:	6800      	ldr	r0, [r0, #0]
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	a902      	add	r1, sp, #8
 800b3d4:	f002 fea0 	bl	800e118 <_svfiprintf_r>
 800b3d8:	9b02      	ldr	r3, [sp, #8]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	701a      	strb	r2, [r3, #0]
 800b3de:	b01c      	add	sp, #112	; 0x70
 800b3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3e4:	b003      	add	sp, #12
 800b3e6:	4770      	bx	lr
 800b3e8:	200000fc 	.word	0x200000fc
 800b3ec:	ffff0208 	.word	0xffff0208

0800b3f0 <siscanf>:
 800b3f0:	b40e      	push	{r1, r2, r3}
 800b3f2:	b510      	push	{r4, lr}
 800b3f4:	b09f      	sub	sp, #124	; 0x7c
 800b3f6:	ac21      	add	r4, sp, #132	; 0x84
 800b3f8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b3fc:	f854 2b04 	ldr.w	r2, [r4], #4
 800b400:	9201      	str	r2, [sp, #4]
 800b402:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b406:	9004      	str	r0, [sp, #16]
 800b408:	9008      	str	r0, [sp, #32]
 800b40a:	f7f4 fee1 	bl	80001d0 <strlen>
 800b40e:	4b0c      	ldr	r3, [pc, #48]	; (800b440 <siscanf+0x50>)
 800b410:	9005      	str	r0, [sp, #20]
 800b412:	9009      	str	r0, [sp, #36]	; 0x24
 800b414:	930d      	str	r3, [sp, #52]	; 0x34
 800b416:	480b      	ldr	r0, [pc, #44]	; (800b444 <siscanf+0x54>)
 800b418:	9a01      	ldr	r2, [sp, #4]
 800b41a:	6800      	ldr	r0, [r0, #0]
 800b41c:	9403      	str	r4, [sp, #12]
 800b41e:	2300      	movs	r3, #0
 800b420:	9311      	str	r3, [sp, #68]	; 0x44
 800b422:	9316      	str	r3, [sp, #88]	; 0x58
 800b424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b428:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b42c:	a904      	add	r1, sp, #16
 800b42e:	4623      	mov	r3, r4
 800b430:	f002 ffcc 	bl	800e3cc <__ssvfiscanf_r>
 800b434:	b01f      	add	sp, #124	; 0x7c
 800b436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b43a:	b003      	add	sp, #12
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	0800b46b 	.word	0x0800b46b
 800b444:	200000fc 	.word	0x200000fc

0800b448 <__sread>:
 800b448:	b510      	push	{r4, lr}
 800b44a:	460c      	mov	r4, r1
 800b44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b450:	f003 fa86 	bl	800e960 <_read_r>
 800b454:	2800      	cmp	r0, #0
 800b456:	bfab      	itete	ge
 800b458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b45a:	89a3      	ldrhlt	r3, [r4, #12]
 800b45c:	181b      	addge	r3, r3, r0
 800b45e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b462:	bfac      	ite	ge
 800b464:	6563      	strge	r3, [r4, #84]	; 0x54
 800b466:	81a3      	strhlt	r3, [r4, #12]
 800b468:	bd10      	pop	{r4, pc}

0800b46a <__seofread>:
 800b46a:	2000      	movs	r0, #0
 800b46c:	4770      	bx	lr

0800b46e <__swrite>:
 800b46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b472:	461f      	mov	r7, r3
 800b474:	898b      	ldrh	r3, [r1, #12]
 800b476:	05db      	lsls	r3, r3, #23
 800b478:	4605      	mov	r5, r0
 800b47a:	460c      	mov	r4, r1
 800b47c:	4616      	mov	r6, r2
 800b47e:	d505      	bpl.n	800b48c <__swrite+0x1e>
 800b480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b484:	2302      	movs	r3, #2
 800b486:	2200      	movs	r2, #0
 800b488:	f002 f8e4 	bl	800d654 <_lseek_r>
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b496:	81a3      	strh	r3, [r4, #12]
 800b498:	4632      	mov	r2, r6
 800b49a:	463b      	mov	r3, r7
 800b49c:	4628      	mov	r0, r5
 800b49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a2:	f000 bec5 	b.w	800c230 <_write_r>

0800b4a6 <__sseek>:
 800b4a6:	b510      	push	{r4, lr}
 800b4a8:	460c      	mov	r4, r1
 800b4aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ae:	f002 f8d1 	bl	800d654 <_lseek_r>
 800b4b2:	1c43      	adds	r3, r0, #1
 800b4b4:	89a3      	ldrh	r3, [r4, #12]
 800b4b6:	bf15      	itete	ne
 800b4b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4c2:	81a3      	strheq	r3, [r4, #12]
 800b4c4:	bf18      	it	ne
 800b4c6:	81a3      	strhne	r3, [r4, #12]
 800b4c8:	bd10      	pop	{r4, pc}

0800b4ca <__sclose>:
 800b4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ce:	f000 bec1 	b.w	800c254 <_close_r>

0800b4d2 <sulp>:
 800b4d2:	b570      	push	{r4, r5, r6, lr}
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	460d      	mov	r5, r1
 800b4d8:	ec45 4b10 	vmov	d0, r4, r5
 800b4dc:	4616      	mov	r6, r2
 800b4de:	f002 fc5b 	bl	800dd98 <__ulp>
 800b4e2:	ec51 0b10 	vmov	r0, r1, d0
 800b4e6:	b17e      	cbz	r6, 800b508 <sulp+0x36>
 800b4e8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b4ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dd09      	ble.n	800b508 <sulp+0x36>
 800b4f4:	051b      	lsls	r3, r3, #20
 800b4f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b4fa:	2400      	movs	r4, #0
 800b4fc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b500:	4622      	mov	r2, r4
 800b502:	462b      	mov	r3, r5
 800b504:	f7f5 f878 	bl	80005f8 <__aeabi_dmul>
 800b508:	bd70      	pop	{r4, r5, r6, pc}
 800b50a:	0000      	movs	r0, r0
 800b50c:	0000      	movs	r0, r0
	...

0800b510 <_strtod_l>:
 800b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	ed2d 8b02 	vpush	{d8}
 800b518:	b09d      	sub	sp, #116	; 0x74
 800b51a:	461f      	mov	r7, r3
 800b51c:	2300      	movs	r3, #0
 800b51e:	9318      	str	r3, [sp, #96]	; 0x60
 800b520:	4ba2      	ldr	r3, [pc, #648]	; (800b7ac <_strtod_l+0x29c>)
 800b522:	9213      	str	r2, [sp, #76]	; 0x4c
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	9305      	str	r3, [sp, #20]
 800b528:	4604      	mov	r4, r0
 800b52a:	4618      	mov	r0, r3
 800b52c:	4688      	mov	r8, r1
 800b52e:	f7f4 fe4f 	bl	80001d0 <strlen>
 800b532:	f04f 0a00 	mov.w	sl, #0
 800b536:	4605      	mov	r5, r0
 800b538:	f04f 0b00 	mov.w	fp, #0
 800b53c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b542:	781a      	ldrb	r2, [r3, #0]
 800b544:	2a2b      	cmp	r2, #43	; 0x2b
 800b546:	d04e      	beq.n	800b5e6 <_strtod_l+0xd6>
 800b548:	d83b      	bhi.n	800b5c2 <_strtod_l+0xb2>
 800b54a:	2a0d      	cmp	r2, #13
 800b54c:	d834      	bhi.n	800b5b8 <_strtod_l+0xa8>
 800b54e:	2a08      	cmp	r2, #8
 800b550:	d834      	bhi.n	800b5bc <_strtod_l+0xac>
 800b552:	2a00      	cmp	r2, #0
 800b554:	d03e      	beq.n	800b5d4 <_strtod_l+0xc4>
 800b556:	2300      	movs	r3, #0
 800b558:	930a      	str	r3, [sp, #40]	; 0x28
 800b55a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b55c:	7833      	ldrb	r3, [r6, #0]
 800b55e:	2b30      	cmp	r3, #48	; 0x30
 800b560:	f040 80b0 	bne.w	800b6c4 <_strtod_l+0x1b4>
 800b564:	7873      	ldrb	r3, [r6, #1]
 800b566:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b56a:	2b58      	cmp	r3, #88	; 0x58
 800b56c:	d168      	bne.n	800b640 <_strtod_l+0x130>
 800b56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	ab18      	add	r3, sp, #96	; 0x60
 800b574:	9702      	str	r7, [sp, #8]
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	4a8d      	ldr	r2, [pc, #564]	; (800b7b0 <_strtod_l+0x2a0>)
 800b57a:	ab19      	add	r3, sp, #100	; 0x64
 800b57c:	a917      	add	r1, sp, #92	; 0x5c
 800b57e:	4620      	mov	r0, r4
 800b580:	f001 fd5c 	bl	800d03c <__gethex>
 800b584:	f010 0707 	ands.w	r7, r0, #7
 800b588:	4605      	mov	r5, r0
 800b58a:	d005      	beq.n	800b598 <_strtod_l+0x88>
 800b58c:	2f06      	cmp	r7, #6
 800b58e:	d12c      	bne.n	800b5ea <_strtod_l+0xda>
 800b590:	3601      	adds	r6, #1
 800b592:	2300      	movs	r3, #0
 800b594:	9617      	str	r6, [sp, #92]	; 0x5c
 800b596:	930a      	str	r3, [sp, #40]	; 0x28
 800b598:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f040 8590 	bne.w	800c0c0 <_strtod_l+0xbb0>
 800b5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5a2:	b1eb      	cbz	r3, 800b5e0 <_strtod_l+0xd0>
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b5aa:	ec43 2b10 	vmov	d0, r2, r3
 800b5ae:	b01d      	add	sp, #116	; 0x74
 800b5b0:	ecbd 8b02 	vpop	{d8}
 800b5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b8:	2a20      	cmp	r2, #32
 800b5ba:	d1cc      	bne.n	800b556 <_strtod_l+0x46>
 800b5bc:	3301      	adds	r3, #1
 800b5be:	9317      	str	r3, [sp, #92]	; 0x5c
 800b5c0:	e7be      	b.n	800b540 <_strtod_l+0x30>
 800b5c2:	2a2d      	cmp	r2, #45	; 0x2d
 800b5c4:	d1c7      	bne.n	800b556 <_strtod_l+0x46>
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	920a      	str	r2, [sp, #40]	; 0x28
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800b5ce:	785b      	ldrb	r3, [r3, #1]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1c2      	bne.n	800b55a <_strtod_l+0x4a>
 800b5d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b5d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f040 856e 	bne.w	800c0bc <_strtod_l+0xbac>
 800b5e0:	4652      	mov	r2, sl
 800b5e2:	465b      	mov	r3, fp
 800b5e4:	e7e1      	b.n	800b5aa <_strtod_l+0x9a>
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	e7ee      	b.n	800b5c8 <_strtod_l+0xb8>
 800b5ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b5ec:	b13a      	cbz	r2, 800b5fe <_strtod_l+0xee>
 800b5ee:	2135      	movs	r1, #53	; 0x35
 800b5f0:	a81a      	add	r0, sp, #104	; 0x68
 800b5f2:	f002 fcdc 	bl	800dfae <__copybits>
 800b5f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f002 f89b 	bl	800d734 <_Bfree>
 800b5fe:	3f01      	subs	r7, #1
 800b600:	2f04      	cmp	r7, #4
 800b602:	d806      	bhi.n	800b612 <_strtod_l+0x102>
 800b604:	e8df f007 	tbb	[pc, r7]
 800b608:	1714030a 	.word	0x1714030a
 800b60c:	0a          	.byte	0x0a
 800b60d:	00          	.byte	0x00
 800b60e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b612:	0728      	lsls	r0, r5, #28
 800b614:	d5c0      	bpl.n	800b598 <_strtod_l+0x88>
 800b616:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b61a:	e7bd      	b.n	800b598 <_strtod_l+0x88>
 800b61c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b620:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b622:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b626:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b62a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b62e:	e7f0      	b.n	800b612 <_strtod_l+0x102>
 800b630:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b7b4 <_strtod_l+0x2a4>
 800b634:	e7ed      	b.n	800b612 <_strtod_l+0x102>
 800b636:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b63a:	f04f 3aff 	mov.w	sl, #4294967295
 800b63e:	e7e8      	b.n	800b612 <_strtod_l+0x102>
 800b640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	9217      	str	r2, [sp, #92]	; 0x5c
 800b646:	785b      	ldrb	r3, [r3, #1]
 800b648:	2b30      	cmp	r3, #48	; 0x30
 800b64a:	d0f9      	beq.n	800b640 <_strtod_l+0x130>
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d0a3      	beq.n	800b598 <_strtod_l+0x88>
 800b650:	2301      	movs	r3, #1
 800b652:	f04f 0900 	mov.w	r9, #0
 800b656:	9304      	str	r3, [sp, #16]
 800b658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b65a:	9308      	str	r3, [sp, #32]
 800b65c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b660:	464f      	mov	r7, r9
 800b662:	220a      	movs	r2, #10
 800b664:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b666:	7806      	ldrb	r6, [r0, #0]
 800b668:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b66c:	b2d9      	uxtb	r1, r3
 800b66e:	2909      	cmp	r1, #9
 800b670:	d92a      	bls.n	800b6c8 <_strtod_l+0x1b8>
 800b672:	9905      	ldr	r1, [sp, #20]
 800b674:	462a      	mov	r2, r5
 800b676:	f003 f9c7 	bl	800ea08 <strncmp>
 800b67a:	b398      	cbz	r0, 800b6e4 <_strtod_l+0x1d4>
 800b67c:	2000      	movs	r0, #0
 800b67e:	4632      	mov	r2, r6
 800b680:	463d      	mov	r5, r7
 800b682:	9005      	str	r0, [sp, #20]
 800b684:	4603      	mov	r3, r0
 800b686:	2a65      	cmp	r2, #101	; 0x65
 800b688:	d001      	beq.n	800b68e <_strtod_l+0x17e>
 800b68a:	2a45      	cmp	r2, #69	; 0x45
 800b68c:	d118      	bne.n	800b6c0 <_strtod_l+0x1b0>
 800b68e:	b91d      	cbnz	r5, 800b698 <_strtod_l+0x188>
 800b690:	9a04      	ldr	r2, [sp, #16]
 800b692:	4302      	orrs	r2, r0
 800b694:	d09e      	beq.n	800b5d4 <_strtod_l+0xc4>
 800b696:	2500      	movs	r5, #0
 800b698:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b69c:	f108 0201 	add.w	r2, r8, #1
 800b6a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b6a6:	2a2b      	cmp	r2, #43	; 0x2b
 800b6a8:	d075      	beq.n	800b796 <_strtod_l+0x286>
 800b6aa:	2a2d      	cmp	r2, #45	; 0x2d
 800b6ac:	d07b      	beq.n	800b7a6 <_strtod_l+0x296>
 800b6ae:	f04f 0c00 	mov.w	ip, #0
 800b6b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b6b6:	2909      	cmp	r1, #9
 800b6b8:	f240 8082 	bls.w	800b7c0 <_strtod_l+0x2b0>
 800b6bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b6c0:	2600      	movs	r6, #0
 800b6c2:	e09d      	b.n	800b800 <_strtod_l+0x2f0>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	e7c4      	b.n	800b652 <_strtod_l+0x142>
 800b6c8:	2f08      	cmp	r7, #8
 800b6ca:	bfd8      	it	le
 800b6cc:	9907      	ldrle	r1, [sp, #28]
 800b6ce:	f100 0001 	add.w	r0, r0, #1
 800b6d2:	bfda      	itte	le
 800b6d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b6d8:	9307      	strle	r3, [sp, #28]
 800b6da:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b6de:	3701      	adds	r7, #1
 800b6e0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b6e2:	e7bf      	b.n	800b664 <_strtod_l+0x154>
 800b6e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6e6:	195a      	adds	r2, r3, r5
 800b6e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b6ea:	5d5a      	ldrb	r2, [r3, r5]
 800b6ec:	2f00      	cmp	r7, #0
 800b6ee:	d037      	beq.n	800b760 <_strtod_l+0x250>
 800b6f0:	9005      	str	r0, [sp, #20]
 800b6f2:	463d      	mov	r5, r7
 800b6f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b6f8:	2b09      	cmp	r3, #9
 800b6fa:	d912      	bls.n	800b722 <_strtod_l+0x212>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e7c2      	b.n	800b686 <_strtod_l+0x176>
 800b700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	9217      	str	r2, [sp, #92]	; 0x5c
 800b706:	785a      	ldrb	r2, [r3, #1]
 800b708:	3001      	adds	r0, #1
 800b70a:	2a30      	cmp	r2, #48	; 0x30
 800b70c:	d0f8      	beq.n	800b700 <_strtod_l+0x1f0>
 800b70e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b712:	2b08      	cmp	r3, #8
 800b714:	f200 84d9 	bhi.w	800c0ca <_strtod_l+0xbba>
 800b718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b71a:	9005      	str	r0, [sp, #20]
 800b71c:	2000      	movs	r0, #0
 800b71e:	9308      	str	r3, [sp, #32]
 800b720:	4605      	mov	r5, r0
 800b722:	3a30      	subs	r2, #48	; 0x30
 800b724:	f100 0301 	add.w	r3, r0, #1
 800b728:	d014      	beq.n	800b754 <_strtod_l+0x244>
 800b72a:	9905      	ldr	r1, [sp, #20]
 800b72c:	4419      	add	r1, r3
 800b72e:	9105      	str	r1, [sp, #20]
 800b730:	462b      	mov	r3, r5
 800b732:	eb00 0e05 	add.w	lr, r0, r5
 800b736:	210a      	movs	r1, #10
 800b738:	4573      	cmp	r3, lr
 800b73a:	d113      	bne.n	800b764 <_strtod_l+0x254>
 800b73c:	182b      	adds	r3, r5, r0
 800b73e:	2b08      	cmp	r3, #8
 800b740:	f105 0501 	add.w	r5, r5, #1
 800b744:	4405      	add	r5, r0
 800b746:	dc1c      	bgt.n	800b782 <_strtod_l+0x272>
 800b748:	9907      	ldr	r1, [sp, #28]
 800b74a:	230a      	movs	r3, #10
 800b74c:	fb03 2301 	mla	r3, r3, r1, r2
 800b750:	9307      	str	r3, [sp, #28]
 800b752:	2300      	movs	r3, #0
 800b754:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b756:	1c51      	adds	r1, r2, #1
 800b758:	9117      	str	r1, [sp, #92]	; 0x5c
 800b75a:	7852      	ldrb	r2, [r2, #1]
 800b75c:	4618      	mov	r0, r3
 800b75e:	e7c9      	b.n	800b6f4 <_strtod_l+0x1e4>
 800b760:	4638      	mov	r0, r7
 800b762:	e7d2      	b.n	800b70a <_strtod_l+0x1fa>
 800b764:	2b08      	cmp	r3, #8
 800b766:	dc04      	bgt.n	800b772 <_strtod_l+0x262>
 800b768:	9e07      	ldr	r6, [sp, #28]
 800b76a:	434e      	muls	r6, r1
 800b76c:	9607      	str	r6, [sp, #28]
 800b76e:	3301      	adds	r3, #1
 800b770:	e7e2      	b.n	800b738 <_strtod_l+0x228>
 800b772:	f103 0c01 	add.w	ip, r3, #1
 800b776:	f1bc 0f10 	cmp.w	ip, #16
 800b77a:	bfd8      	it	le
 800b77c:	fb01 f909 	mulle.w	r9, r1, r9
 800b780:	e7f5      	b.n	800b76e <_strtod_l+0x25e>
 800b782:	2d10      	cmp	r5, #16
 800b784:	bfdc      	itt	le
 800b786:	230a      	movle	r3, #10
 800b788:	fb03 2909 	mlale	r9, r3, r9, r2
 800b78c:	e7e1      	b.n	800b752 <_strtod_l+0x242>
 800b78e:	2300      	movs	r3, #0
 800b790:	9305      	str	r3, [sp, #20]
 800b792:	2301      	movs	r3, #1
 800b794:	e77c      	b.n	800b690 <_strtod_l+0x180>
 800b796:	f04f 0c00 	mov.w	ip, #0
 800b79a:	f108 0202 	add.w	r2, r8, #2
 800b79e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b7a4:	e785      	b.n	800b6b2 <_strtod_l+0x1a2>
 800b7a6:	f04f 0c01 	mov.w	ip, #1
 800b7aa:	e7f6      	b.n	800b79a <_strtod_l+0x28a>
 800b7ac:	0800ff50 	.word	0x0800ff50
 800b7b0:	0800fd08 	.word	0x0800fd08
 800b7b4:	7ff00000 	.word	0x7ff00000
 800b7b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7ba:	1c51      	adds	r1, r2, #1
 800b7bc:	9117      	str	r1, [sp, #92]	; 0x5c
 800b7be:	7852      	ldrb	r2, [r2, #1]
 800b7c0:	2a30      	cmp	r2, #48	; 0x30
 800b7c2:	d0f9      	beq.n	800b7b8 <_strtod_l+0x2a8>
 800b7c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b7c8:	2908      	cmp	r1, #8
 800b7ca:	f63f af79 	bhi.w	800b6c0 <_strtod_l+0x1b0>
 800b7ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b7d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7d4:	9206      	str	r2, [sp, #24]
 800b7d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7d8:	1c51      	adds	r1, r2, #1
 800b7da:	9117      	str	r1, [sp, #92]	; 0x5c
 800b7dc:	7852      	ldrb	r2, [r2, #1]
 800b7de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b7e2:	2e09      	cmp	r6, #9
 800b7e4:	d937      	bls.n	800b856 <_strtod_l+0x346>
 800b7e6:	9e06      	ldr	r6, [sp, #24]
 800b7e8:	1b89      	subs	r1, r1, r6
 800b7ea:	2908      	cmp	r1, #8
 800b7ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b7f0:	dc02      	bgt.n	800b7f8 <_strtod_l+0x2e8>
 800b7f2:	4576      	cmp	r6, lr
 800b7f4:	bfa8      	it	ge
 800b7f6:	4676      	movge	r6, lr
 800b7f8:	f1bc 0f00 	cmp.w	ip, #0
 800b7fc:	d000      	beq.n	800b800 <_strtod_l+0x2f0>
 800b7fe:	4276      	negs	r6, r6
 800b800:	2d00      	cmp	r5, #0
 800b802:	d14d      	bne.n	800b8a0 <_strtod_l+0x390>
 800b804:	9904      	ldr	r1, [sp, #16]
 800b806:	4301      	orrs	r1, r0
 800b808:	f47f aec6 	bne.w	800b598 <_strtod_l+0x88>
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f47f aee1 	bne.w	800b5d4 <_strtod_l+0xc4>
 800b812:	2a69      	cmp	r2, #105	; 0x69
 800b814:	d027      	beq.n	800b866 <_strtod_l+0x356>
 800b816:	dc24      	bgt.n	800b862 <_strtod_l+0x352>
 800b818:	2a49      	cmp	r2, #73	; 0x49
 800b81a:	d024      	beq.n	800b866 <_strtod_l+0x356>
 800b81c:	2a4e      	cmp	r2, #78	; 0x4e
 800b81e:	f47f aed9 	bne.w	800b5d4 <_strtod_l+0xc4>
 800b822:	499f      	ldr	r1, [pc, #636]	; (800baa0 <_strtod_l+0x590>)
 800b824:	a817      	add	r0, sp, #92	; 0x5c
 800b826:	f001 fe61 	bl	800d4ec <__match>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	f43f aed2 	beq.w	800b5d4 <_strtod_l+0xc4>
 800b830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	2b28      	cmp	r3, #40	; 0x28
 800b836:	d12d      	bne.n	800b894 <_strtod_l+0x384>
 800b838:	499a      	ldr	r1, [pc, #616]	; (800baa4 <_strtod_l+0x594>)
 800b83a:	aa1a      	add	r2, sp, #104	; 0x68
 800b83c:	a817      	add	r0, sp, #92	; 0x5c
 800b83e:	f001 fe69 	bl	800d514 <__hexnan>
 800b842:	2805      	cmp	r0, #5
 800b844:	d126      	bne.n	800b894 <_strtod_l+0x384>
 800b846:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b848:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b84c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b850:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b854:	e6a0      	b.n	800b598 <_strtod_l+0x88>
 800b856:	210a      	movs	r1, #10
 800b858:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b85c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b860:	e7b9      	b.n	800b7d6 <_strtod_l+0x2c6>
 800b862:	2a6e      	cmp	r2, #110	; 0x6e
 800b864:	e7db      	b.n	800b81e <_strtod_l+0x30e>
 800b866:	4990      	ldr	r1, [pc, #576]	; (800baa8 <_strtod_l+0x598>)
 800b868:	a817      	add	r0, sp, #92	; 0x5c
 800b86a:	f001 fe3f 	bl	800d4ec <__match>
 800b86e:	2800      	cmp	r0, #0
 800b870:	f43f aeb0 	beq.w	800b5d4 <_strtod_l+0xc4>
 800b874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b876:	498d      	ldr	r1, [pc, #564]	; (800baac <_strtod_l+0x59c>)
 800b878:	3b01      	subs	r3, #1
 800b87a:	a817      	add	r0, sp, #92	; 0x5c
 800b87c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b87e:	f001 fe35 	bl	800d4ec <__match>
 800b882:	b910      	cbnz	r0, 800b88a <_strtod_l+0x37a>
 800b884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b886:	3301      	adds	r3, #1
 800b888:	9317      	str	r3, [sp, #92]	; 0x5c
 800b88a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800babc <_strtod_l+0x5ac>
 800b88e:	f04f 0a00 	mov.w	sl, #0
 800b892:	e681      	b.n	800b598 <_strtod_l+0x88>
 800b894:	4886      	ldr	r0, [pc, #536]	; (800bab0 <_strtod_l+0x5a0>)
 800b896:	f003 f877 	bl	800e988 <nan>
 800b89a:	ec5b ab10 	vmov	sl, fp, d0
 800b89e:	e67b      	b.n	800b598 <_strtod_l+0x88>
 800b8a0:	9b05      	ldr	r3, [sp, #20]
 800b8a2:	9807      	ldr	r0, [sp, #28]
 800b8a4:	1af3      	subs	r3, r6, r3
 800b8a6:	2f00      	cmp	r7, #0
 800b8a8:	bf08      	it	eq
 800b8aa:	462f      	moveq	r7, r5
 800b8ac:	2d10      	cmp	r5, #16
 800b8ae:	9306      	str	r3, [sp, #24]
 800b8b0:	46a8      	mov	r8, r5
 800b8b2:	bfa8      	it	ge
 800b8b4:	f04f 0810 	movge.w	r8, #16
 800b8b8:	f7f4 fe24 	bl	8000504 <__aeabi_ui2d>
 800b8bc:	2d09      	cmp	r5, #9
 800b8be:	4682      	mov	sl, r0
 800b8c0:	468b      	mov	fp, r1
 800b8c2:	dd13      	ble.n	800b8ec <_strtod_l+0x3dc>
 800b8c4:	4b7b      	ldr	r3, [pc, #492]	; (800bab4 <_strtod_l+0x5a4>)
 800b8c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b8ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b8ce:	f7f4 fe93 	bl	80005f8 <__aeabi_dmul>
 800b8d2:	4682      	mov	sl, r0
 800b8d4:	4648      	mov	r0, r9
 800b8d6:	468b      	mov	fp, r1
 800b8d8:	f7f4 fe14 	bl	8000504 <__aeabi_ui2d>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4650      	mov	r0, sl
 800b8e2:	4659      	mov	r1, fp
 800b8e4:	f7f4 fcd2 	bl	800028c <__adddf3>
 800b8e8:	4682      	mov	sl, r0
 800b8ea:	468b      	mov	fp, r1
 800b8ec:	2d0f      	cmp	r5, #15
 800b8ee:	dc38      	bgt.n	800b962 <_strtod_l+0x452>
 800b8f0:	9b06      	ldr	r3, [sp, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f43f ae50 	beq.w	800b598 <_strtod_l+0x88>
 800b8f8:	dd24      	ble.n	800b944 <_strtod_l+0x434>
 800b8fa:	2b16      	cmp	r3, #22
 800b8fc:	dc0b      	bgt.n	800b916 <_strtod_l+0x406>
 800b8fe:	496d      	ldr	r1, [pc, #436]	; (800bab4 <_strtod_l+0x5a4>)
 800b900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b904:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b908:	4652      	mov	r2, sl
 800b90a:	465b      	mov	r3, fp
 800b90c:	f7f4 fe74 	bl	80005f8 <__aeabi_dmul>
 800b910:	4682      	mov	sl, r0
 800b912:	468b      	mov	fp, r1
 800b914:	e640      	b.n	800b598 <_strtod_l+0x88>
 800b916:	9a06      	ldr	r2, [sp, #24]
 800b918:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b91c:	4293      	cmp	r3, r2
 800b91e:	db20      	blt.n	800b962 <_strtod_l+0x452>
 800b920:	4c64      	ldr	r4, [pc, #400]	; (800bab4 <_strtod_l+0x5a4>)
 800b922:	f1c5 050f 	rsb	r5, r5, #15
 800b926:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b92a:	4652      	mov	r2, sl
 800b92c:	465b      	mov	r3, fp
 800b92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b932:	f7f4 fe61 	bl	80005f8 <__aeabi_dmul>
 800b936:	9b06      	ldr	r3, [sp, #24]
 800b938:	1b5d      	subs	r5, r3, r5
 800b93a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b93e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b942:	e7e3      	b.n	800b90c <_strtod_l+0x3fc>
 800b944:	9b06      	ldr	r3, [sp, #24]
 800b946:	3316      	adds	r3, #22
 800b948:	db0b      	blt.n	800b962 <_strtod_l+0x452>
 800b94a:	9b05      	ldr	r3, [sp, #20]
 800b94c:	1b9e      	subs	r6, r3, r6
 800b94e:	4b59      	ldr	r3, [pc, #356]	; (800bab4 <_strtod_l+0x5a4>)
 800b950:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b954:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b958:	4650      	mov	r0, sl
 800b95a:	4659      	mov	r1, fp
 800b95c:	f7f4 ff76 	bl	800084c <__aeabi_ddiv>
 800b960:	e7d6      	b.n	800b910 <_strtod_l+0x400>
 800b962:	9b06      	ldr	r3, [sp, #24]
 800b964:	eba5 0808 	sub.w	r8, r5, r8
 800b968:	4498      	add	r8, r3
 800b96a:	f1b8 0f00 	cmp.w	r8, #0
 800b96e:	dd74      	ble.n	800ba5a <_strtod_l+0x54a>
 800b970:	f018 030f 	ands.w	r3, r8, #15
 800b974:	d00a      	beq.n	800b98c <_strtod_l+0x47c>
 800b976:	494f      	ldr	r1, [pc, #316]	; (800bab4 <_strtod_l+0x5a4>)
 800b978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b97c:	4652      	mov	r2, sl
 800b97e:	465b      	mov	r3, fp
 800b980:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b984:	f7f4 fe38 	bl	80005f8 <__aeabi_dmul>
 800b988:	4682      	mov	sl, r0
 800b98a:	468b      	mov	fp, r1
 800b98c:	f038 080f 	bics.w	r8, r8, #15
 800b990:	d04f      	beq.n	800ba32 <_strtod_l+0x522>
 800b992:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b996:	dd22      	ble.n	800b9de <_strtod_l+0x4ce>
 800b998:	2500      	movs	r5, #0
 800b99a:	462e      	mov	r6, r5
 800b99c:	9507      	str	r5, [sp, #28]
 800b99e:	9505      	str	r5, [sp, #20]
 800b9a0:	2322      	movs	r3, #34	; 0x22
 800b9a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800babc <_strtod_l+0x5ac>
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	f04f 0a00 	mov.w	sl, #0
 800b9ac:	9b07      	ldr	r3, [sp, #28]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f43f adf2 	beq.w	800b598 <_strtod_l+0x88>
 800b9b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f001 febc 	bl	800d734 <_Bfree>
 800b9bc:	9905      	ldr	r1, [sp, #20]
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f001 feb8 	bl	800d734 <_Bfree>
 800b9c4:	4631      	mov	r1, r6
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f001 feb4 	bl	800d734 <_Bfree>
 800b9cc:	9907      	ldr	r1, [sp, #28]
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f001 feb0 	bl	800d734 <_Bfree>
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f001 feac 	bl	800d734 <_Bfree>
 800b9dc:	e5dc      	b.n	800b598 <_strtod_l+0x88>
 800b9de:	4b36      	ldr	r3, [pc, #216]	; (800bab8 <_strtod_l+0x5a8>)
 800b9e0:	9304      	str	r3, [sp, #16]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b9e8:	4650      	mov	r0, sl
 800b9ea:	4659      	mov	r1, fp
 800b9ec:	4699      	mov	r9, r3
 800b9ee:	f1b8 0f01 	cmp.w	r8, #1
 800b9f2:	dc21      	bgt.n	800ba38 <_strtod_l+0x528>
 800b9f4:	b10b      	cbz	r3, 800b9fa <_strtod_l+0x4ea>
 800b9f6:	4682      	mov	sl, r0
 800b9f8:	468b      	mov	fp, r1
 800b9fa:	4b2f      	ldr	r3, [pc, #188]	; (800bab8 <_strtod_l+0x5a8>)
 800b9fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ba00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ba04:	4652      	mov	r2, sl
 800ba06:	465b      	mov	r3, fp
 800ba08:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ba0c:	f7f4 fdf4 	bl	80005f8 <__aeabi_dmul>
 800ba10:	4b2a      	ldr	r3, [pc, #168]	; (800babc <_strtod_l+0x5ac>)
 800ba12:	460a      	mov	r2, r1
 800ba14:	400b      	ands	r3, r1
 800ba16:	492a      	ldr	r1, [pc, #168]	; (800bac0 <_strtod_l+0x5b0>)
 800ba18:	428b      	cmp	r3, r1
 800ba1a:	4682      	mov	sl, r0
 800ba1c:	d8bc      	bhi.n	800b998 <_strtod_l+0x488>
 800ba1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ba22:	428b      	cmp	r3, r1
 800ba24:	bf86      	itte	hi
 800ba26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bac4 <_strtod_l+0x5b4>
 800ba2a:	f04f 3aff 	movhi.w	sl, #4294967295
 800ba2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ba32:	2300      	movs	r3, #0
 800ba34:	9304      	str	r3, [sp, #16]
 800ba36:	e084      	b.n	800bb42 <_strtod_l+0x632>
 800ba38:	f018 0f01 	tst.w	r8, #1
 800ba3c:	d005      	beq.n	800ba4a <_strtod_l+0x53a>
 800ba3e:	9b04      	ldr	r3, [sp, #16]
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f7f4 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	9a04      	ldr	r2, [sp, #16]
 800ba4c:	3208      	adds	r2, #8
 800ba4e:	f109 0901 	add.w	r9, r9, #1
 800ba52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ba56:	9204      	str	r2, [sp, #16]
 800ba58:	e7c9      	b.n	800b9ee <_strtod_l+0x4de>
 800ba5a:	d0ea      	beq.n	800ba32 <_strtod_l+0x522>
 800ba5c:	f1c8 0800 	rsb	r8, r8, #0
 800ba60:	f018 020f 	ands.w	r2, r8, #15
 800ba64:	d00a      	beq.n	800ba7c <_strtod_l+0x56c>
 800ba66:	4b13      	ldr	r3, [pc, #76]	; (800bab4 <_strtod_l+0x5a4>)
 800ba68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba6c:	4650      	mov	r0, sl
 800ba6e:	4659      	mov	r1, fp
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	f7f4 feea 	bl	800084c <__aeabi_ddiv>
 800ba78:	4682      	mov	sl, r0
 800ba7a:	468b      	mov	fp, r1
 800ba7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ba80:	d0d7      	beq.n	800ba32 <_strtod_l+0x522>
 800ba82:	f1b8 0f1f 	cmp.w	r8, #31
 800ba86:	dd1f      	ble.n	800bac8 <_strtod_l+0x5b8>
 800ba88:	2500      	movs	r5, #0
 800ba8a:	462e      	mov	r6, r5
 800ba8c:	9507      	str	r5, [sp, #28]
 800ba8e:	9505      	str	r5, [sp, #20]
 800ba90:	2322      	movs	r3, #34	; 0x22
 800ba92:	f04f 0a00 	mov.w	sl, #0
 800ba96:	f04f 0b00 	mov.w	fp, #0
 800ba9a:	6023      	str	r3, [r4, #0]
 800ba9c:	e786      	b.n	800b9ac <_strtod_l+0x49c>
 800ba9e:	bf00      	nop
 800baa0:	0800fcdd 	.word	0x0800fcdd
 800baa4:	0800fd1c 	.word	0x0800fd1c
 800baa8:	0800fcd5 	.word	0x0800fcd5
 800baac:	0800fe5c 	.word	0x0800fe5c
 800bab0:	08010123 	.word	0x08010123
 800bab4:	0800ffe8 	.word	0x0800ffe8
 800bab8:	0800ffc0 	.word	0x0800ffc0
 800babc:	7ff00000 	.word	0x7ff00000
 800bac0:	7ca00000 	.word	0x7ca00000
 800bac4:	7fefffff 	.word	0x7fefffff
 800bac8:	f018 0310 	ands.w	r3, r8, #16
 800bacc:	bf18      	it	ne
 800bace:	236a      	movne	r3, #106	; 0x6a
 800bad0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800be80 <_strtod_l+0x970>
 800bad4:	9304      	str	r3, [sp, #16]
 800bad6:	4650      	mov	r0, sl
 800bad8:	4659      	mov	r1, fp
 800bada:	2300      	movs	r3, #0
 800badc:	f018 0f01 	tst.w	r8, #1
 800bae0:	d004      	beq.n	800baec <_strtod_l+0x5dc>
 800bae2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bae6:	f7f4 fd87 	bl	80005f8 <__aeabi_dmul>
 800baea:	2301      	movs	r3, #1
 800baec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800baf0:	f109 0908 	add.w	r9, r9, #8
 800baf4:	d1f2      	bne.n	800badc <_strtod_l+0x5cc>
 800baf6:	b10b      	cbz	r3, 800bafc <_strtod_l+0x5ec>
 800baf8:	4682      	mov	sl, r0
 800bafa:	468b      	mov	fp, r1
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	b1c3      	cbz	r3, 800bb32 <_strtod_l+0x622>
 800bb00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bb04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	4659      	mov	r1, fp
 800bb0c:	dd11      	ble.n	800bb32 <_strtod_l+0x622>
 800bb0e:	2b1f      	cmp	r3, #31
 800bb10:	f340 8124 	ble.w	800bd5c <_strtod_l+0x84c>
 800bb14:	2b34      	cmp	r3, #52	; 0x34
 800bb16:	bfde      	ittt	le
 800bb18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bb1c:	f04f 33ff 	movle.w	r3, #4294967295
 800bb20:	fa03 f202 	lslle.w	r2, r3, r2
 800bb24:	f04f 0a00 	mov.w	sl, #0
 800bb28:	bfcc      	ite	gt
 800bb2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bb2e:	ea02 0b01 	andle.w	fp, r2, r1
 800bb32:	2200      	movs	r2, #0
 800bb34:	2300      	movs	r3, #0
 800bb36:	4650      	mov	r0, sl
 800bb38:	4659      	mov	r1, fp
 800bb3a:	f7f4 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d1a2      	bne.n	800ba88 <_strtod_l+0x578>
 800bb42:	9b07      	ldr	r3, [sp, #28]
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	9908      	ldr	r1, [sp, #32]
 800bb48:	462b      	mov	r3, r5
 800bb4a:	463a      	mov	r2, r7
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f001 fe59 	bl	800d804 <__s2b>
 800bb52:	9007      	str	r0, [sp, #28]
 800bb54:	2800      	cmp	r0, #0
 800bb56:	f43f af1f 	beq.w	800b998 <_strtod_l+0x488>
 800bb5a:	9b05      	ldr	r3, [sp, #20]
 800bb5c:	1b9e      	subs	r6, r3, r6
 800bb5e:	9b06      	ldr	r3, [sp, #24]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	bfb4      	ite	lt
 800bb64:	4633      	movlt	r3, r6
 800bb66:	2300      	movge	r3, #0
 800bb68:	930c      	str	r3, [sp, #48]	; 0x30
 800bb6a:	9b06      	ldr	r3, [sp, #24]
 800bb6c:	2500      	movs	r5, #0
 800bb6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bb72:	9312      	str	r3, [sp, #72]	; 0x48
 800bb74:	462e      	mov	r6, r5
 800bb76:	9b07      	ldr	r3, [sp, #28]
 800bb78:	4620      	mov	r0, r4
 800bb7a:	6859      	ldr	r1, [r3, #4]
 800bb7c:	f001 fd9a 	bl	800d6b4 <_Balloc>
 800bb80:	9005      	str	r0, [sp, #20]
 800bb82:	2800      	cmp	r0, #0
 800bb84:	f43f af0c 	beq.w	800b9a0 <_strtod_l+0x490>
 800bb88:	9b07      	ldr	r3, [sp, #28]
 800bb8a:	691a      	ldr	r2, [r3, #16]
 800bb8c:	3202      	adds	r2, #2
 800bb8e:	f103 010c 	add.w	r1, r3, #12
 800bb92:	0092      	lsls	r2, r2, #2
 800bb94:	300c      	adds	r0, #12
 800bb96:	f7fe fc85 	bl	800a4a4 <memcpy>
 800bb9a:	ec4b ab10 	vmov	d0, sl, fp
 800bb9e:	aa1a      	add	r2, sp, #104	; 0x68
 800bba0:	a919      	add	r1, sp, #100	; 0x64
 800bba2:	4620      	mov	r0, r4
 800bba4:	f002 f974 	bl	800de90 <__d2b>
 800bba8:	ec4b ab18 	vmov	d8, sl, fp
 800bbac:	9018      	str	r0, [sp, #96]	; 0x60
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f43f aef6 	beq.w	800b9a0 <_strtod_l+0x490>
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f001 febe 	bl	800d938 <__i2b>
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f43f aeee 	beq.w	800b9a0 <_strtod_l+0x490>
 800bbc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bbc6:	9904      	ldr	r1, [sp, #16]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	bfab      	itete	ge
 800bbcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bbce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bbd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bbd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bbd6:	bfac      	ite	ge
 800bbd8:	eb03 0902 	addge.w	r9, r3, r2
 800bbdc:	1ad7      	sublt	r7, r2, r3
 800bbde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bbe0:	eba3 0801 	sub.w	r8, r3, r1
 800bbe4:	4490      	add	r8, r2
 800bbe6:	4ba1      	ldr	r3, [pc, #644]	; (800be6c <_strtod_l+0x95c>)
 800bbe8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbec:	4598      	cmp	r8, r3
 800bbee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bbf2:	f280 80c7 	bge.w	800bd84 <_strtod_l+0x874>
 800bbf6:	eba3 0308 	sub.w	r3, r3, r8
 800bbfa:	2b1f      	cmp	r3, #31
 800bbfc:	eba2 0203 	sub.w	r2, r2, r3
 800bc00:	f04f 0101 	mov.w	r1, #1
 800bc04:	f300 80b1 	bgt.w	800bd6a <_strtod_l+0x85a>
 800bc08:	fa01 f303 	lsl.w	r3, r1, r3
 800bc0c:	930d      	str	r3, [sp, #52]	; 0x34
 800bc0e:	2300      	movs	r3, #0
 800bc10:	9308      	str	r3, [sp, #32]
 800bc12:	eb09 0802 	add.w	r8, r9, r2
 800bc16:	9b04      	ldr	r3, [sp, #16]
 800bc18:	45c1      	cmp	r9, r8
 800bc1a:	4417      	add	r7, r2
 800bc1c:	441f      	add	r7, r3
 800bc1e:	464b      	mov	r3, r9
 800bc20:	bfa8      	it	ge
 800bc22:	4643      	movge	r3, r8
 800bc24:	42bb      	cmp	r3, r7
 800bc26:	bfa8      	it	ge
 800bc28:	463b      	movge	r3, r7
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	bfc2      	ittt	gt
 800bc2e:	eba8 0803 	subgt.w	r8, r8, r3
 800bc32:	1aff      	subgt	r7, r7, r3
 800bc34:	eba9 0903 	subgt.w	r9, r9, r3
 800bc38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	dd17      	ble.n	800bc6e <_strtod_l+0x75e>
 800bc3e:	4631      	mov	r1, r6
 800bc40:	461a      	mov	r2, r3
 800bc42:	4620      	mov	r0, r4
 800bc44:	f001 ff38 	bl	800dab8 <__pow5mult>
 800bc48:	4606      	mov	r6, r0
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	f43f aea8 	beq.w	800b9a0 <_strtod_l+0x490>
 800bc50:	4601      	mov	r1, r0
 800bc52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bc54:	4620      	mov	r0, r4
 800bc56:	f001 fe85 	bl	800d964 <__multiply>
 800bc5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	f43f ae9f 	beq.w	800b9a0 <_strtod_l+0x490>
 800bc62:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc64:	4620      	mov	r0, r4
 800bc66:	f001 fd65 	bl	800d734 <_Bfree>
 800bc6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc6c:	9318      	str	r3, [sp, #96]	; 0x60
 800bc6e:	f1b8 0f00 	cmp.w	r8, #0
 800bc72:	f300 808c 	bgt.w	800bd8e <_strtod_l+0x87e>
 800bc76:	9b06      	ldr	r3, [sp, #24]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	dd08      	ble.n	800bc8e <_strtod_l+0x77e>
 800bc7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc7e:	9905      	ldr	r1, [sp, #20]
 800bc80:	4620      	mov	r0, r4
 800bc82:	f001 ff19 	bl	800dab8 <__pow5mult>
 800bc86:	9005      	str	r0, [sp, #20]
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	f43f ae89 	beq.w	800b9a0 <_strtod_l+0x490>
 800bc8e:	2f00      	cmp	r7, #0
 800bc90:	dd08      	ble.n	800bca4 <_strtod_l+0x794>
 800bc92:	9905      	ldr	r1, [sp, #20]
 800bc94:	463a      	mov	r2, r7
 800bc96:	4620      	mov	r0, r4
 800bc98:	f001 ff68 	bl	800db6c <__lshift>
 800bc9c:	9005      	str	r0, [sp, #20]
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f43f ae7e 	beq.w	800b9a0 <_strtod_l+0x490>
 800bca4:	f1b9 0f00 	cmp.w	r9, #0
 800bca8:	dd08      	ble.n	800bcbc <_strtod_l+0x7ac>
 800bcaa:	4631      	mov	r1, r6
 800bcac:	464a      	mov	r2, r9
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f001 ff5c 	bl	800db6c <__lshift>
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f43f ae72 	beq.w	800b9a0 <_strtod_l+0x490>
 800bcbc:	9a05      	ldr	r2, [sp, #20]
 800bcbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f001 ffdf 	bl	800dc84 <__mdiff>
 800bcc6:	4605      	mov	r5, r0
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	f43f ae69 	beq.w	800b9a0 <_strtod_l+0x490>
 800bcce:	68c3      	ldr	r3, [r0, #12]
 800bcd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60c3      	str	r3, [r0, #12]
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	f001 ffb8 	bl	800dc4c <__mcmp>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	da60      	bge.n	800bda2 <_strtod_l+0x892>
 800bce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bce2:	ea53 030a 	orrs.w	r3, r3, sl
 800bce6:	f040 8082 	bne.w	800bdee <_strtod_l+0x8de>
 800bcea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d17d      	bne.n	800bdee <_strtod_l+0x8de>
 800bcf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcf6:	0d1b      	lsrs	r3, r3, #20
 800bcf8:	051b      	lsls	r3, r3, #20
 800bcfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bcfe:	d976      	bls.n	800bdee <_strtod_l+0x8de>
 800bd00:	696b      	ldr	r3, [r5, #20]
 800bd02:	b913      	cbnz	r3, 800bd0a <_strtod_l+0x7fa>
 800bd04:	692b      	ldr	r3, [r5, #16]
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	dd71      	ble.n	800bdee <_strtod_l+0x8de>
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f001 ff2c 	bl	800db6c <__lshift>
 800bd14:	4631      	mov	r1, r6
 800bd16:	4605      	mov	r5, r0
 800bd18:	f001 ff98 	bl	800dc4c <__mcmp>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	dd66      	ble.n	800bdee <_strtod_l+0x8de>
 800bd20:	9904      	ldr	r1, [sp, #16]
 800bd22:	4a53      	ldr	r2, [pc, #332]	; (800be70 <_strtod_l+0x960>)
 800bd24:	465b      	mov	r3, fp
 800bd26:	2900      	cmp	r1, #0
 800bd28:	f000 8081 	beq.w	800be2e <_strtod_l+0x91e>
 800bd2c:	ea02 010b 	and.w	r1, r2, fp
 800bd30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bd34:	dc7b      	bgt.n	800be2e <_strtod_l+0x91e>
 800bd36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bd3a:	f77f aea9 	ble.w	800ba90 <_strtod_l+0x580>
 800bd3e:	4b4d      	ldr	r3, [pc, #308]	; (800be74 <_strtod_l+0x964>)
 800bd40:	4650      	mov	r0, sl
 800bd42:	4659      	mov	r1, fp
 800bd44:	2200      	movs	r2, #0
 800bd46:	f7f4 fc57 	bl	80005f8 <__aeabi_dmul>
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4303      	orrs	r3, r0
 800bd4e:	bf08      	it	eq
 800bd50:	2322      	moveq	r3, #34	; 0x22
 800bd52:	4682      	mov	sl, r0
 800bd54:	468b      	mov	fp, r1
 800bd56:	bf08      	it	eq
 800bd58:	6023      	streq	r3, [r4, #0]
 800bd5a:	e62b      	b.n	800b9b4 <_strtod_l+0x4a4>
 800bd5c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd60:	fa02 f303 	lsl.w	r3, r2, r3
 800bd64:	ea03 0a0a 	and.w	sl, r3, sl
 800bd68:	e6e3      	b.n	800bb32 <_strtod_l+0x622>
 800bd6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bd6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bd72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bd76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bd7a:	fa01 f308 	lsl.w	r3, r1, r8
 800bd7e:	9308      	str	r3, [sp, #32]
 800bd80:	910d      	str	r1, [sp, #52]	; 0x34
 800bd82:	e746      	b.n	800bc12 <_strtod_l+0x702>
 800bd84:	2300      	movs	r3, #0
 800bd86:	9308      	str	r3, [sp, #32]
 800bd88:	2301      	movs	r3, #1
 800bd8a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd8c:	e741      	b.n	800bc12 <_strtod_l+0x702>
 800bd8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd90:	4642      	mov	r2, r8
 800bd92:	4620      	mov	r0, r4
 800bd94:	f001 feea 	bl	800db6c <__lshift>
 800bd98:	9018      	str	r0, [sp, #96]	; 0x60
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	f47f af6b 	bne.w	800bc76 <_strtod_l+0x766>
 800bda0:	e5fe      	b.n	800b9a0 <_strtod_l+0x490>
 800bda2:	465f      	mov	r7, fp
 800bda4:	d16e      	bne.n	800be84 <_strtod_l+0x974>
 800bda6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bda8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdac:	b342      	cbz	r2, 800be00 <_strtod_l+0x8f0>
 800bdae:	4a32      	ldr	r2, [pc, #200]	; (800be78 <_strtod_l+0x968>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d128      	bne.n	800be06 <_strtod_l+0x8f6>
 800bdb4:	9b04      	ldr	r3, [sp, #16]
 800bdb6:	4651      	mov	r1, sl
 800bdb8:	b1eb      	cbz	r3, 800bdf6 <_strtod_l+0x8e6>
 800bdba:	4b2d      	ldr	r3, [pc, #180]	; (800be70 <_strtod_l+0x960>)
 800bdbc:	403b      	ands	r3, r7
 800bdbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bdc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc6:	d819      	bhi.n	800bdfc <_strtod_l+0x8ec>
 800bdc8:	0d1b      	lsrs	r3, r3, #20
 800bdca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bdce:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd2:	4299      	cmp	r1, r3
 800bdd4:	d117      	bne.n	800be06 <_strtod_l+0x8f6>
 800bdd6:	4b29      	ldr	r3, [pc, #164]	; (800be7c <_strtod_l+0x96c>)
 800bdd8:	429f      	cmp	r7, r3
 800bdda:	d102      	bne.n	800bde2 <_strtod_l+0x8d2>
 800bddc:	3101      	adds	r1, #1
 800bdde:	f43f addf 	beq.w	800b9a0 <_strtod_l+0x490>
 800bde2:	4b23      	ldr	r3, [pc, #140]	; (800be70 <_strtod_l+0x960>)
 800bde4:	403b      	ands	r3, r7
 800bde6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bdea:	f04f 0a00 	mov.w	sl, #0
 800bdee:	9b04      	ldr	r3, [sp, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1a4      	bne.n	800bd3e <_strtod_l+0x82e>
 800bdf4:	e5de      	b.n	800b9b4 <_strtod_l+0x4a4>
 800bdf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfa:	e7ea      	b.n	800bdd2 <_strtod_l+0x8c2>
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	e7e8      	b.n	800bdd2 <_strtod_l+0x8c2>
 800be00:	ea53 030a 	orrs.w	r3, r3, sl
 800be04:	d08c      	beq.n	800bd20 <_strtod_l+0x810>
 800be06:	9b08      	ldr	r3, [sp, #32]
 800be08:	b1db      	cbz	r3, 800be42 <_strtod_l+0x932>
 800be0a:	423b      	tst	r3, r7
 800be0c:	d0ef      	beq.n	800bdee <_strtod_l+0x8de>
 800be0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be10:	9a04      	ldr	r2, [sp, #16]
 800be12:	4650      	mov	r0, sl
 800be14:	4659      	mov	r1, fp
 800be16:	b1c3      	cbz	r3, 800be4a <_strtod_l+0x93a>
 800be18:	f7ff fb5b 	bl	800b4d2 <sulp>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	ec51 0b18 	vmov	r0, r1, d8
 800be24:	f7f4 fa32 	bl	800028c <__adddf3>
 800be28:	4682      	mov	sl, r0
 800be2a:	468b      	mov	fp, r1
 800be2c:	e7df      	b.n	800bdee <_strtod_l+0x8de>
 800be2e:	4013      	ands	r3, r2
 800be30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800be34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be3c:	f04f 3aff 	mov.w	sl, #4294967295
 800be40:	e7d5      	b.n	800bdee <_strtod_l+0x8de>
 800be42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be44:	ea13 0f0a 	tst.w	r3, sl
 800be48:	e7e0      	b.n	800be0c <_strtod_l+0x8fc>
 800be4a:	f7ff fb42 	bl	800b4d2 <sulp>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	ec51 0b18 	vmov	r0, r1, d8
 800be56:	f7f4 fa17 	bl	8000288 <__aeabi_dsub>
 800be5a:	2200      	movs	r2, #0
 800be5c:	2300      	movs	r3, #0
 800be5e:	4682      	mov	sl, r0
 800be60:	468b      	mov	fp, r1
 800be62:	f7f4 fe31 	bl	8000ac8 <__aeabi_dcmpeq>
 800be66:	2800      	cmp	r0, #0
 800be68:	d0c1      	beq.n	800bdee <_strtod_l+0x8de>
 800be6a:	e611      	b.n	800ba90 <_strtod_l+0x580>
 800be6c:	fffffc02 	.word	0xfffffc02
 800be70:	7ff00000 	.word	0x7ff00000
 800be74:	39500000 	.word	0x39500000
 800be78:	000fffff 	.word	0x000fffff
 800be7c:	7fefffff 	.word	0x7fefffff
 800be80:	0800fd30 	.word	0x0800fd30
 800be84:	4631      	mov	r1, r6
 800be86:	4628      	mov	r0, r5
 800be88:	f002 f85e 	bl	800df48 <__ratio>
 800be8c:	ec59 8b10 	vmov	r8, r9, d0
 800be90:	ee10 0a10 	vmov	r0, s0
 800be94:	2200      	movs	r2, #0
 800be96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be9a:	4649      	mov	r1, r9
 800be9c:	f7f4 fe28 	bl	8000af0 <__aeabi_dcmple>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d07a      	beq.n	800bf9a <_strtod_l+0xa8a>
 800bea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d04a      	beq.n	800bf40 <_strtod_l+0xa30>
 800beaa:	4b95      	ldr	r3, [pc, #596]	; (800c100 <_strtod_l+0xbf0>)
 800beac:	2200      	movs	r2, #0
 800beae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800beb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c100 <_strtod_l+0xbf0>
 800beb6:	f04f 0800 	mov.w	r8, #0
 800beba:	4b92      	ldr	r3, [pc, #584]	; (800c104 <_strtod_l+0xbf4>)
 800bebc:	403b      	ands	r3, r7
 800bebe:	930d      	str	r3, [sp, #52]	; 0x34
 800bec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bec2:	4b91      	ldr	r3, [pc, #580]	; (800c108 <_strtod_l+0xbf8>)
 800bec4:	429a      	cmp	r2, r3
 800bec6:	f040 80b0 	bne.w	800c02a <_strtod_l+0xb1a>
 800beca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bece:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bed2:	ec4b ab10 	vmov	d0, sl, fp
 800bed6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800beda:	f001 ff5d 	bl	800dd98 <__ulp>
 800bede:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bee2:	ec53 2b10 	vmov	r2, r3, d0
 800bee6:	f7f4 fb87 	bl	80005f8 <__aeabi_dmul>
 800beea:	4652      	mov	r2, sl
 800beec:	465b      	mov	r3, fp
 800beee:	f7f4 f9cd 	bl	800028c <__adddf3>
 800bef2:	460b      	mov	r3, r1
 800bef4:	4983      	ldr	r1, [pc, #524]	; (800c104 <_strtod_l+0xbf4>)
 800bef6:	4a85      	ldr	r2, [pc, #532]	; (800c10c <_strtod_l+0xbfc>)
 800bef8:	4019      	ands	r1, r3
 800befa:	4291      	cmp	r1, r2
 800befc:	4682      	mov	sl, r0
 800befe:	d960      	bls.n	800bfc2 <_strtod_l+0xab2>
 800bf00:	ee18 3a90 	vmov	r3, s17
 800bf04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d104      	bne.n	800bf16 <_strtod_l+0xa06>
 800bf0c:	ee18 3a10 	vmov	r3, s16
 800bf10:	3301      	adds	r3, #1
 800bf12:	f43f ad45 	beq.w	800b9a0 <_strtod_l+0x490>
 800bf16:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c118 <_strtod_l+0xc08>
 800bf1a:	f04f 3aff 	mov.w	sl, #4294967295
 800bf1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf20:	4620      	mov	r0, r4
 800bf22:	f001 fc07 	bl	800d734 <_Bfree>
 800bf26:	9905      	ldr	r1, [sp, #20]
 800bf28:	4620      	mov	r0, r4
 800bf2a:	f001 fc03 	bl	800d734 <_Bfree>
 800bf2e:	4631      	mov	r1, r6
 800bf30:	4620      	mov	r0, r4
 800bf32:	f001 fbff 	bl	800d734 <_Bfree>
 800bf36:	4629      	mov	r1, r5
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f001 fbfb 	bl	800d734 <_Bfree>
 800bf3e:	e61a      	b.n	800bb76 <_strtod_l+0x666>
 800bf40:	f1ba 0f00 	cmp.w	sl, #0
 800bf44:	d11b      	bne.n	800bf7e <_strtod_l+0xa6e>
 800bf46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf4a:	b9f3      	cbnz	r3, 800bf8a <_strtod_l+0xa7a>
 800bf4c:	4b6c      	ldr	r3, [pc, #432]	; (800c100 <_strtod_l+0xbf0>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	4640      	mov	r0, r8
 800bf52:	4649      	mov	r1, r9
 800bf54:	f7f4 fdc2 	bl	8000adc <__aeabi_dcmplt>
 800bf58:	b9d0      	cbnz	r0, 800bf90 <_strtod_l+0xa80>
 800bf5a:	4640      	mov	r0, r8
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	4b6c      	ldr	r3, [pc, #432]	; (800c110 <_strtod_l+0xc00>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	f7f4 fb49 	bl	80005f8 <__aeabi_dmul>
 800bf66:	4680      	mov	r8, r0
 800bf68:	4689      	mov	r9, r1
 800bf6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bf6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bf72:	9315      	str	r3, [sp, #84]	; 0x54
 800bf74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bf78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf7c:	e79d      	b.n	800beba <_strtod_l+0x9aa>
 800bf7e:	f1ba 0f01 	cmp.w	sl, #1
 800bf82:	d102      	bne.n	800bf8a <_strtod_l+0xa7a>
 800bf84:	2f00      	cmp	r7, #0
 800bf86:	f43f ad83 	beq.w	800ba90 <_strtod_l+0x580>
 800bf8a:	4b62      	ldr	r3, [pc, #392]	; (800c114 <_strtod_l+0xc04>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	e78e      	b.n	800beae <_strtod_l+0x99e>
 800bf90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c110 <_strtod_l+0xc00>
 800bf94:	f04f 0800 	mov.w	r8, #0
 800bf98:	e7e7      	b.n	800bf6a <_strtod_l+0xa5a>
 800bf9a:	4b5d      	ldr	r3, [pc, #372]	; (800c110 <_strtod_l+0xc00>)
 800bf9c:	4640      	mov	r0, r8
 800bf9e:	4649      	mov	r1, r9
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f7f4 fb29 	bl	80005f8 <__aeabi_dmul>
 800bfa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfa8:	4680      	mov	r8, r0
 800bfaa:	4689      	mov	r9, r1
 800bfac:	b933      	cbnz	r3, 800bfbc <_strtod_l+0xaac>
 800bfae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfb2:	900e      	str	r0, [sp, #56]	; 0x38
 800bfb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bfba:	e7dd      	b.n	800bf78 <_strtod_l+0xa68>
 800bfbc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bfc0:	e7f9      	b.n	800bfb6 <_strtod_l+0xaa6>
 800bfc2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bfc6:	9b04      	ldr	r3, [sp, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1a8      	bne.n	800bf1e <_strtod_l+0xa0e>
 800bfcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfd2:	0d1b      	lsrs	r3, r3, #20
 800bfd4:	051b      	lsls	r3, r3, #20
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d1a1      	bne.n	800bf1e <_strtod_l+0xa0e>
 800bfda:	4640      	mov	r0, r8
 800bfdc:	4649      	mov	r1, r9
 800bfde:	f7f4 fe6b 	bl	8000cb8 <__aeabi_d2lz>
 800bfe2:	f7f4 fadb 	bl	800059c <__aeabi_l2d>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	460b      	mov	r3, r1
 800bfea:	4640      	mov	r0, r8
 800bfec:	4649      	mov	r1, r9
 800bfee:	f7f4 f94b 	bl	8000288 <__aeabi_dsub>
 800bff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bff8:	ea43 030a 	orr.w	r3, r3, sl
 800bffc:	4313      	orrs	r3, r2
 800bffe:	4680      	mov	r8, r0
 800c000:	4689      	mov	r9, r1
 800c002:	d055      	beq.n	800c0b0 <_strtod_l+0xba0>
 800c004:	a336      	add	r3, pc, #216	; (adr r3, 800c0e0 <_strtod_l+0xbd0>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 fd67 	bl	8000adc <__aeabi_dcmplt>
 800c00e:	2800      	cmp	r0, #0
 800c010:	f47f acd0 	bne.w	800b9b4 <_strtod_l+0x4a4>
 800c014:	a334      	add	r3, pc, #208	; (adr r3, 800c0e8 <_strtod_l+0xbd8>)
 800c016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01a:	4640      	mov	r0, r8
 800c01c:	4649      	mov	r1, r9
 800c01e:	f7f4 fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 800c022:	2800      	cmp	r0, #0
 800c024:	f43f af7b 	beq.w	800bf1e <_strtod_l+0xa0e>
 800c028:	e4c4      	b.n	800b9b4 <_strtod_l+0x4a4>
 800c02a:	9b04      	ldr	r3, [sp, #16]
 800c02c:	b333      	cbz	r3, 800c07c <_strtod_l+0xb6c>
 800c02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c030:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c034:	d822      	bhi.n	800c07c <_strtod_l+0xb6c>
 800c036:	a32e      	add	r3, pc, #184	; (adr r3, 800c0f0 <_strtod_l+0xbe0>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	4640      	mov	r0, r8
 800c03e:	4649      	mov	r1, r9
 800c040:	f7f4 fd56 	bl	8000af0 <__aeabi_dcmple>
 800c044:	b1a0      	cbz	r0, 800c070 <_strtod_l+0xb60>
 800c046:	4649      	mov	r1, r9
 800c048:	4640      	mov	r0, r8
 800c04a:	f7f4 fdad 	bl	8000ba8 <__aeabi_d2uiz>
 800c04e:	2801      	cmp	r0, #1
 800c050:	bf38      	it	cc
 800c052:	2001      	movcc	r0, #1
 800c054:	f7f4 fa56 	bl	8000504 <__aeabi_ui2d>
 800c058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c05a:	4680      	mov	r8, r0
 800c05c:	4689      	mov	r9, r1
 800c05e:	bb23      	cbnz	r3, 800c0aa <_strtod_l+0xb9a>
 800c060:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c064:	9010      	str	r0, [sp, #64]	; 0x40
 800c066:	9311      	str	r3, [sp, #68]	; 0x44
 800c068:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c06c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c072:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c074:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c078:	1a9b      	subs	r3, r3, r2
 800c07a:	9309      	str	r3, [sp, #36]	; 0x24
 800c07c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c080:	eeb0 0a48 	vmov.f32	s0, s16
 800c084:	eef0 0a68 	vmov.f32	s1, s17
 800c088:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c08c:	f001 fe84 	bl	800dd98 <__ulp>
 800c090:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c094:	ec53 2b10 	vmov	r2, r3, d0
 800c098:	f7f4 faae 	bl	80005f8 <__aeabi_dmul>
 800c09c:	ec53 2b18 	vmov	r2, r3, d8
 800c0a0:	f7f4 f8f4 	bl	800028c <__adddf3>
 800c0a4:	4682      	mov	sl, r0
 800c0a6:	468b      	mov	fp, r1
 800c0a8:	e78d      	b.n	800bfc6 <_strtod_l+0xab6>
 800c0aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c0ae:	e7db      	b.n	800c068 <_strtod_l+0xb58>
 800c0b0:	a311      	add	r3, pc, #68	; (adr r3, 800c0f8 <_strtod_l+0xbe8>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 fd11 	bl	8000adc <__aeabi_dcmplt>
 800c0ba:	e7b2      	b.n	800c022 <_strtod_l+0xb12>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	930a      	str	r3, [sp, #40]	; 0x28
 800c0c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c0c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0c4:	6013      	str	r3, [r2, #0]
 800c0c6:	f7ff ba6b 	b.w	800b5a0 <_strtod_l+0x90>
 800c0ca:	2a65      	cmp	r2, #101	; 0x65
 800c0cc:	f43f ab5f 	beq.w	800b78e <_strtod_l+0x27e>
 800c0d0:	2a45      	cmp	r2, #69	; 0x45
 800c0d2:	f43f ab5c 	beq.w	800b78e <_strtod_l+0x27e>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	f7ff bb94 	b.w	800b804 <_strtod_l+0x2f4>
 800c0dc:	f3af 8000 	nop.w
 800c0e0:	94a03595 	.word	0x94a03595
 800c0e4:	3fdfffff 	.word	0x3fdfffff
 800c0e8:	35afe535 	.word	0x35afe535
 800c0ec:	3fe00000 	.word	0x3fe00000
 800c0f0:	ffc00000 	.word	0xffc00000
 800c0f4:	41dfffff 	.word	0x41dfffff
 800c0f8:	94a03595 	.word	0x94a03595
 800c0fc:	3fcfffff 	.word	0x3fcfffff
 800c100:	3ff00000 	.word	0x3ff00000
 800c104:	7ff00000 	.word	0x7ff00000
 800c108:	7fe00000 	.word	0x7fe00000
 800c10c:	7c9fffff 	.word	0x7c9fffff
 800c110:	3fe00000 	.word	0x3fe00000
 800c114:	bff00000 	.word	0xbff00000
 800c118:	7fefffff 	.word	0x7fefffff

0800c11c <_strtod_r>:
 800c11c:	4b01      	ldr	r3, [pc, #4]	; (800c124 <_strtod_r+0x8>)
 800c11e:	f7ff b9f7 	b.w	800b510 <_strtod_l>
 800c122:	bf00      	nop
 800c124:	20000164 	.word	0x20000164

0800c128 <_strtol_l.constprop.0>:
 800c128:	2b01      	cmp	r3, #1
 800c12a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c12e:	d001      	beq.n	800c134 <_strtol_l.constprop.0+0xc>
 800c130:	2b24      	cmp	r3, #36	; 0x24
 800c132:	d906      	bls.n	800c142 <_strtol_l.constprop.0+0x1a>
 800c134:	f7fe f97c 	bl	800a430 <__errno>
 800c138:	2316      	movs	r3, #22
 800c13a:	6003      	str	r3, [r0, #0]
 800c13c:	2000      	movs	r0, #0
 800c13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c142:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c228 <_strtol_l.constprop.0+0x100>
 800c146:	460d      	mov	r5, r1
 800c148:	462e      	mov	r6, r5
 800c14a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c14e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c152:	f017 0708 	ands.w	r7, r7, #8
 800c156:	d1f7      	bne.n	800c148 <_strtol_l.constprop.0+0x20>
 800c158:	2c2d      	cmp	r4, #45	; 0x2d
 800c15a:	d132      	bne.n	800c1c2 <_strtol_l.constprop.0+0x9a>
 800c15c:	782c      	ldrb	r4, [r5, #0]
 800c15e:	2701      	movs	r7, #1
 800c160:	1cb5      	adds	r5, r6, #2
 800c162:	2b00      	cmp	r3, #0
 800c164:	d05b      	beq.n	800c21e <_strtol_l.constprop.0+0xf6>
 800c166:	2b10      	cmp	r3, #16
 800c168:	d109      	bne.n	800c17e <_strtol_l.constprop.0+0x56>
 800c16a:	2c30      	cmp	r4, #48	; 0x30
 800c16c:	d107      	bne.n	800c17e <_strtol_l.constprop.0+0x56>
 800c16e:	782c      	ldrb	r4, [r5, #0]
 800c170:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c174:	2c58      	cmp	r4, #88	; 0x58
 800c176:	d14d      	bne.n	800c214 <_strtol_l.constprop.0+0xec>
 800c178:	786c      	ldrb	r4, [r5, #1]
 800c17a:	2310      	movs	r3, #16
 800c17c:	3502      	adds	r5, #2
 800c17e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c182:	f108 38ff 	add.w	r8, r8, #4294967295
 800c186:	f04f 0c00 	mov.w	ip, #0
 800c18a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c18e:	4666      	mov	r6, ip
 800c190:	fb03 8a19 	mls	sl, r3, r9, r8
 800c194:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c198:	f1be 0f09 	cmp.w	lr, #9
 800c19c:	d816      	bhi.n	800c1cc <_strtol_l.constprop.0+0xa4>
 800c19e:	4674      	mov	r4, lr
 800c1a0:	42a3      	cmp	r3, r4
 800c1a2:	dd24      	ble.n	800c1ee <_strtol_l.constprop.0+0xc6>
 800c1a4:	f1bc 0f00 	cmp.w	ip, #0
 800c1a8:	db1e      	blt.n	800c1e8 <_strtol_l.constprop.0+0xc0>
 800c1aa:	45b1      	cmp	r9, r6
 800c1ac:	d31c      	bcc.n	800c1e8 <_strtol_l.constprop.0+0xc0>
 800c1ae:	d101      	bne.n	800c1b4 <_strtol_l.constprop.0+0x8c>
 800c1b0:	45a2      	cmp	sl, r4
 800c1b2:	db19      	blt.n	800c1e8 <_strtol_l.constprop.0+0xc0>
 800c1b4:	fb06 4603 	mla	r6, r6, r3, r4
 800c1b8:	f04f 0c01 	mov.w	ip, #1
 800c1bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1c0:	e7e8      	b.n	800c194 <_strtol_l.constprop.0+0x6c>
 800c1c2:	2c2b      	cmp	r4, #43	; 0x2b
 800c1c4:	bf04      	itt	eq
 800c1c6:	782c      	ldrbeq	r4, [r5, #0]
 800c1c8:	1cb5      	addeq	r5, r6, #2
 800c1ca:	e7ca      	b.n	800c162 <_strtol_l.constprop.0+0x3a>
 800c1cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c1d0:	f1be 0f19 	cmp.w	lr, #25
 800c1d4:	d801      	bhi.n	800c1da <_strtol_l.constprop.0+0xb2>
 800c1d6:	3c37      	subs	r4, #55	; 0x37
 800c1d8:	e7e2      	b.n	800c1a0 <_strtol_l.constprop.0+0x78>
 800c1da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c1de:	f1be 0f19 	cmp.w	lr, #25
 800c1e2:	d804      	bhi.n	800c1ee <_strtol_l.constprop.0+0xc6>
 800c1e4:	3c57      	subs	r4, #87	; 0x57
 800c1e6:	e7db      	b.n	800c1a0 <_strtol_l.constprop.0+0x78>
 800c1e8:	f04f 3cff 	mov.w	ip, #4294967295
 800c1ec:	e7e6      	b.n	800c1bc <_strtol_l.constprop.0+0x94>
 800c1ee:	f1bc 0f00 	cmp.w	ip, #0
 800c1f2:	da05      	bge.n	800c200 <_strtol_l.constprop.0+0xd8>
 800c1f4:	2322      	movs	r3, #34	; 0x22
 800c1f6:	6003      	str	r3, [r0, #0]
 800c1f8:	4646      	mov	r6, r8
 800c1fa:	b942      	cbnz	r2, 800c20e <_strtol_l.constprop.0+0xe6>
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	e79e      	b.n	800c13e <_strtol_l.constprop.0+0x16>
 800c200:	b107      	cbz	r7, 800c204 <_strtol_l.constprop.0+0xdc>
 800c202:	4276      	negs	r6, r6
 800c204:	2a00      	cmp	r2, #0
 800c206:	d0f9      	beq.n	800c1fc <_strtol_l.constprop.0+0xd4>
 800c208:	f1bc 0f00 	cmp.w	ip, #0
 800c20c:	d000      	beq.n	800c210 <_strtol_l.constprop.0+0xe8>
 800c20e:	1e69      	subs	r1, r5, #1
 800c210:	6011      	str	r1, [r2, #0]
 800c212:	e7f3      	b.n	800c1fc <_strtol_l.constprop.0+0xd4>
 800c214:	2430      	movs	r4, #48	; 0x30
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1b1      	bne.n	800c17e <_strtol_l.constprop.0+0x56>
 800c21a:	2308      	movs	r3, #8
 800c21c:	e7af      	b.n	800c17e <_strtol_l.constprop.0+0x56>
 800c21e:	2c30      	cmp	r4, #48	; 0x30
 800c220:	d0a5      	beq.n	800c16e <_strtol_l.constprop.0+0x46>
 800c222:	230a      	movs	r3, #10
 800c224:	e7ab      	b.n	800c17e <_strtol_l.constprop.0+0x56>
 800c226:	bf00      	nop
 800c228:	0800fd59 	.word	0x0800fd59

0800c22c <_strtol_r>:
 800c22c:	f7ff bf7c 	b.w	800c128 <_strtol_l.constprop.0>

0800c230 <_write_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4d07      	ldr	r5, [pc, #28]	; (800c250 <_write_r+0x20>)
 800c234:	4604      	mov	r4, r0
 800c236:	4608      	mov	r0, r1
 800c238:	4611      	mov	r1, r2
 800c23a:	2200      	movs	r2, #0
 800c23c:	602a      	str	r2, [r5, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	f7f6 f96b 	bl	800251a <_write>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_write_r+0x1e>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_write_r+0x1e>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	20002e34 	.word	0x20002e34

0800c254 <_close_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4d06      	ldr	r5, [pc, #24]	; (800c270 <_close_r+0x1c>)
 800c258:	2300      	movs	r3, #0
 800c25a:	4604      	mov	r4, r0
 800c25c:	4608      	mov	r0, r1
 800c25e:	602b      	str	r3, [r5, #0]
 800c260:	f7f6 f977 	bl	8002552 <_close>
 800c264:	1c43      	adds	r3, r0, #1
 800c266:	d102      	bne.n	800c26e <_close_r+0x1a>
 800c268:	682b      	ldr	r3, [r5, #0]
 800c26a:	b103      	cbz	r3, 800c26e <_close_r+0x1a>
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	bd38      	pop	{r3, r4, r5, pc}
 800c270:	20002e34 	.word	0x20002e34

0800c274 <quorem>:
 800c274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c278:	6903      	ldr	r3, [r0, #16]
 800c27a:	690c      	ldr	r4, [r1, #16]
 800c27c:	42a3      	cmp	r3, r4
 800c27e:	4607      	mov	r7, r0
 800c280:	f2c0 8081 	blt.w	800c386 <quorem+0x112>
 800c284:	3c01      	subs	r4, #1
 800c286:	f101 0814 	add.w	r8, r1, #20
 800c28a:	f100 0514 	add.w	r5, r0, #20
 800c28e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c298:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c29c:	3301      	adds	r3, #1
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2ac:	d331      	bcc.n	800c312 <quorem+0x9e>
 800c2ae:	f04f 0e00 	mov.w	lr, #0
 800c2b2:	4640      	mov	r0, r8
 800c2b4:	46ac      	mov	ip, r5
 800c2b6:	46f2      	mov	sl, lr
 800c2b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2bc:	b293      	uxth	r3, r2
 800c2be:	fb06 e303 	mla	r3, r6, r3, lr
 800c2c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	ebaa 0303 	sub.w	r3, sl, r3
 800c2cc:	f8dc a000 	ldr.w	sl, [ip]
 800c2d0:	0c12      	lsrs	r2, r2, #16
 800c2d2:	fa13 f38a 	uxtah	r3, r3, sl
 800c2d6:	fb06 e202 	mla	r2, r6, r2, lr
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	9b00      	ldr	r3, [sp, #0]
 800c2de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2e2:	b292      	uxth	r2, r2
 800c2e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c2e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800c2f0:	4581      	cmp	r9, r0
 800c2f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2f6:	f84c 3b04 	str.w	r3, [ip], #4
 800c2fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2fe:	d2db      	bcs.n	800c2b8 <quorem+0x44>
 800c300:	f855 300b 	ldr.w	r3, [r5, fp]
 800c304:	b92b      	cbnz	r3, 800c312 <quorem+0x9e>
 800c306:	9b01      	ldr	r3, [sp, #4]
 800c308:	3b04      	subs	r3, #4
 800c30a:	429d      	cmp	r5, r3
 800c30c:	461a      	mov	r2, r3
 800c30e:	d32e      	bcc.n	800c36e <quorem+0xfa>
 800c310:	613c      	str	r4, [r7, #16]
 800c312:	4638      	mov	r0, r7
 800c314:	f001 fc9a 	bl	800dc4c <__mcmp>
 800c318:	2800      	cmp	r0, #0
 800c31a:	db24      	blt.n	800c366 <quorem+0xf2>
 800c31c:	3601      	adds	r6, #1
 800c31e:	4628      	mov	r0, r5
 800c320:	f04f 0c00 	mov.w	ip, #0
 800c324:	f858 2b04 	ldr.w	r2, [r8], #4
 800c328:	f8d0 e000 	ldr.w	lr, [r0]
 800c32c:	b293      	uxth	r3, r2
 800c32e:	ebac 0303 	sub.w	r3, ip, r3
 800c332:	0c12      	lsrs	r2, r2, #16
 800c334:	fa13 f38e 	uxtah	r3, r3, lr
 800c338:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c33c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c340:	b29b      	uxth	r3, r3
 800c342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c346:	45c1      	cmp	r9, r8
 800c348:	f840 3b04 	str.w	r3, [r0], #4
 800c34c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c350:	d2e8      	bcs.n	800c324 <quorem+0xb0>
 800c352:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c35a:	b922      	cbnz	r2, 800c366 <quorem+0xf2>
 800c35c:	3b04      	subs	r3, #4
 800c35e:	429d      	cmp	r5, r3
 800c360:	461a      	mov	r2, r3
 800c362:	d30a      	bcc.n	800c37a <quorem+0x106>
 800c364:	613c      	str	r4, [r7, #16]
 800c366:	4630      	mov	r0, r6
 800c368:	b003      	add	sp, #12
 800c36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36e:	6812      	ldr	r2, [r2, #0]
 800c370:	3b04      	subs	r3, #4
 800c372:	2a00      	cmp	r2, #0
 800c374:	d1cc      	bne.n	800c310 <quorem+0x9c>
 800c376:	3c01      	subs	r4, #1
 800c378:	e7c7      	b.n	800c30a <quorem+0x96>
 800c37a:	6812      	ldr	r2, [r2, #0]
 800c37c:	3b04      	subs	r3, #4
 800c37e:	2a00      	cmp	r2, #0
 800c380:	d1f0      	bne.n	800c364 <quorem+0xf0>
 800c382:	3c01      	subs	r4, #1
 800c384:	e7eb      	b.n	800c35e <quorem+0xea>
 800c386:	2000      	movs	r0, #0
 800c388:	e7ee      	b.n	800c368 <quorem+0xf4>
 800c38a:	0000      	movs	r0, r0
 800c38c:	0000      	movs	r0, r0
	...

0800c390 <_dtoa_r>:
 800c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c394:	ed2d 8b04 	vpush	{d8-d9}
 800c398:	ec57 6b10 	vmov	r6, r7, d0
 800c39c:	b093      	sub	sp, #76	; 0x4c
 800c39e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c3a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3a4:	9106      	str	r1, [sp, #24]
 800c3a6:	ee10 aa10 	vmov	sl, s0
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c3ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c3b0:	46bb      	mov	fp, r7
 800c3b2:	b975      	cbnz	r5, 800c3d2 <_dtoa_r+0x42>
 800c3b4:	2010      	movs	r0, #16
 800c3b6:	f7fe f865 	bl	800a484 <malloc>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	6260      	str	r0, [r4, #36]	; 0x24
 800c3be:	b920      	cbnz	r0, 800c3ca <_dtoa_r+0x3a>
 800c3c0:	4ba7      	ldr	r3, [pc, #668]	; (800c660 <_dtoa_r+0x2d0>)
 800c3c2:	21ea      	movs	r1, #234	; 0xea
 800c3c4:	48a7      	ldr	r0, [pc, #668]	; (800c664 <_dtoa_r+0x2d4>)
 800c3c6:	f002 fbef 	bl	800eba8 <__assert_func>
 800c3ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c3ce:	6005      	str	r5, [r0, #0]
 800c3d0:	60c5      	str	r5, [r0, #12]
 800c3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3d4:	6819      	ldr	r1, [r3, #0]
 800c3d6:	b151      	cbz	r1, 800c3ee <_dtoa_r+0x5e>
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	604a      	str	r2, [r1, #4]
 800c3dc:	2301      	movs	r3, #1
 800c3de:	4093      	lsls	r3, r2
 800c3e0:	608b      	str	r3, [r1, #8]
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f001 f9a6 	bl	800d734 <_Bfree>
 800c3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	1e3b      	subs	r3, r7, #0
 800c3f0:	bfaa      	itet	ge
 800c3f2:	2300      	movge	r3, #0
 800c3f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c3f8:	f8c8 3000 	strge.w	r3, [r8]
 800c3fc:	4b9a      	ldr	r3, [pc, #616]	; (800c668 <_dtoa_r+0x2d8>)
 800c3fe:	bfbc      	itt	lt
 800c400:	2201      	movlt	r2, #1
 800c402:	f8c8 2000 	strlt.w	r2, [r8]
 800c406:	ea33 030b 	bics.w	r3, r3, fp
 800c40a:	d11b      	bne.n	800c444 <_dtoa_r+0xb4>
 800c40c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c40e:	f242 730f 	movw	r3, #9999	; 0x270f
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c418:	4333      	orrs	r3, r6
 800c41a:	f000 8592 	beq.w	800cf42 <_dtoa_r+0xbb2>
 800c41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c420:	b963      	cbnz	r3, 800c43c <_dtoa_r+0xac>
 800c422:	4b92      	ldr	r3, [pc, #584]	; (800c66c <_dtoa_r+0x2dc>)
 800c424:	e022      	b.n	800c46c <_dtoa_r+0xdc>
 800c426:	4b92      	ldr	r3, [pc, #584]	; (800c670 <_dtoa_r+0x2e0>)
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	3308      	adds	r3, #8
 800c42c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c42e:	6013      	str	r3, [r2, #0]
 800c430:	9801      	ldr	r0, [sp, #4]
 800c432:	b013      	add	sp, #76	; 0x4c
 800c434:	ecbd 8b04 	vpop	{d8-d9}
 800c438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c43c:	4b8b      	ldr	r3, [pc, #556]	; (800c66c <_dtoa_r+0x2dc>)
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	3303      	adds	r3, #3
 800c442:	e7f3      	b.n	800c42c <_dtoa_r+0x9c>
 800c444:	2200      	movs	r2, #0
 800c446:	2300      	movs	r3, #0
 800c448:	4650      	mov	r0, sl
 800c44a:	4659      	mov	r1, fp
 800c44c:	f7f4 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c450:	ec4b ab19 	vmov	d9, sl, fp
 800c454:	4680      	mov	r8, r0
 800c456:	b158      	cbz	r0, 800c470 <_dtoa_r+0xe0>
 800c458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c45a:	2301      	movs	r3, #1
 800c45c:	6013      	str	r3, [r2, #0]
 800c45e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c460:	2b00      	cmp	r3, #0
 800c462:	f000 856b 	beq.w	800cf3c <_dtoa_r+0xbac>
 800c466:	4883      	ldr	r0, [pc, #524]	; (800c674 <_dtoa_r+0x2e4>)
 800c468:	6018      	str	r0, [r3, #0]
 800c46a:	1e43      	subs	r3, r0, #1
 800c46c:	9301      	str	r3, [sp, #4]
 800c46e:	e7df      	b.n	800c430 <_dtoa_r+0xa0>
 800c470:	ec4b ab10 	vmov	d0, sl, fp
 800c474:	aa10      	add	r2, sp, #64	; 0x40
 800c476:	a911      	add	r1, sp, #68	; 0x44
 800c478:	4620      	mov	r0, r4
 800c47a:	f001 fd09 	bl	800de90 <__d2b>
 800c47e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c482:	ee08 0a10 	vmov	s16, r0
 800c486:	2d00      	cmp	r5, #0
 800c488:	f000 8084 	beq.w	800c594 <_dtoa_r+0x204>
 800c48c:	ee19 3a90 	vmov	r3, s19
 800c490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c494:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c498:	4656      	mov	r6, sl
 800c49a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c49e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c4a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c4a6:	4b74      	ldr	r3, [pc, #464]	; (800c678 <_dtoa_r+0x2e8>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	f7f3 feeb 	bl	8000288 <__aeabi_dsub>
 800c4b2:	a365      	add	r3, pc, #404	; (adr r3, 800c648 <_dtoa_r+0x2b8>)
 800c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b8:	f7f4 f89e 	bl	80005f8 <__aeabi_dmul>
 800c4bc:	a364      	add	r3, pc, #400	; (adr r3, 800c650 <_dtoa_r+0x2c0>)
 800c4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c2:	f7f3 fee3 	bl	800028c <__adddf3>
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	460f      	mov	r7, r1
 800c4cc:	f7f4 f82a 	bl	8000524 <__aeabi_i2d>
 800c4d0:	a361      	add	r3, pc, #388	; (adr r3, 800c658 <_dtoa_r+0x2c8>)
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	f7f4 f88f 	bl	80005f8 <__aeabi_dmul>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4630      	mov	r0, r6
 800c4e0:	4639      	mov	r1, r7
 800c4e2:	f7f3 fed3 	bl	800028c <__adddf3>
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	460f      	mov	r7, r1
 800c4ea:	f7f4 fb35 	bl	8000b58 <__aeabi_d2iz>
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	9000      	str	r0, [sp, #0]
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	f7f4 faf0 	bl	8000adc <__aeabi_dcmplt>
 800c4fc:	b150      	cbz	r0, 800c514 <_dtoa_r+0x184>
 800c4fe:	9800      	ldr	r0, [sp, #0]
 800c500:	f7f4 f810 	bl	8000524 <__aeabi_i2d>
 800c504:	4632      	mov	r2, r6
 800c506:	463b      	mov	r3, r7
 800c508:	f7f4 fade 	bl	8000ac8 <__aeabi_dcmpeq>
 800c50c:	b910      	cbnz	r0, 800c514 <_dtoa_r+0x184>
 800c50e:	9b00      	ldr	r3, [sp, #0]
 800c510:	3b01      	subs	r3, #1
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	9b00      	ldr	r3, [sp, #0]
 800c516:	2b16      	cmp	r3, #22
 800c518:	d85a      	bhi.n	800c5d0 <_dtoa_r+0x240>
 800c51a:	9a00      	ldr	r2, [sp, #0]
 800c51c:	4b57      	ldr	r3, [pc, #348]	; (800c67c <_dtoa_r+0x2ec>)
 800c51e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c526:	ec51 0b19 	vmov	r0, r1, d9
 800c52a:	f7f4 fad7 	bl	8000adc <__aeabi_dcmplt>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d050      	beq.n	800c5d4 <_dtoa_r+0x244>
 800c532:	9b00      	ldr	r3, [sp, #0]
 800c534:	3b01      	subs	r3, #1
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	2300      	movs	r3, #0
 800c53a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c53c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c53e:	1b5d      	subs	r5, r3, r5
 800c540:	1e6b      	subs	r3, r5, #1
 800c542:	9305      	str	r3, [sp, #20]
 800c544:	bf45      	ittet	mi
 800c546:	f1c5 0301 	rsbmi	r3, r5, #1
 800c54a:	9304      	strmi	r3, [sp, #16]
 800c54c:	2300      	movpl	r3, #0
 800c54e:	2300      	movmi	r3, #0
 800c550:	bf4c      	ite	mi
 800c552:	9305      	strmi	r3, [sp, #20]
 800c554:	9304      	strpl	r3, [sp, #16]
 800c556:	9b00      	ldr	r3, [sp, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	db3d      	blt.n	800c5d8 <_dtoa_r+0x248>
 800c55c:	9b05      	ldr	r3, [sp, #20]
 800c55e:	9a00      	ldr	r2, [sp, #0]
 800c560:	920a      	str	r2, [sp, #40]	; 0x28
 800c562:	4413      	add	r3, r2
 800c564:	9305      	str	r3, [sp, #20]
 800c566:	2300      	movs	r3, #0
 800c568:	9307      	str	r3, [sp, #28]
 800c56a:	9b06      	ldr	r3, [sp, #24]
 800c56c:	2b09      	cmp	r3, #9
 800c56e:	f200 8089 	bhi.w	800c684 <_dtoa_r+0x2f4>
 800c572:	2b05      	cmp	r3, #5
 800c574:	bfc4      	itt	gt
 800c576:	3b04      	subgt	r3, #4
 800c578:	9306      	strgt	r3, [sp, #24]
 800c57a:	9b06      	ldr	r3, [sp, #24]
 800c57c:	f1a3 0302 	sub.w	r3, r3, #2
 800c580:	bfcc      	ite	gt
 800c582:	2500      	movgt	r5, #0
 800c584:	2501      	movle	r5, #1
 800c586:	2b03      	cmp	r3, #3
 800c588:	f200 8087 	bhi.w	800c69a <_dtoa_r+0x30a>
 800c58c:	e8df f003 	tbb	[pc, r3]
 800c590:	59383a2d 	.word	0x59383a2d
 800c594:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c598:	441d      	add	r5, r3
 800c59a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c59e:	2b20      	cmp	r3, #32
 800c5a0:	bfc1      	itttt	gt
 800c5a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c5aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800c5ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c5b2:	bfda      	itte	le
 800c5b4:	f1c3 0320 	rsble	r3, r3, #32
 800c5b8:	fa06 f003 	lslle.w	r0, r6, r3
 800c5bc:	4318      	orrgt	r0, r3
 800c5be:	f7f3 ffa1 	bl	8000504 <__aeabi_ui2d>
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c5ca:	3d01      	subs	r5, #1
 800c5cc:	930e      	str	r3, [sp, #56]	; 0x38
 800c5ce:	e76a      	b.n	800c4a6 <_dtoa_r+0x116>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e7b2      	b.n	800c53a <_dtoa_r+0x1aa>
 800c5d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c5d6:	e7b1      	b.n	800c53c <_dtoa_r+0x1ac>
 800c5d8:	9b04      	ldr	r3, [sp, #16]
 800c5da:	9a00      	ldr	r2, [sp, #0]
 800c5dc:	1a9b      	subs	r3, r3, r2
 800c5de:	9304      	str	r3, [sp, #16]
 800c5e0:	4253      	negs	r3, r2
 800c5e2:	9307      	str	r3, [sp, #28]
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c5e8:	e7bf      	b.n	800c56a <_dtoa_r+0x1da>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	9308      	str	r3, [sp, #32]
 800c5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	dc55      	bgt.n	800c6a0 <_dtoa_r+0x310>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c5fe:	e00c      	b.n	800c61a <_dtoa_r+0x28a>
 800c600:	2301      	movs	r3, #1
 800c602:	e7f3      	b.n	800c5ec <_dtoa_r+0x25c>
 800c604:	2300      	movs	r3, #0
 800c606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c608:	9308      	str	r3, [sp, #32]
 800c60a:	9b00      	ldr	r3, [sp, #0]
 800c60c:	4413      	add	r3, r2
 800c60e:	9302      	str	r3, [sp, #8]
 800c610:	3301      	adds	r3, #1
 800c612:	2b01      	cmp	r3, #1
 800c614:	9303      	str	r3, [sp, #12]
 800c616:	bfb8      	it	lt
 800c618:	2301      	movlt	r3, #1
 800c61a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c61c:	2200      	movs	r2, #0
 800c61e:	6042      	str	r2, [r0, #4]
 800c620:	2204      	movs	r2, #4
 800c622:	f102 0614 	add.w	r6, r2, #20
 800c626:	429e      	cmp	r6, r3
 800c628:	6841      	ldr	r1, [r0, #4]
 800c62a:	d93d      	bls.n	800c6a8 <_dtoa_r+0x318>
 800c62c:	4620      	mov	r0, r4
 800c62e:	f001 f841 	bl	800d6b4 <_Balloc>
 800c632:	9001      	str	r0, [sp, #4]
 800c634:	2800      	cmp	r0, #0
 800c636:	d13b      	bne.n	800c6b0 <_dtoa_r+0x320>
 800c638:	4b11      	ldr	r3, [pc, #68]	; (800c680 <_dtoa_r+0x2f0>)
 800c63a:	4602      	mov	r2, r0
 800c63c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c640:	e6c0      	b.n	800c3c4 <_dtoa_r+0x34>
 800c642:	2301      	movs	r3, #1
 800c644:	e7df      	b.n	800c606 <_dtoa_r+0x276>
 800c646:	bf00      	nop
 800c648:	636f4361 	.word	0x636f4361
 800c64c:	3fd287a7 	.word	0x3fd287a7
 800c650:	8b60c8b3 	.word	0x8b60c8b3
 800c654:	3fc68a28 	.word	0x3fc68a28
 800c658:	509f79fb 	.word	0x509f79fb
 800c65c:	3fd34413 	.word	0x3fd34413
 800c660:	0800fe66 	.word	0x0800fe66
 800c664:	0800fe7d 	.word	0x0800fe7d
 800c668:	7ff00000 	.word	0x7ff00000
 800c66c:	0800fe62 	.word	0x0800fe62
 800c670:	0800fe59 	.word	0x0800fe59
 800c674:	080100d2 	.word	0x080100d2
 800c678:	3ff80000 	.word	0x3ff80000
 800c67c:	0800ffe8 	.word	0x0800ffe8
 800c680:	0800fed8 	.word	0x0800fed8
 800c684:	2501      	movs	r5, #1
 800c686:	2300      	movs	r3, #0
 800c688:	9306      	str	r3, [sp, #24]
 800c68a:	9508      	str	r5, [sp, #32]
 800c68c:	f04f 33ff 	mov.w	r3, #4294967295
 800c690:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c694:	2200      	movs	r2, #0
 800c696:	2312      	movs	r3, #18
 800c698:	e7b0      	b.n	800c5fc <_dtoa_r+0x26c>
 800c69a:	2301      	movs	r3, #1
 800c69c:	9308      	str	r3, [sp, #32]
 800c69e:	e7f5      	b.n	800c68c <_dtoa_r+0x2fc>
 800c6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c6a6:	e7b8      	b.n	800c61a <_dtoa_r+0x28a>
 800c6a8:	3101      	adds	r1, #1
 800c6aa:	6041      	str	r1, [r0, #4]
 800c6ac:	0052      	lsls	r2, r2, #1
 800c6ae:	e7b8      	b.n	800c622 <_dtoa_r+0x292>
 800c6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6b2:	9a01      	ldr	r2, [sp, #4]
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	2b0e      	cmp	r3, #14
 800c6ba:	f200 809d 	bhi.w	800c7f8 <_dtoa_r+0x468>
 800c6be:	2d00      	cmp	r5, #0
 800c6c0:	f000 809a 	beq.w	800c7f8 <_dtoa_r+0x468>
 800c6c4:	9b00      	ldr	r3, [sp, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	dd32      	ble.n	800c730 <_dtoa_r+0x3a0>
 800c6ca:	4ab7      	ldr	r2, [pc, #732]	; (800c9a8 <_dtoa_r+0x618>)
 800c6cc:	f003 030f 	and.w	r3, r3, #15
 800c6d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c6d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6d8:	9b00      	ldr	r3, [sp, #0]
 800c6da:	05d8      	lsls	r0, r3, #23
 800c6dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c6e0:	d516      	bpl.n	800c710 <_dtoa_r+0x380>
 800c6e2:	4bb2      	ldr	r3, [pc, #712]	; (800c9ac <_dtoa_r+0x61c>)
 800c6e4:	ec51 0b19 	vmov	r0, r1, d9
 800c6e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6ec:	f7f4 f8ae 	bl	800084c <__aeabi_ddiv>
 800c6f0:	f007 070f 	and.w	r7, r7, #15
 800c6f4:	4682      	mov	sl, r0
 800c6f6:	468b      	mov	fp, r1
 800c6f8:	2503      	movs	r5, #3
 800c6fa:	4eac      	ldr	r6, [pc, #688]	; (800c9ac <_dtoa_r+0x61c>)
 800c6fc:	b957      	cbnz	r7, 800c714 <_dtoa_r+0x384>
 800c6fe:	4642      	mov	r2, r8
 800c700:	464b      	mov	r3, r9
 800c702:	4650      	mov	r0, sl
 800c704:	4659      	mov	r1, fp
 800c706:	f7f4 f8a1 	bl	800084c <__aeabi_ddiv>
 800c70a:	4682      	mov	sl, r0
 800c70c:	468b      	mov	fp, r1
 800c70e:	e028      	b.n	800c762 <_dtoa_r+0x3d2>
 800c710:	2502      	movs	r5, #2
 800c712:	e7f2      	b.n	800c6fa <_dtoa_r+0x36a>
 800c714:	07f9      	lsls	r1, r7, #31
 800c716:	d508      	bpl.n	800c72a <_dtoa_r+0x39a>
 800c718:	4640      	mov	r0, r8
 800c71a:	4649      	mov	r1, r9
 800c71c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c720:	f7f3 ff6a 	bl	80005f8 <__aeabi_dmul>
 800c724:	3501      	adds	r5, #1
 800c726:	4680      	mov	r8, r0
 800c728:	4689      	mov	r9, r1
 800c72a:	107f      	asrs	r7, r7, #1
 800c72c:	3608      	adds	r6, #8
 800c72e:	e7e5      	b.n	800c6fc <_dtoa_r+0x36c>
 800c730:	f000 809b 	beq.w	800c86a <_dtoa_r+0x4da>
 800c734:	9b00      	ldr	r3, [sp, #0]
 800c736:	4f9d      	ldr	r7, [pc, #628]	; (800c9ac <_dtoa_r+0x61c>)
 800c738:	425e      	negs	r6, r3
 800c73a:	4b9b      	ldr	r3, [pc, #620]	; (800c9a8 <_dtoa_r+0x618>)
 800c73c:	f006 020f 	and.w	r2, r6, #15
 800c740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	ec51 0b19 	vmov	r0, r1, d9
 800c74c:	f7f3 ff54 	bl	80005f8 <__aeabi_dmul>
 800c750:	1136      	asrs	r6, r6, #4
 800c752:	4682      	mov	sl, r0
 800c754:	468b      	mov	fp, r1
 800c756:	2300      	movs	r3, #0
 800c758:	2502      	movs	r5, #2
 800c75a:	2e00      	cmp	r6, #0
 800c75c:	d17a      	bne.n	800c854 <_dtoa_r+0x4c4>
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1d3      	bne.n	800c70a <_dtoa_r+0x37a>
 800c762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c764:	2b00      	cmp	r3, #0
 800c766:	f000 8082 	beq.w	800c86e <_dtoa_r+0x4de>
 800c76a:	4b91      	ldr	r3, [pc, #580]	; (800c9b0 <_dtoa_r+0x620>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	4650      	mov	r0, sl
 800c770:	4659      	mov	r1, fp
 800c772:	f7f4 f9b3 	bl	8000adc <__aeabi_dcmplt>
 800c776:	2800      	cmp	r0, #0
 800c778:	d079      	beq.n	800c86e <_dtoa_r+0x4de>
 800c77a:	9b03      	ldr	r3, [sp, #12]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d076      	beq.n	800c86e <_dtoa_r+0x4de>
 800c780:	9b02      	ldr	r3, [sp, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	dd36      	ble.n	800c7f4 <_dtoa_r+0x464>
 800c786:	9b00      	ldr	r3, [sp, #0]
 800c788:	4650      	mov	r0, sl
 800c78a:	4659      	mov	r1, fp
 800c78c:	1e5f      	subs	r7, r3, #1
 800c78e:	2200      	movs	r2, #0
 800c790:	4b88      	ldr	r3, [pc, #544]	; (800c9b4 <_dtoa_r+0x624>)
 800c792:	f7f3 ff31 	bl	80005f8 <__aeabi_dmul>
 800c796:	9e02      	ldr	r6, [sp, #8]
 800c798:	4682      	mov	sl, r0
 800c79a:	468b      	mov	fp, r1
 800c79c:	3501      	adds	r5, #1
 800c79e:	4628      	mov	r0, r5
 800c7a0:	f7f3 fec0 	bl	8000524 <__aeabi_i2d>
 800c7a4:	4652      	mov	r2, sl
 800c7a6:	465b      	mov	r3, fp
 800c7a8:	f7f3 ff26 	bl	80005f8 <__aeabi_dmul>
 800c7ac:	4b82      	ldr	r3, [pc, #520]	; (800c9b8 <_dtoa_r+0x628>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f7f3 fd6c 	bl	800028c <__adddf3>
 800c7b4:	46d0      	mov	r8, sl
 800c7b6:	46d9      	mov	r9, fp
 800c7b8:	4682      	mov	sl, r0
 800c7ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c7be:	2e00      	cmp	r6, #0
 800c7c0:	d158      	bne.n	800c874 <_dtoa_r+0x4e4>
 800c7c2:	4b7e      	ldr	r3, [pc, #504]	; (800c9bc <_dtoa_r+0x62c>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	f7f3 fd5d 	bl	8000288 <__aeabi_dsub>
 800c7ce:	4652      	mov	r2, sl
 800c7d0:	465b      	mov	r3, fp
 800c7d2:	4680      	mov	r8, r0
 800c7d4:	4689      	mov	r9, r1
 800c7d6:	f7f4 f99f 	bl	8000b18 <__aeabi_dcmpgt>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	f040 8295 	bne.w	800cd0a <_dtoa_r+0x97a>
 800c7e0:	4652      	mov	r2, sl
 800c7e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7e6:	4640      	mov	r0, r8
 800c7e8:	4649      	mov	r1, r9
 800c7ea:	f7f4 f977 	bl	8000adc <__aeabi_dcmplt>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	f040 8289 	bne.w	800cd06 <_dtoa_r+0x976>
 800c7f4:	ec5b ab19 	vmov	sl, fp, d9
 800c7f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f2c0 8148 	blt.w	800ca90 <_dtoa_r+0x700>
 800c800:	9a00      	ldr	r2, [sp, #0]
 800c802:	2a0e      	cmp	r2, #14
 800c804:	f300 8144 	bgt.w	800ca90 <_dtoa_r+0x700>
 800c808:	4b67      	ldr	r3, [pc, #412]	; (800c9a8 <_dtoa_r+0x618>)
 800c80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c80e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c814:	2b00      	cmp	r3, #0
 800c816:	f280 80d5 	bge.w	800c9c4 <_dtoa_r+0x634>
 800c81a:	9b03      	ldr	r3, [sp, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f300 80d1 	bgt.w	800c9c4 <_dtoa_r+0x634>
 800c822:	f040 826f 	bne.w	800cd04 <_dtoa_r+0x974>
 800c826:	4b65      	ldr	r3, [pc, #404]	; (800c9bc <_dtoa_r+0x62c>)
 800c828:	2200      	movs	r2, #0
 800c82a:	4640      	mov	r0, r8
 800c82c:	4649      	mov	r1, r9
 800c82e:	f7f3 fee3 	bl	80005f8 <__aeabi_dmul>
 800c832:	4652      	mov	r2, sl
 800c834:	465b      	mov	r3, fp
 800c836:	f7f4 f965 	bl	8000b04 <__aeabi_dcmpge>
 800c83a:	9e03      	ldr	r6, [sp, #12]
 800c83c:	4637      	mov	r7, r6
 800c83e:	2800      	cmp	r0, #0
 800c840:	f040 8245 	bne.w	800ccce <_dtoa_r+0x93e>
 800c844:	9d01      	ldr	r5, [sp, #4]
 800c846:	2331      	movs	r3, #49	; 0x31
 800c848:	f805 3b01 	strb.w	r3, [r5], #1
 800c84c:	9b00      	ldr	r3, [sp, #0]
 800c84e:	3301      	adds	r3, #1
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	e240      	b.n	800ccd6 <_dtoa_r+0x946>
 800c854:	07f2      	lsls	r2, r6, #31
 800c856:	d505      	bpl.n	800c864 <_dtoa_r+0x4d4>
 800c858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c85c:	f7f3 fecc 	bl	80005f8 <__aeabi_dmul>
 800c860:	3501      	adds	r5, #1
 800c862:	2301      	movs	r3, #1
 800c864:	1076      	asrs	r6, r6, #1
 800c866:	3708      	adds	r7, #8
 800c868:	e777      	b.n	800c75a <_dtoa_r+0x3ca>
 800c86a:	2502      	movs	r5, #2
 800c86c:	e779      	b.n	800c762 <_dtoa_r+0x3d2>
 800c86e:	9f00      	ldr	r7, [sp, #0]
 800c870:	9e03      	ldr	r6, [sp, #12]
 800c872:	e794      	b.n	800c79e <_dtoa_r+0x40e>
 800c874:	9901      	ldr	r1, [sp, #4]
 800c876:	4b4c      	ldr	r3, [pc, #304]	; (800c9a8 <_dtoa_r+0x618>)
 800c878:	4431      	add	r1, r6
 800c87a:	910d      	str	r1, [sp, #52]	; 0x34
 800c87c:	9908      	ldr	r1, [sp, #32]
 800c87e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c882:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c886:	2900      	cmp	r1, #0
 800c888:	d043      	beq.n	800c912 <_dtoa_r+0x582>
 800c88a:	494d      	ldr	r1, [pc, #308]	; (800c9c0 <_dtoa_r+0x630>)
 800c88c:	2000      	movs	r0, #0
 800c88e:	f7f3 ffdd 	bl	800084c <__aeabi_ddiv>
 800c892:	4652      	mov	r2, sl
 800c894:	465b      	mov	r3, fp
 800c896:	f7f3 fcf7 	bl	8000288 <__aeabi_dsub>
 800c89a:	9d01      	ldr	r5, [sp, #4]
 800c89c:	4682      	mov	sl, r0
 800c89e:	468b      	mov	fp, r1
 800c8a0:	4649      	mov	r1, r9
 800c8a2:	4640      	mov	r0, r8
 800c8a4:	f7f4 f958 	bl	8000b58 <__aeabi_d2iz>
 800c8a8:	4606      	mov	r6, r0
 800c8aa:	f7f3 fe3b 	bl	8000524 <__aeabi_i2d>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	f7f3 fce7 	bl	8000288 <__aeabi_dsub>
 800c8ba:	3630      	adds	r6, #48	; 0x30
 800c8bc:	f805 6b01 	strb.w	r6, [r5], #1
 800c8c0:	4652      	mov	r2, sl
 800c8c2:	465b      	mov	r3, fp
 800c8c4:	4680      	mov	r8, r0
 800c8c6:	4689      	mov	r9, r1
 800c8c8:	f7f4 f908 	bl	8000adc <__aeabi_dcmplt>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d163      	bne.n	800c998 <_dtoa_r+0x608>
 800c8d0:	4642      	mov	r2, r8
 800c8d2:	464b      	mov	r3, r9
 800c8d4:	4936      	ldr	r1, [pc, #216]	; (800c9b0 <_dtoa_r+0x620>)
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	f7f3 fcd6 	bl	8000288 <__aeabi_dsub>
 800c8dc:	4652      	mov	r2, sl
 800c8de:	465b      	mov	r3, fp
 800c8e0:	f7f4 f8fc 	bl	8000adc <__aeabi_dcmplt>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	f040 80b5 	bne.w	800ca54 <_dtoa_r+0x6c4>
 800c8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ec:	429d      	cmp	r5, r3
 800c8ee:	d081      	beq.n	800c7f4 <_dtoa_r+0x464>
 800c8f0:	4b30      	ldr	r3, [pc, #192]	; (800c9b4 <_dtoa_r+0x624>)
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	4650      	mov	r0, sl
 800c8f6:	4659      	mov	r1, fp
 800c8f8:	f7f3 fe7e 	bl	80005f8 <__aeabi_dmul>
 800c8fc:	4b2d      	ldr	r3, [pc, #180]	; (800c9b4 <_dtoa_r+0x624>)
 800c8fe:	4682      	mov	sl, r0
 800c900:	468b      	mov	fp, r1
 800c902:	4640      	mov	r0, r8
 800c904:	4649      	mov	r1, r9
 800c906:	2200      	movs	r2, #0
 800c908:	f7f3 fe76 	bl	80005f8 <__aeabi_dmul>
 800c90c:	4680      	mov	r8, r0
 800c90e:	4689      	mov	r9, r1
 800c910:	e7c6      	b.n	800c8a0 <_dtoa_r+0x510>
 800c912:	4650      	mov	r0, sl
 800c914:	4659      	mov	r1, fp
 800c916:	f7f3 fe6f 	bl	80005f8 <__aeabi_dmul>
 800c91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c91c:	9d01      	ldr	r5, [sp, #4]
 800c91e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c920:	4682      	mov	sl, r0
 800c922:	468b      	mov	fp, r1
 800c924:	4649      	mov	r1, r9
 800c926:	4640      	mov	r0, r8
 800c928:	f7f4 f916 	bl	8000b58 <__aeabi_d2iz>
 800c92c:	4606      	mov	r6, r0
 800c92e:	f7f3 fdf9 	bl	8000524 <__aeabi_i2d>
 800c932:	3630      	adds	r6, #48	; 0x30
 800c934:	4602      	mov	r2, r0
 800c936:	460b      	mov	r3, r1
 800c938:	4640      	mov	r0, r8
 800c93a:	4649      	mov	r1, r9
 800c93c:	f7f3 fca4 	bl	8000288 <__aeabi_dsub>
 800c940:	f805 6b01 	strb.w	r6, [r5], #1
 800c944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c946:	429d      	cmp	r5, r3
 800c948:	4680      	mov	r8, r0
 800c94a:	4689      	mov	r9, r1
 800c94c:	f04f 0200 	mov.w	r2, #0
 800c950:	d124      	bne.n	800c99c <_dtoa_r+0x60c>
 800c952:	4b1b      	ldr	r3, [pc, #108]	; (800c9c0 <_dtoa_r+0x630>)
 800c954:	4650      	mov	r0, sl
 800c956:	4659      	mov	r1, fp
 800c958:	f7f3 fc98 	bl	800028c <__adddf3>
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	4640      	mov	r0, r8
 800c962:	4649      	mov	r1, r9
 800c964:	f7f4 f8d8 	bl	8000b18 <__aeabi_dcmpgt>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d173      	bne.n	800ca54 <_dtoa_r+0x6c4>
 800c96c:	4652      	mov	r2, sl
 800c96e:	465b      	mov	r3, fp
 800c970:	4913      	ldr	r1, [pc, #76]	; (800c9c0 <_dtoa_r+0x630>)
 800c972:	2000      	movs	r0, #0
 800c974:	f7f3 fc88 	bl	8000288 <__aeabi_dsub>
 800c978:	4602      	mov	r2, r0
 800c97a:	460b      	mov	r3, r1
 800c97c:	4640      	mov	r0, r8
 800c97e:	4649      	mov	r1, r9
 800c980:	f7f4 f8ac 	bl	8000adc <__aeabi_dcmplt>
 800c984:	2800      	cmp	r0, #0
 800c986:	f43f af35 	beq.w	800c7f4 <_dtoa_r+0x464>
 800c98a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c98c:	1e6b      	subs	r3, r5, #1
 800c98e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c990:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c994:	2b30      	cmp	r3, #48	; 0x30
 800c996:	d0f8      	beq.n	800c98a <_dtoa_r+0x5fa>
 800c998:	9700      	str	r7, [sp, #0]
 800c99a:	e049      	b.n	800ca30 <_dtoa_r+0x6a0>
 800c99c:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <_dtoa_r+0x624>)
 800c99e:	f7f3 fe2b 	bl	80005f8 <__aeabi_dmul>
 800c9a2:	4680      	mov	r8, r0
 800c9a4:	4689      	mov	r9, r1
 800c9a6:	e7bd      	b.n	800c924 <_dtoa_r+0x594>
 800c9a8:	0800ffe8 	.word	0x0800ffe8
 800c9ac:	0800ffc0 	.word	0x0800ffc0
 800c9b0:	3ff00000 	.word	0x3ff00000
 800c9b4:	40240000 	.word	0x40240000
 800c9b8:	401c0000 	.word	0x401c0000
 800c9bc:	40140000 	.word	0x40140000
 800c9c0:	3fe00000 	.word	0x3fe00000
 800c9c4:	9d01      	ldr	r5, [sp, #4]
 800c9c6:	4656      	mov	r6, sl
 800c9c8:	465f      	mov	r7, fp
 800c9ca:	4642      	mov	r2, r8
 800c9cc:	464b      	mov	r3, r9
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	4639      	mov	r1, r7
 800c9d2:	f7f3 ff3b 	bl	800084c <__aeabi_ddiv>
 800c9d6:	f7f4 f8bf 	bl	8000b58 <__aeabi_d2iz>
 800c9da:	4682      	mov	sl, r0
 800c9dc:	f7f3 fda2 	bl	8000524 <__aeabi_i2d>
 800c9e0:	4642      	mov	r2, r8
 800c9e2:	464b      	mov	r3, r9
 800c9e4:	f7f3 fe08 	bl	80005f8 <__aeabi_dmul>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	4639      	mov	r1, r7
 800c9f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c9f4:	f7f3 fc48 	bl	8000288 <__aeabi_dsub>
 800c9f8:	f805 6b01 	strb.w	r6, [r5], #1
 800c9fc:	9e01      	ldr	r6, [sp, #4]
 800c9fe:	9f03      	ldr	r7, [sp, #12]
 800ca00:	1bae      	subs	r6, r5, r6
 800ca02:	42b7      	cmp	r7, r6
 800ca04:	4602      	mov	r2, r0
 800ca06:	460b      	mov	r3, r1
 800ca08:	d135      	bne.n	800ca76 <_dtoa_r+0x6e6>
 800ca0a:	f7f3 fc3f 	bl	800028c <__adddf3>
 800ca0e:	4642      	mov	r2, r8
 800ca10:	464b      	mov	r3, r9
 800ca12:	4606      	mov	r6, r0
 800ca14:	460f      	mov	r7, r1
 800ca16:	f7f4 f87f 	bl	8000b18 <__aeabi_dcmpgt>
 800ca1a:	b9d0      	cbnz	r0, 800ca52 <_dtoa_r+0x6c2>
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	464b      	mov	r3, r9
 800ca20:	4630      	mov	r0, r6
 800ca22:	4639      	mov	r1, r7
 800ca24:	f7f4 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca28:	b110      	cbz	r0, 800ca30 <_dtoa_r+0x6a0>
 800ca2a:	f01a 0f01 	tst.w	sl, #1
 800ca2e:	d110      	bne.n	800ca52 <_dtoa_r+0x6c2>
 800ca30:	4620      	mov	r0, r4
 800ca32:	ee18 1a10 	vmov	r1, s16
 800ca36:	f000 fe7d 	bl	800d734 <_Bfree>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	9800      	ldr	r0, [sp, #0]
 800ca3e:	702b      	strb	r3, [r5, #0]
 800ca40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca42:	3001      	adds	r0, #1
 800ca44:	6018      	str	r0, [r3, #0]
 800ca46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f43f acf1 	beq.w	800c430 <_dtoa_r+0xa0>
 800ca4e:	601d      	str	r5, [r3, #0]
 800ca50:	e4ee      	b.n	800c430 <_dtoa_r+0xa0>
 800ca52:	9f00      	ldr	r7, [sp, #0]
 800ca54:	462b      	mov	r3, r5
 800ca56:	461d      	mov	r5, r3
 800ca58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca5c:	2a39      	cmp	r2, #57	; 0x39
 800ca5e:	d106      	bne.n	800ca6e <_dtoa_r+0x6de>
 800ca60:	9a01      	ldr	r2, [sp, #4]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d1f7      	bne.n	800ca56 <_dtoa_r+0x6c6>
 800ca66:	9901      	ldr	r1, [sp, #4]
 800ca68:	2230      	movs	r2, #48	; 0x30
 800ca6a:	3701      	adds	r7, #1
 800ca6c:	700a      	strb	r2, [r1, #0]
 800ca6e:	781a      	ldrb	r2, [r3, #0]
 800ca70:	3201      	adds	r2, #1
 800ca72:	701a      	strb	r2, [r3, #0]
 800ca74:	e790      	b.n	800c998 <_dtoa_r+0x608>
 800ca76:	4ba6      	ldr	r3, [pc, #664]	; (800cd10 <_dtoa_r+0x980>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f7f3 fdbd 	bl	80005f8 <__aeabi_dmul>
 800ca7e:	2200      	movs	r2, #0
 800ca80:	2300      	movs	r3, #0
 800ca82:	4606      	mov	r6, r0
 800ca84:	460f      	mov	r7, r1
 800ca86:	f7f4 f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d09d      	beq.n	800c9ca <_dtoa_r+0x63a>
 800ca8e:	e7cf      	b.n	800ca30 <_dtoa_r+0x6a0>
 800ca90:	9a08      	ldr	r2, [sp, #32]
 800ca92:	2a00      	cmp	r2, #0
 800ca94:	f000 80d7 	beq.w	800cc46 <_dtoa_r+0x8b6>
 800ca98:	9a06      	ldr	r2, [sp, #24]
 800ca9a:	2a01      	cmp	r2, #1
 800ca9c:	f300 80ba 	bgt.w	800cc14 <_dtoa_r+0x884>
 800caa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800caa2:	2a00      	cmp	r2, #0
 800caa4:	f000 80b2 	beq.w	800cc0c <_dtoa_r+0x87c>
 800caa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800caac:	9e07      	ldr	r6, [sp, #28]
 800caae:	9d04      	ldr	r5, [sp, #16]
 800cab0:	9a04      	ldr	r2, [sp, #16]
 800cab2:	441a      	add	r2, r3
 800cab4:	9204      	str	r2, [sp, #16]
 800cab6:	9a05      	ldr	r2, [sp, #20]
 800cab8:	2101      	movs	r1, #1
 800caba:	441a      	add	r2, r3
 800cabc:	4620      	mov	r0, r4
 800cabe:	9205      	str	r2, [sp, #20]
 800cac0:	f000 ff3a 	bl	800d938 <__i2b>
 800cac4:	4607      	mov	r7, r0
 800cac6:	2d00      	cmp	r5, #0
 800cac8:	dd0c      	ble.n	800cae4 <_dtoa_r+0x754>
 800caca:	9b05      	ldr	r3, [sp, #20]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	dd09      	ble.n	800cae4 <_dtoa_r+0x754>
 800cad0:	42ab      	cmp	r3, r5
 800cad2:	9a04      	ldr	r2, [sp, #16]
 800cad4:	bfa8      	it	ge
 800cad6:	462b      	movge	r3, r5
 800cad8:	1ad2      	subs	r2, r2, r3
 800cada:	9204      	str	r2, [sp, #16]
 800cadc:	9a05      	ldr	r2, [sp, #20]
 800cade:	1aed      	subs	r5, r5, r3
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	9305      	str	r3, [sp, #20]
 800cae4:	9b07      	ldr	r3, [sp, #28]
 800cae6:	b31b      	cbz	r3, 800cb30 <_dtoa_r+0x7a0>
 800cae8:	9b08      	ldr	r3, [sp, #32]
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 80af 	beq.w	800cc4e <_dtoa_r+0x8be>
 800caf0:	2e00      	cmp	r6, #0
 800caf2:	dd13      	ble.n	800cb1c <_dtoa_r+0x78c>
 800caf4:	4639      	mov	r1, r7
 800caf6:	4632      	mov	r2, r6
 800caf8:	4620      	mov	r0, r4
 800cafa:	f000 ffdd 	bl	800dab8 <__pow5mult>
 800cafe:	ee18 2a10 	vmov	r2, s16
 800cb02:	4601      	mov	r1, r0
 800cb04:	4607      	mov	r7, r0
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 ff2c 	bl	800d964 <__multiply>
 800cb0c:	ee18 1a10 	vmov	r1, s16
 800cb10:	4680      	mov	r8, r0
 800cb12:	4620      	mov	r0, r4
 800cb14:	f000 fe0e 	bl	800d734 <_Bfree>
 800cb18:	ee08 8a10 	vmov	s16, r8
 800cb1c:	9b07      	ldr	r3, [sp, #28]
 800cb1e:	1b9a      	subs	r2, r3, r6
 800cb20:	d006      	beq.n	800cb30 <_dtoa_r+0x7a0>
 800cb22:	ee18 1a10 	vmov	r1, s16
 800cb26:	4620      	mov	r0, r4
 800cb28:	f000 ffc6 	bl	800dab8 <__pow5mult>
 800cb2c:	ee08 0a10 	vmov	s16, r0
 800cb30:	2101      	movs	r1, #1
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 ff00 	bl	800d938 <__i2b>
 800cb38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	4606      	mov	r6, r0
 800cb3e:	f340 8088 	ble.w	800cc52 <_dtoa_r+0x8c2>
 800cb42:	461a      	mov	r2, r3
 800cb44:	4601      	mov	r1, r0
 800cb46:	4620      	mov	r0, r4
 800cb48:	f000 ffb6 	bl	800dab8 <__pow5mult>
 800cb4c:	9b06      	ldr	r3, [sp, #24]
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	4606      	mov	r6, r0
 800cb52:	f340 8081 	ble.w	800cc58 <_dtoa_r+0x8c8>
 800cb56:	f04f 0800 	mov.w	r8, #0
 800cb5a:	6933      	ldr	r3, [r6, #16]
 800cb5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb60:	6918      	ldr	r0, [r3, #16]
 800cb62:	f000 fe99 	bl	800d898 <__hi0bits>
 800cb66:	f1c0 0020 	rsb	r0, r0, #32
 800cb6a:	9b05      	ldr	r3, [sp, #20]
 800cb6c:	4418      	add	r0, r3
 800cb6e:	f010 001f 	ands.w	r0, r0, #31
 800cb72:	f000 8092 	beq.w	800cc9a <_dtoa_r+0x90a>
 800cb76:	f1c0 0320 	rsb	r3, r0, #32
 800cb7a:	2b04      	cmp	r3, #4
 800cb7c:	f340 808a 	ble.w	800cc94 <_dtoa_r+0x904>
 800cb80:	f1c0 001c 	rsb	r0, r0, #28
 800cb84:	9b04      	ldr	r3, [sp, #16]
 800cb86:	4403      	add	r3, r0
 800cb88:	9304      	str	r3, [sp, #16]
 800cb8a:	9b05      	ldr	r3, [sp, #20]
 800cb8c:	4403      	add	r3, r0
 800cb8e:	4405      	add	r5, r0
 800cb90:	9305      	str	r3, [sp, #20]
 800cb92:	9b04      	ldr	r3, [sp, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	dd07      	ble.n	800cba8 <_dtoa_r+0x818>
 800cb98:	ee18 1a10 	vmov	r1, s16
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f000 ffe4 	bl	800db6c <__lshift>
 800cba4:	ee08 0a10 	vmov	s16, r0
 800cba8:	9b05      	ldr	r3, [sp, #20]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	dd05      	ble.n	800cbba <_dtoa_r+0x82a>
 800cbae:	4631      	mov	r1, r6
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f000 ffda 	bl	800db6c <__lshift>
 800cbb8:	4606      	mov	r6, r0
 800cbba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d06e      	beq.n	800cc9e <_dtoa_r+0x90e>
 800cbc0:	ee18 0a10 	vmov	r0, s16
 800cbc4:	4631      	mov	r1, r6
 800cbc6:	f001 f841 	bl	800dc4c <__mcmp>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	da67      	bge.n	800cc9e <_dtoa_r+0x90e>
 800cbce:	9b00      	ldr	r3, [sp, #0]
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	ee18 1a10 	vmov	r1, s16
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	220a      	movs	r2, #10
 800cbda:	2300      	movs	r3, #0
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f000 fdcb 	bl	800d778 <__multadd>
 800cbe2:	9b08      	ldr	r3, [sp, #32]
 800cbe4:	ee08 0a10 	vmov	s16, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	f000 81b1 	beq.w	800cf50 <_dtoa_r+0xbc0>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	4639      	mov	r1, r7
 800cbf2:	220a      	movs	r2, #10
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f000 fdbf 	bl	800d778 <__multadd>
 800cbfa:	9b02      	ldr	r3, [sp, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	4607      	mov	r7, r0
 800cc00:	f300 808e 	bgt.w	800cd20 <_dtoa_r+0x990>
 800cc04:	9b06      	ldr	r3, [sp, #24]
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	dc51      	bgt.n	800ccae <_dtoa_r+0x91e>
 800cc0a:	e089      	b.n	800cd20 <_dtoa_r+0x990>
 800cc0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc12:	e74b      	b.n	800caac <_dtoa_r+0x71c>
 800cc14:	9b03      	ldr	r3, [sp, #12]
 800cc16:	1e5e      	subs	r6, r3, #1
 800cc18:	9b07      	ldr	r3, [sp, #28]
 800cc1a:	42b3      	cmp	r3, r6
 800cc1c:	bfbf      	itttt	lt
 800cc1e:	9b07      	ldrlt	r3, [sp, #28]
 800cc20:	9607      	strlt	r6, [sp, #28]
 800cc22:	1af2      	sublt	r2, r6, r3
 800cc24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cc26:	bfb6      	itet	lt
 800cc28:	189b      	addlt	r3, r3, r2
 800cc2a:	1b9e      	subge	r6, r3, r6
 800cc2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cc2e:	9b03      	ldr	r3, [sp, #12]
 800cc30:	bfb8      	it	lt
 800cc32:	2600      	movlt	r6, #0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	bfb7      	itett	lt
 800cc38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cc3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cc40:	1a9d      	sublt	r5, r3, r2
 800cc42:	2300      	movlt	r3, #0
 800cc44:	e734      	b.n	800cab0 <_dtoa_r+0x720>
 800cc46:	9e07      	ldr	r6, [sp, #28]
 800cc48:	9d04      	ldr	r5, [sp, #16]
 800cc4a:	9f08      	ldr	r7, [sp, #32]
 800cc4c:	e73b      	b.n	800cac6 <_dtoa_r+0x736>
 800cc4e:	9a07      	ldr	r2, [sp, #28]
 800cc50:	e767      	b.n	800cb22 <_dtoa_r+0x792>
 800cc52:	9b06      	ldr	r3, [sp, #24]
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	dc18      	bgt.n	800cc8a <_dtoa_r+0x8fa>
 800cc58:	f1ba 0f00 	cmp.w	sl, #0
 800cc5c:	d115      	bne.n	800cc8a <_dtoa_r+0x8fa>
 800cc5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc62:	b993      	cbnz	r3, 800cc8a <_dtoa_r+0x8fa>
 800cc64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc68:	0d1b      	lsrs	r3, r3, #20
 800cc6a:	051b      	lsls	r3, r3, #20
 800cc6c:	b183      	cbz	r3, 800cc90 <_dtoa_r+0x900>
 800cc6e:	9b04      	ldr	r3, [sp, #16]
 800cc70:	3301      	adds	r3, #1
 800cc72:	9304      	str	r3, [sp, #16]
 800cc74:	9b05      	ldr	r3, [sp, #20]
 800cc76:	3301      	adds	r3, #1
 800cc78:	9305      	str	r3, [sp, #20]
 800cc7a:	f04f 0801 	mov.w	r8, #1
 800cc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f47f af6a 	bne.w	800cb5a <_dtoa_r+0x7ca>
 800cc86:	2001      	movs	r0, #1
 800cc88:	e76f      	b.n	800cb6a <_dtoa_r+0x7da>
 800cc8a:	f04f 0800 	mov.w	r8, #0
 800cc8e:	e7f6      	b.n	800cc7e <_dtoa_r+0x8ee>
 800cc90:	4698      	mov	r8, r3
 800cc92:	e7f4      	b.n	800cc7e <_dtoa_r+0x8ee>
 800cc94:	f43f af7d 	beq.w	800cb92 <_dtoa_r+0x802>
 800cc98:	4618      	mov	r0, r3
 800cc9a:	301c      	adds	r0, #28
 800cc9c:	e772      	b.n	800cb84 <_dtoa_r+0x7f4>
 800cc9e:	9b03      	ldr	r3, [sp, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	dc37      	bgt.n	800cd14 <_dtoa_r+0x984>
 800cca4:	9b06      	ldr	r3, [sp, #24]
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	dd34      	ble.n	800cd14 <_dtoa_r+0x984>
 800ccaa:	9b03      	ldr	r3, [sp, #12]
 800ccac:	9302      	str	r3, [sp, #8]
 800ccae:	9b02      	ldr	r3, [sp, #8]
 800ccb0:	b96b      	cbnz	r3, 800ccce <_dtoa_r+0x93e>
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	2205      	movs	r2, #5
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f000 fd5e 	bl	800d778 <__multadd>
 800ccbc:	4601      	mov	r1, r0
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	ee18 0a10 	vmov	r0, s16
 800ccc4:	f000 ffc2 	bl	800dc4c <__mcmp>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	f73f adbb 	bgt.w	800c844 <_dtoa_r+0x4b4>
 800ccce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd0:	9d01      	ldr	r5, [sp, #4]
 800ccd2:	43db      	mvns	r3, r3
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	f04f 0800 	mov.w	r8, #0
 800ccda:	4631      	mov	r1, r6
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f000 fd29 	bl	800d734 <_Bfree>
 800cce2:	2f00      	cmp	r7, #0
 800cce4:	f43f aea4 	beq.w	800ca30 <_dtoa_r+0x6a0>
 800cce8:	f1b8 0f00 	cmp.w	r8, #0
 800ccec:	d005      	beq.n	800ccfa <_dtoa_r+0x96a>
 800ccee:	45b8      	cmp	r8, r7
 800ccf0:	d003      	beq.n	800ccfa <_dtoa_r+0x96a>
 800ccf2:	4641      	mov	r1, r8
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f000 fd1d 	bl	800d734 <_Bfree>
 800ccfa:	4639      	mov	r1, r7
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f000 fd19 	bl	800d734 <_Bfree>
 800cd02:	e695      	b.n	800ca30 <_dtoa_r+0x6a0>
 800cd04:	2600      	movs	r6, #0
 800cd06:	4637      	mov	r7, r6
 800cd08:	e7e1      	b.n	800ccce <_dtoa_r+0x93e>
 800cd0a:	9700      	str	r7, [sp, #0]
 800cd0c:	4637      	mov	r7, r6
 800cd0e:	e599      	b.n	800c844 <_dtoa_r+0x4b4>
 800cd10:	40240000 	.word	0x40240000
 800cd14:	9b08      	ldr	r3, [sp, #32]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 80ca 	beq.w	800ceb0 <_dtoa_r+0xb20>
 800cd1c:	9b03      	ldr	r3, [sp, #12]
 800cd1e:	9302      	str	r3, [sp, #8]
 800cd20:	2d00      	cmp	r5, #0
 800cd22:	dd05      	ble.n	800cd30 <_dtoa_r+0x9a0>
 800cd24:	4639      	mov	r1, r7
 800cd26:	462a      	mov	r2, r5
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f000 ff1f 	bl	800db6c <__lshift>
 800cd2e:	4607      	mov	r7, r0
 800cd30:	f1b8 0f00 	cmp.w	r8, #0
 800cd34:	d05b      	beq.n	800cdee <_dtoa_r+0xa5e>
 800cd36:	6879      	ldr	r1, [r7, #4]
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f000 fcbb 	bl	800d6b4 <_Balloc>
 800cd3e:	4605      	mov	r5, r0
 800cd40:	b928      	cbnz	r0, 800cd4e <_dtoa_r+0x9be>
 800cd42:	4b87      	ldr	r3, [pc, #540]	; (800cf60 <_dtoa_r+0xbd0>)
 800cd44:	4602      	mov	r2, r0
 800cd46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd4a:	f7ff bb3b 	b.w	800c3c4 <_dtoa_r+0x34>
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	3202      	adds	r2, #2
 800cd52:	0092      	lsls	r2, r2, #2
 800cd54:	f107 010c 	add.w	r1, r7, #12
 800cd58:	300c      	adds	r0, #12
 800cd5a:	f7fd fba3 	bl	800a4a4 <memcpy>
 800cd5e:	2201      	movs	r2, #1
 800cd60:	4629      	mov	r1, r5
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 ff02 	bl	800db6c <__lshift>
 800cd68:	9b01      	ldr	r3, [sp, #4]
 800cd6a:	f103 0901 	add.w	r9, r3, #1
 800cd6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cd72:	4413      	add	r3, r2
 800cd74:	9305      	str	r3, [sp, #20]
 800cd76:	f00a 0301 	and.w	r3, sl, #1
 800cd7a:	46b8      	mov	r8, r7
 800cd7c:	9304      	str	r3, [sp, #16]
 800cd7e:	4607      	mov	r7, r0
 800cd80:	4631      	mov	r1, r6
 800cd82:	ee18 0a10 	vmov	r0, s16
 800cd86:	f7ff fa75 	bl	800c274 <quorem>
 800cd8a:	4641      	mov	r1, r8
 800cd8c:	9002      	str	r0, [sp, #8]
 800cd8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd92:	ee18 0a10 	vmov	r0, s16
 800cd96:	f000 ff59 	bl	800dc4c <__mcmp>
 800cd9a:	463a      	mov	r2, r7
 800cd9c:	9003      	str	r0, [sp, #12]
 800cd9e:	4631      	mov	r1, r6
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 ff6f 	bl	800dc84 <__mdiff>
 800cda6:	68c2      	ldr	r2, [r0, #12]
 800cda8:	f109 3bff 	add.w	fp, r9, #4294967295
 800cdac:	4605      	mov	r5, r0
 800cdae:	bb02      	cbnz	r2, 800cdf2 <_dtoa_r+0xa62>
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	ee18 0a10 	vmov	r0, s16
 800cdb6:	f000 ff49 	bl	800dc4c <__mcmp>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	4629      	mov	r1, r5
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	9207      	str	r2, [sp, #28]
 800cdc2:	f000 fcb7 	bl	800d734 <_Bfree>
 800cdc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cdca:	ea43 0102 	orr.w	r1, r3, r2
 800cdce:	9b04      	ldr	r3, [sp, #16]
 800cdd0:	430b      	orrs	r3, r1
 800cdd2:	464d      	mov	r5, r9
 800cdd4:	d10f      	bne.n	800cdf6 <_dtoa_r+0xa66>
 800cdd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cdda:	d02a      	beq.n	800ce32 <_dtoa_r+0xaa2>
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	dd02      	ble.n	800cde8 <_dtoa_r+0xa58>
 800cde2:	9b02      	ldr	r3, [sp, #8]
 800cde4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cde8:	f88b a000 	strb.w	sl, [fp]
 800cdec:	e775      	b.n	800ccda <_dtoa_r+0x94a>
 800cdee:	4638      	mov	r0, r7
 800cdf0:	e7ba      	b.n	800cd68 <_dtoa_r+0x9d8>
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	e7e2      	b.n	800cdbc <_dtoa_r+0xa2c>
 800cdf6:	9b03      	ldr	r3, [sp, #12]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	db04      	blt.n	800ce06 <_dtoa_r+0xa76>
 800cdfc:	9906      	ldr	r1, [sp, #24]
 800cdfe:	430b      	orrs	r3, r1
 800ce00:	9904      	ldr	r1, [sp, #16]
 800ce02:	430b      	orrs	r3, r1
 800ce04:	d122      	bne.n	800ce4c <_dtoa_r+0xabc>
 800ce06:	2a00      	cmp	r2, #0
 800ce08:	ddee      	ble.n	800cde8 <_dtoa_r+0xa58>
 800ce0a:	ee18 1a10 	vmov	r1, s16
 800ce0e:	2201      	movs	r2, #1
 800ce10:	4620      	mov	r0, r4
 800ce12:	f000 feab 	bl	800db6c <__lshift>
 800ce16:	4631      	mov	r1, r6
 800ce18:	ee08 0a10 	vmov	s16, r0
 800ce1c:	f000 ff16 	bl	800dc4c <__mcmp>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	dc03      	bgt.n	800ce2c <_dtoa_r+0xa9c>
 800ce24:	d1e0      	bne.n	800cde8 <_dtoa_r+0xa58>
 800ce26:	f01a 0f01 	tst.w	sl, #1
 800ce2a:	d0dd      	beq.n	800cde8 <_dtoa_r+0xa58>
 800ce2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce30:	d1d7      	bne.n	800cde2 <_dtoa_r+0xa52>
 800ce32:	2339      	movs	r3, #57	; 0x39
 800ce34:	f88b 3000 	strb.w	r3, [fp]
 800ce38:	462b      	mov	r3, r5
 800ce3a:	461d      	mov	r5, r3
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce42:	2a39      	cmp	r2, #57	; 0x39
 800ce44:	d071      	beq.n	800cf2a <_dtoa_r+0xb9a>
 800ce46:	3201      	adds	r2, #1
 800ce48:	701a      	strb	r2, [r3, #0]
 800ce4a:	e746      	b.n	800ccda <_dtoa_r+0x94a>
 800ce4c:	2a00      	cmp	r2, #0
 800ce4e:	dd07      	ble.n	800ce60 <_dtoa_r+0xad0>
 800ce50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce54:	d0ed      	beq.n	800ce32 <_dtoa_r+0xaa2>
 800ce56:	f10a 0301 	add.w	r3, sl, #1
 800ce5a:	f88b 3000 	strb.w	r3, [fp]
 800ce5e:	e73c      	b.n	800ccda <_dtoa_r+0x94a>
 800ce60:	9b05      	ldr	r3, [sp, #20]
 800ce62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ce66:	4599      	cmp	r9, r3
 800ce68:	d047      	beq.n	800cefa <_dtoa_r+0xb6a>
 800ce6a:	ee18 1a10 	vmov	r1, s16
 800ce6e:	2300      	movs	r3, #0
 800ce70:	220a      	movs	r2, #10
 800ce72:	4620      	mov	r0, r4
 800ce74:	f000 fc80 	bl	800d778 <__multadd>
 800ce78:	45b8      	cmp	r8, r7
 800ce7a:	ee08 0a10 	vmov	s16, r0
 800ce7e:	f04f 0300 	mov.w	r3, #0
 800ce82:	f04f 020a 	mov.w	r2, #10
 800ce86:	4641      	mov	r1, r8
 800ce88:	4620      	mov	r0, r4
 800ce8a:	d106      	bne.n	800ce9a <_dtoa_r+0xb0a>
 800ce8c:	f000 fc74 	bl	800d778 <__multadd>
 800ce90:	4680      	mov	r8, r0
 800ce92:	4607      	mov	r7, r0
 800ce94:	f109 0901 	add.w	r9, r9, #1
 800ce98:	e772      	b.n	800cd80 <_dtoa_r+0x9f0>
 800ce9a:	f000 fc6d 	bl	800d778 <__multadd>
 800ce9e:	4639      	mov	r1, r7
 800cea0:	4680      	mov	r8, r0
 800cea2:	2300      	movs	r3, #0
 800cea4:	220a      	movs	r2, #10
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 fc66 	bl	800d778 <__multadd>
 800ceac:	4607      	mov	r7, r0
 800ceae:	e7f1      	b.n	800ce94 <_dtoa_r+0xb04>
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	9302      	str	r3, [sp, #8]
 800ceb4:	9d01      	ldr	r5, [sp, #4]
 800ceb6:	ee18 0a10 	vmov	r0, s16
 800ceba:	4631      	mov	r1, r6
 800cebc:	f7ff f9da 	bl	800c274 <quorem>
 800cec0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cec4:	9b01      	ldr	r3, [sp, #4]
 800cec6:	f805 ab01 	strb.w	sl, [r5], #1
 800ceca:	1aea      	subs	r2, r5, r3
 800cecc:	9b02      	ldr	r3, [sp, #8]
 800cece:	4293      	cmp	r3, r2
 800ced0:	dd09      	ble.n	800cee6 <_dtoa_r+0xb56>
 800ced2:	ee18 1a10 	vmov	r1, s16
 800ced6:	2300      	movs	r3, #0
 800ced8:	220a      	movs	r2, #10
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 fc4c 	bl	800d778 <__multadd>
 800cee0:	ee08 0a10 	vmov	s16, r0
 800cee4:	e7e7      	b.n	800ceb6 <_dtoa_r+0xb26>
 800cee6:	9b02      	ldr	r3, [sp, #8]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	bfc8      	it	gt
 800ceec:	461d      	movgt	r5, r3
 800ceee:	9b01      	ldr	r3, [sp, #4]
 800cef0:	bfd8      	it	le
 800cef2:	2501      	movle	r5, #1
 800cef4:	441d      	add	r5, r3
 800cef6:	f04f 0800 	mov.w	r8, #0
 800cefa:	ee18 1a10 	vmov	r1, s16
 800cefe:	2201      	movs	r2, #1
 800cf00:	4620      	mov	r0, r4
 800cf02:	f000 fe33 	bl	800db6c <__lshift>
 800cf06:	4631      	mov	r1, r6
 800cf08:	ee08 0a10 	vmov	s16, r0
 800cf0c:	f000 fe9e 	bl	800dc4c <__mcmp>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	dc91      	bgt.n	800ce38 <_dtoa_r+0xaa8>
 800cf14:	d102      	bne.n	800cf1c <_dtoa_r+0xb8c>
 800cf16:	f01a 0f01 	tst.w	sl, #1
 800cf1a:	d18d      	bne.n	800ce38 <_dtoa_r+0xaa8>
 800cf1c:	462b      	mov	r3, r5
 800cf1e:	461d      	mov	r5, r3
 800cf20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf24:	2a30      	cmp	r2, #48	; 0x30
 800cf26:	d0fa      	beq.n	800cf1e <_dtoa_r+0xb8e>
 800cf28:	e6d7      	b.n	800ccda <_dtoa_r+0x94a>
 800cf2a:	9a01      	ldr	r2, [sp, #4]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d184      	bne.n	800ce3a <_dtoa_r+0xaaa>
 800cf30:	9b00      	ldr	r3, [sp, #0]
 800cf32:	3301      	adds	r3, #1
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	2331      	movs	r3, #49	; 0x31
 800cf38:	7013      	strb	r3, [r2, #0]
 800cf3a:	e6ce      	b.n	800ccda <_dtoa_r+0x94a>
 800cf3c:	4b09      	ldr	r3, [pc, #36]	; (800cf64 <_dtoa_r+0xbd4>)
 800cf3e:	f7ff ba95 	b.w	800c46c <_dtoa_r+0xdc>
 800cf42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f47f aa6e 	bne.w	800c426 <_dtoa_r+0x96>
 800cf4a:	4b07      	ldr	r3, [pc, #28]	; (800cf68 <_dtoa_r+0xbd8>)
 800cf4c:	f7ff ba8e 	b.w	800c46c <_dtoa_r+0xdc>
 800cf50:	9b02      	ldr	r3, [sp, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	dcae      	bgt.n	800ceb4 <_dtoa_r+0xb24>
 800cf56:	9b06      	ldr	r3, [sp, #24]
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	f73f aea8 	bgt.w	800ccae <_dtoa_r+0x91e>
 800cf5e:	e7a9      	b.n	800ceb4 <_dtoa_r+0xb24>
 800cf60:	0800fed8 	.word	0x0800fed8
 800cf64:	080100d1 	.word	0x080100d1
 800cf68:	0800fe59 	.word	0x0800fe59

0800cf6c <rshift>:
 800cf6c:	6903      	ldr	r3, [r0, #16]
 800cf6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf76:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf7a:	f100 0414 	add.w	r4, r0, #20
 800cf7e:	dd45      	ble.n	800d00c <rshift+0xa0>
 800cf80:	f011 011f 	ands.w	r1, r1, #31
 800cf84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf8c:	d10c      	bne.n	800cfa8 <rshift+0x3c>
 800cf8e:	f100 0710 	add.w	r7, r0, #16
 800cf92:	4629      	mov	r1, r5
 800cf94:	42b1      	cmp	r1, r6
 800cf96:	d334      	bcc.n	800d002 <rshift+0x96>
 800cf98:	1a9b      	subs	r3, r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	1eea      	subs	r2, r5, #3
 800cf9e:	4296      	cmp	r6, r2
 800cfa0:	bf38      	it	cc
 800cfa2:	2300      	movcc	r3, #0
 800cfa4:	4423      	add	r3, r4
 800cfa6:	e015      	b.n	800cfd4 <rshift+0x68>
 800cfa8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cfac:	f1c1 0820 	rsb	r8, r1, #32
 800cfb0:	40cf      	lsrs	r7, r1
 800cfb2:	f105 0e04 	add.w	lr, r5, #4
 800cfb6:	46a1      	mov	r9, r4
 800cfb8:	4576      	cmp	r6, lr
 800cfba:	46f4      	mov	ip, lr
 800cfbc:	d815      	bhi.n	800cfea <rshift+0x7e>
 800cfbe:	1a9a      	subs	r2, r3, r2
 800cfc0:	0092      	lsls	r2, r2, #2
 800cfc2:	3a04      	subs	r2, #4
 800cfc4:	3501      	adds	r5, #1
 800cfc6:	42ae      	cmp	r6, r5
 800cfc8:	bf38      	it	cc
 800cfca:	2200      	movcc	r2, #0
 800cfcc:	18a3      	adds	r3, r4, r2
 800cfce:	50a7      	str	r7, [r4, r2]
 800cfd0:	b107      	cbz	r7, 800cfd4 <rshift+0x68>
 800cfd2:	3304      	adds	r3, #4
 800cfd4:	1b1a      	subs	r2, r3, r4
 800cfd6:	42a3      	cmp	r3, r4
 800cfd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cfdc:	bf08      	it	eq
 800cfde:	2300      	moveq	r3, #0
 800cfe0:	6102      	str	r2, [r0, #16]
 800cfe2:	bf08      	it	eq
 800cfe4:	6143      	streq	r3, [r0, #20]
 800cfe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfea:	f8dc c000 	ldr.w	ip, [ip]
 800cfee:	fa0c fc08 	lsl.w	ip, ip, r8
 800cff2:	ea4c 0707 	orr.w	r7, ip, r7
 800cff6:	f849 7b04 	str.w	r7, [r9], #4
 800cffa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cffe:	40cf      	lsrs	r7, r1
 800d000:	e7da      	b.n	800cfb8 <rshift+0x4c>
 800d002:	f851 cb04 	ldr.w	ip, [r1], #4
 800d006:	f847 cf04 	str.w	ip, [r7, #4]!
 800d00a:	e7c3      	b.n	800cf94 <rshift+0x28>
 800d00c:	4623      	mov	r3, r4
 800d00e:	e7e1      	b.n	800cfd4 <rshift+0x68>

0800d010 <__hexdig_fun>:
 800d010:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d014:	2b09      	cmp	r3, #9
 800d016:	d802      	bhi.n	800d01e <__hexdig_fun+0xe>
 800d018:	3820      	subs	r0, #32
 800d01a:	b2c0      	uxtb	r0, r0
 800d01c:	4770      	bx	lr
 800d01e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d022:	2b05      	cmp	r3, #5
 800d024:	d801      	bhi.n	800d02a <__hexdig_fun+0x1a>
 800d026:	3847      	subs	r0, #71	; 0x47
 800d028:	e7f7      	b.n	800d01a <__hexdig_fun+0xa>
 800d02a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d02e:	2b05      	cmp	r3, #5
 800d030:	d801      	bhi.n	800d036 <__hexdig_fun+0x26>
 800d032:	3827      	subs	r0, #39	; 0x27
 800d034:	e7f1      	b.n	800d01a <__hexdig_fun+0xa>
 800d036:	2000      	movs	r0, #0
 800d038:	4770      	bx	lr
	...

0800d03c <__gethex>:
 800d03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d040:	ed2d 8b02 	vpush	{d8}
 800d044:	b089      	sub	sp, #36	; 0x24
 800d046:	ee08 0a10 	vmov	s16, r0
 800d04a:	9304      	str	r3, [sp, #16]
 800d04c:	4bb4      	ldr	r3, [pc, #720]	; (800d320 <__gethex+0x2e4>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	9301      	str	r3, [sp, #4]
 800d052:	4618      	mov	r0, r3
 800d054:	468b      	mov	fp, r1
 800d056:	4690      	mov	r8, r2
 800d058:	f7f3 f8ba 	bl	80001d0 <strlen>
 800d05c:	9b01      	ldr	r3, [sp, #4]
 800d05e:	f8db 2000 	ldr.w	r2, [fp]
 800d062:	4403      	add	r3, r0
 800d064:	4682      	mov	sl, r0
 800d066:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d06a:	9305      	str	r3, [sp, #20]
 800d06c:	1c93      	adds	r3, r2, #2
 800d06e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d072:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d076:	32fe      	adds	r2, #254	; 0xfe
 800d078:	18d1      	adds	r1, r2, r3
 800d07a:	461f      	mov	r7, r3
 800d07c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d080:	9100      	str	r1, [sp, #0]
 800d082:	2830      	cmp	r0, #48	; 0x30
 800d084:	d0f8      	beq.n	800d078 <__gethex+0x3c>
 800d086:	f7ff ffc3 	bl	800d010 <__hexdig_fun>
 800d08a:	4604      	mov	r4, r0
 800d08c:	2800      	cmp	r0, #0
 800d08e:	d13a      	bne.n	800d106 <__gethex+0xca>
 800d090:	9901      	ldr	r1, [sp, #4]
 800d092:	4652      	mov	r2, sl
 800d094:	4638      	mov	r0, r7
 800d096:	f001 fcb7 	bl	800ea08 <strncmp>
 800d09a:	4605      	mov	r5, r0
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d168      	bne.n	800d172 <__gethex+0x136>
 800d0a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d0a4:	eb07 060a 	add.w	r6, r7, sl
 800d0a8:	f7ff ffb2 	bl	800d010 <__hexdig_fun>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d062      	beq.n	800d176 <__gethex+0x13a>
 800d0b0:	4633      	mov	r3, r6
 800d0b2:	7818      	ldrb	r0, [r3, #0]
 800d0b4:	2830      	cmp	r0, #48	; 0x30
 800d0b6:	461f      	mov	r7, r3
 800d0b8:	f103 0301 	add.w	r3, r3, #1
 800d0bc:	d0f9      	beq.n	800d0b2 <__gethex+0x76>
 800d0be:	f7ff ffa7 	bl	800d010 <__hexdig_fun>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	fab0 f480 	clz	r4, r0
 800d0c8:	0964      	lsrs	r4, r4, #5
 800d0ca:	4635      	mov	r5, r6
 800d0cc:	9300      	str	r3, [sp, #0]
 800d0ce:	463a      	mov	r2, r7
 800d0d0:	4616      	mov	r6, r2
 800d0d2:	3201      	adds	r2, #1
 800d0d4:	7830      	ldrb	r0, [r6, #0]
 800d0d6:	f7ff ff9b 	bl	800d010 <__hexdig_fun>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	d1f8      	bne.n	800d0d0 <__gethex+0x94>
 800d0de:	9901      	ldr	r1, [sp, #4]
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	f001 fc90 	bl	800ea08 <strncmp>
 800d0e8:	b980      	cbnz	r0, 800d10c <__gethex+0xd0>
 800d0ea:	b94d      	cbnz	r5, 800d100 <__gethex+0xc4>
 800d0ec:	eb06 050a 	add.w	r5, r6, sl
 800d0f0:	462a      	mov	r2, r5
 800d0f2:	4616      	mov	r6, r2
 800d0f4:	3201      	adds	r2, #1
 800d0f6:	7830      	ldrb	r0, [r6, #0]
 800d0f8:	f7ff ff8a 	bl	800d010 <__hexdig_fun>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d1f8      	bne.n	800d0f2 <__gethex+0xb6>
 800d100:	1bad      	subs	r5, r5, r6
 800d102:	00ad      	lsls	r5, r5, #2
 800d104:	e004      	b.n	800d110 <__gethex+0xd4>
 800d106:	2400      	movs	r4, #0
 800d108:	4625      	mov	r5, r4
 800d10a:	e7e0      	b.n	800d0ce <__gethex+0x92>
 800d10c:	2d00      	cmp	r5, #0
 800d10e:	d1f7      	bne.n	800d100 <__gethex+0xc4>
 800d110:	7833      	ldrb	r3, [r6, #0]
 800d112:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d116:	2b50      	cmp	r3, #80	; 0x50
 800d118:	d13b      	bne.n	800d192 <__gethex+0x156>
 800d11a:	7873      	ldrb	r3, [r6, #1]
 800d11c:	2b2b      	cmp	r3, #43	; 0x2b
 800d11e:	d02c      	beq.n	800d17a <__gethex+0x13e>
 800d120:	2b2d      	cmp	r3, #45	; 0x2d
 800d122:	d02e      	beq.n	800d182 <__gethex+0x146>
 800d124:	1c71      	adds	r1, r6, #1
 800d126:	f04f 0900 	mov.w	r9, #0
 800d12a:	7808      	ldrb	r0, [r1, #0]
 800d12c:	f7ff ff70 	bl	800d010 <__hexdig_fun>
 800d130:	1e43      	subs	r3, r0, #1
 800d132:	b2db      	uxtb	r3, r3
 800d134:	2b18      	cmp	r3, #24
 800d136:	d82c      	bhi.n	800d192 <__gethex+0x156>
 800d138:	f1a0 0210 	sub.w	r2, r0, #16
 800d13c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d140:	f7ff ff66 	bl	800d010 <__hexdig_fun>
 800d144:	1e43      	subs	r3, r0, #1
 800d146:	b2db      	uxtb	r3, r3
 800d148:	2b18      	cmp	r3, #24
 800d14a:	d91d      	bls.n	800d188 <__gethex+0x14c>
 800d14c:	f1b9 0f00 	cmp.w	r9, #0
 800d150:	d000      	beq.n	800d154 <__gethex+0x118>
 800d152:	4252      	negs	r2, r2
 800d154:	4415      	add	r5, r2
 800d156:	f8cb 1000 	str.w	r1, [fp]
 800d15a:	b1e4      	cbz	r4, 800d196 <__gethex+0x15a>
 800d15c:	9b00      	ldr	r3, [sp, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	bf14      	ite	ne
 800d162:	2700      	movne	r7, #0
 800d164:	2706      	moveq	r7, #6
 800d166:	4638      	mov	r0, r7
 800d168:	b009      	add	sp, #36	; 0x24
 800d16a:	ecbd 8b02 	vpop	{d8}
 800d16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d172:	463e      	mov	r6, r7
 800d174:	4625      	mov	r5, r4
 800d176:	2401      	movs	r4, #1
 800d178:	e7ca      	b.n	800d110 <__gethex+0xd4>
 800d17a:	f04f 0900 	mov.w	r9, #0
 800d17e:	1cb1      	adds	r1, r6, #2
 800d180:	e7d3      	b.n	800d12a <__gethex+0xee>
 800d182:	f04f 0901 	mov.w	r9, #1
 800d186:	e7fa      	b.n	800d17e <__gethex+0x142>
 800d188:	230a      	movs	r3, #10
 800d18a:	fb03 0202 	mla	r2, r3, r2, r0
 800d18e:	3a10      	subs	r2, #16
 800d190:	e7d4      	b.n	800d13c <__gethex+0x100>
 800d192:	4631      	mov	r1, r6
 800d194:	e7df      	b.n	800d156 <__gethex+0x11a>
 800d196:	1bf3      	subs	r3, r6, r7
 800d198:	3b01      	subs	r3, #1
 800d19a:	4621      	mov	r1, r4
 800d19c:	2b07      	cmp	r3, #7
 800d19e:	dc0b      	bgt.n	800d1b8 <__gethex+0x17c>
 800d1a0:	ee18 0a10 	vmov	r0, s16
 800d1a4:	f000 fa86 	bl	800d6b4 <_Balloc>
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	b940      	cbnz	r0, 800d1be <__gethex+0x182>
 800d1ac:	4b5d      	ldr	r3, [pc, #372]	; (800d324 <__gethex+0x2e8>)
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	21de      	movs	r1, #222	; 0xde
 800d1b2:	485d      	ldr	r0, [pc, #372]	; (800d328 <__gethex+0x2ec>)
 800d1b4:	f001 fcf8 	bl	800eba8 <__assert_func>
 800d1b8:	3101      	adds	r1, #1
 800d1ba:	105b      	asrs	r3, r3, #1
 800d1bc:	e7ee      	b.n	800d19c <__gethex+0x160>
 800d1be:	f100 0914 	add.w	r9, r0, #20
 800d1c2:	f04f 0b00 	mov.w	fp, #0
 800d1c6:	f1ca 0301 	rsb	r3, sl, #1
 800d1ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800d1ce:	f8cd b000 	str.w	fp, [sp]
 800d1d2:	9306      	str	r3, [sp, #24]
 800d1d4:	42b7      	cmp	r7, r6
 800d1d6:	d340      	bcc.n	800d25a <__gethex+0x21e>
 800d1d8:	9802      	ldr	r0, [sp, #8]
 800d1da:	9b00      	ldr	r3, [sp, #0]
 800d1dc:	f840 3b04 	str.w	r3, [r0], #4
 800d1e0:	eba0 0009 	sub.w	r0, r0, r9
 800d1e4:	1080      	asrs	r0, r0, #2
 800d1e6:	0146      	lsls	r6, r0, #5
 800d1e8:	6120      	str	r0, [r4, #16]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f000 fb54 	bl	800d898 <__hi0bits>
 800d1f0:	1a30      	subs	r0, r6, r0
 800d1f2:	f8d8 6000 	ldr.w	r6, [r8]
 800d1f6:	42b0      	cmp	r0, r6
 800d1f8:	dd63      	ble.n	800d2c2 <__gethex+0x286>
 800d1fa:	1b87      	subs	r7, r0, r6
 800d1fc:	4639      	mov	r1, r7
 800d1fe:	4620      	mov	r0, r4
 800d200:	f000 fef8 	bl	800dff4 <__any_on>
 800d204:	4682      	mov	sl, r0
 800d206:	b1a8      	cbz	r0, 800d234 <__gethex+0x1f8>
 800d208:	1e7b      	subs	r3, r7, #1
 800d20a:	1159      	asrs	r1, r3, #5
 800d20c:	f003 021f 	and.w	r2, r3, #31
 800d210:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d214:	f04f 0a01 	mov.w	sl, #1
 800d218:	fa0a f202 	lsl.w	r2, sl, r2
 800d21c:	420a      	tst	r2, r1
 800d21e:	d009      	beq.n	800d234 <__gethex+0x1f8>
 800d220:	4553      	cmp	r3, sl
 800d222:	dd05      	ble.n	800d230 <__gethex+0x1f4>
 800d224:	1eb9      	subs	r1, r7, #2
 800d226:	4620      	mov	r0, r4
 800d228:	f000 fee4 	bl	800dff4 <__any_on>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d145      	bne.n	800d2bc <__gethex+0x280>
 800d230:	f04f 0a02 	mov.w	sl, #2
 800d234:	4639      	mov	r1, r7
 800d236:	4620      	mov	r0, r4
 800d238:	f7ff fe98 	bl	800cf6c <rshift>
 800d23c:	443d      	add	r5, r7
 800d23e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d242:	42ab      	cmp	r3, r5
 800d244:	da4c      	bge.n	800d2e0 <__gethex+0x2a4>
 800d246:	ee18 0a10 	vmov	r0, s16
 800d24a:	4621      	mov	r1, r4
 800d24c:	f000 fa72 	bl	800d734 <_Bfree>
 800d250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d252:	2300      	movs	r3, #0
 800d254:	6013      	str	r3, [r2, #0]
 800d256:	27a3      	movs	r7, #163	; 0xa3
 800d258:	e785      	b.n	800d166 <__gethex+0x12a>
 800d25a:	1e73      	subs	r3, r6, #1
 800d25c:	9a05      	ldr	r2, [sp, #20]
 800d25e:	9303      	str	r3, [sp, #12]
 800d260:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d264:	4293      	cmp	r3, r2
 800d266:	d019      	beq.n	800d29c <__gethex+0x260>
 800d268:	f1bb 0f20 	cmp.w	fp, #32
 800d26c:	d107      	bne.n	800d27e <__gethex+0x242>
 800d26e:	9b02      	ldr	r3, [sp, #8]
 800d270:	9a00      	ldr	r2, [sp, #0]
 800d272:	f843 2b04 	str.w	r2, [r3], #4
 800d276:	9302      	str	r3, [sp, #8]
 800d278:	2300      	movs	r3, #0
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	469b      	mov	fp, r3
 800d27e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d282:	f7ff fec5 	bl	800d010 <__hexdig_fun>
 800d286:	9b00      	ldr	r3, [sp, #0]
 800d288:	f000 000f 	and.w	r0, r0, #15
 800d28c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d290:	4303      	orrs	r3, r0
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	f10b 0b04 	add.w	fp, fp, #4
 800d298:	9b03      	ldr	r3, [sp, #12]
 800d29a:	e00d      	b.n	800d2b8 <__gethex+0x27c>
 800d29c:	9b03      	ldr	r3, [sp, #12]
 800d29e:	9a06      	ldr	r2, [sp, #24]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	42bb      	cmp	r3, r7
 800d2a4:	d3e0      	bcc.n	800d268 <__gethex+0x22c>
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	9901      	ldr	r1, [sp, #4]
 800d2aa:	9307      	str	r3, [sp, #28]
 800d2ac:	4652      	mov	r2, sl
 800d2ae:	f001 fbab 	bl	800ea08 <strncmp>
 800d2b2:	9b07      	ldr	r3, [sp, #28]
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d1d7      	bne.n	800d268 <__gethex+0x22c>
 800d2b8:	461e      	mov	r6, r3
 800d2ba:	e78b      	b.n	800d1d4 <__gethex+0x198>
 800d2bc:	f04f 0a03 	mov.w	sl, #3
 800d2c0:	e7b8      	b.n	800d234 <__gethex+0x1f8>
 800d2c2:	da0a      	bge.n	800d2da <__gethex+0x29e>
 800d2c4:	1a37      	subs	r7, r6, r0
 800d2c6:	4621      	mov	r1, r4
 800d2c8:	ee18 0a10 	vmov	r0, s16
 800d2cc:	463a      	mov	r2, r7
 800d2ce:	f000 fc4d 	bl	800db6c <__lshift>
 800d2d2:	1bed      	subs	r5, r5, r7
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	f100 0914 	add.w	r9, r0, #20
 800d2da:	f04f 0a00 	mov.w	sl, #0
 800d2de:	e7ae      	b.n	800d23e <__gethex+0x202>
 800d2e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d2e4:	42a8      	cmp	r0, r5
 800d2e6:	dd72      	ble.n	800d3ce <__gethex+0x392>
 800d2e8:	1b45      	subs	r5, r0, r5
 800d2ea:	42ae      	cmp	r6, r5
 800d2ec:	dc36      	bgt.n	800d35c <__gethex+0x320>
 800d2ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d02a      	beq.n	800d34c <__gethex+0x310>
 800d2f6:	2b03      	cmp	r3, #3
 800d2f8:	d02c      	beq.n	800d354 <__gethex+0x318>
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d11c      	bne.n	800d338 <__gethex+0x2fc>
 800d2fe:	42ae      	cmp	r6, r5
 800d300:	d11a      	bne.n	800d338 <__gethex+0x2fc>
 800d302:	2e01      	cmp	r6, #1
 800d304:	d112      	bne.n	800d32c <__gethex+0x2f0>
 800d306:	9a04      	ldr	r2, [sp, #16]
 800d308:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d30c:	6013      	str	r3, [r2, #0]
 800d30e:	2301      	movs	r3, #1
 800d310:	6123      	str	r3, [r4, #16]
 800d312:	f8c9 3000 	str.w	r3, [r9]
 800d316:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d318:	2762      	movs	r7, #98	; 0x62
 800d31a:	601c      	str	r4, [r3, #0]
 800d31c:	e723      	b.n	800d166 <__gethex+0x12a>
 800d31e:	bf00      	nop
 800d320:	0800ff50 	.word	0x0800ff50
 800d324:	0800fed8 	.word	0x0800fed8
 800d328:	0800fee9 	.word	0x0800fee9
 800d32c:	1e71      	subs	r1, r6, #1
 800d32e:	4620      	mov	r0, r4
 800d330:	f000 fe60 	bl	800dff4 <__any_on>
 800d334:	2800      	cmp	r0, #0
 800d336:	d1e6      	bne.n	800d306 <__gethex+0x2ca>
 800d338:	ee18 0a10 	vmov	r0, s16
 800d33c:	4621      	mov	r1, r4
 800d33e:	f000 f9f9 	bl	800d734 <_Bfree>
 800d342:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d344:	2300      	movs	r3, #0
 800d346:	6013      	str	r3, [r2, #0]
 800d348:	2750      	movs	r7, #80	; 0x50
 800d34a:	e70c      	b.n	800d166 <__gethex+0x12a>
 800d34c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d1f2      	bne.n	800d338 <__gethex+0x2fc>
 800d352:	e7d8      	b.n	800d306 <__gethex+0x2ca>
 800d354:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1d5      	bne.n	800d306 <__gethex+0x2ca>
 800d35a:	e7ed      	b.n	800d338 <__gethex+0x2fc>
 800d35c:	1e6f      	subs	r7, r5, #1
 800d35e:	f1ba 0f00 	cmp.w	sl, #0
 800d362:	d131      	bne.n	800d3c8 <__gethex+0x38c>
 800d364:	b127      	cbz	r7, 800d370 <__gethex+0x334>
 800d366:	4639      	mov	r1, r7
 800d368:	4620      	mov	r0, r4
 800d36a:	f000 fe43 	bl	800dff4 <__any_on>
 800d36e:	4682      	mov	sl, r0
 800d370:	117b      	asrs	r3, r7, #5
 800d372:	2101      	movs	r1, #1
 800d374:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d378:	f007 071f 	and.w	r7, r7, #31
 800d37c:	fa01 f707 	lsl.w	r7, r1, r7
 800d380:	421f      	tst	r7, r3
 800d382:	4629      	mov	r1, r5
 800d384:	4620      	mov	r0, r4
 800d386:	bf18      	it	ne
 800d388:	f04a 0a02 	orrne.w	sl, sl, #2
 800d38c:	1b76      	subs	r6, r6, r5
 800d38e:	f7ff fded 	bl	800cf6c <rshift>
 800d392:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d396:	2702      	movs	r7, #2
 800d398:	f1ba 0f00 	cmp.w	sl, #0
 800d39c:	d048      	beq.n	800d430 <__gethex+0x3f4>
 800d39e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d3a2:	2b02      	cmp	r3, #2
 800d3a4:	d015      	beq.n	800d3d2 <__gethex+0x396>
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d017      	beq.n	800d3da <__gethex+0x39e>
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d109      	bne.n	800d3c2 <__gethex+0x386>
 800d3ae:	f01a 0f02 	tst.w	sl, #2
 800d3b2:	d006      	beq.n	800d3c2 <__gethex+0x386>
 800d3b4:	f8d9 0000 	ldr.w	r0, [r9]
 800d3b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800d3bc:	f01a 0f01 	tst.w	sl, #1
 800d3c0:	d10e      	bne.n	800d3e0 <__gethex+0x3a4>
 800d3c2:	f047 0710 	orr.w	r7, r7, #16
 800d3c6:	e033      	b.n	800d430 <__gethex+0x3f4>
 800d3c8:	f04f 0a01 	mov.w	sl, #1
 800d3cc:	e7d0      	b.n	800d370 <__gethex+0x334>
 800d3ce:	2701      	movs	r7, #1
 800d3d0:	e7e2      	b.n	800d398 <__gethex+0x35c>
 800d3d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3d4:	f1c3 0301 	rsb	r3, r3, #1
 800d3d8:	9315      	str	r3, [sp, #84]	; 0x54
 800d3da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d0f0      	beq.n	800d3c2 <__gethex+0x386>
 800d3e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d3e4:	f104 0314 	add.w	r3, r4, #20
 800d3e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d3ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d3f0:	f04f 0c00 	mov.w	ip, #0
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d3fe:	d01c      	beq.n	800d43a <__gethex+0x3fe>
 800d400:	3201      	adds	r2, #1
 800d402:	6002      	str	r2, [r0, #0]
 800d404:	2f02      	cmp	r7, #2
 800d406:	f104 0314 	add.w	r3, r4, #20
 800d40a:	d13f      	bne.n	800d48c <__gethex+0x450>
 800d40c:	f8d8 2000 	ldr.w	r2, [r8]
 800d410:	3a01      	subs	r2, #1
 800d412:	42b2      	cmp	r2, r6
 800d414:	d10a      	bne.n	800d42c <__gethex+0x3f0>
 800d416:	1171      	asrs	r1, r6, #5
 800d418:	2201      	movs	r2, #1
 800d41a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d41e:	f006 061f 	and.w	r6, r6, #31
 800d422:	fa02 f606 	lsl.w	r6, r2, r6
 800d426:	421e      	tst	r6, r3
 800d428:	bf18      	it	ne
 800d42a:	4617      	movne	r7, r2
 800d42c:	f047 0720 	orr.w	r7, r7, #32
 800d430:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d432:	601c      	str	r4, [r3, #0]
 800d434:	9b04      	ldr	r3, [sp, #16]
 800d436:	601d      	str	r5, [r3, #0]
 800d438:	e695      	b.n	800d166 <__gethex+0x12a>
 800d43a:	4299      	cmp	r1, r3
 800d43c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d440:	d8d8      	bhi.n	800d3f4 <__gethex+0x3b8>
 800d442:	68a3      	ldr	r3, [r4, #8]
 800d444:	459b      	cmp	fp, r3
 800d446:	db19      	blt.n	800d47c <__gethex+0x440>
 800d448:	6861      	ldr	r1, [r4, #4]
 800d44a:	ee18 0a10 	vmov	r0, s16
 800d44e:	3101      	adds	r1, #1
 800d450:	f000 f930 	bl	800d6b4 <_Balloc>
 800d454:	4681      	mov	r9, r0
 800d456:	b918      	cbnz	r0, 800d460 <__gethex+0x424>
 800d458:	4b1a      	ldr	r3, [pc, #104]	; (800d4c4 <__gethex+0x488>)
 800d45a:	4602      	mov	r2, r0
 800d45c:	2184      	movs	r1, #132	; 0x84
 800d45e:	e6a8      	b.n	800d1b2 <__gethex+0x176>
 800d460:	6922      	ldr	r2, [r4, #16]
 800d462:	3202      	adds	r2, #2
 800d464:	f104 010c 	add.w	r1, r4, #12
 800d468:	0092      	lsls	r2, r2, #2
 800d46a:	300c      	adds	r0, #12
 800d46c:	f7fd f81a 	bl	800a4a4 <memcpy>
 800d470:	4621      	mov	r1, r4
 800d472:	ee18 0a10 	vmov	r0, s16
 800d476:	f000 f95d 	bl	800d734 <_Bfree>
 800d47a:	464c      	mov	r4, r9
 800d47c:	6923      	ldr	r3, [r4, #16]
 800d47e:	1c5a      	adds	r2, r3, #1
 800d480:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d484:	6122      	str	r2, [r4, #16]
 800d486:	2201      	movs	r2, #1
 800d488:	615a      	str	r2, [r3, #20]
 800d48a:	e7bb      	b.n	800d404 <__gethex+0x3c8>
 800d48c:	6922      	ldr	r2, [r4, #16]
 800d48e:	455a      	cmp	r2, fp
 800d490:	dd0b      	ble.n	800d4aa <__gethex+0x46e>
 800d492:	2101      	movs	r1, #1
 800d494:	4620      	mov	r0, r4
 800d496:	f7ff fd69 	bl	800cf6c <rshift>
 800d49a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d49e:	3501      	adds	r5, #1
 800d4a0:	42ab      	cmp	r3, r5
 800d4a2:	f6ff aed0 	blt.w	800d246 <__gethex+0x20a>
 800d4a6:	2701      	movs	r7, #1
 800d4a8:	e7c0      	b.n	800d42c <__gethex+0x3f0>
 800d4aa:	f016 061f 	ands.w	r6, r6, #31
 800d4ae:	d0fa      	beq.n	800d4a6 <__gethex+0x46a>
 800d4b0:	4453      	add	r3, sl
 800d4b2:	f1c6 0620 	rsb	r6, r6, #32
 800d4b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d4ba:	f000 f9ed 	bl	800d898 <__hi0bits>
 800d4be:	42b0      	cmp	r0, r6
 800d4c0:	dbe7      	blt.n	800d492 <__gethex+0x456>
 800d4c2:	e7f0      	b.n	800d4a6 <__gethex+0x46a>
 800d4c4:	0800fed8 	.word	0x0800fed8

0800d4c8 <L_shift>:
 800d4c8:	f1c2 0208 	rsb	r2, r2, #8
 800d4cc:	0092      	lsls	r2, r2, #2
 800d4ce:	b570      	push	{r4, r5, r6, lr}
 800d4d0:	f1c2 0620 	rsb	r6, r2, #32
 800d4d4:	6843      	ldr	r3, [r0, #4]
 800d4d6:	6804      	ldr	r4, [r0, #0]
 800d4d8:	fa03 f506 	lsl.w	r5, r3, r6
 800d4dc:	432c      	orrs	r4, r5
 800d4de:	40d3      	lsrs	r3, r2
 800d4e0:	6004      	str	r4, [r0, #0]
 800d4e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d4e6:	4288      	cmp	r0, r1
 800d4e8:	d3f4      	bcc.n	800d4d4 <L_shift+0xc>
 800d4ea:	bd70      	pop	{r4, r5, r6, pc}

0800d4ec <__match>:
 800d4ec:	b530      	push	{r4, r5, lr}
 800d4ee:	6803      	ldr	r3, [r0, #0]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4f6:	b914      	cbnz	r4, 800d4fe <__match+0x12>
 800d4f8:	6003      	str	r3, [r0, #0]
 800d4fa:	2001      	movs	r0, #1
 800d4fc:	bd30      	pop	{r4, r5, pc}
 800d4fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d502:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d506:	2d19      	cmp	r5, #25
 800d508:	bf98      	it	ls
 800d50a:	3220      	addls	r2, #32
 800d50c:	42a2      	cmp	r2, r4
 800d50e:	d0f0      	beq.n	800d4f2 <__match+0x6>
 800d510:	2000      	movs	r0, #0
 800d512:	e7f3      	b.n	800d4fc <__match+0x10>

0800d514 <__hexnan>:
 800d514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d518:	680b      	ldr	r3, [r1, #0]
 800d51a:	115e      	asrs	r6, r3, #5
 800d51c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d520:	f013 031f 	ands.w	r3, r3, #31
 800d524:	b087      	sub	sp, #28
 800d526:	bf18      	it	ne
 800d528:	3604      	addne	r6, #4
 800d52a:	2500      	movs	r5, #0
 800d52c:	1f37      	subs	r7, r6, #4
 800d52e:	4690      	mov	r8, r2
 800d530:	6802      	ldr	r2, [r0, #0]
 800d532:	9301      	str	r3, [sp, #4]
 800d534:	4682      	mov	sl, r0
 800d536:	f846 5c04 	str.w	r5, [r6, #-4]
 800d53a:	46b9      	mov	r9, r7
 800d53c:	463c      	mov	r4, r7
 800d53e:	9502      	str	r5, [sp, #8]
 800d540:	46ab      	mov	fp, r5
 800d542:	7851      	ldrb	r1, [r2, #1]
 800d544:	1c53      	adds	r3, r2, #1
 800d546:	9303      	str	r3, [sp, #12]
 800d548:	b341      	cbz	r1, 800d59c <__hexnan+0x88>
 800d54a:	4608      	mov	r0, r1
 800d54c:	9205      	str	r2, [sp, #20]
 800d54e:	9104      	str	r1, [sp, #16]
 800d550:	f7ff fd5e 	bl	800d010 <__hexdig_fun>
 800d554:	2800      	cmp	r0, #0
 800d556:	d14f      	bne.n	800d5f8 <__hexnan+0xe4>
 800d558:	9904      	ldr	r1, [sp, #16]
 800d55a:	9a05      	ldr	r2, [sp, #20]
 800d55c:	2920      	cmp	r1, #32
 800d55e:	d818      	bhi.n	800d592 <__hexnan+0x7e>
 800d560:	9b02      	ldr	r3, [sp, #8]
 800d562:	459b      	cmp	fp, r3
 800d564:	dd13      	ble.n	800d58e <__hexnan+0x7a>
 800d566:	454c      	cmp	r4, r9
 800d568:	d206      	bcs.n	800d578 <__hexnan+0x64>
 800d56a:	2d07      	cmp	r5, #7
 800d56c:	dc04      	bgt.n	800d578 <__hexnan+0x64>
 800d56e:	462a      	mov	r2, r5
 800d570:	4649      	mov	r1, r9
 800d572:	4620      	mov	r0, r4
 800d574:	f7ff ffa8 	bl	800d4c8 <L_shift>
 800d578:	4544      	cmp	r4, r8
 800d57a:	d950      	bls.n	800d61e <__hexnan+0x10a>
 800d57c:	2300      	movs	r3, #0
 800d57e:	f1a4 0904 	sub.w	r9, r4, #4
 800d582:	f844 3c04 	str.w	r3, [r4, #-4]
 800d586:	f8cd b008 	str.w	fp, [sp, #8]
 800d58a:	464c      	mov	r4, r9
 800d58c:	461d      	mov	r5, r3
 800d58e:	9a03      	ldr	r2, [sp, #12]
 800d590:	e7d7      	b.n	800d542 <__hexnan+0x2e>
 800d592:	2929      	cmp	r1, #41	; 0x29
 800d594:	d156      	bne.n	800d644 <__hexnan+0x130>
 800d596:	3202      	adds	r2, #2
 800d598:	f8ca 2000 	str.w	r2, [sl]
 800d59c:	f1bb 0f00 	cmp.w	fp, #0
 800d5a0:	d050      	beq.n	800d644 <__hexnan+0x130>
 800d5a2:	454c      	cmp	r4, r9
 800d5a4:	d206      	bcs.n	800d5b4 <__hexnan+0xa0>
 800d5a6:	2d07      	cmp	r5, #7
 800d5a8:	dc04      	bgt.n	800d5b4 <__hexnan+0xa0>
 800d5aa:	462a      	mov	r2, r5
 800d5ac:	4649      	mov	r1, r9
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f7ff ff8a 	bl	800d4c8 <L_shift>
 800d5b4:	4544      	cmp	r4, r8
 800d5b6:	d934      	bls.n	800d622 <__hexnan+0x10e>
 800d5b8:	f1a8 0204 	sub.w	r2, r8, #4
 800d5bc:	4623      	mov	r3, r4
 800d5be:	f853 1b04 	ldr.w	r1, [r3], #4
 800d5c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d5c6:	429f      	cmp	r7, r3
 800d5c8:	d2f9      	bcs.n	800d5be <__hexnan+0xaa>
 800d5ca:	1b3b      	subs	r3, r7, r4
 800d5cc:	f023 0303 	bic.w	r3, r3, #3
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	3401      	adds	r4, #1
 800d5d4:	3e03      	subs	r6, #3
 800d5d6:	42b4      	cmp	r4, r6
 800d5d8:	bf88      	it	hi
 800d5da:	2304      	movhi	r3, #4
 800d5dc:	4443      	add	r3, r8
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f843 2b04 	str.w	r2, [r3], #4
 800d5e4:	429f      	cmp	r7, r3
 800d5e6:	d2fb      	bcs.n	800d5e0 <__hexnan+0xcc>
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	b91b      	cbnz	r3, 800d5f4 <__hexnan+0xe0>
 800d5ec:	4547      	cmp	r7, r8
 800d5ee:	d127      	bne.n	800d640 <__hexnan+0x12c>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	603b      	str	r3, [r7, #0]
 800d5f4:	2005      	movs	r0, #5
 800d5f6:	e026      	b.n	800d646 <__hexnan+0x132>
 800d5f8:	3501      	adds	r5, #1
 800d5fa:	2d08      	cmp	r5, #8
 800d5fc:	f10b 0b01 	add.w	fp, fp, #1
 800d600:	dd06      	ble.n	800d610 <__hexnan+0xfc>
 800d602:	4544      	cmp	r4, r8
 800d604:	d9c3      	bls.n	800d58e <__hexnan+0x7a>
 800d606:	2300      	movs	r3, #0
 800d608:	f844 3c04 	str.w	r3, [r4, #-4]
 800d60c:	2501      	movs	r5, #1
 800d60e:	3c04      	subs	r4, #4
 800d610:	6822      	ldr	r2, [r4, #0]
 800d612:	f000 000f 	and.w	r0, r0, #15
 800d616:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d61a:	6022      	str	r2, [r4, #0]
 800d61c:	e7b7      	b.n	800d58e <__hexnan+0x7a>
 800d61e:	2508      	movs	r5, #8
 800d620:	e7b5      	b.n	800d58e <__hexnan+0x7a>
 800d622:	9b01      	ldr	r3, [sp, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d0df      	beq.n	800d5e8 <__hexnan+0xd4>
 800d628:	f04f 32ff 	mov.w	r2, #4294967295
 800d62c:	f1c3 0320 	rsb	r3, r3, #32
 800d630:	fa22 f303 	lsr.w	r3, r2, r3
 800d634:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d638:	401a      	ands	r2, r3
 800d63a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d63e:	e7d3      	b.n	800d5e8 <__hexnan+0xd4>
 800d640:	3f04      	subs	r7, #4
 800d642:	e7d1      	b.n	800d5e8 <__hexnan+0xd4>
 800d644:	2004      	movs	r0, #4
 800d646:	b007      	add	sp, #28
 800d648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d64c <_localeconv_r>:
 800d64c:	4800      	ldr	r0, [pc, #0]	; (800d650 <_localeconv_r+0x4>)
 800d64e:	4770      	bx	lr
 800d650:	20000254 	.word	0x20000254

0800d654 <_lseek_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d07      	ldr	r5, [pc, #28]	; (800d674 <_lseek_r+0x20>)
 800d658:	4604      	mov	r4, r0
 800d65a:	4608      	mov	r0, r1
 800d65c:	4611      	mov	r1, r2
 800d65e:	2200      	movs	r2, #0
 800d660:	602a      	str	r2, [r5, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	f7f4 ff9c 	bl	80025a0 <_lseek>
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	d102      	bne.n	800d672 <_lseek_r+0x1e>
 800d66c:	682b      	ldr	r3, [r5, #0]
 800d66e:	b103      	cbz	r3, 800d672 <_lseek_r+0x1e>
 800d670:	6023      	str	r3, [r4, #0]
 800d672:	bd38      	pop	{r3, r4, r5, pc}
 800d674:	20002e34 	.word	0x20002e34

0800d678 <__ascii_mbtowc>:
 800d678:	b082      	sub	sp, #8
 800d67a:	b901      	cbnz	r1, 800d67e <__ascii_mbtowc+0x6>
 800d67c:	a901      	add	r1, sp, #4
 800d67e:	b142      	cbz	r2, 800d692 <__ascii_mbtowc+0x1a>
 800d680:	b14b      	cbz	r3, 800d696 <__ascii_mbtowc+0x1e>
 800d682:	7813      	ldrb	r3, [r2, #0]
 800d684:	600b      	str	r3, [r1, #0]
 800d686:	7812      	ldrb	r2, [r2, #0]
 800d688:	1e10      	subs	r0, r2, #0
 800d68a:	bf18      	it	ne
 800d68c:	2001      	movne	r0, #1
 800d68e:	b002      	add	sp, #8
 800d690:	4770      	bx	lr
 800d692:	4610      	mov	r0, r2
 800d694:	e7fb      	b.n	800d68e <__ascii_mbtowc+0x16>
 800d696:	f06f 0001 	mvn.w	r0, #1
 800d69a:	e7f8      	b.n	800d68e <__ascii_mbtowc+0x16>

0800d69c <__malloc_lock>:
 800d69c:	4801      	ldr	r0, [pc, #4]	; (800d6a4 <__malloc_lock+0x8>)
 800d69e:	f001 bc6b 	b.w	800ef78 <__retarget_lock_acquire_recursive>
 800d6a2:	bf00      	nop
 800d6a4:	20002e38 	.word	0x20002e38

0800d6a8 <__malloc_unlock>:
 800d6a8:	4801      	ldr	r0, [pc, #4]	; (800d6b0 <__malloc_unlock+0x8>)
 800d6aa:	f001 bc66 	b.w	800ef7a <__retarget_lock_release_recursive>
 800d6ae:	bf00      	nop
 800d6b0:	20002e38 	.word	0x20002e38

0800d6b4 <_Balloc>:
 800d6b4:	b570      	push	{r4, r5, r6, lr}
 800d6b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6b8:	4604      	mov	r4, r0
 800d6ba:	460d      	mov	r5, r1
 800d6bc:	b976      	cbnz	r6, 800d6dc <_Balloc+0x28>
 800d6be:	2010      	movs	r0, #16
 800d6c0:	f7fc fee0 	bl	800a484 <malloc>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	6260      	str	r0, [r4, #36]	; 0x24
 800d6c8:	b920      	cbnz	r0, 800d6d4 <_Balloc+0x20>
 800d6ca:	4b18      	ldr	r3, [pc, #96]	; (800d72c <_Balloc+0x78>)
 800d6cc:	4818      	ldr	r0, [pc, #96]	; (800d730 <_Balloc+0x7c>)
 800d6ce:	2166      	movs	r1, #102	; 0x66
 800d6d0:	f001 fa6a 	bl	800eba8 <__assert_func>
 800d6d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6d8:	6006      	str	r6, [r0, #0]
 800d6da:	60c6      	str	r6, [r0, #12]
 800d6dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6de:	68f3      	ldr	r3, [r6, #12]
 800d6e0:	b183      	cbz	r3, 800d704 <_Balloc+0x50>
 800d6e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6ea:	b9b8      	cbnz	r0, 800d71c <_Balloc+0x68>
 800d6ec:	2101      	movs	r1, #1
 800d6ee:	fa01 f605 	lsl.w	r6, r1, r5
 800d6f2:	1d72      	adds	r2, r6, #5
 800d6f4:	0092      	lsls	r2, r2, #2
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f000 fc9d 	bl	800e036 <_calloc_r>
 800d6fc:	b160      	cbz	r0, 800d718 <_Balloc+0x64>
 800d6fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d702:	e00e      	b.n	800d722 <_Balloc+0x6e>
 800d704:	2221      	movs	r2, #33	; 0x21
 800d706:	2104      	movs	r1, #4
 800d708:	4620      	mov	r0, r4
 800d70a:	f000 fc94 	bl	800e036 <_calloc_r>
 800d70e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d710:	60f0      	str	r0, [r6, #12]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1e4      	bne.n	800d6e2 <_Balloc+0x2e>
 800d718:	2000      	movs	r0, #0
 800d71a:	bd70      	pop	{r4, r5, r6, pc}
 800d71c:	6802      	ldr	r2, [r0, #0]
 800d71e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d722:	2300      	movs	r3, #0
 800d724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d728:	e7f7      	b.n	800d71a <_Balloc+0x66>
 800d72a:	bf00      	nop
 800d72c:	0800fe66 	.word	0x0800fe66
 800d730:	0800ff64 	.word	0x0800ff64

0800d734 <_Bfree>:
 800d734:	b570      	push	{r4, r5, r6, lr}
 800d736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d738:	4605      	mov	r5, r0
 800d73a:	460c      	mov	r4, r1
 800d73c:	b976      	cbnz	r6, 800d75c <_Bfree+0x28>
 800d73e:	2010      	movs	r0, #16
 800d740:	f7fc fea0 	bl	800a484 <malloc>
 800d744:	4602      	mov	r2, r0
 800d746:	6268      	str	r0, [r5, #36]	; 0x24
 800d748:	b920      	cbnz	r0, 800d754 <_Bfree+0x20>
 800d74a:	4b09      	ldr	r3, [pc, #36]	; (800d770 <_Bfree+0x3c>)
 800d74c:	4809      	ldr	r0, [pc, #36]	; (800d774 <_Bfree+0x40>)
 800d74e:	218a      	movs	r1, #138	; 0x8a
 800d750:	f001 fa2a 	bl	800eba8 <__assert_func>
 800d754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d758:	6006      	str	r6, [r0, #0]
 800d75a:	60c6      	str	r6, [r0, #12]
 800d75c:	b13c      	cbz	r4, 800d76e <_Bfree+0x3a>
 800d75e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d760:	6862      	ldr	r2, [r4, #4]
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d768:	6021      	str	r1, [r4, #0]
 800d76a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d76e:	bd70      	pop	{r4, r5, r6, pc}
 800d770:	0800fe66 	.word	0x0800fe66
 800d774:	0800ff64 	.word	0x0800ff64

0800d778 <__multadd>:
 800d778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d77c:	690d      	ldr	r5, [r1, #16]
 800d77e:	4607      	mov	r7, r0
 800d780:	460c      	mov	r4, r1
 800d782:	461e      	mov	r6, r3
 800d784:	f101 0c14 	add.w	ip, r1, #20
 800d788:	2000      	movs	r0, #0
 800d78a:	f8dc 3000 	ldr.w	r3, [ip]
 800d78e:	b299      	uxth	r1, r3
 800d790:	fb02 6101 	mla	r1, r2, r1, r6
 800d794:	0c1e      	lsrs	r6, r3, #16
 800d796:	0c0b      	lsrs	r3, r1, #16
 800d798:	fb02 3306 	mla	r3, r2, r6, r3
 800d79c:	b289      	uxth	r1, r1
 800d79e:	3001      	adds	r0, #1
 800d7a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7a4:	4285      	cmp	r5, r0
 800d7a6:	f84c 1b04 	str.w	r1, [ip], #4
 800d7aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7ae:	dcec      	bgt.n	800d78a <__multadd+0x12>
 800d7b0:	b30e      	cbz	r6, 800d7f6 <__multadd+0x7e>
 800d7b2:	68a3      	ldr	r3, [r4, #8]
 800d7b4:	42ab      	cmp	r3, r5
 800d7b6:	dc19      	bgt.n	800d7ec <__multadd+0x74>
 800d7b8:	6861      	ldr	r1, [r4, #4]
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	3101      	adds	r1, #1
 800d7be:	f7ff ff79 	bl	800d6b4 <_Balloc>
 800d7c2:	4680      	mov	r8, r0
 800d7c4:	b928      	cbnz	r0, 800d7d2 <__multadd+0x5a>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	4b0c      	ldr	r3, [pc, #48]	; (800d7fc <__multadd+0x84>)
 800d7ca:	480d      	ldr	r0, [pc, #52]	; (800d800 <__multadd+0x88>)
 800d7cc:	21b5      	movs	r1, #181	; 0xb5
 800d7ce:	f001 f9eb 	bl	800eba8 <__assert_func>
 800d7d2:	6922      	ldr	r2, [r4, #16]
 800d7d4:	3202      	adds	r2, #2
 800d7d6:	f104 010c 	add.w	r1, r4, #12
 800d7da:	0092      	lsls	r2, r2, #2
 800d7dc:	300c      	adds	r0, #12
 800d7de:	f7fc fe61 	bl	800a4a4 <memcpy>
 800d7e2:	4621      	mov	r1, r4
 800d7e4:	4638      	mov	r0, r7
 800d7e6:	f7ff ffa5 	bl	800d734 <_Bfree>
 800d7ea:	4644      	mov	r4, r8
 800d7ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7f0:	3501      	adds	r5, #1
 800d7f2:	615e      	str	r6, [r3, #20]
 800d7f4:	6125      	str	r5, [r4, #16]
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7fc:	0800fed8 	.word	0x0800fed8
 800d800:	0800ff64 	.word	0x0800ff64

0800d804 <__s2b>:
 800d804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d808:	460c      	mov	r4, r1
 800d80a:	4615      	mov	r5, r2
 800d80c:	461f      	mov	r7, r3
 800d80e:	2209      	movs	r2, #9
 800d810:	3308      	adds	r3, #8
 800d812:	4606      	mov	r6, r0
 800d814:	fb93 f3f2 	sdiv	r3, r3, r2
 800d818:	2100      	movs	r1, #0
 800d81a:	2201      	movs	r2, #1
 800d81c:	429a      	cmp	r2, r3
 800d81e:	db09      	blt.n	800d834 <__s2b+0x30>
 800d820:	4630      	mov	r0, r6
 800d822:	f7ff ff47 	bl	800d6b4 <_Balloc>
 800d826:	b940      	cbnz	r0, 800d83a <__s2b+0x36>
 800d828:	4602      	mov	r2, r0
 800d82a:	4b19      	ldr	r3, [pc, #100]	; (800d890 <__s2b+0x8c>)
 800d82c:	4819      	ldr	r0, [pc, #100]	; (800d894 <__s2b+0x90>)
 800d82e:	21ce      	movs	r1, #206	; 0xce
 800d830:	f001 f9ba 	bl	800eba8 <__assert_func>
 800d834:	0052      	lsls	r2, r2, #1
 800d836:	3101      	adds	r1, #1
 800d838:	e7f0      	b.n	800d81c <__s2b+0x18>
 800d83a:	9b08      	ldr	r3, [sp, #32]
 800d83c:	6143      	str	r3, [r0, #20]
 800d83e:	2d09      	cmp	r5, #9
 800d840:	f04f 0301 	mov.w	r3, #1
 800d844:	6103      	str	r3, [r0, #16]
 800d846:	dd16      	ble.n	800d876 <__s2b+0x72>
 800d848:	f104 0909 	add.w	r9, r4, #9
 800d84c:	46c8      	mov	r8, r9
 800d84e:	442c      	add	r4, r5
 800d850:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d854:	4601      	mov	r1, r0
 800d856:	3b30      	subs	r3, #48	; 0x30
 800d858:	220a      	movs	r2, #10
 800d85a:	4630      	mov	r0, r6
 800d85c:	f7ff ff8c 	bl	800d778 <__multadd>
 800d860:	45a0      	cmp	r8, r4
 800d862:	d1f5      	bne.n	800d850 <__s2b+0x4c>
 800d864:	f1a5 0408 	sub.w	r4, r5, #8
 800d868:	444c      	add	r4, r9
 800d86a:	1b2d      	subs	r5, r5, r4
 800d86c:	1963      	adds	r3, r4, r5
 800d86e:	42bb      	cmp	r3, r7
 800d870:	db04      	blt.n	800d87c <__s2b+0x78>
 800d872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d876:	340a      	adds	r4, #10
 800d878:	2509      	movs	r5, #9
 800d87a:	e7f6      	b.n	800d86a <__s2b+0x66>
 800d87c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d880:	4601      	mov	r1, r0
 800d882:	3b30      	subs	r3, #48	; 0x30
 800d884:	220a      	movs	r2, #10
 800d886:	4630      	mov	r0, r6
 800d888:	f7ff ff76 	bl	800d778 <__multadd>
 800d88c:	e7ee      	b.n	800d86c <__s2b+0x68>
 800d88e:	bf00      	nop
 800d890:	0800fed8 	.word	0x0800fed8
 800d894:	0800ff64 	.word	0x0800ff64

0800d898 <__hi0bits>:
 800d898:	0c03      	lsrs	r3, r0, #16
 800d89a:	041b      	lsls	r3, r3, #16
 800d89c:	b9d3      	cbnz	r3, 800d8d4 <__hi0bits+0x3c>
 800d89e:	0400      	lsls	r0, r0, #16
 800d8a0:	2310      	movs	r3, #16
 800d8a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8a6:	bf04      	itt	eq
 800d8a8:	0200      	lsleq	r0, r0, #8
 800d8aa:	3308      	addeq	r3, #8
 800d8ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8b0:	bf04      	itt	eq
 800d8b2:	0100      	lsleq	r0, r0, #4
 800d8b4:	3304      	addeq	r3, #4
 800d8b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8ba:	bf04      	itt	eq
 800d8bc:	0080      	lsleq	r0, r0, #2
 800d8be:	3302      	addeq	r3, #2
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	db05      	blt.n	800d8d0 <__hi0bits+0x38>
 800d8c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d8c8:	f103 0301 	add.w	r3, r3, #1
 800d8cc:	bf08      	it	eq
 800d8ce:	2320      	moveq	r3, #32
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	4770      	bx	lr
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	e7e4      	b.n	800d8a2 <__hi0bits+0xa>

0800d8d8 <__lo0bits>:
 800d8d8:	6803      	ldr	r3, [r0, #0]
 800d8da:	f013 0207 	ands.w	r2, r3, #7
 800d8de:	4601      	mov	r1, r0
 800d8e0:	d00b      	beq.n	800d8fa <__lo0bits+0x22>
 800d8e2:	07da      	lsls	r2, r3, #31
 800d8e4:	d423      	bmi.n	800d92e <__lo0bits+0x56>
 800d8e6:	0798      	lsls	r0, r3, #30
 800d8e8:	bf49      	itett	mi
 800d8ea:	085b      	lsrmi	r3, r3, #1
 800d8ec:	089b      	lsrpl	r3, r3, #2
 800d8ee:	2001      	movmi	r0, #1
 800d8f0:	600b      	strmi	r3, [r1, #0]
 800d8f2:	bf5c      	itt	pl
 800d8f4:	600b      	strpl	r3, [r1, #0]
 800d8f6:	2002      	movpl	r0, #2
 800d8f8:	4770      	bx	lr
 800d8fa:	b298      	uxth	r0, r3
 800d8fc:	b9a8      	cbnz	r0, 800d92a <__lo0bits+0x52>
 800d8fe:	0c1b      	lsrs	r3, r3, #16
 800d900:	2010      	movs	r0, #16
 800d902:	b2da      	uxtb	r2, r3
 800d904:	b90a      	cbnz	r2, 800d90a <__lo0bits+0x32>
 800d906:	3008      	adds	r0, #8
 800d908:	0a1b      	lsrs	r3, r3, #8
 800d90a:	071a      	lsls	r2, r3, #28
 800d90c:	bf04      	itt	eq
 800d90e:	091b      	lsreq	r3, r3, #4
 800d910:	3004      	addeq	r0, #4
 800d912:	079a      	lsls	r2, r3, #30
 800d914:	bf04      	itt	eq
 800d916:	089b      	lsreq	r3, r3, #2
 800d918:	3002      	addeq	r0, #2
 800d91a:	07da      	lsls	r2, r3, #31
 800d91c:	d403      	bmi.n	800d926 <__lo0bits+0x4e>
 800d91e:	085b      	lsrs	r3, r3, #1
 800d920:	f100 0001 	add.w	r0, r0, #1
 800d924:	d005      	beq.n	800d932 <__lo0bits+0x5a>
 800d926:	600b      	str	r3, [r1, #0]
 800d928:	4770      	bx	lr
 800d92a:	4610      	mov	r0, r2
 800d92c:	e7e9      	b.n	800d902 <__lo0bits+0x2a>
 800d92e:	2000      	movs	r0, #0
 800d930:	4770      	bx	lr
 800d932:	2020      	movs	r0, #32
 800d934:	4770      	bx	lr
	...

0800d938 <__i2b>:
 800d938:	b510      	push	{r4, lr}
 800d93a:	460c      	mov	r4, r1
 800d93c:	2101      	movs	r1, #1
 800d93e:	f7ff feb9 	bl	800d6b4 <_Balloc>
 800d942:	4602      	mov	r2, r0
 800d944:	b928      	cbnz	r0, 800d952 <__i2b+0x1a>
 800d946:	4b05      	ldr	r3, [pc, #20]	; (800d95c <__i2b+0x24>)
 800d948:	4805      	ldr	r0, [pc, #20]	; (800d960 <__i2b+0x28>)
 800d94a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d94e:	f001 f92b 	bl	800eba8 <__assert_func>
 800d952:	2301      	movs	r3, #1
 800d954:	6144      	str	r4, [r0, #20]
 800d956:	6103      	str	r3, [r0, #16]
 800d958:	bd10      	pop	{r4, pc}
 800d95a:	bf00      	nop
 800d95c:	0800fed8 	.word	0x0800fed8
 800d960:	0800ff64 	.word	0x0800ff64

0800d964 <__multiply>:
 800d964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d968:	4691      	mov	r9, r2
 800d96a:	690a      	ldr	r2, [r1, #16]
 800d96c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d970:	429a      	cmp	r2, r3
 800d972:	bfb8      	it	lt
 800d974:	460b      	movlt	r3, r1
 800d976:	460c      	mov	r4, r1
 800d978:	bfbc      	itt	lt
 800d97a:	464c      	movlt	r4, r9
 800d97c:	4699      	movlt	r9, r3
 800d97e:	6927      	ldr	r7, [r4, #16]
 800d980:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d984:	68a3      	ldr	r3, [r4, #8]
 800d986:	6861      	ldr	r1, [r4, #4]
 800d988:	eb07 060a 	add.w	r6, r7, sl
 800d98c:	42b3      	cmp	r3, r6
 800d98e:	b085      	sub	sp, #20
 800d990:	bfb8      	it	lt
 800d992:	3101      	addlt	r1, #1
 800d994:	f7ff fe8e 	bl	800d6b4 <_Balloc>
 800d998:	b930      	cbnz	r0, 800d9a8 <__multiply+0x44>
 800d99a:	4602      	mov	r2, r0
 800d99c:	4b44      	ldr	r3, [pc, #272]	; (800dab0 <__multiply+0x14c>)
 800d99e:	4845      	ldr	r0, [pc, #276]	; (800dab4 <__multiply+0x150>)
 800d9a0:	f240 115d 	movw	r1, #349	; 0x15d
 800d9a4:	f001 f900 	bl	800eba8 <__assert_func>
 800d9a8:	f100 0514 	add.w	r5, r0, #20
 800d9ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9b0:	462b      	mov	r3, r5
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4543      	cmp	r3, r8
 800d9b6:	d321      	bcc.n	800d9fc <__multiply+0x98>
 800d9b8:	f104 0314 	add.w	r3, r4, #20
 800d9bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9c0:	f109 0314 	add.w	r3, r9, #20
 800d9c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d9c8:	9202      	str	r2, [sp, #8]
 800d9ca:	1b3a      	subs	r2, r7, r4
 800d9cc:	3a15      	subs	r2, #21
 800d9ce:	f022 0203 	bic.w	r2, r2, #3
 800d9d2:	3204      	adds	r2, #4
 800d9d4:	f104 0115 	add.w	r1, r4, #21
 800d9d8:	428f      	cmp	r7, r1
 800d9da:	bf38      	it	cc
 800d9dc:	2204      	movcc	r2, #4
 800d9de:	9201      	str	r2, [sp, #4]
 800d9e0:	9a02      	ldr	r2, [sp, #8]
 800d9e2:	9303      	str	r3, [sp, #12]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d80c      	bhi.n	800da02 <__multiply+0x9e>
 800d9e8:	2e00      	cmp	r6, #0
 800d9ea:	dd03      	ble.n	800d9f4 <__multiply+0x90>
 800d9ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d05a      	beq.n	800daaa <__multiply+0x146>
 800d9f4:	6106      	str	r6, [r0, #16]
 800d9f6:	b005      	add	sp, #20
 800d9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fc:	f843 2b04 	str.w	r2, [r3], #4
 800da00:	e7d8      	b.n	800d9b4 <__multiply+0x50>
 800da02:	f8b3 a000 	ldrh.w	sl, [r3]
 800da06:	f1ba 0f00 	cmp.w	sl, #0
 800da0a:	d024      	beq.n	800da56 <__multiply+0xf2>
 800da0c:	f104 0e14 	add.w	lr, r4, #20
 800da10:	46a9      	mov	r9, r5
 800da12:	f04f 0c00 	mov.w	ip, #0
 800da16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da1a:	f8d9 1000 	ldr.w	r1, [r9]
 800da1e:	fa1f fb82 	uxth.w	fp, r2
 800da22:	b289      	uxth	r1, r1
 800da24:	fb0a 110b 	mla	r1, sl, fp, r1
 800da28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800da2c:	f8d9 2000 	ldr.w	r2, [r9]
 800da30:	4461      	add	r1, ip
 800da32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da36:	fb0a c20b 	mla	r2, sl, fp, ip
 800da3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da3e:	b289      	uxth	r1, r1
 800da40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da44:	4577      	cmp	r7, lr
 800da46:	f849 1b04 	str.w	r1, [r9], #4
 800da4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da4e:	d8e2      	bhi.n	800da16 <__multiply+0xb2>
 800da50:	9a01      	ldr	r2, [sp, #4]
 800da52:	f845 c002 	str.w	ip, [r5, r2]
 800da56:	9a03      	ldr	r2, [sp, #12]
 800da58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da5c:	3304      	adds	r3, #4
 800da5e:	f1b9 0f00 	cmp.w	r9, #0
 800da62:	d020      	beq.n	800daa6 <__multiply+0x142>
 800da64:	6829      	ldr	r1, [r5, #0]
 800da66:	f104 0c14 	add.w	ip, r4, #20
 800da6a:	46ae      	mov	lr, r5
 800da6c:	f04f 0a00 	mov.w	sl, #0
 800da70:	f8bc b000 	ldrh.w	fp, [ip]
 800da74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800da78:	fb09 220b 	mla	r2, r9, fp, r2
 800da7c:	4492      	add	sl, r2
 800da7e:	b289      	uxth	r1, r1
 800da80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800da84:	f84e 1b04 	str.w	r1, [lr], #4
 800da88:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da8c:	f8be 1000 	ldrh.w	r1, [lr]
 800da90:	0c12      	lsrs	r2, r2, #16
 800da92:	fb09 1102 	mla	r1, r9, r2, r1
 800da96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800da9a:	4567      	cmp	r7, ip
 800da9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800daa0:	d8e6      	bhi.n	800da70 <__multiply+0x10c>
 800daa2:	9a01      	ldr	r2, [sp, #4]
 800daa4:	50a9      	str	r1, [r5, r2]
 800daa6:	3504      	adds	r5, #4
 800daa8:	e79a      	b.n	800d9e0 <__multiply+0x7c>
 800daaa:	3e01      	subs	r6, #1
 800daac:	e79c      	b.n	800d9e8 <__multiply+0x84>
 800daae:	bf00      	nop
 800dab0:	0800fed8 	.word	0x0800fed8
 800dab4:	0800ff64 	.word	0x0800ff64

0800dab8 <__pow5mult>:
 800dab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dabc:	4615      	mov	r5, r2
 800dabe:	f012 0203 	ands.w	r2, r2, #3
 800dac2:	4606      	mov	r6, r0
 800dac4:	460f      	mov	r7, r1
 800dac6:	d007      	beq.n	800dad8 <__pow5mult+0x20>
 800dac8:	4c25      	ldr	r4, [pc, #148]	; (800db60 <__pow5mult+0xa8>)
 800daca:	3a01      	subs	r2, #1
 800dacc:	2300      	movs	r3, #0
 800dace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dad2:	f7ff fe51 	bl	800d778 <__multadd>
 800dad6:	4607      	mov	r7, r0
 800dad8:	10ad      	asrs	r5, r5, #2
 800dada:	d03d      	beq.n	800db58 <__pow5mult+0xa0>
 800dadc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dade:	b97c      	cbnz	r4, 800db00 <__pow5mult+0x48>
 800dae0:	2010      	movs	r0, #16
 800dae2:	f7fc fccf 	bl	800a484 <malloc>
 800dae6:	4602      	mov	r2, r0
 800dae8:	6270      	str	r0, [r6, #36]	; 0x24
 800daea:	b928      	cbnz	r0, 800daf8 <__pow5mult+0x40>
 800daec:	4b1d      	ldr	r3, [pc, #116]	; (800db64 <__pow5mult+0xac>)
 800daee:	481e      	ldr	r0, [pc, #120]	; (800db68 <__pow5mult+0xb0>)
 800daf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800daf4:	f001 f858 	bl	800eba8 <__assert_func>
 800daf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dafc:	6004      	str	r4, [r0, #0]
 800dafe:	60c4      	str	r4, [r0, #12]
 800db00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db08:	b94c      	cbnz	r4, 800db1e <__pow5mult+0x66>
 800db0a:	f240 2171 	movw	r1, #625	; 0x271
 800db0e:	4630      	mov	r0, r6
 800db10:	f7ff ff12 	bl	800d938 <__i2b>
 800db14:	2300      	movs	r3, #0
 800db16:	f8c8 0008 	str.w	r0, [r8, #8]
 800db1a:	4604      	mov	r4, r0
 800db1c:	6003      	str	r3, [r0, #0]
 800db1e:	f04f 0900 	mov.w	r9, #0
 800db22:	07eb      	lsls	r3, r5, #31
 800db24:	d50a      	bpl.n	800db3c <__pow5mult+0x84>
 800db26:	4639      	mov	r1, r7
 800db28:	4622      	mov	r2, r4
 800db2a:	4630      	mov	r0, r6
 800db2c:	f7ff ff1a 	bl	800d964 <__multiply>
 800db30:	4639      	mov	r1, r7
 800db32:	4680      	mov	r8, r0
 800db34:	4630      	mov	r0, r6
 800db36:	f7ff fdfd 	bl	800d734 <_Bfree>
 800db3a:	4647      	mov	r7, r8
 800db3c:	106d      	asrs	r5, r5, #1
 800db3e:	d00b      	beq.n	800db58 <__pow5mult+0xa0>
 800db40:	6820      	ldr	r0, [r4, #0]
 800db42:	b938      	cbnz	r0, 800db54 <__pow5mult+0x9c>
 800db44:	4622      	mov	r2, r4
 800db46:	4621      	mov	r1, r4
 800db48:	4630      	mov	r0, r6
 800db4a:	f7ff ff0b 	bl	800d964 <__multiply>
 800db4e:	6020      	str	r0, [r4, #0]
 800db50:	f8c0 9000 	str.w	r9, [r0]
 800db54:	4604      	mov	r4, r0
 800db56:	e7e4      	b.n	800db22 <__pow5mult+0x6a>
 800db58:	4638      	mov	r0, r7
 800db5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db5e:	bf00      	nop
 800db60:	080100b0 	.word	0x080100b0
 800db64:	0800fe66 	.word	0x0800fe66
 800db68:	0800ff64 	.word	0x0800ff64

0800db6c <__lshift>:
 800db6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db70:	460c      	mov	r4, r1
 800db72:	6849      	ldr	r1, [r1, #4]
 800db74:	6923      	ldr	r3, [r4, #16]
 800db76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db7a:	68a3      	ldr	r3, [r4, #8]
 800db7c:	4607      	mov	r7, r0
 800db7e:	4691      	mov	r9, r2
 800db80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db84:	f108 0601 	add.w	r6, r8, #1
 800db88:	42b3      	cmp	r3, r6
 800db8a:	db0b      	blt.n	800dba4 <__lshift+0x38>
 800db8c:	4638      	mov	r0, r7
 800db8e:	f7ff fd91 	bl	800d6b4 <_Balloc>
 800db92:	4605      	mov	r5, r0
 800db94:	b948      	cbnz	r0, 800dbaa <__lshift+0x3e>
 800db96:	4602      	mov	r2, r0
 800db98:	4b2a      	ldr	r3, [pc, #168]	; (800dc44 <__lshift+0xd8>)
 800db9a:	482b      	ldr	r0, [pc, #172]	; (800dc48 <__lshift+0xdc>)
 800db9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dba0:	f001 f802 	bl	800eba8 <__assert_func>
 800dba4:	3101      	adds	r1, #1
 800dba6:	005b      	lsls	r3, r3, #1
 800dba8:	e7ee      	b.n	800db88 <__lshift+0x1c>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	f100 0114 	add.w	r1, r0, #20
 800dbb0:	f100 0210 	add.w	r2, r0, #16
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	4553      	cmp	r3, sl
 800dbb8:	db37      	blt.n	800dc2a <__lshift+0xbe>
 800dbba:	6920      	ldr	r0, [r4, #16]
 800dbbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbc0:	f104 0314 	add.w	r3, r4, #20
 800dbc4:	f019 091f 	ands.w	r9, r9, #31
 800dbc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dbd0:	d02f      	beq.n	800dc32 <__lshift+0xc6>
 800dbd2:	f1c9 0e20 	rsb	lr, r9, #32
 800dbd6:	468a      	mov	sl, r1
 800dbd8:	f04f 0c00 	mov.w	ip, #0
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	fa02 f209 	lsl.w	r2, r2, r9
 800dbe2:	ea42 020c 	orr.w	r2, r2, ip
 800dbe6:	f84a 2b04 	str.w	r2, [sl], #4
 800dbea:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbee:	4298      	cmp	r0, r3
 800dbf0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dbf4:	d8f2      	bhi.n	800dbdc <__lshift+0x70>
 800dbf6:	1b03      	subs	r3, r0, r4
 800dbf8:	3b15      	subs	r3, #21
 800dbfa:	f023 0303 	bic.w	r3, r3, #3
 800dbfe:	3304      	adds	r3, #4
 800dc00:	f104 0215 	add.w	r2, r4, #21
 800dc04:	4290      	cmp	r0, r2
 800dc06:	bf38      	it	cc
 800dc08:	2304      	movcc	r3, #4
 800dc0a:	f841 c003 	str.w	ip, [r1, r3]
 800dc0e:	f1bc 0f00 	cmp.w	ip, #0
 800dc12:	d001      	beq.n	800dc18 <__lshift+0xac>
 800dc14:	f108 0602 	add.w	r6, r8, #2
 800dc18:	3e01      	subs	r6, #1
 800dc1a:	4638      	mov	r0, r7
 800dc1c:	612e      	str	r6, [r5, #16]
 800dc1e:	4621      	mov	r1, r4
 800dc20:	f7ff fd88 	bl	800d734 <_Bfree>
 800dc24:	4628      	mov	r0, r5
 800dc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc2e:	3301      	adds	r3, #1
 800dc30:	e7c1      	b.n	800dbb6 <__lshift+0x4a>
 800dc32:	3904      	subs	r1, #4
 800dc34:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc38:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc3c:	4298      	cmp	r0, r3
 800dc3e:	d8f9      	bhi.n	800dc34 <__lshift+0xc8>
 800dc40:	e7ea      	b.n	800dc18 <__lshift+0xac>
 800dc42:	bf00      	nop
 800dc44:	0800fed8 	.word	0x0800fed8
 800dc48:	0800ff64 	.word	0x0800ff64

0800dc4c <__mcmp>:
 800dc4c:	b530      	push	{r4, r5, lr}
 800dc4e:	6902      	ldr	r2, [r0, #16]
 800dc50:	690c      	ldr	r4, [r1, #16]
 800dc52:	1b12      	subs	r2, r2, r4
 800dc54:	d10e      	bne.n	800dc74 <__mcmp+0x28>
 800dc56:	f100 0314 	add.w	r3, r0, #20
 800dc5a:	3114      	adds	r1, #20
 800dc5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc6c:	42a5      	cmp	r5, r4
 800dc6e:	d003      	beq.n	800dc78 <__mcmp+0x2c>
 800dc70:	d305      	bcc.n	800dc7e <__mcmp+0x32>
 800dc72:	2201      	movs	r2, #1
 800dc74:	4610      	mov	r0, r2
 800dc76:	bd30      	pop	{r4, r5, pc}
 800dc78:	4283      	cmp	r3, r0
 800dc7a:	d3f3      	bcc.n	800dc64 <__mcmp+0x18>
 800dc7c:	e7fa      	b.n	800dc74 <__mcmp+0x28>
 800dc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc82:	e7f7      	b.n	800dc74 <__mcmp+0x28>

0800dc84 <__mdiff>:
 800dc84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	460c      	mov	r4, r1
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	4611      	mov	r1, r2
 800dc8e:	4620      	mov	r0, r4
 800dc90:	4690      	mov	r8, r2
 800dc92:	f7ff ffdb 	bl	800dc4c <__mcmp>
 800dc96:	1e05      	subs	r5, r0, #0
 800dc98:	d110      	bne.n	800dcbc <__mdiff+0x38>
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f7ff fd09 	bl	800d6b4 <_Balloc>
 800dca2:	b930      	cbnz	r0, 800dcb2 <__mdiff+0x2e>
 800dca4:	4b3a      	ldr	r3, [pc, #232]	; (800dd90 <__mdiff+0x10c>)
 800dca6:	4602      	mov	r2, r0
 800dca8:	f240 2132 	movw	r1, #562	; 0x232
 800dcac:	4839      	ldr	r0, [pc, #228]	; (800dd94 <__mdiff+0x110>)
 800dcae:	f000 ff7b 	bl	800eba8 <__assert_func>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcbc:	bfa4      	itt	ge
 800dcbe:	4643      	movge	r3, r8
 800dcc0:	46a0      	movge	r8, r4
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dcc8:	bfa6      	itte	ge
 800dcca:	461c      	movge	r4, r3
 800dccc:	2500      	movge	r5, #0
 800dcce:	2501      	movlt	r5, #1
 800dcd0:	f7ff fcf0 	bl	800d6b4 <_Balloc>
 800dcd4:	b920      	cbnz	r0, 800dce0 <__mdiff+0x5c>
 800dcd6:	4b2e      	ldr	r3, [pc, #184]	; (800dd90 <__mdiff+0x10c>)
 800dcd8:	4602      	mov	r2, r0
 800dcda:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dcde:	e7e5      	b.n	800dcac <__mdiff+0x28>
 800dce0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dce4:	6926      	ldr	r6, [r4, #16]
 800dce6:	60c5      	str	r5, [r0, #12]
 800dce8:	f104 0914 	add.w	r9, r4, #20
 800dcec:	f108 0514 	add.w	r5, r8, #20
 800dcf0:	f100 0e14 	add.w	lr, r0, #20
 800dcf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dcf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dcfc:	f108 0210 	add.w	r2, r8, #16
 800dd00:	46f2      	mov	sl, lr
 800dd02:	2100      	movs	r1, #0
 800dd04:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd0c:	fa1f f883 	uxth.w	r8, r3
 800dd10:	fa11 f18b 	uxtah	r1, r1, fp
 800dd14:	0c1b      	lsrs	r3, r3, #16
 800dd16:	eba1 0808 	sub.w	r8, r1, r8
 800dd1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd22:	fa1f f888 	uxth.w	r8, r8
 800dd26:	1419      	asrs	r1, r3, #16
 800dd28:	454e      	cmp	r6, r9
 800dd2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd2e:	f84a 3b04 	str.w	r3, [sl], #4
 800dd32:	d8e7      	bhi.n	800dd04 <__mdiff+0x80>
 800dd34:	1b33      	subs	r3, r6, r4
 800dd36:	3b15      	subs	r3, #21
 800dd38:	f023 0303 	bic.w	r3, r3, #3
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	3415      	adds	r4, #21
 800dd40:	42a6      	cmp	r6, r4
 800dd42:	bf38      	it	cc
 800dd44:	2304      	movcc	r3, #4
 800dd46:	441d      	add	r5, r3
 800dd48:	4473      	add	r3, lr
 800dd4a:	469e      	mov	lr, r3
 800dd4c:	462e      	mov	r6, r5
 800dd4e:	4566      	cmp	r6, ip
 800dd50:	d30e      	bcc.n	800dd70 <__mdiff+0xec>
 800dd52:	f10c 0203 	add.w	r2, ip, #3
 800dd56:	1b52      	subs	r2, r2, r5
 800dd58:	f022 0203 	bic.w	r2, r2, #3
 800dd5c:	3d03      	subs	r5, #3
 800dd5e:	45ac      	cmp	ip, r5
 800dd60:	bf38      	it	cc
 800dd62:	2200      	movcc	r2, #0
 800dd64:	441a      	add	r2, r3
 800dd66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dd6a:	b17b      	cbz	r3, 800dd8c <__mdiff+0x108>
 800dd6c:	6107      	str	r7, [r0, #16]
 800dd6e:	e7a3      	b.n	800dcb8 <__mdiff+0x34>
 800dd70:	f856 8b04 	ldr.w	r8, [r6], #4
 800dd74:	fa11 f288 	uxtah	r2, r1, r8
 800dd78:	1414      	asrs	r4, r2, #16
 800dd7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dd7e:	b292      	uxth	r2, r2
 800dd80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dd84:	f84e 2b04 	str.w	r2, [lr], #4
 800dd88:	1421      	asrs	r1, r4, #16
 800dd8a:	e7e0      	b.n	800dd4e <__mdiff+0xca>
 800dd8c:	3f01      	subs	r7, #1
 800dd8e:	e7ea      	b.n	800dd66 <__mdiff+0xe2>
 800dd90:	0800fed8 	.word	0x0800fed8
 800dd94:	0800ff64 	.word	0x0800ff64

0800dd98 <__ulp>:
 800dd98:	b082      	sub	sp, #8
 800dd9a:	ed8d 0b00 	vstr	d0, [sp]
 800dd9e:	9b01      	ldr	r3, [sp, #4]
 800dda0:	4912      	ldr	r1, [pc, #72]	; (800ddec <__ulp+0x54>)
 800dda2:	4019      	ands	r1, r3
 800dda4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dda8:	2900      	cmp	r1, #0
 800ddaa:	dd05      	ble.n	800ddb8 <__ulp+0x20>
 800ddac:	2200      	movs	r2, #0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	ec43 2b10 	vmov	d0, r2, r3
 800ddb4:	b002      	add	sp, #8
 800ddb6:	4770      	bx	lr
 800ddb8:	4249      	negs	r1, r1
 800ddba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ddbe:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ddc2:	f04f 0200 	mov.w	r2, #0
 800ddc6:	f04f 0300 	mov.w	r3, #0
 800ddca:	da04      	bge.n	800ddd6 <__ulp+0x3e>
 800ddcc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ddd0:	fa41 f300 	asr.w	r3, r1, r0
 800ddd4:	e7ec      	b.n	800ddb0 <__ulp+0x18>
 800ddd6:	f1a0 0114 	sub.w	r1, r0, #20
 800ddda:	291e      	cmp	r1, #30
 800dddc:	bfda      	itte	le
 800ddde:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dde2:	fa20 f101 	lsrle.w	r1, r0, r1
 800dde6:	2101      	movgt	r1, #1
 800dde8:	460a      	mov	r2, r1
 800ddea:	e7e1      	b.n	800ddb0 <__ulp+0x18>
 800ddec:	7ff00000 	.word	0x7ff00000

0800ddf0 <__b2d>:
 800ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf2:	6905      	ldr	r5, [r0, #16]
 800ddf4:	f100 0714 	add.w	r7, r0, #20
 800ddf8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ddfc:	1f2e      	subs	r6, r5, #4
 800ddfe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800de02:	4620      	mov	r0, r4
 800de04:	f7ff fd48 	bl	800d898 <__hi0bits>
 800de08:	f1c0 0320 	rsb	r3, r0, #32
 800de0c:	280a      	cmp	r0, #10
 800de0e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800de8c <__b2d+0x9c>
 800de12:	600b      	str	r3, [r1, #0]
 800de14:	dc14      	bgt.n	800de40 <__b2d+0x50>
 800de16:	f1c0 0e0b 	rsb	lr, r0, #11
 800de1a:	fa24 f10e 	lsr.w	r1, r4, lr
 800de1e:	42b7      	cmp	r7, r6
 800de20:	ea41 030c 	orr.w	r3, r1, ip
 800de24:	bf34      	ite	cc
 800de26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de2a:	2100      	movcs	r1, #0
 800de2c:	3015      	adds	r0, #21
 800de2e:	fa04 f000 	lsl.w	r0, r4, r0
 800de32:	fa21 f10e 	lsr.w	r1, r1, lr
 800de36:	ea40 0201 	orr.w	r2, r0, r1
 800de3a:	ec43 2b10 	vmov	d0, r2, r3
 800de3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de40:	42b7      	cmp	r7, r6
 800de42:	bf3a      	itte	cc
 800de44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de48:	f1a5 0608 	subcc.w	r6, r5, #8
 800de4c:	2100      	movcs	r1, #0
 800de4e:	380b      	subs	r0, #11
 800de50:	d017      	beq.n	800de82 <__b2d+0x92>
 800de52:	f1c0 0c20 	rsb	ip, r0, #32
 800de56:	fa04 f500 	lsl.w	r5, r4, r0
 800de5a:	42be      	cmp	r6, r7
 800de5c:	fa21 f40c 	lsr.w	r4, r1, ip
 800de60:	ea45 0504 	orr.w	r5, r5, r4
 800de64:	bf8c      	ite	hi
 800de66:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800de6a:	2400      	movls	r4, #0
 800de6c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800de70:	fa01 f000 	lsl.w	r0, r1, r0
 800de74:	fa24 f40c 	lsr.w	r4, r4, ip
 800de78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800de7c:	ea40 0204 	orr.w	r2, r0, r4
 800de80:	e7db      	b.n	800de3a <__b2d+0x4a>
 800de82:	ea44 030c 	orr.w	r3, r4, ip
 800de86:	460a      	mov	r2, r1
 800de88:	e7d7      	b.n	800de3a <__b2d+0x4a>
 800de8a:	bf00      	nop
 800de8c:	3ff00000 	.word	0x3ff00000

0800de90 <__d2b>:
 800de90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de94:	4689      	mov	r9, r1
 800de96:	2101      	movs	r1, #1
 800de98:	ec57 6b10 	vmov	r6, r7, d0
 800de9c:	4690      	mov	r8, r2
 800de9e:	f7ff fc09 	bl	800d6b4 <_Balloc>
 800dea2:	4604      	mov	r4, r0
 800dea4:	b930      	cbnz	r0, 800deb4 <__d2b+0x24>
 800dea6:	4602      	mov	r2, r0
 800dea8:	4b25      	ldr	r3, [pc, #148]	; (800df40 <__d2b+0xb0>)
 800deaa:	4826      	ldr	r0, [pc, #152]	; (800df44 <__d2b+0xb4>)
 800deac:	f240 310a 	movw	r1, #778	; 0x30a
 800deb0:	f000 fe7a 	bl	800eba8 <__assert_func>
 800deb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800deb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800debc:	bb35      	cbnz	r5, 800df0c <__d2b+0x7c>
 800debe:	2e00      	cmp	r6, #0
 800dec0:	9301      	str	r3, [sp, #4]
 800dec2:	d028      	beq.n	800df16 <__d2b+0x86>
 800dec4:	4668      	mov	r0, sp
 800dec6:	9600      	str	r6, [sp, #0]
 800dec8:	f7ff fd06 	bl	800d8d8 <__lo0bits>
 800decc:	9900      	ldr	r1, [sp, #0]
 800dece:	b300      	cbz	r0, 800df12 <__d2b+0x82>
 800ded0:	9a01      	ldr	r2, [sp, #4]
 800ded2:	f1c0 0320 	rsb	r3, r0, #32
 800ded6:	fa02 f303 	lsl.w	r3, r2, r3
 800deda:	430b      	orrs	r3, r1
 800dedc:	40c2      	lsrs	r2, r0
 800dede:	6163      	str	r3, [r4, #20]
 800dee0:	9201      	str	r2, [sp, #4]
 800dee2:	9b01      	ldr	r3, [sp, #4]
 800dee4:	61a3      	str	r3, [r4, #24]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	bf14      	ite	ne
 800deea:	2202      	movne	r2, #2
 800deec:	2201      	moveq	r2, #1
 800deee:	6122      	str	r2, [r4, #16]
 800def0:	b1d5      	cbz	r5, 800df28 <__d2b+0x98>
 800def2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800def6:	4405      	add	r5, r0
 800def8:	f8c9 5000 	str.w	r5, [r9]
 800defc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df00:	f8c8 0000 	str.w	r0, [r8]
 800df04:	4620      	mov	r0, r4
 800df06:	b003      	add	sp, #12
 800df08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df10:	e7d5      	b.n	800debe <__d2b+0x2e>
 800df12:	6161      	str	r1, [r4, #20]
 800df14:	e7e5      	b.n	800dee2 <__d2b+0x52>
 800df16:	a801      	add	r0, sp, #4
 800df18:	f7ff fcde 	bl	800d8d8 <__lo0bits>
 800df1c:	9b01      	ldr	r3, [sp, #4]
 800df1e:	6163      	str	r3, [r4, #20]
 800df20:	2201      	movs	r2, #1
 800df22:	6122      	str	r2, [r4, #16]
 800df24:	3020      	adds	r0, #32
 800df26:	e7e3      	b.n	800def0 <__d2b+0x60>
 800df28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df30:	f8c9 0000 	str.w	r0, [r9]
 800df34:	6918      	ldr	r0, [r3, #16]
 800df36:	f7ff fcaf 	bl	800d898 <__hi0bits>
 800df3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df3e:	e7df      	b.n	800df00 <__d2b+0x70>
 800df40:	0800fed8 	.word	0x0800fed8
 800df44:	0800ff64 	.word	0x0800ff64

0800df48 <__ratio>:
 800df48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4c:	4688      	mov	r8, r1
 800df4e:	4669      	mov	r1, sp
 800df50:	4681      	mov	r9, r0
 800df52:	f7ff ff4d 	bl	800ddf0 <__b2d>
 800df56:	a901      	add	r1, sp, #4
 800df58:	4640      	mov	r0, r8
 800df5a:	ec55 4b10 	vmov	r4, r5, d0
 800df5e:	f7ff ff47 	bl	800ddf0 <__b2d>
 800df62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800df6a:	eba3 0c02 	sub.w	ip, r3, r2
 800df6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df72:	1a9b      	subs	r3, r3, r2
 800df74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800df78:	ec51 0b10 	vmov	r0, r1, d0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bfd6      	itet	le
 800df80:	460a      	movle	r2, r1
 800df82:	462a      	movgt	r2, r5
 800df84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df88:	468b      	mov	fp, r1
 800df8a:	462f      	mov	r7, r5
 800df8c:	bfd4      	ite	le
 800df8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800df92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800df96:	4620      	mov	r0, r4
 800df98:	ee10 2a10 	vmov	r2, s0
 800df9c:	465b      	mov	r3, fp
 800df9e:	4639      	mov	r1, r7
 800dfa0:	f7f2 fc54 	bl	800084c <__aeabi_ddiv>
 800dfa4:	ec41 0b10 	vmov	d0, r0, r1
 800dfa8:	b003      	add	sp, #12
 800dfaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfae <__copybits>:
 800dfae:	3901      	subs	r1, #1
 800dfb0:	b570      	push	{r4, r5, r6, lr}
 800dfb2:	1149      	asrs	r1, r1, #5
 800dfb4:	6914      	ldr	r4, [r2, #16]
 800dfb6:	3101      	adds	r1, #1
 800dfb8:	f102 0314 	add.w	r3, r2, #20
 800dfbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dfc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfc4:	1f05      	subs	r5, r0, #4
 800dfc6:	42a3      	cmp	r3, r4
 800dfc8:	d30c      	bcc.n	800dfe4 <__copybits+0x36>
 800dfca:	1aa3      	subs	r3, r4, r2
 800dfcc:	3b11      	subs	r3, #17
 800dfce:	f023 0303 	bic.w	r3, r3, #3
 800dfd2:	3211      	adds	r2, #17
 800dfd4:	42a2      	cmp	r2, r4
 800dfd6:	bf88      	it	hi
 800dfd8:	2300      	movhi	r3, #0
 800dfda:	4418      	add	r0, r3
 800dfdc:	2300      	movs	r3, #0
 800dfde:	4288      	cmp	r0, r1
 800dfe0:	d305      	bcc.n	800dfee <__copybits+0x40>
 800dfe2:	bd70      	pop	{r4, r5, r6, pc}
 800dfe4:	f853 6b04 	ldr.w	r6, [r3], #4
 800dfe8:	f845 6f04 	str.w	r6, [r5, #4]!
 800dfec:	e7eb      	b.n	800dfc6 <__copybits+0x18>
 800dfee:	f840 3b04 	str.w	r3, [r0], #4
 800dff2:	e7f4      	b.n	800dfde <__copybits+0x30>

0800dff4 <__any_on>:
 800dff4:	f100 0214 	add.w	r2, r0, #20
 800dff8:	6900      	ldr	r0, [r0, #16]
 800dffa:	114b      	asrs	r3, r1, #5
 800dffc:	4298      	cmp	r0, r3
 800dffe:	b510      	push	{r4, lr}
 800e000:	db11      	blt.n	800e026 <__any_on+0x32>
 800e002:	dd0a      	ble.n	800e01a <__any_on+0x26>
 800e004:	f011 011f 	ands.w	r1, r1, #31
 800e008:	d007      	beq.n	800e01a <__any_on+0x26>
 800e00a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e00e:	fa24 f001 	lsr.w	r0, r4, r1
 800e012:	fa00 f101 	lsl.w	r1, r0, r1
 800e016:	428c      	cmp	r4, r1
 800e018:	d10b      	bne.n	800e032 <__any_on+0x3e>
 800e01a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e01e:	4293      	cmp	r3, r2
 800e020:	d803      	bhi.n	800e02a <__any_on+0x36>
 800e022:	2000      	movs	r0, #0
 800e024:	bd10      	pop	{r4, pc}
 800e026:	4603      	mov	r3, r0
 800e028:	e7f7      	b.n	800e01a <__any_on+0x26>
 800e02a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e02e:	2900      	cmp	r1, #0
 800e030:	d0f5      	beq.n	800e01e <__any_on+0x2a>
 800e032:	2001      	movs	r0, #1
 800e034:	e7f6      	b.n	800e024 <__any_on+0x30>

0800e036 <_calloc_r>:
 800e036:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e038:	fba1 2402 	umull	r2, r4, r1, r2
 800e03c:	b94c      	cbnz	r4, 800e052 <_calloc_r+0x1c>
 800e03e:	4611      	mov	r1, r2
 800e040:	9201      	str	r2, [sp, #4]
 800e042:	f7fc fab1 	bl	800a5a8 <_malloc_r>
 800e046:	9a01      	ldr	r2, [sp, #4]
 800e048:	4605      	mov	r5, r0
 800e04a:	b930      	cbnz	r0, 800e05a <_calloc_r+0x24>
 800e04c:	4628      	mov	r0, r5
 800e04e:	b003      	add	sp, #12
 800e050:	bd30      	pop	{r4, r5, pc}
 800e052:	220c      	movs	r2, #12
 800e054:	6002      	str	r2, [r0, #0]
 800e056:	2500      	movs	r5, #0
 800e058:	e7f8      	b.n	800e04c <_calloc_r+0x16>
 800e05a:	4621      	mov	r1, r4
 800e05c:	f7fc fa30 	bl	800a4c0 <memset>
 800e060:	e7f4      	b.n	800e04c <_calloc_r+0x16>

0800e062 <__ssputs_r>:
 800e062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e066:	688e      	ldr	r6, [r1, #8]
 800e068:	429e      	cmp	r6, r3
 800e06a:	4682      	mov	sl, r0
 800e06c:	460c      	mov	r4, r1
 800e06e:	4690      	mov	r8, r2
 800e070:	461f      	mov	r7, r3
 800e072:	d838      	bhi.n	800e0e6 <__ssputs_r+0x84>
 800e074:	898a      	ldrh	r2, [r1, #12]
 800e076:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e07a:	d032      	beq.n	800e0e2 <__ssputs_r+0x80>
 800e07c:	6825      	ldr	r5, [r4, #0]
 800e07e:	6909      	ldr	r1, [r1, #16]
 800e080:	eba5 0901 	sub.w	r9, r5, r1
 800e084:	6965      	ldr	r5, [r4, #20]
 800e086:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e08a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e08e:	3301      	adds	r3, #1
 800e090:	444b      	add	r3, r9
 800e092:	106d      	asrs	r5, r5, #1
 800e094:	429d      	cmp	r5, r3
 800e096:	bf38      	it	cc
 800e098:	461d      	movcc	r5, r3
 800e09a:	0553      	lsls	r3, r2, #21
 800e09c:	d531      	bpl.n	800e102 <__ssputs_r+0xa0>
 800e09e:	4629      	mov	r1, r5
 800e0a0:	f7fc fa82 	bl	800a5a8 <_malloc_r>
 800e0a4:	4606      	mov	r6, r0
 800e0a6:	b950      	cbnz	r0, 800e0be <__ssputs_r+0x5c>
 800e0a8:	230c      	movs	r3, #12
 800e0aa:	f8ca 3000 	str.w	r3, [sl]
 800e0ae:	89a3      	ldrh	r3, [r4, #12]
 800e0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0b4:	81a3      	strh	r3, [r4, #12]
 800e0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0be:	6921      	ldr	r1, [r4, #16]
 800e0c0:	464a      	mov	r2, r9
 800e0c2:	f7fc f9ef 	bl	800a4a4 <memcpy>
 800e0c6:	89a3      	ldrh	r3, [r4, #12]
 800e0c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0d0:	81a3      	strh	r3, [r4, #12]
 800e0d2:	6126      	str	r6, [r4, #16]
 800e0d4:	6165      	str	r5, [r4, #20]
 800e0d6:	444e      	add	r6, r9
 800e0d8:	eba5 0509 	sub.w	r5, r5, r9
 800e0dc:	6026      	str	r6, [r4, #0]
 800e0de:	60a5      	str	r5, [r4, #8]
 800e0e0:	463e      	mov	r6, r7
 800e0e2:	42be      	cmp	r6, r7
 800e0e4:	d900      	bls.n	800e0e8 <__ssputs_r+0x86>
 800e0e6:	463e      	mov	r6, r7
 800e0e8:	6820      	ldr	r0, [r4, #0]
 800e0ea:	4632      	mov	r2, r6
 800e0ec:	4641      	mov	r1, r8
 800e0ee:	f000 ff45 	bl	800ef7c <memmove>
 800e0f2:	68a3      	ldr	r3, [r4, #8]
 800e0f4:	1b9b      	subs	r3, r3, r6
 800e0f6:	60a3      	str	r3, [r4, #8]
 800e0f8:	6823      	ldr	r3, [r4, #0]
 800e0fa:	4433      	add	r3, r6
 800e0fc:	6023      	str	r3, [r4, #0]
 800e0fe:	2000      	movs	r0, #0
 800e100:	e7db      	b.n	800e0ba <__ssputs_r+0x58>
 800e102:	462a      	mov	r2, r5
 800e104:	f000 ff54 	bl	800efb0 <_realloc_r>
 800e108:	4606      	mov	r6, r0
 800e10a:	2800      	cmp	r0, #0
 800e10c:	d1e1      	bne.n	800e0d2 <__ssputs_r+0x70>
 800e10e:	6921      	ldr	r1, [r4, #16]
 800e110:	4650      	mov	r0, sl
 800e112:	f7fc f9dd 	bl	800a4d0 <_free_r>
 800e116:	e7c7      	b.n	800e0a8 <__ssputs_r+0x46>

0800e118 <_svfiprintf_r>:
 800e118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e11c:	4698      	mov	r8, r3
 800e11e:	898b      	ldrh	r3, [r1, #12]
 800e120:	061b      	lsls	r3, r3, #24
 800e122:	b09d      	sub	sp, #116	; 0x74
 800e124:	4607      	mov	r7, r0
 800e126:	460d      	mov	r5, r1
 800e128:	4614      	mov	r4, r2
 800e12a:	d50e      	bpl.n	800e14a <_svfiprintf_r+0x32>
 800e12c:	690b      	ldr	r3, [r1, #16]
 800e12e:	b963      	cbnz	r3, 800e14a <_svfiprintf_r+0x32>
 800e130:	2140      	movs	r1, #64	; 0x40
 800e132:	f7fc fa39 	bl	800a5a8 <_malloc_r>
 800e136:	6028      	str	r0, [r5, #0]
 800e138:	6128      	str	r0, [r5, #16]
 800e13a:	b920      	cbnz	r0, 800e146 <_svfiprintf_r+0x2e>
 800e13c:	230c      	movs	r3, #12
 800e13e:	603b      	str	r3, [r7, #0]
 800e140:	f04f 30ff 	mov.w	r0, #4294967295
 800e144:	e0d1      	b.n	800e2ea <_svfiprintf_r+0x1d2>
 800e146:	2340      	movs	r3, #64	; 0x40
 800e148:	616b      	str	r3, [r5, #20]
 800e14a:	2300      	movs	r3, #0
 800e14c:	9309      	str	r3, [sp, #36]	; 0x24
 800e14e:	2320      	movs	r3, #32
 800e150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e154:	f8cd 800c 	str.w	r8, [sp, #12]
 800e158:	2330      	movs	r3, #48	; 0x30
 800e15a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e304 <_svfiprintf_r+0x1ec>
 800e15e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e162:	f04f 0901 	mov.w	r9, #1
 800e166:	4623      	mov	r3, r4
 800e168:	469a      	mov	sl, r3
 800e16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e16e:	b10a      	cbz	r2, 800e174 <_svfiprintf_r+0x5c>
 800e170:	2a25      	cmp	r2, #37	; 0x25
 800e172:	d1f9      	bne.n	800e168 <_svfiprintf_r+0x50>
 800e174:	ebba 0b04 	subs.w	fp, sl, r4
 800e178:	d00b      	beq.n	800e192 <_svfiprintf_r+0x7a>
 800e17a:	465b      	mov	r3, fp
 800e17c:	4622      	mov	r2, r4
 800e17e:	4629      	mov	r1, r5
 800e180:	4638      	mov	r0, r7
 800e182:	f7ff ff6e 	bl	800e062 <__ssputs_r>
 800e186:	3001      	adds	r0, #1
 800e188:	f000 80aa 	beq.w	800e2e0 <_svfiprintf_r+0x1c8>
 800e18c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e18e:	445a      	add	r2, fp
 800e190:	9209      	str	r2, [sp, #36]	; 0x24
 800e192:	f89a 3000 	ldrb.w	r3, [sl]
 800e196:	2b00      	cmp	r3, #0
 800e198:	f000 80a2 	beq.w	800e2e0 <_svfiprintf_r+0x1c8>
 800e19c:	2300      	movs	r3, #0
 800e19e:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1a6:	f10a 0a01 	add.w	sl, sl, #1
 800e1aa:	9304      	str	r3, [sp, #16]
 800e1ac:	9307      	str	r3, [sp, #28]
 800e1ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1b2:	931a      	str	r3, [sp, #104]	; 0x68
 800e1b4:	4654      	mov	r4, sl
 800e1b6:	2205      	movs	r2, #5
 800e1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1bc:	4851      	ldr	r0, [pc, #324]	; (800e304 <_svfiprintf_r+0x1ec>)
 800e1be:	f7f2 f80f 	bl	80001e0 <memchr>
 800e1c2:	9a04      	ldr	r2, [sp, #16]
 800e1c4:	b9d8      	cbnz	r0, 800e1fe <_svfiprintf_r+0xe6>
 800e1c6:	06d0      	lsls	r0, r2, #27
 800e1c8:	bf44      	itt	mi
 800e1ca:	2320      	movmi	r3, #32
 800e1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1d0:	0711      	lsls	r1, r2, #28
 800e1d2:	bf44      	itt	mi
 800e1d4:	232b      	movmi	r3, #43	; 0x2b
 800e1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1da:	f89a 3000 	ldrb.w	r3, [sl]
 800e1de:	2b2a      	cmp	r3, #42	; 0x2a
 800e1e0:	d015      	beq.n	800e20e <_svfiprintf_r+0xf6>
 800e1e2:	9a07      	ldr	r2, [sp, #28]
 800e1e4:	4654      	mov	r4, sl
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	f04f 0c0a 	mov.w	ip, #10
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1f2:	3b30      	subs	r3, #48	; 0x30
 800e1f4:	2b09      	cmp	r3, #9
 800e1f6:	d94e      	bls.n	800e296 <_svfiprintf_r+0x17e>
 800e1f8:	b1b0      	cbz	r0, 800e228 <_svfiprintf_r+0x110>
 800e1fa:	9207      	str	r2, [sp, #28]
 800e1fc:	e014      	b.n	800e228 <_svfiprintf_r+0x110>
 800e1fe:	eba0 0308 	sub.w	r3, r0, r8
 800e202:	fa09 f303 	lsl.w	r3, r9, r3
 800e206:	4313      	orrs	r3, r2
 800e208:	9304      	str	r3, [sp, #16]
 800e20a:	46a2      	mov	sl, r4
 800e20c:	e7d2      	b.n	800e1b4 <_svfiprintf_r+0x9c>
 800e20e:	9b03      	ldr	r3, [sp, #12]
 800e210:	1d19      	adds	r1, r3, #4
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	9103      	str	r1, [sp, #12]
 800e216:	2b00      	cmp	r3, #0
 800e218:	bfbb      	ittet	lt
 800e21a:	425b      	neglt	r3, r3
 800e21c:	f042 0202 	orrlt.w	r2, r2, #2
 800e220:	9307      	strge	r3, [sp, #28]
 800e222:	9307      	strlt	r3, [sp, #28]
 800e224:	bfb8      	it	lt
 800e226:	9204      	strlt	r2, [sp, #16]
 800e228:	7823      	ldrb	r3, [r4, #0]
 800e22a:	2b2e      	cmp	r3, #46	; 0x2e
 800e22c:	d10c      	bne.n	800e248 <_svfiprintf_r+0x130>
 800e22e:	7863      	ldrb	r3, [r4, #1]
 800e230:	2b2a      	cmp	r3, #42	; 0x2a
 800e232:	d135      	bne.n	800e2a0 <_svfiprintf_r+0x188>
 800e234:	9b03      	ldr	r3, [sp, #12]
 800e236:	1d1a      	adds	r2, r3, #4
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	9203      	str	r2, [sp, #12]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	bfb8      	it	lt
 800e240:	f04f 33ff 	movlt.w	r3, #4294967295
 800e244:	3402      	adds	r4, #2
 800e246:	9305      	str	r3, [sp, #20]
 800e248:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e314 <_svfiprintf_r+0x1fc>
 800e24c:	7821      	ldrb	r1, [r4, #0]
 800e24e:	2203      	movs	r2, #3
 800e250:	4650      	mov	r0, sl
 800e252:	f7f1 ffc5 	bl	80001e0 <memchr>
 800e256:	b140      	cbz	r0, 800e26a <_svfiprintf_r+0x152>
 800e258:	2340      	movs	r3, #64	; 0x40
 800e25a:	eba0 000a 	sub.w	r0, r0, sl
 800e25e:	fa03 f000 	lsl.w	r0, r3, r0
 800e262:	9b04      	ldr	r3, [sp, #16]
 800e264:	4303      	orrs	r3, r0
 800e266:	3401      	adds	r4, #1
 800e268:	9304      	str	r3, [sp, #16]
 800e26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e26e:	4826      	ldr	r0, [pc, #152]	; (800e308 <_svfiprintf_r+0x1f0>)
 800e270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e274:	2206      	movs	r2, #6
 800e276:	f7f1 ffb3 	bl	80001e0 <memchr>
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d038      	beq.n	800e2f0 <_svfiprintf_r+0x1d8>
 800e27e:	4b23      	ldr	r3, [pc, #140]	; (800e30c <_svfiprintf_r+0x1f4>)
 800e280:	bb1b      	cbnz	r3, 800e2ca <_svfiprintf_r+0x1b2>
 800e282:	9b03      	ldr	r3, [sp, #12]
 800e284:	3307      	adds	r3, #7
 800e286:	f023 0307 	bic.w	r3, r3, #7
 800e28a:	3308      	adds	r3, #8
 800e28c:	9303      	str	r3, [sp, #12]
 800e28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e290:	4433      	add	r3, r6
 800e292:	9309      	str	r3, [sp, #36]	; 0x24
 800e294:	e767      	b.n	800e166 <_svfiprintf_r+0x4e>
 800e296:	fb0c 3202 	mla	r2, ip, r2, r3
 800e29a:	460c      	mov	r4, r1
 800e29c:	2001      	movs	r0, #1
 800e29e:	e7a5      	b.n	800e1ec <_svfiprintf_r+0xd4>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	3401      	adds	r4, #1
 800e2a4:	9305      	str	r3, [sp, #20]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	f04f 0c0a 	mov.w	ip, #10
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2b2:	3a30      	subs	r2, #48	; 0x30
 800e2b4:	2a09      	cmp	r2, #9
 800e2b6:	d903      	bls.n	800e2c0 <_svfiprintf_r+0x1a8>
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d0c5      	beq.n	800e248 <_svfiprintf_r+0x130>
 800e2bc:	9105      	str	r1, [sp, #20]
 800e2be:	e7c3      	b.n	800e248 <_svfiprintf_r+0x130>
 800e2c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e7f0      	b.n	800e2ac <_svfiprintf_r+0x194>
 800e2ca:	ab03      	add	r3, sp, #12
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	462a      	mov	r2, r5
 800e2d0:	4b0f      	ldr	r3, [pc, #60]	; (800e310 <_svfiprintf_r+0x1f8>)
 800e2d2:	a904      	add	r1, sp, #16
 800e2d4:	4638      	mov	r0, r7
 800e2d6:	f7fc fa7b 	bl	800a7d0 <_printf_float>
 800e2da:	1c42      	adds	r2, r0, #1
 800e2dc:	4606      	mov	r6, r0
 800e2de:	d1d6      	bne.n	800e28e <_svfiprintf_r+0x176>
 800e2e0:	89ab      	ldrh	r3, [r5, #12]
 800e2e2:	065b      	lsls	r3, r3, #25
 800e2e4:	f53f af2c 	bmi.w	800e140 <_svfiprintf_r+0x28>
 800e2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2ea:	b01d      	add	sp, #116	; 0x74
 800e2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f0:	ab03      	add	r3, sp, #12
 800e2f2:	9300      	str	r3, [sp, #0]
 800e2f4:	462a      	mov	r2, r5
 800e2f6:	4b06      	ldr	r3, [pc, #24]	; (800e310 <_svfiprintf_r+0x1f8>)
 800e2f8:	a904      	add	r1, sp, #16
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	f7fc fd0c 	bl	800ad18 <_printf_i>
 800e300:	e7eb      	b.n	800e2da <_svfiprintf_r+0x1c2>
 800e302:	bf00      	nop
 800e304:	080100bc 	.word	0x080100bc
 800e308:	080100c6 	.word	0x080100c6
 800e30c:	0800a7d1 	.word	0x0800a7d1
 800e310:	0800e063 	.word	0x0800e063
 800e314:	080100c2 	.word	0x080100c2

0800e318 <_sungetc_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	1c4b      	adds	r3, r1, #1
 800e31c:	4614      	mov	r4, r2
 800e31e:	d103      	bne.n	800e328 <_sungetc_r+0x10>
 800e320:	f04f 35ff 	mov.w	r5, #4294967295
 800e324:	4628      	mov	r0, r5
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	8993      	ldrh	r3, [r2, #12]
 800e32a:	f023 0320 	bic.w	r3, r3, #32
 800e32e:	8193      	strh	r3, [r2, #12]
 800e330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e332:	6852      	ldr	r2, [r2, #4]
 800e334:	b2cd      	uxtb	r5, r1
 800e336:	b18b      	cbz	r3, 800e35c <_sungetc_r+0x44>
 800e338:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e33a:	4293      	cmp	r3, r2
 800e33c:	dd08      	ble.n	800e350 <_sungetc_r+0x38>
 800e33e:	6823      	ldr	r3, [r4, #0]
 800e340:	1e5a      	subs	r2, r3, #1
 800e342:	6022      	str	r2, [r4, #0]
 800e344:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e348:	6863      	ldr	r3, [r4, #4]
 800e34a:	3301      	adds	r3, #1
 800e34c:	6063      	str	r3, [r4, #4]
 800e34e:	e7e9      	b.n	800e324 <_sungetc_r+0xc>
 800e350:	4621      	mov	r1, r4
 800e352:	f000 fbe1 	bl	800eb18 <__submore>
 800e356:	2800      	cmp	r0, #0
 800e358:	d0f1      	beq.n	800e33e <_sungetc_r+0x26>
 800e35a:	e7e1      	b.n	800e320 <_sungetc_r+0x8>
 800e35c:	6921      	ldr	r1, [r4, #16]
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	b151      	cbz	r1, 800e378 <_sungetc_r+0x60>
 800e362:	4299      	cmp	r1, r3
 800e364:	d208      	bcs.n	800e378 <_sungetc_r+0x60>
 800e366:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e36a:	42a9      	cmp	r1, r5
 800e36c:	d104      	bne.n	800e378 <_sungetc_r+0x60>
 800e36e:	3b01      	subs	r3, #1
 800e370:	3201      	adds	r2, #1
 800e372:	6023      	str	r3, [r4, #0]
 800e374:	6062      	str	r2, [r4, #4]
 800e376:	e7d5      	b.n	800e324 <_sungetc_r+0xc>
 800e378:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e380:	6363      	str	r3, [r4, #52]	; 0x34
 800e382:	2303      	movs	r3, #3
 800e384:	63a3      	str	r3, [r4, #56]	; 0x38
 800e386:	4623      	mov	r3, r4
 800e388:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	2301      	movs	r3, #1
 800e390:	e7dc      	b.n	800e34c <_sungetc_r+0x34>

0800e392 <__ssrefill_r>:
 800e392:	b510      	push	{r4, lr}
 800e394:	460c      	mov	r4, r1
 800e396:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e398:	b169      	cbz	r1, 800e3b6 <__ssrefill_r+0x24>
 800e39a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e39e:	4299      	cmp	r1, r3
 800e3a0:	d001      	beq.n	800e3a6 <__ssrefill_r+0x14>
 800e3a2:	f7fc f895 	bl	800a4d0 <_free_r>
 800e3a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3a8:	6063      	str	r3, [r4, #4]
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	6360      	str	r0, [r4, #52]	; 0x34
 800e3ae:	b113      	cbz	r3, 800e3b6 <__ssrefill_r+0x24>
 800e3b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3b2:	6023      	str	r3, [r4, #0]
 800e3b4:	bd10      	pop	{r4, pc}
 800e3b6:	6923      	ldr	r3, [r4, #16]
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	6063      	str	r3, [r4, #4]
 800e3be:	89a3      	ldrh	r3, [r4, #12]
 800e3c0:	f043 0320 	orr.w	r3, r3, #32
 800e3c4:	81a3      	strh	r3, [r4, #12]
 800e3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ca:	e7f3      	b.n	800e3b4 <__ssrefill_r+0x22>

0800e3cc <__ssvfiscanf_r>:
 800e3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e3dc:	49a6      	ldr	r1, [pc, #664]	; (800e678 <__ssvfiscanf_r+0x2ac>)
 800e3de:	91a0      	str	r1, [sp, #640]	; 0x280
 800e3e0:	f10d 0804 	add.w	r8, sp, #4
 800e3e4:	49a5      	ldr	r1, [pc, #660]	; (800e67c <__ssvfiscanf_r+0x2b0>)
 800e3e6:	4fa6      	ldr	r7, [pc, #664]	; (800e680 <__ssvfiscanf_r+0x2b4>)
 800e3e8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e684 <__ssvfiscanf_r+0x2b8>
 800e3ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e3f0:	4606      	mov	r6, r0
 800e3f2:	91a1      	str	r1, [sp, #644]	; 0x284
 800e3f4:	9300      	str	r3, [sp, #0]
 800e3f6:	7813      	ldrb	r3, [r2, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f000 815a 	beq.w	800e6b2 <__ssvfiscanf_r+0x2e6>
 800e3fe:	5dd9      	ldrb	r1, [r3, r7]
 800e400:	f011 0108 	ands.w	r1, r1, #8
 800e404:	f102 0501 	add.w	r5, r2, #1
 800e408:	d019      	beq.n	800e43e <__ssvfiscanf_r+0x72>
 800e40a:	6863      	ldr	r3, [r4, #4]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	dd0f      	ble.n	800e430 <__ssvfiscanf_r+0x64>
 800e410:	6823      	ldr	r3, [r4, #0]
 800e412:	781a      	ldrb	r2, [r3, #0]
 800e414:	5cba      	ldrb	r2, [r7, r2]
 800e416:	0712      	lsls	r2, r2, #28
 800e418:	d401      	bmi.n	800e41e <__ssvfiscanf_r+0x52>
 800e41a:	462a      	mov	r2, r5
 800e41c:	e7eb      	b.n	800e3f6 <__ssvfiscanf_r+0x2a>
 800e41e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e420:	3201      	adds	r2, #1
 800e422:	9245      	str	r2, [sp, #276]	; 0x114
 800e424:	6862      	ldr	r2, [r4, #4]
 800e426:	3301      	adds	r3, #1
 800e428:	3a01      	subs	r2, #1
 800e42a:	6062      	str	r2, [r4, #4]
 800e42c:	6023      	str	r3, [r4, #0]
 800e42e:	e7ec      	b.n	800e40a <__ssvfiscanf_r+0x3e>
 800e430:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e432:	4621      	mov	r1, r4
 800e434:	4630      	mov	r0, r6
 800e436:	4798      	blx	r3
 800e438:	2800      	cmp	r0, #0
 800e43a:	d0e9      	beq.n	800e410 <__ssvfiscanf_r+0x44>
 800e43c:	e7ed      	b.n	800e41a <__ssvfiscanf_r+0x4e>
 800e43e:	2b25      	cmp	r3, #37	; 0x25
 800e440:	d012      	beq.n	800e468 <__ssvfiscanf_r+0x9c>
 800e442:	469a      	mov	sl, r3
 800e444:	6863      	ldr	r3, [r4, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	f340 8091 	ble.w	800e56e <__ssvfiscanf_r+0x1a2>
 800e44c:	6822      	ldr	r2, [r4, #0]
 800e44e:	7813      	ldrb	r3, [r2, #0]
 800e450:	4553      	cmp	r3, sl
 800e452:	f040 812e 	bne.w	800e6b2 <__ssvfiscanf_r+0x2e6>
 800e456:	6863      	ldr	r3, [r4, #4]
 800e458:	3b01      	subs	r3, #1
 800e45a:	6063      	str	r3, [r4, #4]
 800e45c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e45e:	3201      	adds	r2, #1
 800e460:	3301      	adds	r3, #1
 800e462:	6022      	str	r2, [r4, #0]
 800e464:	9345      	str	r3, [sp, #276]	; 0x114
 800e466:	e7d8      	b.n	800e41a <__ssvfiscanf_r+0x4e>
 800e468:	9141      	str	r1, [sp, #260]	; 0x104
 800e46a:	9143      	str	r1, [sp, #268]	; 0x10c
 800e46c:	7853      	ldrb	r3, [r2, #1]
 800e46e:	2b2a      	cmp	r3, #42	; 0x2a
 800e470:	bf02      	ittt	eq
 800e472:	2310      	moveq	r3, #16
 800e474:	1c95      	addeq	r5, r2, #2
 800e476:	9341      	streq	r3, [sp, #260]	; 0x104
 800e478:	220a      	movs	r2, #10
 800e47a:	46aa      	mov	sl, r5
 800e47c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e480:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e484:	2b09      	cmp	r3, #9
 800e486:	d91d      	bls.n	800e4c4 <__ssvfiscanf_r+0xf8>
 800e488:	487e      	ldr	r0, [pc, #504]	; (800e684 <__ssvfiscanf_r+0x2b8>)
 800e48a:	2203      	movs	r2, #3
 800e48c:	f7f1 fea8 	bl	80001e0 <memchr>
 800e490:	b140      	cbz	r0, 800e4a4 <__ssvfiscanf_r+0xd8>
 800e492:	2301      	movs	r3, #1
 800e494:	eba0 0009 	sub.w	r0, r0, r9
 800e498:	fa03 f000 	lsl.w	r0, r3, r0
 800e49c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e49e:	4318      	orrs	r0, r3
 800e4a0:	9041      	str	r0, [sp, #260]	; 0x104
 800e4a2:	4655      	mov	r5, sl
 800e4a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e4a8:	2b78      	cmp	r3, #120	; 0x78
 800e4aa:	d806      	bhi.n	800e4ba <__ssvfiscanf_r+0xee>
 800e4ac:	2b57      	cmp	r3, #87	; 0x57
 800e4ae:	d810      	bhi.n	800e4d2 <__ssvfiscanf_r+0x106>
 800e4b0:	2b25      	cmp	r3, #37	; 0x25
 800e4b2:	d0c6      	beq.n	800e442 <__ssvfiscanf_r+0x76>
 800e4b4:	d856      	bhi.n	800e564 <__ssvfiscanf_r+0x198>
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d064      	beq.n	800e584 <__ssvfiscanf_r+0x1b8>
 800e4ba:	2303      	movs	r3, #3
 800e4bc:	9347      	str	r3, [sp, #284]	; 0x11c
 800e4be:	230a      	movs	r3, #10
 800e4c0:	9342      	str	r3, [sp, #264]	; 0x108
 800e4c2:	e071      	b.n	800e5a8 <__ssvfiscanf_r+0x1dc>
 800e4c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e4c6:	fb02 1103 	mla	r1, r2, r3, r1
 800e4ca:	3930      	subs	r1, #48	; 0x30
 800e4cc:	9143      	str	r1, [sp, #268]	; 0x10c
 800e4ce:	4655      	mov	r5, sl
 800e4d0:	e7d3      	b.n	800e47a <__ssvfiscanf_r+0xae>
 800e4d2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e4d6:	2a20      	cmp	r2, #32
 800e4d8:	d8ef      	bhi.n	800e4ba <__ssvfiscanf_r+0xee>
 800e4da:	a101      	add	r1, pc, #4	; (adr r1, 800e4e0 <__ssvfiscanf_r+0x114>)
 800e4dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e4e0:	0800e593 	.word	0x0800e593
 800e4e4:	0800e4bb 	.word	0x0800e4bb
 800e4e8:	0800e4bb 	.word	0x0800e4bb
 800e4ec:	0800e5f1 	.word	0x0800e5f1
 800e4f0:	0800e4bb 	.word	0x0800e4bb
 800e4f4:	0800e4bb 	.word	0x0800e4bb
 800e4f8:	0800e4bb 	.word	0x0800e4bb
 800e4fc:	0800e4bb 	.word	0x0800e4bb
 800e500:	0800e4bb 	.word	0x0800e4bb
 800e504:	0800e4bb 	.word	0x0800e4bb
 800e508:	0800e4bb 	.word	0x0800e4bb
 800e50c:	0800e607 	.word	0x0800e607
 800e510:	0800e5dd 	.word	0x0800e5dd
 800e514:	0800e56b 	.word	0x0800e56b
 800e518:	0800e56b 	.word	0x0800e56b
 800e51c:	0800e56b 	.word	0x0800e56b
 800e520:	0800e4bb 	.word	0x0800e4bb
 800e524:	0800e5e1 	.word	0x0800e5e1
 800e528:	0800e4bb 	.word	0x0800e4bb
 800e52c:	0800e4bb 	.word	0x0800e4bb
 800e530:	0800e4bb 	.word	0x0800e4bb
 800e534:	0800e4bb 	.word	0x0800e4bb
 800e538:	0800e617 	.word	0x0800e617
 800e53c:	0800e5e9 	.word	0x0800e5e9
 800e540:	0800e58b 	.word	0x0800e58b
 800e544:	0800e4bb 	.word	0x0800e4bb
 800e548:	0800e4bb 	.word	0x0800e4bb
 800e54c:	0800e613 	.word	0x0800e613
 800e550:	0800e4bb 	.word	0x0800e4bb
 800e554:	0800e5dd 	.word	0x0800e5dd
 800e558:	0800e4bb 	.word	0x0800e4bb
 800e55c:	0800e4bb 	.word	0x0800e4bb
 800e560:	0800e593 	.word	0x0800e593
 800e564:	3b45      	subs	r3, #69	; 0x45
 800e566:	2b02      	cmp	r3, #2
 800e568:	d8a7      	bhi.n	800e4ba <__ssvfiscanf_r+0xee>
 800e56a:	2305      	movs	r3, #5
 800e56c:	e01b      	b.n	800e5a6 <__ssvfiscanf_r+0x1da>
 800e56e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e570:	4621      	mov	r1, r4
 800e572:	4630      	mov	r0, r6
 800e574:	4798      	blx	r3
 800e576:	2800      	cmp	r0, #0
 800e578:	f43f af68 	beq.w	800e44c <__ssvfiscanf_r+0x80>
 800e57c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e57e:	2800      	cmp	r0, #0
 800e580:	f040 808d 	bne.w	800e69e <__ssvfiscanf_r+0x2d2>
 800e584:	f04f 30ff 	mov.w	r0, #4294967295
 800e588:	e08f      	b.n	800e6aa <__ssvfiscanf_r+0x2de>
 800e58a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e58c:	f042 0220 	orr.w	r2, r2, #32
 800e590:	9241      	str	r2, [sp, #260]	; 0x104
 800e592:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e598:	9241      	str	r2, [sp, #260]	; 0x104
 800e59a:	2210      	movs	r2, #16
 800e59c:	2b6f      	cmp	r3, #111	; 0x6f
 800e59e:	9242      	str	r2, [sp, #264]	; 0x108
 800e5a0:	bf34      	ite	cc
 800e5a2:	2303      	movcc	r3, #3
 800e5a4:	2304      	movcs	r3, #4
 800e5a6:	9347      	str	r3, [sp, #284]	; 0x11c
 800e5a8:	6863      	ldr	r3, [r4, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	dd42      	ble.n	800e634 <__ssvfiscanf_r+0x268>
 800e5ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5b0:	0659      	lsls	r1, r3, #25
 800e5b2:	d404      	bmi.n	800e5be <__ssvfiscanf_r+0x1f2>
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	781a      	ldrb	r2, [r3, #0]
 800e5b8:	5cba      	ldrb	r2, [r7, r2]
 800e5ba:	0712      	lsls	r2, r2, #28
 800e5bc:	d441      	bmi.n	800e642 <__ssvfiscanf_r+0x276>
 800e5be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e5c0:	2b02      	cmp	r3, #2
 800e5c2:	dc50      	bgt.n	800e666 <__ssvfiscanf_r+0x29a>
 800e5c4:	466b      	mov	r3, sp
 800e5c6:	4622      	mov	r2, r4
 800e5c8:	a941      	add	r1, sp, #260	; 0x104
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	f000 f876 	bl	800e6bc <_scanf_chars>
 800e5d0:	2801      	cmp	r0, #1
 800e5d2:	d06e      	beq.n	800e6b2 <__ssvfiscanf_r+0x2e6>
 800e5d4:	2802      	cmp	r0, #2
 800e5d6:	f47f af20 	bne.w	800e41a <__ssvfiscanf_r+0x4e>
 800e5da:	e7cf      	b.n	800e57c <__ssvfiscanf_r+0x1b0>
 800e5dc:	220a      	movs	r2, #10
 800e5de:	e7dd      	b.n	800e59c <__ssvfiscanf_r+0x1d0>
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	9342      	str	r3, [sp, #264]	; 0x108
 800e5e4:	2303      	movs	r3, #3
 800e5e6:	e7de      	b.n	800e5a6 <__ssvfiscanf_r+0x1da>
 800e5e8:	2308      	movs	r3, #8
 800e5ea:	9342      	str	r3, [sp, #264]	; 0x108
 800e5ec:	2304      	movs	r3, #4
 800e5ee:	e7da      	b.n	800e5a6 <__ssvfiscanf_r+0x1da>
 800e5f0:	4629      	mov	r1, r5
 800e5f2:	4640      	mov	r0, r8
 800e5f4:	f000 f9d0 	bl	800e998 <__sccl>
 800e5f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5fe:	9341      	str	r3, [sp, #260]	; 0x104
 800e600:	4605      	mov	r5, r0
 800e602:	2301      	movs	r3, #1
 800e604:	e7cf      	b.n	800e5a6 <__ssvfiscanf_r+0x1da>
 800e606:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e60c:	9341      	str	r3, [sp, #260]	; 0x104
 800e60e:	2300      	movs	r3, #0
 800e610:	e7c9      	b.n	800e5a6 <__ssvfiscanf_r+0x1da>
 800e612:	2302      	movs	r3, #2
 800e614:	e7c7      	b.n	800e5a6 <__ssvfiscanf_r+0x1da>
 800e616:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e618:	06c3      	lsls	r3, r0, #27
 800e61a:	f53f aefe 	bmi.w	800e41a <__ssvfiscanf_r+0x4e>
 800e61e:	9b00      	ldr	r3, [sp, #0]
 800e620:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e622:	1d19      	adds	r1, r3, #4
 800e624:	9100      	str	r1, [sp, #0]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f010 0f01 	tst.w	r0, #1
 800e62c:	bf14      	ite	ne
 800e62e:	801a      	strhne	r2, [r3, #0]
 800e630:	601a      	streq	r2, [r3, #0]
 800e632:	e6f2      	b.n	800e41a <__ssvfiscanf_r+0x4e>
 800e634:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e636:	4621      	mov	r1, r4
 800e638:	4630      	mov	r0, r6
 800e63a:	4798      	blx	r3
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d0b6      	beq.n	800e5ae <__ssvfiscanf_r+0x1e2>
 800e640:	e79c      	b.n	800e57c <__ssvfiscanf_r+0x1b0>
 800e642:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e644:	3201      	adds	r2, #1
 800e646:	9245      	str	r2, [sp, #276]	; 0x114
 800e648:	6862      	ldr	r2, [r4, #4]
 800e64a:	3a01      	subs	r2, #1
 800e64c:	2a00      	cmp	r2, #0
 800e64e:	6062      	str	r2, [r4, #4]
 800e650:	dd02      	ble.n	800e658 <__ssvfiscanf_r+0x28c>
 800e652:	3301      	adds	r3, #1
 800e654:	6023      	str	r3, [r4, #0]
 800e656:	e7ad      	b.n	800e5b4 <__ssvfiscanf_r+0x1e8>
 800e658:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e65a:	4621      	mov	r1, r4
 800e65c:	4630      	mov	r0, r6
 800e65e:	4798      	blx	r3
 800e660:	2800      	cmp	r0, #0
 800e662:	d0a7      	beq.n	800e5b4 <__ssvfiscanf_r+0x1e8>
 800e664:	e78a      	b.n	800e57c <__ssvfiscanf_r+0x1b0>
 800e666:	2b04      	cmp	r3, #4
 800e668:	dc0e      	bgt.n	800e688 <__ssvfiscanf_r+0x2bc>
 800e66a:	466b      	mov	r3, sp
 800e66c:	4622      	mov	r2, r4
 800e66e:	a941      	add	r1, sp, #260	; 0x104
 800e670:	4630      	mov	r0, r6
 800e672:	f000 f87d 	bl	800e770 <_scanf_i>
 800e676:	e7ab      	b.n	800e5d0 <__ssvfiscanf_r+0x204>
 800e678:	0800e319 	.word	0x0800e319
 800e67c:	0800e393 	.word	0x0800e393
 800e680:	0800fd59 	.word	0x0800fd59
 800e684:	080100c2 	.word	0x080100c2
 800e688:	4b0b      	ldr	r3, [pc, #44]	; (800e6b8 <__ssvfiscanf_r+0x2ec>)
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f43f aec5 	beq.w	800e41a <__ssvfiscanf_r+0x4e>
 800e690:	466b      	mov	r3, sp
 800e692:	4622      	mov	r2, r4
 800e694:	a941      	add	r1, sp, #260	; 0x104
 800e696:	4630      	mov	r0, r6
 800e698:	f7fc fc64 	bl	800af64 <_scanf_float>
 800e69c:	e798      	b.n	800e5d0 <__ssvfiscanf_r+0x204>
 800e69e:	89a3      	ldrh	r3, [r4, #12]
 800e6a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e6a4:	bf18      	it	ne
 800e6a6:	f04f 30ff 	movne.w	r0, #4294967295
 800e6aa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e6b4:	e7f9      	b.n	800e6aa <__ssvfiscanf_r+0x2de>
 800e6b6:	bf00      	nop
 800e6b8:	0800af65 	.word	0x0800af65

0800e6bc <_scanf_chars>:
 800e6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6c0:	4615      	mov	r5, r2
 800e6c2:	688a      	ldr	r2, [r1, #8]
 800e6c4:	4680      	mov	r8, r0
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	b932      	cbnz	r2, 800e6d8 <_scanf_chars+0x1c>
 800e6ca:	698a      	ldr	r2, [r1, #24]
 800e6cc:	2a00      	cmp	r2, #0
 800e6ce:	bf0c      	ite	eq
 800e6d0:	2201      	moveq	r2, #1
 800e6d2:	f04f 32ff 	movne.w	r2, #4294967295
 800e6d6:	608a      	str	r2, [r1, #8]
 800e6d8:	6822      	ldr	r2, [r4, #0]
 800e6da:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e76c <_scanf_chars+0xb0>
 800e6de:	06d1      	lsls	r1, r2, #27
 800e6e0:	bf5f      	itttt	pl
 800e6e2:	681a      	ldrpl	r2, [r3, #0]
 800e6e4:	1d11      	addpl	r1, r2, #4
 800e6e6:	6019      	strpl	r1, [r3, #0]
 800e6e8:	6816      	ldrpl	r6, [r2, #0]
 800e6ea:	2700      	movs	r7, #0
 800e6ec:	69a0      	ldr	r0, [r4, #24]
 800e6ee:	b188      	cbz	r0, 800e714 <_scanf_chars+0x58>
 800e6f0:	2801      	cmp	r0, #1
 800e6f2:	d107      	bne.n	800e704 <_scanf_chars+0x48>
 800e6f4:	682a      	ldr	r2, [r5, #0]
 800e6f6:	7811      	ldrb	r1, [r2, #0]
 800e6f8:	6962      	ldr	r2, [r4, #20]
 800e6fa:	5c52      	ldrb	r2, [r2, r1]
 800e6fc:	b952      	cbnz	r2, 800e714 <_scanf_chars+0x58>
 800e6fe:	2f00      	cmp	r7, #0
 800e700:	d031      	beq.n	800e766 <_scanf_chars+0xaa>
 800e702:	e022      	b.n	800e74a <_scanf_chars+0x8e>
 800e704:	2802      	cmp	r0, #2
 800e706:	d120      	bne.n	800e74a <_scanf_chars+0x8e>
 800e708:	682b      	ldr	r3, [r5, #0]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e710:	071b      	lsls	r3, r3, #28
 800e712:	d41a      	bmi.n	800e74a <_scanf_chars+0x8e>
 800e714:	6823      	ldr	r3, [r4, #0]
 800e716:	06da      	lsls	r2, r3, #27
 800e718:	bf5e      	ittt	pl
 800e71a:	682b      	ldrpl	r3, [r5, #0]
 800e71c:	781b      	ldrbpl	r3, [r3, #0]
 800e71e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e722:	682a      	ldr	r2, [r5, #0]
 800e724:	686b      	ldr	r3, [r5, #4]
 800e726:	3201      	adds	r2, #1
 800e728:	602a      	str	r2, [r5, #0]
 800e72a:	68a2      	ldr	r2, [r4, #8]
 800e72c:	3b01      	subs	r3, #1
 800e72e:	3a01      	subs	r2, #1
 800e730:	606b      	str	r3, [r5, #4]
 800e732:	3701      	adds	r7, #1
 800e734:	60a2      	str	r2, [r4, #8]
 800e736:	b142      	cbz	r2, 800e74a <_scanf_chars+0x8e>
 800e738:	2b00      	cmp	r3, #0
 800e73a:	dcd7      	bgt.n	800e6ec <_scanf_chars+0x30>
 800e73c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e740:	4629      	mov	r1, r5
 800e742:	4640      	mov	r0, r8
 800e744:	4798      	blx	r3
 800e746:	2800      	cmp	r0, #0
 800e748:	d0d0      	beq.n	800e6ec <_scanf_chars+0x30>
 800e74a:	6823      	ldr	r3, [r4, #0]
 800e74c:	f013 0310 	ands.w	r3, r3, #16
 800e750:	d105      	bne.n	800e75e <_scanf_chars+0xa2>
 800e752:	68e2      	ldr	r2, [r4, #12]
 800e754:	3201      	adds	r2, #1
 800e756:	60e2      	str	r2, [r4, #12]
 800e758:	69a2      	ldr	r2, [r4, #24]
 800e75a:	b102      	cbz	r2, 800e75e <_scanf_chars+0xa2>
 800e75c:	7033      	strb	r3, [r6, #0]
 800e75e:	6923      	ldr	r3, [r4, #16]
 800e760:	443b      	add	r3, r7
 800e762:	6123      	str	r3, [r4, #16]
 800e764:	2000      	movs	r0, #0
 800e766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e76a:	bf00      	nop
 800e76c:	0800fd59 	.word	0x0800fd59

0800e770 <_scanf_i>:
 800e770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e774:	4698      	mov	r8, r3
 800e776:	4b76      	ldr	r3, [pc, #472]	; (800e950 <_scanf_i+0x1e0>)
 800e778:	460c      	mov	r4, r1
 800e77a:	4682      	mov	sl, r0
 800e77c:	4616      	mov	r6, r2
 800e77e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e782:	b087      	sub	sp, #28
 800e784:	ab03      	add	r3, sp, #12
 800e786:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e78a:	4b72      	ldr	r3, [pc, #456]	; (800e954 <_scanf_i+0x1e4>)
 800e78c:	69a1      	ldr	r1, [r4, #24]
 800e78e:	4a72      	ldr	r2, [pc, #456]	; (800e958 <_scanf_i+0x1e8>)
 800e790:	2903      	cmp	r1, #3
 800e792:	bf18      	it	ne
 800e794:	461a      	movne	r2, r3
 800e796:	68a3      	ldr	r3, [r4, #8]
 800e798:	9201      	str	r2, [sp, #4]
 800e79a:	1e5a      	subs	r2, r3, #1
 800e79c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e7a0:	bf88      	it	hi
 800e7a2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e7a6:	4627      	mov	r7, r4
 800e7a8:	bf82      	ittt	hi
 800e7aa:	eb03 0905 	addhi.w	r9, r3, r5
 800e7ae:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e7b2:	60a3      	strhi	r3, [r4, #8]
 800e7b4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e7b8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e7bc:	bf98      	it	ls
 800e7be:	f04f 0900 	movls.w	r9, #0
 800e7c2:	6023      	str	r3, [r4, #0]
 800e7c4:	463d      	mov	r5, r7
 800e7c6:	f04f 0b00 	mov.w	fp, #0
 800e7ca:	6831      	ldr	r1, [r6, #0]
 800e7cc:	ab03      	add	r3, sp, #12
 800e7ce:	7809      	ldrb	r1, [r1, #0]
 800e7d0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e7d4:	2202      	movs	r2, #2
 800e7d6:	f7f1 fd03 	bl	80001e0 <memchr>
 800e7da:	b328      	cbz	r0, 800e828 <_scanf_i+0xb8>
 800e7dc:	f1bb 0f01 	cmp.w	fp, #1
 800e7e0:	d159      	bne.n	800e896 <_scanf_i+0x126>
 800e7e2:	6862      	ldr	r2, [r4, #4]
 800e7e4:	b92a      	cbnz	r2, 800e7f2 <_scanf_i+0x82>
 800e7e6:	6822      	ldr	r2, [r4, #0]
 800e7e8:	2308      	movs	r3, #8
 800e7ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7ee:	6063      	str	r3, [r4, #4]
 800e7f0:	6022      	str	r2, [r4, #0]
 800e7f2:	6822      	ldr	r2, [r4, #0]
 800e7f4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e7f8:	6022      	str	r2, [r4, #0]
 800e7fa:	68a2      	ldr	r2, [r4, #8]
 800e7fc:	1e51      	subs	r1, r2, #1
 800e7fe:	60a1      	str	r1, [r4, #8]
 800e800:	b192      	cbz	r2, 800e828 <_scanf_i+0xb8>
 800e802:	6832      	ldr	r2, [r6, #0]
 800e804:	1c51      	adds	r1, r2, #1
 800e806:	6031      	str	r1, [r6, #0]
 800e808:	7812      	ldrb	r2, [r2, #0]
 800e80a:	f805 2b01 	strb.w	r2, [r5], #1
 800e80e:	6872      	ldr	r2, [r6, #4]
 800e810:	3a01      	subs	r2, #1
 800e812:	2a00      	cmp	r2, #0
 800e814:	6072      	str	r2, [r6, #4]
 800e816:	dc07      	bgt.n	800e828 <_scanf_i+0xb8>
 800e818:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e81c:	4631      	mov	r1, r6
 800e81e:	4650      	mov	r0, sl
 800e820:	4790      	blx	r2
 800e822:	2800      	cmp	r0, #0
 800e824:	f040 8085 	bne.w	800e932 <_scanf_i+0x1c2>
 800e828:	f10b 0b01 	add.w	fp, fp, #1
 800e82c:	f1bb 0f03 	cmp.w	fp, #3
 800e830:	d1cb      	bne.n	800e7ca <_scanf_i+0x5a>
 800e832:	6863      	ldr	r3, [r4, #4]
 800e834:	b90b      	cbnz	r3, 800e83a <_scanf_i+0xca>
 800e836:	230a      	movs	r3, #10
 800e838:	6063      	str	r3, [r4, #4]
 800e83a:	6863      	ldr	r3, [r4, #4]
 800e83c:	4947      	ldr	r1, [pc, #284]	; (800e95c <_scanf_i+0x1ec>)
 800e83e:	6960      	ldr	r0, [r4, #20]
 800e840:	1ac9      	subs	r1, r1, r3
 800e842:	f000 f8a9 	bl	800e998 <__sccl>
 800e846:	f04f 0b00 	mov.w	fp, #0
 800e84a:	68a3      	ldr	r3, [r4, #8]
 800e84c:	6822      	ldr	r2, [r4, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d03d      	beq.n	800e8ce <_scanf_i+0x15e>
 800e852:	6831      	ldr	r1, [r6, #0]
 800e854:	6960      	ldr	r0, [r4, #20]
 800e856:	f891 c000 	ldrb.w	ip, [r1]
 800e85a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e85e:	2800      	cmp	r0, #0
 800e860:	d035      	beq.n	800e8ce <_scanf_i+0x15e>
 800e862:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e866:	d124      	bne.n	800e8b2 <_scanf_i+0x142>
 800e868:	0510      	lsls	r0, r2, #20
 800e86a:	d522      	bpl.n	800e8b2 <_scanf_i+0x142>
 800e86c:	f10b 0b01 	add.w	fp, fp, #1
 800e870:	f1b9 0f00 	cmp.w	r9, #0
 800e874:	d003      	beq.n	800e87e <_scanf_i+0x10e>
 800e876:	3301      	adds	r3, #1
 800e878:	f109 39ff 	add.w	r9, r9, #4294967295
 800e87c:	60a3      	str	r3, [r4, #8]
 800e87e:	6873      	ldr	r3, [r6, #4]
 800e880:	3b01      	subs	r3, #1
 800e882:	2b00      	cmp	r3, #0
 800e884:	6073      	str	r3, [r6, #4]
 800e886:	dd1b      	ble.n	800e8c0 <_scanf_i+0x150>
 800e888:	6833      	ldr	r3, [r6, #0]
 800e88a:	3301      	adds	r3, #1
 800e88c:	6033      	str	r3, [r6, #0]
 800e88e:	68a3      	ldr	r3, [r4, #8]
 800e890:	3b01      	subs	r3, #1
 800e892:	60a3      	str	r3, [r4, #8]
 800e894:	e7d9      	b.n	800e84a <_scanf_i+0xda>
 800e896:	f1bb 0f02 	cmp.w	fp, #2
 800e89a:	d1ae      	bne.n	800e7fa <_scanf_i+0x8a>
 800e89c:	6822      	ldr	r2, [r4, #0]
 800e89e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e8a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e8a6:	d1bf      	bne.n	800e828 <_scanf_i+0xb8>
 800e8a8:	2310      	movs	r3, #16
 800e8aa:	6063      	str	r3, [r4, #4]
 800e8ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e8b0:	e7a2      	b.n	800e7f8 <_scanf_i+0x88>
 800e8b2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e8b6:	6022      	str	r2, [r4, #0]
 800e8b8:	780b      	ldrb	r3, [r1, #0]
 800e8ba:	f805 3b01 	strb.w	r3, [r5], #1
 800e8be:	e7de      	b.n	800e87e <_scanf_i+0x10e>
 800e8c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e8c4:	4631      	mov	r1, r6
 800e8c6:	4650      	mov	r0, sl
 800e8c8:	4798      	blx	r3
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	d0df      	beq.n	800e88e <_scanf_i+0x11e>
 800e8ce:	6823      	ldr	r3, [r4, #0]
 800e8d0:	05db      	lsls	r3, r3, #23
 800e8d2:	d50d      	bpl.n	800e8f0 <_scanf_i+0x180>
 800e8d4:	42bd      	cmp	r5, r7
 800e8d6:	d909      	bls.n	800e8ec <_scanf_i+0x17c>
 800e8d8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e8dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	4650      	mov	r0, sl
 800e8e4:	4798      	blx	r3
 800e8e6:	f105 39ff 	add.w	r9, r5, #4294967295
 800e8ea:	464d      	mov	r5, r9
 800e8ec:	42bd      	cmp	r5, r7
 800e8ee:	d02d      	beq.n	800e94c <_scanf_i+0x1dc>
 800e8f0:	6822      	ldr	r2, [r4, #0]
 800e8f2:	f012 0210 	ands.w	r2, r2, #16
 800e8f6:	d113      	bne.n	800e920 <_scanf_i+0x1b0>
 800e8f8:	702a      	strb	r2, [r5, #0]
 800e8fa:	6863      	ldr	r3, [r4, #4]
 800e8fc:	9e01      	ldr	r6, [sp, #4]
 800e8fe:	4639      	mov	r1, r7
 800e900:	4650      	mov	r0, sl
 800e902:	47b0      	blx	r6
 800e904:	6821      	ldr	r1, [r4, #0]
 800e906:	f8d8 3000 	ldr.w	r3, [r8]
 800e90a:	f011 0f20 	tst.w	r1, #32
 800e90e:	d013      	beq.n	800e938 <_scanf_i+0x1c8>
 800e910:	1d1a      	adds	r2, r3, #4
 800e912:	f8c8 2000 	str.w	r2, [r8]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	6018      	str	r0, [r3, #0]
 800e91a:	68e3      	ldr	r3, [r4, #12]
 800e91c:	3301      	adds	r3, #1
 800e91e:	60e3      	str	r3, [r4, #12]
 800e920:	1bed      	subs	r5, r5, r7
 800e922:	44ab      	add	fp, r5
 800e924:	6925      	ldr	r5, [r4, #16]
 800e926:	445d      	add	r5, fp
 800e928:	6125      	str	r5, [r4, #16]
 800e92a:	2000      	movs	r0, #0
 800e92c:	b007      	add	sp, #28
 800e92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e932:	f04f 0b00 	mov.w	fp, #0
 800e936:	e7ca      	b.n	800e8ce <_scanf_i+0x15e>
 800e938:	1d1a      	adds	r2, r3, #4
 800e93a:	f8c8 2000 	str.w	r2, [r8]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f011 0f01 	tst.w	r1, #1
 800e944:	bf14      	ite	ne
 800e946:	8018      	strhne	r0, [r3, #0]
 800e948:	6018      	streq	r0, [r3, #0]
 800e94a:	e7e6      	b.n	800e91a <_scanf_i+0x1aa>
 800e94c:	2001      	movs	r0, #1
 800e94e:	e7ed      	b.n	800e92c <_scanf_i+0x1bc>
 800e950:	0800fc60 	.word	0x0800fc60
 800e954:	0800eb15 	.word	0x0800eb15
 800e958:	0800c22d 	.word	0x0800c22d
 800e95c:	080100e6 	.word	0x080100e6

0800e960 <_read_r>:
 800e960:	b538      	push	{r3, r4, r5, lr}
 800e962:	4d07      	ldr	r5, [pc, #28]	; (800e980 <_read_r+0x20>)
 800e964:	4604      	mov	r4, r0
 800e966:	4608      	mov	r0, r1
 800e968:	4611      	mov	r1, r2
 800e96a:	2200      	movs	r2, #0
 800e96c:	602a      	str	r2, [r5, #0]
 800e96e:	461a      	mov	r2, r3
 800e970:	f7f3 fdb6 	bl	80024e0 <_read>
 800e974:	1c43      	adds	r3, r0, #1
 800e976:	d102      	bne.n	800e97e <_read_r+0x1e>
 800e978:	682b      	ldr	r3, [r5, #0]
 800e97a:	b103      	cbz	r3, 800e97e <_read_r+0x1e>
 800e97c:	6023      	str	r3, [r4, #0]
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	20002e34 	.word	0x20002e34
 800e984:	00000000 	.word	0x00000000

0800e988 <nan>:
 800e988:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e990 <nan+0x8>
 800e98c:	4770      	bx	lr
 800e98e:	bf00      	nop
 800e990:	00000000 	.word	0x00000000
 800e994:	7ff80000 	.word	0x7ff80000

0800e998 <__sccl>:
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	780b      	ldrb	r3, [r1, #0]
 800e99c:	4604      	mov	r4, r0
 800e99e:	2b5e      	cmp	r3, #94	; 0x5e
 800e9a0:	bf0b      	itete	eq
 800e9a2:	784b      	ldrbeq	r3, [r1, #1]
 800e9a4:	1c48      	addne	r0, r1, #1
 800e9a6:	1c88      	addeq	r0, r1, #2
 800e9a8:	2200      	movne	r2, #0
 800e9aa:	bf08      	it	eq
 800e9ac:	2201      	moveq	r2, #1
 800e9ae:	1e61      	subs	r1, r4, #1
 800e9b0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e9b4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e9b8:	42a9      	cmp	r1, r5
 800e9ba:	d1fb      	bne.n	800e9b4 <__sccl+0x1c>
 800e9bc:	b90b      	cbnz	r3, 800e9c2 <__sccl+0x2a>
 800e9be:	3801      	subs	r0, #1
 800e9c0:	bd70      	pop	{r4, r5, r6, pc}
 800e9c2:	f082 0201 	eor.w	r2, r2, #1
 800e9c6:	54e2      	strb	r2, [r4, r3]
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e9d0:	292d      	cmp	r1, #45	; 0x2d
 800e9d2:	d006      	beq.n	800e9e2 <__sccl+0x4a>
 800e9d4:	295d      	cmp	r1, #93	; 0x5d
 800e9d6:	d0f3      	beq.n	800e9c0 <__sccl+0x28>
 800e9d8:	b909      	cbnz	r1, 800e9de <__sccl+0x46>
 800e9da:	4628      	mov	r0, r5
 800e9dc:	e7f0      	b.n	800e9c0 <__sccl+0x28>
 800e9de:	460b      	mov	r3, r1
 800e9e0:	e7f1      	b.n	800e9c6 <__sccl+0x2e>
 800e9e2:	786e      	ldrb	r6, [r5, #1]
 800e9e4:	2e5d      	cmp	r6, #93	; 0x5d
 800e9e6:	d0fa      	beq.n	800e9de <__sccl+0x46>
 800e9e8:	42b3      	cmp	r3, r6
 800e9ea:	dcf8      	bgt.n	800e9de <__sccl+0x46>
 800e9ec:	3502      	adds	r5, #2
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	3101      	adds	r1, #1
 800e9f2:	428e      	cmp	r6, r1
 800e9f4:	5462      	strb	r2, [r4, r1]
 800e9f6:	dcfb      	bgt.n	800e9f0 <__sccl+0x58>
 800e9f8:	1af1      	subs	r1, r6, r3
 800e9fa:	3901      	subs	r1, #1
 800e9fc:	1c58      	adds	r0, r3, #1
 800e9fe:	42b3      	cmp	r3, r6
 800ea00:	bfa8      	it	ge
 800ea02:	2100      	movge	r1, #0
 800ea04:	1843      	adds	r3, r0, r1
 800ea06:	e7e0      	b.n	800e9ca <__sccl+0x32>

0800ea08 <strncmp>:
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	b17a      	cbz	r2, 800ea2c <strncmp+0x24>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	3901      	subs	r1, #1
 800ea10:	1884      	adds	r4, r0, r2
 800ea12:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ea1a:	4290      	cmp	r0, r2
 800ea1c:	d101      	bne.n	800ea22 <strncmp+0x1a>
 800ea1e:	42a3      	cmp	r3, r4
 800ea20:	d101      	bne.n	800ea26 <strncmp+0x1e>
 800ea22:	1a80      	subs	r0, r0, r2
 800ea24:	bd10      	pop	{r4, pc}
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d1f3      	bne.n	800ea12 <strncmp+0xa>
 800ea2a:	e7fa      	b.n	800ea22 <strncmp+0x1a>
 800ea2c:	4610      	mov	r0, r2
 800ea2e:	e7f9      	b.n	800ea24 <strncmp+0x1c>

0800ea30 <_strtoul_l.constprop.0>:
 800ea30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea34:	4f36      	ldr	r7, [pc, #216]	; (800eb10 <_strtoul_l.constprop.0+0xe0>)
 800ea36:	4686      	mov	lr, r0
 800ea38:	460d      	mov	r5, r1
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea40:	5de6      	ldrb	r6, [r4, r7]
 800ea42:	f016 0608 	ands.w	r6, r6, #8
 800ea46:	d1f8      	bne.n	800ea3a <_strtoul_l.constprop.0+0xa>
 800ea48:	2c2d      	cmp	r4, #45	; 0x2d
 800ea4a:	d12f      	bne.n	800eaac <_strtoul_l.constprop.0+0x7c>
 800ea4c:	782c      	ldrb	r4, [r5, #0]
 800ea4e:	2601      	movs	r6, #1
 800ea50:	1c85      	adds	r5, r0, #2
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d057      	beq.n	800eb06 <_strtoul_l.constprop.0+0xd6>
 800ea56:	2b10      	cmp	r3, #16
 800ea58:	d109      	bne.n	800ea6e <_strtoul_l.constprop.0+0x3e>
 800ea5a:	2c30      	cmp	r4, #48	; 0x30
 800ea5c:	d107      	bne.n	800ea6e <_strtoul_l.constprop.0+0x3e>
 800ea5e:	7828      	ldrb	r0, [r5, #0]
 800ea60:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ea64:	2858      	cmp	r0, #88	; 0x58
 800ea66:	d149      	bne.n	800eafc <_strtoul_l.constprop.0+0xcc>
 800ea68:	786c      	ldrb	r4, [r5, #1]
 800ea6a:	2310      	movs	r3, #16
 800ea6c:	3502      	adds	r5, #2
 800ea6e:	f04f 38ff 	mov.w	r8, #4294967295
 800ea72:	2700      	movs	r7, #0
 800ea74:	fbb8 f8f3 	udiv	r8, r8, r3
 800ea78:	fb03 f908 	mul.w	r9, r3, r8
 800ea7c:	ea6f 0909 	mvn.w	r9, r9
 800ea80:	4638      	mov	r0, r7
 800ea82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ea86:	f1bc 0f09 	cmp.w	ip, #9
 800ea8a:	d814      	bhi.n	800eab6 <_strtoul_l.constprop.0+0x86>
 800ea8c:	4664      	mov	r4, ip
 800ea8e:	42a3      	cmp	r3, r4
 800ea90:	dd22      	ble.n	800ead8 <_strtoul_l.constprop.0+0xa8>
 800ea92:	2f00      	cmp	r7, #0
 800ea94:	db1d      	blt.n	800ead2 <_strtoul_l.constprop.0+0xa2>
 800ea96:	4580      	cmp	r8, r0
 800ea98:	d31b      	bcc.n	800ead2 <_strtoul_l.constprop.0+0xa2>
 800ea9a:	d101      	bne.n	800eaa0 <_strtoul_l.constprop.0+0x70>
 800ea9c:	45a1      	cmp	r9, r4
 800ea9e:	db18      	blt.n	800ead2 <_strtoul_l.constprop.0+0xa2>
 800eaa0:	fb00 4003 	mla	r0, r0, r3, r4
 800eaa4:	2701      	movs	r7, #1
 800eaa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eaaa:	e7ea      	b.n	800ea82 <_strtoul_l.constprop.0+0x52>
 800eaac:	2c2b      	cmp	r4, #43	; 0x2b
 800eaae:	bf04      	itt	eq
 800eab0:	782c      	ldrbeq	r4, [r5, #0]
 800eab2:	1c85      	addeq	r5, r0, #2
 800eab4:	e7cd      	b.n	800ea52 <_strtoul_l.constprop.0+0x22>
 800eab6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800eaba:	f1bc 0f19 	cmp.w	ip, #25
 800eabe:	d801      	bhi.n	800eac4 <_strtoul_l.constprop.0+0x94>
 800eac0:	3c37      	subs	r4, #55	; 0x37
 800eac2:	e7e4      	b.n	800ea8e <_strtoul_l.constprop.0+0x5e>
 800eac4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800eac8:	f1bc 0f19 	cmp.w	ip, #25
 800eacc:	d804      	bhi.n	800ead8 <_strtoul_l.constprop.0+0xa8>
 800eace:	3c57      	subs	r4, #87	; 0x57
 800ead0:	e7dd      	b.n	800ea8e <_strtoul_l.constprop.0+0x5e>
 800ead2:	f04f 37ff 	mov.w	r7, #4294967295
 800ead6:	e7e6      	b.n	800eaa6 <_strtoul_l.constprop.0+0x76>
 800ead8:	2f00      	cmp	r7, #0
 800eada:	da07      	bge.n	800eaec <_strtoul_l.constprop.0+0xbc>
 800eadc:	2322      	movs	r3, #34	; 0x22
 800eade:	f8ce 3000 	str.w	r3, [lr]
 800eae2:	f04f 30ff 	mov.w	r0, #4294967295
 800eae6:	b932      	cbnz	r2, 800eaf6 <_strtoul_l.constprop.0+0xc6>
 800eae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaec:	b106      	cbz	r6, 800eaf0 <_strtoul_l.constprop.0+0xc0>
 800eaee:	4240      	negs	r0, r0
 800eaf0:	2a00      	cmp	r2, #0
 800eaf2:	d0f9      	beq.n	800eae8 <_strtoul_l.constprop.0+0xb8>
 800eaf4:	b107      	cbz	r7, 800eaf8 <_strtoul_l.constprop.0+0xc8>
 800eaf6:	1e69      	subs	r1, r5, #1
 800eaf8:	6011      	str	r1, [r2, #0]
 800eafa:	e7f5      	b.n	800eae8 <_strtoul_l.constprop.0+0xb8>
 800eafc:	2430      	movs	r4, #48	; 0x30
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1b5      	bne.n	800ea6e <_strtoul_l.constprop.0+0x3e>
 800eb02:	2308      	movs	r3, #8
 800eb04:	e7b3      	b.n	800ea6e <_strtoul_l.constprop.0+0x3e>
 800eb06:	2c30      	cmp	r4, #48	; 0x30
 800eb08:	d0a9      	beq.n	800ea5e <_strtoul_l.constprop.0+0x2e>
 800eb0a:	230a      	movs	r3, #10
 800eb0c:	e7af      	b.n	800ea6e <_strtoul_l.constprop.0+0x3e>
 800eb0e:	bf00      	nop
 800eb10:	0800fd59 	.word	0x0800fd59

0800eb14 <_strtoul_r>:
 800eb14:	f7ff bf8c 	b.w	800ea30 <_strtoul_l.constprop.0>

0800eb18 <__submore>:
 800eb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1c:	460c      	mov	r4, r1
 800eb1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eb20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb24:	4299      	cmp	r1, r3
 800eb26:	d11d      	bne.n	800eb64 <__submore+0x4c>
 800eb28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eb2c:	f7fb fd3c 	bl	800a5a8 <_malloc_r>
 800eb30:	b918      	cbnz	r0, 800eb3a <__submore+0x22>
 800eb32:	f04f 30ff 	mov.w	r0, #4294967295
 800eb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb3e:	63a3      	str	r3, [r4, #56]	; 0x38
 800eb40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800eb44:	6360      	str	r0, [r4, #52]	; 0x34
 800eb46:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800eb4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800eb4e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800eb52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800eb56:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800eb5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800eb5e:	6020      	str	r0, [r4, #0]
 800eb60:	2000      	movs	r0, #0
 800eb62:	e7e8      	b.n	800eb36 <__submore+0x1e>
 800eb64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800eb66:	0077      	lsls	r7, r6, #1
 800eb68:	463a      	mov	r2, r7
 800eb6a:	f000 fa21 	bl	800efb0 <_realloc_r>
 800eb6e:	4605      	mov	r5, r0
 800eb70:	2800      	cmp	r0, #0
 800eb72:	d0de      	beq.n	800eb32 <__submore+0x1a>
 800eb74:	eb00 0806 	add.w	r8, r0, r6
 800eb78:	4601      	mov	r1, r0
 800eb7a:	4632      	mov	r2, r6
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	f7fb fc91 	bl	800a4a4 <memcpy>
 800eb82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800eb86:	f8c4 8000 	str.w	r8, [r4]
 800eb8a:	e7e9      	b.n	800eb60 <__submore+0x48>

0800eb8c <__ascii_wctomb>:
 800eb8c:	b149      	cbz	r1, 800eba2 <__ascii_wctomb+0x16>
 800eb8e:	2aff      	cmp	r2, #255	; 0xff
 800eb90:	bf85      	ittet	hi
 800eb92:	238a      	movhi	r3, #138	; 0x8a
 800eb94:	6003      	strhi	r3, [r0, #0]
 800eb96:	700a      	strbls	r2, [r1, #0]
 800eb98:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb9c:	bf98      	it	ls
 800eb9e:	2001      	movls	r0, #1
 800eba0:	4770      	bx	lr
 800eba2:	4608      	mov	r0, r1
 800eba4:	4770      	bx	lr
	...

0800eba8 <__assert_func>:
 800eba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebaa:	4614      	mov	r4, r2
 800ebac:	461a      	mov	r2, r3
 800ebae:	4b09      	ldr	r3, [pc, #36]	; (800ebd4 <__assert_func+0x2c>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4605      	mov	r5, r0
 800ebb4:	68d8      	ldr	r0, [r3, #12]
 800ebb6:	b14c      	cbz	r4, 800ebcc <__assert_func+0x24>
 800ebb8:	4b07      	ldr	r3, [pc, #28]	; (800ebd8 <__assert_func+0x30>)
 800ebba:	9100      	str	r1, [sp, #0]
 800ebbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ebc0:	4906      	ldr	r1, [pc, #24]	; (800ebdc <__assert_func+0x34>)
 800ebc2:	462b      	mov	r3, r5
 800ebc4:	f000 f9a6 	bl	800ef14 <fiprintf>
 800ebc8:	f000 fc3a 	bl	800f440 <abort>
 800ebcc:	4b04      	ldr	r3, [pc, #16]	; (800ebe0 <__assert_func+0x38>)
 800ebce:	461c      	mov	r4, r3
 800ebd0:	e7f3      	b.n	800ebba <__assert_func+0x12>
 800ebd2:	bf00      	nop
 800ebd4:	200000fc 	.word	0x200000fc
 800ebd8:	080100e8 	.word	0x080100e8
 800ebdc:	080100f5 	.word	0x080100f5
 800ebe0:	08010123 	.word	0x08010123

0800ebe4 <__sflush_r>:
 800ebe4:	898a      	ldrh	r2, [r1, #12]
 800ebe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebea:	4605      	mov	r5, r0
 800ebec:	0710      	lsls	r0, r2, #28
 800ebee:	460c      	mov	r4, r1
 800ebf0:	d458      	bmi.n	800eca4 <__sflush_r+0xc0>
 800ebf2:	684b      	ldr	r3, [r1, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	dc05      	bgt.n	800ec04 <__sflush_r+0x20>
 800ebf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	dc02      	bgt.n	800ec04 <__sflush_r+0x20>
 800ebfe:	2000      	movs	r0, #0
 800ec00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec06:	2e00      	cmp	r6, #0
 800ec08:	d0f9      	beq.n	800ebfe <__sflush_r+0x1a>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec10:	682f      	ldr	r7, [r5, #0]
 800ec12:	602b      	str	r3, [r5, #0]
 800ec14:	d032      	beq.n	800ec7c <__sflush_r+0x98>
 800ec16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec18:	89a3      	ldrh	r3, [r4, #12]
 800ec1a:	075a      	lsls	r2, r3, #29
 800ec1c:	d505      	bpl.n	800ec2a <__sflush_r+0x46>
 800ec1e:	6863      	ldr	r3, [r4, #4]
 800ec20:	1ac0      	subs	r0, r0, r3
 800ec22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec24:	b10b      	cbz	r3, 800ec2a <__sflush_r+0x46>
 800ec26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec28:	1ac0      	subs	r0, r0, r3
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec30:	6a21      	ldr	r1, [r4, #32]
 800ec32:	4628      	mov	r0, r5
 800ec34:	47b0      	blx	r6
 800ec36:	1c43      	adds	r3, r0, #1
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	d106      	bne.n	800ec4a <__sflush_r+0x66>
 800ec3c:	6829      	ldr	r1, [r5, #0]
 800ec3e:	291d      	cmp	r1, #29
 800ec40:	d82c      	bhi.n	800ec9c <__sflush_r+0xb8>
 800ec42:	4a2a      	ldr	r2, [pc, #168]	; (800ecec <__sflush_r+0x108>)
 800ec44:	40ca      	lsrs	r2, r1
 800ec46:	07d6      	lsls	r6, r2, #31
 800ec48:	d528      	bpl.n	800ec9c <__sflush_r+0xb8>
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	6062      	str	r2, [r4, #4]
 800ec4e:	04d9      	lsls	r1, r3, #19
 800ec50:	6922      	ldr	r2, [r4, #16]
 800ec52:	6022      	str	r2, [r4, #0]
 800ec54:	d504      	bpl.n	800ec60 <__sflush_r+0x7c>
 800ec56:	1c42      	adds	r2, r0, #1
 800ec58:	d101      	bne.n	800ec5e <__sflush_r+0x7a>
 800ec5a:	682b      	ldr	r3, [r5, #0]
 800ec5c:	b903      	cbnz	r3, 800ec60 <__sflush_r+0x7c>
 800ec5e:	6560      	str	r0, [r4, #84]	; 0x54
 800ec60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec62:	602f      	str	r7, [r5, #0]
 800ec64:	2900      	cmp	r1, #0
 800ec66:	d0ca      	beq.n	800ebfe <__sflush_r+0x1a>
 800ec68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec6c:	4299      	cmp	r1, r3
 800ec6e:	d002      	beq.n	800ec76 <__sflush_r+0x92>
 800ec70:	4628      	mov	r0, r5
 800ec72:	f7fb fc2d 	bl	800a4d0 <_free_r>
 800ec76:	2000      	movs	r0, #0
 800ec78:	6360      	str	r0, [r4, #52]	; 0x34
 800ec7a:	e7c1      	b.n	800ec00 <__sflush_r+0x1c>
 800ec7c:	6a21      	ldr	r1, [r4, #32]
 800ec7e:	2301      	movs	r3, #1
 800ec80:	4628      	mov	r0, r5
 800ec82:	47b0      	blx	r6
 800ec84:	1c41      	adds	r1, r0, #1
 800ec86:	d1c7      	bne.n	800ec18 <__sflush_r+0x34>
 800ec88:	682b      	ldr	r3, [r5, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d0c4      	beq.n	800ec18 <__sflush_r+0x34>
 800ec8e:	2b1d      	cmp	r3, #29
 800ec90:	d001      	beq.n	800ec96 <__sflush_r+0xb2>
 800ec92:	2b16      	cmp	r3, #22
 800ec94:	d101      	bne.n	800ec9a <__sflush_r+0xb6>
 800ec96:	602f      	str	r7, [r5, #0]
 800ec98:	e7b1      	b.n	800ebfe <__sflush_r+0x1a>
 800ec9a:	89a3      	ldrh	r3, [r4, #12]
 800ec9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eca0:	81a3      	strh	r3, [r4, #12]
 800eca2:	e7ad      	b.n	800ec00 <__sflush_r+0x1c>
 800eca4:	690f      	ldr	r7, [r1, #16]
 800eca6:	2f00      	cmp	r7, #0
 800eca8:	d0a9      	beq.n	800ebfe <__sflush_r+0x1a>
 800ecaa:	0793      	lsls	r3, r2, #30
 800ecac:	680e      	ldr	r6, [r1, #0]
 800ecae:	bf08      	it	eq
 800ecb0:	694b      	ldreq	r3, [r1, #20]
 800ecb2:	600f      	str	r7, [r1, #0]
 800ecb4:	bf18      	it	ne
 800ecb6:	2300      	movne	r3, #0
 800ecb8:	eba6 0807 	sub.w	r8, r6, r7
 800ecbc:	608b      	str	r3, [r1, #8]
 800ecbe:	f1b8 0f00 	cmp.w	r8, #0
 800ecc2:	dd9c      	ble.n	800ebfe <__sflush_r+0x1a>
 800ecc4:	6a21      	ldr	r1, [r4, #32]
 800ecc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ecc8:	4643      	mov	r3, r8
 800ecca:	463a      	mov	r2, r7
 800eccc:	4628      	mov	r0, r5
 800ecce:	47b0      	blx	r6
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	dc06      	bgt.n	800ece2 <__sflush_r+0xfe>
 800ecd4:	89a3      	ldrh	r3, [r4, #12]
 800ecd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecda:	81a3      	strh	r3, [r4, #12]
 800ecdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ece0:	e78e      	b.n	800ec00 <__sflush_r+0x1c>
 800ece2:	4407      	add	r7, r0
 800ece4:	eba8 0800 	sub.w	r8, r8, r0
 800ece8:	e7e9      	b.n	800ecbe <__sflush_r+0xda>
 800ecea:	bf00      	nop
 800ecec:	20400001 	.word	0x20400001

0800ecf0 <_fflush_r>:
 800ecf0:	b538      	push	{r3, r4, r5, lr}
 800ecf2:	690b      	ldr	r3, [r1, #16]
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	460c      	mov	r4, r1
 800ecf8:	b913      	cbnz	r3, 800ed00 <_fflush_r+0x10>
 800ecfa:	2500      	movs	r5, #0
 800ecfc:	4628      	mov	r0, r5
 800ecfe:	bd38      	pop	{r3, r4, r5, pc}
 800ed00:	b118      	cbz	r0, 800ed0a <_fflush_r+0x1a>
 800ed02:	6983      	ldr	r3, [r0, #24]
 800ed04:	b90b      	cbnz	r3, 800ed0a <_fflush_r+0x1a>
 800ed06:	f000 f887 	bl	800ee18 <__sinit>
 800ed0a:	4b14      	ldr	r3, [pc, #80]	; (800ed5c <_fflush_r+0x6c>)
 800ed0c:	429c      	cmp	r4, r3
 800ed0e:	d11b      	bne.n	800ed48 <_fflush_r+0x58>
 800ed10:	686c      	ldr	r4, [r5, #4]
 800ed12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d0ef      	beq.n	800ecfa <_fflush_r+0xa>
 800ed1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed1c:	07d0      	lsls	r0, r2, #31
 800ed1e:	d404      	bmi.n	800ed2a <_fflush_r+0x3a>
 800ed20:	0599      	lsls	r1, r3, #22
 800ed22:	d402      	bmi.n	800ed2a <_fflush_r+0x3a>
 800ed24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed26:	f000 f927 	bl	800ef78 <__retarget_lock_acquire_recursive>
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	f7ff ff59 	bl	800ebe4 <__sflush_r>
 800ed32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed34:	07da      	lsls	r2, r3, #31
 800ed36:	4605      	mov	r5, r0
 800ed38:	d4e0      	bmi.n	800ecfc <_fflush_r+0xc>
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	059b      	lsls	r3, r3, #22
 800ed3e:	d4dd      	bmi.n	800ecfc <_fflush_r+0xc>
 800ed40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed42:	f000 f91a 	bl	800ef7a <__retarget_lock_release_recursive>
 800ed46:	e7d9      	b.n	800ecfc <_fflush_r+0xc>
 800ed48:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <_fflush_r+0x70>)
 800ed4a:	429c      	cmp	r4, r3
 800ed4c:	d101      	bne.n	800ed52 <_fflush_r+0x62>
 800ed4e:	68ac      	ldr	r4, [r5, #8]
 800ed50:	e7df      	b.n	800ed12 <_fflush_r+0x22>
 800ed52:	4b04      	ldr	r3, [pc, #16]	; (800ed64 <_fflush_r+0x74>)
 800ed54:	429c      	cmp	r4, r3
 800ed56:	bf08      	it	eq
 800ed58:	68ec      	ldreq	r4, [r5, #12]
 800ed5a:	e7da      	b.n	800ed12 <_fflush_r+0x22>
 800ed5c:	08010144 	.word	0x08010144
 800ed60:	08010164 	.word	0x08010164
 800ed64:	08010124 	.word	0x08010124

0800ed68 <std>:
 800ed68:	2300      	movs	r3, #0
 800ed6a:	b510      	push	{r4, lr}
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ed72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed76:	6083      	str	r3, [r0, #8]
 800ed78:	8181      	strh	r1, [r0, #12]
 800ed7a:	6643      	str	r3, [r0, #100]	; 0x64
 800ed7c:	81c2      	strh	r2, [r0, #14]
 800ed7e:	6183      	str	r3, [r0, #24]
 800ed80:	4619      	mov	r1, r3
 800ed82:	2208      	movs	r2, #8
 800ed84:	305c      	adds	r0, #92	; 0x5c
 800ed86:	f7fb fb9b 	bl	800a4c0 <memset>
 800ed8a:	4b05      	ldr	r3, [pc, #20]	; (800eda0 <std+0x38>)
 800ed8c:	6263      	str	r3, [r4, #36]	; 0x24
 800ed8e:	4b05      	ldr	r3, [pc, #20]	; (800eda4 <std+0x3c>)
 800ed90:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed92:	4b05      	ldr	r3, [pc, #20]	; (800eda8 <std+0x40>)
 800ed94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed96:	4b05      	ldr	r3, [pc, #20]	; (800edac <std+0x44>)
 800ed98:	6224      	str	r4, [r4, #32]
 800ed9a:	6323      	str	r3, [r4, #48]	; 0x30
 800ed9c:	bd10      	pop	{r4, pc}
 800ed9e:	bf00      	nop
 800eda0:	0800b449 	.word	0x0800b449
 800eda4:	0800b46f 	.word	0x0800b46f
 800eda8:	0800b4a7 	.word	0x0800b4a7
 800edac:	0800b4cb 	.word	0x0800b4cb

0800edb0 <_cleanup_r>:
 800edb0:	4901      	ldr	r1, [pc, #4]	; (800edb8 <_cleanup_r+0x8>)
 800edb2:	f000 b8c1 	b.w	800ef38 <_fwalk_reent>
 800edb6:	bf00      	nop
 800edb8:	0800ecf1 	.word	0x0800ecf1

0800edbc <__sfmoreglue>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	2268      	movs	r2, #104	; 0x68
 800edc0:	1e4d      	subs	r5, r1, #1
 800edc2:	4355      	muls	r5, r2
 800edc4:	460e      	mov	r6, r1
 800edc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800edca:	f7fb fbed 	bl	800a5a8 <_malloc_r>
 800edce:	4604      	mov	r4, r0
 800edd0:	b140      	cbz	r0, 800ede4 <__sfmoreglue+0x28>
 800edd2:	2100      	movs	r1, #0
 800edd4:	e9c0 1600 	strd	r1, r6, [r0]
 800edd8:	300c      	adds	r0, #12
 800edda:	60a0      	str	r0, [r4, #8]
 800eddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ede0:	f7fb fb6e 	bl	800a4c0 <memset>
 800ede4:	4620      	mov	r0, r4
 800ede6:	bd70      	pop	{r4, r5, r6, pc}

0800ede8 <__sfp_lock_acquire>:
 800ede8:	4801      	ldr	r0, [pc, #4]	; (800edf0 <__sfp_lock_acquire+0x8>)
 800edea:	f000 b8c5 	b.w	800ef78 <__retarget_lock_acquire_recursive>
 800edee:	bf00      	nop
 800edf0:	20002e39 	.word	0x20002e39

0800edf4 <__sfp_lock_release>:
 800edf4:	4801      	ldr	r0, [pc, #4]	; (800edfc <__sfp_lock_release+0x8>)
 800edf6:	f000 b8c0 	b.w	800ef7a <__retarget_lock_release_recursive>
 800edfa:	bf00      	nop
 800edfc:	20002e39 	.word	0x20002e39

0800ee00 <__sinit_lock_acquire>:
 800ee00:	4801      	ldr	r0, [pc, #4]	; (800ee08 <__sinit_lock_acquire+0x8>)
 800ee02:	f000 b8b9 	b.w	800ef78 <__retarget_lock_acquire_recursive>
 800ee06:	bf00      	nop
 800ee08:	20002e3a 	.word	0x20002e3a

0800ee0c <__sinit_lock_release>:
 800ee0c:	4801      	ldr	r0, [pc, #4]	; (800ee14 <__sinit_lock_release+0x8>)
 800ee0e:	f000 b8b4 	b.w	800ef7a <__retarget_lock_release_recursive>
 800ee12:	bf00      	nop
 800ee14:	20002e3a 	.word	0x20002e3a

0800ee18 <__sinit>:
 800ee18:	b510      	push	{r4, lr}
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	f7ff fff0 	bl	800ee00 <__sinit_lock_acquire>
 800ee20:	69a3      	ldr	r3, [r4, #24]
 800ee22:	b11b      	cbz	r3, 800ee2c <__sinit+0x14>
 800ee24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee28:	f7ff bff0 	b.w	800ee0c <__sinit_lock_release>
 800ee2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee30:	6523      	str	r3, [r4, #80]	; 0x50
 800ee32:	4b13      	ldr	r3, [pc, #76]	; (800ee80 <__sinit+0x68>)
 800ee34:	4a13      	ldr	r2, [pc, #76]	; (800ee84 <__sinit+0x6c>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee3a:	42a3      	cmp	r3, r4
 800ee3c:	bf04      	itt	eq
 800ee3e:	2301      	moveq	r3, #1
 800ee40:	61a3      	streq	r3, [r4, #24]
 800ee42:	4620      	mov	r0, r4
 800ee44:	f000 f820 	bl	800ee88 <__sfp>
 800ee48:	6060      	str	r0, [r4, #4]
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f000 f81c 	bl	800ee88 <__sfp>
 800ee50:	60a0      	str	r0, [r4, #8]
 800ee52:	4620      	mov	r0, r4
 800ee54:	f000 f818 	bl	800ee88 <__sfp>
 800ee58:	2200      	movs	r2, #0
 800ee5a:	60e0      	str	r0, [r4, #12]
 800ee5c:	2104      	movs	r1, #4
 800ee5e:	6860      	ldr	r0, [r4, #4]
 800ee60:	f7ff ff82 	bl	800ed68 <std>
 800ee64:	68a0      	ldr	r0, [r4, #8]
 800ee66:	2201      	movs	r2, #1
 800ee68:	2109      	movs	r1, #9
 800ee6a:	f7ff ff7d 	bl	800ed68 <std>
 800ee6e:	68e0      	ldr	r0, [r4, #12]
 800ee70:	2202      	movs	r2, #2
 800ee72:	2112      	movs	r1, #18
 800ee74:	f7ff ff78 	bl	800ed68 <std>
 800ee78:	2301      	movs	r3, #1
 800ee7a:	61a3      	str	r3, [r4, #24]
 800ee7c:	e7d2      	b.n	800ee24 <__sinit+0xc>
 800ee7e:	bf00      	nop
 800ee80:	0800fccc 	.word	0x0800fccc
 800ee84:	0800edb1 	.word	0x0800edb1

0800ee88 <__sfp>:
 800ee88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee8a:	4607      	mov	r7, r0
 800ee8c:	f7ff ffac 	bl	800ede8 <__sfp_lock_acquire>
 800ee90:	4b1e      	ldr	r3, [pc, #120]	; (800ef0c <__sfp+0x84>)
 800ee92:	681e      	ldr	r6, [r3, #0]
 800ee94:	69b3      	ldr	r3, [r6, #24]
 800ee96:	b913      	cbnz	r3, 800ee9e <__sfp+0x16>
 800ee98:	4630      	mov	r0, r6
 800ee9a:	f7ff ffbd 	bl	800ee18 <__sinit>
 800ee9e:	3648      	adds	r6, #72	; 0x48
 800eea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eea4:	3b01      	subs	r3, #1
 800eea6:	d503      	bpl.n	800eeb0 <__sfp+0x28>
 800eea8:	6833      	ldr	r3, [r6, #0]
 800eeaa:	b30b      	cbz	r3, 800eef0 <__sfp+0x68>
 800eeac:	6836      	ldr	r6, [r6, #0]
 800eeae:	e7f7      	b.n	800eea0 <__sfp+0x18>
 800eeb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eeb4:	b9d5      	cbnz	r5, 800eeec <__sfp+0x64>
 800eeb6:	4b16      	ldr	r3, [pc, #88]	; (800ef10 <__sfp+0x88>)
 800eeb8:	60e3      	str	r3, [r4, #12]
 800eeba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eebe:	6665      	str	r5, [r4, #100]	; 0x64
 800eec0:	f000 f859 	bl	800ef76 <__retarget_lock_init_recursive>
 800eec4:	f7ff ff96 	bl	800edf4 <__sfp_lock_release>
 800eec8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eecc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eed0:	6025      	str	r5, [r4, #0]
 800eed2:	61a5      	str	r5, [r4, #24]
 800eed4:	2208      	movs	r2, #8
 800eed6:	4629      	mov	r1, r5
 800eed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eedc:	f7fb faf0 	bl	800a4c0 <memset>
 800eee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eee8:	4620      	mov	r0, r4
 800eeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeec:	3468      	adds	r4, #104	; 0x68
 800eeee:	e7d9      	b.n	800eea4 <__sfp+0x1c>
 800eef0:	2104      	movs	r1, #4
 800eef2:	4638      	mov	r0, r7
 800eef4:	f7ff ff62 	bl	800edbc <__sfmoreglue>
 800eef8:	4604      	mov	r4, r0
 800eefa:	6030      	str	r0, [r6, #0]
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d1d5      	bne.n	800eeac <__sfp+0x24>
 800ef00:	f7ff ff78 	bl	800edf4 <__sfp_lock_release>
 800ef04:	230c      	movs	r3, #12
 800ef06:	603b      	str	r3, [r7, #0]
 800ef08:	e7ee      	b.n	800eee8 <__sfp+0x60>
 800ef0a:	bf00      	nop
 800ef0c:	0800fccc 	.word	0x0800fccc
 800ef10:	ffff0001 	.word	0xffff0001

0800ef14 <fiprintf>:
 800ef14:	b40e      	push	{r1, r2, r3}
 800ef16:	b503      	push	{r0, r1, lr}
 800ef18:	4601      	mov	r1, r0
 800ef1a:	ab03      	add	r3, sp, #12
 800ef1c:	4805      	ldr	r0, [pc, #20]	; (800ef34 <fiprintf+0x20>)
 800ef1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef22:	6800      	ldr	r0, [r0, #0]
 800ef24:	9301      	str	r3, [sp, #4]
 800ef26:	f000 f89b 	bl	800f060 <_vfiprintf_r>
 800ef2a:	b002      	add	sp, #8
 800ef2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef30:	b003      	add	sp, #12
 800ef32:	4770      	bx	lr
 800ef34:	200000fc 	.word	0x200000fc

0800ef38 <_fwalk_reent>:
 800ef38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef3c:	4606      	mov	r6, r0
 800ef3e:	4688      	mov	r8, r1
 800ef40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef44:	2700      	movs	r7, #0
 800ef46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef4a:	f1b9 0901 	subs.w	r9, r9, #1
 800ef4e:	d505      	bpl.n	800ef5c <_fwalk_reent+0x24>
 800ef50:	6824      	ldr	r4, [r4, #0]
 800ef52:	2c00      	cmp	r4, #0
 800ef54:	d1f7      	bne.n	800ef46 <_fwalk_reent+0xe>
 800ef56:	4638      	mov	r0, r7
 800ef58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef5c:	89ab      	ldrh	r3, [r5, #12]
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d907      	bls.n	800ef72 <_fwalk_reent+0x3a>
 800ef62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef66:	3301      	adds	r3, #1
 800ef68:	d003      	beq.n	800ef72 <_fwalk_reent+0x3a>
 800ef6a:	4629      	mov	r1, r5
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	47c0      	blx	r8
 800ef70:	4307      	orrs	r7, r0
 800ef72:	3568      	adds	r5, #104	; 0x68
 800ef74:	e7e9      	b.n	800ef4a <_fwalk_reent+0x12>

0800ef76 <__retarget_lock_init_recursive>:
 800ef76:	4770      	bx	lr

0800ef78 <__retarget_lock_acquire_recursive>:
 800ef78:	4770      	bx	lr

0800ef7a <__retarget_lock_release_recursive>:
 800ef7a:	4770      	bx	lr

0800ef7c <memmove>:
 800ef7c:	4288      	cmp	r0, r1
 800ef7e:	b510      	push	{r4, lr}
 800ef80:	eb01 0402 	add.w	r4, r1, r2
 800ef84:	d902      	bls.n	800ef8c <memmove+0x10>
 800ef86:	4284      	cmp	r4, r0
 800ef88:	4623      	mov	r3, r4
 800ef8a:	d807      	bhi.n	800ef9c <memmove+0x20>
 800ef8c:	1e43      	subs	r3, r0, #1
 800ef8e:	42a1      	cmp	r1, r4
 800ef90:	d008      	beq.n	800efa4 <memmove+0x28>
 800ef92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef9a:	e7f8      	b.n	800ef8e <memmove+0x12>
 800ef9c:	4402      	add	r2, r0
 800ef9e:	4601      	mov	r1, r0
 800efa0:	428a      	cmp	r2, r1
 800efa2:	d100      	bne.n	800efa6 <memmove+0x2a>
 800efa4:	bd10      	pop	{r4, pc}
 800efa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efae:	e7f7      	b.n	800efa0 <memmove+0x24>

0800efb0 <_realloc_r>:
 800efb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb4:	4680      	mov	r8, r0
 800efb6:	4614      	mov	r4, r2
 800efb8:	460e      	mov	r6, r1
 800efba:	b921      	cbnz	r1, 800efc6 <_realloc_r+0x16>
 800efbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efc0:	4611      	mov	r1, r2
 800efc2:	f7fb baf1 	b.w	800a5a8 <_malloc_r>
 800efc6:	b92a      	cbnz	r2, 800efd4 <_realloc_r+0x24>
 800efc8:	f7fb fa82 	bl	800a4d0 <_free_r>
 800efcc:	4625      	mov	r5, r4
 800efce:	4628      	mov	r0, r5
 800efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd4:	f000 faa0 	bl	800f518 <_malloc_usable_size_r>
 800efd8:	4284      	cmp	r4, r0
 800efda:	4607      	mov	r7, r0
 800efdc:	d802      	bhi.n	800efe4 <_realloc_r+0x34>
 800efde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efe2:	d812      	bhi.n	800f00a <_realloc_r+0x5a>
 800efe4:	4621      	mov	r1, r4
 800efe6:	4640      	mov	r0, r8
 800efe8:	f7fb fade 	bl	800a5a8 <_malloc_r>
 800efec:	4605      	mov	r5, r0
 800efee:	2800      	cmp	r0, #0
 800eff0:	d0ed      	beq.n	800efce <_realloc_r+0x1e>
 800eff2:	42bc      	cmp	r4, r7
 800eff4:	4622      	mov	r2, r4
 800eff6:	4631      	mov	r1, r6
 800eff8:	bf28      	it	cs
 800effa:	463a      	movcs	r2, r7
 800effc:	f7fb fa52 	bl	800a4a4 <memcpy>
 800f000:	4631      	mov	r1, r6
 800f002:	4640      	mov	r0, r8
 800f004:	f7fb fa64 	bl	800a4d0 <_free_r>
 800f008:	e7e1      	b.n	800efce <_realloc_r+0x1e>
 800f00a:	4635      	mov	r5, r6
 800f00c:	e7df      	b.n	800efce <_realloc_r+0x1e>

0800f00e <__sfputc_r>:
 800f00e:	6893      	ldr	r3, [r2, #8]
 800f010:	3b01      	subs	r3, #1
 800f012:	2b00      	cmp	r3, #0
 800f014:	b410      	push	{r4}
 800f016:	6093      	str	r3, [r2, #8]
 800f018:	da08      	bge.n	800f02c <__sfputc_r+0x1e>
 800f01a:	6994      	ldr	r4, [r2, #24]
 800f01c:	42a3      	cmp	r3, r4
 800f01e:	db01      	blt.n	800f024 <__sfputc_r+0x16>
 800f020:	290a      	cmp	r1, #10
 800f022:	d103      	bne.n	800f02c <__sfputc_r+0x1e>
 800f024:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f028:	f000 b94a 	b.w	800f2c0 <__swbuf_r>
 800f02c:	6813      	ldr	r3, [r2, #0]
 800f02e:	1c58      	adds	r0, r3, #1
 800f030:	6010      	str	r0, [r2, #0]
 800f032:	7019      	strb	r1, [r3, #0]
 800f034:	4608      	mov	r0, r1
 800f036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <__sfputs_r>:
 800f03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03e:	4606      	mov	r6, r0
 800f040:	460f      	mov	r7, r1
 800f042:	4614      	mov	r4, r2
 800f044:	18d5      	adds	r5, r2, r3
 800f046:	42ac      	cmp	r4, r5
 800f048:	d101      	bne.n	800f04e <__sfputs_r+0x12>
 800f04a:	2000      	movs	r0, #0
 800f04c:	e007      	b.n	800f05e <__sfputs_r+0x22>
 800f04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f052:	463a      	mov	r2, r7
 800f054:	4630      	mov	r0, r6
 800f056:	f7ff ffda 	bl	800f00e <__sfputc_r>
 800f05a:	1c43      	adds	r3, r0, #1
 800f05c:	d1f3      	bne.n	800f046 <__sfputs_r+0xa>
 800f05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f060 <_vfiprintf_r>:
 800f060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f064:	460d      	mov	r5, r1
 800f066:	b09d      	sub	sp, #116	; 0x74
 800f068:	4614      	mov	r4, r2
 800f06a:	4698      	mov	r8, r3
 800f06c:	4606      	mov	r6, r0
 800f06e:	b118      	cbz	r0, 800f078 <_vfiprintf_r+0x18>
 800f070:	6983      	ldr	r3, [r0, #24]
 800f072:	b90b      	cbnz	r3, 800f078 <_vfiprintf_r+0x18>
 800f074:	f7ff fed0 	bl	800ee18 <__sinit>
 800f078:	4b89      	ldr	r3, [pc, #548]	; (800f2a0 <_vfiprintf_r+0x240>)
 800f07a:	429d      	cmp	r5, r3
 800f07c:	d11b      	bne.n	800f0b6 <_vfiprintf_r+0x56>
 800f07e:	6875      	ldr	r5, [r6, #4]
 800f080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f082:	07d9      	lsls	r1, r3, #31
 800f084:	d405      	bmi.n	800f092 <_vfiprintf_r+0x32>
 800f086:	89ab      	ldrh	r3, [r5, #12]
 800f088:	059a      	lsls	r2, r3, #22
 800f08a:	d402      	bmi.n	800f092 <_vfiprintf_r+0x32>
 800f08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f08e:	f7ff ff73 	bl	800ef78 <__retarget_lock_acquire_recursive>
 800f092:	89ab      	ldrh	r3, [r5, #12]
 800f094:	071b      	lsls	r3, r3, #28
 800f096:	d501      	bpl.n	800f09c <_vfiprintf_r+0x3c>
 800f098:	692b      	ldr	r3, [r5, #16]
 800f09a:	b9eb      	cbnz	r3, 800f0d8 <_vfiprintf_r+0x78>
 800f09c:	4629      	mov	r1, r5
 800f09e:	4630      	mov	r0, r6
 800f0a0:	f000 f960 	bl	800f364 <__swsetup_r>
 800f0a4:	b1c0      	cbz	r0, 800f0d8 <_vfiprintf_r+0x78>
 800f0a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0a8:	07dc      	lsls	r4, r3, #31
 800f0aa:	d50e      	bpl.n	800f0ca <_vfiprintf_r+0x6a>
 800f0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b0:	b01d      	add	sp, #116	; 0x74
 800f0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b6:	4b7b      	ldr	r3, [pc, #492]	; (800f2a4 <_vfiprintf_r+0x244>)
 800f0b8:	429d      	cmp	r5, r3
 800f0ba:	d101      	bne.n	800f0c0 <_vfiprintf_r+0x60>
 800f0bc:	68b5      	ldr	r5, [r6, #8]
 800f0be:	e7df      	b.n	800f080 <_vfiprintf_r+0x20>
 800f0c0:	4b79      	ldr	r3, [pc, #484]	; (800f2a8 <_vfiprintf_r+0x248>)
 800f0c2:	429d      	cmp	r5, r3
 800f0c4:	bf08      	it	eq
 800f0c6:	68f5      	ldreq	r5, [r6, #12]
 800f0c8:	e7da      	b.n	800f080 <_vfiprintf_r+0x20>
 800f0ca:	89ab      	ldrh	r3, [r5, #12]
 800f0cc:	0598      	lsls	r0, r3, #22
 800f0ce:	d4ed      	bmi.n	800f0ac <_vfiprintf_r+0x4c>
 800f0d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0d2:	f7ff ff52 	bl	800ef7a <__retarget_lock_release_recursive>
 800f0d6:	e7e9      	b.n	800f0ac <_vfiprintf_r+0x4c>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	9309      	str	r3, [sp, #36]	; 0x24
 800f0dc:	2320      	movs	r3, #32
 800f0de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0e6:	2330      	movs	r3, #48	; 0x30
 800f0e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f2ac <_vfiprintf_r+0x24c>
 800f0ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0f0:	f04f 0901 	mov.w	r9, #1
 800f0f4:	4623      	mov	r3, r4
 800f0f6:	469a      	mov	sl, r3
 800f0f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0fc:	b10a      	cbz	r2, 800f102 <_vfiprintf_r+0xa2>
 800f0fe:	2a25      	cmp	r2, #37	; 0x25
 800f100:	d1f9      	bne.n	800f0f6 <_vfiprintf_r+0x96>
 800f102:	ebba 0b04 	subs.w	fp, sl, r4
 800f106:	d00b      	beq.n	800f120 <_vfiprintf_r+0xc0>
 800f108:	465b      	mov	r3, fp
 800f10a:	4622      	mov	r2, r4
 800f10c:	4629      	mov	r1, r5
 800f10e:	4630      	mov	r0, r6
 800f110:	f7ff ff94 	bl	800f03c <__sfputs_r>
 800f114:	3001      	adds	r0, #1
 800f116:	f000 80aa 	beq.w	800f26e <_vfiprintf_r+0x20e>
 800f11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f11c:	445a      	add	r2, fp
 800f11e:	9209      	str	r2, [sp, #36]	; 0x24
 800f120:	f89a 3000 	ldrb.w	r3, [sl]
 800f124:	2b00      	cmp	r3, #0
 800f126:	f000 80a2 	beq.w	800f26e <_vfiprintf_r+0x20e>
 800f12a:	2300      	movs	r3, #0
 800f12c:	f04f 32ff 	mov.w	r2, #4294967295
 800f130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f134:	f10a 0a01 	add.w	sl, sl, #1
 800f138:	9304      	str	r3, [sp, #16]
 800f13a:	9307      	str	r3, [sp, #28]
 800f13c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f140:	931a      	str	r3, [sp, #104]	; 0x68
 800f142:	4654      	mov	r4, sl
 800f144:	2205      	movs	r2, #5
 800f146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f14a:	4858      	ldr	r0, [pc, #352]	; (800f2ac <_vfiprintf_r+0x24c>)
 800f14c:	f7f1 f848 	bl	80001e0 <memchr>
 800f150:	9a04      	ldr	r2, [sp, #16]
 800f152:	b9d8      	cbnz	r0, 800f18c <_vfiprintf_r+0x12c>
 800f154:	06d1      	lsls	r1, r2, #27
 800f156:	bf44      	itt	mi
 800f158:	2320      	movmi	r3, #32
 800f15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f15e:	0713      	lsls	r3, r2, #28
 800f160:	bf44      	itt	mi
 800f162:	232b      	movmi	r3, #43	; 0x2b
 800f164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f168:	f89a 3000 	ldrb.w	r3, [sl]
 800f16c:	2b2a      	cmp	r3, #42	; 0x2a
 800f16e:	d015      	beq.n	800f19c <_vfiprintf_r+0x13c>
 800f170:	9a07      	ldr	r2, [sp, #28]
 800f172:	4654      	mov	r4, sl
 800f174:	2000      	movs	r0, #0
 800f176:	f04f 0c0a 	mov.w	ip, #10
 800f17a:	4621      	mov	r1, r4
 800f17c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f180:	3b30      	subs	r3, #48	; 0x30
 800f182:	2b09      	cmp	r3, #9
 800f184:	d94e      	bls.n	800f224 <_vfiprintf_r+0x1c4>
 800f186:	b1b0      	cbz	r0, 800f1b6 <_vfiprintf_r+0x156>
 800f188:	9207      	str	r2, [sp, #28]
 800f18a:	e014      	b.n	800f1b6 <_vfiprintf_r+0x156>
 800f18c:	eba0 0308 	sub.w	r3, r0, r8
 800f190:	fa09 f303 	lsl.w	r3, r9, r3
 800f194:	4313      	orrs	r3, r2
 800f196:	9304      	str	r3, [sp, #16]
 800f198:	46a2      	mov	sl, r4
 800f19a:	e7d2      	b.n	800f142 <_vfiprintf_r+0xe2>
 800f19c:	9b03      	ldr	r3, [sp, #12]
 800f19e:	1d19      	adds	r1, r3, #4
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	9103      	str	r1, [sp, #12]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	bfbb      	ittet	lt
 800f1a8:	425b      	neglt	r3, r3
 800f1aa:	f042 0202 	orrlt.w	r2, r2, #2
 800f1ae:	9307      	strge	r3, [sp, #28]
 800f1b0:	9307      	strlt	r3, [sp, #28]
 800f1b2:	bfb8      	it	lt
 800f1b4:	9204      	strlt	r2, [sp, #16]
 800f1b6:	7823      	ldrb	r3, [r4, #0]
 800f1b8:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ba:	d10c      	bne.n	800f1d6 <_vfiprintf_r+0x176>
 800f1bc:	7863      	ldrb	r3, [r4, #1]
 800f1be:	2b2a      	cmp	r3, #42	; 0x2a
 800f1c0:	d135      	bne.n	800f22e <_vfiprintf_r+0x1ce>
 800f1c2:	9b03      	ldr	r3, [sp, #12]
 800f1c4:	1d1a      	adds	r2, r3, #4
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	9203      	str	r2, [sp, #12]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	bfb8      	it	lt
 800f1ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1d2:	3402      	adds	r4, #2
 800f1d4:	9305      	str	r3, [sp, #20]
 800f1d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f2bc <_vfiprintf_r+0x25c>
 800f1da:	7821      	ldrb	r1, [r4, #0]
 800f1dc:	2203      	movs	r2, #3
 800f1de:	4650      	mov	r0, sl
 800f1e0:	f7f0 fffe 	bl	80001e0 <memchr>
 800f1e4:	b140      	cbz	r0, 800f1f8 <_vfiprintf_r+0x198>
 800f1e6:	2340      	movs	r3, #64	; 0x40
 800f1e8:	eba0 000a 	sub.w	r0, r0, sl
 800f1ec:	fa03 f000 	lsl.w	r0, r3, r0
 800f1f0:	9b04      	ldr	r3, [sp, #16]
 800f1f2:	4303      	orrs	r3, r0
 800f1f4:	3401      	adds	r4, #1
 800f1f6:	9304      	str	r3, [sp, #16]
 800f1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1fc:	482c      	ldr	r0, [pc, #176]	; (800f2b0 <_vfiprintf_r+0x250>)
 800f1fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f202:	2206      	movs	r2, #6
 800f204:	f7f0 ffec 	bl	80001e0 <memchr>
 800f208:	2800      	cmp	r0, #0
 800f20a:	d03f      	beq.n	800f28c <_vfiprintf_r+0x22c>
 800f20c:	4b29      	ldr	r3, [pc, #164]	; (800f2b4 <_vfiprintf_r+0x254>)
 800f20e:	bb1b      	cbnz	r3, 800f258 <_vfiprintf_r+0x1f8>
 800f210:	9b03      	ldr	r3, [sp, #12]
 800f212:	3307      	adds	r3, #7
 800f214:	f023 0307 	bic.w	r3, r3, #7
 800f218:	3308      	adds	r3, #8
 800f21a:	9303      	str	r3, [sp, #12]
 800f21c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f21e:	443b      	add	r3, r7
 800f220:	9309      	str	r3, [sp, #36]	; 0x24
 800f222:	e767      	b.n	800f0f4 <_vfiprintf_r+0x94>
 800f224:	fb0c 3202 	mla	r2, ip, r2, r3
 800f228:	460c      	mov	r4, r1
 800f22a:	2001      	movs	r0, #1
 800f22c:	e7a5      	b.n	800f17a <_vfiprintf_r+0x11a>
 800f22e:	2300      	movs	r3, #0
 800f230:	3401      	adds	r4, #1
 800f232:	9305      	str	r3, [sp, #20]
 800f234:	4619      	mov	r1, r3
 800f236:	f04f 0c0a 	mov.w	ip, #10
 800f23a:	4620      	mov	r0, r4
 800f23c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f240:	3a30      	subs	r2, #48	; 0x30
 800f242:	2a09      	cmp	r2, #9
 800f244:	d903      	bls.n	800f24e <_vfiprintf_r+0x1ee>
 800f246:	2b00      	cmp	r3, #0
 800f248:	d0c5      	beq.n	800f1d6 <_vfiprintf_r+0x176>
 800f24a:	9105      	str	r1, [sp, #20]
 800f24c:	e7c3      	b.n	800f1d6 <_vfiprintf_r+0x176>
 800f24e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f252:	4604      	mov	r4, r0
 800f254:	2301      	movs	r3, #1
 800f256:	e7f0      	b.n	800f23a <_vfiprintf_r+0x1da>
 800f258:	ab03      	add	r3, sp, #12
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	462a      	mov	r2, r5
 800f25e:	4b16      	ldr	r3, [pc, #88]	; (800f2b8 <_vfiprintf_r+0x258>)
 800f260:	a904      	add	r1, sp, #16
 800f262:	4630      	mov	r0, r6
 800f264:	f7fb fab4 	bl	800a7d0 <_printf_float>
 800f268:	4607      	mov	r7, r0
 800f26a:	1c78      	adds	r0, r7, #1
 800f26c:	d1d6      	bne.n	800f21c <_vfiprintf_r+0x1bc>
 800f26e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f270:	07d9      	lsls	r1, r3, #31
 800f272:	d405      	bmi.n	800f280 <_vfiprintf_r+0x220>
 800f274:	89ab      	ldrh	r3, [r5, #12]
 800f276:	059a      	lsls	r2, r3, #22
 800f278:	d402      	bmi.n	800f280 <_vfiprintf_r+0x220>
 800f27a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f27c:	f7ff fe7d 	bl	800ef7a <__retarget_lock_release_recursive>
 800f280:	89ab      	ldrh	r3, [r5, #12]
 800f282:	065b      	lsls	r3, r3, #25
 800f284:	f53f af12 	bmi.w	800f0ac <_vfiprintf_r+0x4c>
 800f288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f28a:	e711      	b.n	800f0b0 <_vfiprintf_r+0x50>
 800f28c:	ab03      	add	r3, sp, #12
 800f28e:	9300      	str	r3, [sp, #0]
 800f290:	462a      	mov	r2, r5
 800f292:	4b09      	ldr	r3, [pc, #36]	; (800f2b8 <_vfiprintf_r+0x258>)
 800f294:	a904      	add	r1, sp, #16
 800f296:	4630      	mov	r0, r6
 800f298:	f7fb fd3e 	bl	800ad18 <_printf_i>
 800f29c:	e7e4      	b.n	800f268 <_vfiprintf_r+0x208>
 800f29e:	bf00      	nop
 800f2a0:	08010144 	.word	0x08010144
 800f2a4:	08010164 	.word	0x08010164
 800f2a8:	08010124 	.word	0x08010124
 800f2ac:	080100bc 	.word	0x080100bc
 800f2b0:	080100c6 	.word	0x080100c6
 800f2b4:	0800a7d1 	.word	0x0800a7d1
 800f2b8:	0800f03d 	.word	0x0800f03d
 800f2bc:	080100c2 	.word	0x080100c2

0800f2c0 <__swbuf_r>:
 800f2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2c2:	460e      	mov	r6, r1
 800f2c4:	4614      	mov	r4, r2
 800f2c6:	4605      	mov	r5, r0
 800f2c8:	b118      	cbz	r0, 800f2d2 <__swbuf_r+0x12>
 800f2ca:	6983      	ldr	r3, [r0, #24]
 800f2cc:	b90b      	cbnz	r3, 800f2d2 <__swbuf_r+0x12>
 800f2ce:	f7ff fda3 	bl	800ee18 <__sinit>
 800f2d2:	4b21      	ldr	r3, [pc, #132]	; (800f358 <__swbuf_r+0x98>)
 800f2d4:	429c      	cmp	r4, r3
 800f2d6:	d12b      	bne.n	800f330 <__swbuf_r+0x70>
 800f2d8:	686c      	ldr	r4, [r5, #4]
 800f2da:	69a3      	ldr	r3, [r4, #24]
 800f2dc:	60a3      	str	r3, [r4, #8]
 800f2de:	89a3      	ldrh	r3, [r4, #12]
 800f2e0:	071a      	lsls	r2, r3, #28
 800f2e2:	d52f      	bpl.n	800f344 <__swbuf_r+0x84>
 800f2e4:	6923      	ldr	r3, [r4, #16]
 800f2e6:	b36b      	cbz	r3, 800f344 <__swbuf_r+0x84>
 800f2e8:	6923      	ldr	r3, [r4, #16]
 800f2ea:	6820      	ldr	r0, [r4, #0]
 800f2ec:	1ac0      	subs	r0, r0, r3
 800f2ee:	6963      	ldr	r3, [r4, #20]
 800f2f0:	b2f6      	uxtb	r6, r6
 800f2f2:	4283      	cmp	r3, r0
 800f2f4:	4637      	mov	r7, r6
 800f2f6:	dc04      	bgt.n	800f302 <__swbuf_r+0x42>
 800f2f8:	4621      	mov	r1, r4
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	f7ff fcf8 	bl	800ecf0 <_fflush_r>
 800f300:	bb30      	cbnz	r0, 800f350 <__swbuf_r+0x90>
 800f302:	68a3      	ldr	r3, [r4, #8]
 800f304:	3b01      	subs	r3, #1
 800f306:	60a3      	str	r3, [r4, #8]
 800f308:	6823      	ldr	r3, [r4, #0]
 800f30a:	1c5a      	adds	r2, r3, #1
 800f30c:	6022      	str	r2, [r4, #0]
 800f30e:	701e      	strb	r6, [r3, #0]
 800f310:	6963      	ldr	r3, [r4, #20]
 800f312:	3001      	adds	r0, #1
 800f314:	4283      	cmp	r3, r0
 800f316:	d004      	beq.n	800f322 <__swbuf_r+0x62>
 800f318:	89a3      	ldrh	r3, [r4, #12]
 800f31a:	07db      	lsls	r3, r3, #31
 800f31c:	d506      	bpl.n	800f32c <__swbuf_r+0x6c>
 800f31e:	2e0a      	cmp	r6, #10
 800f320:	d104      	bne.n	800f32c <__swbuf_r+0x6c>
 800f322:	4621      	mov	r1, r4
 800f324:	4628      	mov	r0, r5
 800f326:	f7ff fce3 	bl	800ecf0 <_fflush_r>
 800f32a:	b988      	cbnz	r0, 800f350 <__swbuf_r+0x90>
 800f32c:	4638      	mov	r0, r7
 800f32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f330:	4b0a      	ldr	r3, [pc, #40]	; (800f35c <__swbuf_r+0x9c>)
 800f332:	429c      	cmp	r4, r3
 800f334:	d101      	bne.n	800f33a <__swbuf_r+0x7a>
 800f336:	68ac      	ldr	r4, [r5, #8]
 800f338:	e7cf      	b.n	800f2da <__swbuf_r+0x1a>
 800f33a:	4b09      	ldr	r3, [pc, #36]	; (800f360 <__swbuf_r+0xa0>)
 800f33c:	429c      	cmp	r4, r3
 800f33e:	bf08      	it	eq
 800f340:	68ec      	ldreq	r4, [r5, #12]
 800f342:	e7ca      	b.n	800f2da <__swbuf_r+0x1a>
 800f344:	4621      	mov	r1, r4
 800f346:	4628      	mov	r0, r5
 800f348:	f000 f80c 	bl	800f364 <__swsetup_r>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d0cb      	beq.n	800f2e8 <__swbuf_r+0x28>
 800f350:	f04f 37ff 	mov.w	r7, #4294967295
 800f354:	e7ea      	b.n	800f32c <__swbuf_r+0x6c>
 800f356:	bf00      	nop
 800f358:	08010144 	.word	0x08010144
 800f35c:	08010164 	.word	0x08010164
 800f360:	08010124 	.word	0x08010124

0800f364 <__swsetup_r>:
 800f364:	4b32      	ldr	r3, [pc, #200]	; (800f430 <__swsetup_r+0xcc>)
 800f366:	b570      	push	{r4, r5, r6, lr}
 800f368:	681d      	ldr	r5, [r3, #0]
 800f36a:	4606      	mov	r6, r0
 800f36c:	460c      	mov	r4, r1
 800f36e:	b125      	cbz	r5, 800f37a <__swsetup_r+0x16>
 800f370:	69ab      	ldr	r3, [r5, #24]
 800f372:	b913      	cbnz	r3, 800f37a <__swsetup_r+0x16>
 800f374:	4628      	mov	r0, r5
 800f376:	f7ff fd4f 	bl	800ee18 <__sinit>
 800f37a:	4b2e      	ldr	r3, [pc, #184]	; (800f434 <__swsetup_r+0xd0>)
 800f37c:	429c      	cmp	r4, r3
 800f37e:	d10f      	bne.n	800f3a0 <__swsetup_r+0x3c>
 800f380:	686c      	ldr	r4, [r5, #4]
 800f382:	89a3      	ldrh	r3, [r4, #12]
 800f384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f388:	0719      	lsls	r1, r3, #28
 800f38a:	d42c      	bmi.n	800f3e6 <__swsetup_r+0x82>
 800f38c:	06dd      	lsls	r5, r3, #27
 800f38e:	d411      	bmi.n	800f3b4 <__swsetup_r+0x50>
 800f390:	2309      	movs	r3, #9
 800f392:	6033      	str	r3, [r6, #0]
 800f394:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f398:	81a3      	strh	r3, [r4, #12]
 800f39a:	f04f 30ff 	mov.w	r0, #4294967295
 800f39e:	e03e      	b.n	800f41e <__swsetup_r+0xba>
 800f3a0:	4b25      	ldr	r3, [pc, #148]	; (800f438 <__swsetup_r+0xd4>)
 800f3a2:	429c      	cmp	r4, r3
 800f3a4:	d101      	bne.n	800f3aa <__swsetup_r+0x46>
 800f3a6:	68ac      	ldr	r4, [r5, #8]
 800f3a8:	e7eb      	b.n	800f382 <__swsetup_r+0x1e>
 800f3aa:	4b24      	ldr	r3, [pc, #144]	; (800f43c <__swsetup_r+0xd8>)
 800f3ac:	429c      	cmp	r4, r3
 800f3ae:	bf08      	it	eq
 800f3b0:	68ec      	ldreq	r4, [r5, #12]
 800f3b2:	e7e6      	b.n	800f382 <__swsetup_r+0x1e>
 800f3b4:	0758      	lsls	r0, r3, #29
 800f3b6:	d512      	bpl.n	800f3de <__swsetup_r+0x7a>
 800f3b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3ba:	b141      	cbz	r1, 800f3ce <__swsetup_r+0x6a>
 800f3bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3c0:	4299      	cmp	r1, r3
 800f3c2:	d002      	beq.n	800f3ca <__swsetup_r+0x66>
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f7fb f883 	bl	800a4d0 <_free_r>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	6363      	str	r3, [r4, #52]	; 0x34
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3d4:	81a3      	strh	r3, [r4, #12]
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	6063      	str	r3, [r4, #4]
 800f3da:	6923      	ldr	r3, [r4, #16]
 800f3dc:	6023      	str	r3, [r4, #0]
 800f3de:	89a3      	ldrh	r3, [r4, #12]
 800f3e0:	f043 0308 	orr.w	r3, r3, #8
 800f3e4:	81a3      	strh	r3, [r4, #12]
 800f3e6:	6923      	ldr	r3, [r4, #16]
 800f3e8:	b94b      	cbnz	r3, 800f3fe <__swsetup_r+0x9a>
 800f3ea:	89a3      	ldrh	r3, [r4, #12]
 800f3ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3f4:	d003      	beq.n	800f3fe <__swsetup_r+0x9a>
 800f3f6:	4621      	mov	r1, r4
 800f3f8:	4630      	mov	r0, r6
 800f3fa:	f000 f84d 	bl	800f498 <__smakebuf_r>
 800f3fe:	89a0      	ldrh	r0, [r4, #12]
 800f400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f404:	f010 0301 	ands.w	r3, r0, #1
 800f408:	d00a      	beq.n	800f420 <__swsetup_r+0xbc>
 800f40a:	2300      	movs	r3, #0
 800f40c:	60a3      	str	r3, [r4, #8]
 800f40e:	6963      	ldr	r3, [r4, #20]
 800f410:	425b      	negs	r3, r3
 800f412:	61a3      	str	r3, [r4, #24]
 800f414:	6923      	ldr	r3, [r4, #16]
 800f416:	b943      	cbnz	r3, 800f42a <__swsetup_r+0xc6>
 800f418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f41c:	d1ba      	bne.n	800f394 <__swsetup_r+0x30>
 800f41e:	bd70      	pop	{r4, r5, r6, pc}
 800f420:	0781      	lsls	r1, r0, #30
 800f422:	bf58      	it	pl
 800f424:	6963      	ldrpl	r3, [r4, #20]
 800f426:	60a3      	str	r3, [r4, #8]
 800f428:	e7f4      	b.n	800f414 <__swsetup_r+0xb0>
 800f42a:	2000      	movs	r0, #0
 800f42c:	e7f7      	b.n	800f41e <__swsetup_r+0xba>
 800f42e:	bf00      	nop
 800f430:	200000fc 	.word	0x200000fc
 800f434:	08010144 	.word	0x08010144
 800f438:	08010164 	.word	0x08010164
 800f43c:	08010124 	.word	0x08010124

0800f440 <abort>:
 800f440:	b508      	push	{r3, lr}
 800f442:	2006      	movs	r0, #6
 800f444:	f000 f898 	bl	800f578 <raise>
 800f448:	2001      	movs	r0, #1
 800f44a:	f7f3 f83f 	bl	80024cc <_exit>

0800f44e <__swhatbuf_r>:
 800f44e:	b570      	push	{r4, r5, r6, lr}
 800f450:	460e      	mov	r6, r1
 800f452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f456:	2900      	cmp	r1, #0
 800f458:	b096      	sub	sp, #88	; 0x58
 800f45a:	4614      	mov	r4, r2
 800f45c:	461d      	mov	r5, r3
 800f45e:	da08      	bge.n	800f472 <__swhatbuf_r+0x24>
 800f460:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f464:	2200      	movs	r2, #0
 800f466:	602a      	str	r2, [r5, #0]
 800f468:	061a      	lsls	r2, r3, #24
 800f46a:	d410      	bmi.n	800f48e <__swhatbuf_r+0x40>
 800f46c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f470:	e00e      	b.n	800f490 <__swhatbuf_r+0x42>
 800f472:	466a      	mov	r2, sp
 800f474:	f000 f89c 	bl	800f5b0 <_fstat_r>
 800f478:	2800      	cmp	r0, #0
 800f47a:	dbf1      	blt.n	800f460 <__swhatbuf_r+0x12>
 800f47c:	9a01      	ldr	r2, [sp, #4]
 800f47e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f482:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f486:	425a      	negs	r2, r3
 800f488:	415a      	adcs	r2, r3
 800f48a:	602a      	str	r2, [r5, #0]
 800f48c:	e7ee      	b.n	800f46c <__swhatbuf_r+0x1e>
 800f48e:	2340      	movs	r3, #64	; 0x40
 800f490:	2000      	movs	r0, #0
 800f492:	6023      	str	r3, [r4, #0]
 800f494:	b016      	add	sp, #88	; 0x58
 800f496:	bd70      	pop	{r4, r5, r6, pc}

0800f498 <__smakebuf_r>:
 800f498:	898b      	ldrh	r3, [r1, #12]
 800f49a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f49c:	079d      	lsls	r5, r3, #30
 800f49e:	4606      	mov	r6, r0
 800f4a0:	460c      	mov	r4, r1
 800f4a2:	d507      	bpl.n	800f4b4 <__smakebuf_r+0x1c>
 800f4a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4a8:	6023      	str	r3, [r4, #0]
 800f4aa:	6123      	str	r3, [r4, #16]
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	6163      	str	r3, [r4, #20]
 800f4b0:	b002      	add	sp, #8
 800f4b2:	bd70      	pop	{r4, r5, r6, pc}
 800f4b4:	ab01      	add	r3, sp, #4
 800f4b6:	466a      	mov	r2, sp
 800f4b8:	f7ff ffc9 	bl	800f44e <__swhatbuf_r>
 800f4bc:	9900      	ldr	r1, [sp, #0]
 800f4be:	4605      	mov	r5, r0
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f7fb f871 	bl	800a5a8 <_malloc_r>
 800f4c6:	b948      	cbnz	r0, 800f4dc <__smakebuf_r+0x44>
 800f4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4cc:	059a      	lsls	r2, r3, #22
 800f4ce:	d4ef      	bmi.n	800f4b0 <__smakebuf_r+0x18>
 800f4d0:	f023 0303 	bic.w	r3, r3, #3
 800f4d4:	f043 0302 	orr.w	r3, r3, #2
 800f4d8:	81a3      	strh	r3, [r4, #12]
 800f4da:	e7e3      	b.n	800f4a4 <__smakebuf_r+0xc>
 800f4dc:	4b0d      	ldr	r3, [pc, #52]	; (800f514 <__smakebuf_r+0x7c>)
 800f4de:	62b3      	str	r3, [r6, #40]	; 0x28
 800f4e0:	89a3      	ldrh	r3, [r4, #12]
 800f4e2:	6020      	str	r0, [r4, #0]
 800f4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4e8:	81a3      	strh	r3, [r4, #12]
 800f4ea:	9b00      	ldr	r3, [sp, #0]
 800f4ec:	6163      	str	r3, [r4, #20]
 800f4ee:	9b01      	ldr	r3, [sp, #4]
 800f4f0:	6120      	str	r0, [r4, #16]
 800f4f2:	b15b      	cbz	r3, 800f50c <__smakebuf_r+0x74>
 800f4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	f000 f86b 	bl	800f5d4 <_isatty_r>
 800f4fe:	b128      	cbz	r0, 800f50c <__smakebuf_r+0x74>
 800f500:	89a3      	ldrh	r3, [r4, #12]
 800f502:	f023 0303 	bic.w	r3, r3, #3
 800f506:	f043 0301 	orr.w	r3, r3, #1
 800f50a:	81a3      	strh	r3, [r4, #12]
 800f50c:	89a0      	ldrh	r0, [r4, #12]
 800f50e:	4305      	orrs	r5, r0
 800f510:	81a5      	strh	r5, [r4, #12]
 800f512:	e7cd      	b.n	800f4b0 <__smakebuf_r+0x18>
 800f514:	0800edb1 	.word	0x0800edb1

0800f518 <_malloc_usable_size_r>:
 800f518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f51c:	1f18      	subs	r0, r3, #4
 800f51e:	2b00      	cmp	r3, #0
 800f520:	bfbc      	itt	lt
 800f522:	580b      	ldrlt	r3, [r1, r0]
 800f524:	18c0      	addlt	r0, r0, r3
 800f526:	4770      	bx	lr

0800f528 <_raise_r>:
 800f528:	291f      	cmp	r1, #31
 800f52a:	b538      	push	{r3, r4, r5, lr}
 800f52c:	4604      	mov	r4, r0
 800f52e:	460d      	mov	r5, r1
 800f530:	d904      	bls.n	800f53c <_raise_r+0x14>
 800f532:	2316      	movs	r3, #22
 800f534:	6003      	str	r3, [r0, #0]
 800f536:	f04f 30ff 	mov.w	r0, #4294967295
 800f53a:	bd38      	pop	{r3, r4, r5, pc}
 800f53c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f53e:	b112      	cbz	r2, 800f546 <_raise_r+0x1e>
 800f540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f544:	b94b      	cbnz	r3, 800f55a <_raise_r+0x32>
 800f546:	4620      	mov	r0, r4
 800f548:	f000 f830 	bl	800f5ac <_getpid_r>
 800f54c:	462a      	mov	r2, r5
 800f54e:	4601      	mov	r1, r0
 800f550:	4620      	mov	r0, r4
 800f552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f556:	f000 b817 	b.w	800f588 <_kill_r>
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d00a      	beq.n	800f574 <_raise_r+0x4c>
 800f55e:	1c59      	adds	r1, r3, #1
 800f560:	d103      	bne.n	800f56a <_raise_r+0x42>
 800f562:	2316      	movs	r3, #22
 800f564:	6003      	str	r3, [r0, #0]
 800f566:	2001      	movs	r0, #1
 800f568:	e7e7      	b.n	800f53a <_raise_r+0x12>
 800f56a:	2400      	movs	r4, #0
 800f56c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f570:	4628      	mov	r0, r5
 800f572:	4798      	blx	r3
 800f574:	2000      	movs	r0, #0
 800f576:	e7e0      	b.n	800f53a <_raise_r+0x12>

0800f578 <raise>:
 800f578:	4b02      	ldr	r3, [pc, #8]	; (800f584 <raise+0xc>)
 800f57a:	4601      	mov	r1, r0
 800f57c:	6818      	ldr	r0, [r3, #0]
 800f57e:	f7ff bfd3 	b.w	800f528 <_raise_r>
 800f582:	bf00      	nop
 800f584:	200000fc 	.word	0x200000fc

0800f588 <_kill_r>:
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4d07      	ldr	r5, [pc, #28]	; (800f5a8 <_kill_r+0x20>)
 800f58c:	2300      	movs	r3, #0
 800f58e:	4604      	mov	r4, r0
 800f590:	4608      	mov	r0, r1
 800f592:	4611      	mov	r1, r2
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	f7f2 ff89 	bl	80024ac <_kill>
 800f59a:	1c43      	adds	r3, r0, #1
 800f59c:	d102      	bne.n	800f5a4 <_kill_r+0x1c>
 800f59e:	682b      	ldr	r3, [r5, #0]
 800f5a0:	b103      	cbz	r3, 800f5a4 <_kill_r+0x1c>
 800f5a2:	6023      	str	r3, [r4, #0]
 800f5a4:	bd38      	pop	{r3, r4, r5, pc}
 800f5a6:	bf00      	nop
 800f5a8:	20002e34 	.word	0x20002e34

0800f5ac <_getpid_r>:
 800f5ac:	f7f2 bf76 	b.w	800249c <_getpid>

0800f5b0 <_fstat_r>:
 800f5b0:	b538      	push	{r3, r4, r5, lr}
 800f5b2:	4d07      	ldr	r5, [pc, #28]	; (800f5d0 <_fstat_r+0x20>)
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	4608      	mov	r0, r1
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	602b      	str	r3, [r5, #0]
 800f5be:	f7f2 ffd4 	bl	800256a <_fstat>
 800f5c2:	1c43      	adds	r3, r0, #1
 800f5c4:	d102      	bne.n	800f5cc <_fstat_r+0x1c>
 800f5c6:	682b      	ldr	r3, [r5, #0]
 800f5c8:	b103      	cbz	r3, 800f5cc <_fstat_r+0x1c>
 800f5ca:	6023      	str	r3, [r4, #0]
 800f5cc:	bd38      	pop	{r3, r4, r5, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20002e34 	.word	0x20002e34

0800f5d4 <_isatty_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d06      	ldr	r5, [pc, #24]	; (800f5f0 <_isatty_r+0x1c>)
 800f5d8:	2300      	movs	r3, #0
 800f5da:	4604      	mov	r4, r0
 800f5dc:	4608      	mov	r0, r1
 800f5de:	602b      	str	r3, [r5, #0]
 800f5e0:	f7f2 ffd3 	bl	800258a <_isatty>
 800f5e4:	1c43      	adds	r3, r0, #1
 800f5e6:	d102      	bne.n	800f5ee <_isatty_r+0x1a>
 800f5e8:	682b      	ldr	r3, [r5, #0]
 800f5ea:	b103      	cbz	r3, 800f5ee <_isatty_r+0x1a>
 800f5ec:	6023      	str	r3, [r4, #0]
 800f5ee:	bd38      	pop	{r3, r4, r5, pc}
 800f5f0:	20002e34 	.word	0x20002e34

0800f5f4 <_init>:
 800f5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f6:	bf00      	nop
 800f5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5fa:	bc08      	pop	{r3}
 800f5fc:	469e      	mov	lr, r3
 800f5fe:	4770      	bx	lr

0800f600 <_fini>:
 800f600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f602:	bf00      	nop
 800f604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f606:	bc08      	pop	{r3}
 800f608:	469e      	mov	lr, r3
 800f60a:	4770      	bx	lr
